<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tutorial on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/tutorial/</link>
    <description>Recent content in Tutorial on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 04 Jul 2021 19:45:21 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setup a Samba Server in Azure and Make It Accessible Over Internet</title>
      <link>https://fahmifj.github.io/blog/setup-a-samba-server-in-azure-and-make-it-accessible-over-internet/</link>
      <pubDate>Sun, 04 Jul 2021 19:45:21 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/setup-a-samba-server-in-azure-and-make-it-accessible-over-internet/</guid>
      <description>Last month, I was asked to setup a Samba/SMB server that is accessible over the Internet. Because it will only be used temporarily, I decided to use an Azure Virtual Machine (VM) instead of buying a dedicated VPS.
In this post, I’ll share my documentation on how to setup a Samba server in Azure.
Before proceeding further, I&amp;rsquo;ll state that:
 Exposing an SMB Server directly to the Internet is not recommended, or not considered to be &amp;lsquo;best practice&amp;rsquo;.</description>
      <content:encoded><![CDATA[<p>Last month, I was asked to setup a Samba/SMB server that is accessible over the Internet. Because it will only be used temporarily, I decided to use an Azure Virtual Machine (VM) instead of buying a dedicated VPS.</p>
<p>In this post, I’ll share my documentation on how to setup a Samba server in Azure.</p>
<p>Before proceeding further, I&rsquo;ll state that:</p>
<blockquote>
<p>Exposing an SMB Server directly to the Internet is not recommended, or not considered to be &lsquo;best practice&rsquo;. The safest way to make it accessible over the Internet is by setting up a VPN server and putting the SMB inside the VPN network.</p>
</blockquote>
<h2 id="goals-and-outcomes">Goals and Outcomes</h2>
<p>The goal here is exactly the same as what’s written in the title, but by the end of this post, you will be able to:</p>
<ul>
<li>Deploy an Ubuntu server in Azure</li>
<li>Setup and Configure a Samba server</li>
<li>Exposing Samba server over Internet</li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<p>The one and only prerequisite is:</p>
<ul>
<li>Azure Account</li>
</ul>
<p>Also, since this post won&rsquo;t be detailed step by step, I&rsquo;ll assume that you have:</p>
<ul>
<li>Basic knowledge of Azure, at least menu navigation and creating a resource group.</li>
<li>Basic knowledge of Linux</li>
</ul>
<p>Let&rsquo;s jump in!</p>
<h2 id="vm-configuration--deploy">VM Configuration &amp; Deploy</h2>
<p>At this step, I already have a resource group called <code>IAMF_SMB-TEST</code> and I&rsquo;ll be creating a VM instance inside this resource. It&rsquo;s a small server used by 4-5 users, so B1s will be enough. You&rsquo;re free to customize the VM.</p>
<p>The VM details of mine can be seen in the following image:</p>
<p><img class="img-container" src="imgs/image-20210513170545346.png" alt="image-20210513170545346"  />
</p>
<p>For authentication to the server, I&rsquo;ll be using an SSH public key here instead of a password. The account for server administration is called <code>azure-smb</code>. Since the authentication is SSH, this VM will have an SSH port open publicly (internet).</p>
<p><img class="img-container" src="imgs/image-20210513170638603.png" alt="image-20210513170638603"  />
</p>
<p>In the following section, I&rsquo;ll use a standard SSD and leave the other settings at their defaults.</p>
<p><img class="img-container" src="imgs/image-20210513170710958.png" alt="image-20210513170710958"  />
</p>
<p>In the <strong>Networking</strong> section, I&rsquo;ll just create a new virtual network. See the following image for details:</p>
<p><img class="img-container" src="imgs/image-20210513170824172.png" alt="image-20210513170824172"  />
</p>
<p>In the <strong>Management</strong> section, because it will be temporary, I&rsquo;ll just disable the boot diagnostics.</p>
<p><img class="img-container" src="imgs/image-20210513171009570.png" alt="image-20210513171009570"  />
</p>
<p>I&rsquo;ll leave the <strong>Advanced</strong> with the default settings and skip the <strong>Tags</strong> section.</p>
<p>The last section is <strong>Review + Create</strong>, which basically reviews the VM configuration. After I finish the review, I&rsquo;ll press the <strong>Create</strong> button.</p>
<p><img class="img-container" src="imgs/image-20210513171153896.png" alt="image-20210513171153896"  />
</p>
<p>When the <strong>Create</strong> button is clicked, the VM will be automatically deployed.</p>
<p><img class="img-container" src="imgs/image-20210513171501031.png" alt="image-20210513171501031"  />
</p>
<h2 id="vm-login-via-ssh">VM Login via SSH</h2>
<p>The next step is to login to the deployed VM instance via SSH using the previously created username and key/password. The public IP of the VM instance can be found at the <code>Dashboard</code> &gt; <code>RESOURCE_GROUP_NAME</code> &gt; <code>PUBLIC_IP_NAME</code>. In my case, it is <code>Dashboard</code> &gt; <code>IAMF_SMB-TEST</code> &gt; <code>smb-server-ip</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ ssh -i private_key azure-smb@PUBLIC_IP_ADDRESS
</code></pre></div><p><img class="img-container" src="imgs/image-20210513171606268.png" alt="image-20210513171606268"  />
</p>
<h2 id="smb-configuration">SMB Configuration</h2>
<h3 id="installation-and-initial-setup">Installation and Initial Setup</h3>
<p>First thing first, let&rsquo;s update the repository list.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo apt update
</code></pre></div><p>After that, install <code>Samba</code> with the following command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo apt install samba
</code></pre></div><p>Once the installation is done, check the Samba service daemon status.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo systemctl status smbd
● smbd.service - Samba SMB Daemon
   Loaded: loaded <span class="o">(</span>/lib/systemd/system/smbd.service<span class="p">;</span> enabled<span class="p">;</span> vendor preset: enabled<span class="o">)</span>
   Active: active <span class="o">(</span>running<span class="o">)</span> since Thu 2021-05-13 10:17:45 UTC<span class="p">;</span> 3min 48s ago
     Docs: man:smbd<span class="o">(</span>8<span class="o">)</span>
           man:samba<span class="o">(</span>7<span class="o">)</span>
           man:smb.conf<span class="o">(</span>5<span class="o">)</span>
 Main PID: <span class="m">2098</span> <span class="o">(</span>smbd<span class="o">)</span>
   Status: <span class="s2">&#34;smbd: ready to serve connections...&#34;</span>
    Tasks: <span class="m">4</span> <span class="o">(</span>limit: 1056<span class="o">)</span>
   CGroup: /system.slice/smbd.service
           ├─2098 /usr/sbin/smbd --foreground --no-process-group
           ├─2123 /usr/sbin/smbd --foreground --no-process-group
           ├─2124 /usr/sbin/smbd --foreground --no-process-group
           └─2129 /usr/sbin/smbd --foreground --no-process-group

May <span class="m">13</span> 10:17:44 smb-server systemd<span class="o">[</span>1<span class="o">]</span>: Starting Samba SMB Daemon...
May <span class="m">13</span> 10:17:45 smb-server systemd<span class="o">[</span>1<span class="o">]</span>: Started Samba SMB Daemon.
</code></pre></div><p>Samba is ready, and now let&rsquo;s configure the share folder.</p>
<h3 id="shares-configuration">Shares Configuration</h3>
<p>First, let&rsquo;s create a backup file of the original configuration, so we can reset it to the default configuration, just in case something goes wrong.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo cp /etc/samba/smb.conf<span class="o">{</span>,.backup<span class="o">}</span>
</code></pre></div><p>Now create a share folder name it <code>sambashare</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ mkdir sambashare
</code></pre></div><p>Then open the samba configuration file with a text editor like <code>nano</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo nano /etc/samba/smb.conf
</code></pre></div><p>Go straight to the bottom of the file and add the following lines.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>sambashare<span class="o">]</span>
    <span class="nv">comment</span> <span class="o">=</span> Samba Share
    <span class="nv">path</span> <span class="o">=</span> /home/azure-smb/sambashare
    <span class="nb">read</span> <span class="nv">only</span> <span class="o">=</span> no
    <span class="nv">browsable</span> <span class="o">=</span> yes
</code></pre></div><p>Details for configuring share can be read <a href="https://www.samba.org/samba/docs/current/man-html/smb.conf.5.html">here</a> or <a href="https://web.mit.edu/rhel-doc/5/RHEL-5-manual/Deployment_Guide-en-US/s1-samba-configuring.html">here</a>.</p>
<p>Save the file and restart the SMB daemon with the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo service smbd restart
</code></pre></div><p>Lastly, update the firewall to allow network traffic for Samba/SMB.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo ufw allow samba
</code></pre></div><p>This is the basic configuration of creating a Samba share, but from here you can create another share with more complex configuration. Here are my references:</p>
<ul>
<li><a href="https://linuxize.com/post/how-to-install-and-configure-samba-on-ubuntu-18-04/">https://linuxize.com/post/how-to-install-and-configure-samba-on-ubuntu-18-04/</a></li>
<li><a href="https://confluence.jaytaala.com/display/TKB/Create+samba+share+writeable+by+all%2C+group%2C+or+only+a+user">https://confluence.jaytaala.com/display/TKB/Create+samba+share+writeable+by+all%2C+group%2C+or+only+a+user</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-samba-share-for-a-small-organization-on-ubuntu-16-04">https://www.digitalocean.com/community/tutorials/how-to-set-up-a-samba-share-for-a-small-organization-on-ubuntu-16-04</a></li>
</ul>
<h3 id="add-samba-user">Add Samba User</h3>
<p>Currently, our Linux account for administering the server is <code>azure-smb</code> and we can&rsquo;t use this account password to access the SMB shares yet. Instead, we need to create a password and bind it to <code>azure-smb</code>.</p>
<p>But now, let&rsquo;s just create a dedicated user for SMB called <code>user1</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo useradd --system -s /usr/sbin/nologin user1
</code></pre></div><p>Assign <code>user1</code> to be the owner of the share</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo chown user1 /home/azure-smb/sambashare
</code></pre></div><p>After that, create a Samba password for <code>user1</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo smbpasswd -a user1
New SMB password: 
Retype new SMB password: 
Added user user1.
</code></pre></div><p>Finally, enable the user.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo smbpasswd -e user1
Enabled user user1.
</code></pre></div><h2 id="expose-to-internet">Expose to Internet</h2>
<h3 id="allow-inbound-connection">Allow Inbound Connection</h3>
<p>Now if we want to make it available on the Internet, we have to go back to the Azure Portal to open the SMB port (445) on the NIC Public IP and allow inbound connection through that port. The connection is then forwarded to our SMB port on the NIC Private IP.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">PUBLIC_IP:445 --&gt; PRIVATE_IP:445
</code></pre></div><p>To do that open up the Networking settings of the SMB VM and click on <strong>Add inbound port rule</strong> button.</p>
<p><img class="img-container" src="imgs/image-20210513173838694.png" alt="image-20210513173838694"  />
</p>
<p>On the new Windows, configure the rule to allow any source (incoming IP) and any source port (incoming port) to connect to the SMB port (445). The details configuration is as follows:</p>
<p><img class="img-container" src="imgs/image-20210513173858659.png" alt="image-20210513173858659"  />
</p>
<p>At the bottom, the configuration is as follows:</p>
<p><img class="img-container" src="imgs/image-20210513173929271.png" alt="image-20210513173929271"  />
</p>
<p>When you&rsquo;re done, click on the <strong>Add</strong> button and the new rule should listed in the <strong>Inbound port rules</strong> section.</p>
<p><img class="img-container" src="imgs/image-20210513174018895.png" alt="image-20210513174018895"  />
</p>
<h3 id="test-access">Test Access</h3>
<p>We can use Nmap to see if the SMB port has been opened.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ nmap -p445 -sV VM_PUBLIC_IP
</code></pre></div><p><img class="img-container" src="imgs/image-20210513174227862.png" alt="image-20210513174227862"  />
</p>
<p>To interact with the SMB server via CLI, you can use <code>smbclient</code>. Install it with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt install smbclient
</code></pre></div><p>Once it installed, connect to the share with following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ smbclient //<span class="o">[</span>IP<span class="o">]</span>/<span class="o">[</span>sharename<span class="o">]</span> 
</code></pre></div><p>Adding <code>-N -L</code> can list all the available shares.</p>
<p><img class="img-container" src="imgs/image-20210513174416250.png" alt="image-20210513174416250"  />
</p>
<p>You can also provide the password directly in the terminal:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ smbclient //<span class="o">[</span>IP<span class="o">]</span>/<span class="o">[</span>sharename<span class="o">]</span> -U <span class="o">[</span>username<span class="o">]</span> <span class="o">[</span>password<span class="o">]</span>
$ smbclient //<span class="o">[</span>IP<span class="o">]</span>/<span class="o">[</span>sharename<span class="o">]</span> -U <span class="s1">&#39;username%password&#39;</span>
</code></pre></div><p>And that&rsquo;s all. It is not that detailed, but I hope you will find it useful.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hugo Setup and Deployment</title>
      <link>https://fahmifj.github.io/blog/hugo-setup-and-deployment/</link>
      <pubDate>Sun, 13 Jun 2021 11:12:48 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/hugo-setup-and-deployment/</guid>
      <description>A quick tutorial about setting up a site using Hugo</description>
      <content:encoded><![CDATA[<p>Looking back at my first post in Bahasa Indonesia, I said that I was using Hugo to build this blog. So in this post, I’ll share how to create your own!</p>
<h2 id="goals">Goals</h2>
<p>Below are the main goals of this post:</p>
<ul>
<li>Installing Hugo</li>
<li>Using Hugo theme</li>
<li>Deploying Hugo site with Github</li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<p>There are some prerequisites needed to accomplish these goals:</p>
<ul>
<li>A GitHub account</li>
<li><a href="https://git-scm.com/downloads">Git Bash</a> for Windows users</li>
<li>Basics knowledge of Git (commit, push, pull, creating repository, know what is local and remote repository)</li>
<li>Basics knowledge/use of CLI (cd, ls, pwd, mv, rm, mkdir)</li>
</ul>
<p>If all set, then let&rsquo;s get started</p>
<h2 id="installing-hugo">Installing Hugo</h2>
<p>First, download Hugo executable binary at:</p>
<ul>
<li><a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases</a></li>
</ul>
<p>Pick your Hugo version according to what OS you’re on. There is also the extended version, which you should use if you’re building your own theme or picking a theme that uses Sass/SCSS.</p>
<p>I will assume that you have downloaded the binary and extracted it somewhere on your system.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ ls -l
total 47488
-rw-r--r-- 1 Fahmi FJ 197121    11357 Mar 22 00:17 LICENSE
-rw-r--r-- 1 Fahmi FJ 197121    12345 Mar 22 00:17 README.md
-rwxr-xr-x 1 Fahmi FJ 197121 48599040 Mar 22 01:04 hugo.exe
</code></pre></div><p>Let&rsquo;s test it on terminal by typing:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ hugo.exe version
hugo v0.82.0-9D960784+extended windows/amd64 BuildDate=2021-03-21T17:28:04Z VendorInfo=gohugoio
</code></pre></div><p>At this time, Hugo’s binary is not available in a system-wide (it’s not accessible outside the current directory).</p>
<p>So, let&rsquo;s make it accessible from anywhere by adding the binary location to what is known as <a href="https://en.wikipedia.org/wiki/Environment_variable">PATH variable</a>.</p>
<h3 id="windows">Windows</h3>
<p>For Windows users, let&rsquo;s create a folder called <code>bin</code> in <code>C:/</code> .</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">C:\&gt;mkdir bin
</code></pre></div><p>Once the folder is created, move your Hugo binary into it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">C:\&gt;dir bin
 Volume in drive C is Windows
 Volume Serial Number is AC06-7D93

 Directory of C:\bin

13/06/2021  08:07    &lt;DIR&gt;          .
13/06/2021  08:07    &lt;DIR&gt;          ..
22/03/2021  01:04        48.599.040 hugo.exe
               1 File(s)     48.599.040 bytes
               2 Dir(s)  57.909.837.824 bytes free
</code></pre></div><p>After that, hit <code>Win + R</code> on your keyboard and type:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">rundll32.exe sysdm.cpl,EditEnvironmentVariables
</code></pre></div><p>You should see a window with &ldquo;Environment Variables&rdquo; in the title. We&rsquo;re going to edit <code>Path</code> variable, so select that <code>Path</code> variable and click on <strong>Edit</strong> button.</p>
<p><img class="img-container" src="imgs/image-20210613081626397.png" alt="image-20210613081626397"  />
</p>
<p>On the Edit window, click on <strong>New</strong> button to add a new path and type <code>C:\bin</code>.</p>
<p><img class="img-container" src="imgs/image-20210613082450289.png" alt="image-20210613082450289"  />
</p>
<p>After that, just hit all the <strong>OK</strong> button.</p>
<p>Re-open your Windows terminal and run <code>hugo version</code>. If it returns the same output as previous one, then go to the next section.</p>
<h3 id="linux">Linux</h3>
<blockquote>
<p>I know those who use Linux probably already know how to 😁.</p>
</blockquote>
<p>For Linux users, let&rsquo;s create a folder called <code>bin</code> under <code>/home/username/.local/[here]</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ mkdir -p ~/.local/bin
</code></pre></div><p>Open your <code>.bashrc</code> or <code>.zshrc</code> file, it is located at <code>/home/username/.[zsh|bash]rc</code>, with your favorite text editor such as vim and simply add these lines at the top of your <code>.bashrc/.zshrc</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">PATH_HUGO=&#39;/home/username/.local/bin&#39;
export PATH=$PATH_HUGO:$PATH
</code></pre></div><p>Reopen your terminal and run <code>hugo version</code> from any directory and see if it&rsquo;s returns the version.</p>
<h2 id="creating-your-first-site">Creating Your First Site</h2>
<p>We can create a site from anywhere by issuing the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ hugo new site [site-name]
</code></pre></div><blockquote>
<p>I recommend you to create a site in a specific folder such as <code>workspace</code>.</p>
</blockquote>
<p>For now, let&rsquo;s create a site called <code>my-blog</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ hugo new site my-blog
Congratulations! Your new Hugo site is created in C:\Users\fahmi\Desktop\test\my-blog.

Just a few more steps and you&#39;re ready to go:

1. Download a theme into the same-named folder.
   Choose a theme from https://themes.gohugo.io/ or
   create your own with the &#34;hugo new theme &lt;THEMENAME&gt;&#34; command.
2. Perhaps you want to add some content. You can add single files
   with &#34;hugo new &lt;SECTIONNAME&gt;\&lt;FILENAME&gt;.&lt;FORMAT&gt;&#34;.
3. Start the built-in live server via &#34;hugo server&#34;.

Visit https://gohugo.io/ for quickstart guide and full documentation.
</code></pre></div><p>You can see that Hugo creates a new folder called  <code>my-blog</code> at <code>C:\Users\fahmi\Desktop\test\my-blog</code>, and <code>my-blog</code> has the following directory structure:</p>
<pre><code>my-blog
├── archetypes
│   └── default.md
├── config.toml
├── content
├── data
├── layouts
├── static
└── themes
</code></pre><p>Go to the <code>my-blog</code> folder and type <code>hugo server</code> in the terminal to host it locally.</p>
<pre><code>$ cd my-blog
$ hugo server
</code></pre><p>By default, the site is hosted at <code>http://localhost:1313/</code> , but it&rsquo;ll be empty because we haven&rsquo;t added any content yet.</p>
<h2 id="installing-hugo-theme">Installing Hugo Theme</h2>
<p>My blog uses a theme called <a href="https://themes.gohugo.io/hugo-papermod/">PaperMod</a>, so l&rsquo;ll be using that here, too.</p>
<p>First, let&rsquo;s delete the previous <code>my-blog</code> and recreate it with the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ hugo new site my-blog -f yml
</code></pre></div><p>Let&rsquo;s move into <code>my-blog</code> and initialize a git repository there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ cd my-blog
$ git init
</code></pre></div><p>After that,  go to the <code>themes</code> folder and clone the PaperMod theme there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ cd themes
$ git clone https://github.com/adityatelange/hugo-PaperMod PaperMod --depth=1
</code></pre></div><p>We’ll add the theme as a submodule of <code>my-blog</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ git submodule add https://github.com/adityatelange/hugo-PaperMod.git PaperMod
</code></pre></div><p>Now, let&rsquo;s go back to the root directory (<code>my-blog</code>), then replace/overwrite our <code>config.yml</code> with <a href="https://raw.githubusercontent.com/adityatelange/hugo-PaperMod/exampleSite/config.yml">this</a>, but change the value of <code>baseUrl</code> and <code>theme</code> to these:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">baseURL: &#34;&#34;
theme: PaperMod
</code></pre></div><p>Test it with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ hugo server
</code></pre></div><h2 id="creating-your-first-post">Creating Your First Post</h2>
<p>We can create a new post with by issuing the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ hugo new post/new-post.md
</code></pre></div><p>You can edit <code>new-post.md</code> after that, the file should be under <code>my-blog/content/post/[here]</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ ls -l my-blog/content/post/
total 1
-rw-r--r-- 1 Fahmi FJ 197121 70 Jun 13 09:34 my-post.md
</code></pre></div><p>To see your post in the site, change the value <code>draft</code> from <code>true</code> to <code>false</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">---
title: &#34;My Post&#34;
date: 2021-06-13T09:34:43+07:00
draft: false
---

My first post
</code></pre></div><p>It should be on your site now.</p>
<h2 id="deploying-site-on-github">Deploying Site on GitHub</h2>
<p>From here, thing you need to know that when you run <code>hugo server</code>, Hugo will generate all the site resources and serve them from memory. But, if you run <code>hugo</code>, Hugo will generates all the site resources inside <code>public</code> folder (<code>my-blog/public/[here]</code>).</p>
<p>The files in this <code>public</code> folder are the files that we are going to host on GitHub. We can simply upload all the files in the <code>public</code> folder into a GitHub repository.</p>
<p>I&rsquo;m not good at explaining it on English, so let&rsquo;s do that in action!</p>
<p>But, before that, you have to change your site&rsquo;s <strong>base URL</strong> in <code>config.yml</code> to:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">baseURL: &#34;https://[your_user_name].github.io/my-blog/&#34;
</code></pre></div><p>For example, my username is <code>fahmifj</code> , so my config would be:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">baseURL: &#34;https://fahmifj.github.io/my-blog/&#34;
</code></pre></div><p>Once you done with the config, type <code>hugo</code> at the site root directory, Hugo will re-generates the web files at the <code>public</code> folder.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ hugo
Start building sites …

                   <span class="p">|</span> EN <span class="p">|</span> FR <span class="p">|</span> FA
-------------------+----+----+-----
  Pages            <span class="p">|</span> <span class="m">14</span> <span class="p">|</span> <span class="m">10</span> <span class="p">|</span> <span class="m">10</span>
  Paginator pages  <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
  Non-page files   <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
  Static files     <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
  Processed images <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
  Aliases          <span class="p">|</span>  <span class="m">3</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">1</span>
  Sitemaps         <span class="p">|</span>  <span class="m">2</span> <span class="p">|</span>  <span class="m">1</span> <span class="p">|</span>  <span class="m">1</span>
  Cleaned          <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>

Total in <span class="m">147</span> ms
</code></pre></div><p>After that, <a href="https://docs.github.com/en/github/getting-started-with-github/quickstart/create-a-repo">create a new repository</a> called <code>my-blog</code> on GitHub.</p>
<p>Once the repo is created, click on <strong>Upload an existing file</strong>.</p>
<p><img class="img-container" src="imgs/image-20210613095820873.png" alt="image-20210613095820873"  />
</p>
<p>Then simply drag and drop all the files from the <code>public</code> folder there.</p>
<p><img class="img-container" src="imgs/image-20210613095945135.png" alt="image-20210613095945135"  />
</p>
<p>Once all the files are uploaded, commit the changes, I&rsquo;ll leave the commit message as default.</p>
<p><img class="img-container" src="imgs/image-20210613101009392.png" alt="image-20210613101009392"  />
</p>
<p>After that, go the GitHub pages settings at <code>https://github.com/your-username/my-blog/settings/pages</code> to host your site.</p>
<p><img class="img-container" src="imgs/image-20210613101748114.png" alt="image-20210613101748114"  />
</p>
<p>There you go!</p>
<p><img class="img-container" src="imgs/image-20210613101715896.png" alt="image-20210613101715896"  />
</p>
<p>If you don&rsquo;t see your site there or it returns a 404 error, then just wait for a few minutes more.</p>
<p>From here, we learned how to deploy/host our Hugo site on GitHub. However, this is not an efficient method of updating your site, therefore let&rsquo;s write a deployment script.</p>
<h2 id="deployment-script">Deployment Script</h2>
<p>Assuming you&rsquo;re inside <code>my-blog</code> , then go to the <code>public</code> directory, do files and folders clean up then initialize a git repository there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ cd public
$ rm -rf *
$ git init
</code></pre></div><p>Still inside the <code>public</code> directory, set the previously created <code>my-blog</code> repository as the remote repository and run <code>git pull</code> afterwards.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ git remote add origin https://github.com/your-username/my-blog.git
$ git pull origin main
</code></pre></div><p>Return to the site root directory then add the <code>public</code> folder as a submodule.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ cd ../
$ git submodule add https://github.com/your-username/my-blog.git public
</code></pre></div><p>Now let&rsquo;s create a deployment script at the site root directory and name it as <code>deploy.sh</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nb">echo</span> -e <span class="s2">&#34;\033[0;32mDeploying blog to GitHub...\033[0m&#34;</span>

<span class="c1"># Clean public folder</span>
hugo --cleanDestinationDir

<span class="c1"># Go to to public folder</span>
<span class="nb">cd</span> public/

<span class="c1"># Add untracked files, hide output</span>
git add -A &gt; /dev/null

<span class="c1"># Generate a fixed commit message with date and time</span>
<span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;[`date &#34;</span>+%R %d-%h-%Y<span class="s2">&#34;]` Site update&#34;</span>
	
<span class="c1"># Check for additional commit message</span>
<span class="nb">read</span> -p <span class="s2">&#34;Add commit message: &#34;</span> add_msg
<span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$add_msg</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;&#34;</span> <span class="o">]</span>
	<span class="k">then</span> 
	<span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$msg</span><span class="s2"> - </span><span class="nv">$add_msg</span><span class="s2">&#34;</span>
<span class="k">fi</span>

git commit -m <span class="s2">&#34;</span><span class="nv">$msg</span><span class="s2">&#34;</span>

<span class="c1"># Deploy</span>
git push -u origin main

<span class="c1"># Go back to the root directory</span>
<span class="nb">cd</span> ../
</code></pre></div><p>In Windows, even though it is a bash script, it will work with Git Bash.</p>
<p>Let&rsquo;s test it by creating a new post.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">$ hugo new post/second-post.md
$ echo &#39;This is second post&#39; &gt;&gt; content/post/second-post.md
</code></pre></div><p>Don&rsquo;t forget to change the value of <code>draft</code>  from <code>true</code> to <code>false</code>!</p>
<p>Now we can run the script, the output should looks something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="o">(</span>my-blog<span class="o">)</span>$ ./deploy.sh
Deploying blog to GitHub...
Start building sites …

                   <span class="p">|</span> EN <span class="p">|</span> FR <span class="p">|</span> FA
-------------------+----+----+-----
  Pages            <span class="p">|</span> <span class="m">15</span> <span class="p">|</span> <span class="m">10</span> <span class="p">|</span> <span class="m">10</span>
  Paginator pages  <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
  Non-page files   <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
  Static files     <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
  Processed images <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
  Aliases          <span class="p">|</span>  <span class="m">3</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">1</span>
  Sitemaps         <span class="p">|</span>  <span class="m">2</span> <span class="p">|</span>  <span class="m">1</span> <span class="p">|</span>  <span class="m">1</span>
  Cleaned          <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>

Total in <span class="m">155</span> ms
Add commit message:
<span class="o">[</span>main af4c483<span class="o">]</span> <span class="o">[</span>11:00 13-Jun-2021<span class="o">]</span> Site update
 <span class="m">9</span> files changed, <span class="m">459</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">8</span> deletions<span class="o">(</span>-<span class="o">)</span>
 create mode <span class="m">100644</span> post/second-post/index.html
Enumerating objects: 27, <span class="k">done</span>.
Counting objects: 100% <span class="o">(</span>27/27<span class="o">)</span>, <span class="k">done</span>.
Delta compression using up to <span class="m">8</span> threads
Compressing objects: 100% <span class="o">(</span>13/13<span class="o">)</span>, <span class="k">done</span>.
Writing objects: 100% <span class="o">(</span>15/15<span class="o">)</span>, 3.54 KiB <span class="p">|</span> 1.77 MiB/s, <span class="k">done</span>.
Total <span class="m">15</span> <span class="o">(</span>delta 9<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>, pack-reused <span class="m">0</span>
remote: Resolving deltas: 100% <span class="o">(</span>9/9<span class="o">)</span>, completed with <span class="m">7</span> <span class="nb">local</span> objects.
To https://github.com/fahmifj/my-blog.git
   f7141a3..af4c483  main -&gt; main
Branch <span class="s1">&#39;main&#39;</span> <span class="nb">set</span> up to track remote branch <span class="s1">&#39;main&#39;</span> from <span class="s1">&#39;origin&#39;</span>.
</code></pre></div><p>If we check our repo it should be updated.</p>
<p><img class="img-container" src="imgs/image-20210613110105343.png" alt="image-20210613110105343"  />
</p>
<p>That&rsquo;s how I deployed my blog at the first time.</p>
<p>But still, this is inefficient method because it wastes your bandwidth, thus in the next post, let&rsquo;s employ GitHub action 😼.</p>
<p>In the meantime, try reading the following documentations:</p>
<ul>
<li><a href="https://gohugo.io/content-management/sections/">https://gohugo.io/content-management/sections/</a></li>
<li><a href="https://gohugo.io/content-management/front-matter/">https://gohugo.io/content-management/front-matter/</a></li>
<li><a href="https://gohugo.io/content-management/page-bundles/">https://gohugo.io/content-management/page-bundles/</a></li>
<li><a href="https://gohugo.io/content-management/urls/">https://gohugo.io/content-management/urls/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setup VulnHub Machines</title>
      <link>https://fahmifj.github.io/blog/setup-vulnhub-machines/</link>
      <pubDate>Mon, 31 May 2021 03:56:18 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/setup-vulnhub-machines/</guid>
      <description>Get started with boot2root using VulnHub machines. It&amp;#39;s free and explorable!</description>
      <content:encoded><![CDATA[<p>In this post, I would like to share a quick tutorial (I guess) on how to setup a VulnHub machine in your local network. I’ll assume that you are already familiar with software installation, know what Host OS-Guest OS is, and IP address.</p>
<h2 id="what-is-vulnhub">What is VulnHub?</h2>
<p>VulnHub is a website that provides vulnerable virtual machines (VMs) for those who wants to gain a practical experience in penetration testing. It similar with Hack The Box and TryHackMe, but with VulnHub you can practice locally. Because Windows machine requires a license, most VulnHub machines are Linux server.</p>
<p>There are a lot of things you can do with VulnHub machines after you get a root, such as:</p>
<ul>
<li>Analyzing  the vulnerability, sometimes I patch it if it’s just an insecure code line.</li>
<li>Learning how the author configure the server.</li>
<li>Building a pentest lab that consist of VulnHub machines to practice network pivoting.</li>
<li>DFIR, and many more!</li>
</ul>
<p>Let&rsquo;s jump in!</p>
<h2 id="install-virtualization-software">Install Virtualization Software</h2>
<p>First thing first, you need a virtualization software such as VirtualBox or VMWare. Here is the links for both software:</p>
<ul>
<li>VirtualBox - <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></li>
<li>VMWare - <a href="https://www.vmware.com/products/workstation-player.html">https://www.vmware.com/products/workstation-player.html</a></li>
</ul>
<p>I personally use VirtualBox (Windows) because it&rsquo;s easy to use (and of course, it&rsquo;s free), but I&rsquo;ll update this post if I got another license of VMWare.</p>
<h2 id="download-vm-images--ova">Download VM Images / OVA</h2>
<p>Assuming that you’ve downloaded and installed a VirtualBox, now get your VulnHub machines/VM images at VulnHub’s official site: <a href="https://www.vulnhub.com/">https://www.vulnhub.com/</a>.</p>
<p><img class="img-container" src="imgs/image-20210531055642315.png" alt="image-20210531055642315"  />
</p>
<p>For this example, I&rsquo;ll be using <strong>symfonos: 2</strong>.</p>
<h2 id="importing-vm-images">Importing VM Images</h2>
<p>For the image, if it&rsquo;s on <code>7z</code> or  <code>zip</code> format make sure to decompress it first. In my case <strong>symfonos: 2</strong> is on <code>7z</code> format, so I have to decompress it.</p>
<p>Here&rsquo;s what I have after decompressing it.</p>
<p><img class="img-container" src="imgs/image-20210531060413952.png" alt="image-20210531060413952"  />
</p>
<p>Any <code>.ovf</code> file should already be associated with VirtualBox, and we can just double click on that file. It&rsquo;ll take us straight to the import menu.</p>
<p><img class="img-container" src="imgs/image-20210531060734397.png" alt="image-20210531060734397"  />
</p>
<p>To do that manually, open up your VirtualBox then click on the <strong>File</strong> menu -&gt; select &ldquo;Import Appliance&hellip;&rdquo;, it will pop a new window.</p>
<p><img class="img-container" src="imgs/image-20210531061142323.png" alt="image-20210531061142323"  />
</p>
<p>Click on the icon that I marked with a red box to browse your VM image.</p>
<p><img class="img-container" src="imgs/image-20210531061327937.png" alt="image-20210531061327937"  />
</p>
<p>Locate your VM image and then click on the <strong>Open</strong> button.</p>
<p><img class="img-container" src="imgs/image-20210531061601700.png" alt="image-20210531061601700"  />
</p>
<p>For now let&rsquo;s leave all the settings to its default.</p>
<p><img class="img-container" src="imgs/image-20210531061941128.png" alt="image-20210531061941128"  />
</p>
<p>Click on the <strong>Import</strong> button and wait until it completed.</p>
<p><img class="img-container" src="imgs/image-20210531062110160.png" alt="image-20210531062110160"  />
</p>
<p>When the import is done, you will see the machine on the VM list section</p>
<p><img class="img-container" src="imgs/image-20210531062327615.png" alt="image-20210531062327615"  />
</p>
<h2 id="setting-up-vm-network">Setting Up VM Network</h2>
<p>Here is the core part, we&rsquo;ll be putting the VM in an isolated network.</p>
<p>Open the VM&rsquo;s settings by right click and choose &ldquo;Settings&rdquo;.</p>
<p><img class="img-container" src="imgs/image-20210531062432466.png" alt="image-20210531062432466"  />
</p>
<p>Go to the <strong>Network</strong> section, and set the &ldquo;Attached to&rdquo; to <code>Host-only Adapter</code>.</p>
<p><img class="img-container" src="imgs/image-20210531062849952.png" alt="image-20210531062849952"  />
</p>
<p>Click <strong>OK</strong> button.</p>
<p>Now open the adapter configuration on the <strong>File</strong> menu &ndash;&gt; select &ldquo;Host Network Manager&hellip;&rdquo;.</p>
<p><img class="img-container" src="imgs/image-20210531065114863.png" alt="image-20210531065114863"  />
</p>
<p>In the image below, the “VirtualBox Host-Only Ethernet Adapter” will be using a network range of <code>192.168.2.0/24</code> and has DHCP server enabled which is needed by VulnHub machines to obtain IP address automatically on boot.</p>
<p><img class="img-container" src="imgs/image-20210531065555859.png" alt="image-20210531065555859"  />
</p>
<p><code>192.168.2.2</code> is the IP address of the virtual adapter on the host side while <code>192.168.2.1</code> is the IP address of the built-in DHCP server from VirtualBox.</p>
<p>Below is the configuration for the DHCP server.</p>
<p><img class="img-container" src="imgs/image-20210531065945260.png" alt="image-20210531065945260"  />
</p>
<p>I set my <code>Lower Address Bound</code>  to <code>192.168.2.100</code> and <code>Upper Address Bound</code> to <code>192.168.2.254</code>, so that all machines will be assigned with an IP started from <code>.100-254</code>, and no one gets <code>192.168.2.3-99</code>.</p>
<p><em>Can I configure it to <code>10.10.10.0/24</code>?</em></p>
<p>Yes you can!</p>
<p>If we want to create a <code>10.10.10.0/24</code> network, it&rsquo;s better to create another adapter by clicking the <strong>Create</strong> menu (you don&rsquo;t say) then set the adapter&rsquo;s settings with</p>
<ul>
<li>IPv4 Address: <code>10.10.10.2</code> (Adapter on the host side)</li>
<li>IPv4 Network Mask: <code>255.255.255.0</code></li>
</ul>
<p><img class="img-container" src="imgs/image-20210531072801277.png" alt="image-20210531072801277"  />
</p>
<p>Next, configure the DHCP server to:</p>
<ul>
<li>Server Address: <code>10.10.10.1</code> (VirtualBox&rsquo;s built-in DHCP server)</li>
<li>Server Mask: <code>255.255.255.0</code></li>
<li>Lower Address Bound: <code>10.10.10.100</code></li>
<li>Upper Address Bound: <code>10.10.10.254</code></li>
</ul>
<p><img class="img-container" src="imgs/image-20210531072833605.png" alt="image-20210531072833605"  />
</p>
<p>Then, on the VM settings (<strong>symfonos: 2</strong>), change the adapter name with the new one we created before</p>
<p><img class="img-container" src="imgs/image-20210531072939206.png" alt="image-20210531072939206"  />
</p>
<p>Lastly, we should also configure the attacking machine, in my case it’s Kali Linux, to use the same network adapter.</p>
<p><img class="img-container" src="imgs/image-20210531075306992.png" alt="image-20210531075306992"  />
</p>
<h2 id="boot-it">Boot it!</h2>
<p>Boot your machines and we&rsquo;re done!</p>
<p><img class="img-container" src="imgs/image-20210531075144142.png" alt="image-20210531075144142"  />
</p>
<p>Happy hacking!</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
