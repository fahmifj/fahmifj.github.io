<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tutorial on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/tutorial/</link>
    <description>Recent content in Tutorial on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 13 Jun 2021 11:12:48 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo Setup and Deployment</title>
      <link>https://fahmifj.github.io/blog/hugo-setup-and-deployment/</link>
      <pubDate>Sun, 13 Jun 2021 11:12:48 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/hugo-setup-and-deployment/</guid>
      <description>A quick tutorial about setting up a site using Hugo</description>
      <content:encoded><![CDATA[<p>Looking back at my first post, I said that I was using Hugo to build this blog. So in this post, I‚Äôll share how to create your own!</p>
<h3 id="goals">Goals</h3>
<p>Below are the main goals of this post:</p>
<ul>
<li>Installing Hugo</li>
<li>Using Hugo theme</li>
<li>Deploying Hugo site with Github</li>
</ul>
<h3 id="prerequisites">Prerequisites</h3>
<p>There are some prerequisites needed to accomplish these goals:</p>
<ul>
<li>A GitHub account</li>
<li><a href="https://git-scm.com/downloads">Git Bash</a> for Windows users</li>
<li>Basics knowledge of Git (commit, push, pull, creating repository, know what is local and remote repository)</li>
<li>Basics knowledge/use of CLI (cd, ls, pwd, mv, rm, mkdir)</li>
</ul>
<p>If all set, then let&rsquo;s get started</p>
<h2 id="01-installing-hugo">01. Installing Hugo</h2>
<p>First, download Hugo executable binary at:</p>
<ul>
<li><a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases</a></li>
</ul>
<p>Pick your Hugo version according to what OS you‚Äôre on. There is also the extended version, which you should use if you‚Äôre building your own theme or picking a theme that uses Sass/SCSS.</p>
<p>I will assume that you have downloaded the binary and extracted it somewhere on your system.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ ls -l
total 47488
-rw-r--r-- 1 Fahmi FJ 197121    11357 Mar 22 00:17 LICENSE
-rw-r--r-- 1 Fahmi FJ 197121    12345 Mar 22 00:17 README.md
-rwxr-xr-x 1 Fahmi FJ 197121 48599040 Mar 22 01:04 hugo.exe
</code></pre></div><p>Let&rsquo;s test it on terminal by typing:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ hugo.exe version
hugo v0.82.0-9D960784+extended windows/amd64 BuildDate=2021-03-21T17:28:04Z VendorInfo=gohugoio
</code></pre></div><p>At this time, Hugo‚Äôs binary is not available in a system-wide (it‚Äôs not accessible outside the current directory).</p>
<p>So, let&rsquo;s make it accessible from anywhere by adding the binary location to what is known as <a href="https://en.wikipedia.org/wiki/Environment_variable">PATH variable</a>.</p>
<h3 id="011-windows">01.1. Windows</h3>
<p>For Windows users, let&rsquo;s create a folder called <code>bin</code> in <code>C:/</code> .</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">C:\&gt;mkdir bin
</code></pre></div><p>Once the folder is created, move your Hugo binary into it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">C:\&gt;dir bin
 Volume in drive C is Windows
 Volume Serial Number is AC06-7D93

 Directory of C:\bin

13/06/2021  08:07    &lt;DIR&gt;          .
13/06/2021  08:07    &lt;DIR&gt;          ..
22/03/2021  01:04        48.599.040 hugo.exe
               1 File(s)     48.599.040 bytes
               2 Dir(s)  57.909.837.824 bytes free
</code></pre></div><p>After that, hit <code>Win + R</code> on your keyboard and type:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">rundll32.exe sysdm.cpl,EditEnvironmentVariables
</code></pre></div><p>You should see a window with &ldquo;Environment Variables&rdquo; in the title. We&rsquo;re going to edit <code>Path</code> variable, so select that <code>Path</code> variable and click on <strong>Edit</strong> button.</p>
<p><div class="img-container"><img src="imgs/image-20210613081626397.png" alt="image-20210613081626397"  /></div>
</p>
<p>On the Edit window, click on <strong>New</strong> button to add a new path and type <code>C:\bin</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210613082450289.png" alt="image-20210613082450289"  /></div>
</p>
<p>After that, just hit all the <strong>OK</strong> button.</p>
<p>Open your Windows terminal and run <code>hugo version</code>. If it returns the same output as previous one, then go to the section 02.</p>
<h3 id="012-linux">01.2. Linux</h3>
<blockquote>
<p>I know those who uses Linux probably already know how to üòÅ.</p>
</blockquote>
<p>For Linux users, let&rsquo;s create a folder called <code>bin</code> under <code>/home/username/.local/[here]</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ mkdir -p ~/.local/bin
</code></pre></div><p>Open your <code>.bashrc</code> or <code>.zshrc</code> file, it is located at <code>/home/username/.[zsh|bash]rc</code>, with your favorite text editor such as vim and simply add these line at the top of your <code>.bashrc/.zshrc</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">PATH_HUGO=&#39;/home/username/.local/bin&#39;
export PATH=$PATH_HUGO:$PATH
</code></pre></div><p>Reopen your terminal and run <code>hugo version</code> from any directory and see if it&rsquo;s returns the version.</p>
<h2 id="02-creating-your-first-site">02. Creating Your First Site</h2>
<p>We can create a site from anywhere by issuing the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ hugo new site [site-name]
</code></pre></div><blockquote>
<p>I recommend you to create a site in a specific folder such as <code>workspace</code>.</p>
</blockquote>
<p>For now, let&rsquo;s create a site called <code>my-blog</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ hugo new site my-blog
Congratulations! Your new Hugo site is created in C:\Users\fahmi\Desktop\test\my-blog.

Just a few more steps and you&#39;re ready to go:

1. Download a theme into the same-named folder.
   Choose a theme from https://themes.gohugo.io/ or
   create your own with the &#34;hugo new theme &lt;THEMENAME&gt;&#34; command.
2. Perhaps you want to add some content. You can add single files
   with &#34;hugo new &lt;SECTIONNAME&gt;\&lt;FILENAME&gt;.&lt;FORMAT&gt;&#34;.
3. Start the built-in live server via &#34;hugo server&#34;.

Visit https://gohugo.io/ for quickstart guide and full documentation.
</code></pre></div><p>You can see that Hugo creates a new folder called  <code>my-blog</code> at <code>C:\Users\fahmi\Desktop\test\my-blog</code>, and <code>my-blog</code> has the following directory structure:</p>
<pre><code>my-blog
‚îú‚îÄ‚îÄ archetypes
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ default.md
‚îú‚îÄ‚îÄ config.toml
‚îú‚îÄ‚îÄ content
‚îú‚îÄ‚îÄ data
‚îú‚îÄ‚îÄ layouts
‚îú‚îÄ‚îÄ static
‚îî‚îÄ‚îÄ themes
</code></pre><p>Go to the <code>my-blog</code> folder and type <code>hugo server</code> in the terminal to host it locally.</p>
<pre><code>$ cd my-blog
$ hugo server
</code></pre><p>By default, the site is hosted at <code>http://localhost:1313/</code> , but it&rsquo;s still empty because we haven&rsquo;t added any content yet.</p>
<h2 id="03-installing-hugo-theme">03. Installing Hugo Theme</h2>
<p>My blog uses a theme called <a href="https://themes.gohugo.io/hugo-papermod/">PaperMod</a>, so l&rsquo;ll be using that too here.</p>
<p>First, let&rsquo;s delete the previous <code>my-blog</code> and recreate it with the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ hugo new site my-blog -f yml
</code></pre></div><p>Let&rsquo;s move into <code>my-blog</code> and initialize a git repository there.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd my-blog
$ git init
</code></pre></div><p>After that,  go to the <code>themes</code> folder and clone the PaperMod theme there.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd themes
$ git clone https://github.com/adityatelange/hugo-PaperMod PaperMod --depth=1
</code></pre></div><p>We‚Äôll add the theme as a submodule of <code>my-blog</code>.</p>
<pre><code>$ git submodule add https://github.com/adityatelange/hugo-PaperMod.git PaperMod
</code></pre><p>Now, let&rsquo;s go back to the root directory (<code>my-blog</code>), then replace/overwrite our <code>config.yml</code> with <a href="https://raw.githubusercontent.com/adityatelange/hugo-PaperMod/exampleSite/config.yml">this</a>, but change the value of <code>baseUrl</code> and <code>theme</code> to these:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">baseURL: &#34;&#34;
theme: PaperMod
</code></pre></div><p>Test it with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ hugo server
</code></pre></div><h2 id="04-creating-your-first-post">04. Creating Your First Post</h2>
<p>We can create a new post with by issuing the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ hugo new post/new-post.md
</code></pre></div><p>You can edit <code>new-post.md</code> after that, the file should be under <code>my-blog/content/post/[here]</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ ls -l my-blog/content/post/
total 1
-rw-r--r-- 1 Fahmi FJ 197121 70 Jun 13 09:34 my-post.md
</code></pre></div><p>To see your post in the site, change the value <code>draft</code> from <code>true</code> to <code>false</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">---
title: &#34;My Post&#34;
date: 2021-06-13T09:34:43+07:00
draft: false
---

My first post
</code></pre></div><p>It should be on your site now.</p>
<h2 id="05-deploying-site-on-github">05. Deploying Site on GitHub</h2>
<p>From here, thing you need to know that when you run <code>hugo server</code>, Hugo will generate all the site resources and serve them from memory. But, if you run <code>hugo</code>, Hugo will generates all the site resources inside <code>public</code> folder (<code>my-blog/public/[here]</code>).</p>
<p>The files in this <code>public</code> folder are the files that we are going to host on GitHub. We can simply upload all the files in the <code>public</code> folder into a GitHub repository.</p>
<p>I&rsquo;m not good at explaining it on English, so let&rsquo;s do that in action!</p>
<p>But, before that, you have to change your site&rsquo;s <strong>base URL</strong> in <code>config.yml</code> to:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">baseURL: &#34;https://[your_user_name].github.io/my-blog/&#34;
</code></pre></div><p>For example, my username is <code>fahmifj</code> , so my config would be:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">baseURL: &#34;https://fahmifj.github.io/my-blog/&#34;
</code></pre></div><p>Once you done with the config, type <code>hugo</code> at the site root directory, Hugo will re-generates the web files at the <code>public</code> folder.</p>
<pre><code>$ hugo
Start building sites ‚Ä¶

                   | EN | FR | FA
-------------------+----+----+-----
  Pages            | 14 | 10 | 10
  Paginator pages  |  0 |  0 |  0
  Non-page files   |  0 |  0 |  0
  Static files     |  0 |  0 |  0
  Processed images |  0 |  0 |  0
  Aliases          |  3 |  0 |  1
  Sitemaps         |  2 |  1 |  1
  Cleaned          |  0 |  0 |  0

Total in 147 ms
</code></pre><p>After that, <a href="https://docs.github.com/en/github/getting-started-with-github/quickstart/create-a-repo">create a new repository</a> called <code>my-blog</code> on GitHub.</p>
<p>Once the repo is created, click on <strong>Upload an existing file</strong>.</p>
<p><div class="img-container"><img src="imgs/image-20210613095820873.png" alt="image-20210613095820873"  /></div>
</p>
<p>Then simply drag and drop all the files from the <code>public</code> folder there.</p>
<p><div class="img-container"><img src="imgs/image-20210613095945135.png" alt="image-20210613095945135"  /></div>
</p>
<p>Once all the files are uploaded, commit the changes, I&rsquo;ll leave the commit message as default.</p>
<p><div class="img-container"><img src="imgs/image-20210613101009392.png" alt="image-20210613101009392"  /></div>
</p>
<p>After that, go the GitHub pages settings at <code>https://github.com/your-username/my-blog/settings/pages</code> to host your site.</p>
<p><div class="img-container"><img src="imgs/image-20210613101748114.png" alt="image-20210613101748114"  /></div>
</p>
<p>There you go!</p>
<p><div class="img-container"><img src="imgs/image-20210613101715896.png" alt="image-20210613101715896"  /></div>
</p>
<p>If you don&rsquo;t see your site there or it returns a 404 error, just wait for a few minutes more.</p>
<p>From here, we learned how to deploy/host our Hugo site on GitHub. However, this is not an efficient method of updating your site, therefore let&rsquo;s write a deployment script.</p>
<h2 id="06-deployment-script">06. Deployment Script</h2>
<p>Assuming you&rsquo;re inside <code>my-blog</code> , then go to the <code>public</code> directory, do files and folders clean up then initialize a git repository there.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd public
$ rm -rf *
$ git init
</code></pre></div><p>Still inside the <code>public</code> directory, set the previously created <code>my-blog</code> repository as the remote repository and run <code>git pull</code> afterwards.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ git remote add origin https://github.com/your-username/my-blog.git
$ git pull origin main
</code></pre></div><p>Return to the site root directory then add the <code>public</code> folder as a submodule.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd ../
$ git submodule add https://github.com/your-username/my-blog.git public
</code></pre></div><p>Now let&rsquo;s create a deployment script at the site root directory and name it as <code>deploy.sh</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
echo -e <span style="color:#e6db74">&#34;\033[0;32mDeploying blog to GitHub...\033[0m&#34;</span>

<span style="color:#75715e"># Clean public folder</span>
hugo --cleanDestinationDir

<span style="color:#75715e"># Go to to public folder</span>
cd public/

<span style="color:#75715e"># Add untracked files, hide output</span>
git add -A &gt; /dev/null

<span style="color:#75715e"># Generate a fixed commit message with date and time</span>
msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;[`date &#34;</span>+%R %d-%h-%Y<span style="color:#e6db74">&#34;]` Site update&#34;</span>
	
<span style="color:#75715e"># Check for additional commit message</span>
read -p <span style="color:#e6db74">&#34;Add commit message: &#34;</span> add_msg
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$add_msg<span style="color:#e6db74">&#34;</span> !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span>
	<span style="color:#66d9ef">then</span> 
	msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$msg<span style="color:#e6db74"> - </span>$add_msg<span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">fi</span>

git commit -m <span style="color:#e6db74">&#34;</span>$msg<span style="color:#e6db74">&#34;</span>

<span style="color:#75715e"># Deploy</span>
git push -u origin main

<span style="color:#75715e"># Go back to the root directory</span>
cd ../
</code></pre></div><p>In Windows, even though it is a bash script, it will work with Git Bash.</p>
<p>Let&rsquo;s test it by creating a new post.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ hugo new post/second-post.md
$ echo &#39;This is second post&#39; &gt;&gt; content/post/second-post.md
</code></pre></div><p>Don&rsquo;t forget to change the value of <code>draft</code>  from <code>true</code> to <code>false</code>!</p>
<p>Now we can run the script, the output should looks something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">(</span>my-blog<span style="color:#f92672">)</span>$ ./deploy.sh
Deploying blog to GitHub...
Start building sites ‚Ä¶

                   | EN | FR | FA
-------------------+----+----+-----
  Pages            | <span style="color:#ae81ff">15</span> | <span style="color:#ae81ff">10</span> | <span style="color:#ae81ff">10</span>
  Paginator pages  |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span>
  Non-page files   |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span>
  Static files     |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span>
  Processed images |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span>
  Aliases          |  <span style="color:#ae81ff">3</span> |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">1</span>
  Sitemaps         |  <span style="color:#ae81ff">2</span> |  <span style="color:#ae81ff">1</span> |  <span style="color:#ae81ff">1</span>
  Cleaned          |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span>

Total in <span style="color:#ae81ff">155</span> ms
Add commit message:
<span style="color:#f92672">[</span>main af4c483<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>11:00 13-Jun-2021<span style="color:#f92672">]</span> Site update
 <span style="color:#ae81ff">9</span> files changed, <span style="color:#ae81ff">459</span> insertions<span style="color:#f92672">(</span>+<span style="color:#f92672">)</span>, <span style="color:#ae81ff">8</span> deletions<span style="color:#f92672">(</span>-<span style="color:#f92672">)</span>
 create mode <span style="color:#ae81ff">100644</span> post/second-post/index.html
Enumerating objects: 27, <span style="color:#66d9ef">done</span>.
Counting objects: 100% <span style="color:#f92672">(</span>27/27<span style="color:#f92672">)</span>, <span style="color:#66d9ef">done</span>.
Delta compression using up to <span style="color:#ae81ff">8</span> threads
Compressing objects: 100% <span style="color:#f92672">(</span>13/13<span style="color:#f92672">)</span>, <span style="color:#66d9ef">done</span>.
Writing objects: 100% <span style="color:#f92672">(</span>15/15<span style="color:#f92672">)</span>, 3.54 KiB | 1.77 MiB/s, <span style="color:#66d9ef">done</span>.
Total <span style="color:#ae81ff">15</span> <span style="color:#f92672">(</span>delta 9<span style="color:#f92672">)</span>, reused <span style="color:#ae81ff">0</span> <span style="color:#f92672">(</span>delta 0<span style="color:#f92672">)</span>, pack-reused <span style="color:#ae81ff">0</span>
remote: Resolving deltas: 100% <span style="color:#f92672">(</span>9/9<span style="color:#f92672">)</span>, completed with <span style="color:#ae81ff">7</span> local objects.
To https://github.com/fahmifj/my-blog.git
   f7141a3..af4c483  main -&gt; main
Branch <span style="color:#e6db74">&#39;main&#39;</span> set up to track remote branch <span style="color:#e6db74">&#39;main&#39;</span> from <span style="color:#e6db74">&#39;origin&#39;</span>.
</code></pre></div><p>If we check our repo it should be updated.</p>
<p><div class="img-container"><img src="imgs/image-20210613110105343.png" alt="image-20210613110105343"  /></div>
</p>
<p>That&rsquo;s how I deployed my blog at the first time.</p>
<p>But still, this is inefficient method because it wastes your bandwidth, thus in the next post, let&rsquo;s employ GitHub action üòº.</p>
<p>In the meantime, try reading the following documentation:</p>
<ul>
<li><a href="https://gohugo.io/content-management/sections/">https://gohugo.io/content-management/sections/</a></li>
<li><a href="https://gohugo.io/content-management/front-matter/">https://gohugo.io/content-management/front-matter/</a></li>
<li><a href="https://gohugo.io/content-management/page-bundles/">https://gohugo.io/content-management/page-bundles/</a></li>
<li><a href="https://gohugo.io/content-management/urls/">https://gohugo.io/content-management/urls/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setup VulnHub Machines</title>
      <link>https://fahmifj.github.io/blog/setup-vulnhub-machines/</link>
      <pubDate>Mon, 31 May 2021 03:56:18 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/setup-vulnhub-machines/</guid>
      <description>Get started with boot2root using VulnHub machines. It&amp;#39;s free and explorable!</description>
      <content:encoded><![CDATA[<p>In this post, I would like to share a quick tutorial (I guess) on how to setup a VulnHub machine in your local network. I‚Äôll assume that you are already familiar with software installation, know what Host OS-Guest OS is, and IP address.</p>
<h2 id="what-is-vulnhub">What is VulnHub?</h2>
<p>VulnHub is a website that provides vulnerable virtual machines (VMs) for those who wants to gain a practical experience in penetration testing. It similar with Hack The Box and TryHackMe, but with VulnHub you can practice locally. Because Windows machine requires a license, most VulnHub machines are Linux server.</p>
<p>There are a lot of things you can do with VulnHub machines after you get a root, such as:</p>
<ul>
<li>Analyzing  the vulnerability, sometimes I patch it if it‚Äôs just an insecure code line.</li>
<li>Learning how the author configure the server.</li>
<li>Building a pentest lab that consist of VulnHub machines to practice network pivoting.</li>
<li>DFIR, and many more!</li>
</ul>
<p>Let&rsquo;s jump in!</p>
<h2 id="01-install-your-virtualization-software">01. Install your virtualization software</h2>
<p>First thing first, you need a virtualization software such as VirtualBox or VMWare. Here is the links for both software:</p>
<ul>
<li>VirtualBox - <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></li>
<li>VMWare - <a href="https://www.vmware.com/products/workstation-player.html">https://www.vmware.com/products/workstation-player.html</a></li>
</ul>
<p>I personally use VirtualBox (Windows) because it&rsquo;s easy to use (and of course, it&rsquo;s free), but I&rsquo;ll update this post if I got another license of VMWare.</p>
<h2 id="02-download-vm-image--ova">02. Download VM image / OVA</h2>
<p>Assuming that you‚Äôve downloaded and installed a VirtualBox, now get your VulnHub machines/VM images at VulnHub‚Äôs official site: <a href="https://www.vulnhub.com/">https://www.vulnhub.com/</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210531055642315.png" alt="image-20210531055642315"  /></div>
</p>
<p>For this example, I&rsquo;ll be using <strong>symfonos: 2</strong>.</p>
<h2 id="03-import-the-image">03. Import the image</h2>
<p>For the image, if it&rsquo;s on <code>7z</code> or  <code>zip</code> format make sure to decompress it first. In my case <strong>symfonos: 2</strong> is on <code>7z</code> format, so I have to decompress it.</p>
<p>Here&rsquo;s what I have after decompressing it.</p>
<p><div class="img-container"><img src="imgs/image-20210531060413952.png" alt="image-20210531060413952"  /></div>
</p>
<p>Any <code>.ovf</code> file should already be associated with VirtualBox, and we can just double click on that file. It&rsquo;ll take us straight to the import menu.</p>
<p><div class="img-container"><img src="imgs/image-20210531060734397.png" alt="image-20210531060734397"  /></div>
</p>
<p>To do that manually, open up your VirtualBox then click on the <strong>File</strong> menu -&gt; select &ldquo;Import Appliance&hellip;&rdquo;, it will pop a new window.</p>
<p><div class="img-container"><img src="imgs/image-20210531061142323.png" alt="image-20210531061142323"  /></div>
</p>
<p>Click on the icon that I marked with a red box to browse your VM image.</p>
<p><div class="img-container"><img src="imgs/image-20210531061327937.png" alt="image-20210531061327937"  /></div>
</p>
<p>Locate your VM image and then click on the <strong>Open</strong> button.</p>
<p><div class="img-container"><img src="imgs/image-20210531061601700.png" alt="image-20210531061601700"  /></div>
</p>
<p>For now let&rsquo;s leave all the settings to its default.</p>
<p><div class="img-container"><img src="imgs/image-20210531061941128.png" alt="image-20210531061941128"  /></div>
</p>
<p>Click on the <strong>Import</strong> button and wait until it completed.</p>
<p><div class="img-container"><img src="imgs/image-20210531062110160.png" alt="image-20210531062110160"  /></div>
</p>
<p>When the import is done, you will see the machine on the VM list section</p>
<p><div class="img-container"><img src="imgs/image-20210531062327615.png" alt="image-20210531062327615"  /></div>
</p>
<h2 id="04-setup-vm-network">04. Setup VM network</h2>
<p>Here is the core part, we&rsquo;ll be putting the VM in an isolated network.</p>
<p>Open the VM&rsquo;s settings by right click and choose &ldquo;Settings&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210531062432466.png" alt="image-20210531062432466"  /></div>
</p>
<p>Go to the <strong>Network</strong> section, and set the &ldquo;Attached to&rdquo; to <code>Host-only Adapter</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210531062849952.png" alt="image-20210531062849952"  /></div>
</p>
<p>Click <strong>OK</strong> button.</p>
<p>Now open the adapter configuration on the <strong>File</strong> menu &ndash;&gt; select &ldquo;Host Network Manager&hellip;&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210531065114863.png" alt="image-20210531065114863"  /></div>
</p>
<p>In the image below, the ‚ÄúVirtualBox Host-Only Ethernet Adapter‚Äù will be using a network range of <code>192.168.2.0/24</code> and has DHCP server enabled which is needed by VulnHub machines to obtain IP address automatically on boot.</p>
<p><div class="img-container"><img src="imgs/image-20210531065555859.png" alt="image-20210531065555859"  /></div>
</p>
<p><code>192.168.2.2</code> is the IP address of the virtual adapter on the host side while <code>192.168.2.1</code> is the IP address of the built-in DHCP server from VirtualBox.</p>
<p>Below is the configuration for the DHCP server.</p>
<p><div class="img-container"><img src="imgs/image-20210531065945260.png" alt="image-20210531065945260"  /></div>
</p>
<p>I set my <code>Lower Address Bound</code>  to <code>192.168.2.100</code> and <code>Upper Address Bound</code> to <code>192.168.2.254</code>, so that all machines will be assigned with an IP started from <code>.100-254</code>, and no one gets <code>192.168.2.3-99</code>.</p>
<p><em>Can I configure it to <code>10.10.10.0/24</code>?</em></p>
<p>Yes you can!</p>
<p>If we want to create a <code>10.10.10.0/24</code> network, it&rsquo;s better to create another adapter by clicking the <strong>Create</strong> menu (you don&rsquo;t say) then set the adapter&rsquo;s settings with</p>
<ul>
<li>IPv4 Address: <code>10.10.10.2</code> (Adapter on the host side)</li>
<li>IPv4 Network Mask: <code>255.255.255.0</code></li>
</ul>
<p><div class="img-container"><img src="imgs/image-20210531072801277.png" alt="image-20210531072801277"  /></div>
</p>
<p>Next, configure the DHCP server to:</p>
<ul>
<li>Server Address: <code>10.10.10.1</code> (VirtualBox&rsquo;s built-in DHCP server)</li>
<li>Server Mask: <code>255.255.255.0</code></li>
<li>Lower Address Bound: <code>10.10.10.100</code></li>
<li>Upper Address Bound: <code>10.10.10.254</code></li>
</ul>
<p><div class="img-container"><img src="imgs/image-20210531072833605.png" alt="image-20210531072833605"  /></div>
</p>
<p>Then, on the VM settings (<strong>symfonos: 2</strong>), change the adapter name with the new one we created before</p>
<p><div class="img-container"><img src="imgs/image-20210531072939206.png" alt="image-20210531072939206"  /></div>
</p>
<p>Lastly, we should also configure the attacking machine, in my case it‚Äôs Kali Linux, to use the same network adapter.</p>
<p><div class="img-container"><img src="imgs/image-20210531075306992.png" alt="image-20210531075306992"  /></div>
</p>
<h2 id="05-boot-it">05. Boot it!</h2>
<p>Boot your machines and we&rsquo;re done!</p>
<p><div class="img-container"><img src="imgs/image-20210531075144142.png" alt="image-20210531075144142"  /></div>
</p>
<p>Happy hacking!</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
