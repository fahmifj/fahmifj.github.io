<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>nanoblog on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/nanoblog/</link>
    <description>Recent content in nanoblog on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 17 Jun 2021 14:04:24 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/nanoblog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building Virtual Home Lab for Pentesting</title>
      <link>https://fahmifj.github.io/blog/building-virtual-home-lab-for-pentesting/</link>
      <pubDate>Thu, 17 Jun 2021 14:04:24 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/building-virtual-home-lab-for-pentesting/</guid>
      <description>My documentation on building a small pentesting lab</description>
      <content:encoded><![CDATA[<p>This is my personal documentation on setting up a pentesting lab in a virtual environment to learn some AD attack scenarios, network pivoting, and C2 (command &amp; control) with <code>metasploit</code>.</p>
<h2 id="prerequisites">Prerequisites</h2>
<h3 id="knowledge">Knowledge</h3>
<ul>
<li>Virtualization and VirtualBox</li>
<li>Windows OS and Server Installation</li>
<li>Basics knowledge of Windows/Windows Server (Desktop/GUI version)/</li>
<li>Basics knowledge of Active Directory:
<ul>
<li>AD Domain</li>
<li>Principle name</li>
<li>DNS</li>
</ul>
</li>
<li>Basics knowledge of Networking (routing).</li>
</ul>
<h3 id="hardware">Hardware</h3>
<p>The following are the main specifications that I recommend, the list is sorted by priority.</p>
<ul>
<li>Storage: 256 GB minimum, SSD is a must for server, or use high speed USB 3.1/ type C drive.</li>
<li>RAM: 8 GB of minimum, 16 GB recommended dual channel.</li>
<li>CPU: AMD Ryzen 3 or Intel i3 6th (minimum), AMD Ryzen 5+ with H prefix or i5+ 6th gen with K/H prefix. (recommended).
<ul>
<li>4th gen of i7 is still worth though.</li>
</ul>
</li>
</ul>
<p>For me, I used a single MSI laptop with the minimum requirements except for the CPU.</p>
<h3 id="software">Software</h3>
<ul>
<li>VirtualBox (<a href="https://www.virtualbox.org/wiki/Downloads">Download</a>)</li>
<li>Kali Linux image file (<a href="https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/#1572305786534-030ce714-cc3b">Download</a>)</li>
<li>Windows 10 evaluation image file (<a href="https://www.microsoft.com/en-us/evalcenter/">Download</a>)</li>
<li>Windows Server 2019 evaluation image file (<a href="https://www.microsoft.com/en-us/evalcenter/">Download</a>)</li>
</ul>
<h2 id="topology">Topology</h2>
<p>I know it&rsquo;s bad.</p>
<p><img class="img-container" src="imgs/topology.jpg" alt=""  />
</p>
<p>So, for pivoting, I removed the Windows 10 inside network range of  <code>10.10.10.100/28</code> from AD Domain.</p>
<blockquote>
<p>It&rsquo;s NIC (Network Interface Card) not NC</p>
</blockquote>
<h2 id="setup">Setup</h2>
<h3 id="vm-system-configuration">VM System Configuration</h3>
<h4 id="system">System</h4>
<p>Initial for installation</p>
<ul>
<li>Server: 2424 MB of RAM</li>
<li>Client: x2 1280 MB of RAM</li>
</ul>
<p>After installation (removed style/desktop/disable junk service)</p>
<ul>
<li>Server: 1280 MB of RAM</li>
<li>Client: 1024 MB of RAM</li>
<li>Attacking machine: 1024MB of RAM</li>
</ul>
<p>Trust me, I use 8 GB to host these VM. ðŸ˜‚</p>
<ul>
<li>Windows 2019 = Server</li>
<li>Windows 10 = Client</li>
<li>Kali Linux/Armed Ubuntu = Attacker</li>
</ul>
<p>For initial setup, the two clients can <strong>stay inside</strong> <code>192.168.1.0/24</code> network.</p>
<h4 id="network">Network</h4>
<p>Server Adapter 1:</p>
<p><img class="img-container" src="imgs/image-20210617143401181.png" alt="image-20210617143401181"  />
</p>
<h3 id="setting-up-server">Setting up Server</h3>
<h4 id="initial-setup">Initial setup</h4>
<ul>
<li>Admin credentials: <code>administrator:p@$$w0rd!</code></li>
<li>PC Name: <code>server19-DC</code> (restart after)</li>
<li>Network (Static):
<ul>
<li>Adapter 1: 192.168.1.100/24</li>
<li>Adapter 2: 10.10.10.100/28</li>
</ul>
</li>
</ul>
<h4 id="promote-to-domain-controller">Promote to Domain Controller</h4>
<ul>
<li>Server Manager &gt; Manage &gt; Add Roles and Features.</li>
<li>Add Roles and Features Wizard:
<ul>
<li>Installation type: &ldquo;<strong>Role-based or feature-based installation</strong>&rdquo;</li>
<li>Server selection: <code>server19-DC</code></li>
<li>Server roles: <strong>&ldquo;Active Directory Domain Services&rdquo;</strong> and check the <strong>&ldquo;Include management tools&rdquo;</strong>.</li>
<li>Features: Check the <strong>&ldquo;Group Policy Management&rdquo;</strong></li>
<li>Confirmation:  Check on <strong>&ldquo;Restart destination server automatically if required&rdquo;</strong></li>
<li>Close after it&rsquo;s done.</li>
</ul>
</li>
<li>Server Manager &gt; Notification flag &gt; Click on <strong>&ldquo;Promote this server to a domain controller&rdquo;</strong></li>
<li>Active Directory Domain Services Configuration Wizard:
<ul>
<li>Deployment configuration: <strong>&ldquo;Add a new forest&rdquo;</strong> and set <strong>&ldquo;server19.local&rdquo;</strong> as root domain name</li>
<li>Domain controller options: set <strong>&ldquo;Windows Server 2016&rdquo;</strong> as FFL (Forest Functional Level) and DFL (Domain Functional Level). Checklist DNS server and set the same admin password for DSRM password.</li>
<li>Additional options: set NetBIOS domain name to <code>SERVER19</code></li>
<li>Let the rest options in default state until installation section.</li>
<li>Restart after installation complete.</li>
</ul>
</li>
</ul>
<p><img class="img-container" src="imgs/server19logon.jpg" alt=""  />
</p>
<h4 id="domain-accounts">Domain Accounts</h4>
<ul>
<li>John Smith
<ul>
<li>User logon name: <code>jsmith@server19.local</code></li>
<li>Password: <code>jsmith@123</code></li>
</ul>
</li>
<li>Carl Smith
<ul>
<li>User logon name: <code>cmisth@server19.local</code></li>
<li>Password: <code>@csmith@</code></li>
</ul>
</li>
</ul>
<p>All password is set to never expires.</p>
<h4 id="service-account">Service Account</h4>
<p>Fake SQL Service</p>
<ul>
<li>User logon name: <code>SQLService@server19.local</code></li>
<li>Password: <code>Mysql@Password123</code></li>
</ul>
<p>Set service principle name:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">setspn -a SERVER19-DC/SQLService.SERVER19.local:60111 SERVER19\SQLService
setspn -T SERVER19.local -Q */*
</code></pre></div><h4 id="configure-file-sharing-smb">Configure File Sharing (SMB):</h4>
<ul>
<li>Server manager &gt; File and Storage Services &gt; Shares &gt; Task &gt; New Share.</li>
<li>New Share Wizard:
<ul>
<li>Profile: SMB Share Quick</li>
<li>Share Location: <code>C:\Shares\DATA</code> (Create the Shares folder in C:)</li>
<li>Other Settings: Allow caching of share</li>
<li>Permission: Leave it default</li>
<li>Confirmation and create.</li>
</ul>
</li>
</ul>
<h3 id="setting-up-client">Setting up Client</h3>
<h4 id="initial-setup-1">Initial setup</h4>
<ul>
<li>Client 1:
<ul>
<li>IP: 192.168.1.101 (static)</li>
<li>PC name: NESCOFFEE</li>
</ul>
</li>
<li>Client 2:
<ul>
<li>IP: 192.168.1.102 (static)</li>
<li>PC name: MILO</li>
</ul>
</li>
</ul>
<h4 id="local-accounts">Local Accounts</h4>
<p>Same with domain accounts, but add an <code>L</code> at the end of username/password.</p>
<ul>
<li>Username: <code>cmisthL</code>, password: <code>jsmithL@123</code></li>
<li>Username: <code>jsmithL</code>, password: <code>@csmith@</code></li>
</ul>
<h4 id="join-domain">Join Domain</h4>
<p>Client 1:</p>
<ul>
<li>Use Server&rsquo;s IP as DNS server: <code>192.168.1.100</code></li>
<li>Hit <code>Win+I</code>, type &ldquo;access&rdquo;, click on <strong>Connect</strong>.</li>
<li>Microsoft account window:
<ul>
<li>Click on <strong>&ldquo;Join this device to a local Active Directory domain&rdquo;</strong> under the alternate actions.</li>
<li>Use the server administrator password to join.</li>
<li>Skip the <strong>Add an account</strong> section</li>
<li>Restart</li>
</ul>
</li>
</ul>
<p>Client 2 has the same steps</p>
<h4 id="local-admin">Local Admin:</h4>
<ul>
<li>Set John Smith (<code>jsmith@server19.local</code>) as local administrator for NESCOFFEE.</li>
<li>Set Carl Smith (<code>cmisth@server19.local</code>) as local administrator for MILO.</li>
</ul>
<h3 id="setting-up-attacking-machine">Setting up Attacking Machine</h3>
<ul>
<li>Put it on the same network</li>
<li>Set static IP: 192.168.1.10</li>
</ul>
<h2 id="ad-attack-scenarios">AD Attack Scenarios</h2>
<p>Here are some attack scenarios:</p>
<ul>
<li>LLMNR Poisoning - <a href="https://www.aptive.co.uk/blog/llmnr-nbt-ns-spoofing/">https://www.aptive.co.uk/blog/llmnr-nbt-ns-spoofing/</a></li>
<li>AS-REP Roasting
<ul>
<li>Example attacks: <a href="/tags/asrep-roasting">ASREP-Roasting tags</a></li>
</ul>
</li>
<li>Kerberoasting  - <a href="https://pentestlab.blog/2018/06/12/kerberoast/">https://pentestlab.blog/2018/06/12/kerberoast/</a></li>
<li>Take Over IPv6 DNS - <a href="https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/">https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/</a></li>
<li>DCSync
<ul>
<li>Example attacks: <a href="/tags/dcsync/">DCSync tags</a></li>
</ul>
</li>
</ul>
<p>Attack scenario(s) that requires two clients online + server:</p>
<ul>
<li>SMB Relay - <a href="https://akimboviper.gitbook.io/pentest-everything/everything/everything-windows/attacking-windows/relay-attacks/smb-relay">https://akimboviper.gitbook.io/pentest-everything/everything/everything-windows/attacking-windows/relay-attacks/smb-relay</a>
<ul>
<li>Example attacks: <a href="/writeups/hackthebox/htb-apt/">HackTheBox - APT</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Linux Forensics Command Cheat Sheet</title>
      <link>https://fahmifj.github.io/blog/linux-forensics-command-cheat-sheet/</link>
      <pubDate>Wed, 16 Jun 2021 19:15:16 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/linux-forensics-command-cheat-sheet/</guid>
      <description>My small cheat sheet for forensics and incident response on Linux systems</description>
      <content:encoded><![CDATA[<p>My short cheat sheet for forensics and incident response on Linux systems.  This will be updated over time.</p>
<h2 id="users-related">Users-related</h2>
<p>Last login</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ lastlog
$ last
</code></pre></div><p>Users with login shells</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ cat /etc/passwd <span class="p">|</span> grep sh$
</code></pre></div><p>List users' cron</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ <span class="k">for</span> user in <span class="k">$(</span>cat /etc/passwd <span class="p">|</span> cut -f1 -d: <span class="k">)</span><span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="nv">$user</span><span class="p">;</span> crontab -u <span class="nv">$user</span> -l<span class="p">;</span> <span class="k">done</span>

<span class="c1"># users with shells only</span>
$ <span class="k">for</span> user in <span class="k">$(</span>cat /etc/passwd <span class="p">|</span> grep sh$ <span class="p">|</span> cut -f1 -d: <span class="k">)</span><span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="nv">$user</span><span class="p">;</span> crontab -u <span class="nv">$user</span> -l<span class="p">;</span> <span class="k">done</span>
</code></pre></div><p>SSH authorized keys</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ find / -type f -name authorized_keys
</code></pre></div><h2 id="processes-networks-and-services">Processes, Networks and Services</h2>
<p>Show process tree with username  TTY, and wide output.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ ps auxfww
</code></pre></div><p>Process details</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ lsof -p <span class="o">[</span>pid<span class="o">]</span>
</code></pre></div><p>Show all connections don&rsquo;t resolve names (IP only)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ lsof -i -n
$ netstat -anp

<span class="c1"># Look for tcp only</span>
$ netstat -antp
$ ss -antp
</code></pre></div><p>List all services</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ service --status-all
</code></pre></div><p>List firewall rules</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ iptables --list-rules
</code></pre></div><p>List all timers</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ systemctl list-timers --all
</code></pre></div><p>DNS related</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">/etc/hosts
/etc/resolv.conf
</code></pre></div><h2 id="files-and-folders">Files and Folders</h2>
<p>Show list files and folder with nano timestamp, sort by modification time (newest).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ ls --full-time -lt 
</code></pre></div><p>List all files that were modified on a specific date/time.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># List files which were modified on 2021-06-16 (YYYY-MM-DD)</span>
$ find / -newermt <span class="s2">&#34;2021-06-16&#34;</span> -ls 2&gt;/dev/null

<span class="c1"># List files which were modified on 2021-05-01 until 2021-05-09 (9 days ago)</span>
$ find / -newermt <span class="s2">&#34;2021-05-01&#34;</span> ! -newermt <span class="s2">&#34;2021-05-10&#34;</span> -ls 2&gt;/dev/null

<span class="c1"># List files which were modified on 2021-05-01 until 2021-05-09 (9 days ago) + add filter</span>
$ find / -newermt <span class="s2">&#34;2021-05-01&#34;</span> ! -newermt <span class="s2">&#34;2021-05-10&#34;</span> -ls 2&gt;/dev/null <span class="p">|</span> grep -v <span class="s1">&#39;filterone\|filtertwo&#39;</span>

<span class="c1"># List files modified between 01:00 and 07:00 on June 16 2021.</span>
$ find / -newermt <span class="s2">&#34;2021-06-16 01:00:00&#34;</span> ! -newermt <span class="s2">&#34;2021-06-16 07:00:00&#34;</span> -ls 2&gt;/dev/null

<span class="c1"># List files that were accessed exactly 2 days ago.</span>
$ find / -atime <span class="m">2</span> -ls 2&gt;/dev/null

<span class="c1"># List files that were modified in the last 2 days.</span>
$ find / -mtime -2 -ls 2&gt;/dev/null
</code></pre></div><p>File inspection</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ stat <span class="o">[</span>file<span class="o">]</span>
$ exiftool <span class="o">[</span>file<span class="o">]</span>
</code></pre></div><p>Observe changes in files</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ find . -type f -exec md5sum <span class="o">{}</span> <span class="se">\;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span> <span class="p">|</span> sort <span class="p">|</span> uniq -c <span class="p">|</span> grep <span class="s1">&#39; 1 &#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $2	}&#39;</span>
</code></pre></div><p>Look for <code>cap_setuid+ep</code> in binary capabilities</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ getcap -r /usr/bin/
$ getcap -r /bin/
$ getcap -r / 2&gt;/dev/null
</code></pre></div><p>SUID</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ find / -type f -perm -u<span class="o">=</span>s 2&gt;/dev/null
</code></pre></div><p>Log auditing</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ aureport --tty
</code></pre></div><h2 id="persistence-areas">Persistence areas</h2>
<p>Directories:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">/etc/cron*/
/etc/incron.d/*
/etc/init.d/*
/etc/rc*.d/*
/etc/systemd/system/*
/etc/update.d/*
/var/spool/cron/*
/var/spool/incron/*
/var/run/motd.d/*
</code></pre></div><p>Files:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">/etc/passwd
/etc/sudoers
/home/&lt;user&gt;/.ssh/authorized_keys
/home/&lt;user&gt;/.bashrc
</code></pre></div><h2 id="references">References</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/18339307/find-files-in-created-between-a-date-range">https://stackoverflow.com/questions/18339307/find-files-in-created-between-a-date-range</a></li>
<li><a href="https://unix.stackexchange.com/questions/119598/as-root-how-can-i-list-the-crontabs-for-all-users">https://unix.stackexchange.com/questions/119598/as-root-how-can-i-list-the-crontabs-for-all-users</a></li>
<li><a href="https://unix.stackexchange.com/questions/169798/what-does-newermt-mean-in-find-command">https://unix.stackexchange.com/questions/169798/what-does-newermt-mean-in-find-command</a></li>
<li><a href="https://ippsec.rocks/">https://ippsec.rocks/</a></li>
<li><a href="https://0xdf.gitlab.io/2021/06/05/htb-scriptkiddie.html#incron">https://0xdf.gitlab.io/2021/06/05/htb-scriptkiddie.html#incron</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Install jarsigner without Java SDK in Kali Linux</title>
      <link>https://fahmifj.github.io/blog/install-jar-signer-without-java-sdk/</link>
      <pubDate>Mon, 14 Jun 2021 14:41:04 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/install-jar-signer-without-java-sdk/</guid>
      <description>The PoC exploit of ScriptKiddie from HackTheBox actually requires a binary known as jarsigner . The binary itself is bundled with the Java SDK, and my Kali Linux definitely has it, so I should have that binary installed. However, I was unable to locate this jarsigner on my machine.
I started to look for it on the internet, simply because I didn&amp;rsquo;t want to reinstall the Java SDK on my machine just to get this single binary file, which could potentially mess up the current system/installed apps.</description>
      <content:encoded><![CDATA[<p>The PoC exploit of <a href="https://fahmifj.github.io/writeups/hackthebox/htb-scriptkiddie/">ScriptKiddie</a> from HackTheBox actually requires a binary known as <code>jarsigner</code> . The binary itself is bundled with the Java SDK, and my Kali Linux definitely has it, so I should have that binary installed.  However, I was unable to locate this <code>jarsigner</code> on my machine.</p>
<p>I started to look for it on the internet, simply because I didn&rsquo;t want to reinstall the Java SDK on my machine just to get this single binary file, which could potentially mess up the current system/installed apps. But, most of the search results that showed up was a bunch of documentations about how to use the binary ðŸ™ƒ.</p>
<h3 id="in-search-of-the-missing-binary---google-dork">In search of the missing binary - Google dork</h3>
<p>Fortunately, I discovered some sites that provided the single <code>jarsigner</code> binary using Google dorks.</p>
<pre><code>intitle:&quot;index of /&quot; bin jarsigner
</code></pre><p>I end up with this <a href="http://www.citrucoop.es/jdk-11.0.6/bin/">site</a>:</p>
<p><img class="img-container" src="imgs/image-20210614151715867.png" alt="image-20210614151715867"  />
</p>
<p>I have the binary, but it can not be used yet by just simply putting the binary into the Java PATH.</p>
<h3 id="installing-jarsigner">Installing jarsigner</h3>
<p>It turns out that <a href="https://discuss.getsol.us/d/4656-java-command-unknown-after-update">Java binary</a> needs to be &lsquo;symlinked&rsquo;.</p>
<p>So, first, I&rsquo;ll have to find out where is my Java binary located.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ ls -l <span class="k">$(</span>which java<span class="k">)</span>
lrwxrwxrwx <span class="m">1</span> root root <span class="m">22</span> Nov <span class="m">25</span>  <span class="m">2019</span> /usr/bin/java -&gt; /etc/alternatives/java
$ ls -l /etc/alternatives/java
lrwxrwxrwx <span class="m">1</span> root root <span class="m">43</span> Nov <span class="m">25</span>  <span class="m">2019</span> /etc/alternatives/java -&gt; /usr/lib/jvm/java-11-openjdk-amd64/bin/java
</code></pre></div><p>I&rsquo;ll grab the <code>jarsigner</code> binary from the site and drop it directly under <code>/usr/lib/jvm/java-11-openjdk-amd64/bin/</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ curl -s http://www.citrucoop.es/jdk-11.0.6/bin/jarsigner &gt; /usr/lib/jvm/java-11-openjdk-amd64/bin/jarsigner
</code></pre></div><p>Then, I&rsquo;ll make a symlink of <code>jarsigner</code> at <code>/usr/bin/</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ <span class="nb">cd</span> /usr/bin
$ ln -sf /usr/lib/jvm/java-11-openjdk-amd64/bin/jarsigner jarsigner
</code></pre></div><p>It&rsquo;s working fine now.</p>
<p><em>Hold up.. isn&rsquo;t it unsafe?</em> ðŸ¤”</p>
<p>Absolutely! ðŸ˜… so don&rsquo;t ever do this if you don&rsquo;t trust the site.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Font Smoothing in Firefox</title>
      <link>https://fahmifj.github.io/blog/font-smoothing-in-firefox/</link>
      <pubDate>Sun, 06 Jun 2021 22:08:49 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/font-smoothing-in-firefox/</guid>
      <description>Smoothen font rendering in Firefox</description>
      <content:encoded><![CDATA[<p>For Web development, I prefer Firefox, particularly I like the <code>Right-click + Q</code> shortcut for inspecting elements. However, there is one issue that bothers me, and it&rsquo;s the font smoothing.</p>
<p>Somehow, Firefox renders fonts as if it&rsquo;s in high contrast mode or without anti-alias. So in this post, I&rsquo;ll share what I&rsquo;ve found as a workaround to &lsquo;fix&rsquo; that.</p>
<p>Open Firefox and type <code>about:config</code> in the address bar.</p>
<p><img class="img-container" src="imgs/image-20210606221033823.png" alt="image-20210606221033823"  />
</p>
<p>Search for this string.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">gfx.font_rendering.cleartype_params.enhanced_contrast
</code></pre></div><p>Change the value to 0.</p>
<p><img class="img-container" src="imgs/image-20210606221107000.png" alt="image-20210606221107000"  />
</p>
<p>Result ðŸ‘‡</p>
<p><img class="img-container" src="imgs/image-20210607074639032.png" alt="image-20210607074639032"  />
</p>
<p>It&rsquo;s not that smooth like in Chrome, but a little bit better ðŸ˜º.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
