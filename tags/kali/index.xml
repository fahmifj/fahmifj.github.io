<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kali on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/kali/</link>
    <description>Recent content in Kali on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 09 Jul 2021 07:45:19 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/kali/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My Kali Linux Setup for Playing HackTheBox</title>
      <link>https://fahmifj.github.io/blog/my-kali-linux-setup-for-playing-hackthebox/</link>
      <pubDate>Fri, 09 Jul 2021 07:45:19 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/my-kali-linux-setup-for-playing-hackthebox/</guid>
      <description>After using Kali 2019.4 for almost 2 years, I finally upgraded my Kali to 2021.2. I wanted to try Parrot or build a weaponized version of Ubuntu but because I like simplicity, I decided to use Kali again ðŸ˜„ //slap.
In this post, I&amp;rsquo;d like to share my Kali Linux setup for playing HackTheBox. I guess it is applicable for TryHackMe, VulnHub or other boot2root platform, too.
Display IP Address in Prompt Adding IP address in your prompt would be really helpful as it lets you copy the IP faster for reverse shell.</description>
      <content:encoded><![CDATA[<p>After using Kali 2019.4 for almost 2 years, I finally upgraded my Kali to 2021.2. I wanted to try Parrot or build a <em>weaponized</em> version of Ubuntu but because I like simplicity, I decided to use Kali again ðŸ˜„ //slap.</p>
<p>In this post, I&rsquo;d like to share my Kali Linux setup for playing HackTheBox. I guess it is applicable for TryHackMe, VulnHub or other boot2root platform, too.</p>
<h2 id="display-ip-address-in-prompt">Display IP Address in Prompt</h2>
<p>Adding IP address in your prompt would be really helpful as it lets you copy the IP faster for reverse shell. To do this, I&rsquo;ll modify the <code>.zshrc</code> file.</p>
<p>But, before performing any modification, consider to make a backup of your original file using the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cp ~/.zshrc<span style="color:#f92672">{</span>,.bak<span style="color:#f92672">}</span> 
</code></pre></div><p>Also, I usually put any customization at the top of the <code>.zshrc</code> file wrapped between two comments, for example:</p>
<pre><code># START CUSTOM
...[custom script here]
# END CUSTOM
</code></pre><p>If all set, add the following function to your <code>.zshrc</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#66d9ef">function</span> get_ip<span style="color:#f92672">(){</span>
   <span style="color:#75715e"># It can be thm or htb IP</span>
   tunnel_ip<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>ifconfig tun0 2&gt;/dev/null | grep netmask | awk <span style="color:#e6db74">&#39;{print $2}&#39;</span><span style="color:#e6db74">`</span> 
   <span style="color:#75715e"># Use eth0 as default IP,</span>
   default_ip<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>ifconfig eth0 2&gt;/dev/null | grep netmask | awk <span style="color:#e6db74">&#39;{print $2}&#39;</span><span style="color:#e6db74">`</span>
   <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $tunnel_ip <span style="color:#f92672">==</span> *<span style="color:#e6db74">&#34;10.&#34;</span>* <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
      echo $tunnel_ip
   <span style="color:#66d9ef">else</span>
      echo $default_ip
   <span style="color:#66d9ef">fi</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Then, find the following lines:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">...
<span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;</span>$PROMPT_ALTERNATIVE<span style="color:#e6db74">&#34;</span> in
        twoline<span style="color:#f92672">)</span>
...
</code></pre></div><p>Right after these lines, replace the entire <code>PROMPT</code> variable with the following line:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">PROMPT=$&#39;%F{%(#.blue.green)}â”Œâ”€â”€${debian_chroot:+($debian_chroot)â”€}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))â”€}(%B%F{%(#.red.blue)}%n$prompt_symbol%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/â€¦/%4~.%5~)%b%F{%(#.blue.green)}]-%B%F{152}[`get_ip`]%b%f%F{%(#.blue.green)}\nâ””â”€%B%(#.%F{red}#.%F{blue}$)%b%F{reset} &#39;
</code></pre></div><p>Restart terminal using one of the following commands.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ zsh
$ source ~/.zshrc
</code></pre></div><p>And done.</p>
<p><img class="img-container" src="imgs/image-20210709054914243.png" alt="image-20210709054914243"  />
</p>
<h2 id="openvpn-connection">OpenVPN Connection</h2>
<p>For VPN, it&rsquo;s tiring when you have to type <code>$ openvpn /path/to/config/file.ovpn</code> each time you want to connect to the HTB/THM network. To make thing easier, we can create a folder called <code>.ovpnconfig</code> in the home directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ mkdir -p ~/.ovpnconfig
</code></pre></div><p>Then place all the OpenVPN configuration files into this <code>.ovpnconfig</code> folder.</p>
<p><img class="img-container" src="imgs/image-20210709063528132.png" alt="image-20210709063528132"  />
</p>
<p>Finally, add some aliases into your <code>.zshrc</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">alias htbon=&#39;openvpn ~/ovpnconfig/htb-sg.ovpn 1&gt;/dev/null &amp;&#39;
alias htbfort=&#39;openvpn ~/ovpnconfig/htb-fortress.ovpn 1&gt;/dev/null &amp;&#39;
alias htbrel=&#39;openvpn ~/ovpnconfig/htb-release.ovpn 1&gt;/dev/null &amp;&#39;
alias thmon=&#39;openvpn ~/ovpnconfig/thm.ovpn 1&gt;/dev/null &amp;&#39;
alias thmwreath=&#39;openvpn ~/ovpnconfig/thm-wreath.ovpn 1&gt;/dev/null &amp;&#39;

# Kill VPN
alias kvpn=&#39;pkill openvpn&#39;
</code></pre></div><p>Now we can type <code>$ htbon</code> or <code>$ thmon</code> in the command prompt to connect to the VPN.</p>
<p>Want to turn off the VPN? Simply type <code>$ kvpn</code> !</p>
<h2 id="tools-transfer">Tools Transfer</h2>
<p>Just like the OpenVPN files, I like to keep essential tools to be centralized in one folder and so it can be hosted immediately. Again, we can create a folder called <code>tools</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ mkdir -p ~/tools
</code></pre></div><p>Put your tools inside the folder. The following are some of the tools that I think to be essential (including web-shell).</p>
<p><img class="img-container" src="imgs/image-20210709065944915.png" alt="image-20210709065944915"  />
</p>
<p>Next, add another alias to host these tools immediately with one command, feel free to create alias for yourself. Mine called <code>hostit</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">alias hostit<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;python3 -m http.server -d ~/tools 8000&#39;</span>
</code></pre></div><p>If you watch <a href="https://www.youtube.com/c/ippsec/videos">ippsec</a>, he prefers keeping the tools with the associated pwned machines (in <code>www</code> directory).</p>
<h2 id="ssh-configuration">SSH Configuration</h2>
<p>I have always use a separate SSH keys for CTF. My SSH key for CTF is using ed25519. You can create one using the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ssh-keygen -a <span style="color:#ae81ff">100</span> -t ed25519 -f ~/.ssh/ctf_ssh
</code></pre></div><p>The command will creates two files: <code>ctf_ssh</code> and <code>ctf_ssh.pub</code>.</p>
<p>After that, register your private key to SSH agent.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>ssh-agent -s<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
$ ssh-add ~/.ssh/ctf_ssh
</code></pre></div><p>Since HackTheBox machine starts with IP address of <code>10.10.*</code>, add these lines to your SSH config (<code>~/.ssh/config</code>). Create one if you don&rsquo;t have it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Host 10.10.*
  IdentityFile ~/.ssh/ctf_ssh
</code></pre></div><p>For persistence access*, if the target support SSH login, I would inject my the public key (<code>/.ssh/ctf_ssh.pub</code>) into the user <code>authorized_keys</code> file.  With the config above, I don&rsquo;t have to specify <code>-i /path/to/ssh/private/key</code> anymore.</p>
<blockquote>
<p>*Read more at <a href="https://fahmifj.github.io/blog/linux-backdoors-and-where-to-find-them/">Linux Backdoors</a> post.</p>
</blockquote>
<h2 id="note-template">Note Template</h2>
<p>My current note template are available on <a href="https://github.com/fahmifj/HackTheBox-notes/tree/main/machines/note-template">GitHub</a>. I&rsquo;m using the following function to recreate the template:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#66d9ef">function</span> mknote<span style="color:#f92672">(){</span>
  mkdir nmap gobuster loot logs exploits ssh-keys post-exploits
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<p><strong>nmap:</strong> each nmap scan goes here.</p>
</li>
<li>
<p><strong>gobuster:</strong> each gobuster scan goes here.</p>
</li>
<li>
<p><strong>loot:</strong> each interesting file for further analysis goes here.</p>
</li>
<li>
<p><strong>logs:</strong> If you like to log your activity with <code>$ script</code> , put them here.</p>
</li>
<li>
<p><strong>exploits:</strong> exploit script goes here.</p>
</li>
<li>
<p><strong>ssh-keys:</strong> obtained ssh-key goes here, not loot.</p>
</li>
<li>
<p><strong>post-exploits:</strong> post-compromise loot goes here.</p>
</li>
</ul>
<p>Usage is simple:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd htb-machine-folder/
$ mknote
$ tree
.
â”œâ”€â”€ exploits
â”œâ”€â”€ gobuster
â”œâ”€â”€ logs
â”œâ”€â”€ loot
â”œâ”€â”€ nmap
â”œâ”€â”€ post-exploits
â””â”€â”€ ssh-keys
</code></pre></div><h2 id="all-in-one-with-oh-my-zsh-plugin">All in One with Oh My Zsh Plugin</h2>
<p>If you&rsquo;re a <a href="https://ohmyz.sh/#install">Oh My Zsh</a> user like me, we can add these configuration (excluding SSH configuration) into a custom plugin.</p>
<p>Save the following script to  <code>/home/&lt;username&gt;/.oh-my-zsh/custom/plugins/ctf/ctf.plugin.zsh</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">function</span> get_ip<span style="color:#f92672">(){</span>
   <span style="color:#75715e"># It can be thm or htb IP</span>
   tunnel_ip<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>ifconfig tun0 2&gt;/dev/null | grep netmask | awk <span style="color:#e6db74">&#39;{print $2}&#39;</span><span style="color:#e6db74">`</span> 
   <span style="color:#75715e"># Use eth0 as default IP,</span>
   default_ip<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>ifconfig eth0 2&gt;/dev/null | grep netmask | awk <span style="color:#e6db74">&#39;{print $2}&#39;</span><span style="color:#e6db74">`</span>
   <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $tunnel_ip <span style="color:#f92672">==</span> *<span style="color:#e6db74">&#34;10.&#34;</span>* <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
      echo $tunnel_ip
   <span style="color:#66d9ef">else</span>
      echo $default_ip
   <span style="color:#66d9ef">fi</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">function</span> mknote<span style="color:#f92672">(){</span>
  mkdir nmap gobuster loot logs exploits ssh-keys dump post-exploits
<span style="color:#f92672">}</span>

alias htbon<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/htb-sg.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias htbfort<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/htb-fortress.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias htbrel<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/htb-release.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias thmon<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/thm.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias thmwreath<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/thm-wreath.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias kvpn<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;pkill openvpn&#39;</span>
</code></pre></div><p>The next step is depending on your theme, I use a theme called <code>robbyrussell</code>. I created a copy of the theme in <code> /home/kali/.oh-my-zsh/custom/themes/robbyrussell.zsh-theme</code> and modified the theme to display prompt in two line with IP address. The modified version as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">NEWLINE=$&#39;\n$&#39; 
PROMPT=&#39;%(?:%{$fg_bold[green]%}â†’:%{$fg_bold[red]%}â†’)&#39;
PROMPT+=&#39; %F{4}%n@%m %{$fg[cyan]%}Â«%cÂ»%{$reset_color%}&#39;
PROMPT+=&#39; %B%F{152}Â«$(get_ip)Â»%f%b $(git_prompt_info)&#39;
PROMPT+=&#34;%F{31}${NEWLINE} %f&#34;

ZSH_THEME_GIT_PROMPT_PREFIX=&#34;%{$fg_bold[blue]%}git:(%{$fg[red]%}&#34;
ZSH_THEME_GIT_PROMPT_SUFFIX=&#34;%{$reset_color%} &#34;
ZSH_THEME_GIT_PROMPT_DIRTY=&#34;%{$fg[blue]%}) %{$fg[yellow]%}âœ—&#34;
ZSH_THEME_GIT_PROMPT_CLEAN=&#34;%{$fg[blue]%})&#34;
</code></pre></div><p>Finally, load the <code>ctf</code> plugin we created in <code>.zshrc</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">...[SNIP]...
# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git ctf)

...[SNIP]...
</code></pre></div><p>Restart your terminal and we&rsquo;re done.</p>
<p>In the next section, I provided some problems I found during using this newer Kali VM, and you can skip it.</p>
<p>And that&rsquo;s all for this post!</p>
<h2 id="problem-with-kali-linux-20212">Problem with Kali Linux 2021.2</h2>
<h3 id="font-too-small-unsolved">Font too small (Unsolved)</h3>
<p>My current problem with Kali Linux 2021.2 is that the menu font in qterminal cannot be resized like I did with 2019.4 and this is annoying ðŸ™ƒ.</p>
<p><img class="img-container" src="imgs/image-20210709052634017.png" alt="image-20210709052634017"  />
</p>
<h3 id="permission-denied-on-installing-virtualbox-guest-addition-solved">Permission Denied on Installing VirtualBox Guest Addition (Solved)</h3>
<p>If you face this error even after trying to install VirtualBox Guest Addition with sudo.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"> sudo: unable to execute ./VBoxLinuxAdditions.run: Permission denied.
</code></pre></div><p>The cause is probably you mounted the cd with <code>no exec</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ mount -v | grep media                      
/dev/sr0 on /media/cdrom0 type iso9660 <span style="color:#f92672">(</span>ro,nosuid,nodev,relatime,nojoliet,check<span style="color:#f92672">=</span>s,map<span style="color:#f92672">=</span>n,blocksize<span style="color:#f92672">=</span>2048,user<span style="color:#f92672">)</span> 
</code></pre></div><p>To resolve it, remount the cd of Guest Addition with <code>exec</code>.</p>
<pre><code>$ sudo mount -o remount,ro,exec /media/cdrom0       
</code></pre><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54">https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
