<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CI/CD on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/ci/cd/</link>
    <description>Recent content in CI/CD on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://fahmifj.github.io/tags/ci/cd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deploy a Hugo site with Github Actions</title>
      <link>https://fahmifj.github.io/articles/hugo-github-actions/</link>
      <pubDate>Mon, 01 Nov 2021 14:51:02 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/articles/hugo-github-actions/</guid>
      <description>Applying a small part of Continuous Deployment to your Hugo site</description>
      <content:encoded><![CDATA[<p>This is a continuation post from <a href="/blog/hugo-setup-and-deployment/"target="_blank" rel="noopener noreferrer"
>Hugo Setup and Deployment</a> in Hugo series.</p>
<p>In the previous post, we covered the basics of using Hugo. Not only the basics, we also learnt behind the scenes of SSG, getting your site published with GitHub Pages, and finally, we wrote a deployment script written in bash which is used to automatically update the blog&rsquo;s contents.</p>
<p>The last script we wrote actually is not an effective way to deploy our site because it will generate lots of new HTML files on our machine. With this way, instead of uploading only the files we modified, all these files will be uploaded to the Internet every time we update our site. If you care about network bandwidth or things like SSD endurance, that&rsquo;s probably not a good thing. Luckily, we can solve this with GitHub Actions.</p>
<p>GitHub Actions basically does the same thing as our deployment script, but, instead of using our own machine to generate and push the HTML files, we&rsquo;ll let GitHub VM orDocker instances do it for us.</p>
<p>In this post, we&rsquo;ll focus more on the deployment side.</p>
<h4 id="goals">Goals</h4>
<ul>
<li>Automate Site Deployment using GitHub Actions</li>
<li>Use theme as submodule</li>
</ul>
<h4 id="prerequisites">Prerequisites</h4>
<p>Prerequisites are still the same, they are:</p>
<ul>
<li>A GitHub account</li>
<li>Familiarity with CLI</li>
<li>Familiarity with Git.</li>
</ul>
<h2 id="preparation">Preparation</h2>
<h3 id="clean-up">Clean Up</h3>
<p>Let&rsquo;s start by reviewing the previous site structure, here&rsquo;s where we left it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ tree -a -L <span class="m">2</span> -I <span class="s2">&#34;\.git&#34;</span>
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── .gitmodules
</span></span><span class="line"><span class="cl">├── archetypes
</span></span><span class="line"><span class="cl">│   └── default.md
</span></span><span class="line"><span class="cl">├── config.yml
</span></span><span class="line"><span class="cl">├── content
</span></span><span class="line"><span class="cl">│   └── post
</span></span><span class="line"><span class="cl">├── data
</span></span><span class="line"><span class="cl">├── deploy.sh
</span></span><span class="line"><span class="cl">├── layouts
</span></span><span class="line"><span class="cl">├── public <span class="c1"># &lt;-- All files under this folder are hosted using GitHub Pages,</span>
</span></span><span class="line"><span class="cl">│   ├── 404.html
</span></span><span class="line"><span class="cl">│   ├── assets
</span></span><span class="line"><span class="cl">│   ├── categories
</span></span><span class="line"><span class="cl">│   ├── en
</span></span><span class="line"><span class="cl">│   ├── fa
</span></span><span class="line"><span class="cl">│   ├── fr
</span></span><span class="line"><span class="cl">│   ├── index.html
</span></span><span class="line"><span class="cl">│   ├── index.json
</span></span><span class="line"><span class="cl">│   ├── index.xml
</span></span><span class="line"><span class="cl">│   ├── page
</span></span><span class="line"><span class="cl">│   ├── post
</span></span><span class="line"><span class="cl">│   ├── robots.txt
</span></span><span class="line"><span class="cl">│   ├── series
</span></span><span class="line"><span class="cl">│   ├── sitemap.xml
</span></span><span class="line"><span class="cl">│   └── tags
</span></span><span class="line"><span class="cl">├── resources
</span></span><span class="line"><span class="cl">│   └── _gen
</span></span><span class="line"><span class="cl">├── static
</span></span><span class="line"><span class="cl">└── themes
</span></span><span class="line"><span class="cl">    └── PaperMod
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">20</span> directories, <span class="m">10</span> files
</span></span></code></pre></div><p>We&rsquo;ll now ignore the public folder and remove all of its content including the git repository inside it because this will be handled by GitHub Actions later.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ rm ./public/* -r f
</span></span><span class="line"><span class="cl">$ rm ./public/.git -rf
</span></span></code></pre></div><p>If you happen to use the <code>public</code> folder as a submodule, remove the following lines from <code>.git/config</code> and  <code>.gitmodules</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[submodule &#34;public&#34;]
</span></span><span class="line"><span class="cl">        url = https://github.com/your-username/my-blog.git
</span></span><span class="line"><span class="cl">        active = true
</span></span></code></pre></div><p>Clean any cached content from the <code>public</code> folder.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git rm --cached ./public -f
</span></span></code></pre></div><p>Then let&rsquo;s create another GitHub repository with the format <code>your-username.github.io</code>, because we&rsquo;re going to use this repo as the remote repository of our site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git remote add origin https://github.com/your-username/your-username.github.io.git
</span></span></code></pre></div><p>For the <code>config.yaml</code>, change the baseURL value with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">baseURL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://your-username.github.io/&#34;</span><span class="w">
</span></span></span></code></pre></div><h3 id="add-the-theme-as-submodule">Add the Theme as Submodule</h3>
<p>If you happen to not using theme as submodule previously, this time we will.</p>
<p>Run the following command to add the PaperMod theme we cloned previously as a submodule of our site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
</span></span></code></pre></div><p>If you don&rsquo;t use the same theme, simply replace the url and directory parts to match yours.</p>
<h2 id="configure-github-actions">Configure Github Actions</h2>
<p>In the deployment script, we&rsquo;ve automated several things: site build, commit, and push our site to GitHub. We can call the execution of this script as a <strong>workflow</strong> that runs a single <strong>job</strong>, it is to deploy our site. Each command executed within the deployment script (build, commit, push) can be referred as a <strong>step</strong>.</p>
<p>GitHub Actions are basically the advanced version of the deployment script we created. It&rsquo;s event-driven, which means we can set a specific event to trigger the workflow. In this case, we&rsquo;ll create an event that will trigger the site deployment each time we push a new commit to the main branch.</p>
<h3 id="create-the-workflow">Create the Workflow</h3>
<p>A workflow file for GitHub Actions must be written in YAML syntax, and it&rsquo;s placed under a special directory called <code>.github/workflows/[here].yml</code>, so let&rsquo;s create the folder first inside our site repository.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p ./.github/workflows
</span></span></code></pre></div><p>We&rsquo;ll save the following codes under the workflow directory with a name <code>gh-pages.yml</code> (<code>./.github/workflows/gh-pages.yml</code>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">github pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># the event</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">main </span><span class="w"> </span><span class="c"># Set a branch to deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-18.04</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># Fetch Hugo themes (true OR recursive)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">    </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2 </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;latest&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify --cleanDestinationDir</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">github_token</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GITHUB_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span></code></pre></div><p>You can study the code yourself, because I&rsquo;m not the one who created it 😅. But, to make sure that the public folder always get cleaned first before build, I added the <code>--cleanDestinationDir</code> option.</p>
<p>Let&rsquo;s commit this workflow and push it to GitHub.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git add ./.github/workflows/gh-pages.yml
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;Add gh-pages.yml&#34;</span>
</span></span><span class="line"><span class="cl">$ git push -u origin main
</span></span></code></pre></div><h3 id="trigger-the-workflow">Trigger the Workflow!</h3>
<p>We can create a new post, then add some text to it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ hugo new post/test-gh-actions.md
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;Test GH Action&#39;</span> &gt;&gt; content/post/test-gh-actions.md
</span></span></code></pre></div><p>Finally, commit the change and push it to your repository to trigger the workflow</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;Trigger build&#34;</span>
</span></span><span class="line"><span class="cl">$ git push -u origin main
</span></span></code></pre></div><p>To observe the deployment process/workflow, we can navigate to the site repository and click on the Actions menu (<code>https://github.com/your-username/your-username.github.io/actions</code>).</p>
<p>Revisit your site to verify.</p>
<h2 id="off-topic">Off-Topic</h2>
<h3 id="my-current-deployment">My Current Deployment</h3>
<p>My deployment process is a little bit different. This is because I&rsquo;ve separated my blog into two repositories: <code>blog-core</code> and  <code>fahmifj.github.io</code> .  The blog-core repo is a private repo that contains all of my site resources in raw. The <code>fahmifj.github.io</code> repo is a public repository that contains all the generated html from the <code>blog-core</code> repo.</p>
<p>I added a GitHub Actions workflow in the <code>blog-core</code> repo. It runs automatically when I update the repo, generates static HTML files, and then pushes them to the public repo. This <code>blog-core</code> repo held my secret token, which GitHub Actions uses to authenticate and make changes to the public repo.</p>
<p><div class="img-container"><img src="imgs/image-20211102111943965.png" alt="image-20211102111943965"  /></div>
</p>
<blockquote>
<p>Note: these are not the actual commands.</p>
</blockquote>
<p>Well, it&rsquo;s not in detail, but it should give you an idea of how it works. Visit this <a href="https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/"target="_blank" rel="noopener noreferrer"
>site</a> if you want to learn more about it.</p>
<p>See you in another post!</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
