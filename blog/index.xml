<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Blog on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/blog/</link>
    <description>Recent content in Blog on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 24 May 2021 19:58:39 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My Kali Linux Setup for Playing HackTheBox</title>
      <link>https://fahmifj.github.io/blog/my-kali-linux-setup-for-playing-hackthebox/</link>
      <pubDate>Fri, 09 Jul 2021 07:45:19 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/my-kali-linux-setup-for-playing-hackthebox/</guid>
      <description>After using Kali 2019.4 for almost 2 years, I finally upgraded my Kali to 2021.2. I wanted to try Parrot or build a weaponized version of Ubuntu , but because I like simplicity, I decided to use Kali again 😄 //slap.
In this post, I&amp;rsquo;d like to share my Kali Linux setup for playing HackTheBox. I guess it is applicable for TryHackMe, VulnHub or other boot2root platform, too (I hope).</description>
      <content:encoded><![CDATA[<p>After using Kali 2019.4 for almost 2 years, I finally upgraded my Kali to 2021.2. I wanted to try Parrot or build a <em>weaponized</em> version of Ubuntu , but because I like simplicity, I decided to use Kali again 😄 <em>//slap</em>.</p>
<p>In this post, I&rsquo;d like to share my Kali Linux setup for playing HackTheBox. I guess it is applicable for TryHackMe, VulnHub or other boot2root platform, too (I hope).</p>
<h2 id="display-ip-address-in-prompt">Display IP Address in Prompt</h2>
<p>Adding IP address in your prompt would be really helpful as it lets you copy the IP faster for reverse shell. To do so, we&rsquo;ll need to modify the <code>.zshrc</code> file. But, before performing any modification, consider to make a backup of your original file using the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cp ~/.zshrc<span style="color:#f92672">{</span>,.bak<span style="color:#f92672">}</span> 
</code></pre></div><p>Also, I usually put any customization at the top of the <code>.zshrc</code> file wrapped between two comments, for example:</p>
<pre><code># START CUSTOM
...[custom script here]
# END CUSTOM
</code></pre><p>If all set, add the following function to your <code>.zshrc</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#66d9ef">function</span> get_ip<span style="color:#f92672">(){</span>
   <span style="color:#75715e"># It can be thm or htb IP</span>
   tunnel_ip<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>ifconfig tun0 2&gt;/dev/null | grep netmask | awk <span style="color:#e6db74">&#39;{print $2}&#39;</span><span style="color:#e6db74">`</span> 
   <span style="color:#75715e"># Use eth0 as default IP,</span>
   default_ip<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>ifconfig eth0 2&gt;/dev/null | grep netmask | awk <span style="color:#e6db74">&#39;{print $2}&#39;</span><span style="color:#e6db74">`</span>
   <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $tunnel_ip <span style="color:#f92672">==</span> *<span style="color:#e6db74">&#34;10.&#34;</span>* <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
      echo $tunnel_ip
   <span style="color:#66d9ef">else</span>
      echo $default_ip
   <span style="color:#66d9ef">fi</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Then, find the following lines:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">...
<span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;</span>$PROMPT_ALTERNATIVE<span style="color:#e6db74">&#34;</span> in
        twoline<span style="color:#f92672">)</span>
...
</code></pre></div><p>Under these lines,  replace the entire <code>PROMPT</code> variable with the following line:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">PROMPT=$&#39;%F{%(#.blue.green)}┌──${debian_chroot:+($debian_chroot)─}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))─}(%B%F{%(#.red.blue)}%n$prompt_symbol%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/…/%4~.%5~)%b%F{%(#.blue.green)}]-%B%F{152}[`get_ip`]%b%f%F{%(#.blue.green)}\n└─%B%(#.%F{red}#.%F{blue}$)%b%F{reset} &#39;
</code></pre></div><p>Reopen your terminal or type one of the following commands in the terminal.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ zsh
$ source ~/.zshrc
</code></pre></div><p>And done.</p>
<p><img class="img-container" src="imgs/image-20210709054914243.png" alt="image-20210709054914243"  />
</p>
<h2 id="openvpn-connection">OpenVPN Connection</h2>
<p>For VPN, it&rsquo;s tiring when you have to type <code>$ openvpn /path/to/config/file.ovpn</code> each time you want to connect to the HTB/THM network. To make thing easier, we can create a folder called <code>.ovpnconfig</code> in the home directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ mkdir -p ~/.ovpnconfig
</code></pre></div><p>Then put all of your OpenVPN configuration files into this <code>.ovpnconfig</code> folder.</p>
<p><img class="img-container" src="imgs/image-20210709063528132.png" alt="image-20210709063528132"  />
</p>
<p>Finally, add some aliases into your <code>.zshrc</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">alias htbon<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/htb-sg.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias htbfort<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/htb-fortress.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias htbrel<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/htb-release.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias thmon<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/thm.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias thmwreath<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/thm-wreath.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias kvpn<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;pkill openvpn&#39;</span>
</code></pre></div><p>Now we can type <code>$ htbon</code> or <code>$ thmon</code> in the command prompt to connect to the VPN.  Want to turn off the VPN? Simply type <code>$ kvpn</code> !</p>
<p>In the newer Kali Linux, the only problem is that <code>openvpn</code> must be executed with <code>sudo</code> . Therefore, you&rsquo;ve to add the following <code>sudo</code> alias.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"># Source: https://askubuntu.com/questions/750419/how-do-i-run-a-sudo-command-needing-password-input-in-the-background
alias sudo=&#39;sudo -v; [ $? ] &amp;&amp; sudo &#39;
</code></pre></div><ul>
<li><code>sudo -v</code> will authenticate the user first.</li>
<li><code>[ $? ] &amp;&amp; sudo </code> will check if the previous command (separated by semi-colon) return with success (value of 0), if yes run <code>sudo</code> again.</li>
</ul>
<p>This time, we can run these aliases with sudo command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo &lt;alias-command&gt;
$ sudo htbon
$ sudo thmon
$ sudo kvpn
</code></pre></div><h2 id="tools-transfer">Tools Transfer</h2>
<p>Just like the OpenVPN files, I like to keep the essential tools to be centralized in one folder and so it can be hosted immediately. Again, we can create a folder called <code>tools</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ mkdir -p ~/tools
</code></pre></div><p>Put your tools inside the folder. The following are some of the tools that I think to be essential (including web-shell).</p>
<p><img class="img-container" src="imgs/image-20210709065944915.png" alt="image-20210709065944915"  />
</p>
<p>Next, add another alias to host these tools immediately with one command, feel free to create alias for yourself. Mine called <code>hostit</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">alias hostit<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;python3 -m http.server -d ~/tools 8000&#39;</span>
</code></pre></div><p>If you watch <a href="https://www.youtube.com/c/ippsec/videos">ippsec</a>, he prefers keeping the tools with the associated pwned machines (in <code>www</code> directory). So it&rsquo;s up to you.</p>
<h2 id="note-template">Note Template</h2>
<p>My current note template is available on <a href="https://github.com/fahmifj/HackTheBox-notes/tree/main/machines/note-template">GitHub</a>. I&rsquo;m using the following function to recreate the directory structure:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#66d9ef">function</span> mknote<span style="color:#f92672">(){</span>
  mkdir nmap gobuster loot logs exploits ssh-keys post-exploits
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<p><strong>nmap:</strong> each nmap scan goes here.</p>
</li>
<li>
<p><strong>gobuster:</strong> each gobuster scan goes here.</p>
</li>
<li>
<p><strong>loot:</strong> each interesting file for further analysis goes here.</p>
</li>
<li>
<p><strong>logs:</strong> If you like to log your activity with <code>$ script</code> , put them here.</p>
</li>
<li>
<p><strong>exploits:</strong> exploit script goes here.</p>
</li>
<li>
<p><strong>ssh-keys:</strong> obtained ssh-key goes here, not loot.</p>
</li>
<li>
<p><strong>post-exploits:</strong> post-compromise loot goes here.</p>
</li>
</ul>
<p>Usage is simple:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd htb-machine-folder/
$ mknote
$ tree
.
├── exploits
├── gobuster
├── logs
├── loot
├── nmap
├── post-exploits
└── ssh-keys
</code></pre></div><h2 id="ssh-configuration">SSH Configuration</h2>
<p>I have always use a separate SSH keys for CTF. My SSH key for CTF is using ed25519. You can create one using the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ssh-keygen -a <span style="color:#ae81ff">100</span> -t ed25519 -f ~/.ssh/ctf_ssh
</code></pre></div><p>The command will creates two files: <code>ctf_ssh</code> and <code>ctf_ssh.pub</code>.</p>
<p>After that, register your private key to SSH agent.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>ssh-agent -s<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
$ ssh-add ~/.ssh/ctf_ssh
</code></pre></div><p>Since HackTheBox machine starts with IP address of <code>10.10.*</code>, add these lines to your SSH config (<code>~/.ssh/config</code>). Create one if you don&rsquo;t have it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Host 10.10.*
  IdentityFile ~/.ssh/ctf_ssh
</code></pre></div><p>With the config above, whenever I injected my public key  (<code>/.ssh/ctf_ssh.pub</code>)  to HackTheBox machine for persistence access*, I can login by simply typing <code>$ ssh machine-name@hostname</code> or <code>$ ssh machine-name@ip</code>. I don&rsquo;t have to specify <code>-i /path/to/ssh/private/key</code> anymore.</p>
<blockquote>
<p>*Read more at <a href="https://fahmifj.github.io/blog/linux-backdoors-and-where-to-find-them/">Linux Backdoors</a> post.</p>
</blockquote>
<h2 id="qterminal-configuration">QTerminal Configuration</h2>
<p>Unfortunately I&rsquo;m not a tmux user here. Tmux is rich in features, but I&rsquo;m not comfortable with its prefix key. So far, I&rsquo;ve always used the default QTerminal application and leveraged its shortcut feature to &lsquo;navigate&rsquo; a slightly faster in terminal.</p>
<p>If you&rsquo;re a Windows Terminal user, you&rsquo;ll familiar with some of these shortcuts:</p>
<ul>
<li><strong><code>ALT + Arrows</code></strong>: Move cursor in subterminal</li>
<li><strong><code>CTRL + TAB</code></strong>: Navigate between tabs</li>
<li><strong><code>CTRL + Arrow Left</code></strong>:  Previous tab</li>
<li><strong><code>CTRL + Arrow Right</code></strong>: Next tab</li>
<li><strong><code>CTRL + N</code></strong> : New terminal tab</li>
<li><strong><code>CTRL + SHIFT + W</code></strong> : Close current subterminal</li>
<li><strong><code>CTRL + SHIFT + =</code></strong> : Split terminal vertically</li>
<li><strong><code>CTRL + SHIFT + -</code></strong> : Split terminal horizontally</li>
<li><strong><code>CTRL + SHIFT + F</code></strong> : Open search bar in terminal</li>
<li><strong><code>CTRL + =</code></strong> : Zoom in</li>
<li><strong><code>CTRL + -</code></strong> : Zoom out</li>
</ul>
<p>For me, the only limitation here is that there is no shortcut for resizing a subterminal.</p>
<h2 id="all-in-one-with-oh-my-zsh-plugin">All in One with Oh My Zsh Plugin</h2>
<p>If you&rsquo;re a <a href="https://ohmyz.sh/#install">Oh My Zsh</a> user like me, we can add these configuration (excluding SSH and QTerminal configurations) into a custom plugin.</p>
<p>Save the following script to  <code>/home/&lt;username&gt;/.oh-my-zsh/custom/plugins/ctf/ctf.plugin.zsh</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">function</span> get_ip<span style="color:#f92672">(){</span>
   <span style="color:#75715e"># It can be thm or htb IP</span>
   tunnel_ip<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>ifconfig tun0 2&gt;/dev/null | grep netmask | awk <span style="color:#e6db74">&#39;{print $2}&#39;</span><span style="color:#e6db74">`</span> 
   <span style="color:#75715e"># Use eth0 as default IP,</span>
   default_ip<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>ifconfig eth0 2&gt;/dev/null | grep netmask | awk <span style="color:#e6db74">&#39;{print $2}&#39;</span><span style="color:#e6db74">`</span>
   <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $tunnel_ip <span style="color:#f92672">==</span> *<span style="color:#e6db74">&#34;10.&#34;</span>* <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
      echo $tunnel_ip
   <span style="color:#66d9ef">else</span>
      echo $default_ip
   <span style="color:#66d9ef">fi</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">function</span> mknote<span style="color:#f92672">(){</span>
  mkdir nmap gobuster loot logs exploits ssh-keys dump post-exploits
<span style="color:#f92672">}</span>

<span style="color:#75715e"># https://askubuntu.com/questions/750419/how-do-i-run-a-sudo-command-needing-password-input-in-the-background</span>
alias sudo<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;sudo -v; [ $? ] &amp;&amp; sudo &#39;</span>
alias htbon<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/htb-sg.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias htbfort<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/htb-fortress.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias htbrel<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/htb-release.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias thmon<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/thm.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias thmwreath<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;openvpn ~/ovpnconfig/thm-wreath.ovpn 1&gt;/dev/null &amp;&#39;</span>
alias kvpn<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;pkill openvpn&#39;</span>
alias hostit<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;python3 -m http.server -d ~/tools 8000&#39;</span>
</code></pre></div><p>The next step is depending on your theme, I use a theme called <code>robbyrussell</code>. I created a copy of the theme in <code> /home/kali/.oh-my-zsh/custom/themes/robbyrussell.zsh-theme</code> and modified the theme to display prompt in two line with IP address. The modified version as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">NEWLINE=$&#39;\n$&#39; 
PROMPT=&#39;%(?:%{$fg_bold[green]%}→:%{$fg_bold[red]%}→)&#39;
PROMPT+=&#39; %F{4}%n@%m %{$fg[cyan]%}«%c»%{$reset_color%}&#39;
PROMPT+=&#39; %B%F{152}«$(get_ip)»%f%b $(git_prompt_info)&#39;
PROMPT+=&#34;%F{31}${NEWLINE} %f&#34;

ZSH_THEME_GIT_PROMPT_PREFIX=&#34;%{$fg_bold[blue]%}git:(%{$fg[red]%}&#34;
ZSH_THEME_GIT_PROMPT_SUFFIX=&#34;%{$reset_color%} &#34;
ZSH_THEME_GIT_PROMPT_DIRTY=&#34;%{$fg[blue]%}) %{$fg[yellow]%}✗&#34;
ZSH_THEME_GIT_PROMPT_CLEAN=&#34;%{$fg[blue]%})&#34;
</code></pre></div><p>Finally, load the <code>ctf</code> plugin we created in <code>.zshrc</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">...[SNIP]...
# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git ctf)

...[SNIP]...
</code></pre></div><p>Restart your terminal and we&rsquo;re done.</p>
<p><img class="img-container" src="imgs/image-20210711221808834.png" alt="image-20210711221808834"  />
</p>
<p>In the next section, I provided some problems I found during using this newer Kali VM you can skip it.</p>
<p>And that&rsquo;s all for this post!</p>
<h2 id="problem-with-kali-linux-20212">Problem with Kali Linux 2021.2</h2>
<h3 id="font-too-small-unresolved">Font too small (Unresolved)</h3>
<p>My current problem with Kali Linux 2021.2 is that the menu font in qterminal cannot be resized like I did with 2019.4 and this is quite annoying 🙃.</p>
<p><img class="img-container" src="imgs/image-20210709052634017.png" alt="image-20210709052634017"  />
</p>
<h3 id="permission-denied-on-installing-virtualbox-guest-addition-solved">Permission Denied on Installing VirtualBox Guest Addition (Solved)</h3>
<p>If you face this error even after trying to install VirtualBox Guest Addition with sudo.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"> sudo: unable to execute ./VBoxLinuxAdditions.run: Permission denied.
</code></pre></div><p>The cause is probably you mounted the cd with <code>no exec</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ mount -v | grep media                      
/dev/sr0 on /media/cdrom0 type iso9660 <span style="color:#f92672">(</span>ro,nosuid,nodev,relatime,nojoliet,check<span style="color:#f92672">=</span>s,map<span style="color:#f92672">=</span>n,blocksize<span style="color:#f92672">=</span>2048,user<span style="color:#f92672">)</span> 
</code></pre></div><p>To resolve it, remount the cd of Guest Addition with <code>exec</code>.</p>
<pre><code>$ sudo mount -o remount,ro,exec /media/cdrom0       
</code></pre><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54">https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54</a></li>
<li><a href="https://askubuntu.com/questions/750419/how-do-i-run-a-sudo-command-needing-password-input-in-the-background">https://askubuntu.com/questions/750419/how-do-i-run-a-sudo-command-needing-password-input-in-the-background</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setup a Samba Server in Azure and Make It Accessible Over Internet</title>
      <link>https://fahmifj.github.io/blog/setup-a-samba-server-in-azure-and-make-it-accessible-over-internet/</link>
      <pubDate>Sun, 04 Jul 2021 19:45:21 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/setup-a-samba-server-in-azure-and-make-it-accessible-over-internet/</guid>
      <description>Last month, I was asked to setup a Samba/SMB server that is accessible over the Internet. Because it will only be used temporarily, I decided to use an Azure Virtual Machine (VM) instead of buying a dedicated VPS.
In this post, I’ll share my documentation on how to setup a Samba server in Azure.
Before proceeding further, I&amp;rsquo;ll state that:
 Exposing an SMB Server directly to the Internet is not recommended, or not considered to be &amp;lsquo;best practice&amp;rsquo;.</description>
      <content:encoded><![CDATA[<p>Last month, I was asked to setup a Samba/SMB server that is accessible over the Internet. Because it will only be used temporarily, I decided to use an Azure Virtual Machine (VM) instead of buying a dedicated VPS.</p>
<p>In this post, I’ll share my documentation on how to setup a Samba server in Azure.</p>
<p>Before proceeding further, I&rsquo;ll state that:</p>
<blockquote>
<p>Exposing an SMB Server directly to the Internet is not recommended, or not considered to be &lsquo;best practice&rsquo;. The safest way to make it accessible over the Internet is by setting up a VPN server and putting the SMB inside the VPN network.</p>
</blockquote>
<h2 id="goals-and-outcomes">Goals and Outcomes</h2>
<p>The goal here is exactly the same as what’s written in the title, but by the end of this post, you will be able to:</p>
<ul>
<li>Deploy an Ubuntu server in Azure</li>
<li>Setup and Configure a Samba server</li>
<li>Exposing Samba server over Internet</li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<p>The one and only prerequisite is:</p>
<ul>
<li>Azure Account</li>
</ul>
<p>Also, since this post won&rsquo;t be detailed step by step, I&rsquo;ll assume that you have:</p>
<ul>
<li>Basic knowledge of Azure, at least menu navigation and creating a resource group.</li>
<li>Basic knowledge of Linux</li>
</ul>
<p>Let&rsquo;s jump in!</p>
<h2 id="vm-configuration--deploy">VM Configuration &amp; Deploy</h2>
<p>At this step, I already have a resource group called <code>IAMF_SMB-TEST</code> and I&rsquo;ll be creating a VM instance inside this resource. It&rsquo;s a small server used by 4-5 users, so B1s will be enough. You&rsquo;re free to customize the VM.</p>
<p>The VM details of mine can be seen in the following image:</p>
<p><img class="img-container" src="imgs/image-20210513170545346.png" alt="image-20210513170545346"  />
</p>
<p>For authentication to the server, I&rsquo;ll be using an SSH public key here instead of a password. The account for server administration is called <code>azure-smb</code>. Since the authentication is SSH, this VM will have an SSH port open publicly (internet).</p>
<p><img class="img-container" src="imgs/image-20210513170638603.png" alt="image-20210513170638603"  />
</p>
<p>In the following section, I&rsquo;ll use a standard SSD and leave the other settings at their defaults.</p>
<p><img class="img-container" src="imgs/image-20210513170710958.png" alt="image-20210513170710958"  />
</p>
<p>In the <strong>Networking</strong> section, I&rsquo;ll just create a new virtual network. See the following image for details:</p>
<p><img class="img-container" src="imgs/image-20210513170824172.png" alt="image-20210513170824172"  />
</p>
<p>In the <strong>Management</strong> section, because it will be temporary, I&rsquo;ll just disable the boot diagnostics.</p>
<p><img class="img-container" src="imgs/image-20210513171009570.png" alt="image-20210513171009570"  />
</p>
<p>I&rsquo;ll leave the <strong>Advanced</strong> with the default settings and skip the <strong>Tags</strong> section.</p>
<p>The last section is <strong>Review + Create</strong>, which basically reviews the VM configuration. After I finish the review, I&rsquo;ll press the <strong>Create</strong> button.</p>
<p><img class="img-container" src="imgs/image-20210513171153896.png" alt="image-20210513171153896"  />
</p>
<p>When the <strong>Create</strong> button is clicked, the VM will be automatically deployed.</p>
<p><img class="img-container" src="imgs/image-20210513171501031.png" alt="image-20210513171501031"  />
</p>
<h2 id="vm-login-via-ssh">VM Login via SSH</h2>
<p>The next step is to login to the deployed VM instance via SSH using the previously created username and key/password. The public IP of the VM instance can be found at the <code>Dashboard</code> &gt; <code>RESOURCE_GROUP_NAME</code> &gt; <code>PUBLIC_IP_NAME</code>. In my case, it is <code>Dashboard</code> &gt; <code>IAMF_SMB-TEST</code> &gt; <code>smb-server-ip</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ssh -i private_key azure-smb@PUBLIC_IP_ADDRESS
</code></pre></div><p><img class="img-container" src="imgs/image-20210513171606268.png" alt="image-20210513171606268"  />
</p>
<h2 id="smb-configuration">SMB Configuration</h2>
<h3 id="installation-and-initial-setup">Installation and Initial Setup</h3>
<p>First thing first, let&rsquo;s update the repository list.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo apt update
</code></pre></div><p>After that, install <code>Samba</code> with the following command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo apt install samba
</code></pre></div><p>Once the installation is done, check the Samba service daemon status.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo systemctl status smbd
● smbd.service - Samba SMB Daemon
   Loaded: loaded <span style="color:#f92672">(</span>/lib/systemd/system/smbd.service; enabled; vendor preset: enabled<span style="color:#f92672">)</span>
   Active: active <span style="color:#f92672">(</span>running<span style="color:#f92672">)</span> since Thu 2021-05-13 10:17:45 UTC; 3min 48s ago
     Docs: man:smbd<span style="color:#f92672">(</span>8<span style="color:#f92672">)</span>
           man:samba<span style="color:#f92672">(</span>7<span style="color:#f92672">)</span>
           man:smb.conf<span style="color:#f92672">(</span>5<span style="color:#f92672">)</span>
 Main PID: <span style="color:#ae81ff">2098</span> <span style="color:#f92672">(</span>smbd<span style="color:#f92672">)</span>
   Status: <span style="color:#e6db74">&#34;smbd: ready to serve connections...&#34;</span>
    Tasks: <span style="color:#ae81ff">4</span> <span style="color:#f92672">(</span>limit: 1056<span style="color:#f92672">)</span>
   CGroup: /system.slice/smbd.service
           ├─2098 /usr/sbin/smbd --foreground --no-process-group
           ├─2123 /usr/sbin/smbd --foreground --no-process-group
           ├─2124 /usr/sbin/smbd --foreground --no-process-group
           └─2129 /usr/sbin/smbd --foreground --no-process-group

May <span style="color:#ae81ff">13</span> 10:17:44 smb-server systemd<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>: Starting Samba SMB Daemon...
May <span style="color:#ae81ff">13</span> 10:17:45 smb-server systemd<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>: Started Samba SMB Daemon.
</code></pre></div><p>Samba is ready, and now let&rsquo;s configure the share folder.</p>
<h3 id="shares-configuration">Shares Configuration</h3>
<p>First, let&rsquo;s create a backup file of the original configuration, so we can reset it to the default configuration, just in case something goes wrong.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo cp /etc/samba/smb.conf<span style="color:#f92672">{</span>,.backup<span style="color:#f92672">}</span>
</code></pre></div><p>Now create a share folder name it <code>sambashare</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ mkdir sambashare
</code></pre></div><p>Then open the samba configuration file with a text editor like <code>nano</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo nano /etc/samba/smb.conf
</code></pre></div><p>Go straight to the bottom of the file and add the following lines.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#f92672">[</span>sambashare<span style="color:#f92672">]</span>
    comment <span style="color:#f92672">=</span> Samba Share
    path <span style="color:#f92672">=</span> /home/azure-smb/sambashare
    read only <span style="color:#f92672">=</span> no
    browsable <span style="color:#f92672">=</span> yes
</code></pre></div><p>Details for configuring share can be read <a href="https://www.samba.org/samba/docs/current/man-html/smb.conf.5.html">here</a> or <a href="https://web.mit.edu/rhel-doc/5/RHEL-5-manual/Deployment_Guide-en-US/s1-samba-configuring.html">here</a>.</p>
<p>Save the file and restart the SMB daemon with the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo service smbd restart
</code></pre></div><p>Lastly, update the firewall to allow network traffic for Samba/SMB.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo ufw allow samba
</code></pre></div><p>This is the basic configuration of creating a Samba share, but from here you can create another share with more complex configuration. Here are my references:</p>
<ul>
<li><a href="https://linuxize.com/post/how-to-install-and-configure-samba-on-ubuntu-18-04/">https://linuxize.com/post/how-to-install-and-configure-samba-on-ubuntu-18-04/</a></li>
<li><a href="https://confluence.jaytaala.com/display/TKB/Create+samba+share+writeable+by+all%2C+group%2C+or+only+a+user">https://confluence.jaytaala.com/display/TKB/Create+samba+share+writeable+by+all%2C+group%2C+or+only+a+user</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-samba-share-for-a-small-organization-on-ubuntu-16-04">https://www.digitalocean.com/community/tutorials/how-to-set-up-a-samba-share-for-a-small-organization-on-ubuntu-16-04</a></li>
</ul>
<h3 id="add-samba-user">Add Samba User</h3>
<p>Currently, our Linux account for administering the server is <code>azure-smb</code> and we can&rsquo;t use this account password to access the SMB shares yet. Instead, we need to create a password and bind it to <code>azure-smb</code>.</p>
<p>But now, let&rsquo;s just create a dedicated user for SMB called <code>user1</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo useradd --system -s /usr/sbin/nologin user1
</code></pre></div><p>Assign <code>user1</code> to be the owner of the share</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo chown user1 /home/azure-smb/sambashare
</code></pre></div><p>After that, create a Samba password for <code>user1</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo smbpasswd -a user1
New SMB password: 
Retype new SMB password: 
Added user user1.
</code></pre></div><p>Finally, enable the user.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">azure-smb@smb-server:~$ sudo smbpasswd -e user1
Enabled user user1.
</code></pre></div><h2 id="expose-to-internet">Expose to Internet</h2>
<h3 id="allow-inbound-connection">Allow Inbound Connection</h3>
<p>Now if we want to make it available on the Internet, we have to go back to the Azure Portal to open the SMB port (445) on the NIC Public IP and allow inbound connection through that port. The connection is then forwarded to our SMB port on the NIC Private IP.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">PUBLIC_IP:445 --&gt; PRIVATE_IP:445
</code></pre></div><p>To do that open up the Networking settings of the SMB VM and click on <strong>Add inbound port rule</strong> button.</p>
<p><img class="img-container" src="imgs/image-20210513173838694.png" alt="image-20210513173838694"  />
</p>
<p>On the new Windows, configure the rule to allow any source (incoming IP) and any source port (incoming port) to connect to the SMB port (445). The details configuration is as follows:</p>
<p><img class="img-container" src="imgs/image-20210513173858659.png" alt="image-20210513173858659"  />
</p>
<p>At the bottom, the configuration is as follows:</p>
<p><img class="img-container" src="imgs/image-20210513173929271.png" alt="image-20210513173929271"  />
</p>
<p>When you&rsquo;re done, click on the <strong>Add</strong> button and the new rule should listed in the <strong>Inbound port rules</strong> section.</p>
<p><img class="img-container" src="imgs/image-20210513174018895.png" alt="image-20210513174018895"  />
</p>
<h3 id="test-access">Test Access</h3>
<p>We can use Nmap to see if the SMB port has been opened.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ nmap -p445 -sV VM_PUBLIC_IP
</code></pre></div><p><img class="img-container" src="imgs/image-20210513174227862.png" alt="image-20210513174227862"  />
</p>
<p>To interact with the SMB server via CLI, you can use <code>smbclient</code>. Install it with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo apt install smbclient
</code></pre></div><p>Once it installed, connect to the share with following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ smbclient //<span style="color:#f92672">[</span>IP<span style="color:#f92672">]</span>/<span style="color:#f92672">[</span>sharename<span style="color:#f92672">]</span> 
</code></pre></div><p>Adding <code>-N -L</code> can list all the available shares.</p>
<p><img class="img-container" src="imgs/image-20210513174416250.png" alt="image-20210513174416250"  />
</p>
<p>You can also provide the password directly in the terminal:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ smbclient //<span style="color:#f92672">[</span>IP<span style="color:#f92672">]</span>/<span style="color:#f92672">[</span>sharename<span style="color:#f92672">]</span> -U <span style="color:#f92672">[</span>username<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>password<span style="color:#f92672">]</span>
$ smbclient //<span style="color:#f92672">[</span>IP<span style="color:#f92672">]</span>/<span style="color:#f92672">[</span>sharename<span style="color:#f92672">]</span> -U <span style="color:#e6db74">&#39;username%password&#39;</span>
</code></pre></div><p>And that&rsquo;s all. It is not that detailed, but I hope you will find it useful.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Building Virtual Home Lab for Pentesting</title>
      <link>https://fahmifj.github.io/blog/building-virtual-home-lab-for-pentesting/</link>
      <pubDate>Thu, 17 Jun 2021 14:04:24 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/building-virtual-home-lab-for-pentesting/</guid>
      <description>My documentation on building a small pentesting lab</description>
      <content:encoded><![CDATA[<p>This is my personal documentation on setting up a pentesting lab in a virtual environment to learn some AD attack scenarios, network pivoting, and C2 (command &amp; control) with <code>metasploit</code>.</p>
<h2 id="prerequisites">Prerequisites</h2>
<h3 id="knowledge">Knowledge</h3>
<ul>
<li>Virtualization and VirtualBox</li>
<li>Windows OS and Server Installation</li>
<li>Basics knowledge of Windows/Windows Server (Desktop/GUI version)/</li>
<li>Basics knowledge of Active Directory:
<ul>
<li>AD Domain</li>
<li>Principle name</li>
<li>DNS</li>
</ul>
</li>
<li>Basics knowledge of Networking (routing).</li>
</ul>
<h3 id="hardware">Hardware</h3>
<p>The following are the main specifications that I recommend, the list is sorted by priority.</p>
<ul>
<li>Storage: 256 GB minimum, SSD is a must for server, or use high speed USB 3.1/ type C drive.</li>
<li>RAM: 8 GB of minimum, 16 GB recommended dual channel.</li>
<li>CPU: AMD Ryzen 3 or Intel i3 6th (minimum), AMD Ryzen 5+ with H prefix or i5+ 6th gen with K/H prefix. (recommended).
<ul>
<li>4th gen of i7 is still worth though.</li>
</ul>
</li>
</ul>
<p>For me, I used a single MSI laptop with the minimum requirements except for the CPU.</p>
<h3 id="software">Software</h3>
<ul>
<li>VirtualBox (<a href="https://www.virtualbox.org/wiki/Downloads">Download</a>)</li>
<li>Kali Linux image file (<a href="https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/#1572305786534-030ce714-cc3b">Download</a>)</li>
<li>Windows 10 evaluation image file (<a href="https://www.microsoft.com/en-us/evalcenter/">Download</a>)</li>
<li>Windows Server 2019 evaluation image file (<a href="https://www.microsoft.com/en-us/evalcenter/">Download</a>)</li>
</ul>
<h2 id="topology">Topology</h2>
<p>I know it&rsquo;s bad.</p>
<p><img class="img-container" src="imgs/topology.jpg" alt=""  />
</p>
<p>So, for pivoting, I removed the Windows 10 inside network range of  <code>10.10.10.100/28</code> from AD Domain.</p>
<h2 id="setup">Setup</h2>
<h3 id="vm-system-configuration">VM System Configuration</h3>
<h4 id="system">System</h4>
<p>Initial for installation</p>
<ul>
<li>Server: 2424 MB of RAM</li>
<li>Client: x2 1280 MB of RAM</li>
</ul>
<p>After installation (removed style/desktop/disable junk service)</p>
<ul>
<li>Server: 1280 MB of RAM</li>
<li>Client: 1024 MB of RAM</li>
<li>Attacking machine: 1024MB of RAM</li>
</ul>
<p>Trust me, I use 8 GB to host these VM. 😂</p>
<ul>
<li>Windows 2019 = Server</li>
<li>Windows 10 = Client</li>
<li>Kali Linux/Armed Ubuntu = Attacker</li>
</ul>
<p>For initial setup, the two clients can <strong>stay inside</strong> <code>192.168.1.0/24</code> network.</p>
<h4 id="network">Network</h4>
<p>Server Adapter 1:</p>
<p><img class="img-container" src="imgs/image-20210617143401181.png" alt="image-20210617143401181"  />
</p>
<h3 id="setting-up-server">Setting up Server</h3>
<h4 id="initial-setup">Initial setup</h4>
<ul>
<li>Admin credentials: <code>administrator:p@$$w0rd!</code></li>
<li>PC Name: <code>server19-DC</code> (restart after)</li>
<li>Network (Static):
<ul>
<li>Adapter 1: 192.168.1.100/24</li>
<li>Adapter 2: 10.10.10.100/28</li>
</ul>
</li>
</ul>
<h4 id="promote-to-domain-controller">Promote to Domain Controller</h4>
<ul>
<li>Server Manager &gt; Manage &gt; Add Roles and Features.</li>
<li>Add Roles and Features Wizard:
<ul>
<li>Installation type: &ldquo;<strong>Role-based or feature-based installation</strong>&rdquo;</li>
<li>Server selection: <code>server19-DC</code></li>
<li>Server roles: <strong>&ldquo;Active Directory Domain Services&rdquo;</strong> and check the <strong>&ldquo;Include management tools&rdquo;</strong>.</li>
<li>Features: Check the <strong>&ldquo;Group Policy Management&rdquo;</strong></li>
<li>Confirmation:  Check on <strong>&ldquo;Restart destination server automatically if required&rdquo;</strong></li>
<li>Close after it&rsquo;s done.</li>
</ul>
</li>
<li>Server Manager &gt; Notification flag &gt; Click on <strong>&ldquo;Promote this server to a domain controller&rdquo;</strong></li>
<li>Active Directory Domain Services Configuration Wizard:
<ul>
<li>Deployment configuration: <strong>&ldquo;Add a new forest&rdquo;</strong> and set <strong>&ldquo;server19.local&rdquo;</strong> as root domain name</li>
<li>Domain controller options: set <strong>&ldquo;Windows Server 2016&rdquo;</strong> as FFL (Forest Functional Level) and DFL (Domain Functional Level). Checklist DNS server and set the same admin password for DSRM password.</li>
<li>Additional options: set NetBIOS domain name to <code>SERVER19</code></li>
<li>Let the rest options in default state until installation section.</li>
<li>Restart after installation complete.</li>
</ul>
</li>
</ul>
<p><img class="img-container" src="imgs/server19logon.jpg" alt=""  />
</p>
<h4 id="domain-accounts">Domain Accounts</h4>
<ul>
<li>John Smith
<ul>
<li>User logon name: <code>jsmith@server19.local</code></li>
<li>Password: <code>jsmith@123</code></li>
</ul>
</li>
<li>Carl Smith
<ul>
<li>User logon name: <code>cmisth@server19.local</code></li>
<li>Password: <code>@csmith@</code></li>
</ul>
</li>
</ul>
<p>All password is set to never expires.</p>
<h4 id="service-account">Service Account</h4>
<p>Fake SQL Service</p>
<ul>
<li>User logon name: <code>SQLService@server19.local</code></li>
<li>Password: <code>Mysql@Password123</code></li>
</ul>
<p>Set service principle name:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">setspn -a SERVER19-DC/SQLService.SERVER19.local:60111 SERVER19\SQLService
setspn -T SERVER19.local -Q */*
</code></pre></div><h4 id="configure-file-sharing-smb">Configure File Sharing (SMB):</h4>
<ul>
<li>Server manager &gt; File and Storage Services &gt; Shares &gt; Task &gt; New Share.</li>
<li>New Share Wizard:
<ul>
<li>Profile: SMB Share Quick</li>
<li>Share Location: <code>C:\Shares\DATA</code> (Create the Shares folder in C:)</li>
<li>Other Settings: Allow caching of share</li>
<li>Permission: Leave it default</li>
<li>Confirmation and create.</li>
</ul>
</li>
</ul>
<h3 id="setting-up-client">Setting up Client</h3>
<h4 id="initial-setup-1">Initial setup</h4>
<ul>
<li>Client 1:
<ul>
<li>IP: 192.168.1.101 (static)</li>
<li>PC name: NESCOFFEE</li>
</ul>
</li>
<li>Client 2:
<ul>
<li>IP: 192.168.1.102 (static)</li>
<li>PC name: MILO</li>
</ul>
</li>
</ul>
<h4 id="local-accounts">Local Accounts</h4>
<p>Same with domain accounts, but add an <code>L</code> at the end of username/password.</p>
<ul>
<li>Username: <code>cmisthL</code>, password: <code>jsmithL@123</code></li>
<li>Username: <code>jsmithL</code>, password: <code>@csmith@</code></li>
</ul>
<h4 id="join-domain">Join Domain</h4>
<p>Client 1:</p>
<ul>
<li>Use Server&rsquo;s IP as DNS server: <code>192.168.1.100</code></li>
<li>Hit <code>Win+I</code>, type &ldquo;access&rdquo;, click on <strong>Connect</strong>.</li>
<li>Microsoft account window:
<ul>
<li>Click on <strong>&ldquo;Join this device to a local Active Directory domain&rdquo;</strong> under the alternate actions.</li>
<li>Use the server administrator password to join.</li>
<li>Skip the <strong>Add an account</strong> section</li>
<li>Restart</li>
</ul>
</li>
</ul>
<p>Client 2 has the same steps</p>
<h4 id="local-admin">Local Admin:</h4>
<ul>
<li>Set John Smith (<code>jsmith@server19.local</code>) as local administrator for NESCOFFEE.</li>
<li>Set Carl Smith (<code>cmisth@server19.local</code>) as local administrator for MILO.</li>
</ul>
<h3 id="setting-up-attacking-machine">Setting up Attacking Machine</h3>
<ul>
<li>Put it on the same network</li>
<li>Set static IP: 192.168.1.10</li>
</ul>
<h2 id="ad-attack-scenarios">AD Attack Scenarios</h2>
<p>Here are some attack scenarios:</p>
<ul>
<li>LLMNR Poisoning - <a href="https://www.aptive.co.uk/blog/llmnr-nbt-ns-spoofing/">https://www.aptive.co.uk/blog/llmnr-nbt-ns-spoofing/</a></li>
<li>AS-REP Roasting
<ul>
<li>Example attacks: <a href="/tags/asrep-roasting">ASREP-Roasting tags</a></li>
</ul>
</li>
<li>Kerberoasting  - <a href="https://pentestlab.blog/2018/06/12/kerberoast/">https://pentestlab.blog/2018/06/12/kerberoast/</a></li>
<li>Take Over IPv6 DNS - <a href="https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/">https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/</a></li>
<li>DCSync
<ul>
<li>Example attacks: <a href="/tags/dcsync/">DCSync tags</a></li>
</ul>
</li>
</ul>
<p>Attack scenario(s) that requires two clients online + server:</p>
<ul>
<li>SMB Relay - <a href="https://akimboviper.gitbook.io/pentest-everything/everything/everything-windows/attacking-windows/relay-attacks/smb-relay">https://akimboviper.gitbook.io/pentest-everything/everything/everything-windows/attacking-windows/relay-attacks/smb-relay</a>
<ul>
<li>Example attacks: <a href="/writeups/hackthebox/htb-apt/">HackTheBox - APT</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Linux Forensics Command Cheat Sheet</title>
      <link>https://fahmifj.github.io/blog/linux-forensics-command-cheat-sheet/</link>
      <pubDate>Wed, 16 Jun 2021 19:15:16 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/linux-forensics-command-cheat-sheet/</guid>
      <description>My small cheat sheet for forensics and incident response on Linux systems</description>
      <content:encoded><![CDATA[<p>My short cheat sheet for forensics and incident response on Linux systems.  This will be updated over time.</p>
<h2 id="users-related">Users-related</h2>
<p>Last login</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ lastlog
$ last
</code></pre></div><p>Users with login shells</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cat /etc/passwd | grep sh$
</code></pre></div><p>List users' cron</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ <span style="color:#66d9ef">for</span> user in <span style="color:#66d9ef">$(</span>cat /etc/passwd | cut -f1 -d: <span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span> echo $user; crontab -u $user -l; <span style="color:#66d9ef">done</span>

<span style="color:#75715e"># users with shells only</span>
$ <span style="color:#66d9ef">for</span> user in <span style="color:#66d9ef">$(</span>cat /etc/passwd | grep sh$ | cut -f1 -d: <span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span> echo $user; crontab -u $user -l; <span style="color:#66d9ef">done</span>
</code></pre></div><p>SSH authorized keys</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ find / -type f -name authorized_keys
</code></pre></div><h2 id="processes-networks-and-services">Processes, Networks and Services</h2>
<p>Show process tree with username  TTY, and wide output.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ps auxfww
</code></pre></div><p>Process details</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ lsof -p <span style="color:#f92672">[</span>pid<span style="color:#f92672">]</span>
</code></pre></div><p>Show all connections don&rsquo;t resolve names (IP only)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ lsof -i -n
$ netstat -anp

<span style="color:#75715e"># Look for tcp only</span>
$ netstat -antp
$ ss -antp
</code></pre></div><p>List all services</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ service --status-all
</code></pre></div><p>List firewall rules</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ iptables --list-rules
</code></pre></div><p>List all timers</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ systemctl list-timers --all
</code></pre></div><p>DNS related</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">/etc/hosts
/etc/resolv.conf
</code></pre></div><h2 id="files-and-folders">Files and Folders</h2>
<p>Show list files and folder with nano timestamp, sort by modification time (newest).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ls --full-time -lt 
</code></pre></div><p>List all files that were modified on a specific date/time.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># List files which were modified on 2021-06-16 (YYYY-MM-DD)</span>
$ find / -newermt <span style="color:#e6db74">&#34;2021-06-16&#34;</span> -ls 2&gt;/dev/null

<span style="color:#75715e"># List files which were modified on 2021-05-01 until 2021-05-09 (9 days ago)</span>
$ find / -newermt <span style="color:#e6db74">&#34;2021-05-01&#34;</span> ! -newermt <span style="color:#e6db74">&#34;2021-05-10&#34;</span> -ls 2&gt;/dev/null

<span style="color:#75715e"># List files which were modified on 2021-05-01 until 2021-05-09 (9 days ago) + add filter</span>
$ find / -newermt <span style="color:#e6db74">&#34;2021-05-01&#34;</span> ! -newermt <span style="color:#e6db74">&#34;2021-05-10&#34;</span> -ls 2&gt;/dev/null | grep -v <span style="color:#e6db74">&#39;filterone\|filtertwo&#39;</span>

<span style="color:#75715e"># List files modified between 01:00 and 07:00 on June 16 2021.</span>
$ find / -newermt <span style="color:#e6db74">&#34;2021-06-16 01:00:00&#34;</span> ! -newermt <span style="color:#e6db74">&#34;2021-06-16 07:00:00&#34;</span> -ls 2&gt;/dev/null

<span style="color:#75715e"># List files that were accessed exactly 2 days ago.</span>
$ find / -atime <span style="color:#ae81ff">2</span> -ls 2&gt;/dev/null

<span style="color:#75715e"># List files that were modified in the last 2 days.</span>
$ find / -mtime -2 -ls 2&gt;/dev/null
</code></pre></div><p>File inspection</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ stat <span style="color:#f92672">[</span>file<span style="color:#f92672">]</span>
$ exiftool <span style="color:#f92672">[</span>file<span style="color:#f92672">]</span>
</code></pre></div><p>Observe changes in files</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ find . -type f -exec md5sum <span style="color:#f92672">{}</span> <span style="color:#ae81ff">\;</span> | awk <span style="color:#e6db74">&#39;{print $1}&#39;</span> | sort | uniq -c | grep <span style="color:#e6db74">&#39; 1 &#39;</span> | awk <span style="color:#e6db74">&#39;{print $2	}&#39;</span>
</code></pre></div><p>Look for <code>cap_setuid+ep</code> in binary capabilities</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ getcap -r /usr/bin/
$ getcap -r /bin/
$ getcap -r / 2&gt;/dev/null
</code></pre></div><p>SUID</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ find / -type f -perm -u<span style="color:#f92672">=</span>s 2&gt;/dev/null
</code></pre></div><p>Log auditing</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ aureport --tty
</code></pre></div><h2 id="persistence-areas">Persistence areas</h2>
<p>Directories:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">/etc/cron*/
/etc/incron.d/*
/etc/init.d/*
/etc/rc*.d/*
/etc/systemd/system/*
/etc/update.d/*
/var/spool/cron/*
/var/spool/incron/*
/var/run/motd.d/*
</code></pre></div><p>Files:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">/etc/passwd
/etc/sudoers
/home/&lt;user&gt;/.ssh/authorized_keys
/home/&lt;user&gt;/.bashrc
</code></pre></div><h2 id="references">References</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/18339307/find-files-in-created-between-a-date-range">https://stackoverflow.com/questions/18339307/find-files-in-created-between-a-date-range</a></li>
<li><a href="https://unix.stackexchange.com/questions/119598/as-root-how-can-i-list-the-crontabs-for-all-users">https://unix.stackexchange.com/questions/119598/as-root-how-can-i-list-the-crontabs-for-all-users</a></li>
<li><a href="https://unix.stackexchange.com/questions/169798/what-does-newermt-mean-in-find-command">https://unix.stackexchange.com/questions/169798/what-does-newermt-mean-in-find-command</a></li>
<li><a href="https://ippsec.rocks/">https://ippsec.rocks/</a></li>
<li><a href="https://0xdf.gitlab.io/2021/06/05/htb-scriptkiddie.html#incron">https://0xdf.gitlab.io/2021/06/05/htb-scriptkiddie.html#incron</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Install jarsigner without Java SDK in Kali Linux</title>
      <link>https://fahmifj.github.io/blog/install-jar-signer-without-java-sdk/</link>
      <pubDate>Mon, 14 Jun 2021 14:41:04 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/install-jar-signer-without-java-sdk/</guid>
      <description>The PoC exploit of ScriptKiddie from HackTheBox actually requires a binary known as jarsigner . The binary itself is bundled with the Java SDK, and my Kali Linux definitely has it, so I should have that binary installed. However, I was unable to locate this jarsigner on my machine.
I started to look for it on the internet, simply because I didn&amp;rsquo;t want to reinstall the Java SDK on my machine just to get this single binary file, which could potentially mess up the current system/installed apps.</description>
      <content:encoded><![CDATA[<p>The PoC exploit of <a href="https://fahmifj.github.io/writeups/hackthebox/htb-scriptkiddie/">ScriptKiddie</a> from HackTheBox actually requires a binary known as <code>jarsigner</code> . The binary itself is bundled with the Java SDK, and my Kali Linux definitely has it, so I should have that binary installed.  However, I was unable to locate this <code>jarsigner</code> on my machine.</p>
<p>I started to look for it on the internet, simply because I didn&rsquo;t want to reinstall the Java SDK on my machine just to get this single binary file, which could potentially mess up the current system/installed apps. But, most of the search results that showed up was a bunch of documentations about how to use the binary 🙃.</p>
<h3 id="in-search-of-the-missing-binary---google-dork">In search of the missing binary - Google dork</h3>
<p>Fortunately, I discovered some sites that provided the single <code>jarsigner</code> binary using Google dorks.</p>
<pre><code>intitle:&quot;index of /&quot; bin jarsigner
</code></pre><p>I end up with this <a href="http://www.citrucoop.es/jdk-11.0.6/bin/">site</a>:</p>
<p><img class="img-container" src="imgs/image-20210614151715867.png" alt="image-20210614151715867"  />
</p>
<p>I have the binary, but it can not be used yet by just simply putting the binary into the Java PATH.</p>
<h3 id="installing-jarsigner">Installing jarsigner</h3>
<p>It turns out that <a href="https://discuss.getsol.us/d/4656-java-command-unknown-after-update">Java binary</a> needs to be &lsquo;symlinked&rsquo;.</p>
<p>So, first, I&rsquo;ll have to find out where is my Java binary located.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ls -l <span style="color:#66d9ef">$(</span>which java<span style="color:#66d9ef">)</span>
lrwxrwxrwx <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">22</span> Nov <span style="color:#ae81ff">25</span>  <span style="color:#ae81ff">2019</span> /usr/bin/java -&gt; /etc/alternatives/java
$ ls -l /etc/alternatives/java
lrwxrwxrwx <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">43</span> Nov <span style="color:#ae81ff">25</span>  <span style="color:#ae81ff">2019</span> /etc/alternatives/java -&gt; /usr/lib/jvm/java-11-openjdk-amd64/bin/java
</code></pre></div><p>I&rsquo;ll grab the <code>jarsigner</code> binary from the site and drop it directly under <code>/usr/lib/jvm/java-11-openjdk-amd64/bin/</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ curl -s http://www.citrucoop.es/jdk-11.0.6/bin/jarsigner &gt; /usr/lib/jvm/java-11-openjdk-amd64/bin/jarsigner
</code></pre></div><p>Then, I&rsquo;ll make a symlink of <code>jarsigner</code> at <code>/usr/bin/</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd /usr/bin
$ ln -sf /usr/lib/jvm/java-11-openjdk-amd64/bin/jarsigner jarsigner
</code></pre></div><p>It&rsquo;s working fine now.</p>
<p><em>Hold up.. isn&rsquo;t it unsafe?</em> 🤔</p>
<p>Absolutely! 😅 so don&rsquo;t ever do this if you don&rsquo;t trust the site.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
