<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Home Lab on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/series/home-lab/</link>
    <description>Recent content in Home Lab on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 29 Jan 2025 20:36:34 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/series/home-lab/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Running GNS3 server on Apple M2 with Orbstack</title>
      <link>https://fahmifj.github.io/articles/running-gns3-on-apple-m2-orbstack/</link>
      <pubDate>Wed, 29 Jan 2025 20:36:34 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/articles/running-gns3-on-apple-m2-orbstack/</guid>
      <description>Lately, I&amp;rsquo;ve been switching from my Windows laptop to MacBook M2 for daily driver. It was smooth until I needed to migrate my virtual networking lab that relies on GNS3. It&amp;rsquo;s for my preparation before taking another Mikrotik&amp;rsquo;s certification. I was initially hesitant about whether I could run GNS3 on my M2 machine. After some research, I discovered that the GNS3 client is indeed available for macOS. To host the GNS3 server, I learned that I could set it up from scratch on a Linux machine using Orbstack.</description>
      <content:encoded><![CDATA[<p>Lately, I&rsquo;ve been switching from my Windows laptop to MacBook M2 for daily driver. It was smooth until I needed to migrate my virtual networking lab that relies on GNS3. It&rsquo;s for my preparation before taking another Mikrotik&rsquo;s certification. I was initially hesitant about whether I could run GNS3 on my M2 machine. After some <a href="https://www.gns3.com/community/featured/gns3-on-apple-silicon"target="_blank" rel="noopener noreferrer"
>research</a>, I discovered that the GNS3 client is indeed available for macOS. To host the GNS3 server, I learned that I could set it up from scratch on a Linux machine using Orbstack.</p>
<h4 id="goals">Goals</h4>
<ul>
<li>Get GNS3 server running on M2 Apple Silicon CPU.</li>
<li>Get GNS3 appliance installed on the GNS3 server.</li>
</ul>
<h4 id="prerequisites">Prerequisites</h4>
<ul>
<li><a href="https://orbstack.dev/"target="_blank" rel="noopener noreferrer"
>Orbstack</a> installed.</li>
<li><a href="https://github.com/gns3/gns3-gui/releases"target="_blank" rel="noopener noreferrer"
>GNS3 GUI/client</a> installed.</li>
</ul>
<h4 id="diagram">Diagram</h4>
<p>I drew a diagram to give you an overview of what we are going to do here.</p>
<img src="./imgs/image-20250129212031966.png" alt="image-20250129212031966" style="zoom: 50%;" />
<h2 id="on-mac">On Mac</h2>
<h3 id="deploy-a-linux-machine">Deploy A Linux Machine</h3>
<p>With Orbstack, create a new Linux machine with the latest Ubuntu distro.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ orb create --arch amd64 ubuntu gns3-host
</span></span></code></pre></div><p>Then verify the machine is running.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ orb list
</span></span><span class="line"><span class="cl">NAME       STATE    DISTRO  VERSION   ARCH
</span></span><span class="line"><span class="cl">----       -----    ------  -------   ----
</span></span><span class="line"><span class="cl">gns3-host  running  ubuntu  oracular  amd64
</span></span></code></pre></div><p>The Linux machine we just installed will act as the GNS3 server host.</p>
<h3 id="resources-allocation">Resources Allocation</h3>
<p>We can allocate CPU and memory resources to limit how much Orbstack machine can use with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1">#Show current configuration</span>
</span></span><span class="line"><span class="cl">$ orb config show
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Set maximum CPU cores for Orbstack to 4 cores</span>
</span></span><span class="line"><span class="cl">$ orb config <span class="nb">set</span> cpu <span class="m">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Set maximum memory for Orbstack to 8 GB</span>
</span></span><span class="line"><span class="cl">$ orb config <span class="nb">set</span> memory_mib <span class="m">8000</span>
</span></span></code></pre></div><h2 id="on-the-linux-machine">On the Linux machine</h2>
<h3 id="hosting-gns3-server">Hosting GNS3 Server</h3>
<p>From Mac, login into the machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ orb -m gns3-host -u root
</span></span></code></pre></div><p>Add the GNS3 repository and install some necessary tools.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">user@gns3 $ sudo add-apt-repository ppa:gns3/ppa
</span></span><span class="line"><span class="cl">user@gns3 $ sudo apt update
</span></span><span class="line"><span class="cl">user@gns3 $ sudo apt install software-properties-common
</span></span><span class="line"><span class="cl">user@gns3 $ sudo apt install qemu-system-x86
</span></span><span class="line"><span class="cl">user@gns3 $ sudo apt install telnet
</span></span><span class="line"><span class="cl">user@gns3 $ sudo apt install gns3-server
</span></span></code></pre></div><p>In the middle way, select &ldquo;yes&rdquo; when you prompted with something like this.</p>
<img src="./imgs/image-20250129214423431.png" alt="image-20250129214423431" style="zoom:50%;" />
<p>If you missed the prompt, run the following.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1">#Add ubridge group to the gns3 user</span>
</span></span><span class="line"><span class="cl">user@gns3 $ sudo usermod -aG ubridge gns3
</span></span></code></pre></div><p>Verify the GNS3 server installation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">user@gns3 $ systemctl status gns3-server
</span></span></code></pre></div><p>Or by visiting &ldquo;http://localhost:3080&rdquo;.</p>
<h3 id="change-working-directory">Change Working Directory</h3>
<p>This is optional. I would like to move the default working directory of GNS3 at <code>/var/lib/gns3-server/GNS3/</code> to <code>/opt/gns3/</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1">#Create new dir config</span>
</span></span><span class="line"><span class="cl">user@gns3 $ sudo mkdir /opt/gns3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Copy old dir config to new dir config</span>
</span></span><span class="line"><span class="cl">user@gns3 $ sudo cp -r /var/lib/gns3-server/GNS3/* /opt/gns3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Change ownership </span>
</span></span><span class="line"><span class="cl">user@gns3 $ sudo chown -R gns3:gns3 /opt/gns3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Change default home directory</span>
</span></span><span class="line"><span class="cl">user@gns3 $ sudo usermod -d /opt/gns3 gns3
</span></span></code></pre></div><h3 id="configure-gns3-server">Configure GNS3 Server</h3>
<p>Since KVM is not supported inside the orbstack machine, we need to make some adjustments for GNS3 server config. Edit the config at <code>/opt/gns3/.config/GNS3/2.2/gns3_server.conf</code> as follows:</p>
<pre tabindex="0"><code>[Server]
host = 0.0.0.0
port = 3080
images_path = /opt/gns3/images
appliances_path = /opt/gns3/appliances
configs_path = /opt/gns3/configs
projects_path = /opt/gns3/projects
symbols_path = /opt/gns3/symbols

report_errors = True

; First console port of the range allocated to devices
console_start_port_range = 5000
; Last console port of the range allocated to devices
console_end_port_range = 10000

; First VNC console port of the range allocated to devices.
; The value MUST BE &gt;= 5900 and &lt;= 65535
vnc_console_start_port_range = 5900
; Last VNC console port of the range allocated to devices
; The value MUST BE &gt;= 5900 and &lt;= 65535
vnc_console_end_port_range = 10000

; First port of the range allocated for inter-device communication. Two ports are allocated per link.
udp_start_port_range = 10000
; Last port of the range allocated for inter-device communication. Two ports are allocated per link
udp_end_port_range = 20000

; Only allow these interfaces to be used by GNS3, for the Cloud node for example (Linux/OSX only)
; Do not forget to allow virbr0 in order for the NAT node to work
allowed_interfaces = virbr0

; Enable the built-in templates
enable_builtin_templates = True

; check if hardware virtualization is used by other emulators (KVM, VMware or VirtualBox)
hardware_virtualization_check = False

[Dynamips]
allocate_aux_console_ports = False
mmap_support = True
sparse_memory_support = True
ghost_ios_support = True

[IOU]
iourc_path = /opt/gns3/iourc
license_check = True

[Qemu]
enable_kvm = False
require_kvm = False
enable_hardware_acceleration = False
require_hardware_acceleration = False
</code></pre><p>If the config directory don&rsquo;t exist do the following (inside the orbstack VM):</p>
<ol>
<li>Run <code>systemctl stop gns3-server</code>.</li>
<li>Run <code>gns3server</code> manually for a minute and stop it.</li>
<li>Start again with <code>systemctl start gns3-server</code>.</li>
<li>Look up again under <code>/var/lib/gns3-server/GNS3/.config</code> or <code>/opt/gns3/.config</code> if you follow the step 3.</li>
</ol>
<p>We&rsquo;re done with the server here.</p>
<h2 id="setting-up-gns3-client">Setting Up GNS3 Client</h2>
<h3 id="gns3-client">GNS3 Client</h3>
<p>GNS3 Client should detect the server automatically, if not, try open <strong>the GNS3 Client &gt; Settings &gt; Server</strong> and point the GNS3 server to the Linux machine.</p>
<p><div class="img-container"><img src="./imgs/image-20250129223723294.png" alt="image-20250129223723294"  /></div>
</p>
<p>Verify the connection.</p>
<h3 id="appliances-installation">Appliances Installation</h3>
<p>The network appliances now can be installed normally.</p>
<h2 id="the-results">The results</h2>
<h3 id="testing-initial-setup">Testing Initial Setup</h3>
<p>So far, excluding the ATM and Frame relay switches, I&rsquo;ve tested the basic appliances and everything works as it should except for the Cloud appliance.</p>
<img src="./imgs/image-20250129230112734.png" alt="image-20250129230112734" style="zoom:50%;" />
<h3 id="performances">Performances</h3>
<p>I allocated 4 CPUs and 4 GB of memory to Orbstack for the initial lab setup. Despite adding two more routers, everything runs smoothly and fast, with no choppy performance at all.</p>
<img src="./imgs/image-20250130222443482.png" alt="image-20250130222443482" style="zoom:50%;" />
<h2 id="conclusion">Conclusion</h2>
<p>At this point, GNS3 hosted within Orbstack Linux machine ran seamlessly on my M2 Mac. This should be enough for creating or simulating networking projects. However, I still wanted my network appliances could communicate with the LAN on my Mac, which I will dig into it in the next section.</p>
<h2 id="dig-into-network-limitation">Dig into Network Limitation</h2>
<p><strong>Accessing GNS3 Appliances from Mac LAN</strong></p>
<p>According to <a href="https://docs.orbstack.dev/machines/network"target="_blank" rel="noopener noreferrer"
>the documentation</a>, all Orbstack Linux machines are connected to the same network bridge with a fixed IPv4 address of <code>198.19.249.0/24</code>. On Mac, this network bridge displayed as <code>bridge100</code> and the Linux machines connected to that bridge via its <code>eth0</code>.</p>
<p>My goal is, let&rsquo;s say Winbox on Mac, will able to communicate with the GNS3 Mikrotik through the Cloud appliance via <code>eth0</code> of GNS3 server. Here&rsquo;s the diagram.</p>
<img src="./imgs/image-20250201125922492.png" alt="image-20250201125922492" style="zoom: 33%;" />
<p>Unfortunately, the Cloud appliance here did not list the <code>eth0</code> interface.</p>
<img src="./imgs/image-20250130225807891.png" alt="image-20250130225807891" style="zoom: 25%;" />
<p>In the image above,  <code>virbr0</code>  and <code>gns3tap0-0</code> are the interfaces that GNS3 use for the NAT appliances (<a href="https://gns3.com/how-the-nat-node-in-gns3-works"target="_blank" rel="noopener noreferrer"
>source</a>). When I ran the script that populates the interfaces on the GNS3 server manually, the output states that <code>eth0</code> cannot be used on this server.</p>
<img src="./imgs/image-20250131005043784.png" alt="image-20250131005043784" style="zoom:50%;" />
<p>After taking another look at the code, I figured out where the issue was. You guys probably have noticed it. 😂</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="ow">not</span> <span class="n">sys</span><span class="o">.</span><span class="n">platform</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;win&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">allowed_interfaces</span> <span class="o">=</span> <span class="n">Config</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">get_section_config</span><span class="p">(</span><span class="s2">&#34;Server&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;allowed_interfaces&#34;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">allowed_interfaces</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">allowed_interfaces</span> <span class="o">=</span> <span class="n">allowed_interfaces</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">net_if_addrs</span> <span class="o">=</span> <span class="n">psutil</span><span class="o">.</span><span class="n">net_if_addrs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">interface</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">net_if_addrs</span><span class="o">.</span><span class="n">keys</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">allowed_interfaces</span> <span class="ow">and</span> <span class="n">interface</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">allowed_interfaces</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">interface</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;gns3tap&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">log</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s2">&#34;Interface &#39;</span><span class="si">{}</span><span class="s2">&#39; is not allowed to be used on this server&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">interface</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="k">continue</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span></code></pre></div><p>Yeah, it&rsquo;s on the step 3, about the server config! I just need to add the interface I want to be allowed there. Haha.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="c1">; Only allow these interfaces to be used by GNS3, for the Cloud node for example (Linux/OSX only)</span>
</span></span><span class="line"><span class="cl"><span class="c1">; Do not forget to allow virbr0 in order for the NAT node to work</span>
</span></span><span class="line"><span class="cl"><span class="na">allowed_interfaces</span> <span class="o">=</span> <span class="s">virbr0,eth0 </span>
</span></span><span class="line"><span class="cl"><span class="c1">; ^ I added eth0</span>
</span></span></code></pre></div><p>After that, pinging from Mac to GNS3 Mikrotik is reachable, but it&rsquo;s not over yet!</p>
<img src="./imgs/image-20250201140538579.png" alt="image-20250201140538579" style="zoom: 33%;" />
<p>I&rsquo;m still unable to access the services like for example Mikrotik Winbox on port 8291 or WebFig on port 80. It results the same with the GNS3 server.</p>
<img src="./imgs/image-20250202135153641.png" alt="image-20250202135153641" style="zoom: 33%;" />
<p>Inspecting the traffic with Wireshark, I saw that no TCP handshake was performed. I gave up! Orbstack network implementation is beyond my understanding, so I don&rsquo;t know what exactly it does under the hood.</p>
<img src="./imgs/image-20250201163513432.png" alt="image-20250201163513432" style="zoom: 33%;" />
<p>It seems I have to wait for Orbstack to fully support bridged networking. 	In the meantime, I will take a look for other options like UTM, or even move to PNET Lab. Personally, I liked Orbstack more, it almost similar to WSL but on Mac.</p>
<p>That&rsquo;s all, see you in the next post!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>My Kali Linux Setup for Playing HackTheBox</title>
      <link>https://fahmifj.github.io/articles/my-kali-setup-for-hackthebox/</link>
      <pubDate>Fri, 09 Jul 2021 07:45:19 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/articles/my-kali-setup-for-hackthebox/</guid>
      <description>Noob Kali setup</description>
      <content:encoded><![CDATA[<p>After using Kali 2019.4 for almost 2 years, I finally upgraded to  version 2021.2 (fresh install). As a result, I had to reapply my  settings and configurations on this newer version for playing HackTheBox (which I believe is applicable to other boot2root platforms as well).  Therefore, I think it’s better to document my basic setup online. Hope  it helps you as well.</p>
<p>Okay that’s enough for the intro, let’s set it up!</p>
<h2 id="displaying-ip-in-prompt">Displaying IP in Prompt</h2>
<p>First, I would like to add an IP address in the shell prompt. Adding IP  address in your prompt would be really helpful as it lets you copy the IP faster for reverse shell. To do so, we’ll need to modify the <code>.zshrc</code> file.</p>
<p>Before performing any modification, consider to make a backup of your original file using the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cp ~/.zshrc<span class="o">{</span>,.bak<span class="o">}</span> 
</span></span></code></pre></div><p>And then let’s create a custom section within the file using comments (I suggest placing it at the top).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># START CUSTOM</span>
</span></span><span class="line"><span class="cl">...<span class="o">[</span>custom script here<span class="o">]</span>...
</span></span><span class="line"><span class="cl"><span class="c1"># END CUSTOM</span>
</span></span></code></pre></div><p>Now add the following function to your <code>.zshrc</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># START CUSTOM</span>
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl"><span class="k">function</span> get_ip<span class="o">(){</span>
</span></span><span class="line"><span class="cl">   <span class="c1"># It can be thm or htb IP</span>
</span></span><span class="line"><span class="cl">   <span class="nv">tunnel_ip</span><span class="o">=</span><span class="sb">`</span>ifconfig tun0 2&gt;/dev/null <span class="p">|</span> grep netmask <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span> 
</span></span><span class="line"><span class="cl">   <span class="c1"># Use eth0 as default IP,</span>
</span></span><span class="line"><span class="cl">   <span class="nv">default_ip</span><span class="o">=</span><span class="sb">`</span>ifconfig eth0 2&gt;/dev/null <span class="p">|</span> grep netmask <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="o">[[</span> <span class="nv">$tunnel_ip</span> <span class="o">==</span> *<span class="s2">&#34;10.&#34;</span>* <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">      <span class="nb">echo</span> <span class="nv">$tunnel_ip</span>
</span></span><span class="line"><span class="cl">   <span class="k">else</span>
</span></span><span class="line"><span class="cl">      <span class="nb">echo</span> <span class="nv">$default_ip</span>
</span></span><span class="line"><span class="cl">   <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl"><span class="c1"># END CUSTOM</span>
</span></span></code></pre></div><p>The function assumes <code>tun0</code> is the VPN interface to connect to HackTheBox network and <code>eth0</code> is your default interface to connect to the Internet.</p>
<p>Then, find the following lines:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="s2">&#34;</span><span class="nv">$PROMPT_ALTERNATIVE</span><span class="s2">&#34;</span> in
</span></span><span class="line"><span class="cl">        twoline<span class="o">)</span>
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></div><p>Under these lines,  replace the entire <code>PROMPT</code> variable with the following line:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">PROMPT</span><span class="o">=</span><span class="s1">$&#39;%F{%(#.blue.green)}┌──${debian_chroot:+($debian_chroot)─}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))─}(%B%F{%(#.red.blue)}%n$prompt_symbol%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/…/%4~.%5~)%b%F{%(#.blue.green)}]-%B%F{152}[`get_ip`]%b%f%F{%(#.blue.green)}\n└─%B%(#.%F{red}#.%F{blue}$)%b%F{reset} &#39;</span>
</span></span></code></pre></div><p>Reopen your terminal or type one of the following commands in the terminal.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ zsh
</span></span><span class="line"><span class="cl">$ <span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><p>And we’re done with displaying IP address in the shell prompt.</p>
<p><div class="img-container"><img src="imgs/image-20210709054914243.png" alt="image-20210709054914243"  /></div>
</p>
<h2 id="openvpn-connection-with-alias">OpenVPN Connection with Alias</h2>
<p>It&rsquo;s tiring when you have to type</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ openvpn /path/to/config/file.ovpn
</span></span></code></pre></div><p>each time you want to connect to the VPN. So to make this easier we can leverage the <code>alias</code> command!</p>
<p>First let’s create a folder called <code>.ovpnconfig</code> in the home directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p ~/.ovpnconfig
</span></span></code></pre></div><p>Then put all of your OpenVPN configuration files into that folder.</p>
<p><div class="img-container"><img src="imgs/image-20210709063528132.png" alt="image-20210709063528132"  /></div>
</p>
<p>Finally, add some aliases into your <code>.zshrc</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbon</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-sg.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbfort</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-fortress.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbrel</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-release.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">kvpn</span><span class="o">=</span><span class="s1">&#39;pkill openvpn&#39;</span>
</span></span></code></pre></div><p>Now we can type <code>$ htbon</code> or <code>$ thmon</code> in the command prompt to connect to the VPN.</p>
<p>Want to turn off the VPN? Simply type <code>$ kvpn</code> !</p>
<h2 id="a-problem-with-alias">A Problem with Alias</h2>
<p>In this Kali Linux version (non-root login), the only problem is that <code>openvpn</code> must be executed with <code>sudo</code>, because it needs administrative permission to create a network interface (that’s the <code>tun0</code>) .</p>
<p>Because of how alias <a href="https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Aliasing"target="_blank" rel="noopener noreferrer"
>works</a> in Zsh:</p>
<blockquote>
<p>Every eligible <em>word</em> in the shell input is checked to see if there is an alias defined for it. If so, it is replaced by the text of the alias if it is in command position (if it could be <strong>the first word</strong> of a simple command), or if the alias is global. <strong>If the replacement text ends with a space, the next word in the shell input is always eligible for purposes of alias expansion.</strong></p>
</blockquote>
<p>When you run <code>$ sudo htbon</code>, it will not expand the aliased command to <code>$ sudo openvpn ~/ovpnconfig/htb-sg.ovpn 1&gt;/dev/null &amp;</code>, instead it will return something like <code>sudo: htbon: command not found</code>.</p>
<p>Therefore, the solution to overcome this is by also aliasing the <code>sudo </code>command.</p>
<p>Add the following alias to your <code>.zshrc</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">sudo</span><span class="o">=</span><span class="s1">&#39;sudo &#39;</span>
</span></span></code></pre></div><p>Additionally, if you want to use <code>sudo</code> with no password for the default user <code>kali</code>, we can create a new sudoers file by running the following command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo visudo /etc/sudoers.d/kali
</span></span></code></pre></div><p>Then add the following line to gives user <strong>kali</strong> sudo permission with no password.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kali  <span class="nv">ALL</span><span class="o">=</span>NOPASSWD: ALL
</span></span></code></pre></div><p>This time, we can run the alias command with <code>sudo</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo &lt;alias-command&gt;
</span></span><span class="line"><span class="cl">$ sudo htbon
</span></span></code></pre></div><h2 id="tools-transfer">Tools Transfer</h2>
<p>Just like the OpenVPN files, I like to keep the essential tools to be centralized in one folder and so it can be hosted immediately. Again, we can create a folder called <code>tools</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p ~/tools
</span></span></code></pre></div><p>Put your tools inside the folder. The following are some of the tools that I think to be essential (including web-shell).</p>
<p><div class="img-container"><img src="imgs/image-20210709065944915.png" alt="image-20210709065944915"  /></div>
</p>
<p>Next, add another alias to host these tools immediately with one command, feel free to create alias for yourself. Mine called <code>hostit</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">hostit</span><span class="o">=</span><span class="s1">&#39;python3 -m http.server -d ~/tools 8000&#39;</span>
</span></span></code></pre></div><p>If you watch <a href="https://www.youtube.com/c/ippsec/videos"target="_blank" rel="noopener noreferrer"
>ippsec</a>, he prefers keeping the tools with the associated pwned machines (in <code>www</code> directory). So it&rsquo;s up to you.</p>
<h2 id="note-template">Note Template</h2>
<p>My current note template is available on <del><a href="https://github.com/fahmifj/HackTheBox-notes/tree/main/machines/note-template"target="_blank" rel="noopener noreferrer"
>GitHub</a></del>. I&rsquo;m using the following function to recreate the directory structure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="k">function</span> mknote<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  mkdir nmap gobuster loot logs exploits ssh-keys post-exploits
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><strong>nmap:</strong> each nmap scan goes here.</p>
</li>
<li>
<p><strong>gobuster:</strong> each gobuster scan goes here.</p>
</li>
<li>
<p><strong>loot:</strong> each interesting file for further analysis goes here.</p>
</li>
<li>
<p><strong>logs:</strong> If you like to log your activity with <code>$ script</code> , put them here.</p>
</li>
<li>
<p><strong>exploits:</strong> exploit script goes here.</p>
</li>
<li>
<p><strong>ssh-keys:</strong> obtained ssh-key goes here, not loot.</p>
</li>
<li>
<p><strong>post-exploits:</strong> post-compromise loot goes here.</p>
</li>
</ul>
<p>Usage is simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">cd</span> htb-machine-folder/
</span></span><span class="line"><span class="cl">$ mknote
</span></span><span class="line"><span class="cl">$ tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── exploits
</span></span><span class="line"><span class="cl">├── gobuster
</span></span><span class="line"><span class="cl">├── logs
</span></span><span class="line"><span class="cl">├── loot
</span></span><span class="line"><span class="cl">├── nmap
</span></span><span class="line"><span class="cl">├── post-exploits
</span></span><span class="line"><span class="cl">└── ssh-keys
</span></span></code></pre></div><h2 id="ssh-configuration">SSH Configuration</h2>
<p>I have always use a separate SSH keys for CTF. My SSH key for CTF is using ed25519. You can create one using the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ssh-keygen -a <span class="m">100</span> -t ed25519 -f ~/.ssh/ctf_ssh
</span></span></code></pre></div><p>After that, register your private key to SSH agent.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>ssh-agent -s<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">$ ssh-add ~/.ssh/ctf_ssh
</span></span></code></pre></div><p>Since HackTheBox machine starts with IP address of <code>10.10.*</code>, add these lines to your SSH config (<code>~/.ssh/config</code>). Create one if you don&rsquo;t have it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Host 10.10.*
</span></span><span class="line"><span class="cl">  IdentityFile ~/.ssh/ctf_ssh
</span></span></code></pre></div><p>With the config above, whenever I injected my public key (<code>/.ssh/ctf_ssh.pub</code>) to HackTheBox machine for <a href="https://fahmifj.github.io/blog/linux-backdoors-and-where-to-find-them/"target="_blank" rel="noopener noreferrer"
>persistence access</a>, I don&rsquo;t have to specify <code>-i /path/to/ssh/private/key</code> anymore, but just with  <code>$ ssh machine-name@hostname</code>.</p>
<h2 id="qterminal-configuration">QTerminal Configuration</h2>
<p>Unfortunately I&rsquo;m not a tmux user here. Tmux is rich in features, but I&rsquo;m not comfortable with its prefix key. So far, I&rsquo;ve always used the default QTerminal application and leveraged its shortcut feature to &rsquo;navigate&rsquo; a slightly faster in terminal.</p>
<p>If you&rsquo;re a Windows Terminal user, you&rsquo;ll familiar with some of these shortcuts:</p>
<ul>
<li><strong><code>ALT + Arrows</code></strong>: Move cursor in subterminal</li>
<li><strong><code>CTRL + TAB</code></strong>: Navigate between tabs</li>
<li><strong><code>CTRL + Arrow Left</code></strong>:  Previous tab</li>
<li><strong><code>CTRL + Arrow Right</code></strong>: Next tab</li>
<li><strong><code>CTRL + N</code></strong> : New terminal tab</li>
<li><strong><code>CTRL + SHIFT + W</code></strong> : Close current subterminal</li>
<li><strong><code>CTRL + SHIFT + =</code></strong> : Split terminal vertically</li>
<li><strong><code>CTRL + SHIFT + -</code></strong> : Split terminal horizontally</li>
<li><strong><code>CTRL + SHIFT + F</code></strong> : Open search bar in terminal</li>
<li><strong><code>CTRL + =</code></strong> : Zoom in</li>
<li><strong><code>CTRL + -</code></strong> : Zoom out</li>
</ul>
<p>For me, the only limitation here is that there is no shortcut for resizing a subterminal.</p>
<h2 id="bundle-them-with-omz-plugin">Bundle Them with OMZ Plugin</h2>
<p>If you&rsquo;re a <a href="https://ohmyz.sh/#install"target="_blank" rel="noopener noreferrer"
>Oh My Zsh</a> user like me, we can add these configurations (excluding SSH and QTerminal configurations) into a custom plugin.</p>
<p>Save the following script to  <code>/home/&lt;username&gt;/.oh-my-zsh/custom/plugins/ctf/ctf.plugin.zsh</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> get_ip<span class="o">(){</span>
</span></span><span class="line"><span class="cl">   <span class="c1"># It can be thm or htb IP</span>
</span></span><span class="line"><span class="cl">   <span class="nv">tunnel_ip</span><span class="o">=</span><span class="sb">`</span>ifconfig tun0 2&gt;/dev/null <span class="p">|</span> grep netmask <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span> 
</span></span><span class="line"><span class="cl">   <span class="c1"># Use eth0 as default IP,</span>
</span></span><span class="line"><span class="cl">   <span class="nv">default_ip</span><span class="o">=</span><span class="sb">`</span>ifconfig eth0 2&gt;/dev/null <span class="p">|</span> grep netmask <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="o">[[</span> <span class="nv">$tunnel_ip</span> <span class="o">==</span> *<span class="s2">&#34;10.&#34;</span>* <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">      <span class="nb">echo</span> <span class="nv">$tunnel_ip</span>
</span></span><span class="line"><span class="cl">   <span class="k">else</span>
</span></span><span class="line"><span class="cl">      <span class="nb">echo</span> <span class="nv">$default_ip</span>
</span></span><span class="line"><span class="cl">   <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> mknote<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  mkdir nmap gobuster loot logs exploits ssh-keys dump post-exploits
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># https://askubuntu.com/questions/750419/how-do-i-run-a-sudo-command-needing-password-input-in-the-background</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">sudo</span><span class="o">=</span><span class="s1">&#39;sudo -v; [ $? ] &amp;&amp; sudo &#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbon</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-sg.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbfort</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-fortress.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbrel</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-release.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">thmon</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/thm.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">thmwreath</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/thm-wreath.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">kvpn</span><span class="o">=</span><span class="s1">&#39;pkill openvpn&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">hostit</span><span class="o">=</span><span class="s1">&#39;python3 -m http.server -d ~/tools 8000&#39;</span>
</span></span></code></pre></div><p>The next step depends on your theme. I use a theme called <code>robbyrussell</code>.</p>
<p>I created a copy of the theme in <code> /home/kali/.oh-my-zsh/custom/themes/robbyrussell.zsh-theme</code>. Then I modified the theme to display IP address and switched to two lines prompt.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">NEWLINE</span><span class="o">=</span><span class="s1">$&#39;\n$&#39;</span> 
</span></span><span class="line"><span class="cl"><span class="nv">PROMPT</span><span class="o">=</span><span class="s1">&#39;%(?:%{$fg_bold[green]%}→:%{$fg_bold[red]%}→)&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">PROMPT</span><span class="o">+=</span><span class="s1">&#39; %F{4}%n@%m %{$fg[cyan]%}«%c»%{$reset_color%}&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">PROMPT</span><span class="o">+=</span><span class="s1">&#39; %B%F{152}«$(get_ip)»%f%b $(git_prompt_info)&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">PROMPT</span><span class="o">+=</span><span class="s2">&#34;%F{31}</span><span class="si">${</span><span class="nv">NEWLINE</span><span class="si">}</span><span class="s2"> %f&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">ZSH_THEME_GIT_PROMPT_PREFIX</span><span class="o">=</span><span class="s2">&#34;%{</span><span class="nv">$fg_bold</span><span class="s2">[blue]%}git:(%{</span><span class="nv">$fg</span><span class="s2">[red]%}&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">ZSH_THEME_GIT_PROMPT_SUFFIX</span><span class="o">=</span><span class="s2">&#34;%{</span><span class="nv">$reset_color</span><span class="s2">%} &#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">ZSH_THEME_GIT_PROMPT_DIRTY</span><span class="o">=</span><span class="s2">&#34;%{</span><span class="nv">$fg</span><span class="s2">[blue]%}) %{</span><span class="nv">$fg</span><span class="s2">[yellow]%}✗&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">ZSH_THEME_GIT_PROMPT_CLEAN</span><span class="o">=</span><span class="s2">&#34;%{</span><span class="nv">$fg</span><span class="s2">[blue]%})&#34;</span>
</span></span></code></pre></div><p>Finally, load the <code>ctf</code> plugin we created in <code>.zshrc</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl"><span class="c1"># Which plugins would you like to load?</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Standard plugins can be found in $ZSH/plugins/</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Custom plugins may be added to $ZSH_CUSTOM/plugins/</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Example format: plugins=(rails git textmate ruby lighthouse)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Add wisely, as too many plugins slow down shell startup.</span>
</span></span><span class="line"><span class="cl"><span class="nv">plugins</span><span class="o">=(</span>git ctf<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><p>Restart your terminal and we&rsquo;re done.</p>
<p><div class="img-container"><img src="imgs/image-20210711221808834.png" alt="image-20210711221808834"  /></div>
</p>
<p>And that&rsquo;s all for this post!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Building Virtual Home Lab for Pentesting</title>
      <link>https://fahmifj.github.io/articles/building-virtual-home-lab-for-pentest/</link>
      <pubDate>Thu, 17 Jun 2021 14:04:24 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/articles/building-virtual-home-lab-for-pentest/</guid>
      <description>With 8 gigs!</description>
      <content:encoded><![CDATA[<p>This is my personal documentation on setting up a basic pentesting lab in a virtual environment to learn some AD attack scenarios, network pivoting, and C2 (command &amp; control) with <code>metasploit</code>.</p>
<h2 id="prerequisites">Prerequisites</h2>
<h3 id="knowledge">Knowledge</h3>
<ul>
<li>Virtualization and VirtualBox</li>
<li>Windows OS and Server Installation</li>
<li>Basics knowledge of Windows/Windows Server (Desktop/GUI version)/</li>
<li>Basics knowledge of Active Directory:
<ul>
<li>AD Domain</li>
<li>Principle name</li>
<li>DNS</li>
</ul>
</li>
<li>Basics knowledge of Networking (routing).</li>
</ul>
<h3 id="hardware">Hardware</h3>
<p>The following are the main specifications that I recommend, the list is sorted by priority.</p>
<ul>
<li>Storage: 256 GB minimum, SSD is a must for server, or use high speed USB 3.1/ type C drive.</li>
<li>RAM: 8 GB of minimum, 16 GB recommended dual channel.</li>
<li>CPU: AMD Ryzen 3 or Intel i3 6th (minimum), AMD Ryzen 5+ with H prefix or i5+ 6th gen with K/H prefix. (recommended).
<ul>
<li>4th gen of i7 is still worth though.</li>
</ul>
</li>
</ul>
<p>For me, I used a single MSI laptop with the minimum requirements, except for the CPU.</p>
<h3 id="software">Software</h3>
<ul>
<li>VirtualBox (<a href="https://www.virtualbox.org/wiki/Downloads"target="_blank" rel="noopener noreferrer"
>Download</a>)</li>
<li>Kali Linux image file (<a href="https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/#1572305786534-030ce714-cc3b"target="_blank" rel="noopener noreferrer"
>Download</a>)</li>
<li>Windows 10 evaluation image file (<a href="https://www.microsoft.com/en-us/evalcenter/"target="_blank" rel="noopener noreferrer"
>Download</a>)</li>
<li>Windows Server 2019 evaluation image file (<a href="https://www.microsoft.com/en-us/evalcenter/"target="_blank" rel="noopener noreferrer"
>Download</a>)</li>
</ul>
<h2 id="topology">Topology</h2>
<p>I know my topology is bad.</p>
<p><div class="img-container"><img src="imgs/topology.jpg" alt=""  /></div>
</p>
<blockquote>
<p>Note: It&rsquo;s NIC (Network Interface Card) not NC</p>
</blockquote>
<p>For pivoting, I removed the Windows 10 inside network range of <code>10.10.10.100/28</code> from AD Domain.</p>
<h2 id="setup">Setup</h2>
<h3 id="vm-system-configuration">VM System Configuration</h3>
<h4 id="system">System</h4>
<p>Initial for installation</p>
<ul>
<li>Server: 2424 MB of RAM</li>
<li>Client: x2 1280 MB of RAM</li>
</ul>
<p>After installation (removed style/desktop/disable junk service)</p>
<ul>
<li>Server: 1280 MB of RAM</li>
<li>Client: 1024 MB of RAM</li>
<li>Attacking machine: 1024MB of RAM</li>
</ul>
<p>Trust me, I use 8 GB to host these VM. 😂</p>
<ul>
<li>Windows 2019 = Server</li>
<li>Windows 10 = Client</li>
<li>Kali Linux/Armed Ubuntu = Attacker</li>
</ul>
<p>For initial setup, the two clients can <strong>stay inside</strong> <code>192.168.1.0/24</code> network.</p>
<h4 id="network">Network</h4>
<p>Server Adapter 1:</p>
<p><div class="img-container"><img src="imgs/image-20210617143401181.png" alt="image-20210617143401181"  /></div>
</p>
<h3 id="setting-up-server">Setting up Server</h3>
<h4 id="initial-setup">Initial setup</h4>
<ul>
<li>Admin credentials: <code>administrator:p@$$w0rd!</code></li>
<li>PC Name: <code>server19-DC</code> (restart after)</li>
<li>Network (Static):
<ul>
<li>Adapter 1: 192.168.1.100/24</li>
<li>Adapter 2: 10.10.10.100/28</li>
</ul>
</li>
</ul>
<h4 id="promote-to-domain-controller">Promote to Domain Controller</h4>
<ul>
<li>Server Manager &gt; Manage &gt; Add Roles and Features.</li>
<li>Add Roles and Features Wizard:
<ul>
<li>Installation type: &ldquo;<strong>Role-based or feature-based installation</strong>&rdquo;</li>
<li>Server selection: <code>server19-DC</code></li>
<li>Server roles: <strong>&ldquo;Active Directory Domain Services&rdquo;</strong> and check the <strong>&ldquo;Include management tools&rdquo;</strong>.</li>
<li>Features: Check the <strong>&ldquo;Group Policy Management&rdquo;</strong></li>
<li>Confirmation:  Check on <strong>&ldquo;Restart destination server automatically if required&rdquo;</strong></li>
<li>Close after it&rsquo;s done.</li>
</ul>
</li>
<li>Server Manager &gt; Notification flag &gt; Click on <strong>&ldquo;Promote this server to a domain controller&rdquo;</strong></li>
<li>Active Directory Domain Services Configuration Wizard:
<ul>
<li>Deployment configuration: <strong>&ldquo;Add a new forest&rdquo;</strong> and set <strong>&ldquo;server19.local&rdquo;</strong> as root domain name</li>
<li>Domain controller options: set <strong>&ldquo;Windows Server 2016&rdquo;</strong> as FFL (Forest Functional Level) and DFL (Domain Functional Level). Checklist DNS server and set the same admin password for DSRM password.</li>
<li>Additional options: set NetBIOS domain name to <code>SERVER19</code></li>
<li>Let the rest options in default state until installation section.</li>
<li>Restart after installation complete.</li>
</ul>
</li>
</ul>
<p><div class="img-container"><img src="imgs/server19logon.jpg" alt=""  /></div>
</p>
<h4 id="domain-accounts">Domain Accounts</h4>
<ul>
<li>John Smith
<ul>
<li>User logon name: <code>jsmith@server19.local</code></li>
<li>Password: <code>jsmith@123</code></li>
</ul>
</li>
<li>Carl Smith
<ul>
<li>User logon name: <code>cmisth@server19.local</code></li>
<li>Password: <code>@csmith@</code></li>
</ul>
</li>
</ul>
<p>All password is set to never expires.</p>
<h4 id="service-account">Service Account</h4>
<p>Fake SQL Service</p>
<ul>
<li>User logon name: <code>SQLService@server19.local</code></li>
<li>Password: <code>Mysql@Password123</code></li>
</ul>
<p>Set service principle name:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">setspn -a SERVER19-DC/SQLService.SERVER19.local:60111 SERVER19\SQLService
</span></span><span class="line"><span class="cl">setspn -T SERVER19.local -Q */*
</span></span></code></pre></div><h4 id="configure-file-sharing-smb">Configure File Sharing (SMB):</h4>
<ul>
<li>Server manager &gt; File and Storage Services &gt; Shares &gt; Task &gt; New Share.</li>
<li>New Share Wizard:
<ul>
<li>Profile: SMB Share Quick</li>
<li>Share Location: <code>C:\Shares\DATA</code> (Create the Shares folder in C:)</li>
<li>Other Settings: Allow caching of share</li>
<li>Permission: Leave it default</li>
<li>Confirmation and create.</li>
</ul>
</li>
</ul>
<h3 id="setting-up-client">Setting up Client</h3>
<h4 id="initial-setup-1">Initial setup</h4>
<ul>
<li>Client 1:
<ul>
<li>IP: 192.168.1.101 (static)</li>
<li>PC name: NESCOFFEE</li>
</ul>
</li>
<li>Client 2:
<ul>
<li>IP: 192.168.1.102 (static)</li>
<li>PC name: MILO</li>
</ul>
</li>
</ul>
<h4 id="local-accounts">Local Accounts</h4>
<p>Same with domain accounts, but add an <code>L</code> at the end of username/password.</p>
<ul>
<li>Username: <code>cmisthL</code>, password: <code>jsmithL@123</code></li>
<li>Username: <code>jsmithL</code>, password: <code>@csmith@</code></li>
</ul>
<h4 id="join-domain">Join Domain</h4>
<p>Client 1:</p>
<ul>
<li>Use Server&rsquo;s IP as DNS server: <code>192.168.1.100</code></li>
<li>Hit <code>Win+I</code>, type &ldquo;access&rdquo;, click on <strong>Connect</strong>.</li>
<li>Microsoft account window:
<ul>
<li>Click on <strong>&ldquo;Join this device to a local Active Directory domain&rdquo;</strong> under the alternate actions.</li>
<li>Use the server administrator password to join.</li>
<li>Skip the <strong>Add an account</strong> section</li>
<li>Restart</li>
</ul>
</li>
</ul>
<p>Client 2 has the same steps</p>
<h4 id="local-admin">Local Admin:</h4>
<ul>
<li>Set John Smith (<code>jsmith@server19.local</code>) as local administrator for NESCOFFEE.</li>
<li>Set Carl Smith (<code>cmisth@server19.local</code>) as local administrator for MILO.</li>
</ul>
<h3 id="setting-up-attacking-machine">Setting up Attacking Machine</h3>
<ul>
<li>Put it on the same network</li>
<li>Set static IP: 192.168.1.10</li>
</ul>
<h2 id="ad-attack-scenarios">AD Attack Scenarios</h2>
<p>Here are some attack scenarios:</p>
<ul>
<li>LLMNR Poisoning - <a href="https://www.aptive.co.uk/blog/llmnr-nbt-ns-spoofing/"target="_blank" rel="noopener noreferrer"
>https://www.aptive.co.uk/blog/llmnr-nbt-ns-spoofing/</a></li>
<li>AS-REP Roasting
<ul>
<li>Example attacks: <a href="/tags/asrep-roasting"target="_blank" rel="noopener noreferrer"
>ASREP-Roasting tags</a></li>
</ul>
</li>
<li>Kerberoasting  - <a href="https://pentestlab.blog/2018/06/12/kerberoast/"target="_blank" rel="noopener noreferrer"
>https://pentestlab.blog/2018/06/12/kerberoast/</a></li>
<li>Take Over IPv6 DNS - <a href="https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/"target="_blank" rel="noopener noreferrer"
>https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/</a></li>
<li>DCSync
<ul>
<li>Example attacks: <a href="/tags/dcsync/"target="_blank" rel="noopener noreferrer"
>DCSync tags</a></li>
</ul>
</li>
</ul>
<p>Attack scenario(s) that requires two clients online + server:</p>
<ul>
<li>SMB Relay - <a href="https://akimboviper.gitbook.io/pentest-everything/everything/everything-windows/attacking-windows/relay-attacks/smb-relay"target="_blank" rel="noopener noreferrer"
>https://akimboviper.gitbook.io/pentest-everything/everything/everything-windows/attacking-windows/relay-attacks/smb-relay</a>
<ul>
<li>Example attacks: <a href="/writeups/hackthebox/htb-apt/"target="_blank" rel="noopener noreferrer"
>HackTheBox - APT</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setup VulnHub Machines</title>
      <link>https://fahmifj.github.io/articles/setup-vulnhub-machines/</link>
      <pubDate>Mon, 31 May 2021 03:56:18 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/articles/setup-vulnhub-machines/</guid>
      <description>Geting started with boot2root using VulnHub machines. It&amp;#39;s free and explorable!</description>
      <content:encoded><![CDATA[<p>Hello!</p>
<p>You may have seen that most of my posts are writeups/solutions for Hack The Box machines, but have you ever heard about Vulnhub?</p>
<p>VulnHub is platform that provides you vulnerable machines, in the form of VM images, that you can download and deploy locally for those who wants to get a hands-on experience in penetration testing. Unlike HackTheBox and TryHackMe, which require a VPN connection, VulnHub allows you to work entirely offline. But, since Windows machine requires a license, most VulnHub machines are Linux-based servers.</p>
<p>There are a lot of things you can do with VulnHub machines after you get the root access, such as:</p>
<ul>
<li>Analyzing the vulnerability, if it involves an insecure code, you can try to patch it.</li>
<li>Learning how the authors configure the machines.</li>
<li>Building a pentest lab that consists of VulnHub machines to practice network pivoting.</li>
<li>DFIR</li>
<li>Implements a detection rule in your SIEM</li>
<li>Many more!</li>
</ul>
<p>In this post, I would like to share a quick tutorial on how to setup a VulnHub machine on your local network. I’ll assume that you are already familiar with virtualization and some basics of networking. If you’re not, just follow along !</p>
<h2 id="install-virtualization-software">Install Virtualization Software</h2>
<p>First thing first, you need a virtualization software such as VirtualBox or VMWare. Here is the links for both software:</p>
<ul>
<li>VirtualBox - <a href="https://www.virtualbox.org/wiki/Downloads"target="_blank" rel="noopener noreferrer"
>https://www.virtualbox.org/wiki/Downloads</a></li>
<li>VMWare - <a href="https://www.vmware.com/products/workstation-player.html"target="_blank" rel="noopener noreferrer"
>https://www.vmware.com/products/workstation-player.html</a></li>
</ul>
<p>I personally use VirtualBox (Windows) because it&rsquo;s easy to use (and of course, it&rsquo;s free).</p>
<h2 id="download-vm-images">Download VM Images</h2>
<p>Now get your VulnHub machines/VM images at VulnHub’s official site: <a href="https://www.vulnhub.com/"target="_blank" rel="noopener noreferrer"
>https://www.vulnhub.com/</a>. In this post, I&rsquo;ll be using <strong>symfonos: 2</strong>.</p>
<p><div class="img-container"><img src="imgs/image-20210531055642315.png" alt="image-20210531055642315"  /></div>
</p>
<h2 id="import-the-vm-image">Import the VM image</h2>
<p>If the image is a <code>7z</code> or  <code>zip</code> format make sure to decompress it first. In my case, <strong>symfonos: 2</strong> is on <code>7z</code> format, therefor I have to decompress it.</p>
<p>Here&rsquo;s what I have after decompressing it.</p>
<p><div class="img-container"><img src="imgs/image-20210531060413952.png" alt="image-20210531060413952"  /></div>
</p>
<p>If you use VirtualBox, any <code>.ovf</code> file should already be associated with the app so we can just double click on that file and it will take us straight to the import menu.</p>
<p><div class="img-container"><img src="imgs/image-20210531060734397.png" alt="image-20210531060734397"  /></div>
</p>
<p>If that&rsquo;s not the case, just open up your VirtualBox then click on <code>File -&gt; select &quot;Import Appliance...&quot;</code>. It will pop a new window.</p>
<p><div class="img-container"><img src="imgs/image-20210531061142323.png" alt="image-20210531061142323"  /></div>
</p>
<p>Next, click on the icon that I marked with a red box to browse your VM image.</p>
<p><div class="img-container"><img src="imgs/image-20210531061327937.png" alt="image-20210531061327937"  /></div>
</p>
<p>Locate your VM image and then click on the <strong>Open</strong> button.</p>
<p><div class="img-container"><img src="imgs/image-20210531061601700.png" alt="image-20210531061601700"  /></div>
</p>
<p>For now let&rsquo;s leave all the settings to its default.</p>
<p><div class="img-container"><img src="imgs/image-20210531061941128.png" alt="image-20210531061941128"  /></div>
</p>
<p>Click on the <strong>Import</strong> button and wait until it completed.</p>
<p><div class="img-container"><img src="imgs/image-20210531062110160.png" alt="image-20210531062110160"  /></div>
</p>
<p>When the import is done, you will see the machine on the VM list section</p>
<p><div class="img-container"><img src="imgs/image-20210531062327615.png" alt="image-20210531062327615"  /></div>
</p>
<h2 id="setting-up-the-network">Setting up the Network</h2>
<p>In this section, we&rsquo;ll be putting the VM in isolated network.</p>
<p>Open the VM&rsquo;s settings by <code>Right Click -&gt; &quot;Settings&quot;</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210531062432466.png" alt="image-20210531062432466"  /></div>
</p>
<p>Go to the <strong>Network</strong> section, and set the &ldquo;Attached to&rdquo; to <code>Host-only Adapter</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210531062849952.png" alt="image-20210531062849952"  /></div>
</p>
<p>Click <strong>OK</strong> button.</p>
<p>Now open the adapter configuration on <code>File  -&gt; select &quot;Host Network Manager...&quot;</code></p>
<p><div class="img-container"><img src="imgs/image-20210531065114863.png" alt="image-20210531065114863"  /></div>
</p>
<p>In the image below, the “VirtualBox Host-Only Ethernet Adapter” will be using a network range of <code>192.168.2.0/24</code> and has DHCP server enabled which is needed by VulnHub machines to obtain IP address automatically on boot.</p>
<p><div class="img-container"><img src="imgs/image-20210531065555859.png" alt="image-20210531065555859"  /></div>
</p>
<p><code>192.168.2.2</code> is the IP address of the virtual adapter on the host side while <code>192.168.2.1</code> is the IP address of the built-in DHCP server from VirtualBox.</p>
<p>Below is the configuration for the DHCP server.</p>
<p><div class="img-container"><img src="imgs/image-20210531065945260.png" alt="image-20210531065945260"  /></div>
</p>
<p>I set my <code>Lower Address Bound</code>  to <code>192.168.2.100</code> and <code>Upper Address Bound</code> to <code>192.168.2.254</code>, so that all machines will be assigned with an IP started from <code>.100-254</code>, and no one gets <code>192.168.2.3-99</code>.</p>
<p><em>Can I configure it to <code>10.10.10.0/24</code>?</em></p>
<p>Yes you can!</p>
<p>If we want to create a <code>10.10.10.0/24</code> network, it&rsquo;s better to create another adapter by clicking the <strong>Create</strong> menu (you don&rsquo;t say) then set the adapter&rsquo;s settings with</p>
<div class="force-center">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>IPv4 Address</td>
<td><code>10.10.10.2</code> (Adapter on the host side)</td>
</tr>
<tr>
<td>IPv4 Network Mask</td>
<td><code>255.255.255.0</code></td>
</tr>
</tbody>
</table>
</div>
<p><div class="img-container"><img src="imgs/image-20210531072801277.png" alt="image-20210531072801277"  /></div>
</p>
<p>Next, configure the DHCP server to:</p>
<div class="force-center">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Server Address</td>
<td><code>10.10.10.1</code> (VirtualBox&rsquo;s built-in DHCP server)</td>
</tr>
<tr>
<td>Server Mask</td>
<td><code>255.255.255.0 </code></td>
</tr>
<tr>
<td>Lower Address Bound</td>
<td><code>10.10.10.100</code></td>
</tr>
<tr>
<td>Upper Address Bound</td>
<td><code>10.10.10.254</code></td>
</tr>
</tbody>
</table>
</div>
<p><div class="img-container"><img src="imgs/image-20210531072833605.png" alt="image-20210531072833605"  /></div>
</p>
<p>Then, on the VM settings (<strong>symfonos: 2</strong>), change the adapter name with the new one we created before</p>
<p><div class="img-container"><img src="imgs/image-20210531072939206.png" alt="image-20210531072939206"  /></div>
</p>
<p>Lastly, we should also configure the attacking machine, in my case it’s Kali Linux, to use the same network adapter.</p>
<p><div class="img-container"><img src="imgs/image-20210531075306992.png" alt="image-20210531075306992"  /></div>
</p>
<h2 id="boot-it">Boot it!</h2>
<p>Boot your machines and we&rsquo;re done!</p>
<p><div class="img-container"><img src="imgs/image-20210531075144142.png" alt="image-20210531075144142"  /></div>
</p>
<p>Happy hacking!</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
